package resolvers

import (
	"context"
	"fmt"
	"path/filepath"
	"time"

	"github.com/google/uuid"
	"github.com/pkg/errors"

	"github.com/cms-enterprise/easi-app/pkg/apperrors"
	"github.com/cms-enterprise/easi-app/pkg/easiencoding"
	"github.com/cms-enterprise/easi-app/pkg/email"
	"github.com/cms-enterprise/easi-app/pkg/models"
	"github.com/cms-enterprise/easi-app/pkg/storage"
	"github.com/cms-enterprise/easi-app/pkg/upload"
)

func SendGRBReviewPresentationDeckReminderEmail(
	ctx context.Context,
	systemIntakeID uuid.UUID,
	emailClient *email.Client,
	store *storage.Store,
) (bool, error) {
	intake, err := store.FetchSystemIntakeByID(ctx, systemIntakeID)
	if err != nil {
		return false, err
	}

	if intake.RequesterEmailAddress.Ptr() == nil {
		return false, &apperrors.ResourceNotFoundError{Err: errors.New("no requester email address found")}
	}

	recipients := models.EmailNotificationRecipients{
		RegularRecipientEmails: []models.EmailAddress{
			models.NewEmailAddress(intake.RequesterEmailAddress.ValueOrZero()),
		},
		ShouldNotifyITGovernance: false,
		ShouldNotifyITInvestment: false,
	}

	err = emailClient.SystemIntake.SendPresentationDeckUploadReminder(
		ctx,
		recipients,
		intake.ID,
		intake.ProjectName.ValueOrZero(),
	)
	if err != nil {
		return false, err
	}

	curTime := time.Now().UTC()
	intake.GrbPresentationDeckRequesterReminderEmailSentTime = &curTime
	_, err = store.UpdateSystemIntake(ctx, intake)
	if err != nil {
		return true, err // return true to indicate email was sent, but include the error as the cache was not updated
	}

	return true, nil
}

func CreatePresentationDeck(
	ctx context.Context,
	store *storage.Store,
	s3Client *upload.S3Client,
	input models.CreatePresentationDeckInput,
) (*models.PresentationDeck, error) {
	s3Key := uuid.New().String()

	existingExtension := filepath.Ext(input.FileData.Filename)
	if existingExtension != "" {
		s3Key += existingExtension
	} else {
		s3Key += fallbackExtension
	}

	decodedReadSeeker, err := easiencoding.DecodeBase64File(&input.FileData.File)
	if err != nil {
		return nil, fmt.Errorf("...%w...FileName: %s", err, input.FileData.Filename) //Wrap error and provide filename
	}

	err = s3Client.UploadFile(s3Key, decodedReadSeeker)
	if err != nil {
		return nil, err
	}

	// Create a new PresentationDeck
	presentationDeck := &models.PresentationDeck{
		FileName: input.FileData.Filename,
		S3Key:    s3Key,
		Bucket:   s3Client.GetBucket(),
		// Status isn't saved in database - will be fetched from S3
		// URL isn't saved in database - will be generated by querying S3
	}

	return store.CreatePresentationDeck(ctx, presentationDeck)
}
