package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"

	"github.com/cms-enterprise/easi-app/pkg/appcontext"
	"github.com/cms-enterprise/easi-app/pkg/graph/generated"
	"github.com/cms-enterprise/easi-app/pkg/models"
)

// LockSystemProfileSection is the resolver for the lockSystemProfileSection field.
func (r *mutationResolver) LockSystemProfileSection(ctx context.Context, cedarSystemID string, section models.SystemProfileLockableSection) (bool, error) {
	if cedarSystemID == "" {
		return false, fmt.Errorf("cedarSystemID cannot be empty")
	}

	principal := appcontext.Principal(ctx)

	return LockSystemProfileSection(r.pubsub, cedarSystemID, section, principal)
}

// UnlockSystemProfileSection is the resolver for the unlockSystemProfileSection field.
func (r *mutationResolver) UnlockSystemProfileSection(ctx context.Context, cedarSystemID string, section models.SystemProfileLockableSection) (bool, error) {
	if cedarSystemID == "" {
		return false, fmt.Errorf("cedarSystemID cannot be empty")
	}

	account := appcontext.Principal(ctx).Account()

	if account == nil {
		return false, fmt.Errorf("failed to unlock section [%v], unable to retrieve user account", section)
	}

	return UnlockSystemProfileSection(r.pubsub, cedarSystemID, section, account.ID, models.LockActionTypeNormal)
}

// UnlockAllSystemProfileSections is the resolver for the unlockAllSystemProfileSections field.
func (r *mutationResolver) UnlockAllSystemProfileSections(ctx context.Context, cedarSystemID string) ([]*models.SystemProfileSectionLockStatus, error) {
	if cedarSystemID == "" {
		return nil, fmt.Errorf("cedarSystemID cannot be empty")
	}

	return UnlockAllSystemProfileSections(r.pubsub, cedarSystemID)
}

// SystemProfileSectionLocks is the resolver for the systemProfileSectionLocks field.
func (r *queryResolver) SystemProfileSectionLocks(ctx context.Context, cedarSystemID string) ([]*models.SystemProfileSectionLockStatus, error) {
	if cedarSystemID == "" {
		return nil, fmt.Errorf("cedarSystemID cannot be empty")
	}

	return GetSystemProfileSectionLocks(cedarSystemID)
}

// OnSystemProfileSectionLockStatusChanged is the resolver for the onSystemProfileSectionLockStatusChanged field.
func (r *subscriptionResolver) OnSystemProfileSectionLockStatusChanged(ctx context.Context, cedarSystemID string) (<-chan *models.SystemProfileSectionLockStatusChanged, error) {
	if cedarSystemID == "" {
		return nil, fmt.Errorf("cedarSystemID cannot be empty")
	}

	principal := appcontext.Principal(ctx)

	return OnSystemProfileSectionLockStatusChanged(ctx, r.pubsub, cedarSystemID, principal, ctx.Done())
}

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
