package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"errors"
	"slices"
	"strconv"
	"time"

	"github.com/google/uuid"
	"github.com/guregu/null"

	"github.com/cms-enterprise/easi-app/pkg/appcontext"
	"github.com/cms-enterprise/easi-app/pkg/apperrors"
	cedarcore "github.com/cms-enterprise/easi-app/pkg/cedar/core"
	"github.com/cms-enterprise/easi-app/pkg/dataloaders"
	"github.com/cms-enterprise/easi-app/pkg/email"
	"github.com/cms-enterprise/easi-app/pkg/graph/generated"
	"github.com/cms-enterprise/easi-app/pkg/helpers"
	"github.com/cms-enterprise/easi-app/pkg/models"
	"github.com/cms-enterprise/easi-app/pkg/services"
	"github.com/cms-enterprise/easi-app/pkg/userhelpers"
)

// AlternativeASolution is the resolver for the alternativeASolution field.
func (r *businessCaseResolver) AlternativeASolution(ctx context.Context, obj *models.BusinessCase) (*models.BusinessCaseSolution, error) {
	return &models.BusinessCaseSolution{
		AcquisitionApproach:     obj.AlternativeAAcquisitionApproach.Ptr(),
		Cons:                    obj.AlternativeACons.Ptr(),
		CostSavings:             obj.AlternativeACostSavings.Ptr(),
		HasUI:                   obj.AlternativeAHasUI.Ptr(),
		HostingCloudServiceType: obj.AlternativeAHostingCloudServiceType.Ptr(),
		HostingCloudStrategy:    obj.AlternativeAHostingCloudStrategy.Ptr(),
		HostingLocation:         obj.AlternativeAHostingLocation.Ptr(),
		HostingType:             obj.AlternativeAHostingType.Ptr(),
		Pros:                    obj.AlternativeAPros.Ptr(),
		SecurityIsApproved:      obj.AlternativeASecurityIsApproved.Ptr(),
		SecurityIsBeingReviewed: obj.AlternativeASecurityIsBeingReviewed.Ptr(),
		Summary:                 obj.AlternativeASummary.Ptr(),
		TargetContractAwardDate: obj.AlternativeATargetContractAwardDate,
		TargetCompletionDate:    obj.AlternativeATargetCompletionDate,
		Title:                   obj.AlternativeATitle.Ptr(),
		WorkforceTrainingReqs:   obj.AlternativeAWorkforceTrainingReqs.Ptr(),
		ZeroTrustAlignment:      obj.AlternativeAZeroTrustAlignment.Ptr(),
	}, nil
}

// AlternativeBSolution is the resolver for the alternativeBSolution field.
func (r *businessCaseResolver) AlternativeBSolution(ctx context.Context, obj *models.BusinessCase) (*models.BusinessCaseSolution, error) {
	return &models.BusinessCaseSolution{
		AcquisitionApproach:     obj.AlternativeBAcquisitionApproach.Ptr(),
		Cons:                    obj.AlternativeBCons.Ptr(),
		CostSavings:             obj.AlternativeBCostSavings.Ptr(),
		HasUI:                   obj.AlternativeBHasUI.Ptr(),
		HostingCloudServiceType: obj.AlternativeBHostingCloudServiceType.Ptr(),
		HostingCloudStrategy:    obj.AlternativeBHostingCloudStrategy.Ptr(),
		HostingLocation:         obj.AlternativeBHostingLocation.Ptr(),
		HostingType:             obj.AlternativeBHostingType.Ptr(),
		Pros:                    obj.AlternativeBPros.Ptr(),
		SecurityIsApproved:      obj.AlternativeBSecurityIsApproved.Ptr(),
		SecurityIsBeingReviewed: obj.AlternativeBSecurityIsBeingReviewed.Ptr(),
		Summary:                 obj.AlternativeBSummary.Ptr(),
		TargetContractAwardDate: obj.AlternativeBTargetContractAwardDate,
		TargetCompletionDate:    obj.AlternativeBTargetCompletionDate,
		Title:                   obj.AlternativeBTitle.Ptr(),
		WorkforceTrainingReqs:   obj.AlternativeBWorkforceTrainingReqs.Ptr(),
		ZeroTrustAlignment:      obj.AlternativeBZeroTrustAlignment.Ptr(),
	}, nil
}

// LifecycleCostLines is the resolver for the lifecycleCostLines field.
func (r *businessCaseResolver) LifecycleCostLines(ctx context.Context, obj *models.BusinessCase) ([]*models.EstimatedLifecycleCost, error) {
	return GetLifecycleCostLinesByBusinessCaseID(ctx, obj.ID)
}

// PreferredSolution is the resolver for the preferredSolution field.
func (r *businessCaseResolver) PreferredSolution(ctx context.Context, obj *models.BusinessCase) (*models.BusinessCaseSolution, error) {
	return &models.BusinessCaseSolution{
		AcquisitionApproach:     obj.PreferredAcquisitionApproach.Ptr(),
		Cons:                    obj.PreferredCons.Ptr(),
		CostSavings:             obj.PreferredCostSavings.Ptr(),
		HasUI:                   obj.PreferredHasUI.Ptr(),
		HostingCloudServiceType: obj.PreferredHostingCloudServiceType.Ptr(),
		HostingCloudStrategy:    obj.PreferredHostingCloudStrategy.Ptr(),
		HostingLocation:         obj.PreferredHostingLocation.Ptr(),
		HostingType:             obj.PreferredHostingType.Ptr(),
		Pros:                    obj.PreferredPros.Ptr(),
		SecurityIsApproved:      obj.PreferredSecurityIsApproved.Ptr(),
		SecurityIsBeingReviewed: obj.PreferredSecurityIsBeingReviewed.Ptr(),
		Summary:                 obj.PreferredSummary.Ptr(),
		TargetContractAwardDate: obj.PreferredTargetContractAwardDate,
		TargetCompletionDate:    obj.PreferredTargetCompletionDate,
		Title:                   obj.PreferredTitle.Ptr(),
		WorkforceTrainingReqs:   obj.PreferredWorkforceTrainingReqs.Ptr(),
		ZeroTrustAlignment:      obj.PreferredZeroTrustAlignment.Ptr(),
	}, nil
}

// SystemIntake is the resolver for the systemIntake field.
func (r *businessCaseResolver) SystemIntake(ctx context.Context, obj *models.BusinessCase) (*models.SystemIntake, error) {
	return r.store.FetchSystemIntakeByID(ctx, obj.SystemIntakeID)
}

// BudgetActualCost is the resolver for the budgetActualCost field.
func (r *cedarBudgetSystemCostResolver) BudgetActualCost(ctx context.Context, obj *models.CedarBudgetSystemCost) ([]*models.CedarBudgetActualCost, error) {
	budgetActualCosts := obj.BudgetActualCosts

	if len(budgetActualCosts) == 0 {
		return nil, nil
	}

	var actualCosts []*models.CedarBudgetActualCost
	for _, cost := range budgetActualCosts {
		fyCost := &models.CedarBudgetActualCost{
			ActualSystemCost: cost.ActualSystemCost.Ptr(),
			FiscalYear:       cost.FiscalYear.Ptr(),
			SystemID:         cost.SystemID.Ptr(),
		}
		actualCosts = append(actualCosts, fyCost)
	}

	return actualCosts, nil
}

// SoftwareProducts is the resolver for the softwareProducts field.
func (r *cedarSoftwareProductsResolver) SoftwareProducts(ctx context.Context, obj *models.CedarSoftwareProducts) ([]*models.CedarSoftwareProductItem, error) {
	softwareProducts := obj.SoftwareProducts

	if len(softwareProducts) == 0 {
		return nil, nil
	}

	var softwareProductItems []*models.CedarSoftwareProductItem
	for _, softwareProduct := range softwareProducts {
		softwareProductItem := &models.CedarSoftwareProductItem{
			APIGatewayUse:                  &softwareProduct.APIGatewayUse,
			ElaPurchase:                    softwareProduct.ElaPurchase.Ptr(),
			ElaVendorID:                    softwareProduct.ElaVendorID.Ptr(),
			ProvidesAiCapability:           &softwareProduct.ProvidesAiCapability,
			Refstr:                         softwareProduct.Refstr.Ptr(),
			SoftwareCatagoryConnectionGUID: softwareProduct.SoftwareCatagoryConnectionGUID.Ptr(),
			SoftwareVendorConnectionGUID:   softwareProduct.SoftwareVendorConnectionGUID.Ptr(),
			SoftwareCost:                   softwareProduct.SoftwareCost.Ptr(),
			SoftwareElaOrganization:        softwareProduct.SoftwareElaOrganization.Ptr(),
			SoftwareName:                   softwareProduct.SoftwareName.Ptr(),
			SystemSoftwareConnectionGUID:   softwareProduct.SystemSoftwareConnectionGUID.Ptr(),
			TechnopediaCategory:            softwareProduct.TechnopediaCategory.Ptr(),
			TechnopediaID:                  softwareProduct.TechnopediaID.Ptr(),
			VendorName:                     softwareProduct.VendorName.Ptr(),
		}
		softwareProductItems = append(softwareProductItems, softwareProductItem)
	}

	return softwareProductItems, nil
}

// Author is the resolver for the author field.
func (r *governanceRequestFeedbackResolver) Author(ctx context.Context, obj *models.GovernanceRequestFeedback) (*models.UserInfo, error) {
	return GetGovernanceRequestFeedbackAuthor(ctx, obj.CreatedBy)
}

// IntakeFormStatus is the resolver for the intakeFormStatus field.
func (r *iTGovTaskStatusesResolver) IntakeFormStatus(ctx context.Context, obj *models.ITGovTaskStatuses) (models.ITGovIntakeFormStatus, error) {
	return IntakeFormStatus(obj.ParentSystemIntake)
}

// FeedbackFromInitialReviewStatus is the resolver for the feedbackFromInitialReviewStatus field.
func (r *iTGovTaskStatusesResolver) FeedbackFromInitialReviewStatus(ctx context.Context, obj *models.ITGovTaskStatuses) (models.ITGovFeedbackStatus, error) {
	return FeedbackFromInitialReviewStatus(obj.ParentSystemIntake)
}

// BizCaseDraftStatus is the resolver for the bizCaseDraftStatus field.
func (r *iTGovTaskStatusesResolver) BizCaseDraftStatus(ctx context.Context, obj *models.ITGovTaskStatuses) (models.ITGovDraftBusinessCaseStatus, error) {
	return BizCaseDraftStatus(obj.ParentSystemIntake)
}

// GrtMeetingStatus is the resolver for the grtMeetingStatus field.
func (r *iTGovTaskStatusesResolver) GrtMeetingStatus(ctx context.Context, obj *models.ITGovTaskStatuses) (models.ITGovGRTStatus, error) {
	return GrtMeetingStatus(obj.ParentSystemIntake)
}

// BizCaseFinalStatus is the resolver for the bizCaseFinalStatus field.
func (r *iTGovTaskStatusesResolver) BizCaseFinalStatus(ctx context.Context, obj *models.ITGovTaskStatuses) (models.ITGovFinalBusinessCaseStatus, error) {
	return BizCaseFinalStatus(obj.ParentSystemIntake)
}

// GrbMeetingStatus is the resolver for the grbMeetingStatus field.
func (r *iTGovTaskStatusesResolver) GrbMeetingStatus(ctx context.Context, obj *models.ITGovTaskStatuses) (models.ITGovGRBStatus, error) {
	return GrbMeetingStatus(ctx, obj.ParentSystemIntake)
}

// DecisionAndNextStepsStatus is the resolver for the decisionAndNextStepsStatus field.
func (r *iTGovTaskStatusesResolver) DecisionAndNextStepsStatus(ctx context.Context, obj *models.ITGovTaskStatuses) (models.ITGovDecisionStatus, error) {
	return DecisionAndNextStepsStatus(ctx, obj.ParentSystemIntake)
}

// CreateSystemIntakeActionProgressToNewStep is the resolver for the createSystemIntakeActionProgressToNewStep field.
func (r *mutationResolver) CreateSystemIntakeActionProgressToNewStep(ctx context.Context, input models.SystemIntakeProgressToNewStepsInput) (*models.UpdateSystemIntakePayload, error) {
	updatedIntake, err := ProgressIntake(
		ctx,
		r.store,
		r.emailClient,
		r.service.FetchUserInfo,
		input,
	)

	return &models.UpdateSystemIntakePayload{
		SystemIntake: updatedIntake,
	}, err
}

// CreateSystemIntakeActionRequestEdits is the resolver for the createSystemIntakeActionRequestEdits field.
func (r *mutationResolver) CreateSystemIntakeActionRequestEdits(ctx context.Context, input models.SystemIntakeRequestEditsInput) (*models.UpdateSystemIntakePayload, error) {
	intake, err := CreateSystemIntakeActionRequestEdits(
		ctx,
		r.store,
		r.emailClient,
		r.service.FetchUserInfo,
		input,
	)
	return &models.UpdateSystemIntakePayload{
		SystemIntake: intake,
	}, err
}

// CreateSystemIntakeActionExpireLcid is the resolver for the createSystemIntakeActionExpireLCID field.
func (r *mutationResolver) CreateSystemIntakeActionExpireLcid(ctx context.Context, input models.SystemIntakeExpireLCIDInput) (*models.UpdateSystemIntakePayload, error) {
	intake, err := ExpireLCID(
		ctx,
		r.store,
		r.emailClient,
		r.service.FetchUserInfo,
		input,
	)

	return &models.UpdateSystemIntakePayload{
		SystemIntake: intake,
	}, err
}

// CreateSystemIntakeActionUpdateLcid is the resolver for the createSystemIntakeActionUpdateLCID field.
func (r *mutationResolver) CreateSystemIntakeActionUpdateLcid(ctx context.Context, input models.SystemIntakeUpdateLCIDInput) (*models.UpdateSystemIntakePayload, error) {
	intake, err := UpdateLCID(
		ctx,
		r.store,
		r.emailClient,
		r.service.FetchUserInfo,
		input,
	)

	return &models.UpdateSystemIntakePayload{
		SystemIntake: intake,
	}, err
}

// CreateSystemIntakeActionRetireLcid is the resolver for the createSystemIntakeActionRetireLCID field.
func (r *mutationResolver) CreateSystemIntakeActionRetireLcid(ctx context.Context, input models.SystemIntakeRetireLCIDInput) (*models.UpdateSystemIntakePayload, error) {
	intake, err := RetireLCID(
		ctx,
		r.store,
		r.emailClient,
		r.service.FetchUserInfo,
		input,
	)

	return &models.UpdateSystemIntakePayload{
		SystemIntake: intake,
	}, err
}

// CreateSystemIntakeActionUnretireLcid is the resolver for the createSystemIntakeActionUnretireLCID field.
func (r *mutationResolver) CreateSystemIntakeActionUnretireLcid(ctx context.Context, input models.SystemIntakeUnretireLCIDInput) (*models.UpdateSystemIntakePayload, error) {
	intake, err := UnretireLCID(
		ctx,
		r.store,
		r.emailClient,
		r.service.FetchUserInfo,
		input,
	)

	return &models.UpdateSystemIntakePayload{
		SystemIntake: intake,
	}, err
}

// CreateSystemIntakeActionChangeLCIDRetirementDate is the resolver for the createSystemIntakeActionChangeLCIDRetirementDate field.
func (r *mutationResolver) CreateSystemIntakeActionChangeLCIDRetirementDate(ctx context.Context, input models.SystemIntakeChangeLCIDRetirementDateInput) (*models.UpdateSystemIntakePayload, error) {
	intake, err := ChangeLCIDRetirementDate(
		ctx,
		r.store,
		r.emailClient,
		r.service.FetchUserInfo,
		input,
	)

	return &models.UpdateSystemIntakePayload{
		SystemIntake: intake,
	}, err
}

// CreateSystemIntakeActionConfirmLcid is the resolver for the createSystemIntakeActionConfirmLCID field.
func (r *mutationResolver) CreateSystemIntakeActionConfirmLcid(ctx context.Context, input models.SystemIntakeConfirmLCIDInput) (*models.UpdateSystemIntakePayload, error) {
	intake, err := ConfirmLCID(
		ctx,
		r.store,
		r.emailClient,
		r.service.FetchUserInfo,
		input,
	)

	return &models.UpdateSystemIntakePayload{
		SystemIntake: intake,
	}, err
}

// CreateSystemIntakeActionIssueLcid is the resolver for the createSystemIntakeActionIssueLCID field.
func (r *mutationResolver) CreateSystemIntakeActionIssueLcid(ctx context.Context, input models.SystemIntakeIssueLCIDInput) (*models.UpdateSystemIntakePayload, error) {
	updatedIntake, err := IssueLCID(
		ctx,
		r.store,
		r.emailClient,
		r.service.FetchUserInfo,
		input,
	)

	return &models.UpdateSystemIntakePayload{
		SystemIntake: updatedIntake,
	}, err
}

// CreateSystemIntakeActionRejectIntake is the resolver for the createSystemIntakeActionRejectIntake field.
func (r *mutationResolver) CreateSystemIntakeActionRejectIntake(ctx context.Context, input models.SystemIntakeRejectIntakeInput) (*models.UpdateSystemIntakePayload, error) {
	updatedIntake, err := RejectIntakeAsNotApproved(
		ctx,
		r.store,
		r.emailClient,
		r.service.FetchUserInfo,
		input,
	)

	return &models.UpdateSystemIntakePayload{
		SystemIntake: updatedIntake,
	}, err
}

// CreateSystemIntakeActionReopenRequest is the resolver for the createSystemIntakeActionReopenRequest field.
func (r *mutationResolver) CreateSystemIntakeActionReopenRequest(ctx context.Context, input models.SystemIntakeReopenRequestInput) (*models.UpdateSystemIntakePayload, error) {
	intake, err := CreateSystemIntakeActionReopenRequest(
		ctx,
		r.store,
		r.emailClient,
		r.service.FetchUserInfo,
		input,
	)
	return &models.UpdateSystemIntakePayload{
		SystemIntake: intake,
	}, err
}

// CreateSystemIntakeActionCloseRequest is the resolver for the createSystemIntakeActionCloseRequest field.
func (r *mutationResolver) CreateSystemIntakeActionCloseRequest(ctx context.Context, input models.SystemIntakeCloseRequestInput) (*models.UpdateSystemIntakePayload, error) {
	intake, err := CreateSystemIntakeActionCloseRequest(
		ctx,
		r.store,
		r.emailClient,
		r.service.FetchUserInfo,
		input,
	)
	return &models.UpdateSystemIntakePayload{
		SystemIntake: intake,
	}, err
}

// CreateSystemIntakeActionNotITGovRequest is the resolver for the createSystemIntakeActionNotITGovRequest field.
func (r *mutationResolver) CreateSystemIntakeActionNotITGovRequest(ctx context.Context, input models.SystemIntakeNotITGovReqInput) (*models.UpdateSystemIntakePayload, error) {
	intake, err := CreateSystemIntakeActionNotITGovRequest(
		ctx,
		r.store,
		r.emailClient,
		r.service.FetchUserInfo,
		input,
	)
	return &models.UpdateSystemIntakePayload{
		SystemIntake: intake,
	}, err
}

// CreateSystemIntakeNote is the resolver for the createSystemIntakeNote field.
func (r *mutationResolver) CreateSystemIntakeNote(ctx context.Context, input models.CreateSystemIntakeNoteInput) (*models.SystemIntakeNote, error) {
	return CreateSystemIntakeNote(ctx, r.store, input)
}

// UpdateSystemIntakeNote is the resolver for the updateSystemIntakeNote field.
func (r *mutationResolver) UpdateSystemIntakeNote(ctx context.Context, input models.UpdateSystemIntakeNoteInput) (*models.SystemIntakeNote, error) {
	return UpdateSystemIntakeNote(ctx, r.store, r.service.FetchUserInfo, input)
}

// CreateSystemIntake is the resolver for the createSystemIntake field.
func (r *mutationResolver) CreateSystemIntake(ctx context.Context, input models.CreateSystemIntakeInput) (*models.SystemIntake, error) {
	return CreateSystemIntake(ctx, r.store, input, userhelpers.GetUserInfoAccountInfoWrapperFunc(r.service.FetchUserInfo))
}

// UpdateSystemIntakeRequestType is the resolver for the updateSystemIntakeRequestType field.
func (r *mutationResolver) UpdateSystemIntakeRequestType(ctx context.Context, id uuid.UUID, newType models.SystemIntakeRequestType) (*models.SystemIntake, error) {
	return UpdateSystemIntakeRequestType(ctx, r.store, id, newType)
}

// SubmitIntake is the resolver for the submitIntake field.
func (r *mutationResolver) SubmitIntake(ctx context.Context, input models.SubmitIntakeInput) (*models.UpdateSystemIntakePayload, error) {
	return SubmitIntake(ctx, r.store, r.service.FetchUserInfo, r.service.SubmitIntake, input)
}

// UpdateSystemIntakeAdminLead is the resolver for the updateSystemIntakeAdminLead field.
func (r *mutationResolver) UpdateSystemIntakeAdminLead(ctx context.Context, input models.UpdateSystemIntakeAdminLeadInput) (*models.UpdateSystemIntakePayload, error) {
	savedAdminLead, err := r.store.UpdateAdminLead(ctx, input.ID, input.AdminLead)
	systemIntake := models.SystemIntake{
		AdminLead: null.StringFrom(savedAdminLead),
		ID:        input.ID,
	}
	return &models.UpdateSystemIntakePayload{
		SystemIntake: &systemIntake,
	}, err
}

// UpdateSystemIntakeReviewDates is the resolver for the updateSystemIntakeReviewDates field.
func (r *mutationResolver) UpdateSystemIntakeReviewDates(ctx context.Context, input models.UpdateSystemIntakeReviewDatesInput) (*models.UpdateSystemIntakePayload, error) {
	intake, err := r.store.UpdateReviewDates(ctx, input.ID, input.GrbDate, input.GrtDate)
	return &models.UpdateSystemIntakePayload{
		SystemIntake: intake,
	}, err
}

// UpdateSystemIntakeContactDetails is the resolver for the updateSystemIntakeContactDetails field.
func (r *mutationResolver) UpdateSystemIntakeContactDetails(ctx context.Context, input models.UpdateSystemIntakeContactDetailsInput) (*models.UpdateSystemIntakePayload, error) {
	return SystemIntakeUpdateContactDetails(ctx, r.store, input)
}

// UpdateSystemIntakeRequestDetails is the resolver for the updateSystemIntakeRequestDetails field.
func (r *mutationResolver) UpdateSystemIntakeRequestDetails(ctx context.Context, input models.UpdateSystemIntakeRequestDetailsInput) (*models.UpdateSystemIntakePayload, error) {
	return SystemIntakeUpdate(ctx, r.store, r.cedarCoreClient.GetSystem, input)
}

// UpdateSystemIntakeContractDetails is the resolver for the updateSystemIntakeContractDetails field.
func (r *mutationResolver) UpdateSystemIntakeContractDetails(ctx context.Context, input models.UpdateSystemIntakeContractDetailsInput) (*models.UpdateSystemIntakePayload, error) {
	return SystemIntakeUpdateContractDetails(ctx, r.store, input)
}

// CreateCedarSystemBookmark is the resolver for the createCedarSystemBookmark field.
func (r *mutationResolver) CreateCedarSystemBookmark(ctx context.Context, input models.CreateCedarSystemBookmarkInput) (*models.CreateCedarSystemBookmarkPayload, error) {
	bookmark := models.CedarSystemBookmark{
		EUAUserID:     appcontext.Principal(ctx).ID(),
		CedarSystemID: input.CedarSystemID,
	}
	createdBookmark, err := r.store.CreateCedarSystemBookmark(ctx, &bookmark)
	if err != nil {
		return nil, err
	}
	return &models.CreateCedarSystemBookmarkPayload{
		CedarSystemBookmark: createdBookmark,
	}, nil
}

// DeleteCedarSystemBookmark is the resolver for the deleteCedarSystemBookmark field.
func (r *mutationResolver) DeleteCedarSystemBookmark(ctx context.Context, input models.CreateCedarSystemBookmarkInput) (*models.DeleteCedarSystemBookmarkPayload, error) {
	_, err := r.store.DeleteCedarSystemBookmark(ctx, &models.CedarSystemBookmark{
		CedarSystemID: input.CedarSystemID,
	})
	if err != nil {
		return nil, err
	}
	return &models.DeleteCedarSystemBookmarkPayload{CedarSystemID: input.CedarSystemID}, nil
}

// SetSystemIntakeRelationNewSystem is the resolver for the setSystemIntakeRelationNewSystem field.
func (r *mutationResolver) SetSystemIntakeRelationNewSystem(ctx context.Context, input *models.SetSystemIntakeRelationNewSystemInput) (*models.UpdateSystemIntakePayload, error) {
	// This resolver's only real purpose is to delete existing relations or data that might have been set previously by selecting other options when
	// selecting if the intake relates to another system, service, or contract.
	// It is also responsible for creating contract number relationships for this intake
	//
	// Pseudo-code for this resolver (best if handled in a transaction):
	// 1. Delete (if any) existing CEDAR System ID relations that were set by SetSystemIntakeRelationExistingSystem()
	// 2. Delete (if any) existing free-text contract/service name that might have been set by SetSystemIntakeRelationExistingService()
	// 3. Delete & Create Contract Number relations (Delete & Create because this mutation always receives the full state of the relations)
	intake, err := SetSystemIntakeRelationNewSystem(ctx, r.store, input)
	if err != nil {
		return nil, err
	}

	return &models.UpdateSystemIntakePayload{
		SystemIntake: intake,
	}, nil
}

// SetSystemIntakeRelationExistingSystem is the resolver for the setSystemIntakeRelationExistingSystem field.
func (r *mutationResolver) SetSystemIntakeRelationExistingSystem(ctx context.Context, input *models.SetSystemIntakeRelationExistingSystemInput) (*models.UpdateSystemIntakePayload, error) {
	// This resolver's purpose is to relate this System Intake to some number of CEDAR System IDs and Contract Numbers
	// It is also responsible for clearing any previous relations that might have been set by SetSystemIntakeRelationExistingService(), which,
	// in practice, should just be the `contractName` field.
	intake, err := SetSystemIntakeRelationExistingSystem(ctx, r.store, r.cedarCoreClient.GetSystem, input)
	if err != nil {
		return nil, err
	}

	return &models.UpdateSystemIntakePayload{
		SystemIntake: intake,
	}, nil
}

// SetSystemIntakeRelationExistingService is the resolver for the setSystemIntakeRelationExistingService field.
func (r *mutationResolver) SetSystemIntakeRelationExistingService(ctx context.Context, input *models.SetSystemIntakeRelationExistingServiceInput) (*models.UpdateSystemIntakePayload, error) {
	// This resolver's purpose is to relate this System Intake to a free-text contract/service name, and some number of Contract Numbers
	// It is also responsible for clearing any previous relations that might have been set by SetSystemIntakeRelationExistingSystem(), which,
	// in practice, should just be the CEDAR System ID relations.
	//
	// Pseudo-code for this resolver (best if handled in a transaction):
	// 1. Delete (if any) existing CEDAR System ID relations that might have been set by SetSystemIntakeRelationExistingSystem()
	// 2. Set the free-text contract/service name
	// 3. Delete & Create Contract Number relations (Delete & Create because this mutation always receives the full state of the relations)
	intake, err := SetSystemIntakeRelationExistingService(ctx, r.store, input)
	if err != nil {
		return nil, err
	}

	return &models.UpdateSystemIntakePayload{
		SystemIntake: intake,
	}, nil
}

// SetSystemSupportAndUnlinkSystemIntakeRelation is the resolver for the setSystemSupportAndUnlinkSystemIntakeRelation field.
func (r *mutationResolver) SetSystemSupportAndUnlinkSystemIntakeRelation(ctx context.Context, intakeID uuid.UUID, doesNotSupportSystems bool) (*models.UpdateSystemIntakePayload, error) {
	intake, err := SetSystemSupportAndUnlinkSystemIntakeRelation(ctx, r.store, intakeID, doesNotSupportSystems)

	if err != nil {
		return nil, err
	}

	return &models.UpdateSystemIntakePayload{
		SystemIntake: intake,
	}, nil
}

// AddSystemLink is the resolver for the addSystemLink field.
func (r *mutationResolver) AddSystemLink(ctx context.Context, input models.AddSystemLinkInput) (*models.AddSystemLinkPayload, error) {
	newSystemLink, err := AddSystemLink(ctx, r.store, input)

	if err != nil {
		return nil, err
	}
	return newSystemLink, nil
}

// DeleteSystemLink is the resolver for the deleteSystemLink field.
func (r *mutationResolver) DeleteSystemLink(ctx context.Context, systemIntakeSystemID uuid.UUID) (*models.DeleteSystemLinkPayload, error) {
	deletedSystemIntake, err := DeleteSystemIntakeSystemByID(ctx, r.store, systemIntakeSystemID)

	if err != nil {
		return nil, err
	}
	return &models.DeleteSystemLinkPayload{SystemIntakeSystem: &deletedSystemIntake}, nil
}

// UpdateSystemLink is the resolver for the updateSystemLink field.
func (r *mutationResolver) UpdateSystemLink(ctx context.Context, input models.UpdateSystemLinkInput) (*models.UpdateSystemLinkPayload, error) {
	systemIntakeSystem, err := UpdateSystemLinkByID(ctx, r.store, input)

	if err != nil {
		return nil, err
	}
	return &models.UpdateSystemLinkPayload{SystemIntakeSystem: &systemIntakeSystem}, nil
}

// CreateSystemIntakeContact is the resolver for the createSystemIntakeContact field.
func (r *mutationResolver) CreateSystemIntakeContact(ctx context.Context, input models.CreateSystemIntakeContactInput) (*models.CreateSystemIntakeContactPayload, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)

	return CreateSystemIntakeContact(ctx, logger, principal, r.store, input, userhelpers.GetUserInfoAccountInfoWrapperFunc(r.service.FetchUserInfo))
}

// UpdateSystemIntakeContact is the resolver for the updateSystemIntakeContact field.
func (r *mutationResolver) UpdateSystemIntakeContact(ctx context.Context, input models.UpdateSystemIntakeContactInput) (*models.CreateSystemIntakeContactPayload, error) {
	principal := appcontext.Principal(ctx)
	logger := appcontext.ZLogger(ctx)
	return UpdateSystemIntakeContact(ctx, logger, principal, r.store, input, userhelpers.GetUserInfoAccountInfoWrapperFunc(r.service.FetchUserInfo))
}

// DeleteSystemIntakeContact is the resolver for the deleteSystemIntakeContact field.
func (r *mutationResolver) DeleteSystemIntakeContact(ctx context.Context, input models.DeleteSystemIntakeContactInput) (*models.DeleteSystemIntakeContactPayload, error) {
	contact, err := SystemIntakeContactDelete(ctx, r.store, input.ID)
	if err != nil {
		return nil, err
	}
	return &models.DeleteSystemIntakeContactPayload{
		SystemIntakeContact: contact,
	}, nil
}

// StartGRBReview is the resolver for the startGRBReview field.
func (r *mutationResolver) StartGRBReview(ctx context.Context, input models.StartGRBReviewInput) (*string, error) {
	return StartGRBReview(ctx, r.store, r.emailClient, input.SystemIntakeID)
}

// CreateSystemIntakeGRBReviewers is the resolver for the createSystemIntakeGRBReviewers field.
func (r *mutationResolver) CreateSystemIntakeGRBReviewers(ctx context.Context, input models.CreateSystemIntakeGRBReviewersInput) (*models.CreateSystemIntakeGRBReviewersPayload, error) {
	return CreateSystemIntakeGRBReviewers(ctx, r.store, r.emailClient, userhelpers.GetUserInfoAccountInfosWrapperFunc(r.service.FetchUserInfos), &input)
}

// UpdateSystemIntakeGRBReviewer is the resolver for the updateSystemIntakeGRBReviewer field.
func (r *mutationResolver) UpdateSystemIntakeGRBReviewer(ctx context.Context, input models.UpdateSystemIntakeGRBReviewerInput) (*models.SystemIntakeGRBReviewer, error) {
	return UpdateSystemIntakeGRBReviewer(ctx, r.store, &input)
}

// DeleteSystemIntakeGRBReviewer is the resolver for the deleteSystemIntakeGRBReviewer field.
func (r *mutationResolver) DeleteSystemIntakeGRBReviewer(ctx context.Context, input models.DeleteSystemIntakeGRBReviewerInput) (uuid.UUID, error) {
	return input.ReviewerID, DeleteSystemIntakeGRBReviewer(ctx, r.store, input.ReviewerID)
}

// CastSystemIntakeGRBReviewerVote is the resolver for the castSystemIntakeGRBReviewerVote field.
func (r *mutationResolver) CastSystemIntakeGRBReviewerVote(ctx context.Context, input models.CastSystemIntakeGRBReviewerVoteInput) (*models.SystemIntakeGRBReviewer, error) {
	return CastSystemIntakeGRBReviewerVote(ctx, r.store, r.emailClient, input)
}

// SendSystemIntakeGRBReviewerReminder is the resolver for the sendSystemIntakeGRBReviewerReminder field.
func (r *mutationResolver) SendSystemIntakeGRBReviewerReminder(ctx context.Context, systemIntakeID uuid.UUID) (*models.SendSystemIntakeGRBReviewReminderPayload, error) {
	return SendSystemIntakeGRBReviewerReminder(ctx, r.store, r.emailClient, systemIntakeID)
}

// CreateSystemIntakeGRBDiscussionPost is the resolver for the createSystemIntakeGRBDiscussionPost field.
func (r *mutationResolver) CreateSystemIntakeGRBDiscussionPost(ctx context.Context, input models.CreateSystemIntakeGRBDiscussionPostInput) (*models.SystemIntakeGRBReviewDiscussionPost, error) {
	return CreateSystemIntakeGRBDiscussionPost(ctx, r.store, r.emailClient, input)
}

// CreateSystemIntakeGRBDiscussionReply is the resolver for the createSystemIntakeGRBDiscussionReply field.
func (r *mutationResolver) CreateSystemIntakeGRBDiscussionReply(ctx context.Context, input models.CreateSystemIntakeGRBDiscussionReplyInput) (*models.SystemIntakeGRBReviewDiscussionPost, error) {
	return CreateSystemIntakeGRBDiscussionReply(ctx, r.store, r.emailClient, input)
}

// UpdateSystemIntakeGRBReviewType is the resolver for the updateSystemIntakeGRBReviewType field.
func (r *mutationResolver) UpdateSystemIntakeGRBReviewType(ctx context.Context, input models.UpdateSystemIntakeGRBReviewTypeInput) (*models.UpdateSystemIntakePayload, error) {
	return UpdateSystemIntakeGRBReviewType(ctx, r.store, input)
}

// UpdateSystemIntakeGRBReviewFormPresentationStandard is the resolver for the updateSystemIntakeGRBReviewFormPresentationStandard field.
func (r *mutationResolver) UpdateSystemIntakeGRBReviewFormPresentationStandard(ctx context.Context, input models.UpdateSystemIntakeGRBReviewFormInputPresentationStandard) (*models.UpdateSystemIntakePayload, error) {
	return UpdateSystemIntakeGRBReviewFormInputPresentationStandard(ctx, r.store, input)
}

// UpdateSystemIntakeGRBReviewFormPresentationAsync is the resolver for the updateSystemIntakeGRBReviewFormPresentationAsync field.
func (r *mutationResolver) UpdateSystemIntakeGRBReviewFormPresentationAsync(ctx context.Context, input models.UpdateSystemIntakeGRBReviewFormInputPresentationAsync) (*models.UpdateSystemIntakePayload, error) {
	return UpdateSystemIntakeGRBReviewFormInputPresentationAsync(ctx, r.store, input)
}

// UpdateSystemIntakeGRBReviewFormTimeframeAsync is the resolver for the updateSystemIntakeGRBReviewFormTimeframeAsync field.
func (r *mutationResolver) UpdateSystemIntakeGRBReviewFormTimeframeAsync(ctx context.Context, input models.UpdateSystemIntakeGRBReviewFormInputTimeframeAsync) (*models.UpdateSystemIntakePayload, error) {
	return UpdateSystemIntakeGRBReviewFormInputTimeframeAsync(ctx, r.store, r.emailClient, input)
}

// ExtendGRBReviewDeadlineAsync is the resolver for the extendGRBReviewDeadlineAsync field.
func (r *mutationResolver) ExtendGRBReviewDeadlineAsync(ctx context.Context, input models.ExtendGRBReviewDeadlineInput) (*models.UpdateSystemIntakePayload, error) {
	return ExtendGRBReviewDeadlineAsync(ctx, r.store, r.emailClient, input)
}

// RestartGRBReviewAsync is the resolver for the restartGRBReviewAsync field.
func (r *mutationResolver) RestartGRBReviewAsync(ctx context.Context, input models.RestartGRBReviewInput) (*models.UpdateSystemIntakePayload, error) {
	return RestartGRBReviewAsync(ctx, r.store, r.emailClient, input)
}

// UpdateSystemIntakeLinkedCedarSystem is the resolver for the updateSystemIntakeLinkedCedarSystem field.
func (r *mutationResolver) UpdateSystemIntakeLinkedCedarSystem(ctx context.Context, input models.UpdateSystemIntakeLinkedCedarSystemInput) (*models.UpdateSystemIntakePayload, error) {
	// If the linked system is not nil, make sure it's a valid CEDAR system, otherwise return an error
	if input.CedarSystemID != nil && len(*input.CedarSystemID) > 0 {
		_, err := r.cedarCoreClient.GetSystem(ctx, *input.CedarSystemID)

		if err != nil {
			return nil, err
		}
	}

	intake, err := r.store.UpdateSystemIntakeLinkedCedarSystem(ctx, input.ID, null.StringFromPtr(input.CedarSystemID))

	if err != nil {
		return nil, err
	}

	return &models.UpdateSystemIntakePayload{
		SystemIntake: intake,
	}, nil
}

// SetSystemIntakeGRBPresentationLinks is the resolver for the setSystemIntakeGRBPresentationLinks field.
func (r *mutationResolver) SetSystemIntakeGRBPresentationLinks(ctx context.Context, input models.SystemIntakeGRBPresentationLinksInput) (*models.SystemIntakeGRBPresentationLinks, error) {
	return SetSystemIntakeGRBPresentationLinks(ctx, r.store, r.s3Client, input)
}

// UploadSystemIntakeGRBPresentationDeck is the resolver for the uploadSystemIntakeGRBPresentationDeck field.
func (r *mutationResolver) UploadSystemIntakeGRBPresentationDeck(ctx context.Context, input models.UploadSystemIntakeGRBPresentationDeckInput) (*models.SystemIntakeGRBPresentationLinks, error) {
	return UploadSystemIntakeGRBPresentationDeck(ctx, r.store, r.s3Client, input)
}

// DeleteSystemIntakeGRBPresentationLinks is the resolver for the deleteSystemIntakeGRBPresentationLinks field.
func (r *mutationResolver) DeleteSystemIntakeGRBPresentationLinks(ctx context.Context, input models.DeleteSystemIntakeGRBPresentationLinksInput) (uuid.UUID, error) {
	return input.SystemIntakeID, r.store.DeleteSystemIntakeGRBPresentationLinks(ctx, input.SystemIntakeID)
}

// ManuallyEndSystemIntakeGRBReviewAsyncVoting is the resolver for the manuallyEndSystemIntakeGRBReviewAsyncVoting field.
func (r *mutationResolver) ManuallyEndSystemIntakeGRBReviewAsyncVoting(ctx context.Context, systemIntakeID uuid.UUID) (*models.UpdateSystemIntakePayload, error) {
	return ManuallyEndSystemIntakeGRBReviewAsyncVoting(ctx, r.store, r.emailClient, systemIntakeID)
}

// ArchiveSystemIntake is the resolver for the archiveSystemIntake field.
func (r *mutationResolver) ArchiveSystemIntake(ctx context.Context, id uuid.UUID) (*models.SystemIntake, error) {
	intake, err := r.store.FetchSystemIntakeByID(ctx, id)
	if err != nil {
		return nil, err
	}

	// we first must check the current intake form status. if it is not Ready or In Progress, archiving is not allowed
	currentStatus, err := IntakeFormStatus(intake)
	if err != nil {
		return nil, err
	}

	if currentStatus != models.ITGISReady && currentStatus != models.ITGISInProgress {
		return nil, errors.New("cannot remove system intake unless in Ready or In Progress status")
	}

	if !services.AuthorizeUserIsIntakeRequester(ctx, intake) {
		return nil, errors.New("user is unauthorized to archive system intake")
	}

	now := helpers.PointerTo(time.Now())

	// close out any associated Business Case
	if intake.BusinessCaseID != nil {
		// get Business Case
		businessCase, err := r.store.FetchBusinessCaseByID(ctx, *intake.BusinessCaseID)
		if err != nil {
			return nil, err
		}

		// only attempt to close if Business Case is not yet closed
		if businessCase.Status != models.BusinessCaseStatusCLOSED {
			businessCase.UpdatedAt = now
			businessCase.Status = models.BusinessCaseStatusCLOSED

			if _, err := r.store.UpdateBusinessCase(ctx, businessCase); err != nil {
				return nil, err
			}
		}
	}

	intake.UpdatedAt = now
	intake.ArchivedAt = now

	updatedIntake, err := r.store.UpdateSystemIntake(ctx, intake)
	if err != nil {
		return nil, err
	}

	// do not send email if intake was in draft state (not submitted)
	if intake.SubmittedAt != nil {
		if err := r.emailClient.SendWithdrawRequestEmail(ctx, intake.ProjectName.String); err != nil {
			return nil, err
		}
	}

	return updatedIntake, nil
}

// SendFeedbackEmail is the resolver for the sendFeedbackEmail field.
func (r *mutationResolver) SendFeedbackEmail(ctx context.Context, input models.SendFeedbackEmailInput) (*string, error) {
	var reporterName, reporterEmail string

	if !input.IsAnonymous {
		euaUserID := appcontext.Principal(ctx).ID()
		userInfo, err := r.service.FetchUserInfo(ctx, euaUserID)
		if err != nil {
			return nil, err
		}
		reporterName = userInfo.DisplayName
		reporterEmail = userInfo.Email.String()
	}

	err := r.emailClient.SendFeedbackEmail(ctx, email.SendFeedbackEmailInput{
		IsAnonymous:            input.IsAnonymous,
		ReporterName:           reporterName,
		ReporterEmail:          reporterEmail,
		CanBeContacted:         input.CanBeContacted,
		EasiServicesUsed:       input.EasiServicesUsed,
		CmsRole:                input.CmsRole,
		SystemEasyToUse:        input.SystemEasyToUse,
		DidntNeedHelpAnswering: input.DidntNeedHelpAnswering,
		QuestionsWereRelevant:  input.QuestionsWereRelevant,
		HadAccessToInformation: input.HadAccessToInformation,
		HowSatisfied:           input.HowSatisfied,
		HowCanWeImprove:        input.HowCanWeImprove,
	})

	if err != nil {
		return nil, err
	}

	msg := "Feedback sent successfully"
	return &msg, nil
}

// SendCantFindSomethingEmail is the resolver for the sendCantFindSomethingEmail field.
func (r *mutationResolver) SendCantFindSomethingEmail(ctx context.Context, input models.SendCantFindSomethingEmailInput) (*string, error) {
	euaUserID := appcontext.Principal(ctx).ID()
	userInfo, err := r.service.FetchUserInfo(ctx, euaUserID)
	if err != nil {
		return nil, err
	}

	err = r.emailClient.SendCantFindSomethingEmail(ctx, email.SendCantFindSomethingEmailInput{
		Name:  userInfo.DisplayName,
		Email: userInfo.Email.String(),
		Body:  input.Body,
	})

	if err != nil {
		return nil, err
	}

	msg := "Feedback sent successfully"
	return &msg, nil
}

// SendReportAProblemEmail is the resolver for the sendReportAProblemEmail field.
func (r *mutationResolver) SendReportAProblemEmail(ctx context.Context, input models.SendReportAProblemEmailInput) (*string, error) {
	var reporterName, reporterEmail string

	if !input.IsAnonymous {
		euaUserID := appcontext.Principal(ctx).ID()
		userInfo, err := r.service.FetchUserInfo(ctx, euaUserID)
		if err != nil {
			return nil, err
		}
		reporterName = userInfo.DisplayName
		reporterEmail = userInfo.Email.String()
	}

	err := r.emailClient.SendReportAProblemEmail(ctx, email.SendReportAProblemEmailInput{
		IsAnonymous:            input.IsAnonymous,
		ReporterName:           reporterName,
		ReporterEmail:          reporterEmail,
		CanBeContacted:         input.CanBeContacted,
		EasiService:            input.EasiService,
		WhatWereYouDoing:       input.WhatWereYouDoing,
		WhatWentWrong:          input.WhatWentWrong,
		HowSevereWasTheProblem: input.HowSevereWasTheProblem,
	})

	if err != nil {
		return nil, err
	}

	msg := "Feedback sent successfully"
	return &msg, nil
}

// CreateTRBRequest is the resolver for the createTRBRequest field.
func (r *mutationResolver) CreateTRBRequest(ctx context.Context, requestType models.TRBRequestType) (*models.TRBRequest, error) {
	return CreateTRBRequest(ctx, requestType, r.store)
}

// UpdateTRBRequest is the resolver for the updateTRBRequest field.
func (r *mutationResolver) UpdateTRBRequest(ctx context.Context, id uuid.UUID, changes map[string]any) (*models.TRBRequest, error) {
	return UpdateTRBRequest(ctx, id, changes, r.store)
}

// CreateTRBRequestAttendee is the resolver for the createTRBRequestAttendee field.
func (r *mutationResolver) CreateTRBRequestAttendee(ctx context.Context, input models.CreateTRBRequestAttendeeInput) (*models.TRBRequestAttendee, error) {
	role := models.PersonRole(input.Role)
	return CreateTRBRequestAttendee(
		ctx,
		r.store,
		r.emailClient.SendTRBAttendeeAddedNotification,
		r.service.FetchUserInfo,
		&models.TRBRequestAttendee{
			TRBRequestID: input.TrbRequestID,
			EUAUserID:    input.EuaUserID,
			Component:    &input.Component,
			Role:         &role,
		},
	)
}

// UpdateTRBRequestAttendee is the resolver for the updateTRBRequestAttendee field.
func (r *mutationResolver) UpdateTRBRequestAttendee(ctx context.Context, input models.UpdateTRBRequestAttendeeInput) (*models.TRBRequestAttendee, error) {
	role := models.PersonRole(input.Role)
	attendee := &models.TRBRequestAttendee{
		Component: &input.Component,
		Role:      &role,
	}
	attendee.ID = input.ID
	return UpdateTRBRequestAttendee(ctx, r.store, attendee)
}

// DeleteTRBRequestAttendee is the resolver for the deleteTRBRequestAttendee field.
func (r *mutationResolver) DeleteTRBRequestAttendee(ctx context.Context, id uuid.UUID) (*models.TRBRequestAttendee, error) {
	return DeleteTRBRequestAttendee(ctx, r.store, id)
}

// CreateTRBRequestDocument is the resolver for the createTRBRequestDocument field.
func (r *mutationResolver) CreateTRBRequestDocument(ctx context.Context, input models.CreateTRBRequestDocumentInput) (*models.CreateTRBRequestDocumentPayload, error) {
	doc, err := CreateTRBRequestDocument(ctx, r.store, r.s3Client, input)
	if err != nil {
		return nil, err
	}

	return &models.CreateTRBRequestDocumentPayload{
		Document: doc,
	}, nil
}

// DeleteTRBRequestDocument is the resolver for the deleteTRBRequestDocument field.
func (r *mutationResolver) DeleteTRBRequestDocument(ctx context.Context, id uuid.UUID) (*models.DeleteTRBRequestDocumentPayload, error) {
	doc, err := DeleteTRBRequestDocument(ctx, r.store, id)
	if err != nil {
		return nil, err
	}

	return &models.DeleteTRBRequestDocumentPayload{
		Document: doc,
	}, nil
}

// CreateSystemIntakeDocument is the resolver for the createSystemIntakeDocument field.
func (r *mutationResolver) CreateSystemIntakeDocument(ctx context.Context, input models.CreateSystemIntakeDocumentInput) (*models.CreateSystemIntakeDocumentPayload, error) {
	doc, err := CreateSystemIntakeDocument(ctx, r.store, r.s3Client, r.emailClient, input)
	if err != nil {
		return nil, err
	}

	return &models.CreateSystemIntakeDocumentPayload{
		Document: doc,
	}, nil
}

// DeleteSystemIntakeDocument is the resolver for the deleteSystemIntakeDocument field.
func (r *mutationResolver) DeleteSystemIntakeDocument(ctx context.Context, id uuid.UUID) (*models.DeleteSystemIntakeDocumentPayload, error) {
	doc, err := DeleteSystemIntakeDocument(ctx, r.store, id)
	if err != nil {
		return nil, err
	}

	return &models.DeleteSystemIntakeDocumentPayload{
		Document: doc,
	}, nil
}

// UpdateTRBRequestForm is the resolver for the updateTRBRequestForm field.
func (r *mutationResolver) UpdateTRBRequestForm(ctx context.Context, input map[string]any) (*models.TRBRequestForm, error) {
	return UpdateTRBRequestForm(
		ctx,
		r.store,
		r.emailClient,
		r.service.FetchUserInfo,
		input,
	)
}

// UpdateTRBRequestFundingSources is the resolver for the updateTRBRequestFundingSources field.
func (r *mutationResolver) UpdateTRBRequestFundingSources(ctx context.Context, input models.UpdateTRBRequestFundingSourcesInput) ([]*models.TRBFundingSource, error) {
	return UpdateTRBRequestFundingSources(ctx, r.store, input.TrbRequestID, input.FundingNumber, input.Sources)
}

// DeleteTRBRequestFundingSources is the resolver for the deleteTRBRequestFundingSources field.
func (r *mutationResolver) DeleteTRBRequestFundingSources(ctx context.Context, input models.DeleteTRBRequestFundingSourcesInput) ([]*models.TRBFundingSource, error) {
	return DeleteTRBRequestFundingSources(ctx, r.store, input.TrbRequestID, input.FundingNumber)
}

// SetRolesForUserOnSystem is the resolver for the setRolesForUserOnSystem field.
func (r *mutationResolver) SetRolesForUserOnSystem(ctx context.Context, input models.SetRolesForUserOnSystemInput) (*string, error) {
	return SetRolesForUserOnCEDARSystem(ctx, r.service.FetchUserInfos, r.cedarCoreClient, r.emailClient, input)
}

// CreateTRBRequestFeedback is the resolver for the createTRBRequestFeedback field.
func (r *mutationResolver) CreateTRBRequestFeedback(ctx context.Context, input models.CreateTRBRequestFeedbackInput) (*models.TRBRequestFeedback, error) {
	notifyEuas := models.ConvertEnums[string](input.NotifyEuaIds)
	return CreateTRBRequestFeedback(
		ctx,
		r.store,
		r.emailClient,
		r.service.FetchUserInfo,
		r.service.FetchUserInfos,
		&models.TRBRequestFeedback{
			TRBRequestID:    input.TrbRequestID,
			FeedbackMessage: models.HTML(input.FeedbackMessage),
			CopyTRBMailbox:  input.CopyTrbMailbox,
			NotifyEUAIDs:    notifyEuas,
			Action:          input.Action,
		})
}

// UpdateTRBRequestConsultMeetingTime is the resolver for the updateTRBRequestConsultMeetingTime field.
func (r *mutationResolver) UpdateTRBRequestConsultMeetingTime(ctx context.Context, input models.UpdateTRBRequestConsultMeetingTimeInput) (*models.TRBRequest, error) {
	return UpdateTRBRequestConsultMeetingTime(
		ctx,
		r.store,
		r.emailClient,
		r.service.FetchUserInfo,
		r.service.FetchUserInfos,
		input.TrbRequestID,
		input.ConsultMeetingTime,
		input.CopyTrbMailbox,
		input.NotifyEuaIds,
		input.Notes,
	)
}

// UpdateTRBRequestTRBLead is the resolver for the updateTRBRequestTRBLead field.
func (r *mutationResolver) UpdateTRBRequestTRBLead(ctx context.Context, input models.UpdateTRBRequestTRBLeadInput) (*models.TRBRequest, error) {
	return UpdateTRBRequestTRBLead(
		ctx,
		r.store,
		r.emailClient,
		r.service.FetchUserInfo,
		input.TrbRequestID,
		input.TrbLead,
	)
}

// SetTRBRequestRelationNewSystem is the resolver for the setTRBRequestRelationNewSystem field.
func (r *mutationResolver) SetTRBRequestRelationNewSystem(ctx context.Context, input models.SetTRBRequestRelationNewSystemInput) (*models.TRBRequest, error) {
	return SetTRBRequestRelationNewSystem(ctx, r.store, input)
}

// SetTRBRequestRelationExistingSystem is the resolver for the setTRBRequestRelationExistingSystem field.
func (r *mutationResolver) SetTRBRequestRelationExistingSystem(ctx context.Context, input models.SetTRBRequestRelationExistingSystemInput) (*models.TRBRequest, error) {
	return SetTRBRequestRelationExistingSystem(ctx, r.store, r.cedarCoreClient.GetSystem, input)
}

// SetTRBRequestRelationExistingService is the resolver for the setTRBRequestRelationExistingService field.
func (r *mutationResolver) SetTRBRequestRelationExistingService(ctx context.Context, input models.SetTRBRequestRelationExistingServiceInput) (*models.TRBRequest, error) {
	return SetTRBRequestRelationExistingService(ctx, r.store, input)
}

// UnlinkTRBRequestRelation is the resolver for the unlinkTRBRequestRelation field.
func (r *mutationResolver) UnlinkTRBRequestRelation(ctx context.Context, trbRequestID uuid.UUID) (*models.TRBRequest, error) {
	return UnlinkTRBRequestRelation(ctx, r.store, trbRequestID)
}

// CreateTRBAdminNoteGeneralRequest is the resolver for the createTRBAdminNoteGeneralRequest field.
func (r *mutationResolver) CreateTRBAdminNoteGeneralRequest(ctx context.Context, input models.CreateTRBAdminNoteGeneralRequestInput) (*models.TRBAdminNote, error) {
	return CreateTRBAdminNoteGeneralRequest(ctx, r.store, input)
}

// CreateTRBAdminNoteInitialRequestForm is the resolver for the createTRBAdminNoteInitialRequestForm field.
func (r *mutationResolver) CreateTRBAdminNoteInitialRequestForm(ctx context.Context, input models.CreateTRBAdminNoteInitialRequestFormInput) (*models.TRBAdminNote, error) {
	return CreateTRBAdminNoteInitialRequestForm(ctx, r.store, input)
}

// CreateTRBAdminNoteSupportingDocuments is the resolver for the createTRBAdminNoteSupportingDocuments field.
func (r *mutationResolver) CreateTRBAdminNoteSupportingDocuments(ctx context.Context, input models.CreateTRBAdminNoteSupportingDocumentsInput) (*models.TRBAdminNote, error) {
	return CreateTRBAdminNoteSupportingDocuments(ctx, r.store, input)
}

// CreateTRBAdminNoteConsultSession is the resolver for the createTRBAdminNoteConsultSession field.
func (r *mutationResolver) CreateTRBAdminNoteConsultSession(ctx context.Context, input models.CreateTRBAdminNoteConsultSessionInput) (*models.TRBAdminNote, error) {
	return CreateTRBAdminNoteConsultSession(ctx, r.store, input)
}

// CreateTRBAdminNoteGuidanceLetter is the resolver for the createTRBAdminNoteGuidanceLetter field.
func (r *mutationResolver) CreateTRBAdminNoteGuidanceLetter(ctx context.Context, input models.CreateTRBAdminNoteGuidanceLetterInput) (*models.TRBAdminNote, error) {
	return CreateTRBAdminNoteGuidanceLetter(ctx, r.store, input)
}

// SetTRBAdminNoteArchived is the resolver for the setTRBAdminNoteArchived field.
func (r *mutationResolver) SetTRBAdminNoteArchived(ctx context.Context, id uuid.UUID, isArchived bool) (*models.TRBAdminNote, error) {
	return SetTRBAdminNoteArchived(ctx, r.store, id, isArchived)
}

// CreateTRBGuidanceLetter is the resolver for the createTRBGuidanceLetter field.
func (r *mutationResolver) CreateTRBGuidanceLetter(ctx context.Context, trbRequestID uuid.UUID) (*models.TRBGuidanceLetter, error) {
	return CreateTRBGuidanceLetter(ctx, r.store, trbRequestID)
}

// UpdateTRBGuidanceLetter is the resolver for the updateTRBGuidanceLetter field.
func (r *mutationResolver) UpdateTRBGuidanceLetter(ctx context.Context, input map[string]any) (*models.TRBGuidanceLetter, error) {
	return UpdateTRBGuidanceLetter(ctx, r.store, input)
}

// RequestReviewForTRBGuidanceLetter is the resolver for the requestReviewForTRBGuidanceLetter field.
func (r *mutationResolver) RequestReviewForTRBGuidanceLetter(ctx context.Context, id uuid.UUID) (*models.TRBGuidanceLetter, error) {
	return RequestReviewForTRBGuidanceLetter(
		ctx,
		r.store,
		r.emailClient,
		r.service.FetchUserInfo,
		id)
}

// SendTRBGuidanceLetter is the resolver for the sendTRBGuidanceLetter field.
func (r *mutationResolver) SendTRBGuidanceLetter(ctx context.Context, input models.SendTRBGuidanceLetterInput) (*models.TRBGuidanceLetter, error) {
	return SendTRBGuidanceLetter(
		ctx,
		r.store,
		input.ID,
		r.emailClient,
		r.service.FetchUserInfo,
		r.service.FetchUserInfos,
		input.CopyTrbMailbox,
		input.CopyITGovMailbox,
		input.NotifyEuaIds)
}

// CreateTRBGuidanceLetterInsight is the resolver for the createTRBGuidanceLetterInsight field.
func (r *mutationResolver) CreateTRBGuidanceLetterInsight(ctx context.Context, input models.CreateTRBGuidanceLetterInsightInput) (*models.TRBGuidanceLetterInsight, error) {
	links := models.ConvertEnums[string](input.Links)
	return CreateTRBGuidanceLetterInsight(
		ctx,
		r.store,
		&models.TRBGuidanceLetterInsight{
			TRBRequestID: input.TrbRequestID,
			Title:        input.Title,
			Insight:      input.Insight,
			Links:        links,
			Category:     input.Category,
		})
}

// UpdateTRBGuidanceLetterInsight is the resolver for the updateTRBGuidanceLetterInsight field.
func (r *mutationResolver) UpdateTRBGuidanceLetterInsight(ctx context.Context, input map[string]any) (*models.TRBGuidanceLetterInsight, error) {
	return UpdateTRBGuidanceLetterInsight(ctx, r.store, input)
}

// UpdateTRBGuidanceLetterInsightOrder is the resolver for the updateTRBGuidanceLetterInsightOrder field.
func (r *mutationResolver) UpdateTRBGuidanceLetterInsightOrder(ctx context.Context, input models.UpdateTRBGuidanceLetterInsightOrderInput) ([]*models.TRBGuidanceLetterInsight, error) {
	return UpdateTRBGuidanceLetterInsightOrder(ctx, r.store, input)
}

// DeleteTRBGuidanceLetterInsight is the resolver for the deleteTRBGuidanceLetterInsight field.
func (r *mutationResolver) DeleteTRBGuidanceLetterInsight(ctx context.Context, id uuid.UUID) (*models.TRBGuidanceLetterInsight, error) {
	return DeleteTRBGuidanceLetterInsight(ctx, r.store, id)
}

// CloseTRBRequest is the resolver for the closeTRBRequest field.
func (r *mutationResolver) CloseTRBRequest(ctx context.Context, input models.CloseTRBRequestInput) (*models.TRBRequest, error) {
	return CloseTRBRequest(
		ctx,
		r.store,
		r.emailClient,
		r.service.FetchUserInfo,
		r.service.FetchUserInfos,
		input.ID,
		input.ReasonClosed,
		input.CopyTrbMailbox,
		input.NotifyEuaIds,
	)
}

// ReopenTrbRequest is the resolver for the reopenTrbRequest field.
func (r *mutationResolver) ReopenTrbRequest(ctx context.Context, input models.ReopenTRBRequestInput) (*models.TRBRequest, error) {
	return ReopenTRBRequest(
		ctx,
		r.store,
		input.TrbRequestID,
		input.ReasonReopened,
		input.CopyTrbMailbox,
		input.NotifyEuaIds,
		r.emailClient,
		r.service.FetchUserInfo,
		r.service.FetchUserInfos,
	)
}

// CreateTrbLeadOption is the resolver for the createTrbLeadOption field.
func (r *mutationResolver) CreateTrbLeadOption(ctx context.Context, eua string) (*models.UserInfo, error) {
	return CreateTRBLeadOption(ctx, r.store, r.service.FetchUserInfo, eua)
}

// DeleteTrbLeadOption is the resolver for the deleteTrbLeadOption field.
func (r *mutationResolver) DeleteTrbLeadOption(ctx context.Context, eua string) (bool, error) {
	return DeleteTRBLeadOption(ctx, r.store, eua)
}

// SendGRBReviewPresentationDeckReminderEmail is the resolver for the sendGRBReviewPresentationDeckReminderEmail field.
func (r *mutationResolver) SendGRBReviewPresentationDeckReminderEmail(ctx context.Context, systemIntakeID uuid.UUID) (bool, error) {
	return SendGRBReviewPresentationDeckReminderEmail(ctx, systemIntakeID, r.emailClient, r.store, r.service.FetchUserInfo)
}

// SystemIntake is the resolver for the systemIntake field.
func (r *queryResolver) SystemIntake(ctx context.Context, id uuid.UUID) (*models.SystemIntake, error) {
	intake, err := r.store.FetchSystemIntakeByID(ctx, id)
	if err != nil {
		return nil, err
	}

	// if this user created the intake
	if ok := services.AuthorizeUserIsIntakeRequester(ctx, intake); ok {
		return intake, nil
	}

	// if this user is an admin
	if ok := services.AuthorizeRequireGRTJobCode(ctx); ok {
		return intake, nil
	}

	grbUsers, err := r.store.SystemIntakeGRBReviewersBySystemIntakeIDs(ctx, []uuid.UUID{id})
	if err != nil {
		return nil, err
	}

	principal := appcontext.Principal(ctx)

	if isGRBViewer := slices.ContainsFunc(grbUsers, func(reviewer *models.SystemIntakeGRBReviewer) bool {
		return reviewer.UserID == principal.Account().ID
	}); isGRBViewer {
		return intake, nil
	}

	return nil, &apperrors.UnauthorizedError{Err: errors.New("unauthorized to fetch system intake")}
}

// SystemIntakes is the resolver for the systemIntakes field.
func (r *queryResolver) SystemIntakes(ctx context.Context, openRequests bool) ([]*models.SystemIntake, error) {
	return SystemIntakes(ctx, r.store, openRequests)
}

// MySystemIntakes is the resolver for the mySystemIntakes field.
func (r *queryResolver) MySystemIntakes(ctx context.Context) ([]*models.SystemIntake, error) {
	return GetMySystemIntakes(ctx, r.store)
}

// SystemIntakesWithReviewRequested is the resolver for the systemIntakesWithReviewRequested field.
func (r *queryResolver) SystemIntakesWithReviewRequested(ctx context.Context) ([]*models.SystemIntake, error) {
	return SystemIntakesWithReviewRequested(ctx, r.store)
}

// SystemIntakesWithLcids is the resolver for the systemIntakesWithLcids field.
func (r *queryResolver) SystemIntakesWithLcids(ctx context.Context) ([]*models.SystemIntake, error) {
	return r.store.GetSystemIntakesWithLCIDs(ctx)
}

// CompareGRBReviewersByIntakeID is the resolver for the compareGRBReviewersByIntakeID field.
func (r *queryResolver) CompareGRBReviewersByIntakeID(ctx context.Context, id uuid.UUID) ([]*models.GRBReviewerComparisonIntake, error) {
	return SystemIntakeCompareGRBReviewers(ctx, r.store, id)
}

// CedarAuthorityToOperate is the resolver for the cedarAuthorityToOperate field.
func (r *queryResolver) CedarAuthorityToOperate(ctx context.Context, cedarSystemID string) ([]*models.CedarAuthorityToOperate, error) {
	cedarATO, err := r.cedarCoreClient.GetAuthorityToOperate(ctx, cedarSystemID)
	if err != nil {
		return nil, err
	}

	return cedarATO, nil
}

// CedarBudget is the resolver for the cedarBudget field.
func (r *queryResolver) CedarBudget(ctx context.Context, cedarSystemID string) ([]*models.CedarBudget, error) {
	cedarBudget, err := r.cedarCoreClient.GetBudgetBySystem(ctx, cedarSystemID)
	if err != nil {
		return nil, err
	}

	return cedarBudget, nil
}

// CedarBudgetSystemCost is the resolver for the cedarBudgetSystemCost field.
func (r *queryResolver) CedarBudgetSystemCost(ctx context.Context, cedarSystemID string) (*models.CedarBudgetSystemCost, error) {
	cedarBudgetSystemCost, err := r.cedarCoreClient.GetBudgetSystemCostBySystem(ctx, cedarSystemID)
	if err != nil {
		return nil, err
	}

	return cedarBudgetSystemCost, nil
}

// CedarPersonsByCommonName is the resolver for the cedarPersonsByCommonName field.
func (r *queryResolver) CedarPersonsByCommonName(ctx context.Context, commonName string) ([]*models.UserInfo, error) {
	response, err := r.service.SearchCommonNameContains(ctx, commonName)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// CedarSoftwareProducts is the resolver for the cedarSoftwareProducts field.
func (r *queryResolver) CedarSoftwareProducts(ctx context.Context, cedarSystemID string) (*models.CedarSoftwareProducts, error) {
	cedarSoftwareProducts, err := r.cedarCoreClient.GetSoftwareProductsBySystem(ctx, cedarSystemID)
	if err != nil {
		return nil, err
	}
	return cedarSoftwareProducts, nil
}

// CedarSubSystems is the resolver for the cedarSubSystems field.
func (r *queryResolver) CedarSubSystems(ctx context.Context, cedarSystemID string) ([]*models.CedarSubSystem, error) {
	systems, err := r.cedarCoreClient.GetSystemSummary(ctx, cedarcore.SystemSummaryOpts.WithSubSystems(cedarSystemID))
	if err != nil {
		return nil, err
	}

	var subSystems []*models.CedarSubSystem
	for _, system := range systems {
		subSystems = append(subSystems, &models.CedarSubSystem{
			ID:          system.ID,
			Name:        system.Name,
			Acronym:     system.Acronym,
			Description: system.Description,
		})
	}

	return subSystems, nil
}

// CedarContractsBySystem is the resolver for the cedarContractsBySystem field.
func (r *queryResolver) CedarContractsBySystem(ctx context.Context, cedarSystemID string) ([]*models.CedarContract, error) {
	return r.cedarCoreClient.GetContractBySystem(ctx, cedarSystemID)
}

// CedarSystemBookmarks is the resolver for the cedarSystemBookmarks field.
func (r *queryResolver) CedarSystemBookmarks(ctx context.Context) ([]*models.CedarSystemBookmark, error) {
	cedarSystemBookmarks, err := r.store.FetchCedarSystemBookmarks(ctx)
	if err != nil {
		return nil, err
	}
	return cedarSystemBookmarks, nil
}

// CedarThreat is the resolver for the cedarThreat field.
func (r *queryResolver) CedarThreat(ctx context.Context, cedarSystemID string) ([]*models.CedarThreat, error) {
	cedarThreat, err := r.cedarCoreClient.GetThreat(ctx, cedarSystemID)
	if err != nil {
		return nil, err
	}
	return cedarThreat, nil
}

// Deployments is the resolver for the deployments field.
func (r *queryResolver) Deployments(ctx context.Context, cedarSystemID string, deploymentType *string, state *string, status *string) ([]*models.CedarDeployment, error) {
	var optionalParams *cedarcore.GetDeploymentsOptionalParams
	if deploymentType != nil || state != nil || status != nil {
		optionalParams = &cedarcore.GetDeploymentsOptionalParams{}

		if deploymentType != nil {
			optionalParams.DeploymentType = deploymentType
		}

		if state != nil {
			optionalParams.State = state
		}

		if status != nil {
			optionalParams.Status = status
		}
	}

	cedarDeployments, err := r.cedarCoreClient.GetDeployments(ctx, cedarSystemID, optionalParams)
	if err != nil {
		return nil, err
	}

	return cedarDeployments, nil
}

// RoleTypes is the resolver for the roleTypes field.
func (r *queryResolver) RoleTypes(ctx context.Context) ([]*models.CedarRoleType, error) {
	roleTypes, err := r.cedarCoreClient.GetRoleTypes(ctx)
	if err != nil {
		return nil, err
	}

	return roleTypes, nil
}

// Roles is the resolver for the roles field.
func (r *queryResolver) Roles(ctx context.Context, cedarSystemID string, roleTypeID *string) ([]*models.CedarRole, error) {
	cedarRoles, err := r.cedarCoreClient.GetRolesBySystem(ctx, cedarSystemID, roleTypeID)
	if err != nil {
		return nil, err
	}

	return cedarRoles, nil
}

// Exchanges is the resolver for the exchanges field.
func (r *queryResolver) Exchanges(ctx context.Context, cedarSystemID string) ([]*models.CedarExchange, error) {
	exchanges, err := r.cedarCoreClient.GetExchangesBySystem(ctx, cedarSystemID)
	if err != nil {
		return nil, err
	}

	return exchanges, nil
}

// Urls is the resolver for the urls field.
func (r *queryResolver) Urls(ctx context.Context, cedarSystemID string) ([]*models.CedarURL, error) {
	cedarURLs, err := r.cedarCoreClient.GetURLsForSystem(ctx, cedarSystemID)
	if err != nil {
		return nil, err
	}
	return cedarURLs, nil
}

// SystemIntakeContacts is the resolver for the systemIntakeContacts field.
func (r *queryResolver) SystemIntakeContacts(ctx context.Context, id uuid.UUID) (*models.SystemIntakeContacts, error) {
	return SystemIntakeContactsGetBySystemIntakeID(ctx, id)
}

// TrbRequest is the resolver for the trbRequest field.
func (r *queryResolver) TrbRequest(ctx context.Context, id uuid.UUID) (*models.TRBRequest, error) {
	return GetTRBRequestByID(ctx, r.store, id)
}

// TrbRequests is the resolver for the trbRequests field.
func (r *queryResolver) TrbRequests(ctx context.Context, archived bool) ([]*models.TRBRequest, error) {
	return GetTRBRequests(ctx, r.store, archived)
}

// MyTrbRequests is the resolver for the myTrbRequests field.
func (r *queryResolver) MyTrbRequests(ctx context.Context, archived bool) ([]*models.TRBRequest, error) {
	return GetMyTRBRequests(ctx, r.store, archived)
}

// TrbLeadOptions is the resolver for the trbLeadOptions field.
func (r *queryResolver) TrbLeadOptions(ctx context.Context) ([]*models.UserInfo, error) {
	return GetTRBLeadOptions(ctx, r.store, r.service.FetchUserInfos)
}

// TrbAdminNote is the resolver for the trbAdminNote field.
func (r *queryResolver) TrbAdminNote(ctx context.Context, id uuid.UUID) (*models.TRBAdminNote, error) {
	return GetTRBAdminNoteByID(ctx, r.store, id)
}

// RequesterUpdateEmailData is the resolver for the requesterUpdateEmailData field.
func (r *queryResolver) RequesterUpdateEmailData(ctx context.Context) ([]*models.RequesterUpdateEmailData, error) {
	return GetRequesterUpdateEmailData(ctx, r.store, r.service.FetchUserInfos)
}

// SystemIntakeSystem is the resolver for the systemIntakeSystem field.
func (r *queryResolver) SystemIntakeSystem(ctx context.Context, systemIntakeSystemID uuid.UUID) (*models.SystemIntakeSystem, error) {
	return GetLinkedSystemByID(ctx, r.store, systemIntakeSystemID)
}

// SystemIntakeSystems is the resolver for the systemIntakeSystems field.
func (r *queryResolver) SystemIntakeSystems(ctx context.Context, systemIntakeID uuid.UUID) ([]*models.SystemIntakeSystem, error) {
	return SystemIntakeSystemsByIntakeID(ctx, systemIntakeID)
}

// Actions is the resolver for the actions field.
func (r *systemIntakeResolver) Actions(ctx context.Context, obj *models.SystemIntake) ([]*models.SystemIntakeAction, error) {
	actions, actionsErr := dataloaders.GetSystemIntakeActionsBySystemIntakeID(ctx, obj.ID)
	if actionsErr != nil {
		return nil, actionsErr
	}

	var results []*models.SystemIntakeAction
	for _, action := range actions {
		graphAction := models.SystemIntakeAction{
			ID:   action.ID,
			Step: action.Step,
			Type: models.SystemIntakeActionType(action.ActionType),
			Actor: &models.SystemIntakeActionActor{
				Name:  action.ActorName,
				Email: action.ActorEmail.String(),
			},
			SystemIntake:           obj,
			Feedback:               action.Feedback,
			CreatedAt:              *action.CreatedAt,
			NewRetirementDate:      action.LCIDRetirementChangeNewDate,
			PreviousRetirementDate: action.LCIDRetirementChangePreviousDate,
		}

		if action.LCIDExpirationChangeNewDate != nil && action.LCIDExpirationChangePreviousDate != nil {
			graphAction.LcidExpirationChange = &models.SystemIntakeLCIDExpirationChange{
				NewDate:              *action.LCIDExpirationChangeNewDate,
				PreviousDate:         *action.LCIDExpirationChangePreviousDate,
				NewScope:             action.LCIDExpirationChangeNewScope,
				PreviousScope:        action.LCIDExpirationChangePreviousScope,
				NewNextSteps:         action.LCIDExpirationChangeNewNextSteps,
				PreviousNextSteps:    action.LCIDExpirationChangePreviousNextSteps,
				NewCostBaseline:      action.LCIDExpirationChangeNewCostBaseline.Ptr(),
				PreviousCostBaseline: action.LCIDExpirationChangePreviousCostBaseline.Ptr(),
			}
		}
		results = append(results, &graphAction)
	}
	return results, nil
}

// BusinessCase is the resolver for the businessCase field.
func (r *systemIntakeResolver) BusinessCase(ctx context.Context, obj *models.SystemIntake) (*models.BusinessCase, error) {
	return dataloaders.GetSystemIntakeBusinessCaseBySystemIntakeID(ctx, obj.ID)
}

// BusinessOwner is the resolver for the businessOwner field.
func (r *systemIntakeResolver) BusinessOwner(ctx context.Context, obj *models.SystemIntake) (*models.SystemIntakeBusinessOwner, error) {
	return &models.SystemIntakeBusinessOwner{
		Component: obj.BusinessOwnerComponent.Ptr(),
		Name:      obj.BusinessOwner.Ptr(),
	}, nil
}

// BusinessSolution is the resolver for the businessSolution field.
func (r *systemIntakeResolver) BusinessSolution(ctx context.Context, obj *models.SystemIntake) (*string, error) {
	return obj.Solution.Ptr(), nil
}

// Contract is the resolver for the contract field.
func (r *systemIntakeResolver) Contract(ctx context.Context, obj *models.SystemIntake) (*models.SystemIntakeContract, error) {
	contractEnd := models.ContractDate{}
	if len(obj.ContractEndMonth.String) > 0 {
		contractEnd.Month = obj.ContractEndMonth.Ptr()
	}

	if len(obj.ContractEndYear.String) > 0 {
		contractEnd.Year = obj.ContractEndYear.Ptr()
	}

	if obj.ContractEndDate != nil {
		endDate := *obj.ContractEndDate
		year, month, day := endDate.Date()

		dayStr := strconv.Itoa(day)
		monthStr := strconv.Itoa(int(month))
		yearStr := strconv.Itoa(year)

		contractEnd.Day = &dayStr
		contractEnd.Month = &monthStr
		contractEnd.Year = &yearStr
	}

	contractStart := models.ContractDate{}
	if len(obj.ContractStartMonth.String) > 0 {
		contractStart.Month = obj.ContractStartMonth.Ptr()
	}

	if len(obj.ContractStartYear.String) > 0 {
		contractStart.Year = obj.ContractStartYear.Ptr()
	}

	if obj.ContractStartDate != nil {
		startDate := *obj.ContractStartDate
		year, month, day := startDate.Date()

		dayStr := strconv.Itoa(day)
		monthStr := strconv.Itoa(int(month))
		yearStr := strconv.Itoa(year)

		contractStart.Day = &dayStr
		contractStart.Month = &monthStr
		contractStart.Year = &yearStr
	}

	return &models.SystemIntakeContract{
		Contractor:  obj.Contractor.Ptr(),
		EndDate:     &contractEnd,
		HasContract: obj.ExistingContract.Ptr(),
		StartDate:   &contractStart,
		Vehicle:     obj.ContractVehicle.Ptr(),
	}, nil
}

// Costs is the resolver for the costs field.
func (r *systemIntakeResolver) Costs(ctx context.Context, obj *models.SystemIntake) (*models.SystemIntakeCosts, error) {
	return &models.SystemIntakeCosts{
		ExpectedIncreaseAmount: obj.CostIncreaseAmount.Ptr(),
		IsExpectingIncrease:    obj.CostIncrease.Ptr(),
	}, nil
}

// AnnualSpending is the resolver for the annualSpending field.
func (r *systemIntakeResolver) AnnualSpending(ctx context.Context, obj *models.SystemIntake) (*models.SystemIntakeAnnualSpending, error) {
	return &models.SystemIntakeAnnualSpending{
		CurrentAnnualSpending:           obj.CurrentAnnualSpending.Ptr(),
		CurrentAnnualSpendingITPortion:  obj.CurrentAnnualSpendingITPortion.Ptr(),
		PlannedYearOneSpending:          obj.PlannedYearOneSpending.Ptr(),
		PlannedYearOneSpendingITPortion: obj.PlannedYearOneSpendingITPortion.Ptr(),
	}, nil
}

// CurrentStage is the resolver for the currentStage field.
func (r *systemIntakeResolver) CurrentStage(ctx context.Context, obj *models.SystemIntake) (*string, error) {
	return obj.ProcessStatus.Ptr(), nil
}

// FundingSources is the resolver for the fundingSources field.
func (r *systemIntakeResolver) FundingSources(ctx context.Context, obj *models.SystemIntake) ([]*models.SystemIntakeFundingSource, error) {
	return dataloaders.GetSystemIntakeFundingSourceBySystemIntakeID(ctx, obj.ID)
}

// GovernanceRequestFeedbacks is the resolver for the governanceRequestFeedbacks field.
func (r *systemIntakeResolver) GovernanceRequestFeedbacks(ctx context.Context, obj *models.SystemIntake) ([]*models.GovernanceRequestFeedback, error) {
	return GetGovernanceRequestFeedbacksByIntakeID(ctx, obj.ID)
}

// GovernanceTeams is the resolver for the governanceTeams field.
func (r *systemIntakeResolver) GovernanceTeams(ctx context.Context, obj *models.SystemIntake) (*models.SystemIntakeGovernanceTeam, error) {
	var teams []*models.SystemIntakeCollaborator

	if len(obj.TRBCollaboratorName.String) > 0 {
		key := "technicalReviewBoard"
		label := "Technical Review Board (TRB)"
		acronym := "TRB"
		name := "Technical Review Board"

		teams = append(teams, &models.SystemIntakeCollaborator{
			Key:          key,
			Label:        label,
			Acronym:      acronym,
			Name:         name,
			Collaborator: obj.TRBCollaboratorName.String,
		})
	}

	if len(obj.OITSecurityCollaboratorName.String) > 0 {
		key := "securityPrivacy"
		label := "OIT's Security and Privacy Group (ISPG)"
		acronym := "ISPG"
		name := "OIT's Security and Privacy Group"

		teams = append(teams, &models.SystemIntakeCollaborator{
			Key:          key,
			Label:        label,
			Acronym:      acronym,
			Name:         name,
			Collaborator: obj.OITSecurityCollaboratorName.String,
		})
	}

	if len(obj.CollaboratorName508.String) > 0 {
		key := "clearanceOfficer508"
		label := "508 Clearance Officer"
		acronym := "508"
		name := "508 Clearance Officer"

		teams = append(teams, &models.SystemIntakeCollaborator{
			Key:          key,
			Label:        label,
			Acronym:      acronym,
			Name:         name,
			Collaborator: obj.CollaboratorName508.String,
		})
	}

	if len(obj.EACollaboratorName.String) > 0 {
		key := "enterpriseArchitecture"
		label := "Enterprise Architecture (EA)"
		acronym := "EA"
		name := "Enterprise Architecture"

		teams = append(teams, &models.SystemIntakeCollaborator{
			Key:          key,
			Label:        label,
			Acronym:      acronym,
			Name:         name,
			Collaborator: obj.EACollaboratorName.String,
		})
	}

	return &models.SystemIntakeGovernanceTeam{
		IsPresent: obj.GovernanceTeamsIsPresent.Ptr(),
		Teams:     teams,
	}, nil
}

// LastMeetingDate is the resolver for the lastMeetingDate field.
func (r *systemIntakeResolver) LastMeetingDate(ctx context.Context, obj *models.SystemIntake) (*time.Time, error) {
	return SystemIntakeLastMeetingDate(ctx, obj, time.Now()), nil
}

// NextMeetingDate is the resolver for the nextMeetingDate field.
func (r *systemIntakeResolver) NextMeetingDate(ctx context.Context, obj *models.SystemIntake) (*time.Time, error) {
	return SystemIntakeNextMeetingDate(ctx, obj, time.Now()), nil
}

// GrbReviewers is the resolver for the grbReviewers field.
func (r *systemIntakeResolver) GrbReviewers(ctx context.Context, obj *models.SystemIntake) ([]*models.SystemIntakeGRBReviewer, error) {
	//TODO: this method is being deprecated. Remove it once the new method is implemented on the FE
	return SystemIntakeGRBReviewers(ctx, obj.ID)
}

// GrbVotingInformation is the resolver for the grbVotingInformation field.
func (r *systemIntakeResolver) GrbVotingInformation(ctx context.Context, obj *models.SystemIntake) (*models.GRBVotingInformation, error) {
	return GRBVotingInformationGetBySystemIntake(ctx, obj)
}

// Lcid is the resolver for the lcid field.
func (r *systemIntakeResolver) Lcid(ctx context.Context, obj *models.SystemIntake) (*string, error) {
	return obj.LifecycleID.Ptr(), nil
}

// LcidScope is the resolver for the lcidScope field.
func (r *systemIntakeResolver) LcidScope(ctx context.Context, obj *models.SystemIntake) (*models.HTML, error) {
	return obj.LifecycleScope, nil
}

// LcidCostBaseline is the resolver for the lcidCostBaseline field.
func (r *systemIntakeResolver) LcidCostBaseline(ctx context.Context, obj *models.SystemIntake) (*string, error) {
	return obj.LifecycleCostBaseline.Ptr(), nil
}

// NeedsEaSupport is the resolver for the needsEaSupport field.
func (r *systemIntakeResolver) NeedsEaSupport(ctx context.Context, obj *models.SystemIntake) (*bool, error) {
	return obj.EASupportRequest.Ptr(), nil
}

// AcquisitionMethods is the resolver for the acquisitionMethods field.
func (r *systemIntakeResolver) AcquisitionMethods(ctx context.Context, obj *models.SystemIntake) ([]models.SystemIntakeSoftwareAcquisitionMethods, error) {
	acqMethods := models.ConvertEnums[models.SystemIntakeSoftwareAcquisitionMethods](obj.AcquisitionMethods)
	return acqMethods, nil
}

// Notes is the resolver for the notes field.
func (r *systemIntakeResolver) Notes(ctx context.Context, obj *models.SystemIntake) ([]*models.SystemIntakeNote, error) {
	return SystemIntakeNotes(ctx, obj)
}

// ProductManager is the resolver for the productManager field.
func (r *systemIntakeResolver) ProductManager(ctx context.Context, obj *models.SystemIntake) (*models.SystemIntakeProductManager, error) {
	return &models.SystemIntakeProductManager{
		Component: obj.ProductManagerComponent.Ptr(),
		Name:      obj.ProductManager.Ptr(),
	}, nil
}

// RequestName is the resolver for the requestName field.
func (r *systemIntakeResolver) RequestName(ctx context.Context, obj *models.SystemIntake) (*string, error) {
	return obj.ProjectName.Ptr(), nil
}

// Requester is the resolver for the requester field.
func (r *systemIntakeResolver) Requester(ctx context.Context, obj *models.SystemIntake) (*models.SystemIntakeContact, error) {
	return SystemIntakeContactGetRequester(ctx, obj.ID)
}

// Documents is the resolver for the documents field.
func (r *systemIntakeResolver) Documents(ctx context.Context, obj *models.SystemIntake) ([]*models.SystemIntakeDocument, error) {
	return GetSystemIntakeDocumentsByRequestID(ctx, obj.ID)
}

// ItGovTaskStatuses is the resolver for the itGovTaskStatuses field.
func (r *systemIntakeResolver) ItGovTaskStatuses(ctx context.Context, obj *models.SystemIntake) (*models.ITGovTaskStatuses, error) {
	return &models.ITGovTaskStatuses{
		ParentSystemIntake: obj,
	}, nil
}

// StatusRequester is the resolver for the statusRequester field.
func (r *systemIntakeResolver) StatusRequester(ctx context.Context, obj *models.SystemIntake) (models.SystemIntakeStatusRequester, error) {
	return CalculateSystemIntakeRequesterStatus(ctx, obj, time.Now())
}

// StatusAdmin is the resolver for the statusAdmin field.
func (r *systemIntakeResolver) StatusAdmin(ctx context.Context, obj *models.SystemIntake) (models.SystemIntakeStatusAdmin, error) {
	return CalculateSystemIntakeAdminStatus(ctx, obj)
}

// LcidStatus is the resolver for the lcidStatus field.
func (r *systemIntakeResolver) LcidStatus(ctx context.Context, obj *models.SystemIntake) (*models.SystemIntakeLCIDStatus, error) {
	return obj.LCIDStatus(time.Now()), nil
}

// RelationType is the resolver for the relationType field.
func (r *systemIntakeResolver) RelationType(ctx context.Context, obj *models.SystemIntake) (*models.RequestRelationType, error) {
	return obj.SystemRelationType, nil
}

// Systems is the resolver for the systems field on system intakes.
func (r *systemIntakeResolver) Systems(ctx context.Context, obj *models.SystemIntake) ([]*models.CedarSystem, error) {
	return SystemIntakeSystems(ctx, obj.ID)
}

// ContractNumbers is the resolver for the contractNumbers field on system intakes.
func (r *systemIntakeResolver) ContractNumbers(ctx context.Context, obj *models.SystemIntake) ([]*models.SystemIntakeContractNumber, error) {
	return SystemIntakeContractNumbers(ctx, obj.ID)
}

// RelatedIntakes is the resolver for the relatedIntakes field.
func (r *systemIntakeResolver) RelatedIntakes(ctx context.Context, obj *models.SystemIntake) ([]*models.SystemIntake, error) {
	return SystemIntakeRelatedSystemIntakes(ctx, obj.ID)
}

// RelatedTRBRequests is the resolver for the relatedTRBRequests field.
func (r *systemIntakeResolver) RelatedTRBRequests(ctx context.Context, obj *models.SystemIntake) ([]*models.TRBRequest, error) {
	return SystemIntakeRelatedTRBRequests(ctx, obj.ID)
}

// GrbDiscussionsPrimary is the resolver for the grbDiscussionsPrimary field.
func (r *systemIntakeResolver) GrbDiscussionsPrimary(ctx context.Context, obj *models.SystemIntake) ([]*models.SystemIntakeGRBReviewDiscussion, error) {
	return SystemIntakeGRBDiscussions(ctx, obj.ID, models.SystemIntakeGRBDiscussionBoardTypePrimary)
}

// GrbDiscussionsInternal is the resolver for the grbDiscussionsInternal field.
func (r *systemIntakeResolver) GrbDiscussionsInternal(ctx context.Context, obj *models.SystemIntake) ([]*models.SystemIntakeGRBReviewDiscussion, error) {
	return SystemIntakeGRBDiscussions(ctx, obj.ID, models.SystemIntakeGRBDiscussionBoardTypeInternal)
}

// GrbPresentationLinks is the resolver for the grbPresentationLinks field.
func (r *systemIntakeResolver) GrbPresentationLinks(ctx context.Context, obj *models.SystemIntake) (*models.SystemIntakeGRBPresentationLinks, error) {
	return dataloaders.GetSystemIntakeGRBPresentationLinksByIntakeID(ctx, obj.ID)
}

// GrbReviewStandardStatus is the resolver for the grbReviewStandardStatus field.
func (r *systemIntakeResolver) GrbReviewStandardStatus(ctx context.Context, obj *models.SystemIntake) (*models.SystemIntakeGRBReviewStandardStatusType, error) {
	return CalcSystemIntakeGRBReviewStandardStatus(obj), nil
}

// GrbReviewAsyncStatus is the resolver for the grbReviewAsyncStatus field.
func (r *systemIntakeResolver) GrbReviewAsyncStatus(ctx context.Context, obj *models.SystemIntake) (*models.SystemIntakeGRBReviewAsyncStatusType, error) {
	return CalcSystemIntakeGRBReviewAsyncStatus(ctx, obj), nil
}

// SystemIntakeSystems is the resolver for the systemIntakeSystems field.
func (r *systemIntakeResolver) SystemIntakeSystems(ctx context.Context, obj *models.SystemIntake) ([]*models.SystemIntakeSystem, error) {
	return SystemIntakeSystemsByIntakeID(ctx, obj.ID)
}

// Contacts is the resolver for the contacts field.
func (r *systemIntakeResolver) Contacts(ctx context.Context, obj *models.SystemIntake) (*models.SystemIntakeContacts, error) {
	return SystemIntakeContactsGetBySystemIntakeID(ctx, obj.ID)
}

// Component is the resolver for the component field.
func (r *systemIntakeContactResolver) Component(ctx context.Context, obj *models.SystemIntakeContact) (*models.SystemIntakeContactComponent, error) {
	if obj == nil {
		return nil, nil
	}
	return obj.FilteredComponent(), nil
}

// Roles is the resolver for the roles field.
func (r *systemIntakeContactResolver) Roles(ctx context.Context, obj *models.SystemIntakeContact) ([]models.SystemIntakeContactRole, error) {
	if obj == nil {
		return nil, nil
	}
	return obj.FilteredRoles(), nil
}

// DocumentType is the resolver for the documentType field.
func (r *systemIntakeDocumentResolver) DocumentType(ctx context.Context, obj *models.SystemIntakeDocument) (*models.SystemIntakeDocumentType, error) {
	return &models.SystemIntakeDocumentType{
		CommonType:           obj.CommonDocumentType,
		OtherTypeDescription: &obj.OtherType,
	}, nil
}

// Status is the resolver for the status field.
func (r *systemIntakeDocumentResolver) Status(ctx context.Context, obj *models.SystemIntakeDocument) (models.SystemIntakeDocumentStatus, error) {
	return GetStatusForSystemIntakeDocument(ctx, r.s3Client, obj.S3Key)
}

// UploadedAt is the resolver for the uploadedAt field.
func (r *systemIntakeDocumentResolver) UploadedAt(ctx context.Context, obj *models.SystemIntakeDocument) (*time.Time, error) {
	return &obj.CreatedAt, nil
}

// URL is the resolver for the url field.
func (r *systemIntakeDocumentResolver) URL(ctx context.Context, obj *models.SystemIntakeDocument) (*string, error) {
	return GetURLForSystemIntakeDocument(ctx, r.store, r.s3Client, obj.S3Key)
}

// CanDelete is the resolver for the canDelete field.
func (r *systemIntakeDocumentResolver) CanDelete(ctx context.Context, obj *models.SystemIntakeDocument) (bool, error) {
	return CanDeleteDocument(ctx, obj), nil
}

// CanView is the resolver for the canView field.
func (r *systemIntakeDocumentResolver) CanView(ctx context.Context, obj *models.SystemIntakeDocument) (bool, error) {
	grbUsers, err := dataloaders.GetSystemIntakeGRBReviewersBySystemIntakeID(ctx, obj.SystemIntakeID)
	if err != nil {
		return false, err
	}
	return CanViewDocument(ctx, grbUsers, obj), nil
}

// TranscriptFileURL is the resolver for the transcriptFileURL field.
func (r *systemIntakeGRBPresentationLinksResolver) TranscriptFileURL(ctx context.Context, obj *models.SystemIntakeGRBPresentationLinks) (*string, error) {
	return SystemIntakeGRBPresentationLinksTranscriptFileURL(ctx, r.s3Client, obj.SystemIntakeID)
}

// TranscriptFileStatus is the resolver for the transcriptFileStatus field.
func (r *systemIntakeGRBPresentationLinksResolver) TranscriptFileStatus(ctx context.Context, obj *models.SystemIntakeGRBPresentationLinks) (*models.SystemIntakeDocumentStatus, error) {
	logger := appcontext.ZLogger(ctx)
	return SystemIntakeGRBPresentationLinksTranscriptFileStatus(ctx, logger, r.s3Client, obj.SystemIntakeID)
}

// PresentationDeckFileURL is the resolver for the presentationDeckFileURL field.
func (r *systemIntakeGRBPresentationLinksResolver) PresentationDeckFileURL(ctx context.Context, obj *models.SystemIntakeGRBPresentationLinks) (*string, error) {
	return SystemIntakeGRBPresentationLinksPresentationDeckFileURL(ctx, r.s3Client, obj.SystemIntakeID)
}

// PresentationDeckFileStatus is the resolver for the presentationDeckFileStatus field.
func (r *systemIntakeGRBPresentationLinksResolver) PresentationDeckFileStatus(ctx context.Context, obj *models.SystemIntakeGRBPresentationLinks) (*models.SystemIntakeDocumentStatus, error) {
	logger := appcontext.ZLogger(ctx)
	return SystemIntakeGRBPresentationLinksPresentationDeckFileStatus(ctx, logger, r.s3Client, obj.SystemIntakeID)
}

// VotingRole is the resolver for the votingRole field.
func (r *systemIntakeGRBReviewerResolver) VotingRole(ctx context.Context, obj *models.SystemIntakeGRBReviewer) (models.SystemIntakeGRBReviewerVotingRole, error) {
	return models.SystemIntakeGRBReviewerVotingRole(obj.GRBVotingRole), nil
}

// GrbRole is the resolver for the grbRole field.
func (r *systemIntakeGRBReviewerResolver) GrbRole(ctx context.Context, obj *models.SystemIntakeGRBReviewer) (models.SystemIntakeGRBReviewerRole, error) {
	return models.SystemIntakeGRBReviewerRole(obj.GRBReviewerRole), nil
}

// Author is the resolver for the author field.
func (r *systemIntakeNoteResolver) Author(ctx context.Context, obj *models.SystemIntakeNote) (*models.SystemIntakeNoteAuthor, error) {
	return SystemIntakeNoteAuthor(obj)
}

// Editor is the resolver for the editor field.
func (r *systemIntakeNoteResolver) Editor(ctx context.Context, obj *models.SystemIntakeNote) (*models.UserInfo, error) {
	return SystemIntakeNoteEditor(ctx, obj)
}

// CedarSystem is the resolver for the cedarSystem field.
func (r *systemIntakeSystemResolver) CedarSystem(ctx context.Context, obj *models.SystemIntakeSystem) (*models.CedarSystem, error) {
	return dataloaders.GetCedarSystemByID(ctx, obj.SystemID)
}

// SystemRelationshipType is the resolver for the systemRelationshipType field.
func (r *systemIntakeSystemResolver) SystemRelationshipType(ctx context.Context, obj *models.SystemIntakeSystem) ([]models.SystemRelationshipType, error) {
	return obj.SystemRelationshipType, nil
}

// Author is the resolver for the author field.
func (r *tRBAdminNoteResolver) Author(ctx context.Context, obj *models.TRBAdminNote) (*models.UserInfo, error) {
	authorInfo, err := dataloaders.FetchUserInfoByEUAUserID(ctx, obj.CreatedBy)
	if err != nil {
		return nil, err
	}

	return authorInfo, nil
}

// CategorySpecificData is the resolver for the categorySpecificData field.
func (r *tRBAdminNoteResolver) CategorySpecificData(ctx context.Context, obj *models.TRBAdminNote) (models.TRBAdminNoteCategorySpecificData, error) {
	return GetTRBAdminNoteCategorySpecificData(ctx, r.store, obj)
}

// Author is the resolver for the author field.
func (r *tRBGuidanceLetterResolver) Author(ctx context.Context, obj *models.TRBGuidanceLetter) (*models.UserInfo, error) {
	authorInfo, err := dataloaders.FetchUserInfoByEUAUserID(ctx, obj.CreatedBy)
	if err != nil {
		return nil, err
	}

	return authorInfo, nil
}

// Insights is the resolver for the insights field.
func (r *tRBGuidanceLetterResolver) Insights(ctx context.Context, obj *models.TRBGuidanceLetter) ([]*models.TRBGuidanceLetterInsight, error) {
	return GetTRBGuidanceLetterInsightsByTRBRequestID(ctx, r.store, obj.TRBRequestID)
}

// Links is the resolver for the links field.
func (r *tRBGuidanceLetterInsightResolver) Links(ctx context.Context, obj *models.TRBGuidanceLetterInsight) ([]string, error) {
	links := models.ConvertEnums[string](obj.Links)
	return links, nil
}

// Author is the resolver for the author field.
func (r *tRBGuidanceLetterInsightResolver) Author(ctx context.Context, obj *models.TRBGuidanceLetterInsight) (*models.UserInfo, error) {
	authorInfo, err := dataloaders.FetchUserInfoByEUAUserID(ctx, obj.CreatedBy)
	if err != nil {
		return nil, err
	}

	return authorInfo, nil
}

// Status is the resolver for the status field.
func (r *tRBRequestResolver) Status(ctx context.Context, obj *models.TRBRequest) (models.TRBRequestStatus, error) {
	return GetTRBRequestStatus(ctx, *obj)
}

// Attendees is the resolver for the attendees field.
func (r *tRBRequestResolver) Attendees(ctx context.Context, obj *models.TRBRequest) ([]*models.TRBRequestAttendee, error) {
	return GetTRBRequestAttendeesByTRBRequestID(ctx, obj.ID)
}

// Feedback is the resolver for the feedback field.
func (r *tRBRequestResolver) Feedback(ctx context.Context, obj *models.TRBRequest) ([]*models.TRBRequestFeedback, error) {
	return GetTRBRequestFeedbackByTRBRequestID(ctx, obj.ID)
}

// Documents is the resolver for the documents field.
func (r *tRBRequestResolver) Documents(ctx context.Context, obj *models.TRBRequest) ([]*models.TRBRequestDocument, error) {
	return GetTRBRequestDocumentsByRequestID(ctx, obj.ID)
}

// Form is the resolver for the form field.
func (r *tRBRequestResolver) Form(ctx context.Context, obj *models.TRBRequest) (*models.TRBRequestForm, error) {
	return GetTRBRequestFormByTRBRequestID(ctx, obj.ID)
}

// GuidanceLetter is the resolver for the guidancLetter field.
func (r *tRBRequestResolver) GuidanceLetter(ctx context.Context, obj *models.TRBRequest) (*models.TRBGuidanceLetter, error) {
	return GetTRBGuidanceLetterByTRBRequestID(ctx, obj.ID)
}

// TaskStatuses is the resolver for the taskStatuses field.
func (r *tRBRequestResolver) TaskStatuses(ctx context.Context, obj *models.TRBRequest) (*models.TRBTaskStatuses, error) {
	return GetTRBTaskStatuses(ctx, *obj)
}

// LastMeetingDate is the resolver for the lastMeetingDate field.
func (r *tRBRequestResolver) LastMeetingDate(ctx context.Context, obj *models.TRBRequest) (*time.Time, error) {
	return TRBRequestLastMeetingDate(ctx, obj, time.Now()), nil
}

// NextMeetingDate is the resolver for the nextMeetingDate field.
func (r *tRBRequestResolver) NextMeetingDate(ctx context.Context, obj *models.TRBRequest) (*time.Time, error) {
	return TRBRequestNextMeetingDate(ctx, obj, time.Now()), nil
}

// TrbLeadInfo is the resolver for the trbLeadInfo field.
func (r *tRBRequestResolver) TrbLeadInfo(ctx context.Context, obj *models.TRBRequest) (*models.UserInfo, error) {
	return GetTRBLeadInfo(ctx, obj.TRBLead)
}

// RequesterInfo is the resolver for the requesterInfo field.
func (r *tRBRequestResolver) RequesterInfo(ctx context.Context, obj *models.TRBRequest) (*models.UserInfo, error) {
	return GetTRBRequesterInfo(ctx, obj.CreatedBy)
}

// RequesterComponent is the resolver for the requesterComponent field.
func (r *tRBRequestResolver) RequesterComponent(ctx context.Context, obj *models.TRBRequest) (*string, error) {
	requester := obj.CreatedBy
	return GetTRBAttendeeComponent(ctx, &requester, obj.ID)
}

// AdminNotes is the resolver for the adminNotes field.
func (r *tRBRequestResolver) AdminNotes(ctx context.Context, obj *models.TRBRequest) ([]*models.TRBAdminNote, error) {
	return GetTRBAdminNotesByTRBRequestID(ctx, obj.ID)
}

// IsRecent is the resolver for the isRecent field.
func (r *tRBRequestResolver) IsRecent(ctx context.Context, obj *models.TRBRequest) (bool, error) {
	return IsRecentTRBRequest(ctx, obj, time.Now()), nil
}

// RelationType is the resolver for the relationType field.
func (r *tRBRequestResolver) RelationType(ctx context.Context, obj *models.TRBRequest) (*models.RequestRelationType, error) {
	return obj.SystemRelationType, nil
}

// ContractNumbers is the resolver for the contractNumbers field.
func (r *tRBRequestResolver) ContractNumbers(ctx context.Context, obj *models.TRBRequest) ([]*models.TRBRequestContractNumber, error) {
	return TRBRequestContractNumbers(ctx, obj.ID)
}

// Systems is the resolver for the systems field.
func (r *tRBRequestResolver) Systems(ctx context.Context, obj *models.TRBRequest) ([]*models.CedarSystem, error) {
	return TRBRequestSystems(ctx, obj.ID)
}

// RelatedIntakes is the resolver for the relatedIntakes field.
func (r *tRBRequestResolver) RelatedIntakes(ctx context.Context, obj *models.TRBRequest) ([]*models.SystemIntake, error) {
	return TRBRequestRelatedSystemIntakes(ctx, obj.ID)
}

// RelatedTRBRequests is the resolver for the relatedTRBRequests field.
func (r *tRBRequestResolver) RelatedTRBRequests(ctx context.Context, obj *models.TRBRequest) ([]*models.TRBRequest, error) {
	return TRBRequestRelatedTRBRequests(ctx, obj.ID)
}

// UserInfo is the resolver for the userInfo field.
func (r *tRBRequestAttendeeResolver) UserInfo(ctx context.Context, obj *models.TRBRequestAttendee) (*models.UserInfo, error) {
	userInfo, err := dataloaders.FetchUserInfoByEUAUserID(ctx, obj.EUAUserID)
	if err != nil {
		return nil, err
	}
	return userInfo, nil
}

// DocumentType is the resolver for the documentType field.
func (r *tRBRequestDocumentResolver) DocumentType(ctx context.Context, obj *models.TRBRequestDocument) (*models.TRBRequestDocumentType, error) {
	return &models.TRBRequestDocumentType{
		CommonType:           obj.CommonDocumentType,
		OtherTypeDescription: &obj.OtherType,
	}, nil
}

// Status is the resolver for the status field.
func (r *tRBRequestDocumentResolver) Status(ctx context.Context, obj *models.TRBRequestDocument) (models.TRBRequestDocumentStatus, error) {
	return GetStatusForTRBRequestDocument(ctx, r.s3Client, obj.S3Key)
}

// UploadedAt is the resolver for the uploadedAt field.
func (r *tRBRequestDocumentResolver) UploadedAt(ctx context.Context, obj *models.TRBRequestDocument) (*time.Time, error) {
	return &obj.CreatedAt, nil
}

// URL is the resolver for the url field.
func (r *tRBRequestDocumentResolver) URL(ctx context.Context, obj *models.TRBRequestDocument) (string, error) {
	return GetURLForTRBRequestDocument(ctx, r.s3Client, obj.S3Key)
}

// NotifyEuaIds is the resolver for the notifyEuaIds field.
func (r *tRBRequestFeedbackResolver) NotifyEuaIds(ctx context.Context, obj *models.TRBRequestFeedback) ([]string, error) {
	ids := models.ConvertEnums[string](obj.NotifyEUAIDs)
	return ids, nil
}

// Author is the resolver for the author field.
func (r *tRBRequestFeedbackResolver) Author(ctx context.Context, obj *models.TRBRequestFeedback) (*models.UserInfo, error) {
	user, err := dataloaders.FetchUserInfoByEUAUserID(ctx, obj.CreatedBy)
	if err != nil {
		return &models.UserInfo{}, err
	}
	return user, nil
}

// CollabGroups is the resolver for the collabGroups field.
func (r *tRBRequestFormResolver) CollabGroups(ctx context.Context, obj *models.TRBRequestForm) ([]models.TRBCollabGroupOption, error) {
	collabGroups := models.ConvertEnums[models.TRBCollabGroupOption](obj.CollabGroups)
	return collabGroups, nil
}

// FundingSources is the resolver for the fundingSources field.
func (r *tRBRequestFormResolver) FundingSources(ctx context.Context, obj *models.TRBRequestForm) ([]*models.TRBFundingSource, error) {
	return GetTRBFundingSourcesByRequestID(ctx, obj.TRBRequestID)
}

// SystemIntakes is the resolver for the systemIntakes field.
func (r *tRBRequestFormResolver) SystemIntakes(ctx context.Context, obj *models.TRBRequestForm) ([]*models.SystemIntake, error) {
	return GetTRBRequestFormSystemIntakesByTRBRequestID(ctx, obj.TRBRequestID)
}

// SubjectAreaOptions is the resolver for the subjectAreaOptions field.
func (r *tRBRequestFormResolver) SubjectAreaOptions(ctx context.Context, obj *models.TRBRequestForm) ([]models.TRBSubjectAreaOption, error) {
	subjectAreas := models.ConvertEnums[models.TRBSubjectAreaOption](obj.SubjectAreaOptions)
	return subjectAreas, nil
}

// CommonName is the resolver for the commonName field.
func (r *userInfoResolver) CommonName(ctx context.Context, obj *models.UserInfo) (string, error) {
	return obj.DisplayName, nil
	//TODO: this user info struct should eventually be refactored so that the schema matches the backend.
}

// EuaUserID is the resolver for the euaUserId field.
func (r *userInfoResolver) EuaUserID(ctx context.Context, obj *models.UserInfo) (string, error) {
	return obj.Username, nil
	//TODO: this user info struct should eventually be refactored so that the schema matches the backend.
}

// BusinessCase returns generated.BusinessCaseResolver implementation.
func (r *Resolver) BusinessCase() generated.BusinessCaseResolver { return &businessCaseResolver{r} }

// CedarBudgetSystemCost returns generated.CedarBudgetSystemCostResolver implementation.
func (r *Resolver) CedarBudgetSystemCost() generated.CedarBudgetSystemCostResolver {
	return &cedarBudgetSystemCostResolver{r}
}

// CedarSoftwareProducts returns generated.CedarSoftwareProductsResolver implementation.
func (r *Resolver) CedarSoftwareProducts() generated.CedarSoftwareProductsResolver {
	return &cedarSoftwareProductsResolver{r}
}

// GovernanceRequestFeedback returns generated.GovernanceRequestFeedbackResolver implementation.
func (r *Resolver) GovernanceRequestFeedback() generated.GovernanceRequestFeedbackResolver {
	return &governanceRequestFeedbackResolver{r}
}

// ITGovTaskStatuses returns generated.ITGovTaskStatusesResolver implementation.
func (r *Resolver) ITGovTaskStatuses() generated.ITGovTaskStatusesResolver {
	return &iTGovTaskStatusesResolver{r}
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// SystemIntake returns generated.SystemIntakeResolver implementation.
func (r *Resolver) SystemIntake() generated.SystemIntakeResolver { return &systemIntakeResolver{r} }

// SystemIntakeContact returns generated.SystemIntakeContactResolver implementation.
func (r *Resolver) SystemIntakeContact() generated.SystemIntakeContactResolver {
	return &systemIntakeContactResolver{r}
}

// SystemIntakeDocument returns generated.SystemIntakeDocumentResolver implementation.
func (r *Resolver) SystemIntakeDocument() generated.SystemIntakeDocumentResolver {
	return &systemIntakeDocumentResolver{r}
}

// SystemIntakeGRBPresentationLinks returns generated.SystemIntakeGRBPresentationLinksResolver implementation.
func (r *Resolver) SystemIntakeGRBPresentationLinks() generated.SystemIntakeGRBPresentationLinksResolver {
	return &systemIntakeGRBPresentationLinksResolver{r}
}

// SystemIntakeGRBReviewer returns generated.SystemIntakeGRBReviewerResolver implementation.
func (r *Resolver) SystemIntakeGRBReviewer() generated.SystemIntakeGRBReviewerResolver {
	return &systemIntakeGRBReviewerResolver{r}
}

// SystemIntakeNote returns generated.SystemIntakeNoteResolver implementation.
func (r *Resolver) SystemIntakeNote() generated.SystemIntakeNoteResolver {
	return &systemIntakeNoteResolver{r}
}

// SystemIntakeSystem returns generated.SystemIntakeSystemResolver implementation.
func (r *Resolver) SystemIntakeSystem() generated.SystemIntakeSystemResolver {
	return &systemIntakeSystemResolver{r}
}

// TRBAdminNote returns generated.TRBAdminNoteResolver implementation.
func (r *Resolver) TRBAdminNote() generated.TRBAdminNoteResolver { return &tRBAdminNoteResolver{r} }

// TRBGuidanceLetter returns generated.TRBGuidanceLetterResolver implementation.
func (r *Resolver) TRBGuidanceLetter() generated.TRBGuidanceLetterResolver {
	return &tRBGuidanceLetterResolver{r}
}

// TRBGuidanceLetterInsight returns generated.TRBGuidanceLetterInsightResolver implementation.
func (r *Resolver) TRBGuidanceLetterInsight() generated.TRBGuidanceLetterInsightResolver {
	return &tRBGuidanceLetterInsightResolver{r}
}

// TRBRequest returns generated.TRBRequestResolver implementation.
func (r *Resolver) TRBRequest() generated.TRBRequestResolver { return &tRBRequestResolver{r} }

// TRBRequestAttendee returns generated.TRBRequestAttendeeResolver implementation.
func (r *Resolver) TRBRequestAttendee() generated.TRBRequestAttendeeResolver {
	return &tRBRequestAttendeeResolver{r}
}

// TRBRequestDocument returns generated.TRBRequestDocumentResolver implementation.
func (r *Resolver) TRBRequestDocument() generated.TRBRequestDocumentResolver {
	return &tRBRequestDocumentResolver{r}
}

// TRBRequestFeedback returns generated.TRBRequestFeedbackResolver implementation.
func (r *Resolver) TRBRequestFeedback() generated.TRBRequestFeedbackResolver {
	return &tRBRequestFeedbackResolver{r}
}

// TRBRequestForm returns generated.TRBRequestFormResolver implementation.
func (r *Resolver) TRBRequestForm() generated.TRBRequestFormResolver {
	return &tRBRequestFormResolver{r}
}

// UserInfo returns generated.UserInfoResolver implementation.
func (r *Resolver) UserInfo() generated.UserInfoResolver { return &userInfoResolver{r} }

type businessCaseResolver struct{ *Resolver }
type cedarBudgetSystemCostResolver struct{ *Resolver }
type cedarSoftwareProductsResolver struct{ *Resolver }
type governanceRequestFeedbackResolver struct{ *Resolver }
type iTGovTaskStatusesResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type systemIntakeResolver struct{ *Resolver }
type systemIntakeContactResolver struct{ *Resolver }
type systemIntakeDocumentResolver struct{ *Resolver }
type systemIntakeGRBPresentationLinksResolver struct{ *Resolver }
type systemIntakeGRBReviewerResolver struct{ *Resolver }
type systemIntakeNoteResolver struct{ *Resolver }
type systemIntakeSystemResolver struct{ *Resolver }
type tRBAdminNoteResolver struct{ *Resolver }
type tRBGuidanceLetterResolver struct{ *Resolver }
type tRBGuidanceLetterInsightResolver struct{ *Resolver }
type tRBRequestResolver struct{ *Resolver }
type tRBRequestAttendeeResolver struct{ *Resolver }
type tRBRequestDocumentResolver struct{ *Resolver }
type tRBRequestFeedbackResolver struct{ *Resolver }
type tRBRequestFormResolver struct{ *Resolver }
type userInfoResolver struct{ *Resolver }
