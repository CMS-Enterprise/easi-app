// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/cmsgov/easi-app/pkg/models"
	"github.com/google/uuid"
)

type TRBAdminNoteCategorySpecificData interface {
	IsTRBAdminNoteCategorySpecificData()
}

// Denotes type of a document that is attached to a 508/accessibility request,
// which can be one of a number of common types, or another user-specified type
type AccessibilityRequestDocumentType struct {
	CommonType           models.AccessibilityRequestDocumentCommonType `json:"commonType"`
	OtherTypeDescription *string                                       `json:"otherTypeDescription,omitempty"`
}

type AccessibilityRequestEdge struct {
	Node *models.AccessibilityRequest `json:"node"`
}

type AccessibilityRequestsConnection struct {
	Edges []*AccessibilityRequestEdge `json:"edges"`
}

// A solution proposal within a business case
type BusinessCaseSolution struct {
	AcquisitionApproach     *string `json:"acquisitionApproach,omitempty"`
	Cons                    *string `json:"cons,omitempty"`
	CostSavings             *string `json:"costSavings,omitempty"`
	HasUI                   *string `json:"hasUi,omitempty"`
	HostingCloudServiceType *string `json:"hostingCloudServiceType,omitempty"`
	HostingLocation         *string `json:"hostingLocation,omitempty"`
	HostingType             *string `json:"hostingType,omitempty"`
	Pros                    *string `json:"pros,omitempty"`
	SecurityIsApproved      *bool   `json:"securityIsApproved,omitempty"`
	SecurityIsBeingReviewed *string `json:"securityIsBeingReviewed,omitempty"`
	Summary                 *string `json:"summary,omitempty"`
	Title                   *string `json:"title,omitempty"`
}

// BusinessOwnerInformation contains information about the business owner for a CEDAR system
type CedarBusinessOwnerInformation struct {
	BeneficiaryAddressPurpose      []string `json:"beneficiaryAddressPurpose"`
	BeneficiaryAddressPurposeOther *string  `json:"beneficiaryAddressPurposeOther,omitempty"`
	BeneficiaryAddressSource       []string `json:"beneficiaryAddressSource"`
	BeneficiaryAddressSourceOther  *string  `json:"beneficiaryAddressSourceOther,omitempty"`
	CostPerYear                    *string  `json:"costPerYear,omitempty"`
	IsCmsOwned                     *bool    `json:"isCmsOwned,omitempty"`
	NumberOfContractorFte          *string  `json:"numberOfContractorFte,omitempty"`
	NumberOfFederalFte             *string  `json:"numberOfFederalFte,omitempty"`
	NumberOfSupportedUsersPerMonth *string  `json:"numberOfSupportedUsersPerMonth,omitempty"`
	StoresBankingData              *bool    `json:"storesBankingData,omitempty"`
	StoresBeneficiaryAddress       *bool    `json:"storesBeneficiaryAddress,omitempty"`
}

// CedarSoftwareProductItem represents an individual software product; this information is returned from the CEDAR Core API
// as a part of the CedarSoftwareProducts object
type CedarSoftwareProductItem struct {
	APIGatewayUse                  *bool   `json:"apiGatewayUse,omitempty"`
	ElaPurchase                    *string `json:"elaPurchase,omitempty"`
	ElaVendorID                    *string `json:"elaVendorId,omitempty"`
	ProvidesAiCapability           *bool   `json:"providesAiCapability,omitempty"`
	Refstr                         *string `json:"refstr,omitempty"`
	SoftwareCatagoryConnectionGUID *string `json:"softwareCatagoryConnectionGuid,omitempty"`
	SoftwareVendorConnectionGUID   *string `json:"softwareVendorConnectionGuid,omitempty"`
	SoftwareCost                   *string `json:"softwareCost,omitempty"`
	SoftwareElaOrganization        *string `json:"softwareElaOrganization,omitempty"`
	SoftwareName                   *string `json:"softwareName,omitempty"`
	SystemSoftwareConnectionGUID   *string `json:"systemSoftwareConnectionGuid,omitempty"`
	TechnopediaCategory            *string `json:"technopediaCategory,omitempty"`
	TechnopediaID                  *string `json:"technopediaID,omitempty"`
	VendorName                     *string `json:"vendorName,omitempty"`
}

// SystemMaintainerInformation contains information about the system maintainer of a CEDAR system
type CedarSystemMaintainerInformation struct {
	AgileUsed                  *bool    `json:"agileUsed,omitempty"`
	BusinessArtifactsOnDemand  *bool    `json:"businessArtifactsOnDemand,omitempty"`
	DeploymentFrequency        *string  `json:"deploymentFrequency,omitempty"`
	DevCompletionPercent       *string  `json:"devCompletionPercent,omitempty"`
	DevWorkDescription         *string  `json:"devWorkDescription,omitempty"`
	EcapParticipation          *bool    `json:"ecapParticipation,omitempty"`
	FrontendAccessType         *string  `json:"frontendAccessType,omitempty"`
	HardCodedIPAddress         *bool    `json:"hardCodedIPAddress,omitempty"`
	IP6EnabledAssetPercent     *string  `json:"ip6EnabledAssetPercent,omitempty"`
	IP6TransitionPlan          *string  `json:"ip6TransitionPlan,omitempty"`
	IPEnabledAssetCount        *int     `json:"ipEnabledAssetCount,omitempty"`
	MajorRefreshDate           *string  `json:"majorRefreshDate,omitempty"`
	NetAccessibility           *string  `json:"netAccessibility,omitempty"`
	OmDocumentationOnDemand    *bool    `json:"omDocumentationOnDemand,omitempty"`
	PlansToRetireReplace       *string  `json:"plansToRetireReplace,omitempty"`
	QuarterToRetireReplace     *string  `json:"quarterToRetireReplace,omitempty"`
	RecordsManagementBucket    []string `json:"recordsManagementBucket"`
	SourceCodeOnDemand         *bool    `json:"sourceCodeOnDemand,omitempty"`
	SystemCustomization        *string  `json:"systemCustomization,omitempty"`
	SystemDesignOnDemand       *bool    `json:"systemDesignOnDemand,omitempty"`
	SystemProductionDate       *string  `json:"systemProductionDate,omitempty"`
	SystemRequirementsOnDemand *bool    `json:"systemRequirementsOnDemand,omitempty"`
	TestPlanOnDemand           *bool    `json:"testPlanOnDemand,omitempty"`
	TestReportsOnDemand        *bool    `json:"testReportsOnDemand,omitempty"`
	TestScriptsOnDemand        *bool    `json:"testScriptsOnDemand,omitempty"`
	YearToRetireReplace        *string  `json:"yearToRetireReplace,omitempty"`
}

// The input needed to close a TRB request
type CloseTRBRequestInput struct {
	ID             uuid.UUID   `json:"id"`
	ReasonClosed   models.HTML `json:"reasonClosed"`
	CopyTrbMailbox bool        `json:"copyTrbMailbox"`
	NotifyEuaIds   []string    `json:"notifyEuaIds"`
}

// Represents a date used for start and end dates on a contract
type ContractDate struct {
	Day   *string `json:"day,omitempty"`
	Month *string `json:"month,omitempty"`
	Year  *string `json:"year,omitempty"`
}

// The input data used for adding a document to a 508/accessibility request
type CreateAccessibilityRequestDocumentInput struct {
	CommonDocumentType           models.AccessibilityRequestDocumentCommonType `json:"commonDocumentType"`
	MimeType                     string                                        `json:"mimeType"`
	Name                         string                                        `json:"name"`
	OtherDocumentTypeDescription *string                                       `json:"otherDocumentTypeDescription,omitempty"`
	RequestID                    uuid.UUID                                     `json:"requestID"`
	Size                         int                                           `json:"size"`
	URL                          string                                        `json:"url"`
}

// The payload containing the input data used for adding a document to a
// 508/accessibility request
type CreateAccessibilityRequestDocumentPayload struct {
	AccessibilityRequestDocument *models.AccessibilityRequestDocument `json:"accessibilityRequestDocument,omitempty"`
	UserErrors                   []*UserError                         `json:"userErrors,omitempty"`
}

// The data needed to initialize a 508/accessibility request
type CreateAccessibilityRequestInput struct {
	IntakeID      *uuid.UUID `json:"intakeID,omitempty"`
	Name          string     `json:"name"`
	CedarSystemID *string    `json:"cedarSystemId,omitempty"`
}

// The data used when adding a note to a 508/accessibility request
type CreateAccessibilityRequestNoteInput struct {
	RequestID       uuid.UUID `json:"requestID"`
	Note            string    `json:"note"`
	ShouldSendEmail bool      `json:"shouldSendEmail"`
}

// The payload for adding a note to a 508/accessibility request
type CreateAccessibilityRequestNotePayload struct {
	AccessibilityRequestNote *models.AccessibilityRequestNote `json:"accessibilityRequestNote"`
	UserErrors               []*UserError                     `json:"userErrors,omitempty"`
}

// The payload containing the data needed to initialize an AccessibilityRequest
type CreateAccessibilityRequestPayload struct {
	AccessibilityRequest *models.AccessibilityRequest `json:"accessibilityRequest,omitempty"`
	UserErrors           []*UserError                 `json:"userErrors,omitempty"`
}

// The data needed to bookmark a cedar system
type CreateCedarSystemBookmarkInput struct {
	CedarSystemID string `json:"cedarSystemId"`
}

// The payload when bookmarking a cedar system
type CreateCedarSystemBookmarkPayload struct {
	CedarSystemBookmark *models.CedarSystemBookmark `json:"cedarSystemBookmark,omitempty"`
}

// The data needed to associate a contact with a system intake
type CreateSystemIntakeContactInput struct {
	EuaUserID      string    `json:"euaUserId"`
	SystemIntakeID uuid.UUID `json:"systemIntakeId"`
	Component      string    `json:"component"`
	Role           string    `json:"role"`
}

// The payload when creating a system intake contact
type CreateSystemIntakeContactPayload struct {
	SystemIntakeContact *models.SystemIntakeContact `json:"systemIntakeContact,omitempty"`
}

// The data needed to upload a System Intake document and attach it to a request with metadata
type CreateSystemIntakeDocumentInput struct {
	RequestID            uuid.UUID                             `json:"requestID"`
	FileData             graphql.Upload                        `json:"fileData"`
	DocumentType         models.SystemIntakeDocumentCommonType `json:"documentType"`
	OtherTypeDescription *string                               `json:"otherTypeDescription,omitempty"`
}

// Data returned after uploading a document to a System Intake
type CreateSystemIntakeDocumentPayload struct {
	Document *models.SystemIntakeDocument `json:"document,omitempty"`
}

// The input data used to initialize an IT governance request for a system
type CreateSystemIntakeInput struct {
	RequestType models.SystemIntakeRequestType `json:"requestType"`
	Requester   *SystemIntakeRequesterInput    `json:"requester"`
}

// Input data for adding a note to a system request
type CreateSystemIntakeNoteInput struct {
	Content    models.HTML `json:"content"`
	AuthorName string      `json:"authorName"`
	IntakeID   uuid.UUID   `json:"intakeId"`
}

// The data needed to create a TRB admin note with the Advice Letter category
type CreateTRBAdminNoteAdviceLetterInput struct {
	TrbRequestID            uuid.UUID   `json:"trbRequestId"`
	NoteText                models.HTML `json:"noteText"`
	AppliesToMeetingSummary bool        `json:"appliesToMeetingSummary"`
	AppliesToNextSteps      bool        `json:"appliesToNextSteps"`
	RecommendationIDs       []uuid.UUID `json:"recommendationIDs"`
}

// The data needed to create a TRB admin note with the Consult Session category
type CreateTRBAdminNoteConsultSessionInput struct {
	TrbRequestID uuid.UUID   `json:"trbRequestId"`
	NoteText     models.HTML `json:"noteText"`
}

// The data needed to create a TRB admin note with the General Request category
type CreateTRBAdminNoteGeneralRequestInput struct {
	TrbRequestID uuid.UUID   `json:"trbRequestId"`
	NoteText     models.HTML `json:"noteText"`
}

// The data needed to create a TRB admin note with the Initial Request Form category
type CreateTRBAdminNoteInitialRequestFormInput struct {
	TrbRequestID                 uuid.UUID   `json:"trbRequestId"`
	NoteText                     models.HTML `json:"noteText"`
	AppliesToBasicRequestDetails bool        `json:"appliesToBasicRequestDetails"`
	AppliesToSubjectAreas        bool        `json:"appliesToSubjectAreas"`
	AppliesToAttendees           bool        `json:"appliesToAttendees"`
}

// The data needed to create a TRB admin note with the Supporting Documents category
type CreateTRBAdminNoteSupportingDocumentsInput struct {
	TrbRequestID uuid.UUID   `json:"trbRequestId"`
	NoteText     models.HTML `json:"noteText"`
	DocumentIDs  []uuid.UUID `json:"documentIDs"`
}

// The input required to add a recommendation & links to a TRB advice letter
type CreateTRBAdviceLetterRecommendationInput struct {
	TrbRequestID   uuid.UUID   `json:"trbRequestId"`
	Title          string      `json:"title"`
	Recommendation models.HTML `json:"recommendation"`
	Links          []string    `json:"links"`
}

// The data needed add a TRB request attendee to a TRB request
type CreateTRBRequestAttendeeInput struct {
	EuaUserID    string            `json:"euaUserId"`
	TrbRequestID uuid.UUID         `json:"trbRequestId"`
	Component    string            `json:"component"`
	Role         models.PersonRole `json:"role"`
}

// The data needed to upload a TRB document and attach it to a request with metadata
type CreateTRBRequestDocumentInput struct {
	RequestID            uuid.UUID                    `json:"requestID"`
	FileData             graphql.Upload               `json:"fileData"`
	DocumentType         models.TRBDocumentCommonType `json:"documentType"`
	OtherTypeDescription *string                      `json:"otherTypeDescription,omitempty"`
}

// Data returned after uploading a document to a TRB request
type CreateTRBRequestDocumentPayload struct {
	Document *models.TRBRequestDocument `json:"document,omitempty"`
}

// The data needed to add feedback to a TRB request
type CreateTRBRequestFeedbackInput struct {
	TrbRequestID    uuid.UUID                `json:"trbRequestId"`
	FeedbackMessage models.HTML              `json:"feedbackMessage"`
	CopyTrbMailbox  bool                     `json:"copyTrbMailbox"`
	NotifyEuaIds    []string                 `json:"notifyEuaIds"`
	Action          models.TRBFeedbackAction `json:"action"`
}

// The input required to add a test date/score to a 508/accessibility request
type CreateTestDateInput struct {
	Date      time.Time               `json:"date"`
	RequestID uuid.UUID               `json:"requestID"`
	Score     *int                    `json:"score,omitempty"`
	TestType  models.TestDateTestType `json:"testType"`
}

// The payload for the input required to add a test date/score to a
// 508/accessibility request
type CreateTestDatePayload struct {
	TestDate   *models.TestDate `json:"testDate,omitempty"`
	UserErrors []*UserError     `json:"userErrors,omitempty"`
}

// The current user of the application
type CurrentUser struct {
	LaunchDarkly *LaunchDarklySettings `json:"launchDarkly"`
}

// The input used to delete a document from a 508/accessibility request
type DeleteAccessibilityRequestDocumentInput struct {
	ID uuid.UUID `json:"id"`
}

// The payload used to delete a document from a 508/accessibility request
type DeleteAccessibilityRequestDocumentPayload struct {
	ID *uuid.UUID `json:"id,omitempty"`
}

// The input data needed to delete a 508/accessibility request
type DeleteAccessibilityRequestInput struct {
	ID     uuid.UUID                                 `json:"id"`
	Reason models.AccessibilityRequestDeletionReason `json:"reason"`
}

// The payload data sent when deleting a 508/accessibility request
type DeleteAccessibilityRequestPayload struct {
	ID         *uuid.UUID   `json:"id,omitempty"`
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// The payload when deleting a bookmark for a cedar system
type DeleteCedarSystemBookmarkPayload struct {
	CedarSystemID string `json:"cedarSystemId"`
}

// The data needed to delete a system intake contact
type DeleteSystemIntakeContactInput struct {
	ID uuid.UUID `json:"id"`
}

// The payload when deleting a system intake contact
type DeleteSystemIntakeContactPayload struct {
	SystemIntakeContact *models.SystemIntakeContact `json:"systemIntakeContact,omitempty"`
}

// Data returned after deleting a document attached to a System Intake
type DeleteSystemIntakeDocumentPayload struct {
	Document *models.SystemIntakeDocument `json:"document,omitempty"`
}

// Data returned after deleting a document attached to a TRB request
type DeleteTRBRequestDocumentPayload struct {
	Document *models.TRBRequestDocument `json:"document,omitempty"`
}

type DeleteTRBRequestFundingSourcesInput struct {
	TrbRequestID  uuid.UUID `json:"trbRequestId"`
	FundingNumber string    `json:"fundingNumber"`
}

// The input required to delete a test date/score
type DeleteTestDateInput struct {
	ID uuid.UUID `json:"id"`
}

// The payload for the input required to delete a test date/score
type DeleteTestDatePayload struct {
	TestDate   *models.TestDate `json:"testDate,omitempty"`
	UserErrors []*UserError     `json:"userErrors,omitempty"`
}

// Input associated with a document to be uploaded to a 508/accessibility request
type GeneratePresignedUploadURLInput struct {
	FileName string `json:"fileName"`
	MimeType string `json:"mimeType"`
	Size     int    `json:"size"`
}

// URL generated for a document to be uploaded to a 508/accessibility request
type GeneratePresignedUploadURLPayload struct {
	URL        *string      `json:"url,omitempty"`
	UserErrors []*UserError `json:"userErrors,omitempty"`
}

// The current user's Launch Darkly key
type LaunchDarklySettings struct {
	UserKey    string `json:"userKey"`
	SignedHash string `json:"signedHash"`
}

// Defines the mutations for the schema
type Mutation struct {
}

// Query definition for the schema
type Query struct {
}

// The data needed to reopen a TRB request
type ReopenTRBRequestInput struct {
	TrbRequestID   uuid.UUID   `json:"trbRequestId"`
	ReasonReopened models.HTML `json:"reasonReopened"`
	CopyTrbMailbox bool        `json:"copyTrbMailbox"`
	NotifyEuaIds   []string    `json:"notifyEuaIds"`
}

// Represents a requester's system intake request
type Request struct {
	ID              uuid.UUID                           `json:"id"`
	Name            *string                             `json:"name,omitempty"`
	SubmittedAt     *time.Time                          `json:"submittedAt,omitempty"`
	Type            RequestType                         `json:"type"`
	Status          string                              `json:"status"`
	StatusRequester *models.SystemIntakeStatusRequester `json:"statusRequester,omitempty"`
	StatusCreatedAt *time.Time                          `json:"statusCreatedAt,omitempty"`
	Lcid            *string                             `json:"lcid,omitempty"`
	NextMeetingDate *time.Time                          `json:"nextMeetingDate,omitempty"`
}

type RequestEdge struct {
	Node *Request `json:"node"`
}

type RequestsConnection struct {
	Edges []*RequestEdge `json:"edges"`
}

type SendCantFindSomethingEmailInput struct {
	Body string `json:"body"`
}

// The inputs to the user feedback form
type SendFeedbackEmailInput struct {
	IsAnonymous            bool     `json:"isAnonymous"`
	CanBeContacted         bool     `json:"canBeContacted"`
	EasiServicesUsed       []string `json:"easiServicesUsed"`
	CmsRole                string   `json:"cmsRole"`
	SystemEasyToUse        string   `json:"systemEasyToUse"`
	DidntNeedHelpAnswering string   `json:"didntNeedHelpAnswering"`
	QuestionsWereRelevant  string   `json:"questionsWereRelevant"`
	HadAccessToInformation string   `json:"hadAccessToInformation"`
	HowSatisfied           string   `json:"howSatisfied"`
	HowCanWeImprove        string   `json:"howCanWeImprove"`
}

type SendReportAProblemEmailInput struct {
	IsAnonymous            bool   `json:"isAnonymous"`
	CanBeContacted         bool   `json:"canBeContacted"`
	EasiService            string `json:"easiService"`
	WhatWereYouDoing       string `json:"whatWereYouDoing"`
	WhatWentWrong          string `json:"whatWentWrong"`
	HowSevereWasTheProblem string `json:"howSevereWasTheProblem"`
}

// The data needed to send a TRB advice letter, including who to notify
type SendTRBAdviceLetterInput struct {
	ID             uuid.UUID `json:"id"`
	CopyTrbMailbox bool      `json:"copyTrbMailbox"`
	NotifyEuaIds   []string  `json:"notifyEuaIds"`
}

type SetRolesForUserOnSystemInput struct {
	CedarSystemID      string   `json:"cedarSystemID"`
	EuaUserID          string   `json:"euaUserId"`
	DesiredRoleTypeIDs []string `json:"desiredRoleTypeIDs"`
}

type SetSystemIntakeRelationExistingServiceInput struct {
	SystemIntakeID  uuid.UUID `json:"systemIntakeID"`
	ContractName    string    `json:"contractName"`
	ContractNumbers []string  `json:"contractNumbers"`
}

type SetSystemIntakeRelationExistingSystemInput struct {
	SystemIntakeID  uuid.UUID `json:"systemIntakeID"`
	CedarSystemIDs  []string  `json:"cedarSystemIDs"`
	ContractNumbers []string  `json:"contractNumbers"`
}

type SetSystemIntakeRelationNewSystemInput struct {
	SystemIntakeID  uuid.UUID `json:"systemIntakeID"`
	ContractNumbers []string  `json:"contractNumbers"`
}

type SetTRBRequestRelationExistingServiceInput struct {
	TrbRequestID    uuid.UUID `json:"trbRequestID"`
	ContractName    string    `json:"contractName"`
	ContractNumbers []string  `json:"contractNumbers"`
}

type SetTRBRequestRelationExistingSystemInput struct {
	TrbRequestID    uuid.UUID `json:"trbRequestID"`
	CedarSystemIDs  []string  `json:"cedarSystemIDs"`
	ContractNumbers []string  `json:"contractNumbers"`
}

type SetTRBRequestRelationNewSystemInput struct {
	TrbRequestID    uuid.UUID `json:"trbRequestID"`
	ContractNumbers []string  `json:"contractNumbers"`
}

// Input to submit an intake for review
type SubmitIntakeInput struct {
	ID uuid.UUID `json:"id"`
}

type SystemConnection struct {
	Edges []*SystemEdge `json:"edges"`
}

type SystemEdge struct {
	Node *models.System `json:"node"`
}

// An action taken on a system intake, often resulting in a change in status.
type SystemIntakeAction struct {
	ID                     uuid.UUID                         `json:"id"`
	SystemIntake           *models.SystemIntake              `json:"systemIntake"`
	Type                   SystemIntakeActionType            `json:"type"`
	Actor                  *SystemIntakeActionActor          `json:"actor"`
	Step                   *models.SystemIntakeStep          `json:"step,omitempty"`
	Feedback               *models.HTML                      `json:"feedback,omitempty"`
	LcidExpirationChange   *SystemIntakeLCIDExpirationChange `json:"lcidExpirationChange,omitempty"`
	PreviousRetirementDate *time.Time                        `json:"previousRetirementDate,omitempty"`
	NewRetirementDate      *time.Time                        `json:"newRetirementDate,omitempty"`
	CreatedAt              time.Time                         `json:"createdAt"`
}

// The contact who is associated with an action being done to a system request
type SystemIntakeActionActor struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

// Represents current and planned annual costs for a system
type SystemIntakeAnnualSpending struct {
	CurrentAnnualSpending           *string `json:"currentAnnualSpending,omitempty"`
	CurrentAnnualSpendingITPortion  *string `json:"currentAnnualSpendingITPortion,omitempty"`
	PlannedYearOneSpending          *string `json:"plannedYearOneSpending,omitempty"`
	PlannedYearOneSpendingITPortion *string `json:"plannedYearOneSpendingITPortion,omitempty"`
}

// Input data for current and planned year one annual costs associated with a system request
type SystemIntakeAnnualSpendingInput struct {
	CurrentAnnualSpending           *string `json:"currentAnnualSpending,omitempty"`
	CurrentAnnualSpendingITPortion  *string `json:"currentAnnualSpendingITPortion,omitempty"`
	PlannedYearOneSpending          *string `json:"plannedYearOneSpending,omitempty"`
	PlannedYearOneSpendingITPortion *string `json:"plannedYearOneSpendingITPortion,omitempty"`
}

// Represents the OIT business owner of a system
type SystemIntakeBusinessOwner struct {
	Component *string `json:"component,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// The input data used to set the CMS business owner of a system
type SystemIntakeBusinessOwnerInput struct {
	Name      string `json:"name"`
	Component string `json:"component"`
}

// Input for changing an intake's LCID retirement date in IT Gov v2
type SystemIntakeChangeLCIDRetirementDateInput struct {
	SystemIntakeID         uuid.UUID                           `json:"systemIntakeID"`
	RetiresAt              time.Time                           `json:"retiresAt"`
	AdditionalInfo         *models.HTML                        `json:"additionalInfo,omitempty"`
	NotificationRecipients *models.EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	AdminNote              *models.HTML                        `json:"adminNote,omitempty"`
}

// Input for creating a Close Request Action in Admin Actions v2
type SystemIntakeCloseRequestInput struct {
	SystemIntakeID         uuid.UUID                           `json:"systemIntakeID"`
	NotificationRecipients *models.EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	Reason                 *models.HTML                        `json:"reason,omitempty"`
	AdditionalInfo         *models.HTML                        `json:"additionalInfo,omitempty"`
	AdminNote              *models.HTML                        `json:"adminNote,omitempty"`
}

// Represents a contact in OIT who is collaborating with the user
// creating a system IT governance request
type SystemIntakeCollaborator struct {
	Acronym      string `json:"acronym"`
	Collaborator string `json:"collaborator"`
	Key          string `json:"key"`
	Label        string `json:"label"`
	Name         string `json:"name"`
}

// The input data used to add an OIT collaborator for a system request
type SystemIntakeCollaboratorInput struct {
	Collaborator string `json:"collaborator"`
	Name         string `json:"name"`
	Key          string `json:"key"`
}

// Input for confirming an intake's decision to issue an LCID in IT Gov v2
type SystemIntakeConfirmLCIDInput struct {
	SystemIntakeID         uuid.UUID                           `json:"systemIntakeID"`
	ExpiresAt              time.Time                           `json:"expiresAt"`
	Scope                  models.HTML                         `json:"scope"`
	NextSteps              models.HTML                         `json:"nextSteps"`
	TrbFollowUp            models.SystemIntakeTRBFollowUp      `json:"trbFollowUp"`
	CostBaseline           *string                             `json:"costBaseline,omitempty"`
	AdditionalInfo         *models.HTML                        `json:"additionalInfo,omitempty"`
	NotificationRecipients *models.EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	AdminNote              *models.HTML                        `json:"adminNote,omitempty"`
}

// The payload when retrieving system intake contacts
type SystemIntakeContactsPayload struct {
	SystemIntakeContacts []*models.AugmentedSystemIntakeContact `json:"systemIntakeContacts"`
	InvalidEUAIDs        []string                               `json:"invalidEUAIDs"`
}

// Represents a contract for work on a system
type SystemIntakeContract struct {
	Contractor  *string       `json:"contractor,omitempty"`
	EndDate     *ContractDate `json:"endDate"`
	HasContract *string       `json:"hasContract,omitempty"`
	StartDate   *ContractDate `json:"startDate"`
	Vehicle     *string       `json:"vehicle,omitempty"`
}

// Input data containing information about a contract related to a system request
type SystemIntakeContractInput struct {
	Contractor  *string    `json:"contractor,omitempty"`
	EndDate     *time.Time `json:"endDate,omitempty"`
	HasContract *string    `json:"hasContract,omitempty"`
	StartDate   *time.Time `json:"startDate,omitempty"`
	Numbers     []string   `json:"numbers"`
}

// Represents expectations about a system's additional costs
type SystemIntakeCosts struct {
	ExpectedIncreaseAmount *string `json:"expectedIncreaseAmount,omitempty"`
	IsExpectingIncrease    *string `json:"isExpectingIncrease,omitempty"`
}

// Input data for estimated system cost increases associated with a system request
//
// NOTE: This field is no longer in intake form but data/query is preserved for existing intakes (EASI-2076)
type SystemIntakeCostsInput struct {
	ExpectedIncreaseAmount *string `json:"expectedIncreaseAmount,omitempty"`
	IsExpectingIncrease    *string `json:"isExpectingIncrease,omitempty"`
}

// Denotes the type of a document attached to a System Intake,
// which can be one of a number of common types, or a free-text user-specified type
type SystemIntakeDocumentType struct {
	CommonType           models.SystemIntakeDocumentCommonType `json:"commonType"`
	OtherTypeDescription *string                               `json:"otherTypeDescription,omitempty"`
}

// Input for expiring an intake's LCID in IT Gov v2
type SystemIntakeExpireLCIDInput struct {
	SystemIntakeID         uuid.UUID                           `json:"systemIntakeID"`
	Reason                 models.HTML                         `json:"reason"`
	NextSteps              *models.HTML                        `json:"nextSteps,omitempty"`
	NotificationRecipients *models.EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	AdditionalInfo         *models.HTML                        `json:"additionalInfo,omitempty"`
	AdminNote              *models.HTML                        `json:"adminNote,omitempty"`
}

// Represents the source of funding for a system
type SystemIntakeFundingSourceInput struct {
	FundingNumber *string `json:"fundingNumber,omitempty"`
	Source        *string `json:"source,omitempty"`
}

// The input required to specify the funding source(s) for a system intake
type SystemIntakeFundingSourcesInput struct {
	ExistingFunding *bool                             `json:"existingFunding,omitempty"`
	FundingSources  []*SystemIntakeFundingSourceInput `json:"fundingSources"`
}

// Contains multiple system request collaborators, if any
type SystemIntakeGovernanceTeam struct {
	IsPresent *bool                       `json:"isPresent,omitempty"`
	Teams     []*SystemIntakeCollaborator `json:"teams,omitempty"`
}

// The input data used to set the list of OIT collaborators for a system request
type SystemIntakeGovernanceTeamInput struct {
	IsPresent *bool                            `json:"isPresent,omitempty"`
	Teams     []*SystemIntakeCollaboratorInput `json:"teams,omitempty"`
}

// The Information System Security Officer (ISSO) that is
// assicuated with a system request, if any
type SystemIntakeIsso struct {
	IsPresent *bool   `json:"isPresent,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// The input data used to set the ISSO associated with a system request, if any
type SystemIntakeISSOInput struct {
	IsPresent *bool   `json:"isPresent,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// Input for setting an intake's decision to issuing an LCID in IT Gov v2
type SystemIntakeIssueLCIDInput struct {
	SystemIntakeID         uuid.UUID                           `json:"systemIntakeID"`
	Lcid                   *string                             `json:"lcid,omitempty"`
	ExpiresAt              time.Time                           `json:"expiresAt"`
	Scope                  models.HTML                         `json:"scope"`
	NextSteps              models.HTML                         `json:"nextSteps"`
	TrbFollowUp            models.SystemIntakeTRBFollowUp      `json:"trbFollowUp"`
	CostBaseline           *string                             `json:"costBaseline,omitempty"`
	AdditionalInfo         *models.HTML                        `json:"additionalInfo,omitempty"`
	NotificationRecipients *models.EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	AdminNote              *models.HTML                        `json:"adminNote,omitempty"`
}

// Contains the data about a change to the expiration date of a system request's lifecycle ID
type SystemIntakeLCIDExpirationChange struct {
	PreviousDate         time.Time    `json:"previousDate"`
	NewDate              time.Time    `json:"newDate"`
	PreviousScope        *models.HTML `json:"previousScope,omitempty"`
	NewScope             *models.HTML `json:"newScope,omitempty"`
	PreviousNextSteps    *models.HTML `json:"previousNextSteps,omitempty"`
	NewNextSteps         *models.HTML `json:"newNextSteps,omitempty"`
	PreviousCostBaseline *string      `json:"previousCostBaseline,omitempty"`
	NewCostBaseline      *string      `json:"newCostBaseline,omitempty"`
}

// Input for creating a Not an IT Governance Request Action in Admin Actions v2
type SystemIntakeNotITGovReqInput struct {
	SystemIntakeID         uuid.UUID                           `json:"systemIntakeID"`
	NotificationRecipients *models.EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	Reason                 *models.HTML                        `json:"reason,omitempty"`
	AdditionalInfo         *models.HTML                        `json:"additionalInfo,omitempty"`
	AdminNote              *models.HTML                        `json:"adminNote,omitempty"`
}

// The author of a note added to a system request
type SystemIntakeNoteAuthor struct {
	Eua  string `json:"eua"`
	Name string `json:"name"`
}

// The product manager associated with a system
type SystemIntakeProductManager struct {
	Component *string `json:"component,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// The input data used to set the CMS product manager/lead of a system
type SystemIntakeProductManagerInput struct {
	Name      string `json:"name"`
	Component string `json:"component"`
}

// Input for submitting a Progress to New Step action in IT Gov v2
type SystemIntakeProgressToNewStepsInput struct {
	SystemIntakeID         uuid.UUID                           `json:"systemIntakeID"`
	NewStep                SystemIntakeStepToProgressTo        `json:"newStep"`
	MeetingDate            *time.Time                          `json:"meetingDate,omitempty"`
	NotificationRecipients *models.EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	Feedback               *models.HTML                        `json:"feedback,omitempty"`
	GrbRecommendations     *models.HTML                        `json:"grbRecommendations,omitempty"`
	AdditionalInfo         *models.HTML                        `json:"additionalInfo,omitempty"`
	AdminNote              *models.HTML                        `json:"adminNote,omitempty"`
}

// Input for setting an intake's decision to Not Approved by GRB in IT Gov v2
type SystemIntakeRejectIntakeInput struct {
	SystemIntakeID         uuid.UUID                           `json:"systemIntakeID"`
	Reason                 models.HTML                         `json:"reason"`
	NextSteps              models.HTML                         `json:"nextSteps"`
	TrbFollowUp            models.SystemIntakeTRBFollowUp      `json:"trbFollowUp"`
	AdditionalInfo         *models.HTML                        `json:"additionalInfo,omitempty"`
	NotificationRecipients *models.EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	AdminNote              *models.HTML                        `json:"adminNote,omitempty"`
}

// Input for creating a Reopen Request Action in Admin Actions v2
type SystemIntakeReopenRequestInput struct {
	SystemIntakeID         uuid.UUID                           `json:"systemIntakeID"`
	NotificationRecipients *models.EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	Reason                 *models.HTML                        `json:"reason,omitempty"`
	AdditionalInfo         *models.HTML                        `json:"additionalInfo,omitempty"`
	AdminNote              *models.HTML                        `json:"adminNote,omitempty"`
}

// Input for creating a Request Edits Action in Admin Actions v2
type SystemIntakeRequestEditsInput struct {
	SystemIntakeID         uuid.UUID                           `json:"systemIntakeID"`
	IntakeFormStep         SystemIntakeFormStep                `json:"intakeFormStep"`
	NotificationRecipients *models.EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	EmailFeedback          models.HTML                         `json:"emailFeedback"`
	AdditionalInfo         *models.HTML                        `json:"additionalInfo,omitempty"`
	AdminNote              *models.HTML                        `json:"adminNote,omitempty"`
}

// The contact who made an IT governance request for a system
type SystemIntakeRequester struct {
	Component *string `json:"component,omitempty"`
	Email     *string `json:"email,omitempty"`
	Name      string  `json:"name"`
}

// The input data used to set the requester of a system request
type SystemIntakeRequesterInput struct {
	Name string `json:"name"`
}

// The input data used to set the requester for a system request along with the
// requester's business component
type SystemIntakeRequesterWithComponentInput struct {
	Name      string `json:"name"`
	Component string `json:"component"`
}

// Input for retiring an intake's LCID in IT Gov v2
type SystemIntakeRetireLCIDInput struct {
	SystemIntakeID         uuid.UUID                           `json:"systemIntakeID"`
	RetiresAt              time.Time                           `json:"retiresAt"`
	Reason                 *models.HTML                        `json:"reason,omitempty"`
	AdditionalInfo         *models.HTML                        `json:"additionalInfo,omitempty"`
	NotificationRecipients *models.EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	AdminNote              *models.HTML                        `json:"adminNote,omitempty"`
}

// Input for updating an intake's LCID in IT Gov v2
type SystemIntakeUpdateLCIDInput struct {
	SystemIntakeID         uuid.UUID                           `json:"systemIntakeID"`
	ExpiresAt              *time.Time                          `json:"expiresAt,omitempty"`
	Scope                  *models.HTML                        `json:"scope,omitempty"`
	NextSteps              *models.HTML                        `json:"nextSteps,omitempty"`
	CostBaseline           *string                             `json:"costBaseline,omitempty"`
	Reason                 *models.HTML                        `json:"reason,omitempty"`
	AdditionalInfo         *models.HTML                        `json:"additionalInfo,omitempty"`
	NotificationRecipients *models.EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	AdminNote              *models.HTML                        `json:"adminNote,omitempty"`
}

// Data specific to admin notes in the Advice Letter category
// The "recommendations" property _will_ return deleted recommendations so that UI can reference the recommendation title
type TRBAdminNoteAdviceLetterCategoryData struct {
	AppliesToMeetingSummary bool                                    `json:"appliesToMeetingSummary"`
	AppliesToNextSteps      bool                                    `json:"appliesToNextSteps"`
	Recommendations         []*models.TRBAdviceLetterRecommendation `json:"recommendations"`
}

func (TRBAdminNoteAdviceLetterCategoryData) IsTRBAdminNoteCategorySpecificData() {}

// Data specific to admin notes in the Consult Session category
// This type doesn't contain any actual data
type TRBAdminNoteConsultSessionCategoryData struct {
	// Placeholder field so this type is non-empty, always null
	PlaceholderField *bool `json:"placeholderField,omitempty"`
}

func (TRBAdminNoteConsultSessionCategoryData) IsTRBAdminNoteCategorySpecificData() {}

// Data specific to admin notes in the General Request category
// This type doesn't contain any actual data
type TRBAdminNoteGeneralRequestCategoryData struct {
	// Placeholder field so this type is non-empty, always null
	PlaceholderField *bool `json:"placeholderField,omitempty"`
}

func (TRBAdminNoteGeneralRequestCategoryData) IsTRBAdminNoteCategorySpecificData() {}

// Data specific to admin notes in the Initial Request Form category
type TRBAdminNoteInitialRequestFormCategoryData struct {
	AppliesToBasicRequestDetails bool `json:"appliesToBasicRequestDetails"`
	AppliesToSubjectAreas        bool `json:"appliesToSubjectAreas"`
	AppliesToAttendees           bool `json:"appliesToAttendees"`
}

func (TRBAdminNoteInitialRequestFormCategoryData) IsTRBAdminNoteCategorySpecificData() {}

// Data specific to admin notes in the Supporting Documents category
// The "documents" property _will_ return deleted documents so that UI can reference the document name
type TRBAdminNoteSupportingDocumentsCategoryData struct {
	Documents []*models.TRBRequestDocument `json:"documents"`
}

func (TRBAdminNoteSupportingDocumentsCategoryData) IsTRBAdminNoteCategorySpecificData() {}

// Denotes the type of a document attached to a TRB request,
// which can be one of a number of common types, or a free-text user-specified type
type TRBRequestDocumentType struct {
	CommonType           models.TRBDocumentCommonType `json:"commonType"`
	OtherTypeDescription *string                      `json:"otherTypeDescription,omitempty"`
}

// Parameters for updating a 508/accessibility request's associated CEDAR system
type UpdateAccessibilityRequestCedarSystemInput struct {
	ID            uuid.UUID `json:"id"`
	CedarSystemID string    `json:"cedarSystemId"`
}

// Result of updating a 508/accessibility request's associated CEDAR system
type UpdateAccessibilityRequestCedarSystemPayload struct {
	ID                   uuid.UUID                    `json:"id"`
	AccessibilityRequest *models.AccessibilityRequest `json:"accessibilityRequest,omitempty"`
}

// Parameters for updating a 508/accessibility request's status
type UpdateAccessibilityRequestStatus struct {
	RequestID uuid.UUID                         `json:"requestID"`
	Status    models.AccessibilityRequestStatus `json:"status"`
}

// Result of updating a 508/accessibility request's status
type UpdateAccessibilityRequestStatusPayload struct {
	ID         uuid.UUID                         `json:"id"`
	RequestID  uuid.UUID                         `json:"requestID"`
	Status     models.AccessibilityRequestStatus `json:"status"`
	EuaUserID  string                            `json:"euaUserId"`
	UserErrors []*UserError                      `json:"userErrors,omitempty"`
}

// Input data used to update the admin lead assigned to a system IT governance
// request
type UpdateSystemIntakeAdminLeadInput struct {
	AdminLead string    `json:"adminLead"`
	ID        uuid.UUID `json:"id"`
}

// The input data used to update the contact details of the people associated with
// a system request
type UpdateSystemIntakeContactDetailsInput struct {
	ID              uuid.UUID                                `json:"id"`
	Requester       *SystemIntakeRequesterWithComponentInput `json:"requester"`
	BusinessOwner   *SystemIntakeBusinessOwnerInput          `json:"businessOwner"`
	ProductManager  *SystemIntakeProductManagerInput         `json:"productManager"`
	Isso            *SystemIntakeISSOInput                   `json:"isso"`
	GovernanceTeams *SystemIntakeGovernanceTeamInput         `json:"governanceTeams"`
}

// The data needed to update a contact associated with a system intake
type UpdateSystemIntakeContactInput struct {
	ID             uuid.UUID `json:"id"`
	EuaUserID      string    `json:"euaUserId"`
	SystemIntakeID uuid.UUID `json:"systemIntakeId"`
	Component      string    `json:"component"`
	Role           string    `json:"role"`
}

// Input data for updating contract details related to a system request
type UpdateSystemIntakeContractDetailsInput struct {
	ID             uuid.UUID                        `json:"id"`
	FundingSources *SystemIntakeFundingSourcesInput `json:"fundingSources,omitempty"`
	Costs          *SystemIntakeCostsInput          `json:"costs,omitempty"`
	AnnualSpending *SystemIntakeAnnualSpendingInput `json:"annualSpending,omitempty"`
	Contract       *SystemIntakeContractInput       `json:"contract,omitempty"`
}

// Input data for updating a system intake's relationship to a CEDAR system
type UpdateSystemIntakeLinkedCedarSystemInput struct {
	ID            uuid.UUID `json:"id"`
	CedarSystemID *string   `json:"cedarSystemId,omitempty"`
}

// Input data for updating an IT governance admin note
type UpdateSystemIntakeNoteInput struct {
	Content    models.HTML `json:"content"`
	IsArchived bool        `json:"isArchived"`
	ID         uuid.UUID   `json:"id"`
}

// The payload for updating a system's IT governance request
type UpdateSystemIntakePayload struct {
	SystemIntake *models.SystemIntake `json:"systemIntake,omitempty"`
	UserErrors   []*UserError         `json:"userErrors,omitempty"`
}

// Input to update some fields on a system request
type UpdateSystemIntakeRequestDetailsInput struct {
	ID               uuid.UUID `json:"id"`
	RequestName      *string   `json:"requestName,omitempty"`
	BusinessNeed     *string   `json:"businessNeed,omitempty"`
	BusinessSolution *string   `json:"businessSolution,omitempty"`
	NeedsEaSupport   *bool     `json:"needsEaSupport,omitempty"`
	CurrentStage     *string   `json:"currentStage,omitempty"`
	CedarSystemID    *string   `json:"cedarSystemId,omitempty"`
	HasUIChanges     *bool     `json:"hasUiChanges,omitempty"`
}

// Input data used to update GRT and GRB dates for a system request
type UpdateSystemIntakeReviewDatesInput struct {
	GrbDate *time.Time `json:"grbDate,omitempty"`
	GrtDate *time.Time `json:"grtDate,omitempty"`
	ID      uuid.UUID  `json:"id"`
}

type UpdateTRBAdviceLetterRecommendationOrderInput struct {
	TrbRequestID uuid.UUID `json:"trbRequestId"`
	// List of the recommendation IDs in the new order they should be displayed
	NewOrder []uuid.UUID `json:"newOrder"`
}

// Represents an EUA user who is included as an attendee for a TRB request
type UpdateTRBRequestAttendeeInput struct {
	ID        uuid.UUID         `json:"id"`
	Component string            `json:"component"`
	Role      models.PersonRole `json:"role"`
}

// The data needed schedule a TRB consult meeting time
type UpdateTRBRequestConsultMeetingTimeInput struct {
	TrbRequestID       uuid.UUID `json:"trbRequestId"`
	ConsultMeetingTime time.Time `json:"consultMeetingTime"`
	CopyTrbMailbox     bool      `json:"copyTrbMailbox"`
	NotifyEuaIds       []string  `json:"notifyEuaIds"`
	Notes              string    `json:"notes"`
}

type UpdateTRBRequestFundingSourcesInput struct {
	TrbRequestID  uuid.UUID `json:"trbRequestId"`
	FundingNumber string    `json:"fundingNumber"`
	Sources       []string  `json:"sources"`
}

// The data needed assign a TRB lead to a TRB request
type UpdateTRBRequestTRBLeadInput struct {
	TrbRequestID uuid.UUID `json:"trbRequestId"`
	TrbLead      string    `json:"trbLead"`
}

// The input required to update a test date/score
type UpdateTestDateInput struct {
	Date     time.Time               `json:"date"`
	ID       uuid.UUID               `json:"id"`
	Score    *int                    `json:"score,omitempty"`
	TestType models.TestDateTestType `json:"testType"`
}

// The payload for the input required to update a test date/score
type UpdateTestDatePayload struct {
	TestDate   *models.TestDate `json:"testDate,omitempty"`
	UserErrors []*UserError     `json:"userErrors,omitempty"`
}

// UserError represents application-level errors that are the result of
// either user or application developer error.
type UserError struct {
	Message string   `json:"message"`
	Path    []string `json:"path"`
}

// Indicates the type of a request being made with the EASi system
type RequestType string

const (
	RequestTypeAccessibilityRequest RequestType = "ACCESSIBILITY_REQUEST"
	RequestTypeGovernanceRequest    RequestType = "GOVERNANCE_REQUEST"
)

var AllRequestType = []RequestType{
	RequestTypeAccessibilityRequest,
	RequestTypeGovernanceRequest,
}

func (e RequestType) IsValid() bool {
	switch e {
	case RequestTypeAccessibilityRequest, RequestTypeGovernanceRequest:
		return true
	}
	return false
}

func (e RequestType) String() string {
	return string(e)
}

func (e *RequestType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RequestType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RequestType", str)
	}
	return nil
}

func (e RequestType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// A user role associated with a job code
type Role string

const (
	// A 508 Tester
	RoleEasi508Tester Role = "EASI_508_TESTER"
	// A 508 request program team member
	RoleEasi508User Role = "EASI_508_USER"
	// A 508 request program team member or tester
	RoleEasi508TesterOrUser Role = "EASI_508_TESTER_OR_USER"
	// A member of the GRT
	RoleEasiGovteam Role = "EASI_GOVTEAM"
	// An admin on the TRB
	RoleEasiTrbAdmin Role = "EASI_TRB_ADMIN"
	// A generic EASi user
	RoleEasiUser Role = "EASI_USER"
)

var AllRole = []Role{
	RoleEasi508Tester,
	RoleEasi508User,
	RoleEasi508TesterOrUser,
	RoleEasiGovteam,
	RoleEasiTrbAdmin,
	RoleEasiUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleEasi508Tester, RoleEasi508User, RoleEasi508TesterOrUser, RoleEasiGovteam, RoleEasiTrbAdmin, RoleEasiUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Represents the type of an action that is being done to a system request
type SystemIntakeActionType string

const (
	SystemIntakeActionTypeProgressToNewStep              SystemIntakeActionType = "PROGRESS_TO_NEW_STEP"
	SystemIntakeActionTypeRequestEdits                   SystemIntakeActionType = "REQUEST_EDITS"
	SystemIntakeActionTypeExpireLcid                     SystemIntakeActionType = "EXPIRE_LCID"
	SystemIntakeActionTypeNotGovernance                  SystemIntakeActionType = "NOT_GOVERNANCE"
	SystemIntakeActionTypeCloseRequest                   SystemIntakeActionType = "CLOSE_REQUEST"
	SystemIntakeActionTypeReopenRequest                  SystemIntakeActionType = "REOPEN_REQUEST"
	SystemIntakeActionTypeUpdateLcid                     SystemIntakeActionType = "UPDATE_LCID"
	SystemIntakeActionTypeConfirmLcid                    SystemIntakeActionType = "CONFIRM_LCID"
	SystemIntakeActionTypeRetireLcid                     SystemIntakeActionType = "RETIRE_LCID"
	SystemIntakeActionTypeChangeLcidRetirementDate       SystemIntakeActionType = "CHANGE_LCID_RETIREMENT_DATE"
	SystemIntakeActionTypeIssueLcid                      SystemIntakeActionType = "ISSUE_LCID"
	SystemIntakeActionTypeSubmitIntake                   SystemIntakeActionType = "SUBMIT_INTAKE"
	SystemIntakeActionTypeReject                         SystemIntakeActionType = "REJECT"
	SystemIntakeActionTypeBizCaseNeedsChanges            SystemIntakeActionType = "BIZ_CASE_NEEDS_CHANGES"
	SystemIntakeActionTypeCreateBizCase                  SystemIntakeActionType = "CREATE_BIZ_CASE"
	SystemIntakeActionTypeGUIDEReceivedClose             SystemIntakeActionType = "GUIDE_RECEIVED_CLOSE"
	SystemIntakeActionTypeExtendLcid                     SystemIntakeActionType = "EXTEND_LCID"
	SystemIntakeActionTypeNeedBizCase                    SystemIntakeActionType = "NEED_BIZ_CASE"
	SystemIntakeActionTypeNoGovernanceNeeded             SystemIntakeActionType = "NO_GOVERNANCE_NEEDED"
	SystemIntakeActionTypeNotItRequest                   SystemIntakeActionType = "NOT_IT_REQUEST"
	SystemIntakeActionTypeNotRespondingClose             SystemIntakeActionType = "NOT_RESPONDING_CLOSE"
	SystemIntakeActionTypeProvideFeedbackNeedBizCase     SystemIntakeActionType = "PROVIDE_FEEDBACK_NEED_BIZ_CASE"
	SystemIntakeActionTypeProvideGrtFeedbackBizCaseDraft SystemIntakeActionType = "PROVIDE_GRT_FEEDBACK_BIZ_CASE_DRAFT"
	SystemIntakeActionTypeProvideGrtFeedbackBizCaseFinal SystemIntakeActionType = "PROVIDE_GRT_FEEDBACK_BIZ_CASE_FINAL"
	SystemIntakeActionTypeReadyForGrb                    SystemIntakeActionType = "READY_FOR_GRB"
	SystemIntakeActionTypeReadyForGrt                    SystemIntakeActionType = "READY_FOR_GRT"
	SystemIntakeActionTypeSendEmail                      SystemIntakeActionType = "SEND_EMAIL"
	SystemIntakeActionTypeSubmitBizCase                  SystemIntakeActionType = "SUBMIT_BIZ_CASE"
	SystemIntakeActionTypeSubmitFinalBizCase             SystemIntakeActionType = "SUBMIT_FINAL_BIZ_CASE"
)

var AllSystemIntakeActionType = []SystemIntakeActionType{
	SystemIntakeActionTypeProgressToNewStep,
	SystemIntakeActionTypeRequestEdits,
	SystemIntakeActionTypeExpireLcid,
	SystemIntakeActionTypeNotGovernance,
	SystemIntakeActionTypeCloseRequest,
	SystemIntakeActionTypeReopenRequest,
	SystemIntakeActionTypeUpdateLcid,
	SystemIntakeActionTypeConfirmLcid,
	SystemIntakeActionTypeRetireLcid,
	SystemIntakeActionTypeChangeLcidRetirementDate,
	SystemIntakeActionTypeIssueLcid,
	SystemIntakeActionTypeSubmitIntake,
	SystemIntakeActionTypeReject,
	SystemIntakeActionTypeBizCaseNeedsChanges,
	SystemIntakeActionTypeCreateBizCase,
	SystemIntakeActionTypeGUIDEReceivedClose,
	SystemIntakeActionTypeExtendLcid,
	SystemIntakeActionTypeNeedBizCase,
	SystemIntakeActionTypeNoGovernanceNeeded,
	SystemIntakeActionTypeNotItRequest,
	SystemIntakeActionTypeNotRespondingClose,
	SystemIntakeActionTypeProvideFeedbackNeedBizCase,
	SystemIntakeActionTypeProvideGrtFeedbackBizCaseDraft,
	SystemIntakeActionTypeProvideGrtFeedbackBizCaseFinal,
	SystemIntakeActionTypeReadyForGrb,
	SystemIntakeActionTypeReadyForGrt,
	SystemIntakeActionTypeSendEmail,
	SystemIntakeActionTypeSubmitBizCase,
	SystemIntakeActionTypeSubmitFinalBizCase,
}

func (e SystemIntakeActionType) IsValid() bool {
	switch e {
	case SystemIntakeActionTypeProgressToNewStep, SystemIntakeActionTypeRequestEdits, SystemIntakeActionTypeExpireLcid, SystemIntakeActionTypeNotGovernance, SystemIntakeActionTypeCloseRequest, SystemIntakeActionTypeReopenRequest, SystemIntakeActionTypeUpdateLcid, SystemIntakeActionTypeConfirmLcid, SystemIntakeActionTypeRetireLcid, SystemIntakeActionTypeChangeLcidRetirementDate, SystemIntakeActionTypeIssueLcid, SystemIntakeActionTypeSubmitIntake, SystemIntakeActionTypeReject, SystemIntakeActionTypeBizCaseNeedsChanges, SystemIntakeActionTypeCreateBizCase, SystemIntakeActionTypeGUIDEReceivedClose, SystemIntakeActionTypeExtendLcid, SystemIntakeActionTypeNeedBizCase, SystemIntakeActionTypeNoGovernanceNeeded, SystemIntakeActionTypeNotItRequest, SystemIntakeActionTypeNotRespondingClose, SystemIntakeActionTypeProvideFeedbackNeedBizCase, SystemIntakeActionTypeProvideGrtFeedbackBizCaseDraft, SystemIntakeActionTypeProvideGrtFeedbackBizCaseFinal, SystemIntakeActionTypeReadyForGrb, SystemIntakeActionTypeReadyForGrt, SystemIntakeActionTypeSendEmail, SystemIntakeActionTypeSubmitBizCase, SystemIntakeActionTypeSubmitFinalBizCase:
		return true
	}
	return false
}

func (e SystemIntakeActionType) String() string {
	return string(e)
}

func (e *SystemIntakeActionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SystemIntakeActionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SystemIntakeActionType", str)
	}
	return nil
}

func (e SystemIntakeActionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// SystemIntakeRequestEditsOptions represents the current step in the intake process
type SystemIntakeFormStep string

const (
	SystemIntakeFormStepInitialRequestForm SystemIntakeFormStep = "INITIAL_REQUEST_FORM"
	SystemIntakeFormStepDraftBusinessCase  SystemIntakeFormStep = "DRAFT_BUSINESS_CASE"
	SystemIntakeFormStepFinalBusinessCase  SystemIntakeFormStep = "FINAL_BUSINESS_CASE"
)

var AllSystemIntakeFormStep = []SystemIntakeFormStep{
	SystemIntakeFormStepInitialRequestForm,
	SystemIntakeFormStepDraftBusinessCase,
	SystemIntakeFormStepFinalBusinessCase,
}

func (e SystemIntakeFormStep) IsValid() bool {
	switch e {
	case SystemIntakeFormStepInitialRequestForm, SystemIntakeFormStepDraftBusinessCase, SystemIntakeFormStepFinalBusinessCase:
		return true
	}
	return false
}

func (e SystemIntakeFormStep) String() string {
	return string(e)
}

func (e *SystemIntakeFormStep) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SystemIntakeFormStep(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SystemIntakeFormStep", str)
	}
	return nil
}

func (e SystemIntakeFormStep) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Steps in the system intake process that a Progress to New Step action can progress to
type SystemIntakeStepToProgressTo string

const (
	SystemIntakeStepToProgressToDraftBusinessCase SystemIntakeStepToProgressTo = "DRAFT_BUSINESS_CASE"
	SystemIntakeStepToProgressToGrtMeeting        SystemIntakeStepToProgressTo = "GRT_MEETING"
	SystemIntakeStepToProgressToGrbMeeting        SystemIntakeStepToProgressTo = "GRB_MEETING"
	SystemIntakeStepToProgressToFinalBusinessCase SystemIntakeStepToProgressTo = "FINAL_BUSINESS_CASE"
)

var AllSystemIntakeStepToProgressTo = []SystemIntakeStepToProgressTo{
	SystemIntakeStepToProgressToDraftBusinessCase,
	SystemIntakeStepToProgressToGrtMeeting,
	SystemIntakeStepToProgressToGrbMeeting,
	SystemIntakeStepToProgressToFinalBusinessCase,
}

func (e SystemIntakeStepToProgressTo) IsValid() bool {
	switch e {
	case SystemIntakeStepToProgressToDraftBusinessCase, SystemIntakeStepToProgressToGrtMeeting, SystemIntakeStepToProgressToGrbMeeting, SystemIntakeStepToProgressToFinalBusinessCase:
		return true
	}
	return false
}

func (e SystemIntakeStepToProgressTo) String() string {
	return string(e)
}

func (e *SystemIntakeStepToProgressTo) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SystemIntakeStepToProgressTo(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SystemIntakeStepToProgressTo", str)
	}
	return nil
}

func (e SystemIntakeStepToProgressTo) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
