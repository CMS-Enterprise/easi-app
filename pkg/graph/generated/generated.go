// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/cms-enterprise/easi-app/pkg/authentication"
	"github.com/cms-enterprise/easi-app/pkg/models"
	"github.com/google/uuid"
	"github.com/guregu/null"
	"github.com/guregu/null/zero"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	BusinessCase() BusinessCaseResolver
	CedarBudgetSystemCost() CedarBudgetSystemCostResolver
	CedarSoftwareProducts() CedarSoftwareProductsResolver
	CedarSystem() CedarSystemResolver
	CedarSystemDetails() CedarSystemDetailsResolver
	GovernanceRequestFeedback() GovernanceRequestFeedbackResolver
	ITGovTaskStatuses() ITGovTaskStatusesResolver
	Mutation() MutationResolver
	Query() QueryResolver
	SystemIntake() SystemIntakeResolver
	SystemIntakeDocument() SystemIntakeDocumentResolver
	SystemIntakeGRBPresentationLinks() SystemIntakeGRBPresentationLinksResolver
	SystemIntakeGRBReviewer() SystemIntakeGRBReviewerResolver
	SystemIntakeNote() SystemIntakeNoteResolver
	TRBAdminNote() TRBAdminNoteResolver
	TRBGuidanceLetter() TRBGuidanceLetterResolver
	TRBGuidanceLetterInsight() TRBGuidanceLetterInsightResolver
	TRBRequest() TRBRequestResolver
	TRBRequestAttendee() TRBRequestAttendeeResolver
	TRBRequestDocument() TRBRequestDocumentResolver
	TRBRequestFeedback() TRBRequestFeedbackResolver
	TRBRequestForm() TRBRequestFormResolver
	UserInfo() UserInfoResolver
}

type DirectiveRoot struct {
	HasRole func(ctx context.Context, obj any, next graphql.Resolver, role models.Role) (res any, err error)
}

type ComplexityRoot struct {
	AugmentedSystemIntakeContact struct {
		CommonName     func(childComplexity int) int
		Component      func(childComplexity int) int
		EUAUserID      func(childComplexity int) int
		Email          func(childComplexity int) int
		ID             func(childComplexity int) int
		Role           func(childComplexity int) int
		SystemIntakeID func(childComplexity int) int
	}

	BusinessCase struct {
		AlternativeASolution   func(childComplexity int) int
		AlternativeBSolution   func(childComplexity int) int
		BusinessNeed           func(childComplexity int) int
		BusinessOwner          func(childComplexity int) int
		CMSBenefit             func(childComplexity int) int
		CreatedAt              func(childComplexity int) int
		CurrentSolutionSummary func(childComplexity int) int
		EUAUserID              func(childComplexity int) int
		ID                     func(childComplexity int) int
		LifecycleCostLines     func(childComplexity int) int
		PreferredSolution      func(childComplexity int) int
		PriorityAlignment      func(childComplexity int) int
		ProjectName            func(childComplexity int) int
		Requester              func(childComplexity int) int
		RequesterPhoneNumber   func(childComplexity int) int
		Status                 func(childComplexity int) int
		SuccessIndicators      func(childComplexity int) int
		SystemIntake           func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
	}

	BusinessCaseSolution struct {
		AcquisitionApproach     func(childComplexity int) int
		Cons                    func(childComplexity int) int
		CostSavings             func(childComplexity int) int
		HasUI                   func(childComplexity int) int
		HostingCloudServiceType func(childComplexity int) int
		HostingLocation         func(childComplexity int) int
		HostingType             func(childComplexity int) int
		Pros                    func(childComplexity int) int
		SecurityIsApproved      func(childComplexity int) int
		SecurityIsBeingReviewed func(childComplexity int) int
		Summary                 func(childComplexity int) int
		Title                   func(childComplexity int) int
	}

	CedarAuthorityToOperate struct {
		ActualDispositionDate                     func(childComplexity int) int
		CedarID                                   func(childComplexity int) int
		ContainsPersonallyIdentifiableInformation func(childComplexity int) int
		CountOfOpenPoams                          func(childComplexity int) int
		CountOfTotalNonPrivilegedUserPopulation   func(childComplexity int) int
		CountOfTotalPrivilegedUserPopulation      func(childComplexity int) int
		DateAuthorizationMemoExpires              func(childComplexity int) int
		DateAuthorizationMemoSigned               func(childComplexity int) int
		EAuthenticationLevel                      func(childComplexity int) int
		Fips199OverallImpactRating                func(childComplexity int) int
		FismaSystemAcronym                        func(childComplexity int) int
		FismaSystemName                           func(childComplexity int) int
		IsAccessedByNonOrganizationalUsers        func(childComplexity int) int
		IsPiiLimitedToUserNameAndPass             func(childComplexity int) int
		IsProtectedHealthInformation              func(childComplexity int) int
		LastActScaDate                            func(childComplexity int) int
		LastAssessmentDate                        func(childComplexity int) int
		LastContingencyPlanCompletionDate         func(childComplexity int) int
		LastPenTestDate                           func(childComplexity int) int
		PiaCompletionDate                         func(childComplexity int) int
		PrimaryCyberRiskAdvisor                   func(childComplexity int) int
		PrivacySubjectMatterExpert                func(childComplexity int) int
		RecoveryPointObjective                    func(childComplexity int) int
		RecoveryTimeObjective                     func(childComplexity int) int
		SystemOfRecordsNotice                     func(childComplexity int) int
		TLCPhase                                  func(childComplexity int) int
		UUID                                      func(childComplexity int) int
		XLCPhase                                  func(childComplexity int) int
	}

	CedarBudget struct {
		FiscalYear    func(childComplexity int) int
		Funding       func(childComplexity int) int
		FundingID     func(childComplexity int) int
		FundingSource func(childComplexity int) int
		ID            func(childComplexity int) int
		Name          func(childComplexity int) int
		ProjectID     func(childComplexity int) int
		ProjectTitle  func(childComplexity int) int
		SystemID      func(childComplexity int) int
	}

	CedarBudgetActualCost struct {
		ActualSystemCost func(childComplexity int) int
		FiscalYear       func(childComplexity int) int
		SystemID         func(childComplexity int) int
	}

	CedarBudgetSystemCost struct {
		BudgetActualCost func(childComplexity int) int
	}

	CedarBusinessOwnerInformation struct {
		BeneficiaryAddressPurpose      func(childComplexity int) int
		BeneficiaryAddressPurposeOther func(childComplexity int) int
		BeneficiaryAddressSource       func(childComplexity int) int
		BeneficiaryAddressSourceOther  func(childComplexity int) int
		BeneficiaryInformation         func(childComplexity int) int
		CostPerYear                    func(childComplexity int) int
		EditBeneficiaryInformation     func(childComplexity int) int
		IsCmsOwned                     func(childComplexity int) int
		Nr508UserInterface             func(childComplexity int) int
		NumberOfContractorFte          func(childComplexity int) int
		NumberOfFederalFte             func(childComplexity int) int
		NumberOfSupportedUsersPerMonth func(childComplexity int) int
		StoresBankingData              func(childComplexity int) int
		StoresBeneficiaryAddress       func(childComplexity int) int
	}

	CedarContract struct {
		ContractName    func(childComplexity int) int
		ContractNumber  func(childComplexity int) int
		Description     func(childComplexity int) int
		EndDate         func(childComplexity int) int
		IsDeliveryOrg   func(childComplexity int) int
		OrderNumber     func(childComplexity int) int
		ServiceProvided func(childComplexity int) int
		StartDate       func(childComplexity int) int
		SystemID        func(childComplexity int) int
	}

	CedarDataCenter struct {
		Address1     func(childComplexity int) int
		Address2     func(childComplexity int) int
		AddressState func(childComplexity int) int
		City         func(childComplexity int) int
		Description  func(childComplexity int) int
		EndDate      func(childComplexity int) int
		ID           func(childComplexity int) int
		Name         func(childComplexity int) int
		StartDate    func(childComplexity int) int
		State        func(childComplexity int) int
		Status       func(childComplexity int) int
		Version      func(childComplexity int) int
		Zip          func(childComplexity int) int
	}

	CedarDeployment struct {
		ContractorName           func(childComplexity int) int
		DataCenter               func(childComplexity int) int
		DeploymentElementID      func(childComplexity int) int
		DeploymentType           func(childComplexity int) int
		Description              func(childComplexity int) int
		EndDate                  func(childComplexity int) int
		HasProductionData        func(childComplexity int) int
		ID                       func(childComplexity int) int
		IsHotSite                func(childComplexity int) int
		Name                     func(childComplexity int) int
		ReplicatedSystemElements func(childComplexity int) int
		StartDate                func(childComplexity int) int
		State                    func(childComplexity int) int
		Status                   func(childComplexity int) int
		SystemID                 func(childComplexity int) int
		SystemName               func(childComplexity int) int
		SystemVersion            func(childComplexity int) int
		WanType                  func(childComplexity int) int
	}

	CedarExchange struct {
		ConnectionFrequency         func(childComplexity int) int
		ContainsBankingData         func(childComplexity int) int
		ContainsBeneficiaryAddress  func(childComplexity int) int
		ContainsHealthDisparityData func(childComplexity int) int
		ContainsPhi                 func(childComplexity int) int
		ContainsPii                 func(childComplexity int) int
		DataExchangeAgreement       func(childComplexity int) int
		DataFormat                  func(childComplexity int) int
		DataFormatOther             func(childComplexity int) int
		ExchangeDescription         func(childComplexity int) int
		ExchangeDirection           func(childComplexity int) int
		ExchangeEndDate             func(childComplexity int) int
		ExchangeID                  func(childComplexity int) int
		ExchangeName                func(childComplexity int) int
		ExchangeRetiredDate         func(childComplexity int) int
		ExchangeStartDate           func(childComplexity int) int
		ExchangeState               func(childComplexity int) int
		ExchangeVersion             func(childComplexity int) int
		FromOwnerID                 func(childComplexity int) int
		FromOwnerName               func(childComplexity int) int
		FromOwnerType               func(childComplexity int) int
		IsBeneficiaryMailingFile    func(childComplexity int) int
		NumOfRecords                func(childComplexity int) int
		SharedViaAPI                func(childComplexity int) int
		ToOwnerID                   func(childComplexity int) int
		ToOwnerName                 func(childComplexity int) int
		ToOwnerType                 func(childComplexity int) int
		TypeOfData                  func(childComplexity int) int
	}

	CedarExchangeTypeOfDataItem struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	CedarRole struct {
		Application       func(childComplexity int) int
		AssigneeDesc      func(childComplexity int) int
		AssigneeEmail     func(childComplexity int) int
		AssigneeFirstName func(childComplexity int) int
		AssigneeLastName  func(childComplexity int) int
		AssigneeOrgID     func(childComplexity int) int
		AssigneeOrgName   func(childComplexity int) int
		AssigneePhone     func(childComplexity int) int
		AssigneeType      func(childComplexity int) int
		AssigneeUsername  func(childComplexity int) int
		ObjectID          func(childComplexity int) int
		ObjectType        func(childComplexity int) int
		RoleID            func(childComplexity int) int
		RoleTypeDesc      func(childComplexity int) int
		RoleTypeID        func(childComplexity int) int
		RoleTypeName      func(childComplexity int) int
	}

	CedarRoleType struct {
		Application func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	CedarSoftwareProductItem struct {
		APIGatewayUse                  func(childComplexity int) int
		ElaPurchase                    func(childComplexity int) int
		ElaVendorID                    func(childComplexity int) int
		ProvidesAiCapability           func(childComplexity int) int
		Refstr                         func(childComplexity int) int
		SoftwareCatagoryConnectionGUID func(childComplexity int) int
		SoftwareCost                   func(childComplexity int) int
		SoftwareElaOrganization        func(childComplexity int) int
		SoftwareName                   func(childComplexity int) int
		SoftwareVendorConnectionGUID   func(childComplexity int) int
		SystemSoftwareConnectionGUID   func(childComplexity int) int
		TechnopediaCategory            func(childComplexity int) int
		TechnopediaID                  func(childComplexity int) int
		VendorName                     func(childComplexity int) int
	}

	CedarSoftwareProducts struct {
		AISolnCatgOther     func(childComplexity int) int
		APIDataArea         func(childComplexity int) int
		APIDescPubLocation  func(childComplexity int) int
		APIDescPublished    func(childComplexity int) int
		APIFHIRUse          func(childComplexity int) int
		APIFHIRUseOther     func(childComplexity int) int
		APIHasPortal        func(childComplexity int) int
		AiSolnCatg          func(childComplexity int) int
		ApisAccessibility   func(childComplexity int) int
		ApisDeveloped       func(childComplexity int) int
		DevelopmentStage    func(childComplexity int) int
		SoftwareProducts    func(childComplexity int) int
		SystemHasAPIGateway func(childComplexity int) int
		UsesAiTech          func(childComplexity int) int
	}

	CedarSubSystem struct {
		Acronym     func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	CedarSystem struct {
		ATOEffectiveDate        func(childComplexity int) int
		ATOExpirationDate       func(childComplexity int) int
		Acronym                 func(childComplexity int) int
		BusinessOwnerOrg        func(childComplexity int) int
		BusinessOwnerOrgComp    func(childComplexity int) int
		BusinessOwnerRoles      func(childComplexity int) int
		Description             func(childComplexity int) int
		ID                      func(childComplexity int) int
		IsBookmarked            func(childComplexity int) int
		LinkedSystemIntakes     func(childComplexity int, state models.SystemIntakeState) int
		LinkedTrbRequests       func(childComplexity int, state models.TRBRequestState) int
		Name                    func(childComplexity int) int
		Status                  func(childComplexity int) int
		SystemMaintainerOrg     func(childComplexity int) int
		SystemMaintainerOrgComp func(childComplexity int) int
		UUID                    func(childComplexity int) int
		VersionID               func(childComplexity int) int
	}

	CedarSystemBookmark struct {
		CedarSystemID func(childComplexity int) int
		EUAUserID     func(childComplexity int) int
	}

	CedarSystemDetails struct {
		ATOEffectiveDate            func(childComplexity int) int
		ATOExpirationDate           func(childComplexity int) int
		BusinessOwnerInformation    func(childComplexity int) int
		CedarSystem                 func(childComplexity int) int
		Deployments                 func(childComplexity int) int
		IsMySystem                  func(childComplexity int) int
		Roles                       func(childComplexity int) int
		SystemMaintainerInformation func(childComplexity int) int
		Threats                     func(childComplexity int) int
		URLs                        func(childComplexity int) int
	}

	CedarSystemMaintainerInformation struct {
		AdHocAgileDeploymentFrequency         func(childComplexity int) int
		AgileUsed                             func(childComplexity int) int
		AuthoritativeDatasource               func(childComplexity int) int
		BusinessArtifactsOnDemand             func(childComplexity int) int
		DataAtRestEncryptionKeyManagement     func(childComplexity int) int
		DeploymentFrequency                   func(childComplexity int) int
		DevCompletionPercent                  func(childComplexity int) int
		DevWorkDescription                    func(childComplexity int) int
		EcapParticipation                     func(childComplexity int) int
		FrontendAccessType                    func(childComplexity int) int
		HardCodedIPAddress                    func(childComplexity int) int
		IP6EnabledAssetPercent                func(childComplexity int) int
		IP6TransitionPlan                     func(childComplexity int) int
		IPEnabledAssetCount                   func(childComplexity int) int
		LegalHoldCaseName                     func(childComplexity int) int
		LocallyStoredUserInformation          func(childComplexity int) int
		MajorRefreshDate                      func(childComplexity int) int
		MultifactorAuthenticationMethod       func(childComplexity int) int
		MultifactorAuthenticationMethodOther  func(childComplexity int) int
		NetAccessibility                      func(childComplexity int) int
		NetworkTrafficEncryptionKeyManagement func(childComplexity int) int
		NoMajorRefresh                        func(childComplexity int) int
		NoPersistentRecordsFlag               func(childComplexity int) int
		NoPlannedMajorRefresh                 func(childComplexity int) int
		OmDocumentationOnDemand               func(childComplexity int) int
		PlansToRetireReplace                  func(childComplexity int) int
		QuarterToRetireReplace                func(childComplexity int) int
		RecordsManagementBucket               func(childComplexity int) int
		RecordsManagementDisposalLocation     func(childComplexity int) int
		RecordsManagementDisposalPlan         func(childComplexity int) int
		RecordsUnderLegalHold                 func(childComplexity int) int
		SourceCodeOnDemand                    func(childComplexity int) int
		SystemCustomization                   func(childComplexity int) int
		SystemDataLocation                    func(childComplexity int) int
		SystemDataLocationNotes               func(childComplexity int) int
		SystemDesignOnDemand                  func(childComplexity int) int
		SystemProductionDate                  func(childComplexity int) int
		SystemRequirementsOnDemand            func(childComplexity int) int
		TestPlanOnDemand                      func(childComplexity int) int
		TestReportsOnDemand                   func(childComplexity int) int
		TestScriptsOnDemand                   func(childComplexity int) int
		YearToRetireReplace                   func(childComplexity int) int
	}

	CedarThreat struct {
		AlternativeID     func(childComplexity int) int
		ControlFamily     func(childComplexity int) int
		DaysOpen          func(childComplexity int) int
		ID                func(childComplexity int) int
		ParentID          func(childComplexity int) int
		Type              func(childComplexity int) int
		WeaknessRiskLevel func(childComplexity int) int
	}

	CedarURL struct {
		Address                        func(childComplexity int) int
		ID                             func(childComplexity int) int
		IsAPIEndpoint                  func(childComplexity int) int
		IsBehindWebApplicationFirewall func(childComplexity int) int
		IsVersionCodeRepository        func(childComplexity int) int
		URLHostingEnv                  func(childComplexity int) int
	}

	ContractDate struct {
		Day   func(childComplexity int) int
		Month func(childComplexity int) int
		Year  func(childComplexity int) int
	}

	CreateCedarSystemBookmarkPayload struct {
		CedarSystemBookmark func(childComplexity int) int
	}

	CreateSystemIntakeContactPayload struct {
		SystemIntakeContact func(childComplexity int) int
	}

	CreateSystemIntakeDocumentPayload struct {
		Document func(childComplexity int) int
	}

	CreateSystemIntakeGRBReviewersPayload struct {
		Reviewers func(childComplexity int) int
	}

	CreateTRBRequestDocumentPayload struct {
		Document func(childComplexity int) int
	}

	CurrentUser struct {
		LaunchDarkly func(childComplexity int) int
	}

	DeleteCedarSystemBookmarkPayload struct {
		CedarSystemID func(childComplexity int) int
	}

	DeleteSystemIntakeContactPayload struct {
		SystemIntakeContact func(childComplexity int) int
	}

	DeleteSystemIntakeDocumentPayload struct {
		Document func(childComplexity int) int
	}

	DeleteTRBRequestDocumentPayload struct {
		Document func(childComplexity int) int
	}

	EstimatedLifecycleCost struct {
		BusinessCaseID func(childComplexity int) int
		Cost           func(childComplexity int) int
		ID             func(childComplexity int) int
		Phase          func(childComplexity int) int
		Solution       func(childComplexity int) int
		Year           func(childComplexity int) int
	}

	GRBReviewerComparison struct {
		EuaUserID         func(childComplexity int) int
		GrbRole           func(childComplexity int) int
		ID                func(childComplexity int) int
		IsCurrentReviewer func(childComplexity int) int
		UserAccount       func(childComplexity int) int
		VotingRole        func(childComplexity int) int
	}

	GRBReviewerComparisonIntake struct {
		ID              func(childComplexity int) int
		IntakeCreatedAt func(childComplexity int) int
		RequestName     func(childComplexity int) int
		Reviewers       func(childComplexity int) int
	}

	GRBVotingInformation struct {
		GRBReviewers        func(childComplexity int) int
		NumberOfNoObjection func(childComplexity int) int
		NumberOfNotVoted    func(childComplexity int) int
		NumberOfObjection   func(childComplexity int) int
		VotingStatus        func(childComplexity int) int
	}

	GovernanceRequestFeedback struct {
		Author       func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		Feedback     func(childComplexity int) int
		ID           func(childComplexity int) int
		IntakeID     func(childComplexity int) int
		ModifiedAt   func(childComplexity int) int
		ModifiedBy   func(childComplexity int) int
		SourceAction func(childComplexity int) int
		TargetForm   func(childComplexity int) int
		Type         func(childComplexity int) int
	}

	ITGovTaskStatuses struct {
		BizCaseDraftStatus              func(childComplexity int) int
		BizCaseFinalStatus              func(childComplexity int) int
		DecisionAndNextStepsStatus      func(childComplexity int) int
		FeedbackFromInitialReviewStatus func(childComplexity int) int
		GrbMeetingStatus                func(childComplexity int) int
		GrtMeetingStatus                func(childComplexity int) int
		IntakeFormStatus                func(childComplexity int) int
	}

	LaunchDarklySettings struct {
		SignedHash func(childComplexity int) int
		UserKey    func(childComplexity int) int
	}

	Mutation struct {
		ArchiveSystemIntake                                 func(childComplexity int, id uuid.UUID) int
		CastSystemIntakeGRBReviewerVote                     func(childComplexity int, input models.CastSystemIntakeGRBReviewerVoteInput) int
		CloseTRBRequest                                     func(childComplexity int, input models.CloseTRBRequestInput) int
		CreateCedarSystemBookmark                           func(childComplexity int, input models.CreateCedarSystemBookmarkInput) int
		CreateSystemIntake                                  func(childComplexity int, input models.CreateSystemIntakeInput) int
		CreateSystemIntakeActionChangeLCIDRetirementDate    func(childComplexity int, input models.SystemIntakeChangeLCIDRetirementDateInput) int
		CreateSystemIntakeActionCloseRequest                func(childComplexity int, input models.SystemIntakeCloseRequestInput) int
		CreateSystemIntakeActionConfirmLcid                 func(childComplexity int, input models.SystemIntakeConfirmLCIDInput) int
		CreateSystemIntakeActionExpireLcid                  func(childComplexity int, input models.SystemIntakeExpireLCIDInput) int
		CreateSystemIntakeActionIssueLcid                   func(childComplexity int, input models.SystemIntakeIssueLCIDInput) int
		CreateSystemIntakeActionNotITGovRequest             func(childComplexity int, input models.SystemIntakeNotITGovReqInput) int
		CreateSystemIntakeActionProgressToNewStep           func(childComplexity int, input models.SystemIntakeProgressToNewStepsInput) int
		CreateSystemIntakeActionRejectIntake                func(childComplexity int, input models.SystemIntakeRejectIntakeInput) int
		CreateSystemIntakeActionReopenRequest               func(childComplexity int, input models.SystemIntakeReopenRequestInput) int
		CreateSystemIntakeActionRequestEdits                func(childComplexity int, input models.SystemIntakeRequestEditsInput) int
		CreateSystemIntakeActionRetireLcid                  func(childComplexity int, input models.SystemIntakeRetireLCIDInput) int
		CreateSystemIntakeActionUnretireLcid                func(childComplexity int, input models.SystemIntakeUnretireLCIDInput) int
		CreateSystemIntakeActionUpdateLcid                  func(childComplexity int, input models.SystemIntakeUpdateLCIDInput) int
		CreateSystemIntakeContact                           func(childComplexity int, input models.CreateSystemIntakeContactInput) int
		CreateSystemIntakeDocument                          func(childComplexity int, input models.CreateSystemIntakeDocumentInput) int
		CreateSystemIntakeGRBDiscussionPost                 func(childComplexity int, input models.CreateSystemIntakeGRBDiscussionPostInput) int
		CreateSystemIntakeGRBDiscussionReply                func(childComplexity int, input models.CreateSystemIntakeGRBDiscussionReplyInput) int
		CreateSystemIntakeGRBReviewers                      func(childComplexity int, input models.CreateSystemIntakeGRBReviewersInput) int
		CreateSystemIntakeNote                              func(childComplexity int, input models.CreateSystemIntakeNoteInput) int
		CreateTRBAdminNoteConsultSession                    func(childComplexity int, input models.CreateTRBAdminNoteConsultSessionInput) int
		CreateTRBAdminNoteGeneralRequest                    func(childComplexity int, input models.CreateTRBAdminNoteGeneralRequestInput) int
		CreateTRBAdminNoteGuidanceLetter                    func(childComplexity int, input models.CreateTRBAdminNoteGuidanceLetterInput) int
		CreateTRBAdminNoteInitialRequestForm                func(childComplexity int, input models.CreateTRBAdminNoteInitialRequestFormInput) int
		CreateTRBAdminNoteSupportingDocuments               func(childComplexity int, input models.CreateTRBAdminNoteSupportingDocumentsInput) int
		CreateTRBGuidanceLetter                             func(childComplexity int, trbRequestID uuid.UUID) int
		CreateTRBGuidanceLetterInsight                      func(childComplexity int, input models.CreateTRBGuidanceLetterInsightInput) int
		CreateTRBRequest                                    func(childComplexity int, requestType models.TRBRequestType) int
		CreateTRBRequestAttendee                            func(childComplexity int, input models.CreateTRBRequestAttendeeInput) int
		CreateTRBRequestDocument                            func(childComplexity int, input models.CreateTRBRequestDocumentInput) int
		CreateTRBRequestFeedback                            func(childComplexity int, input models.CreateTRBRequestFeedbackInput) int
		CreateTrbLeadOption                                 func(childComplexity int, eua string) int
		DeleteCedarSystemBookmark                           func(childComplexity int, input models.CreateCedarSystemBookmarkInput) int
		DeleteSystemIntakeContact                           func(childComplexity int, input models.DeleteSystemIntakeContactInput) int
		DeleteSystemIntakeDocument                          func(childComplexity int, id uuid.UUID) int
		DeleteSystemIntakeGRBPresentationLinks              func(childComplexity int, input models.DeleteSystemIntakeGRBPresentationLinksInput) int
		DeleteSystemIntakeGRBReviewer                       func(childComplexity int, input models.DeleteSystemIntakeGRBReviewerInput) int
		DeleteTRBGuidanceLetterInsight                      func(childComplexity int, id uuid.UUID) int
		DeleteTRBRequestAttendee                            func(childComplexity int, id uuid.UUID) int
		DeleteTRBRequestDocument                            func(childComplexity int, id uuid.UUID) int
		DeleteTRBRequestFundingSources                      func(childComplexity int, input models.DeleteTRBRequestFundingSourcesInput) int
		DeleteTrbLeadOption                                 func(childComplexity int, eua string) int
		ManuallyEndSystemIntakeGRBReviewAsyncVoting         func(childComplexity int, systemIntakeID uuid.UUID) int
		ReopenTrbRequest                                    func(childComplexity int, input models.ReopenTRBRequestInput) int
		RequestReviewForTRBGuidanceLetter                   func(childComplexity int, id uuid.UUID) int
		SendCantFindSomethingEmail                          func(childComplexity int, input models.SendCantFindSomethingEmailInput) int
		SendFeedbackEmail                                   func(childComplexity int, input models.SendFeedbackEmailInput) int
		SendGRBReviewPresentationDeckReminderEmail          func(childComplexity int, systemIntakeID uuid.UUID) int
		SendReportAProblemEmail                             func(childComplexity int, input models.SendReportAProblemEmailInput) int
		SendTRBGuidanceLetter                               func(childComplexity int, input models.SendTRBGuidanceLetterInput) int
		SetRolesForUserOnSystem                             func(childComplexity int, input models.SetRolesForUserOnSystemInput) int
		SetSystemIntakeGRBPresentationLinks                 func(childComplexity int, input models.SystemIntakeGRBPresentationLinksInput) int
		SetSystemIntakeRelationExistingService              func(childComplexity int, input *models.SetSystemIntakeRelationExistingServiceInput) int
		SetSystemIntakeRelationExistingSystem               func(childComplexity int, input *models.SetSystemIntakeRelationExistingSystemInput) int
		SetSystemIntakeRelationNewSystem                    func(childComplexity int, input *models.SetSystemIntakeRelationNewSystemInput) int
		SetTRBAdminNoteArchived                             func(childComplexity int, id uuid.UUID, isArchived bool) int
		SetTRBRequestRelationExistingService                func(childComplexity int, input models.SetTRBRequestRelationExistingServiceInput) int
		SetTRBRequestRelationExistingSystem                 func(childComplexity int, input models.SetTRBRequestRelationExistingSystemInput) int
		SetTRBRequestRelationNewSystem                      func(childComplexity int, input models.SetTRBRequestRelationNewSystemInput) int
		StartGRBReview                                      func(childComplexity int, input models.StartGRBReviewInput) int
		SubmitIntake                                        func(childComplexity int, input models.SubmitIntakeInput) int
		UnlinkSystemIntakeRelation                          func(childComplexity int, intakeID uuid.UUID) int
		UnlinkTRBRequestRelation                            func(childComplexity int, trbRequestID uuid.UUID) int
		UpdateSystemIntakeAdminLead                         func(childComplexity int, input models.UpdateSystemIntakeAdminLeadInput) int
		UpdateSystemIntakeContact                           func(childComplexity int, input models.UpdateSystemIntakeContactInput) int
		UpdateSystemIntakeContactDetails                    func(childComplexity int, input models.UpdateSystemIntakeContactDetailsInput) int
		UpdateSystemIntakeContractDetails                   func(childComplexity int, input models.UpdateSystemIntakeContractDetailsInput) int
		UpdateSystemIntakeGRBReviewFormPresentationAsync    func(childComplexity int, input models.UpdateSystemIntakeGRBReviewFormInputPresentationAsync) int
		UpdateSystemIntakeGRBReviewFormPresentationStandard func(childComplexity int, input models.UpdateSystemIntakeGRBReviewFormInputPresentationStandard) int
		UpdateSystemIntakeGRBReviewFormTimeframeAsync       func(childComplexity int, input models.UpdateSystemIntakeGRBReviewFormInputTimeframeAsync) int
		UpdateSystemIntakeGRBReviewType                     func(childComplexity int, input models.UpdateSystemIntakeGRBReviewTypeInput) int
		UpdateSystemIntakeGRBReviewer                       func(childComplexity int, input models.UpdateSystemIntakeGRBReviewerInput) int
		UpdateSystemIntakeLinkedCedarSystem                 func(childComplexity int, input models.UpdateSystemIntakeLinkedCedarSystemInput) int
		UpdateSystemIntakeNote                              func(childComplexity int, input models.UpdateSystemIntakeNoteInput) int
		UpdateSystemIntakeRequestDetails                    func(childComplexity int, input models.UpdateSystemIntakeRequestDetailsInput) int
		UpdateSystemIntakeRequestType                       func(childComplexity int, id uuid.UUID, newType models.SystemIntakeRequestType) int
		UpdateSystemIntakeReviewDates                       func(childComplexity int, input models.UpdateSystemIntakeReviewDatesInput) int
		UpdateTRBGuidanceLetter                             func(childComplexity int, input map[string]interface{}) int
		UpdateTRBGuidanceLetterInsight                      func(childComplexity int, input map[string]interface{}) int
		UpdateTRBGuidanceLetterInsightOrder                 func(childComplexity int, input models.UpdateTRBGuidanceLetterInsightOrderInput) int
		UpdateTRBRequest                                    func(childComplexity int, id uuid.UUID, changes map[string]interface{}) int
		UpdateTRBRequestAttendee                            func(childComplexity int, input models.UpdateTRBRequestAttendeeInput) int
		UpdateTRBRequestConsultMeetingTime                  func(childComplexity int, input models.UpdateTRBRequestConsultMeetingTimeInput) int
		UpdateTRBRequestForm                                func(childComplexity int, input map[string]interface{}) int
		UpdateTRBRequestFundingSources                      func(childComplexity int, input models.UpdateTRBRequestFundingSourcesInput) int
		UpdateTRBRequestTRBLead                             func(childComplexity int, input models.UpdateTRBRequestTRBLeadInput) int
		UploadSystemIntakeGRBPresentationDeck               func(childComplexity int, input models.UploadSystemIntakeGRBPresentationDeckInput) int
	}

	Query struct {
		CedarAuthorityToOperate          func(childComplexity int, cedarSystemID string) int
		CedarBudget                      func(childComplexity int, cedarSystemID string) int
		CedarBudgetSystemCost            func(childComplexity int, cedarSystemID string) int
		CedarContractsBySystem           func(childComplexity int, cedarSystemID string) int
		CedarPersonsByCommonName         func(childComplexity int, commonName string) int
		CedarSoftwareProducts            func(childComplexity int, cedarSystemID string) int
		CedarSubSystems                  func(childComplexity int, cedarSystemID string) int
		CedarSystem                      func(childComplexity int, cedarSystemID string) int
		CedarSystemBookmarks             func(childComplexity int) int
		CedarSystemDetails               func(childComplexity int, cedarSystemID string) int
		CedarSystems                     func(childComplexity int) int
		CedarThreat                      func(childComplexity int, cedarSystemID string) int
		CompareGRBReviewersByIntakeID    func(childComplexity int, id uuid.UUID) int
		CurrentUser                      func(childComplexity int) int
		Deployments                      func(childComplexity int, cedarSystemID string, deploymentType *string, state *string, status *string) int
		Exchanges                        func(childComplexity int, cedarSystemID string) int
		MyCedarSystems                   func(childComplexity int) int
		MySystemIntakes                  func(childComplexity int) int
		MyTrbRequests                    func(childComplexity int, archived bool) int
		RoleTypes                        func(childComplexity int) int
		Roles                            func(childComplexity int, cedarSystemID string, roleTypeID *string) int
		SystemIntake                     func(childComplexity int, id uuid.UUID) int
		SystemIntakeContacts             func(childComplexity int, id uuid.UUID) int
		SystemIntakes                    func(childComplexity int, openRequests bool) int
		SystemIntakesWithLcids           func(childComplexity int) int
		SystemIntakesWithReviewRequested func(childComplexity int) int
		TrbAdminNote                     func(childComplexity int, id uuid.UUID) int
		TrbLeadOptions                   func(childComplexity int) int
		TrbRequest                       func(childComplexity int, id uuid.UUID) int
		TrbRequests                      func(childComplexity int, archived bool) int
		Urls                             func(childComplexity int, cedarSystemID string) int
		UserAccount                      func(childComplexity int, username string) int
	}

	SystemIntake struct {
		AcquisitionMethods                                func(childComplexity int) int
		Actions                                           func(childComplexity int) int
		AdminLead                                         func(childComplexity int) int
		AnnualSpending                                    func(childComplexity int) int
		ArchivedAt                                        func(childComplexity int) int
		BusinessCase                                      func(childComplexity int) int
		BusinessCaseID                                    func(childComplexity int) int
		BusinessNeed                                      func(childComplexity int) int
		BusinessOwner                                     func(childComplexity int) int
		BusinessSolution                                  func(childComplexity int) int
		CedarSystemID                                     func(childComplexity int) int
		Contract                                          func(childComplexity int) int
		ContractName                                      func(childComplexity int) int
		ContractNumbers                                   func(childComplexity int) int
		Costs                                             func(childComplexity int) int
		CreatedAt                                         func(childComplexity int) int
		CurrentStage                                      func(childComplexity int) int
		DecidedAt                                         func(childComplexity int) int
		DecisionNextSteps                                 func(childComplexity int) int
		DecisionState                                     func(childComplexity int) int
		Documents                                         func(childComplexity int) int
		DraftBusinessCaseState                            func(childComplexity int) int
		EACollaborator                                    func(childComplexity int) int
		EACollaboratorName                                func(childComplexity int) int
		EUAUserID                                         func(childComplexity int) int
		ExistingFunding                                   func(childComplexity int) int
		FinalBusinessCaseState                            func(childComplexity int) int
		FundingSources                                    func(childComplexity int) int
		GRBDate                                           func(childComplexity int) int
		GRBMeetingState                                   func(childComplexity int) int
		GRBReviewStartedAt                                func(childComplexity int) int
		GRTDate                                           func(childComplexity int) int
		GRTMeetingState                                   func(childComplexity int) int
		GovernanceRequestFeedbacks                        func(childComplexity int) int
		GovernanceTeams                                   func(childComplexity int) int
		GrbDiscussions                                    func(childComplexity int) int
		GrbPresentationDeckRequesterReminderEmailSentTime func(childComplexity int) int
		GrbPresentationLinks                              func(childComplexity int) int
		GrbReviewAsyncEndDate                             func(childComplexity int) int
		GrbReviewAsyncGRBMeetingTime                      func(childComplexity int) int
		GrbReviewAsyncManualEndDate                       func(childComplexity int) int
		GrbReviewAsyncRecordingTime                       func(childComplexity int) int
		GrbReviewAsyncStatus                              func(childComplexity int) int
		GrbReviewType                                     func(childComplexity int) int
		GrbReviewers                                      func(childComplexity int) int
		GrbVotingInformation                              func(childComplexity int) int
		GrtReviewEmailBody                                func(childComplexity int) int
		HasUIChanges                                      func(childComplexity int) int
		ID                                                func(childComplexity int) int
		Isso                                              func(childComplexity int) int
		ItGovTaskStatuses                                 func(childComplexity int) int
		LastMeetingDate                                   func(childComplexity int) int
		Lcid                                              func(childComplexity int) int
		LcidCostBaseline                                  func(childComplexity int) int
		LcidScope                                         func(childComplexity int) int
		LcidStatus                                        func(childComplexity int) int
		LifecycleExpiresAt                                func(childComplexity int) int
		LifecycleIssuedAt                                 func(childComplexity int) int
		LifecycleRetiresAt                                func(childComplexity int) int
		NeedsEaSupport                                    func(childComplexity int) int
		NextMeetingDate                                   func(childComplexity int) int
		Notes                                             func(childComplexity int) int
		OITSecurityCollaborator                           func(childComplexity int) int
		OITSecurityCollaboratorName                       func(childComplexity int) int
		ProductManager                                    func(childComplexity int) int
		ProjectAcronym                                    func(childComplexity int) int
		RejectionReason                                   func(childComplexity int) int
		RelatedIntakes                                    func(childComplexity int) int
		RelatedTRBRequests                                func(childComplexity int) int
		RelationType                                      func(childComplexity int) int
		RequestFormState                                  func(childComplexity int) int
		RequestName                                       func(childComplexity int) int
		RequestType                                       func(childComplexity int) int
		Requester                                         func(childComplexity int) int
		RequesterComponent                                func(childComplexity int) int
		RequesterName                                     func(childComplexity int) int
		State                                             func(childComplexity int) int
		StatusAdmin                                       func(childComplexity int) int
		StatusRequester                                   func(childComplexity int) int
		Step                                              func(childComplexity int) int
		SubmittedAt                                       func(childComplexity int) int
		Systems                                           func(childComplexity int) int
		TRBCollaborator                                   func(childComplexity int) int
		TRBCollaboratorName                               func(childComplexity int) int
		TRBFollowUpRecommendation                         func(childComplexity int) int
		UpdatedAt                                         func(childComplexity int) int
		UsesAITech                                        func(childComplexity int) int
		UsingSoftware                                     func(childComplexity int) int
	}

	SystemIntakeAction struct {
		Actor                  func(childComplexity int) int
		CreatedAt              func(childComplexity int) int
		Feedback               func(childComplexity int) int
		ID                     func(childComplexity int) int
		LcidExpirationChange   func(childComplexity int) int
		NewRetirementDate      func(childComplexity int) int
		PreviousRetirementDate func(childComplexity int) int
		Step                   func(childComplexity int) int
		SystemIntake           func(childComplexity int) int
		Type                   func(childComplexity int) int
	}

	SystemIntakeActionActor struct {
		Email func(childComplexity int) int
		Name  func(childComplexity int) int
	}

	SystemIntakeAnnualSpending struct {
		CurrentAnnualSpending           func(childComplexity int) int
		CurrentAnnualSpendingITPortion  func(childComplexity int) int
		PlannedYearOneSpending          func(childComplexity int) int
		PlannedYearOneSpendingITPortion func(childComplexity int) int
	}

	SystemIntakeBusinessOwner struct {
		Component func(childComplexity int) int
		Name      func(childComplexity int) int
	}

	SystemIntakeCollaborator struct {
		Acronym      func(childComplexity int) int
		Collaborator func(childComplexity int) int
		Key          func(childComplexity int) int
		Label        func(childComplexity int) int
		Name         func(childComplexity int) int
	}

	SystemIntakeContact struct {
		Component      func(childComplexity int) int
		EUAUserID      func(childComplexity int) int
		ID             func(childComplexity int) int
		Role           func(childComplexity int) int
		SystemIntakeID func(childComplexity int) int
	}

	SystemIntakeContactsPayload struct {
		InvalidEUAIDs        func(childComplexity int) int
		SystemIntakeContacts func(childComplexity int) int
	}

	SystemIntakeContract struct {
		Contractor  func(childComplexity int) int
		EndDate     func(childComplexity int) int
		HasContract func(childComplexity int) int
		StartDate   func(childComplexity int) int
		Vehicle     func(childComplexity int) int
	}

	SystemIntakeContractNumber struct {
		ContractNumber func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		ID             func(childComplexity int) int
		ModifiedAt     func(childComplexity int) int
		ModifiedBy     func(childComplexity int) int
		SystemIntakeID func(childComplexity int) int
	}

	SystemIntakeCosts struct {
		ExpectedIncreaseAmount func(childComplexity int) int
		IsExpectingIncrease    func(childComplexity int) int
	}

	SystemIntakeDocument struct {
		CanDelete      func(childComplexity int) int
		CanView        func(childComplexity int) int
		DocumentType   func(childComplexity int) int
		FileName       func(childComplexity int) int
		ID             func(childComplexity int) int
		Status         func(childComplexity int) int
		SystemIntakeID func(childComplexity int) int
		URL            func(childComplexity int) int
		UploadedAt     func(childComplexity int) int
		Version        func(childComplexity int) int
	}

	SystemIntakeDocumentType struct {
		CommonType           func(childComplexity int) int
		OtherTypeDescription func(childComplexity int) int
	}

	SystemIntakeFundingSource struct {
		FundingNumber func(childComplexity int) int
		ID            func(childComplexity int) int
		Source        func(childComplexity int) int
	}

	SystemIntakeGRBPresentationLinks struct {
		CreatedAt                  func(childComplexity int) int
		CreatedBy                  func(childComplexity int) int
		ModifiedAt                 func(childComplexity int) int
		ModifiedBy                 func(childComplexity int) int
		PresentationDeckFileName   func(childComplexity int) int
		PresentationDeckFileStatus func(childComplexity int) int
		PresentationDeckFileURL    func(childComplexity int) int
		RecordingLink              func(childComplexity int) int
		RecordingPasscode          func(childComplexity int) int
		SystemIntakeID             func(childComplexity int) int
		TranscriptFileName         func(childComplexity int) int
		TranscriptFileStatus       func(childComplexity int) int
		TranscriptFileURL          func(childComplexity int) int
		TranscriptLink             func(childComplexity int) int
	}

	SystemIntakeGRBReviewDiscussion struct {
		InitialPost func(childComplexity int) int
		Replies     func(childComplexity int) int
	}

	SystemIntakeGRBReviewDiscussionPost struct {
		Content               func(childComplexity int) int
		CreatedAt             func(childComplexity int) int
		CreatedByUserAccount  func(childComplexity int) int
		GRBRole               func(childComplexity int) int
		ID                    func(childComplexity int) int
		ModifiedAt            func(childComplexity int) int
		ModifiedByUserAccount func(childComplexity int) int
		SystemIntakeID        func(childComplexity int) int
		VotingRole            func(childComplexity int) int
	}

	SystemIntakeGRBReviewer struct {
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		DateVoted      func(childComplexity int) int
		GrbRole        func(childComplexity int) int
		ID             func(childComplexity int) int
		ModifiedAt     func(childComplexity int) int
		ModifiedBy     func(childComplexity int) int
		SystemIntakeID func(childComplexity int) int
		UserAccount    func(childComplexity int) int
		Vote           func(childComplexity int) int
		VoteComment    func(childComplexity int) int
		VotingRole     func(childComplexity int) int
	}

	SystemIntakeGovernanceTeam struct {
		IsPresent func(childComplexity int) int
		Teams     func(childComplexity int) int
	}

	SystemIntakeISSO struct {
		IsPresent func(childComplexity int) int
		Name      func(childComplexity int) int
	}

	SystemIntakeLCIDExpirationChange struct {
		NewCostBaseline      func(childComplexity int) int
		NewDate              func(childComplexity int) int
		NewNextSteps         func(childComplexity int) int
		NewScope             func(childComplexity int) int
		PreviousCostBaseline func(childComplexity int) int
		PreviousDate         func(childComplexity int) int
		PreviousNextSteps    func(childComplexity int) int
		PreviousScope        func(childComplexity int) int
	}

	SystemIntakeNote struct {
		Author     func(childComplexity int) int
		Content    func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		Editor     func(childComplexity int) int
		ID         func(childComplexity int) int
		IsArchived func(childComplexity int) int
		ModifiedAt func(childComplexity int) int
		ModifiedBy func(childComplexity int) int
	}

	SystemIntakeNoteAuthor struct {
		Eua  func(childComplexity int) int
		Name func(childComplexity int) int
	}

	SystemIntakeProductManager struct {
		Component func(childComplexity int) int
		Name      func(childComplexity int) int
	}

	SystemIntakeRequester struct {
		Component func(childComplexity int) int
		Email     func(childComplexity int) int
		Name      func(childComplexity int) int
	}

	TRBAdminNote struct {
		Author               func(childComplexity int) int
		Category             func(childComplexity int) int
		CategorySpecificData func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		CreatedBy            func(childComplexity int) int
		ID                   func(childComplexity int) int
		IsArchived           func(childComplexity int) int
		ModifiedAt           func(childComplexity int) int
		ModifiedBy           func(childComplexity int) int
		NoteText             func(childComplexity int) int
		TRBRequestID         func(childComplexity int) int
	}

	TRBAdminNoteConsultSessionCategoryData struct {
		PlaceholderField func(childComplexity int) int
	}

	TRBAdminNoteGeneralRequestCategoryData struct {
		PlaceholderField func(childComplexity int) int
	}

	TRBAdminNoteGuidanceLetterCategoryData struct {
		AppliesToMeetingSummary func(childComplexity int) int
		AppliesToNextSteps      func(childComplexity int) int
		Insights                func(childComplexity int) int
	}

	TRBAdminNoteInitialRequestFormCategoryData struct {
		AppliesToAttendees           func(childComplexity int) int
		AppliesToBasicRequestDetails func(childComplexity int) int
		AppliesToSubjectAreas        func(childComplexity int) int
	}

	TRBAdminNoteSupportingDocumentsCategoryData struct {
		Documents func(childComplexity int) int
	}

	TRBFundingSource struct {
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		FundingNumber func(childComplexity int) int
		ID            func(childComplexity int) int
		ModifiedAt    func(childComplexity int) int
		ModifiedBy    func(childComplexity int) int
		Source        func(childComplexity int) int
		TRBRequestID  func(childComplexity int) int
	}

	TRBGuidanceLetter struct {
		Author                func(childComplexity int) int
		CreatedAt             func(childComplexity int) int
		CreatedBy             func(childComplexity int) int
		DateSent              func(childComplexity int) int
		FollowupPoint         func(childComplexity int) int
		ID                    func(childComplexity int) int
		Insights              func(childComplexity int) int
		IsFollowupRecommended func(childComplexity int) int
		MeetingSummary        func(childComplexity int) int
		ModifiedAt            func(childComplexity int) int
		ModifiedBy            func(childComplexity int) int
		NextSteps             func(childComplexity int) int
		TRBRequestID          func(childComplexity int) int
	}

	TRBGuidanceLetterInsight struct {
		Author       func(childComplexity int) int
		Category     func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		Insight      func(childComplexity int) int
		Links        func(childComplexity int) int
		ModifiedAt   func(childComplexity int) int
		ModifiedBy   func(childComplexity int) int
		TRBRequestID func(childComplexity int) int
		Title        func(childComplexity int) int
	}

	TRBRequest struct {
		AdminNotes         func(childComplexity int) int
		Archived           func(childComplexity int) int
		Attendees          func(childComplexity int) int
		ConsultMeetingTime func(childComplexity int) int
		ContractName       func(childComplexity int) int
		ContractNumbers    func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		Documents          func(childComplexity int) int
		Feedback           func(childComplexity int) int
		Form               func(childComplexity int) int
		GuidanceLetter     func(childComplexity int) int
		ID                 func(childComplexity int) int
		IsRecent           func(childComplexity int) int
		LastMeetingDate    func(childComplexity int) int
		ModifiedAt         func(childComplexity int) int
		ModifiedBy         func(childComplexity int) int
		Name               func(childComplexity int) int
		NextMeetingDate    func(childComplexity int) int
		RelatedIntakes     func(childComplexity int) int
		RelatedTRBRequests func(childComplexity int) int
		RelationType       func(childComplexity int) int
		RequesterComponent func(childComplexity int) int
		RequesterInfo      func(childComplexity int) int
		State              func(childComplexity int) int
		Status             func(childComplexity int) int
		Systems            func(childComplexity int) int
		TRBLead            func(childComplexity int) int
		TaskStatuses       func(childComplexity int) int
		TrbLeadInfo        func(childComplexity int) int
		Type               func(childComplexity int) int
	}

	TRBRequestAttendee struct {
		Component    func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		CreatedBy    func(childComplexity int) int
		EUAUserID    func(childComplexity int) int
		ID           func(childComplexity int) int
		ModifiedAt   func(childComplexity int) int
		ModifiedBy   func(childComplexity int) int
		Role         func(childComplexity int) int
		TRBRequestID func(childComplexity int) int
		UserInfo     func(childComplexity int) int
	}

	TRBRequestContractNumber struct {
		ContractNumber func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		ID             func(childComplexity int) int
		ModifiedAt     func(childComplexity int) int
		ModifiedBy     func(childComplexity int) int
		TRBRequestID   func(childComplexity int) int
	}

	TRBRequestDocument struct {
		DeletedAt    func(childComplexity int) int
		DocumentType func(childComplexity int) int
		FileName     func(childComplexity int) int
		ID           func(childComplexity int) int
		Status       func(childComplexity int) int
		URL          func(childComplexity int) int
		UploadedAt   func(childComplexity int) int
	}

	TRBRequestDocumentType struct {
		CommonType           func(childComplexity int) int
		OtherTypeDescription func(childComplexity int) int
	}

	TRBRequestFeedback struct {
		Action          func(childComplexity int) int
		Author          func(childComplexity int) int
		CopyTRBMailbox  func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		FeedbackMessage func(childComplexity int) int
		ID              func(childComplexity int) int
		ModifiedAt      func(childComplexity int) int
		ModifiedBy      func(childComplexity int) int
		NotifyEuaIds    func(childComplexity int) int
		TRBRequestID    func(childComplexity int) int
	}

	TRBRequestForm struct {
		CollabDateCloud                  func(childComplexity int) int
		CollabDateEnterpriseArchitecture func(childComplexity int) int
		CollabDateGovernanceReviewBoard  func(childComplexity int) int
		CollabDateOther                  func(childComplexity int) int
		CollabDatePrivacyAdvisor         func(childComplexity int) int
		CollabDateSecurity               func(childComplexity int) int
		CollabGRBConsultRequested        func(childComplexity int) int
		CollabGroupOther                 func(childComplexity int) int
		CollabGroups                     func(childComplexity int) int
		Component                        func(childComplexity int) int
		CreatedAt                        func(childComplexity int) int
		CreatedBy                        func(childComplexity int) int
		ExpectedEndDate                  func(childComplexity int) int
		ExpectedStartDate                func(childComplexity int) int
		FundingSources                   func(childComplexity int) int
		HasExpectedStartEndDates         func(childComplexity int) int
		HasSolutionInMind                func(childComplexity int) int
		ID                               func(childComplexity int) int
		ModifiedAt                       func(childComplexity int) int
		ModifiedBy                       func(childComplexity int) int
		NeedsAssistanceWith              func(childComplexity int) int
		ProposedSolution                 func(childComplexity int) int
		Status                           func(childComplexity int) int
		SubjectAreaOptionOther           func(childComplexity int) int
		SubjectAreaOptions               func(childComplexity int) int
		SubmittedAt                      func(childComplexity int) int
		SystemIntakes                    func(childComplexity int) int
		TRBRequestID                     func(childComplexity int) int
		WhereInProcess                   func(childComplexity int) int
		WhereInProcessOther              func(childComplexity int) int
	}

	TRBTaskStatuses struct {
		AttendConsultStatus          func(childComplexity int) int
		ConsultPrepStatus            func(childComplexity int) int
		FeedbackStatus               func(childComplexity int) int
		FormStatus                   func(childComplexity int) int
		GuidanceLetterStatus         func(childComplexity int) int
		GuidanceLetterStatusTaskList func(childComplexity int) int
	}

	UpdateSystemIntakePayload struct {
		SystemIntake func(childComplexity int) int
		UserErrors   func(childComplexity int) int
	}

	UserAccount struct {
		CommonName  func(childComplexity int) int
		Email       func(childComplexity int) int
		FamilyName  func(childComplexity int) int
		GivenName   func(childComplexity int) int
		HasLoggedIn func(childComplexity int) int
		ID          func(childComplexity int) int
		Locale      func(childComplexity int) int
		Username    func(childComplexity int) int
		ZoneInfo    func(childComplexity int) int
	}

	UserError struct {
		Message func(childComplexity int) int
		Path    func(childComplexity int) int
	}

	UserInfo struct {
		CommonName func(childComplexity int) int
		Email      func(childComplexity int) int
		EuaUserID  func(childComplexity int) int
		FirstName  func(childComplexity int) int
		LastName   func(childComplexity int) int
	}
}

type BusinessCaseResolver interface {
	AlternativeASolution(ctx context.Context, obj *models.BusinessCase) (*models.BusinessCaseSolution, error)
	AlternativeBSolution(ctx context.Context, obj *models.BusinessCase) (*models.BusinessCaseSolution, error)

	LifecycleCostLines(ctx context.Context, obj *models.BusinessCase) ([]*models.EstimatedLifecycleCost, error)
	PreferredSolution(ctx context.Context, obj *models.BusinessCase) (*models.BusinessCaseSolution, error)

	SystemIntake(ctx context.Context, obj *models.BusinessCase) (*models.SystemIntake, error)
}
type CedarBudgetSystemCostResolver interface {
	BudgetActualCost(ctx context.Context, obj *models.CedarBudgetSystemCost) ([]*models.CedarBudgetActualCost, error)
}
type CedarSoftwareProductsResolver interface {
	SoftwareProducts(ctx context.Context, obj *models.CedarSoftwareProducts) ([]*models.CedarSoftwareProductItem, error)
}
type CedarSystemResolver interface {
	BusinessOwnerRoles(ctx context.Context, obj *models.CedarSystem) ([]*models.CedarRole, error)

	IsBookmarked(ctx context.Context, obj *models.CedarSystem) (bool, error)
	LinkedTrbRequests(ctx context.Context, obj *models.CedarSystem, state models.TRBRequestState) ([]*models.TRBRequest, error)
	LinkedSystemIntakes(ctx context.Context, obj *models.CedarSystem, state models.SystemIntakeState) ([]*models.SystemIntake, error)
}
type CedarSystemDetailsResolver interface {
	SystemMaintainerInformation(ctx context.Context, obj *models.CedarSystemDetails) (*models.CedarSystemMaintainerInformation, error)
	BusinessOwnerInformation(ctx context.Context, obj *models.CedarSystemDetails) (*models.CedarBusinessOwnerInformation, error)
}
type GovernanceRequestFeedbackResolver interface {
	Author(ctx context.Context, obj *models.GovernanceRequestFeedback) (*models.UserInfo, error)
}
type ITGovTaskStatusesResolver interface {
	IntakeFormStatus(ctx context.Context, obj *models.ITGovTaskStatuses) (models.ITGovIntakeFormStatus, error)
	FeedbackFromInitialReviewStatus(ctx context.Context, obj *models.ITGovTaskStatuses) (models.ITGovFeedbackStatus, error)
	BizCaseDraftStatus(ctx context.Context, obj *models.ITGovTaskStatuses) (models.ITGovDraftBusinessCaseStatus, error)
	GrtMeetingStatus(ctx context.Context, obj *models.ITGovTaskStatuses) (models.ITGovGRTStatus, error)
	BizCaseFinalStatus(ctx context.Context, obj *models.ITGovTaskStatuses) (models.ITGovFinalBusinessCaseStatus, error)
	GrbMeetingStatus(ctx context.Context, obj *models.ITGovTaskStatuses) (models.ITGovGRBStatus, error)
	DecisionAndNextStepsStatus(ctx context.Context, obj *models.ITGovTaskStatuses) (models.ITGovDecisionStatus, error)
}
type MutationResolver interface {
	CreateSystemIntakeActionProgressToNewStep(ctx context.Context, input models.SystemIntakeProgressToNewStepsInput) (*models.UpdateSystemIntakePayload, error)
	CreateSystemIntakeActionRequestEdits(ctx context.Context, input models.SystemIntakeRequestEditsInput) (*models.UpdateSystemIntakePayload, error)
	CreateSystemIntakeActionExpireLcid(ctx context.Context, input models.SystemIntakeExpireLCIDInput) (*models.UpdateSystemIntakePayload, error)
	CreateSystemIntakeActionUpdateLcid(ctx context.Context, input models.SystemIntakeUpdateLCIDInput) (*models.UpdateSystemIntakePayload, error)
	CreateSystemIntakeActionRetireLcid(ctx context.Context, input models.SystemIntakeRetireLCIDInput) (*models.UpdateSystemIntakePayload, error)
	CreateSystemIntakeActionUnretireLcid(ctx context.Context, input models.SystemIntakeUnretireLCIDInput) (*models.UpdateSystemIntakePayload, error)
	CreateSystemIntakeActionChangeLCIDRetirementDate(ctx context.Context, input models.SystemIntakeChangeLCIDRetirementDateInput) (*models.UpdateSystemIntakePayload, error)
	CreateSystemIntakeActionConfirmLcid(ctx context.Context, input models.SystemIntakeConfirmLCIDInput) (*models.UpdateSystemIntakePayload, error)
	CreateSystemIntakeActionIssueLcid(ctx context.Context, input models.SystemIntakeIssueLCIDInput) (*models.UpdateSystemIntakePayload, error)
	CreateSystemIntakeActionRejectIntake(ctx context.Context, input models.SystemIntakeRejectIntakeInput) (*models.UpdateSystemIntakePayload, error)
	CreateSystemIntakeActionReopenRequest(ctx context.Context, input models.SystemIntakeReopenRequestInput) (*models.UpdateSystemIntakePayload, error)
	CreateSystemIntakeActionCloseRequest(ctx context.Context, input models.SystemIntakeCloseRequestInput) (*models.UpdateSystemIntakePayload, error)
	CreateSystemIntakeActionNotITGovRequest(ctx context.Context, input models.SystemIntakeNotITGovReqInput) (*models.UpdateSystemIntakePayload, error)
	CreateSystemIntakeNote(ctx context.Context, input models.CreateSystemIntakeNoteInput) (*models.SystemIntakeNote, error)
	UpdateSystemIntakeNote(ctx context.Context, input models.UpdateSystemIntakeNoteInput) (*models.SystemIntakeNote, error)
	CreateSystemIntake(ctx context.Context, input models.CreateSystemIntakeInput) (*models.SystemIntake, error)
	UpdateSystemIntakeRequestType(ctx context.Context, id uuid.UUID, newType models.SystemIntakeRequestType) (*models.SystemIntake, error)
	SubmitIntake(ctx context.Context, input models.SubmitIntakeInput) (*models.UpdateSystemIntakePayload, error)
	UpdateSystemIntakeAdminLead(ctx context.Context, input models.UpdateSystemIntakeAdminLeadInput) (*models.UpdateSystemIntakePayload, error)
	UpdateSystemIntakeReviewDates(ctx context.Context, input models.UpdateSystemIntakeReviewDatesInput) (*models.UpdateSystemIntakePayload, error)
	UpdateSystemIntakeContactDetails(ctx context.Context, input models.UpdateSystemIntakeContactDetailsInput) (*models.UpdateSystemIntakePayload, error)
	UpdateSystemIntakeRequestDetails(ctx context.Context, input models.UpdateSystemIntakeRequestDetailsInput) (*models.UpdateSystemIntakePayload, error)
	UpdateSystemIntakeContractDetails(ctx context.Context, input models.UpdateSystemIntakeContractDetailsInput) (*models.UpdateSystemIntakePayload, error)
	CreateCedarSystemBookmark(ctx context.Context, input models.CreateCedarSystemBookmarkInput) (*models.CreateCedarSystemBookmarkPayload, error)
	DeleteCedarSystemBookmark(ctx context.Context, input models.CreateCedarSystemBookmarkInput) (*models.DeleteCedarSystemBookmarkPayload, error)
	SetSystemIntakeRelationNewSystem(ctx context.Context, input *models.SetSystemIntakeRelationNewSystemInput) (*models.UpdateSystemIntakePayload, error)
	SetSystemIntakeRelationExistingSystem(ctx context.Context, input *models.SetSystemIntakeRelationExistingSystemInput) (*models.UpdateSystemIntakePayload, error)
	SetSystemIntakeRelationExistingService(ctx context.Context, input *models.SetSystemIntakeRelationExistingServiceInput) (*models.UpdateSystemIntakePayload, error)
	UnlinkSystemIntakeRelation(ctx context.Context, intakeID uuid.UUID) (*models.UpdateSystemIntakePayload, error)
	CreateSystemIntakeContact(ctx context.Context, input models.CreateSystemIntakeContactInput) (*models.CreateSystemIntakeContactPayload, error)
	UpdateSystemIntakeContact(ctx context.Context, input models.UpdateSystemIntakeContactInput) (*models.CreateSystemIntakeContactPayload, error)
	DeleteSystemIntakeContact(ctx context.Context, input models.DeleteSystemIntakeContactInput) (*models.DeleteSystemIntakeContactPayload, error)
	StartGRBReview(ctx context.Context, input models.StartGRBReviewInput) (*string, error)
	CreateSystemIntakeGRBReviewers(ctx context.Context, input models.CreateSystemIntakeGRBReviewersInput) (*models.CreateSystemIntakeGRBReviewersPayload, error)
	UpdateSystemIntakeGRBReviewer(ctx context.Context, input models.UpdateSystemIntakeGRBReviewerInput) (*models.SystemIntakeGRBReviewer, error)
	DeleteSystemIntakeGRBReviewer(ctx context.Context, input models.DeleteSystemIntakeGRBReviewerInput) (uuid.UUID, error)
	CastSystemIntakeGRBReviewerVote(ctx context.Context, input models.CastSystemIntakeGRBReviewerVoteInput) (*models.SystemIntakeGRBReviewer, error)
	CreateSystemIntakeGRBDiscussionPost(ctx context.Context, input models.CreateSystemIntakeGRBDiscussionPostInput) (*models.SystemIntakeGRBReviewDiscussionPost, error)
	CreateSystemIntakeGRBDiscussionReply(ctx context.Context, input models.CreateSystemIntakeGRBDiscussionReplyInput) (*models.SystemIntakeGRBReviewDiscussionPost, error)
	UpdateSystemIntakeGRBReviewType(ctx context.Context, input models.UpdateSystemIntakeGRBReviewTypeInput) (*models.UpdateSystemIntakePayload, error)
	UpdateSystemIntakeGRBReviewFormPresentationStandard(ctx context.Context, input models.UpdateSystemIntakeGRBReviewFormInputPresentationStandard) (*models.UpdateSystemIntakePayload, error)
	UpdateSystemIntakeGRBReviewFormPresentationAsync(ctx context.Context, input models.UpdateSystemIntakeGRBReviewFormInputPresentationAsync) (*models.UpdateSystemIntakePayload, error)
	UpdateSystemIntakeGRBReviewFormTimeframeAsync(ctx context.Context, input models.UpdateSystemIntakeGRBReviewFormInputTimeframeAsync) (*models.UpdateSystemIntakePayload, error)
	UpdateSystemIntakeLinkedCedarSystem(ctx context.Context, input models.UpdateSystemIntakeLinkedCedarSystemInput) (*models.UpdateSystemIntakePayload, error)
	SetSystemIntakeGRBPresentationLinks(ctx context.Context, input models.SystemIntakeGRBPresentationLinksInput) (*models.SystemIntakeGRBPresentationLinks, error)
	UploadSystemIntakeGRBPresentationDeck(ctx context.Context, input models.UploadSystemIntakeGRBPresentationDeckInput) (*models.SystemIntakeGRBPresentationLinks, error)
	DeleteSystemIntakeGRBPresentationLinks(ctx context.Context, input models.DeleteSystemIntakeGRBPresentationLinksInput) (uuid.UUID, error)
	ManuallyEndSystemIntakeGRBReviewAsyncVoting(ctx context.Context, systemIntakeID uuid.UUID) (*models.UpdateSystemIntakePayload, error)
	ArchiveSystemIntake(ctx context.Context, id uuid.UUID) (*models.SystemIntake, error)
	SendFeedbackEmail(ctx context.Context, input models.SendFeedbackEmailInput) (*string, error)
	SendCantFindSomethingEmail(ctx context.Context, input models.SendCantFindSomethingEmailInput) (*string, error)
	SendReportAProblemEmail(ctx context.Context, input models.SendReportAProblemEmailInput) (*string, error)
	CreateTRBRequest(ctx context.Context, requestType models.TRBRequestType) (*models.TRBRequest, error)
	UpdateTRBRequest(ctx context.Context, id uuid.UUID, changes map[string]interface{}) (*models.TRBRequest, error)
	CreateTRBRequestAttendee(ctx context.Context, input models.CreateTRBRequestAttendeeInput) (*models.TRBRequestAttendee, error)
	UpdateTRBRequestAttendee(ctx context.Context, input models.UpdateTRBRequestAttendeeInput) (*models.TRBRequestAttendee, error)
	DeleteTRBRequestAttendee(ctx context.Context, id uuid.UUID) (*models.TRBRequestAttendee, error)
	CreateTRBRequestDocument(ctx context.Context, input models.CreateTRBRequestDocumentInput) (*models.CreateTRBRequestDocumentPayload, error)
	DeleteTRBRequestDocument(ctx context.Context, id uuid.UUID) (*models.DeleteTRBRequestDocumentPayload, error)
	CreateSystemIntakeDocument(ctx context.Context, input models.CreateSystemIntakeDocumentInput) (*models.CreateSystemIntakeDocumentPayload, error)
	DeleteSystemIntakeDocument(ctx context.Context, id uuid.UUID) (*models.DeleteSystemIntakeDocumentPayload, error)
	UpdateTRBRequestForm(ctx context.Context, input map[string]interface{}) (*models.TRBRequestForm, error)
	UpdateTRBRequestFundingSources(ctx context.Context, input models.UpdateTRBRequestFundingSourcesInput) ([]*models.TRBFundingSource, error)
	DeleteTRBRequestFundingSources(ctx context.Context, input models.DeleteTRBRequestFundingSourcesInput) ([]*models.TRBFundingSource, error)
	SetRolesForUserOnSystem(ctx context.Context, input models.SetRolesForUserOnSystemInput) (*string, error)
	CreateTRBRequestFeedback(ctx context.Context, input models.CreateTRBRequestFeedbackInput) (*models.TRBRequestFeedback, error)
	UpdateTRBRequestConsultMeetingTime(ctx context.Context, input models.UpdateTRBRequestConsultMeetingTimeInput) (*models.TRBRequest, error)
	UpdateTRBRequestTRBLead(ctx context.Context, input models.UpdateTRBRequestTRBLeadInput) (*models.TRBRequest, error)
	SetTRBRequestRelationNewSystem(ctx context.Context, input models.SetTRBRequestRelationNewSystemInput) (*models.TRBRequest, error)
	SetTRBRequestRelationExistingSystem(ctx context.Context, input models.SetTRBRequestRelationExistingSystemInput) (*models.TRBRequest, error)
	SetTRBRequestRelationExistingService(ctx context.Context, input models.SetTRBRequestRelationExistingServiceInput) (*models.TRBRequest, error)
	UnlinkTRBRequestRelation(ctx context.Context, trbRequestID uuid.UUID) (*models.TRBRequest, error)
	CreateTRBAdminNoteGeneralRequest(ctx context.Context, input models.CreateTRBAdminNoteGeneralRequestInput) (*models.TRBAdminNote, error)
	CreateTRBAdminNoteInitialRequestForm(ctx context.Context, input models.CreateTRBAdminNoteInitialRequestFormInput) (*models.TRBAdminNote, error)
	CreateTRBAdminNoteSupportingDocuments(ctx context.Context, input models.CreateTRBAdminNoteSupportingDocumentsInput) (*models.TRBAdminNote, error)
	CreateTRBAdminNoteConsultSession(ctx context.Context, input models.CreateTRBAdminNoteConsultSessionInput) (*models.TRBAdminNote, error)
	CreateTRBAdminNoteGuidanceLetter(ctx context.Context, input models.CreateTRBAdminNoteGuidanceLetterInput) (*models.TRBAdminNote, error)
	SetTRBAdminNoteArchived(ctx context.Context, id uuid.UUID, isArchived bool) (*models.TRBAdminNote, error)
	CreateTRBGuidanceLetter(ctx context.Context, trbRequestID uuid.UUID) (*models.TRBGuidanceLetter, error)
	UpdateTRBGuidanceLetter(ctx context.Context, input map[string]interface{}) (*models.TRBGuidanceLetter, error)
	RequestReviewForTRBGuidanceLetter(ctx context.Context, id uuid.UUID) (*models.TRBGuidanceLetter, error)
	SendTRBGuidanceLetter(ctx context.Context, input models.SendTRBGuidanceLetterInput) (*models.TRBGuidanceLetter, error)
	CreateTRBGuidanceLetterInsight(ctx context.Context, input models.CreateTRBGuidanceLetterInsightInput) (*models.TRBGuidanceLetterInsight, error)
	UpdateTRBGuidanceLetterInsight(ctx context.Context, input map[string]interface{}) (*models.TRBGuidanceLetterInsight, error)
	UpdateTRBGuidanceLetterInsightOrder(ctx context.Context, input models.UpdateTRBGuidanceLetterInsightOrderInput) ([]*models.TRBGuidanceLetterInsight, error)
	DeleteTRBGuidanceLetterInsight(ctx context.Context, id uuid.UUID) (*models.TRBGuidanceLetterInsight, error)
	CloseTRBRequest(ctx context.Context, input models.CloseTRBRequestInput) (*models.TRBRequest, error)
	ReopenTrbRequest(ctx context.Context, input models.ReopenTRBRequestInput) (*models.TRBRequest, error)
	CreateTrbLeadOption(ctx context.Context, eua string) (*models.UserInfo, error)
	DeleteTrbLeadOption(ctx context.Context, eua string) (bool, error)
	SendGRBReviewPresentationDeckReminderEmail(ctx context.Context, systemIntakeID uuid.UUID) (bool, error)
}
type QueryResolver interface {
	SystemIntake(ctx context.Context, id uuid.UUID) (*models.SystemIntake, error)
	SystemIntakes(ctx context.Context, openRequests bool) ([]*models.SystemIntake, error)
	MySystemIntakes(ctx context.Context) ([]*models.SystemIntake, error)
	SystemIntakesWithReviewRequested(ctx context.Context) ([]*models.SystemIntake, error)
	SystemIntakesWithLcids(ctx context.Context) ([]*models.SystemIntake, error)
	CompareGRBReviewersByIntakeID(ctx context.Context, id uuid.UUID) ([]*models.GRBReviewerComparisonIntake, error)
	CurrentUser(ctx context.Context) (*models.CurrentUser, error)
	CedarAuthorityToOperate(ctx context.Context, cedarSystemID string) ([]*models.CedarAuthorityToOperate, error)
	CedarBudget(ctx context.Context, cedarSystemID string) ([]*models.CedarBudget, error)
	CedarBudgetSystemCost(ctx context.Context, cedarSystemID string) (*models.CedarBudgetSystemCost, error)
	CedarPersonsByCommonName(ctx context.Context, commonName string) ([]*models.UserInfo, error)
	CedarSoftwareProducts(ctx context.Context, cedarSystemID string) (*models.CedarSoftwareProducts, error)
	CedarSystem(ctx context.Context, cedarSystemID string) (*models.CedarSystem, error)
	CedarSystems(ctx context.Context) ([]*models.CedarSystem, error)
	CedarSubSystems(ctx context.Context, cedarSystemID string) ([]*models.CedarSubSystem, error)
	CedarContractsBySystem(ctx context.Context, cedarSystemID string) ([]*models.CedarContract, error)
	MyCedarSystems(ctx context.Context) ([]*models.CedarSystem, error)
	CedarSystemBookmarks(ctx context.Context) ([]*models.CedarSystemBookmark, error)
	CedarThreat(ctx context.Context, cedarSystemID string) ([]*models.CedarThreat, error)
	Deployments(ctx context.Context, cedarSystemID string, deploymentType *string, state *string, status *string) ([]*models.CedarDeployment, error)
	RoleTypes(ctx context.Context) ([]*models.CedarRoleType, error)
	Roles(ctx context.Context, cedarSystemID string, roleTypeID *string) ([]*models.CedarRole, error)
	Exchanges(ctx context.Context, cedarSystemID string) ([]*models.CedarExchange, error)
	Urls(ctx context.Context, cedarSystemID string) ([]*models.CedarURL, error)
	CedarSystemDetails(ctx context.Context, cedarSystemID string) (*models.CedarSystemDetails, error)
	SystemIntakeContacts(ctx context.Context, id uuid.UUID) (*models.SystemIntakeContactsPayload, error)
	TrbRequest(ctx context.Context, id uuid.UUID) (*models.TRBRequest, error)
	TrbRequests(ctx context.Context, archived bool) ([]*models.TRBRequest, error)
	MyTrbRequests(ctx context.Context, archived bool) ([]*models.TRBRequest, error)
	TrbLeadOptions(ctx context.Context) ([]*models.UserInfo, error)
	TrbAdminNote(ctx context.Context, id uuid.UUID) (*models.TRBAdminNote, error)
	UserAccount(ctx context.Context, username string) (*authentication.UserAccount, error)
}
type SystemIntakeResolver interface {
	Actions(ctx context.Context, obj *models.SystemIntake) ([]*models.SystemIntakeAction, error)

	BusinessCase(ctx context.Context, obj *models.SystemIntake) (*models.BusinessCase, error)

	BusinessOwner(ctx context.Context, obj *models.SystemIntake) (*models.SystemIntakeBusinessOwner, error)
	BusinessSolution(ctx context.Context, obj *models.SystemIntake) (*string, error)
	Contract(ctx context.Context, obj *models.SystemIntake) (*models.SystemIntakeContract, error)
	Costs(ctx context.Context, obj *models.SystemIntake) (*models.SystemIntakeCosts, error)
	AnnualSpending(ctx context.Context, obj *models.SystemIntake) (*models.SystemIntakeAnnualSpending, error)

	CurrentStage(ctx context.Context, obj *models.SystemIntake) (*string, error)

	FundingSources(ctx context.Context, obj *models.SystemIntake) ([]*models.SystemIntakeFundingSource, error)
	GovernanceRequestFeedbacks(ctx context.Context, obj *models.SystemIntake) ([]*models.GovernanceRequestFeedback, error)
	GovernanceTeams(ctx context.Context, obj *models.SystemIntake) (*models.SystemIntakeGovernanceTeam, error)

	LastMeetingDate(ctx context.Context, obj *models.SystemIntake) (*time.Time, error)
	NextMeetingDate(ctx context.Context, obj *models.SystemIntake) (*time.Time, error)

	GrbReviewers(ctx context.Context, obj *models.SystemIntake) ([]*models.SystemIntakeGRBReviewer, error)
	GrbVotingInformation(ctx context.Context, obj *models.SystemIntake) (*models.GRBVotingInformation, error)

	Isso(ctx context.Context, obj *models.SystemIntake) (*models.SystemIntakeIsso, error)
	Lcid(ctx context.Context, obj *models.SystemIntake) (*string, error)

	LcidScope(ctx context.Context, obj *models.SystemIntake) (*models.HTML, error)
	LcidCostBaseline(ctx context.Context, obj *models.SystemIntake) (*string, error)

	NeedsEaSupport(ctx context.Context, obj *models.SystemIntake) (*bool, error)

	AcquisitionMethods(ctx context.Context, obj *models.SystemIntake) ([]models.SystemIntakeSoftwareAcquisitionMethods, error)
	Notes(ctx context.Context, obj *models.SystemIntake) ([]*models.SystemIntakeNote, error)

	ProductManager(ctx context.Context, obj *models.SystemIntake) (*models.SystemIntakeProductManager, error)

	RequestName(ctx context.Context, obj *models.SystemIntake) (*string, error)

	Requester(ctx context.Context, obj *models.SystemIntake) (*models.SystemIntakeRequester, error)
	RequesterName(ctx context.Context, obj *models.SystemIntake) (*string, error)
	RequesterComponent(ctx context.Context, obj *models.SystemIntake) (*string, error)

	Documents(ctx context.Context, obj *models.SystemIntake) ([]*models.SystemIntakeDocument, error)

	ItGovTaskStatuses(ctx context.Context, obj *models.SystemIntake) (*models.ITGovTaskStatuses, error)

	StatusRequester(ctx context.Context, obj *models.SystemIntake) (models.SystemIntakeStatusRequester, error)
	StatusAdmin(ctx context.Context, obj *models.SystemIntake) (models.SystemIntakeStatusAdmin, error)
	LcidStatus(ctx context.Context, obj *models.SystemIntake) (*models.SystemIntakeLCIDStatus, error)

	RelationType(ctx context.Context, obj *models.SystemIntake) (*models.RequestRelationType, error)
	Systems(ctx context.Context, obj *models.SystemIntake) ([]*models.CedarSystem, error)
	ContractNumbers(ctx context.Context, obj *models.SystemIntake) ([]*models.SystemIntakeContractNumber, error)
	RelatedIntakes(ctx context.Context, obj *models.SystemIntake) ([]*models.SystemIntake, error)
	RelatedTRBRequests(ctx context.Context, obj *models.SystemIntake) ([]*models.TRBRequest, error)
	GrbDiscussions(ctx context.Context, obj *models.SystemIntake) ([]*models.SystemIntakeGRBReviewDiscussion, error)
	GrbPresentationLinks(ctx context.Context, obj *models.SystemIntake) (*models.SystemIntakeGRBPresentationLinks, error)

	GrbReviewAsyncStatus(ctx context.Context, obj *models.SystemIntake) (*models.SystemIntakeGRBReviewAsyncStatusType, error)
}
type SystemIntakeDocumentResolver interface {
	DocumentType(ctx context.Context, obj *models.SystemIntakeDocument) (*models.SystemIntakeDocumentType, error)

	Status(ctx context.Context, obj *models.SystemIntakeDocument) (models.SystemIntakeDocumentStatus, error)

	UploadedAt(ctx context.Context, obj *models.SystemIntakeDocument) (*time.Time, error)
	URL(ctx context.Context, obj *models.SystemIntakeDocument) (*string, error)
	CanDelete(ctx context.Context, obj *models.SystemIntakeDocument) (bool, error)
	CanView(ctx context.Context, obj *models.SystemIntakeDocument) (bool, error)
}
type SystemIntakeGRBPresentationLinksResolver interface {
	TranscriptFileURL(ctx context.Context, obj *models.SystemIntakeGRBPresentationLinks) (*string, error)
	TranscriptFileStatus(ctx context.Context, obj *models.SystemIntakeGRBPresentationLinks) (*models.SystemIntakeDocumentStatus, error)

	PresentationDeckFileURL(ctx context.Context, obj *models.SystemIntakeGRBPresentationLinks) (*string, error)
	PresentationDeckFileStatus(ctx context.Context, obj *models.SystemIntakeGRBPresentationLinks) (*models.SystemIntakeDocumentStatus, error)
}
type SystemIntakeGRBReviewerResolver interface {
	VotingRole(ctx context.Context, obj *models.SystemIntakeGRBReviewer) (models.SystemIntakeGRBReviewerVotingRole, error)

	GrbRole(ctx context.Context, obj *models.SystemIntakeGRBReviewer) (models.SystemIntakeGRBReviewerRole, error)
}
type SystemIntakeNoteResolver interface {
	Author(ctx context.Context, obj *models.SystemIntakeNote) (*models.SystemIntakeNoteAuthor, error)

	Editor(ctx context.Context, obj *models.SystemIntakeNote) (*models.UserInfo, error)
}
type TRBAdminNoteResolver interface {
	Author(ctx context.Context, obj *models.TRBAdminNote) (*models.UserInfo, error)

	CategorySpecificData(ctx context.Context, obj *models.TRBAdminNote) (models.TRBAdminNoteCategorySpecificData, error)
}
type TRBGuidanceLetterResolver interface {
	Author(ctx context.Context, obj *models.TRBGuidanceLetter) (*models.UserInfo, error)

	Insights(ctx context.Context, obj *models.TRBGuidanceLetter) ([]*models.TRBGuidanceLetterInsight, error)
}
type TRBGuidanceLetterInsightResolver interface {
	Links(ctx context.Context, obj *models.TRBGuidanceLetterInsight) ([]string, error)
	Author(ctx context.Context, obj *models.TRBGuidanceLetterInsight) (*models.UserInfo, error)
}
type TRBRequestResolver interface {
	Status(ctx context.Context, obj *models.TRBRequest) (models.TRBRequestStatus, error)
	Attendees(ctx context.Context, obj *models.TRBRequest) ([]*models.TRBRequestAttendee, error)
	Feedback(ctx context.Context, obj *models.TRBRequest) ([]*models.TRBRequestFeedback, error)
	Documents(ctx context.Context, obj *models.TRBRequest) ([]*models.TRBRequestDocument, error)
	Form(ctx context.Context, obj *models.TRBRequest) (*models.TRBRequestForm, error)
	GuidanceLetter(ctx context.Context, obj *models.TRBRequest) (*models.TRBGuidanceLetter, error)
	TaskStatuses(ctx context.Context, obj *models.TRBRequest) (*models.TRBTaskStatuses, error)

	LastMeetingDate(ctx context.Context, obj *models.TRBRequest) (*time.Time, error)
	NextMeetingDate(ctx context.Context, obj *models.TRBRequest) (*time.Time, error)

	TrbLeadInfo(ctx context.Context, obj *models.TRBRequest) (*models.UserInfo, error)
	RequesterInfo(ctx context.Context, obj *models.TRBRequest) (*models.UserInfo, error)
	RequesterComponent(ctx context.Context, obj *models.TRBRequest) (*string, error)
	AdminNotes(ctx context.Context, obj *models.TRBRequest) ([]*models.TRBAdminNote, error)
	IsRecent(ctx context.Context, obj *models.TRBRequest) (bool, error)

	RelationType(ctx context.Context, obj *models.TRBRequest) (*models.RequestRelationType, error)
	ContractNumbers(ctx context.Context, obj *models.TRBRequest) ([]*models.TRBRequestContractNumber, error)
	Systems(ctx context.Context, obj *models.TRBRequest) ([]*models.CedarSystem, error)
	RelatedIntakes(ctx context.Context, obj *models.TRBRequest) ([]*models.SystemIntake, error)
	RelatedTRBRequests(ctx context.Context, obj *models.TRBRequest) ([]*models.TRBRequest, error)
}
type TRBRequestAttendeeResolver interface {
	UserInfo(ctx context.Context, obj *models.TRBRequestAttendee) (*models.UserInfo, error)
}
type TRBRequestDocumentResolver interface {
	DocumentType(ctx context.Context, obj *models.TRBRequestDocument) (*models.TRBRequestDocumentType, error)

	Status(ctx context.Context, obj *models.TRBRequestDocument) (models.TRBRequestDocumentStatus, error)
	UploadedAt(ctx context.Context, obj *models.TRBRequestDocument) (*time.Time, error)
	URL(ctx context.Context, obj *models.TRBRequestDocument) (string, error)
}
type TRBRequestFeedbackResolver interface {
	NotifyEuaIds(ctx context.Context, obj *models.TRBRequestFeedback) ([]string, error)

	Author(ctx context.Context, obj *models.TRBRequestFeedback) (*models.UserInfo, error)
}
type TRBRequestFormResolver interface {
	CollabGroups(ctx context.Context, obj *models.TRBRequestForm) ([]models.TRBCollabGroupOption, error)

	FundingSources(ctx context.Context, obj *models.TRBRequestForm) ([]*models.TRBFundingSource, error)
	SystemIntakes(ctx context.Context, obj *models.TRBRequestForm) ([]*models.SystemIntake, error)
	SubjectAreaOptions(ctx context.Context, obj *models.TRBRequestForm) ([]models.TRBSubjectAreaOption, error)
}
type UserInfoResolver interface {
	CommonName(ctx context.Context, obj *models.UserInfo) (string, error)

	EuaUserID(ctx context.Context, obj *models.UserInfo) (string, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "AugmentedSystemIntakeContact.commonName":
		if e.complexity.AugmentedSystemIntakeContact.CommonName == nil {
			break
		}

		return e.complexity.AugmentedSystemIntakeContact.CommonName(childComplexity), true

	case "AugmentedSystemIntakeContact.component":
		if e.complexity.AugmentedSystemIntakeContact.Component == nil {
			break
		}

		return e.complexity.AugmentedSystemIntakeContact.Component(childComplexity), true

	case "AugmentedSystemIntakeContact.euaUserId":
		if e.complexity.AugmentedSystemIntakeContact.EUAUserID == nil {
			break
		}

		return e.complexity.AugmentedSystemIntakeContact.EUAUserID(childComplexity), true

	case "AugmentedSystemIntakeContact.email":
		if e.complexity.AugmentedSystemIntakeContact.Email == nil {
			break
		}

		return e.complexity.AugmentedSystemIntakeContact.Email(childComplexity), true

	case "AugmentedSystemIntakeContact.id":
		if e.complexity.AugmentedSystemIntakeContact.ID == nil {
			break
		}

		return e.complexity.AugmentedSystemIntakeContact.ID(childComplexity), true

	case "AugmentedSystemIntakeContact.role":
		if e.complexity.AugmentedSystemIntakeContact.Role == nil {
			break
		}

		return e.complexity.AugmentedSystemIntakeContact.Role(childComplexity), true

	case "AugmentedSystemIntakeContact.systemIntakeId":
		if e.complexity.AugmentedSystemIntakeContact.SystemIntakeID == nil {
			break
		}

		return e.complexity.AugmentedSystemIntakeContact.SystemIntakeID(childComplexity), true

	case "BusinessCase.alternativeASolution":
		if e.complexity.BusinessCase.AlternativeASolution == nil {
			break
		}

		return e.complexity.BusinessCase.AlternativeASolution(childComplexity), true

	case "BusinessCase.alternativeBSolution":
		if e.complexity.BusinessCase.AlternativeBSolution == nil {
			break
		}

		return e.complexity.BusinessCase.AlternativeBSolution(childComplexity), true

	case "BusinessCase.businessNeed":
		if e.complexity.BusinessCase.BusinessNeed == nil {
			break
		}

		return e.complexity.BusinessCase.BusinessNeed(childComplexity), true

	case "BusinessCase.businessOwner":
		if e.complexity.BusinessCase.BusinessOwner == nil {
			break
		}

		return e.complexity.BusinessCase.BusinessOwner(childComplexity), true

	case "BusinessCase.cmsBenefit":
		if e.complexity.BusinessCase.CMSBenefit == nil {
			break
		}

		return e.complexity.BusinessCase.CMSBenefit(childComplexity), true

	case "BusinessCase.createdAt":
		if e.complexity.BusinessCase.CreatedAt == nil {
			break
		}

		return e.complexity.BusinessCase.CreatedAt(childComplexity), true

	case "BusinessCase.currentSolutionSummary":
		if e.complexity.BusinessCase.CurrentSolutionSummary == nil {
			break
		}

		return e.complexity.BusinessCase.CurrentSolutionSummary(childComplexity), true

	case "BusinessCase.euaUserId":
		if e.complexity.BusinessCase.EUAUserID == nil {
			break
		}

		return e.complexity.BusinessCase.EUAUserID(childComplexity), true

	case "BusinessCase.id":
		if e.complexity.BusinessCase.ID == nil {
			break
		}

		return e.complexity.BusinessCase.ID(childComplexity), true

	case "BusinessCase.lifecycleCostLines":
		if e.complexity.BusinessCase.LifecycleCostLines == nil {
			break
		}

		return e.complexity.BusinessCase.LifecycleCostLines(childComplexity), true

	case "BusinessCase.preferredSolution":
		if e.complexity.BusinessCase.PreferredSolution == nil {
			break
		}

		return e.complexity.BusinessCase.PreferredSolution(childComplexity), true

	case "BusinessCase.priorityAlignment":
		if e.complexity.BusinessCase.PriorityAlignment == nil {
			break
		}

		return e.complexity.BusinessCase.PriorityAlignment(childComplexity), true

	case "BusinessCase.projectName":
		if e.complexity.BusinessCase.ProjectName == nil {
			break
		}

		return e.complexity.BusinessCase.ProjectName(childComplexity), true

	case "BusinessCase.requester":
		if e.complexity.BusinessCase.Requester == nil {
			break
		}

		return e.complexity.BusinessCase.Requester(childComplexity), true

	case "BusinessCase.requesterPhoneNumber":
		if e.complexity.BusinessCase.RequesterPhoneNumber == nil {
			break
		}

		return e.complexity.BusinessCase.RequesterPhoneNumber(childComplexity), true

	case "BusinessCase.status":
		if e.complexity.BusinessCase.Status == nil {
			break
		}

		return e.complexity.BusinessCase.Status(childComplexity), true

	case "BusinessCase.successIndicators":
		if e.complexity.BusinessCase.SuccessIndicators == nil {
			break
		}

		return e.complexity.BusinessCase.SuccessIndicators(childComplexity), true

	case "BusinessCase.systemIntake":
		if e.complexity.BusinessCase.SystemIntake == nil {
			break
		}

		return e.complexity.BusinessCase.SystemIntake(childComplexity), true

	case "BusinessCase.updatedAt":
		if e.complexity.BusinessCase.UpdatedAt == nil {
			break
		}

		return e.complexity.BusinessCase.UpdatedAt(childComplexity), true

	case "BusinessCaseSolution.acquisitionApproach":
		if e.complexity.BusinessCaseSolution.AcquisitionApproach == nil {
			break
		}

		return e.complexity.BusinessCaseSolution.AcquisitionApproach(childComplexity), true

	case "BusinessCaseSolution.cons":
		if e.complexity.BusinessCaseSolution.Cons == nil {
			break
		}

		return e.complexity.BusinessCaseSolution.Cons(childComplexity), true

	case "BusinessCaseSolution.costSavings":
		if e.complexity.BusinessCaseSolution.CostSavings == nil {
			break
		}

		return e.complexity.BusinessCaseSolution.CostSavings(childComplexity), true

	case "BusinessCaseSolution.hasUi":
		if e.complexity.BusinessCaseSolution.HasUI == nil {
			break
		}

		return e.complexity.BusinessCaseSolution.HasUI(childComplexity), true

	case "BusinessCaseSolution.hostingCloudServiceType":
		if e.complexity.BusinessCaseSolution.HostingCloudServiceType == nil {
			break
		}

		return e.complexity.BusinessCaseSolution.HostingCloudServiceType(childComplexity), true

	case "BusinessCaseSolution.hostingLocation":
		if e.complexity.BusinessCaseSolution.HostingLocation == nil {
			break
		}

		return e.complexity.BusinessCaseSolution.HostingLocation(childComplexity), true

	case "BusinessCaseSolution.hostingType":
		if e.complexity.BusinessCaseSolution.HostingType == nil {
			break
		}

		return e.complexity.BusinessCaseSolution.HostingType(childComplexity), true

	case "BusinessCaseSolution.pros":
		if e.complexity.BusinessCaseSolution.Pros == nil {
			break
		}

		return e.complexity.BusinessCaseSolution.Pros(childComplexity), true

	case "BusinessCaseSolution.securityIsApproved":
		if e.complexity.BusinessCaseSolution.SecurityIsApproved == nil {
			break
		}

		return e.complexity.BusinessCaseSolution.SecurityIsApproved(childComplexity), true

	case "BusinessCaseSolution.securityIsBeingReviewed":
		if e.complexity.BusinessCaseSolution.SecurityIsBeingReviewed == nil {
			break
		}

		return e.complexity.BusinessCaseSolution.SecurityIsBeingReviewed(childComplexity), true

	case "BusinessCaseSolution.summary":
		if e.complexity.BusinessCaseSolution.Summary == nil {
			break
		}

		return e.complexity.BusinessCaseSolution.Summary(childComplexity), true

	case "BusinessCaseSolution.title":
		if e.complexity.BusinessCaseSolution.Title == nil {
			break
		}

		return e.complexity.BusinessCaseSolution.Title(childComplexity), true

	case "CedarAuthorityToOperate.actualDispositionDate":
		if e.complexity.CedarAuthorityToOperate.ActualDispositionDate == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.ActualDispositionDate(childComplexity), true

	case "CedarAuthorityToOperate.cedarId":
		if e.complexity.CedarAuthorityToOperate.CedarID == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.CedarID(childComplexity), true

	case "CedarAuthorityToOperate.containsPersonallyIdentifiableInformation":
		if e.complexity.CedarAuthorityToOperate.ContainsPersonallyIdentifiableInformation == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.ContainsPersonallyIdentifiableInformation(childComplexity), true

	case "CedarAuthorityToOperate.countOfOpenPoams":
		if e.complexity.CedarAuthorityToOperate.CountOfOpenPoams == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.CountOfOpenPoams(childComplexity), true

	case "CedarAuthorityToOperate.countOfTotalNonPrivilegedUserPopulation":
		if e.complexity.CedarAuthorityToOperate.CountOfTotalNonPrivilegedUserPopulation == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.CountOfTotalNonPrivilegedUserPopulation(childComplexity), true

	case "CedarAuthorityToOperate.countOfTotalPrivilegedUserPopulation":
		if e.complexity.CedarAuthorityToOperate.CountOfTotalPrivilegedUserPopulation == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.CountOfTotalPrivilegedUserPopulation(childComplexity), true

	case "CedarAuthorityToOperate.dateAuthorizationMemoExpires":
		if e.complexity.CedarAuthorityToOperate.DateAuthorizationMemoExpires == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.DateAuthorizationMemoExpires(childComplexity), true

	case "CedarAuthorityToOperate.dateAuthorizationMemoSigned":
		if e.complexity.CedarAuthorityToOperate.DateAuthorizationMemoSigned == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.DateAuthorizationMemoSigned(childComplexity), true

	case "CedarAuthorityToOperate.eAuthenticationLevel":
		if e.complexity.CedarAuthorityToOperate.EAuthenticationLevel == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.EAuthenticationLevel(childComplexity), true

	case "CedarAuthorityToOperate.fips199OverallImpactRating":
		if e.complexity.CedarAuthorityToOperate.Fips199OverallImpactRating == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.Fips199OverallImpactRating(childComplexity), true

	case "CedarAuthorityToOperate.fismaSystemAcronym":
		if e.complexity.CedarAuthorityToOperate.FismaSystemAcronym == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.FismaSystemAcronym(childComplexity), true

	case "CedarAuthorityToOperate.fismaSystemName":
		if e.complexity.CedarAuthorityToOperate.FismaSystemName == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.FismaSystemName(childComplexity), true

	case "CedarAuthorityToOperate.isAccessedByNonOrganizationalUsers":
		if e.complexity.CedarAuthorityToOperate.IsAccessedByNonOrganizationalUsers == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.IsAccessedByNonOrganizationalUsers(childComplexity), true

	case "CedarAuthorityToOperate.isPiiLimitedToUserNameAndPass":
		if e.complexity.CedarAuthorityToOperate.IsPiiLimitedToUserNameAndPass == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.IsPiiLimitedToUserNameAndPass(childComplexity), true

	case "CedarAuthorityToOperate.isProtectedHealthInformation":
		if e.complexity.CedarAuthorityToOperate.IsProtectedHealthInformation == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.IsProtectedHealthInformation(childComplexity), true

	case "CedarAuthorityToOperate.lastActScaDate":
		if e.complexity.CedarAuthorityToOperate.LastActScaDate == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.LastActScaDate(childComplexity), true

	case "CedarAuthorityToOperate.lastAssessmentDate":
		if e.complexity.CedarAuthorityToOperate.LastAssessmentDate == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.LastAssessmentDate(childComplexity), true

	case "CedarAuthorityToOperate.lastContingencyPlanCompletionDate":
		if e.complexity.CedarAuthorityToOperate.LastContingencyPlanCompletionDate == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.LastContingencyPlanCompletionDate(childComplexity), true

	case "CedarAuthorityToOperate.lastPenTestDate":
		if e.complexity.CedarAuthorityToOperate.LastPenTestDate == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.LastPenTestDate(childComplexity), true

	case "CedarAuthorityToOperate.piaCompletionDate":
		if e.complexity.CedarAuthorityToOperate.PiaCompletionDate == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.PiaCompletionDate(childComplexity), true

	case "CedarAuthorityToOperate.primaryCyberRiskAdvisor":
		if e.complexity.CedarAuthorityToOperate.PrimaryCyberRiskAdvisor == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.PrimaryCyberRiskAdvisor(childComplexity), true

	case "CedarAuthorityToOperate.privacySubjectMatterExpert":
		if e.complexity.CedarAuthorityToOperate.PrivacySubjectMatterExpert == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.PrivacySubjectMatterExpert(childComplexity), true

	case "CedarAuthorityToOperate.recoveryPointObjective":
		if e.complexity.CedarAuthorityToOperate.RecoveryPointObjective == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.RecoveryPointObjective(childComplexity), true

	case "CedarAuthorityToOperate.recoveryTimeObjective":
		if e.complexity.CedarAuthorityToOperate.RecoveryTimeObjective == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.RecoveryTimeObjective(childComplexity), true

	case "CedarAuthorityToOperate.systemOfRecordsNotice":
		if e.complexity.CedarAuthorityToOperate.SystemOfRecordsNotice == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.SystemOfRecordsNotice(childComplexity), true

	case "CedarAuthorityToOperate.tlcPhase":
		if e.complexity.CedarAuthorityToOperate.TLCPhase == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.TLCPhase(childComplexity), true

	case "CedarAuthorityToOperate.uuid":
		if e.complexity.CedarAuthorityToOperate.UUID == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.UUID(childComplexity), true

	case "CedarAuthorityToOperate.xlcPhase":
		if e.complexity.CedarAuthorityToOperate.XLCPhase == nil {
			break
		}

		return e.complexity.CedarAuthorityToOperate.XLCPhase(childComplexity), true

	case "CedarBudget.fiscalYear":
		if e.complexity.CedarBudget.FiscalYear == nil {
			break
		}

		return e.complexity.CedarBudget.FiscalYear(childComplexity), true

	case "CedarBudget.funding":
		if e.complexity.CedarBudget.Funding == nil {
			break
		}

		return e.complexity.CedarBudget.Funding(childComplexity), true

	case "CedarBudget.fundingId":
		if e.complexity.CedarBudget.FundingID == nil {
			break
		}

		return e.complexity.CedarBudget.FundingID(childComplexity), true

	case "CedarBudget.fundingSource":
		if e.complexity.CedarBudget.FundingSource == nil {
			break
		}

		return e.complexity.CedarBudget.FundingSource(childComplexity), true

	case "CedarBudget.id":
		if e.complexity.CedarBudget.ID == nil {
			break
		}

		return e.complexity.CedarBudget.ID(childComplexity), true

	case "CedarBudget.name":
		if e.complexity.CedarBudget.Name == nil {
			break
		}

		return e.complexity.CedarBudget.Name(childComplexity), true

	case "CedarBudget.projectId":
		if e.complexity.CedarBudget.ProjectID == nil {
			break
		}

		return e.complexity.CedarBudget.ProjectID(childComplexity), true

	case "CedarBudget.projectTitle":
		if e.complexity.CedarBudget.ProjectTitle == nil {
			break
		}

		return e.complexity.CedarBudget.ProjectTitle(childComplexity), true

	case "CedarBudget.systemId":
		if e.complexity.CedarBudget.SystemID == nil {
			break
		}

		return e.complexity.CedarBudget.SystemID(childComplexity), true

	case "CedarBudgetActualCost.actualSystemCost":
		if e.complexity.CedarBudgetActualCost.ActualSystemCost == nil {
			break
		}

		return e.complexity.CedarBudgetActualCost.ActualSystemCost(childComplexity), true

	case "CedarBudgetActualCost.fiscalYear":
		if e.complexity.CedarBudgetActualCost.FiscalYear == nil {
			break
		}

		return e.complexity.CedarBudgetActualCost.FiscalYear(childComplexity), true

	case "CedarBudgetActualCost.systemId":
		if e.complexity.CedarBudgetActualCost.SystemID == nil {
			break
		}

		return e.complexity.CedarBudgetActualCost.SystemID(childComplexity), true

	case "CedarBudgetSystemCost.budgetActualCost":
		if e.complexity.CedarBudgetSystemCost.BudgetActualCost == nil {
			break
		}

		return e.complexity.CedarBudgetSystemCost.BudgetActualCost(childComplexity), true

	case "CedarBusinessOwnerInformation.beneficiaryAddressPurpose":
		if e.complexity.CedarBusinessOwnerInformation.BeneficiaryAddressPurpose == nil {
			break
		}

		return e.complexity.CedarBusinessOwnerInformation.BeneficiaryAddressPurpose(childComplexity), true

	case "CedarBusinessOwnerInformation.beneficiaryAddressPurposeOther":
		if e.complexity.CedarBusinessOwnerInformation.BeneficiaryAddressPurposeOther == nil {
			break
		}

		return e.complexity.CedarBusinessOwnerInformation.BeneficiaryAddressPurposeOther(childComplexity), true

	case "CedarBusinessOwnerInformation.beneficiaryAddressSource":
		if e.complexity.CedarBusinessOwnerInformation.BeneficiaryAddressSource == nil {
			break
		}

		return e.complexity.CedarBusinessOwnerInformation.BeneficiaryAddressSource(childComplexity), true

	case "CedarBusinessOwnerInformation.beneficiaryAddressSourceOther":
		if e.complexity.CedarBusinessOwnerInformation.BeneficiaryAddressSourceOther == nil {
			break
		}

		return e.complexity.CedarBusinessOwnerInformation.BeneficiaryAddressSourceOther(childComplexity), true

	case "CedarBusinessOwnerInformation.beneficiaryInformation":
		if e.complexity.CedarBusinessOwnerInformation.BeneficiaryInformation == nil {
			break
		}

		return e.complexity.CedarBusinessOwnerInformation.BeneficiaryInformation(childComplexity), true

	case "CedarBusinessOwnerInformation.costPerYear":
		if e.complexity.CedarBusinessOwnerInformation.CostPerYear == nil {
			break
		}

		return e.complexity.CedarBusinessOwnerInformation.CostPerYear(childComplexity), true

	case "CedarBusinessOwnerInformation.editBeneficiaryInformation":
		if e.complexity.CedarBusinessOwnerInformation.EditBeneficiaryInformation == nil {
			break
		}

		return e.complexity.CedarBusinessOwnerInformation.EditBeneficiaryInformation(childComplexity), true

	case "CedarBusinessOwnerInformation.isCmsOwned":
		if e.complexity.CedarBusinessOwnerInformation.IsCmsOwned == nil {
			break
		}

		return e.complexity.CedarBusinessOwnerInformation.IsCmsOwned(childComplexity), true

	case "CedarBusinessOwnerInformation.nr508UserInterface":
		if e.complexity.CedarBusinessOwnerInformation.Nr508UserInterface == nil {
			break
		}

		return e.complexity.CedarBusinessOwnerInformation.Nr508UserInterface(childComplexity), true

	case "CedarBusinessOwnerInformation.numberOfContractorFte":
		if e.complexity.CedarBusinessOwnerInformation.NumberOfContractorFte == nil {
			break
		}

		return e.complexity.CedarBusinessOwnerInformation.NumberOfContractorFte(childComplexity), true

	case "CedarBusinessOwnerInformation.numberOfFederalFte":
		if e.complexity.CedarBusinessOwnerInformation.NumberOfFederalFte == nil {
			break
		}

		return e.complexity.CedarBusinessOwnerInformation.NumberOfFederalFte(childComplexity), true

	case "CedarBusinessOwnerInformation.numberOfSupportedUsersPerMonth":
		if e.complexity.CedarBusinessOwnerInformation.NumberOfSupportedUsersPerMonth == nil {
			break
		}

		return e.complexity.CedarBusinessOwnerInformation.NumberOfSupportedUsersPerMonth(childComplexity), true

	case "CedarBusinessOwnerInformation.storesBankingData":
		if e.complexity.CedarBusinessOwnerInformation.StoresBankingData == nil {
			break
		}

		return e.complexity.CedarBusinessOwnerInformation.StoresBankingData(childComplexity), true

	case "CedarBusinessOwnerInformation.storesBeneficiaryAddress":
		if e.complexity.CedarBusinessOwnerInformation.StoresBeneficiaryAddress == nil {
			break
		}

		return e.complexity.CedarBusinessOwnerInformation.StoresBeneficiaryAddress(childComplexity), true

	case "CedarContract.contractName":
		if e.complexity.CedarContract.ContractName == nil {
			break
		}

		return e.complexity.CedarContract.ContractName(childComplexity), true

	case "CedarContract.contractNumber":
		if e.complexity.CedarContract.ContractNumber == nil {
			break
		}

		return e.complexity.CedarContract.ContractNumber(childComplexity), true

	case "CedarContract.description":
		if e.complexity.CedarContract.Description == nil {
			break
		}

		return e.complexity.CedarContract.Description(childComplexity), true

	case "CedarContract.endDate":
		if e.complexity.CedarContract.EndDate == nil {
			break
		}

		return e.complexity.CedarContract.EndDate(childComplexity), true

	case "CedarContract.isDeliveryOrg":
		if e.complexity.CedarContract.IsDeliveryOrg == nil {
			break
		}

		return e.complexity.CedarContract.IsDeliveryOrg(childComplexity), true

	case "CedarContract.orderNumber":
		if e.complexity.CedarContract.OrderNumber == nil {
			break
		}

		return e.complexity.CedarContract.OrderNumber(childComplexity), true

	case "CedarContract.serviceProvided":
		if e.complexity.CedarContract.ServiceProvided == nil {
			break
		}

		return e.complexity.CedarContract.ServiceProvided(childComplexity), true

	case "CedarContract.startDate":
		if e.complexity.CedarContract.StartDate == nil {
			break
		}

		return e.complexity.CedarContract.StartDate(childComplexity), true

	case "CedarContract.systemID":
		if e.complexity.CedarContract.SystemID == nil {
			break
		}

		return e.complexity.CedarContract.SystemID(childComplexity), true

	case "CedarDataCenter.address1":
		if e.complexity.CedarDataCenter.Address1 == nil {
			break
		}

		return e.complexity.CedarDataCenter.Address1(childComplexity), true

	case "CedarDataCenter.address2":
		if e.complexity.CedarDataCenter.Address2 == nil {
			break
		}

		return e.complexity.CedarDataCenter.Address2(childComplexity), true

	case "CedarDataCenter.addressState":
		if e.complexity.CedarDataCenter.AddressState == nil {
			break
		}

		return e.complexity.CedarDataCenter.AddressState(childComplexity), true

	case "CedarDataCenter.city":
		if e.complexity.CedarDataCenter.City == nil {
			break
		}

		return e.complexity.CedarDataCenter.City(childComplexity), true

	case "CedarDataCenter.description":
		if e.complexity.CedarDataCenter.Description == nil {
			break
		}

		return e.complexity.CedarDataCenter.Description(childComplexity), true

	case "CedarDataCenter.endDate":
		if e.complexity.CedarDataCenter.EndDate == nil {
			break
		}

		return e.complexity.CedarDataCenter.EndDate(childComplexity), true

	case "CedarDataCenter.id":
		if e.complexity.CedarDataCenter.ID == nil {
			break
		}

		return e.complexity.CedarDataCenter.ID(childComplexity), true

	case "CedarDataCenter.name":
		if e.complexity.CedarDataCenter.Name == nil {
			break
		}

		return e.complexity.CedarDataCenter.Name(childComplexity), true

	case "CedarDataCenter.startDate":
		if e.complexity.CedarDataCenter.StartDate == nil {
			break
		}

		return e.complexity.CedarDataCenter.StartDate(childComplexity), true

	case "CedarDataCenter.state":
		if e.complexity.CedarDataCenter.State == nil {
			break
		}

		return e.complexity.CedarDataCenter.State(childComplexity), true

	case "CedarDataCenter.status":
		if e.complexity.CedarDataCenter.Status == nil {
			break
		}

		return e.complexity.CedarDataCenter.Status(childComplexity), true

	case "CedarDataCenter.version":
		if e.complexity.CedarDataCenter.Version == nil {
			break
		}

		return e.complexity.CedarDataCenter.Version(childComplexity), true

	case "CedarDataCenter.zip":
		if e.complexity.CedarDataCenter.Zip == nil {
			break
		}

		return e.complexity.CedarDataCenter.Zip(childComplexity), true

	case "CedarDeployment.contractorName":
		if e.complexity.CedarDeployment.ContractorName == nil {
			break
		}

		return e.complexity.CedarDeployment.ContractorName(childComplexity), true

	case "CedarDeployment.dataCenter":
		if e.complexity.CedarDeployment.DataCenter == nil {
			break
		}

		return e.complexity.CedarDeployment.DataCenter(childComplexity), true

	case "CedarDeployment.deploymentElementID":
		if e.complexity.CedarDeployment.DeploymentElementID == nil {
			break
		}

		return e.complexity.CedarDeployment.DeploymentElementID(childComplexity), true

	case "CedarDeployment.deploymentType":
		if e.complexity.CedarDeployment.DeploymentType == nil {
			break
		}

		return e.complexity.CedarDeployment.DeploymentType(childComplexity), true

	case "CedarDeployment.description":
		if e.complexity.CedarDeployment.Description == nil {
			break
		}

		return e.complexity.CedarDeployment.Description(childComplexity), true

	case "CedarDeployment.endDate":
		if e.complexity.CedarDeployment.EndDate == nil {
			break
		}

		return e.complexity.CedarDeployment.EndDate(childComplexity), true

	case "CedarDeployment.hasProductionData":
		if e.complexity.CedarDeployment.HasProductionData == nil {
			break
		}

		return e.complexity.CedarDeployment.HasProductionData(childComplexity), true

	case "CedarDeployment.id":
		if e.complexity.CedarDeployment.ID == nil {
			break
		}

		return e.complexity.CedarDeployment.ID(childComplexity), true

	case "CedarDeployment.isHotSite":
		if e.complexity.CedarDeployment.IsHotSite == nil {
			break
		}

		return e.complexity.CedarDeployment.IsHotSite(childComplexity), true

	case "CedarDeployment.name":
		if e.complexity.CedarDeployment.Name == nil {
			break
		}

		return e.complexity.CedarDeployment.Name(childComplexity), true

	case "CedarDeployment.replicatedSystemElements":
		if e.complexity.CedarDeployment.ReplicatedSystemElements == nil {
			break
		}

		return e.complexity.CedarDeployment.ReplicatedSystemElements(childComplexity), true

	case "CedarDeployment.startDate":
		if e.complexity.CedarDeployment.StartDate == nil {
			break
		}

		return e.complexity.CedarDeployment.StartDate(childComplexity), true

	case "CedarDeployment.state":
		if e.complexity.CedarDeployment.State == nil {
			break
		}

		return e.complexity.CedarDeployment.State(childComplexity), true

	case "CedarDeployment.status":
		if e.complexity.CedarDeployment.Status == nil {
			break
		}

		return e.complexity.CedarDeployment.Status(childComplexity), true

	case "CedarDeployment.systemID":
		if e.complexity.CedarDeployment.SystemID == nil {
			break
		}

		return e.complexity.CedarDeployment.SystemID(childComplexity), true

	case "CedarDeployment.systemName":
		if e.complexity.CedarDeployment.SystemName == nil {
			break
		}

		return e.complexity.CedarDeployment.SystemName(childComplexity), true

	case "CedarDeployment.systemVersion":
		if e.complexity.CedarDeployment.SystemVersion == nil {
			break
		}

		return e.complexity.CedarDeployment.SystemVersion(childComplexity), true

	case "CedarDeployment.wanType":
		if e.complexity.CedarDeployment.WanType == nil {
			break
		}

		return e.complexity.CedarDeployment.WanType(childComplexity), true

	case "CedarExchange.connectionFrequency":
		if e.complexity.CedarExchange.ConnectionFrequency == nil {
			break
		}

		return e.complexity.CedarExchange.ConnectionFrequency(childComplexity), true

	case "CedarExchange.containsBankingData":
		if e.complexity.CedarExchange.ContainsBankingData == nil {
			break
		}

		return e.complexity.CedarExchange.ContainsBankingData(childComplexity), true

	case "CedarExchange.containsBeneficiaryAddress":
		if e.complexity.CedarExchange.ContainsBeneficiaryAddress == nil {
			break
		}

		return e.complexity.CedarExchange.ContainsBeneficiaryAddress(childComplexity), true

	case "CedarExchange.containsHealthDisparityData":
		if e.complexity.CedarExchange.ContainsHealthDisparityData == nil {
			break
		}

		return e.complexity.CedarExchange.ContainsHealthDisparityData(childComplexity), true

	case "CedarExchange.containsPhi":
		if e.complexity.CedarExchange.ContainsPhi == nil {
			break
		}

		return e.complexity.CedarExchange.ContainsPhi(childComplexity), true

	case "CedarExchange.containsPii":
		if e.complexity.CedarExchange.ContainsPii == nil {
			break
		}

		return e.complexity.CedarExchange.ContainsPii(childComplexity), true

	case "CedarExchange.dataExchangeAgreement":
		if e.complexity.CedarExchange.DataExchangeAgreement == nil {
			break
		}

		return e.complexity.CedarExchange.DataExchangeAgreement(childComplexity), true

	case "CedarExchange.dataFormat":
		if e.complexity.CedarExchange.DataFormat == nil {
			break
		}

		return e.complexity.CedarExchange.DataFormat(childComplexity), true

	case "CedarExchange.dataFormatOther":
		if e.complexity.CedarExchange.DataFormatOther == nil {
			break
		}

		return e.complexity.CedarExchange.DataFormatOther(childComplexity), true

	case "CedarExchange.exchangeDescription":
		if e.complexity.CedarExchange.ExchangeDescription == nil {
			break
		}

		return e.complexity.CedarExchange.ExchangeDescription(childComplexity), true

	case "CedarExchange.exchangeDirection":
		if e.complexity.CedarExchange.ExchangeDirection == nil {
			break
		}

		return e.complexity.CedarExchange.ExchangeDirection(childComplexity), true

	case "CedarExchange.exchangeEndDate":
		if e.complexity.CedarExchange.ExchangeEndDate == nil {
			break
		}

		return e.complexity.CedarExchange.ExchangeEndDate(childComplexity), true

	case "CedarExchange.exchangeId":
		if e.complexity.CedarExchange.ExchangeID == nil {
			break
		}

		return e.complexity.CedarExchange.ExchangeID(childComplexity), true

	case "CedarExchange.exchangeName":
		if e.complexity.CedarExchange.ExchangeName == nil {
			break
		}

		return e.complexity.CedarExchange.ExchangeName(childComplexity), true

	case "CedarExchange.exchangeRetiredDate":
		if e.complexity.CedarExchange.ExchangeRetiredDate == nil {
			break
		}

		return e.complexity.CedarExchange.ExchangeRetiredDate(childComplexity), true

	case "CedarExchange.exchangeStartDate":
		if e.complexity.CedarExchange.ExchangeStartDate == nil {
			break
		}

		return e.complexity.CedarExchange.ExchangeStartDate(childComplexity), true

	case "CedarExchange.exchangeState":
		if e.complexity.CedarExchange.ExchangeState == nil {
			break
		}

		return e.complexity.CedarExchange.ExchangeState(childComplexity), true

	case "CedarExchange.exchangeVersion":
		if e.complexity.CedarExchange.ExchangeVersion == nil {
			break
		}

		return e.complexity.CedarExchange.ExchangeVersion(childComplexity), true

	case "CedarExchange.fromOwnerId":
		if e.complexity.CedarExchange.FromOwnerID == nil {
			break
		}

		return e.complexity.CedarExchange.FromOwnerID(childComplexity), true

	case "CedarExchange.fromOwnerName":
		if e.complexity.CedarExchange.FromOwnerName == nil {
			break
		}

		return e.complexity.CedarExchange.FromOwnerName(childComplexity), true

	case "CedarExchange.fromOwnerType":
		if e.complexity.CedarExchange.FromOwnerType == nil {
			break
		}

		return e.complexity.CedarExchange.FromOwnerType(childComplexity), true

	case "CedarExchange.isBeneficiaryMailingFile":
		if e.complexity.CedarExchange.IsBeneficiaryMailingFile == nil {
			break
		}

		return e.complexity.CedarExchange.IsBeneficiaryMailingFile(childComplexity), true

	case "CedarExchange.numOfRecords":
		if e.complexity.CedarExchange.NumOfRecords == nil {
			break
		}

		return e.complexity.CedarExchange.NumOfRecords(childComplexity), true

	case "CedarExchange.sharedViaApi":
		if e.complexity.CedarExchange.SharedViaAPI == nil {
			break
		}

		return e.complexity.CedarExchange.SharedViaAPI(childComplexity), true

	case "CedarExchange.toOwnerId":
		if e.complexity.CedarExchange.ToOwnerID == nil {
			break
		}

		return e.complexity.CedarExchange.ToOwnerID(childComplexity), true

	case "CedarExchange.toOwnerName":
		if e.complexity.CedarExchange.ToOwnerName == nil {
			break
		}

		return e.complexity.CedarExchange.ToOwnerName(childComplexity), true

	case "CedarExchange.toOwnerType":
		if e.complexity.CedarExchange.ToOwnerType == nil {
			break
		}

		return e.complexity.CedarExchange.ToOwnerType(childComplexity), true

	case "CedarExchange.typeOfData":
		if e.complexity.CedarExchange.TypeOfData == nil {
			break
		}

		return e.complexity.CedarExchange.TypeOfData(childComplexity), true

	case "CedarExchangeTypeOfDataItem.id":
		if e.complexity.CedarExchangeTypeOfDataItem.ID == nil {
			break
		}

		return e.complexity.CedarExchangeTypeOfDataItem.ID(childComplexity), true

	case "CedarExchangeTypeOfDataItem.name":
		if e.complexity.CedarExchangeTypeOfDataItem.Name == nil {
			break
		}

		return e.complexity.CedarExchangeTypeOfDataItem.Name(childComplexity), true

	case "CedarRole.application":
		if e.complexity.CedarRole.Application == nil {
			break
		}

		return e.complexity.CedarRole.Application(childComplexity), true

	case "CedarRole.assigneeDesc":
		if e.complexity.CedarRole.AssigneeDesc == nil {
			break
		}

		return e.complexity.CedarRole.AssigneeDesc(childComplexity), true

	case "CedarRole.assigneeEmail":
		if e.complexity.CedarRole.AssigneeEmail == nil {
			break
		}

		return e.complexity.CedarRole.AssigneeEmail(childComplexity), true

	case "CedarRole.assigneeFirstName":
		if e.complexity.CedarRole.AssigneeFirstName == nil {
			break
		}

		return e.complexity.CedarRole.AssigneeFirstName(childComplexity), true

	case "CedarRole.assigneeLastName":
		if e.complexity.CedarRole.AssigneeLastName == nil {
			break
		}

		return e.complexity.CedarRole.AssigneeLastName(childComplexity), true

	case "CedarRole.assigneeOrgID":
		if e.complexity.CedarRole.AssigneeOrgID == nil {
			break
		}

		return e.complexity.CedarRole.AssigneeOrgID(childComplexity), true

	case "CedarRole.assigneeOrgName":
		if e.complexity.CedarRole.AssigneeOrgName == nil {
			break
		}

		return e.complexity.CedarRole.AssigneeOrgName(childComplexity), true

	case "CedarRole.assigneePhone":
		if e.complexity.CedarRole.AssigneePhone == nil {
			break
		}

		return e.complexity.CedarRole.AssigneePhone(childComplexity), true

	case "CedarRole.assigneeType":
		if e.complexity.CedarRole.AssigneeType == nil {
			break
		}

		return e.complexity.CedarRole.AssigneeType(childComplexity), true

	case "CedarRole.assigneeUsername":
		if e.complexity.CedarRole.AssigneeUsername == nil {
			break
		}

		return e.complexity.CedarRole.AssigneeUsername(childComplexity), true

	case "CedarRole.objectID":
		if e.complexity.CedarRole.ObjectID == nil {
			break
		}

		return e.complexity.CedarRole.ObjectID(childComplexity), true

	case "CedarRole.objectType":
		if e.complexity.CedarRole.ObjectType == nil {
			break
		}

		return e.complexity.CedarRole.ObjectType(childComplexity), true

	case "CedarRole.roleID":
		if e.complexity.CedarRole.RoleID == nil {
			break
		}

		return e.complexity.CedarRole.RoleID(childComplexity), true

	case "CedarRole.roleTypeDesc":
		if e.complexity.CedarRole.RoleTypeDesc == nil {
			break
		}

		return e.complexity.CedarRole.RoleTypeDesc(childComplexity), true

	case "CedarRole.roleTypeID":
		if e.complexity.CedarRole.RoleTypeID == nil {
			break
		}

		return e.complexity.CedarRole.RoleTypeID(childComplexity), true

	case "CedarRole.roleTypeName":
		if e.complexity.CedarRole.RoleTypeName == nil {
			break
		}

		return e.complexity.CedarRole.RoleTypeName(childComplexity), true

	case "CedarRoleType.application":
		if e.complexity.CedarRoleType.Application == nil {
			break
		}

		return e.complexity.CedarRoleType.Application(childComplexity), true

	case "CedarRoleType.description":
		if e.complexity.CedarRoleType.Description == nil {
			break
		}

		return e.complexity.CedarRoleType.Description(childComplexity), true

	case "CedarRoleType.id":
		if e.complexity.CedarRoleType.ID == nil {
			break
		}

		return e.complexity.CedarRoleType.ID(childComplexity), true

	case "CedarRoleType.name":
		if e.complexity.CedarRoleType.Name == nil {
			break
		}

		return e.complexity.CedarRoleType.Name(childComplexity), true

	case "CedarSoftwareProductItem.apiGatewayUse":
		if e.complexity.CedarSoftwareProductItem.APIGatewayUse == nil {
			break
		}

		return e.complexity.CedarSoftwareProductItem.APIGatewayUse(childComplexity), true

	case "CedarSoftwareProductItem.elaPurchase":
		if e.complexity.CedarSoftwareProductItem.ElaPurchase == nil {
			break
		}

		return e.complexity.CedarSoftwareProductItem.ElaPurchase(childComplexity), true

	case "CedarSoftwareProductItem.elaVendorId":
		if e.complexity.CedarSoftwareProductItem.ElaVendorID == nil {
			break
		}

		return e.complexity.CedarSoftwareProductItem.ElaVendorID(childComplexity), true

	case "CedarSoftwareProductItem.providesAiCapability":
		if e.complexity.CedarSoftwareProductItem.ProvidesAiCapability == nil {
			break
		}

		return e.complexity.CedarSoftwareProductItem.ProvidesAiCapability(childComplexity), true

	case "CedarSoftwareProductItem.refstr":
		if e.complexity.CedarSoftwareProductItem.Refstr == nil {
			break
		}

		return e.complexity.CedarSoftwareProductItem.Refstr(childComplexity), true

	case "CedarSoftwareProductItem.softwareCatagoryConnectionGuid":
		if e.complexity.CedarSoftwareProductItem.SoftwareCatagoryConnectionGUID == nil {
			break
		}

		return e.complexity.CedarSoftwareProductItem.SoftwareCatagoryConnectionGUID(childComplexity), true

	case "CedarSoftwareProductItem.softwareCost":
		if e.complexity.CedarSoftwareProductItem.SoftwareCost == nil {
			break
		}

		return e.complexity.CedarSoftwareProductItem.SoftwareCost(childComplexity), true

	case "CedarSoftwareProductItem.softwareElaOrganization":
		if e.complexity.CedarSoftwareProductItem.SoftwareElaOrganization == nil {
			break
		}

		return e.complexity.CedarSoftwareProductItem.SoftwareElaOrganization(childComplexity), true

	case "CedarSoftwareProductItem.softwareName":
		if e.complexity.CedarSoftwareProductItem.SoftwareName == nil {
			break
		}

		return e.complexity.CedarSoftwareProductItem.SoftwareName(childComplexity), true

	case "CedarSoftwareProductItem.softwareVendorConnectionGuid":
		if e.complexity.CedarSoftwareProductItem.SoftwareVendorConnectionGUID == nil {
			break
		}

		return e.complexity.CedarSoftwareProductItem.SoftwareVendorConnectionGUID(childComplexity), true

	case "CedarSoftwareProductItem.systemSoftwareConnectionGuid":
		if e.complexity.CedarSoftwareProductItem.SystemSoftwareConnectionGUID == nil {
			break
		}

		return e.complexity.CedarSoftwareProductItem.SystemSoftwareConnectionGUID(childComplexity), true

	case "CedarSoftwareProductItem.technopediaCategory":
		if e.complexity.CedarSoftwareProductItem.TechnopediaCategory == nil {
			break
		}

		return e.complexity.CedarSoftwareProductItem.TechnopediaCategory(childComplexity), true

	case "CedarSoftwareProductItem.technopediaID":
		if e.complexity.CedarSoftwareProductItem.TechnopediaID == nil {
			break
		}

		return e.complexity.CedarSoftwareProductItem.TechnopediaID(childComplexity), true

	case "CedarSoftwareProductItem.vendorName":
		if e.complexity.CedarSoftwareProductItem.VendorName == nil {
			break
		}

		return e.complexity.CedarSoftwareProductItem.VendorName(childComplexity), true

	case "CedarSoftwareProducts.aiSolnCatgOther":
		if e.complexity.CedarSoftwareProducts.AISolnCatgOther == nil {
			break
		}

		return e.complexity.CedarSoftwareProducts.AISolnCatgOther(childComplexity), true

	case "CedarSoftwareProducts.apiDataArea":
		if e.complexity.CedarSoftwareProducts.APIDataArea == nil {
			break
		}

		return e.complexity.CedarSoftwareProducts.APIDataArea(childComplexity), true

	case "CedarSoftwareProducts.apiDescPubLocation":
		if e.complexity.CedarSoftwareProducts.APIDescPubLocation == nil {
			break
		}

		return e.complexity.CedarSoftwareProducts.APIDescPubLocation(childComplexity), true

	case "CedarSoftwareProducts.apiDescPublished":
		if e.complexity.CedarSoftwareProducts.APIDescPublished == nil {
			break
		}

		return e.complexity.CedarSoftwareProducts.APIDescPublished(childComplexity), true

	case "CedarSoftwareProducts.apiFHIRUse":
		if e.complexity.CedarSoftwareProducts.APIFHIRUse == nil {
			break
		}

		return e.complexity.CedarSoftwareProducts.APIFHIRUse(childComplexity), true

	case "CedarSoftwareProducts.apiFHIRUseOther":
		if e.complexity.CedarSoftwareProducts.APIFHIRUseOther == nil {
			break
		}

		return e.complexity.CedarSoftwareProducts.APIFHIRUseOther(childComplexity), true

	case "CedarSoftwareProducts.apiHasPortal":
		if e.complexity.CedarSoftwareProducts.APIHasPortal == nil {
			break
		}

		return e.complexity.CedarSoftwareProducts.APIHasPortal(childComplexity), true

	case "CedarSoftwareProducts.aiSolnCatg":
		if e.complexity.CedarSoftwareProducts.AiSolnCatg == nil {
			break
		}

		return e.complexity.CedarSoftwareProducts.AiSolnCatg(childComplexity), true

	case "CedarSoftwareProducts.apisAccessibility":
		if e.complexity.CedarSoftwareProducts.ApisAccessibility == nil {
			break
		}

		return e.complexity.CedarSoftwareProducts.ApisAccessibility(childComplexity), true

	case "CedarSoftwareProducts.apisDeveloped":
		if e.complexity.CedarSoftwareProducts.ApisDeveloped == nil {
			break
		}

		return e.complexity.CedarSoftwareProducts.ApisDeveloped(childComplexity), true

	case "CedarSoftwareProducts.developmentStage":
		if e.complexity.CedarSoftwareProducts.DevelopmentStage == nil {
			break
		}

		return e.complexity.CedarSoftwareProducts.DevelopmentStage(childComplexity), true

	case "CedarSoftwareProducts.softwareProducts":
		if e.complexity.CedarSoftwareProducts.SoftwareProducts == nil {
			break
		}

		return e.complexity.CedarSoftwareProducts.SoftwareProducts(childComplexity), true

	case "CedarSoftwareProducts.systemHasAPIGateway":
		if e.complexity.CedarSoftwareProducts.SystemHasAPIGateway == nil {
			break
		}

		return e.complexity.CedarSoftwareProducts.SystemHasAPIGateway(childComplexity), true

	case "CedarSoftwareProducts.usesAiTech":
		if e.complexity.CedarSoftwareProducts.UsesAiTech == nil {
			break
		}

		return e.complexity.CedarSoftwareProducts.UsesAiTech(childComplexity), true

	case "CedarSubSystem.acronym":
		if e.complexity.CedarSubSystem.Acronym == nil {
			break
		}

		return e.complexity.CedarSubSystem.Acronym(childComplexity), true

	case "CedarSubSystem.description":
		if e.complexity.CedarSubSystem.Description == nil {
			break
		}

		return e.complexity.CedarSubSystem.Description(childComplexity), true

	case "CedarSubSystem.id":
		if e.complexity.CedarSubSystem.ID == nil {
			break
		}

		return e.complexity.CedarSubSystem.ID(childComplexity), true

	case "CedarSubSystem.name":
		if e.complexity.CedarSubSystem.Name == nil {
			break
		}

		return e.complexity.CedarSubSystem.Name(childComplexity), true

	case "CedarSystem.atoEffectiveDate":
		if e.complexity.CedarSystem.ATOEffectiveDate == nil {
			break
		}

		return e.complexity.CedarSystem.ATOEffectiveDate(childComplexity), true

	case "CedarSystem.atoExpirationDate":
		if e.complexity.CedarSystem.ATOExpirationDate == nil {
			break
		}

		return e.complexity.CedarSystem.ATOExpirationDate(childComplexity), true

	case "CedarSystem.acronym":
		if e.complexity.CedarSystem.Acronym == nil {
			break
		}

		return e.complexity.CedarSystem.Acronym(childComplexity), true

	case "CedarSystem.businessOwnerOrg":
		if e.complexity.CedarSystem.BusinessOwnerOrg == nil {
			break
		}

		return e.complexity.CedarSystem.BusinessOwnerOrg(childComplexity), true

	case "CedarSystem.businessOwnerOrgComp":
		if e.complexity.CedarSystem.BusinessOwnerOrgComp == nil {
			break
		}

		return e.complexity.CedarSystem.BusinessOwnerOrgComp(childComplexity), true

	case "CedarSystem.businessOwnerRoles":
		if e.complexity.CedarSystem.BusinessOwnerRoles == nil {
			break
		}

		return e.complexity.CedarSystem.BusinessOwnerRoles(childComplexity), true

	case "CedarSystem.description":
		if e.complexity.CedarSystem.Description == nil {
			break
		}

		return e.complexity.CedarSystem.Description(childComplexity), true

	case "CedarSystem.id":
		if e.complexity.CedarSystem.ID == nil {
			break
		}

		return e.complexity.CedarSystem.ID(childComplexity), true

	case "CedarSystem.isBookmarked":
		if e.complexity.CedarSystem.IsBookmarked == nil {
			break
		}

		return e.complexity.CedarSystem.IsBookmarked(childComplexity), true

	case "CedarSystem.linkedSystemIntakes":
		if e.complexity.CedarSystem.LinkedSystemIntakes == nil {
			break
		}

		args, err := ec.field_CedarSystem_linkedSystemIntakes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CedarSystem.LinkedSystemIntakes(childComplexity, args["state"].(models.SystemIntakeState)), true

	case "CedarSystem.linkedTrbRequests":
		if e.complexity.CedarSystem.LinkedTrbRequests == nil {
			break
		}

		args, err := ec.field_CedarSystem_linkedTrbRequests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CedarSystem.LinkedTrbRequests(childComplexity, args["state"].(models.TRBRequestState)), true

	case "CedarSystem.name":
		if e.complexity.CedarSystem.Name == nil {
			break
		}

		return e.complexity.CedarSystem.Name(childComplexity), true

	case "CedarSystem.status":
		if e.complexity.CedarSystem.Status == nil {
			break
		}

		return e.complexity.CedarSystem.Status(childComplexity), true

	case "CedarSystem.systemMaintainerOrg":
		if e.complexity.CedarSystem.SystemMaintainerOrg == nil {
			break
		}

		return e.complexity.CedarSystem.SystemMaintainerOrg(childComplexity), true

	case "CedarSystem.systemMaintainerOrgComp":
		if e.complexity.CedarSystem.SystemMaintainerOrgComp == nil {
			break
		}

		return e.complexity.CedarSystem.SystemMaintainerOrgComp(childComplexity), true

	case "CedarSystem.uuid":
		if e.complexity.CedarSystem.UUID == nil {
			break
		}

		return e.complexity.CedarSystem.UUID(childComplexity), true

	case "CedarSystem.versionId":
		if e.complexity.CedarSystem.VersionID == nil {
			break
		}

		return e.complexity.CedarSystem.VersionID(childComplexity), true

	case "CedarSystemBookmark.cedarSystemId":
		if e.complexity.CedarSystemBookmark.CedarSystemID == nil {
			break
		}

		return e.complexity.CedarSystemBookmark.CedarSystemID(childComplexity), true

	case "CedarSystemBookmark.euaUserId":
		if e.complexity.CedarSystemBookmark.EUAUserID == nil {
			break
		}

		return e.complexity.CedarSystemBookmark.EUAUserID(childComplexity), true

	case "CedarSystemDetails.atoEffectiveDate":
		if e.complexity.CedarSystemDetails.ATOEffectiveDate == nil {
			break
		}

		return e.complexity.CedarSystemDetails.ATOEffectiveDate(childComplexity), true

	case "CedarSystemDetails.atoExpirationDate":
		if e.complexity.CedarSystemDetails.ATOExpirationDate == nil {
			break
		}

		return e.complexity.CedarSystemDetails.ATOExpirationDate(childComplexity), true

	case "CedarSystemDetails.businessOwnerInformation":
		if e.complexity.CedarSystemDetails.BusinessOwnerInformation == nil {
			break
		}

		return e.complexity.CedarSystemDetails.BusinessOwnerInformation(childComplexity), true

	case "CedarSystemDetails.cedarSystem":
		if e.complexity.CedarSystemDetails.CedarSystem == nil {
			break
		}

		return e.complexity.CedarSystemDetails.CedarSystem(childComplexity), true

	case "CedarSystemDetails.deployments":
		if e.complexity.CedarSystemDetails.Deployments == nil {
			break
		}

		return e.complexity.CedarSystemDetails.Deployments(childComplexity), true

	case "CedarSystemDetails.isMySystem":
		if e.complexity.CedarSystemDetails.IsMySystem == nil {
			break
		}

		return e.complexity.CedarSystemDetails.IsMySystem(childComplexity), true

	case "CedarSystemDetails.roles":
		if e.complexity.CedarSystemDetails.Roles == nil {
			break
		}

		return e.complexity.CedarSystemDetails.Roles(childComplexity), true

	case "CedarSystemDetails.systemMaintainerInformation":
		if e.complexity.CedarSystemDetails.SystemMaintainerInformation == nil {
			break
		}

		return e.complexity.CedarSystemDetails.SystemMaintainerInformation(childComplexity), true

	case "CedarSystemDetails.threats":
		if e.complexity.CedarSystemDetails.Threats == nil {
			break
		}

		return e.complexity.CedarSystemDetails.Threats(childComplexity), true

	case "CedarSystemDetails.urls":
		if e.complexity.CedarSystemDetails.URLs == nil {
			break
		}

		return e.complexity.CedarSystemDetails.URLs(childComplexity), true

	case "CedarSystemMaintainerInformation.adHocAgileDeploymentFrequency":
		if e.complexity.CedarSystemMaintainerInformation.AdHocAgileDeploymentFrequency == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.AdHocAgileDeploymentFrequency(childComplexity), true

	case "CedarSystemMaintainerInformation.agileUsed":
		if e.complexity.CedarSystemMaintainerInformation.AgileUsed == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.AgileUsed(childComplexity), true

	case "CedarSystemMaintainerInformation.authoritativeDatasource":
		if e.complexity.CedarSystemMaintainerInformation.AuthoritativeDatasource == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.AuthoritativeDatasource(childComplexity), true

	case "CedarSystemMaintainerInformation.businessArtifactsOnDemand":
		if e.complexity.CedarSystemMaintainerInformation.BusinessArtifactsOnDemand == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.BusinessArtifactsOnDemand(childComplexity), true

	case "CedarSystemMaintainerInformation.dataAtRestEncryptionKeyManagement":
		if e.complexity.CedarSystemMaintainerInformation.DataAtRestEncryptionKeyManagement == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.DataAtRestEncryptionKeyManagement(childComplexity), true

	case "CedarSystemMaintainerInformation.deploymentFrequency":
		if e.complexity.CedarSystemMaintainerInformation.DeploymentFrequency == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.DeploymentFrequency(childComplexity), true

	case "CedarSystemMaintainerInformation.devCompletionPercent":
		if e.complexity.CedarSystemMaintainerInformation.DevCompletionPercent == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.DevCompletionPercent(childComplexity), true

	case "CedarSystemMaintainerInformation.devWorkDescription":
		if e.complexity.CedarSystemMaintainerInformation.DevWorkDescription == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.DevWorkDescription(childComplexity), true

	case "CedarSystemMaintainerInformation.ecapParticipation":
		if e.complexity.CedarSystemMaintainerInformation.EcapParticipation == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.EcapParticipation(childComplexity), true

	case "CedarSystemMaintainerInformation.frontendAccessType":
		if e.complexity.CedarSystemMaintainerInformation.FrontendAccessType == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.FrontendAccessType(childComplexity), true

	case "CedarSystemMaintainerInformation.hardCodedIPAddress":
		if e.complexity.CedarSystemMaintainerInformation.HardCodedIPAddress == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.HardCodedIPAddress(childComplexity), true

	case "CedarSystemMaintainerInformation.ip6EnabledAssetPercent":
		if e.complexity.CedarSystemMaintainerInformation.IP6EnabledAssetPercent == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.IP6EnabledAssetPercent(childComplexity), true

	case "CedarSystemMaintainerInformation.ip6TransitionPlan":
		if e.complexity.CedarSystemMaintainerInformation.IP6TransitionPlan == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.IP6TransitionPlan(childComplexity), true

	case "CedarSystemMaintainerInformation.ipEnabledAssetCount":
		if e.complexity.CedarSystemMaintainerInformation.IPEnabledAssetCount == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.IPEnabledAssetCount(childComplexity), true

	case "CedarSystemMaintainerInformation.legalHoldCaseName":
		if e.complexity.CedarSystemMaintainerInformation.LegalHoldCaseName == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.LegalHoldCaseName(childComplexity), true

	case "CedarSystemMaintainerInformation.locallyStoredUserInformation":
		if e.complexity.CedarSystemMaintainerInformation.LocallyStoredUserInformation == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.LocallyStoredUserInformation(childComplexity), true

	case "CedarSystemMaintainerInformation.majorRefreshDate":
		if e.complexity.CedarSystemMaintainerInformation.MajorRefreshDate == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.MajorRefreshDate(childComplexity), true

	case "CedarSystemMaintainerInformation.multifactorAuthenticationMethod":
		if e.complexity.CedarSystemMaintainerInformation.MultifactorAuthenticationMethod == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.MultifactorAuthenticationMethod(childComplexity), true

	case "CedarSystemMaintainerInformation.multifactorAuthenticationMethodOther":
		if e.complexity.CedarSystemMaintainerInformation.MultifactorAuthenticationMethodOther == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.MultifactorAuthenticationMethodOther(childComplexity), true

	case "CedarSystemMaintainerInformation.netAccessibility":
		if e.complexity.CedarSystemMaintainerInformation.NetAccessibility == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.NetAccessibility(childComplexity), true

	case "CedarSystemMaintainerInformation.networkTrafficEncryptionKeyManagement":
		if e.complexity.CedarSystemMaintainerInformation.NetworkTrafficEncryptionKeyManagement == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.NetworkTrafficEncryptionKeyManagement(childComplexity), true

	case "CedarSystemMaintainerInformation.noMajorRefresh":
		if e.complexity.CedarSystemMaintainerInformation.NoMajorRefresh == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.NoMajorRefresh(childComplexity), true

	case "CedarSystemMaintainerInformation.noPersistentRecordsFlag":
		if e.complexity.CedarSystemMaintainerInformation.NoPersistentRecordsFlag == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.NoPersistentRecordsFlag(childComplexity), true

	case "CedarSystemMaintainerInformation.noPlannedMajorRefresh":
		if e.complexity.CedarSystemMaintainerInformation.NoPlannedMajorRefresh == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.NoPlannedMajorRefresh(childComplexity), true

	case "CedarSystemMaintainerInformation.omDocumentationOnDemand":
		if e.complexity.CedarSystemMaintainerInformation.OmDocumentationOnDemand == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.OmDocumentationOnDemand(childComplexity), true

	case "CedarSystemMaintainerInformation.plansToRetireReplace":
		if e.complexity.CedarSystemMaintainerInformation.PlansToRetireReplace == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.PlansToRetireReplace(childComplexity), true

	case "CedarSystemMaintainerInformation.quarterToRetireReplace":
		if e.complexity.CedarSystemMaintainerInformation.QuarterToRetireReplace == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.QuarterToRetireReplace(childComplexity), true

	case "CedarSystemMaintainerInformation.recordsManagementBucket":
		if e.complexity.CedarSystemMaintainerInformation.RecordsManagementBucket == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.RecordsManagementBucket(childComplexity), true

	case "CedarSystemMaintainerInformation.recordsManagementDisposalLocation":
		if e.complexity.CedarSystemMaintainerInformation.RecordsManagementDisposalLocation == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.RecordsManagementDisposalLocation(childComplexity), true

	case "CedarSystemMaintainerInformation.recordsManagementDisposalPlan":
		if e.complexity.CedarSystemMaintainerInformation.RecordsManagementDisposalPlan == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.RecordsManagementDisposalPlan(childComplexity), true

	case "CedarSystemMaintainerInformation.recordsUnderLegalHold":
		if e.complexity.CedarSystemMaintainerInformation.RecordsUnderLegalHold == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.RecordsUnderLegalHold(childComplexity), true

	case "CedarSystemMaintainerInformation.sourceCodeOnDemand":
		if e.complexity.CedarSystemMaintainerInformation.SourceCodeOnDemand == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.SourceCodeOnDemand(childComplexity), true

	case "CedarSystemMaintainerInformation.systemCustomization":
		if e.complexity.CedarSystemMaintainerInformation.SystemCustomization == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.SystemCustomization(childComplexity), true

	case "CedarSystemMaintainerInformation.systemDataLocation":
		if e.complexity.CedarSystemMaintainerInformation.SystemDataLocation == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.SystemDataLocation(childComplexity), true

	case "CedarSystemMaintainerInformation.systemDataLocationNotes":
		if e.complexity.CedarSystemMaintainerInformation.SystemDataLocationNotes == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.SystemDataLocationNotes(childComplexity), true

	case "CedarSystemMaintainerInformation.systemDesignOnDemand":
		if e.complexity.CedarSystemMaintainerInformation.SystemDesignOnDemand == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.SystemDesignOnDemand(childComplexity), true

	case "CedarSystemMaintainerInformation.systemProductionDate":
		if e.complexity.CedarSystemMaintainerInformation.SystemProductionDate == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.SystemProductionDate(childComplexity), true

	case "CedarSystemMaintainerInformation.systemRequirementsOnDemand":
		if e.complexity.CedarSystemMaintainerInformation.SystemRequirementsOnDemand == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.SystemRequirementsOnDemand(childComplexity), true

	case "CedarSystemMaintainerInformation.testPlanOnDemand":
		if e.complexity.CedarSystemMaintainerInformation.TestPlanOnDemand == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.TestPlanOnDemand(childComplexity), true

	case "CedarSystemMaintainerInformation.testReportsOnDemand":
		if e.complexity.CedarSystemMaintainerInformation.TestReportsOnDemand == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.TestReportsOnDemand(childComplexity), true

	case "CedarSystemMaintainerInformation.testScriptsOnDemand":
		if e.complexity.CedarSystemMaintainerInformation.TestScriptsOnDemand == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.TestScriptsOnDemand(childComplexity), true

	case "CedarSystemMaintainerInformation.yearToRetireReplace":
		if e.complexity.CedarSystemMaintainerInformation.YearToRetireReplace == nil {
			break
		}

		return e.complexity.CedarSystemMaintainerInformation.YearToRetireReplace(childComplexity), true

	case "CedarThreat.alternativeId":
		if e.complexity.CedarThreat.AlternativeID == nil {
			break
		}

		return e.complexity.CedarThreat.AlternativeID(childComplexity), true

	case "CedarThreat.controlFamily":
		if e.complexity.CedarThreat.ControlFamily == nil {
			break
		}

		return e.complexity.CedarThreat.ControlFamily(childComplexity), true

	case "CedarThreat.daysOpen":
		if e.complexity.CedarThreat.DaysOpen == nil {
			break
		}

		return e.complexity.CedarThreat.DaysOpen(childComplexity), true

	case "CedarThreat.id":
		if e.complexity.CedarThreat.ID == nil {
			break
		}

		return e.complexity.CedarThreat.ID(childComplexity), true

	case "CedarThreat.parentId":
		if e.complexity.CedarThreat.ParentID == nil {
			break
		}

		return e.complexity.CedarThreat.ParentID(childComplexity), true

	case "CedarThreat.type":
		if e.complexity.CedarThreat.Type == nil {
			break
		}

		return e.complexity.CedarThreat.Type(childComplexity), true

	case "CedarThreat.weaknessRiskLevel":
		if e.complexity.CedarThreat.WeaknessRiskLevel == nil {
			break
		}

		return e.complexity.CedarThreat.WeaknessRiskLevel(childComplexity), true

	case "CedarURL.address":
		if e.complexity.CedarURL.Address == nil {
			break
		}

		return e.complexity.CedarURL.Address(childComplexity), true

	case "CedarURL.id":
		if e.complexity.CedarURL.ID == nil {
			break
		}

		return e.complexity.CedarURL.ID(childComplexity), true

	case "CedarURL.isAPIEndpoint":
		if e.complexity.CedarURL.IsAPIEndpoint == nil {
			break
		}

		return e.complexity.CedarURL.IsAPIEndpoint(childComplexity), true

	case "CedarURL.isBehindWebApplicationFirewall":
		if e.complexity.CedarURL.IsBehindWebApplicationFirewall == nil {
			break
		}

		return e.complexity.CedarURL.IsBehindWebApplicationFirewall(childComplexity), true

	case "CedarURL.isVersionCodeRepository":
		if e.complexity.CedarURL.IsVersionCodeRepository == nil {
			break
		}

		return e.complexity.CedarURL.IsVersionCodeRepository(childComplexity), true

	case "CedarURL.urlHostingEnv":
		if e.complexity.CedarURL.URLHostingEnv == nil {
			break
		}

		return e.complexity.CedarURL.URLHostingEnv(childComplexity), true

	case "ContractDate.day":
		if e.complexity.ContractDate.Day == nil {
			break
		}

		return e.complexity.ContractDate.Day(childComplexity), true

	case "ContractDate.month":
		if e.complexity.ContractDate.Month == nil {
			break
		}

		return e.complexity.ContractDate.Month(childComplexity), true

	case "ContractDate.year":
		if e.complexity.ContractDate.Year == nil {
			break
		}

		return e.complexity.ContractDate.Year(childComplexity), true

	case "CreateCedarSystemBookmarkPayload.cedarSystemBookmark":
		if e.complexity.CreateCedarSystemBookmarkPayload.CedarSystemBookmark == nil {
			break
		}

		return e.complexity.CreateCedarSystemBookmarkPayload.CedarSystemBookmark(childComplexity), true

	case "CreateSystemIntakeContactPayload.systemIntakeContact":
		if e.complexity.CreateSystemIntakeContactPayload.SystemIntakeContact == nil {
			break
		}

		return e.complexity.CreateSystemIntakeContactPayload.SystemIntakeContact(childComplexity), true

	case "CreateSystemIntakeDocumentPayload.document":
		if e.complexity.CreateSystemIntakeDocumentPayload.Document == nil {
			break
		}

		return e.complexity.CreateSystemIntakeDocumentPayload.Document(childComplexity), true

	case "CreateSystemIntakeGRBReviewersPayload.reviewers":
		if e.complexity.CreateSystemIntakeGRBReviewersPayload.Reviewers == nil {
			break
		}

		return e.complexity.CreateSystemIntakeGRBReviewersPayload.Reviewers(childComplexity), true

	case "CreateTRBRequestDocumentPayload.document":
		if e.complexity.CreateTRBRequestDocumentPayload.Document == nil {
			break
		}

		return e.complexity.CreateTRBRequestDocumentPayload.Document(childComplexity), true

	case "CurrentUser.launchDarkly":
		if e.complexity.CurrentUser.LaunchDarkly == nil {
			break
		}

		return e.complexity.CurrentUser.LaunchDarkly(childComplexity), true

	case "DeleteCedarSystemBookmarkPayload.cedarSystemId":
		if e.complexity.DeleteCedarSystemBookmarkPayload.CedarSystemID == nil {
			break
		}

		return e.complexity.DeleteCedarSystemBookmarkPayload.CedarSystemID(childComplexity), true

	case "DeleteSystemIntakeContactPayload.systemIntakeContact":
		if e.complexity.DeleteSystemIntakeContactPayload.SystemIntakeContact == nil {
			break
		}

		return e.complexity.DeleteSystemIntakeContactPayload.SystemIntakeContact(childComplexity), true

	case "DeleteSystemIntakeDocumentPayload.document":
		if e.complexity.DeleteSystemIntakeDocumentPayload.Document == nil {
			break
		}

		return e.complexity.DeleteSystemIntakeDocumentPayload.Document(childComplexity), true

	case "DeleteTRBRequestDocumentPayload.document":
		if e.complexity.DeleteTRBRequestDocumentPayload.Document == nil {
			break
		}

		return e.complexity.DeleteTRBRequestDocumentPayload.Document(childComplexity), true

	case "EstimatedLifecycleCost.businessCaseId":
		if e.complexity.EstimatedLifecycleCost.BusinessCaseID == nil {
			break
		}

		return e.complexity.EstimatedLifecycleCost.BusinessCaseID(childComplexity), true

	case "EstimatedLifecycleCost.cost":
		if e.complexity.EstimatedLifecycleCost.Cost == nil {
			break
		}

		return e.complexity.EstimatedLifecycleCost.Cost(childComplexity), true

	case "EstimatedLifecycleCost.id":
		if e.complexity.EstimatedLifecycleCost.ID == nil {
			break
		}

		return e.complexity.EstimatedLifecycleCost.ID(childComplexity), true

	case "EstimatedLifecycleCost.phase":
		if e.complexity.EstimatedLifecycleCost.Phase == nil {
			break
		}

		return e.complexity.EstimatedLifecycleCost.Phase(childComplexity), true

	case "EstimatedLifecycleCost.solution":
		if e.complexity.EstimatedLifecycleCost.Solution == nil {
			break
		}

		return e.complexity.EstimatedLifecycleCost.Solution(childComplexity), true

	case "EstimatedLifecycleCost.year":
		if e.complexity.EstimatedLifecycleCost.Year == nil {
			break
		}

		return e.complexity.EstimatedLifecycleCost.Year(childComplexity), true

	case "GRBReviewerComparison.euaUserId":
		if e.complexity.GRBReviewerComparison.EuaUserID == nil {
			break
		}

		return e.complexity.GRBReviewerComparison.EuaUserID(childComplexity), true

	case "GRBReviewerComparison.grbRole":
		if e.complexity.GRBReviewerComparison.GrbRole == nil {
			break
		}

		return e.complexity.GRBReviewerComparison.GrbRole(childComplexity), true

	case "GRBReviewerComparison.id":
		if e.complexity.GRBReviewerComparison.ID == nil {
			break
		}

		return e.complexity.GRBReviewerComparison.ID(childComplexity), true

	case "GRBReviewerComparison.isCurrentReviewer":
		if e.complexity.GRBReviewerComparison.IsCurrentReviewer == nil {
			break
		}

		return e.complexity.GRBReviewerComparison.IsCurrentReviewer(childComplexity), true

	case "GRBReviewerComparison.userAccount":
		if e.complexity.GRBReviewerComparison.UserAccount == nil {
			break
		}

		return e.complexity.GRBReviewerComparison.UserAccount(childComplexity), true

	case "GRBReviewerComparison.votingRole":
		if e.complexity.GRBReviewerComparison.VotingRole == nil {
			break
		}

		return e.complexity.GRBReviewerComparison.VotingRole(childComplexity), true

	case "GRBReviewerComparisonIntake.id":
		if e.complexity.GRBReviewerComparisonIntake.ID == nil {
			break
		}

		return e.complexity.GRBReviewerComparisonIntake.ID(childComplexity), true

	case "GRBReviewerComparisonIntake.intakeCreatedAt":
		if e.complexity.GRBReviewerComparisonIntake.IntakeCreatedAt == nil {
			break
		}

		return e.complexity.GRBReviewerComparisonIntake.IntakeCreatedAt(childComplexity), true

	case "GRBReviewerComparisonIntake.requestName":
		if e.complexity.GRBReviewerComparisonIntake.RequestName == nil {
			break
		}

		return e.complexity.GRBReviewerComparisonIntake.RequestName(childComplexity), true

	case "GRBReviewerComparisonIntake.reviewers":
		if e.complexity.GRBReviewerComparisonIntake.Reviewers == nil {
			break
		}

		return e.complexity.GRBReviewerComparisonIntake.Reviewers(childComplexity), true

	case "GRBVotingInformation.grbReviewers":
		if e.complexity.GRBVotingInformation.GRBReviewers == nil {
			break
		}

		return e.complexity.GRBVotingInformation.GRBReviewers(childComplexity), true

	case "GRBVotingInformation.numberOfNoObjection":
		if e.complexity.GRBVotingInformation.NumberOfNoObjection == nil {
			break
		}

		return e.complexity.GRBVotingInformation.NumberOfNoObjection(childComplexity), true

	case "GRBVotingInformation.numberOfNotVoted":
		if e.complexity.GRBVotingInformation.NumberOfNotVoted == nil {
			break
		}

		return e.complexity.GRBVotingInformation.NumberOfNotVoted(childComplexity), true

	case "GRBVotingInformation.numberOfObjection":
		if e.complexity.GRBVotingInformation.NumberOfObjection == nil {
			break
		}

		return e.complexity.GRBVotingInformation.NumberOfObjection(childComplexity), true

	case "GRBVotingInformation.votingStatus":
		if e.complexity.GRBVotingInformation.VotingStatus == nil {
			break
		}

		return e.complexity.GRBVotingInformation.VotingStatus(childComplexity), true

	case "GovernanceRequestFeedback.author":
		if e.complexity.GovernanceRequestFeedback.Author == nil {
			break
		}

		return e.complexity.GovernanceRequestFeedback.Author(childComplexity), true

	case "GovernanceRequestFeedback.createdAt":
		if e.complexity.GovernanceRequestFeedback.CreatedAt == nil {
			break
		}

		return e.complexity.GovernanceRequestFeedback.CreatedAt(childComplexity), true

	case "GovernanceRequestFeedback.createdBy":
		if e.complexity.GovernanceRequestFeedback.CreatedBy == nil {
			break
		}

		return e.complexity.GovernanceRequestFeedback.CreatedBy(childComplexity), true

	case "GovernanceRequestFeedback.feedback":
		if e.complexity.GovernanceRequestFeedback.Feedback == nil {
			break
		}

		return e.complexity.GovernanceRequestFeedback.Feedback(childComplexity), true

	case "GovernanceRequestFeedback.id":
		if e.complexity.GovernanceRequestFeedback.ID == nil {
			break
		}

		return e.complexity.GovernanceRequestFeedback.ID(childComplexity), true

	case "GovernanceRequestFeedback.intakeId":
		if e.complexity.GovernanceRequestFeedback.IntakeID == nil {
			break
		}

		return e.complexity.GovernanceRequestFeedback.IntakeID(childComplexity), true

	case "GovernanceRequestFeedback.modifiedAt":
		if e.complexity.GovernanceRequestFeedback.ModifiedAt == nil {
			break
		}

		return e.complexity.GovernanceRequestFeedback.ModifiedAt(childComplexity), true

	case "GovernanceRequestFeedback.modifiedBy":
		if e.complexity.GovernanceRequestFeedback.ModifiedBy == nil {
			break
		}

		return e.complexity.GovernanceRequestFeedback.ModifiedBy(childComplexity), true

	case "GovernanceRequestFeedback.sourceAction":
		if e.complexity.GovernanceRequestFeedback.SourceAction == nil {
			break
		}

		return e.complexity.GovernanceRequestFeedback.SourceAction(childComplexity), true

	case "GovernanceRequestFeedback.targetForm":
		if e.complexity.GovernanceRequestFeedback.TargetForm == nil {
			break
		}

		return e.complexity.GovernanceRequestFeedback.TargetForm(childComplexity), true

	case "GovernanceRequestFeedback.type":
		if e.complexity.GovernanceRequestFeedback.Type == nil {
			break
		}

		return e.complexity.GovernanceRequestFeedback.Type(childComplexity), true

	case "ITGovTaskStatuses.bizCaseDraftStatus":
		if e.complexity.ITGovTaskStatuses.BizCaseDraftStatus == nil {
			break
		}

		return e.complexity.ITGovTaskStatuses.BizCaseDraftStatus(childComplexity), true

	case "ITGovTaskStatuses.bizCaseFinalStatus":
		if e.complexity.ITGovTaskStatuses.BizCaseFinalStatus == nil {
			break
		}

		return e.complexity.ITGovTaskStatuses.BizCaseFinalStatus(childComplexity), true

	case "ITGovTaskStatuses.decisionAndNextStepsStatus":
		if e.complexity.ITGovTaskStatuses.DecisionAndNextStepsStatus == nil {
			break
		}

		return e.complexity.ITGovTaskStatuses.DecisionAndNextStepsStatus(childComplexity), true

	case "ITGovTaskStatuses.feedbackFromInitialReviewStatus":
		if e.complexity.ITGovTaskStatuses.FeedbackFromInitialReviewStatus == nil {
			break
		}

		return e.complexity.ITGovTaskStatuses.FeedbackFromInitialReviewStatus(childComplexity), true

	case "ITGovTaskStatuses.grbMeetingStatus":
		if e.complexity.ITGovTaskStatuses.GrbMeetingStatus == nil {
			break
		}

		return e.complexity.ITGovTaskStatuses.GrbMeetingStatus(childComplexity), true

	case "ITGovTaskStatuses.grtMeetingStatus":
		if e.complexity.ITGovTaskStatuses.GrtMeetingStatus == nil {
			break
		}

		return e.complexity.ITGovTaskStatuses.GrtMeetingStatus(childComplexity), true

	case "ITGovTaskStatuses.intakeFormStatus":
		if e.complexity.ITGovTaskStatuses.IntakeFormStatus == nil {
			break
		}

		return e.complexity.ITGovTaskStatuses.IntakeFormStatus(childComplexity), true

	case "LaunchDarklySettings.signedHash":
		if e.complexity.LaunchDarklySettings.SignedHash == nil {
			break
		}

		return e.complexity.LaunchDarklySettings.SignedHash(childComplexity), true

	case "LaunchDarklySettings.userKey":
		if e.complexity.LaunchDarklySettings.UserKey == nil {
			break
		}

		return e.complexity.LaunchDarklySettings.UserKey(childComplexity), true

	case "Mutation.archiveSystemIntake":
		if e.complexity.Mutation.ArchiveSystemIntake == nil {
			break
		}

		args, err := ec.field_Mutation_archiveSystemIntake_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ArchiveSystemIntake(childComplexity, args["id"].(uuid.UUID)), true

	case "Mutation.castSystemIntakeGRBReviewerVote":
		if e.complexity.Mutation.CastSystemIntakeGRBReviewerVote == nil {
			break
		}

		args, err := ec.field_Mutation_castSystemIntakeGRBReviewerVote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CastSystemIntakeGRBReviewerVote(childComplexity, args["input"].(models.CastSystemIntakeGRBReviewerVoteInput)), true

	case "Mutation.closeTRBRequest":
		if e.complexity.Mutation.CloseTRBRequest == nil {
			break
		}

		args, err := ec.field_Mutation_closeTRBRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CloseTRBRequest(childComplexity, args["input"].(models.CloseTRBRequestInput)), true

	case "Mutation.createCedarSystemBookmark":
		if e.complexity.Mutation.CreateCedarSystemBookmark == nil {
			break
		}

		args, err := ec.field_Mutation_createCedarSystemBookmark_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCedarSystemBookmark(childComplexity, args["input"].(models.CreateCedarSystemBookmarkInput)), true

	case "Mutation.createSystemIntake":
		if e.complexity.Mutation.CreateSystemIntake == nil {
			break
		}

		args, err := ec.field_Mutation_createSystemIntake_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSystemIntake(childComplexity, args["input"].(models.CreateSystemIntakeInput)), true

	case "Mutation.createSystemIntakeActionChangeLCIDRetirementDate":
		if e.complexity.Mutation.CreateSystemIntakeActionChangeLCIDRetirementDate == nil {
			break
		}

		args, err := ec.field_Mutation_createSystemIntakeActionChangeLCIDRetirementDate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSystemIntakeActionChangeLCIDRetirementDate(childComplexity, args["input"].(models.SystemIntakeChangeLCIDRetirementDateInput)), true

	case "Mutation.createSystemIntakeActionCloseRequest":
		if e.complexity.Mutation.CreateSystemIntakeActionCloseRequest == nil {
			break
		}

		args, err := ec.field_Mutation_createSystemIntakeActionCloseRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSystemIntakeActionCloseRequest(childComplexity, args["input"].(models.SystemIntakeCloseRequestInput)), true

	case "Mutation.createSystemIntakeActionConfirmLCID":
		if e.complexity.Mutation.CreateSystemIntakeActionConfirmLcid == nil {
			break
		}

		args, err := ec.field_Mutation_createSystemIntakeActionConfirmLCID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSystemIntakeActionConfirmLcid(childComplexity, args["input"].(models.SystemIntakeConfirmLCIDInput)), true

	case "Mutation.createSystemIntakeActionExpireLCID":
		if e.complexity.Mutation.CreateSystemIntakeActionExpireLcid == nil {
			break
		}

		args, err := ec.field_Mutation_createSystemIntakeActionExpireLCID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSystemIntakeActionExpireLcid(childComplexity, args["input"].(models.SystemIntakeExpireLCIDInput)), true

	case "Mutation.createSystemIntakeActionIssueLCID":
		if e.complexity.Mutation.CreateSystemIntakeActionIssueLcid == nil {
			break
		}

		args, err := ec.field_Mutation_createSystemIntakeActionIssueLCID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSystemIntakeActionIssueLcid(childComplexity, args["input"].(models.SystemIntakeIssueLCIDInput)), true

	case "Mutation.createSystemIntakeActionNotITGovRequest":
		if e.complexity.Mutation.CreateSystemIntakeActionNotITGovRequest == nil {
			break
		}

		args, err := ec.field_Mutation_createSystemIntakeActionNotITGovRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSystemIntakeActionNotITGovRequest(childComplexity, args["input"].(models.SystemIntakeNotITGovReqInput)), true

	case "Mutation.createSystemIntakeActionProgressToNewStep":
		if e.complexity.Mutation.CreateSystemIntakeActionProgressToNewStep == nil {
			break
		}

		args, err := ec.field_Mutation_createSystemIntakeActionProgressToNewStep_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSystemIntakeActionProgressToNewStep(childComplexity, args["input"].(models.SystemIntakeProgressToNewStepsInput)), true

	case "Mutation.createSystemIntakeActionRejectIntake":
		if e.complexity.Mutation.CreateSystemIntakeActionRejectIntake == nil {
			break
		}

		args, err := ec.field_Mutation_createSystemIntakeActionRejectIntake_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSystemIntakeActionRejectIntake(childComplexity, args["input"].(models.SystemIntakeRejectIntakeInput)), true

	case "Mutation.createSystemIntakeActionReopenRequest":
		if e.complexity.Mutation.CreateSystemIntakeActionReopenRequest == nil {
			break
		}

		args, err := ec.field_Mutation_createSystemIntakeActionReopenRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSystemIntakeActionReopenRequest(childComplexity, args["input"].(models.SystemIntakeReopenRequestInput)), true

	case "Mutation.createSystemIntakeActionRequestEdits":
		if e.complexity.Mutation.CreateSystemIntakeActionRequestEdits == nil {
			break
		}

		args, err := ec.field_Mutation_createSystemIntakeActionRequestEdits_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSystemIntakeActionRequestEdits(childComplexity, args["input"].(models.SystemIntakeRequestEditsInput)), true

	case "Mutation.createSystemIntakeActionRetireLCID":
		if e.complexity.Mutation.CreateSystemIntakeActionRetireLcid == nil {
			break
		}

		args, err := ec.field_Mutation_createSystemIntakeActionRetireLCID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSystemIntakeActionRetireLcid(childComplexity, args["input"].(models.SystemIntakeRetireLCIDInput)), true

	case "Mutation.createSystemIntakeActionUnretireLCID":
		if e.complexity.Mutation.CreateSystemIntakeActionUnretireLcid == nil {
			break
		}

		args, err := ec.field_Mutation_createSystemIntakeActionUnretireLCID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSystemIntakeActionUnretireLcid(childComplexity, args["input"].(models.SystemIntakeUnretireLCIDInput)), true

	case "Mutation.createSystemIntakeActionUpdateLCID":
		if e.complexity.Mutation.CreateSystemIntakeActionUpdateLcid == nil {
			break
		}

		args, err := ec.field_Mutation_createSystemIntakeActionUpdateLCID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSystemIntakeActionUpdateLcid(childComplexity, args["input"].(models.SystemIntakeUpdateLCIDInput)), true

	case "Mutation.createSystemIntakeContact":
		if e.complexity.Mutation.CreateSystemIntakeContact == nil {
			break
		}

		args, err := ec.field_Mutation_createSystemIntakeContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSystemIntakeContact(childComplexity, args["input"].(models.CreateSystemIntakeContactInput)), true

	case "Mutation.createSystemIntakeDocument":
		if e.complexity.Mutation.CreateSystemIntakeDocument == nil {
			break
		}

		args, err := ec.field_Mutation_createSystemIntakeDocument_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSystemIntakeDocument(childComplexity, args["input"].(models.CreateSystemIntakeDocumentInput)), true

	case "Mutation.createSystemIntakeGRBDiscussionPost":
		if e.complexity.Mutation.CreateSystemIntakeGRBDiscussionPost == nil {
			break
		}

		args, err := ec.field_Mutation_createSystemIntakeGRBDiscussionPost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSystemIntakeGRBDiscussionPost(childComplexity, args["input"].(models.CreateSystemIntakeGRBDiscussionPostInput)), true

	case "Mutation.createSystemIntakeGRBDiscussionReply":
		if e.complexity.Mutation.CreateSystemIntakeGRBDiscussionReply == nil {
			break
		}

		args, err := ec.field_Mutation_createSystemIntakeGRBDiscussionReply_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSystemIntakeGRBDiscussionReply(childComplexity, args["input"].(models.CreateSystemIntakeGRBDiscussionReplyInput)), true

	case "Mutation.createSystemIntakeGRBReviewers":
		if e.complexity.Mutation.CreateSystemIntakeGRBReviewers == nil {
			break
		}

		args, err := ec.field_Mutation_createSystemIntakeGRBReviewers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSystemIntakeGRBReviewers(childComplexity, args["input"].(models.CreateSystemIntakeGRBReviewersInput)), true

	case "Mutation.createSystemIntakeNote":
		if e.complexity.Mutation.CreateSystemIntakeNote == nil {
			break
		}

		args, err := ec.field_Mutation_createSystemIntakeNote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSystemIntakeNote(childComplexity, args["input"].(models.CreateSystemIntakeNoteInput)), true

	case "Mutation.createTRBAdminNoteConsultSession":
		if e.complexity.Mutation.CreateTRBAdminNoteConsultSession == nil {
			break
		}

		args, err := ec.field_Mutation_createTRBAdminNoteConsultSession_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTRBAdminNoteConsultSession(childComplexity, args["input"].(models.CreateTRBAdminNoteConsultSessionInput)), true

	case "Mutation.createTRBAdminNoteGeneralRequest":
		if e.complexity.Mutation.CreateTRBAdminNoteGeneralRequest == nil {
			break
		}

		args, err := ec.field_Mutation_createTRBAdminNoteGeneralRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTRBAdminNoteGeneralRequest(childComplexity, args["input"].(models.CreateTRBAdminNoteGeneralRequestInput)), true

	case "Mutation.createTRBAdminNoteGuidanceLetter":
		if e.complexity.Mutation.CreateTRBAdminNoteGuidanceLetter == nil {
			break
		}

		args, err := ec.field_Mutation_createTRBAdminNoteGuidanceLetter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTRBAdminNoteGuidanceLetter(childComplexity, args["input"].(models.CreateTRBAdminNoteGuidanceLetterInput)), true

	case "Mutation.createTRBAdminNoteInitialRequestForm":
		if e.complexity.Mutation.CreateTRBAdminNoteInitialRequestForm == nil {
			break
		}

		args, err := ec.field_Mutation_createTRBAdminNoteInitialRequestForm_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTRBAdminNoteInitialRequestForm(childComplexity, args["input"].(models.CreateTRBAdminNoteInitialRequestFormInput)), true

	case "Mutation.createTRBAdminNoteSupportingDocuments":
		if e.complexity.Mutation.CreateTRBAdminNoteSupportingDocuments == nil {
			break
		}

		args, err := ec.field_Mutation_createTRBAdminNoteSupportingDocuments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTRBAdminNoteSupportingDocuments(childComplexity, args["input"].(models.CreateTRBAdminNoteSupportingDocumentsInput)), true

	case "Mutation.createTRBGuidanceLetter":
		if e.complexity.Mutation.CreateTRBGuidanceLetter == nil {
			break
		}

		args, err := ec.field_Mutation_createTRBGuidanceLetter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTRBGuidanceLetter(childComplexity, args["trbRequestId"].(uuid.UUID)), true

	case "Mutation.createTRBGuidanceLetterInsight":
		if e.complexity.Mutation.CreateTRBGuidanceLetterInsight == nil {
			break
		}

		args, err := ec.field_Mutation_createTRBGuidanceLetterInsight_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTRBGuidanceLetterInsight(childComplexity, args["input"].(models.CreateTRBGuidanceLetterInsightInput)), true

	case "Mutation.createTRBRequest":
		if e.complexity.Mutation.CreateTRBRequest == nil {
			break
		}

		args, err := ec.field_Mutation_createTRBRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTRBRequest(childComplexity, args["requestType"].(models.TRBRequestType)), true

	case "Mutation.createTRBRequestAttendee":
		if e.complexity.Mutation.CreateTRBRequestAttendee == nil {
			break
		}

		args, err := ec.field_Mutation_createTRBRequestAttendee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTRBRequestAttendee(childComplexity, args["input"].(models.CreateTRBRequestAttendeeInput)), true

	case "Mutation.createTRBRequestDocument":
		if e.complexity.Mutation.CreateTRBRequestDocument == nil {
			break
		}

		args, err := ec.field_Mutation_createTRBRequestDocument_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTRBRequestDocument(childComplexity, args["input"].(models.CreateTRBRequestDocumentInput)), true

	case "Mutation.createTRBRequestFeedback":
		if e.complexity.Mutation.CreateTRBRequestFeedback == nil {
			break
		}

		args, err := ec.field_Mutation_createTRBRequestFeedback_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTRBRequestFeedback(childComplexity, args["input"].(models.CreateTRBRequestFeedbackInput)), true

	case "Mutation.createTrbLeadOption":
		if e.complexity.Mutation.CreateTrbLeadOption == nil {
			break
		}

		args, err := ec.field_Mutation_createTrbLeadOption_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTrbLeadOption(childComplexity, args["eua"].(string)), true

	case "Mutation.deleteCedarSystemBookmark":
		if e.complexity.Mutation.DeleteCedarSystemBookmark == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCedarSystemBookmark_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCedarSystemBookmark(childComplexity, args["input"].(models.CreateCedarSystemBookmarkInput)), true

	case "Mutation.deleteSystemIntakeContact":
		if e.complexity.Mutation.DeleteSystemIntakeContact == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSystemIntakeContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSystemIntakeContact(childComplexity, args["input"].(models.DeleteSystemIntakeContactInput)), true

	case "Mutation.deleteSystemIntakeDocument":
		if e.complexity.Mutation.DeleteSystemIntakeDocument == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSystemIntakeDocument_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSystemIntakeDocument(childComplexity, args["id"].(uuid.UUID)), true

	case "Mutation.deleteSystemIntakeGRBPresentationLinks":
		if e.complexity.Mutation.DeleteSystemIntakeGRBPresentationLinks == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSystemIntakeGRBPresentationLinks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSystemIntakeGRBPresentationLinks(childComplexity, args["input"].(models.DeleteSystemIntakeGRBPresentationLinksInput)), true

	case "Mutation.deleteSystemIntakeGRBReviewer":
		if e.complexity.Mutation.DeleteSystemIntakeGRBReviewer == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSystemIntakeGRBReviewer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSystemIntakeGRBReviewer(childComplexity, args["input"].(models.DeleteSystemIntakeGRBReviewerInput)), true

	case "Mutation.deleteTRBGuidanceLetterInsight":
		if e.complexity.Mutation.DeleteTRBGuidanceLetterInsight == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTRBGuidanceLetterInsight_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTRBGuidanceLetterInsight(childComplexity, args["id"].(uuid.UUID)), true

	case "Mutation.deleteTRBRequestAttendee":
		if e.complexity.Mutation.DeleteTRBRequestAttendee == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTRBRequestAttendee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTRBRequestAttendee(childComplexity, args["id"].(uuid.UUID)), true

	case "Mutation.deleteTRBRequestDocument":
		if e.complexity.Mutation.DeleteTRBRequestDocument == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTRBRequestDocument_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTRBRequestDocument(childComplexity, args["id"].(uuid.UUID)), true

	case "Mutation.deleteTRBRequestFundingSources":
		if e.complexity.Mutation.DeleteTRBRequestFundingSources == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTRBRequestFundingSources_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTRBRequestFundingSources(childComplexity, args["input"].(models.DeleteTRBRequestFundingSourcesInput)), true

	case "Mutation.deleteTrbLeadOption":
		if e.complexity.Mutation.DeleteTrbLeadOption == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTrbLeadOption_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTrbLeadOption(childComplexity, args["eua"].(string)), true

	case "Mutation.manuallyEndSystemIntakeGRBReviewAsyncVoting":
		if e.complexity.Mutation.ManuallyEndSystemIntakeGRBReviewAsyncVoting == nil {
			break
		}

		args, err := ec.field_Mutation_manuallyEndSystemIntakeGRBReviewAsyncVoting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManuallyEndSystemIntakeGRBReviewAsyncVoting(childComplexity, args["systemIntakeID"].(uuid.UUID)), true

	case "Mutation.reopenTrbRequest":
		if e.complexity.Mutation.ReopenTrbRequest == nil {
			break
		}

		args, err := ec.field_Mutation_reopenTrbRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReopenTrbRequest(childComplexity, args["input"].(models.ReopenTRBRequestInput)), true

	case "Mutation.requestReviewForTRBGuidanceLetter":
		if e.complexity.Mutation.RequestReviewForTRBGuidanceLetter == nil {
			break
		}

		args, err := ec.field_Mutation_requestReviewForTRBGuidanceLetter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RequestReviewForTRBGuidanceLetter(childComplexity, args["id"].(uuid.UUID)), true

	case "Mutation.sendCantFindSomethingEmail":
		if e.complexity.Mutation.SendCantFindSomethingEmail == nil {
			break
		}

		args, err := ec.field_Mutation_sendCantFindSomethingEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SendCantFindSomethingEmail(childComplexity, args["input"].(models.SendCantFindSomethingEmailInput)), true

	case "Mutation.sendFeedbackEmail":
		if e.complexity.Mutation.SendFeedbackEmail == nil {
			break
		}

		args, err := ec.field_Mutation_sendFeedbackEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SendFeedbackEmail(childComplexity, args["input"].(models.SendFeedbackEmailInput)), true

	case "Mutation.sendGRBReviewPresentationDeckReminderEmail":
		if e.complexity.Mutation.SendGRBReviewPresentationDeckReminderEmail == nil {
			break
		}

		args, err := ec.field_Mutation_sendGRBReviewPresentationDeckReminderEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SendGRBReviewPresentationDeckReminderEmail(childComplexity, args["systemIntakeID"].(uuid.UUID)), true

	case "Mutation.sendReportAProblemEmail":
		if e.complexity.Mutation.SendReportAProblemEmail == nil {
			break
		}

		args, err := ec.field_Mutation_sendReportAProblemEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SendReportAProblemEmail(childComplexity, args["input"].(models.SendReportAProblemEmailInput)), true

	case "Mutation.sendTRBGuidanceLetter":
		if e.complexity.Mutation.SendTRBGuidanceLetter == nil {
			break
		}

		args, err := ec.field_Mutation_sendTRBGuidanceLetter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SendTRBGuidanceLetter(childComplexity, args["input"].(models.SendTRBGuidanceLetterInput)), true

	case "Mutation.setRolesForUserOnSystem":
		if e.complexity.Mutation.SetRolesForUserOnSystem == nil {
			break
		}

		args, err := ec.field_Mutation_setRolesForUserOnSystem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetRolesForUserOnSystem(childComplexity, args["input"].(models.SetRolesForUserOnSystemInput)), true

	case "Mutation.setSystemIntakeGRBPresentationLinks":
		if e.complexity.Mutation.SetSystemIntakeGRBPresentationLinks == nil {
			break
		}

		args, err := ec.field_Mutation_setSystemIntakeGRBPresentationLinks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetSystemIntakeGRBPresentationLinks(childComplexity, args["input"].(models.SystemIntakeGRBPresentationLinksInput)), true

	case "Mutation.setSystemIntakeRelationExistingService":
		if e.complexity.Mutation.SetSystemIntakeRelationExistingService == nil {
			break
		}

		args, err := ec.field_Mutation_setSystemIntakeRelationExistingService_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetSystemIntakeRelationExistingService(childComplexity, args["input"].(*models.SetSystemIntakeRelationExistingServiceInput)), true

	case "Mutation.setSystemIntakeRelationExistingSystem":
		if e.complexity.Mutation.SetSystemIntakeRelationExistingSystem == nil {
			break
		}

		args, err := ec.field_Mutation_setSystemIntakeRelationExistingSystem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetSystemIntakeRelationExistingSystem(childComplexity, args["input"].(*models.SetSystemIntakeRelationExistingSystemInput)), true

	case "Mutation.setSystemIntakeRelationNewSystem":
		if e.complexity.Mutation.SetSystemIntakeRelationNewSystem == nil {
			break
		}

		args, err := ec.field_Mutation_setSystemIntakeRelationNewSystem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetSystemIntakeRelationNewSystem(childComplexity, args["input"].(*models.SetSystemIntakeRelationNewSystemInput)), true

	case "Mutation.setTRBAdminNoteArchived":
		if e.complexity.Mutation.SetTRBAdminNoteArchived == nil {
			break
		}

		args, err := ec.field_Mutation_setTRBAdminNoteArchived_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetTRBAdminNoteArchived(childComplexity, args["id"].(uuid.UUID), args["isArchived"].(bool)), true

	case "Mutation.setTRBRequestRelationExistingService":
		if e.complexity.Mutation.SetTRBRequestRelationExistingService == nil {
			break
		}

		args, err := ec.field_Mutation_setTRBRequestRelationExistingService_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetTRBRequestRelationExistingService(childComplexity, args["input"].(models.SetTRBRequestRelationExistingServiceInput)), true

	case "Mutation.setTRBRequestRelationExistingSystem":
		if e.complexity.Mutation.SetTRBRequestRelationExistingSystem == nil {
			break
		}

		args, err := ec.field_Mutation_setTRBRequestRelationExistingSystem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetTRBRequestRelationExistingSystem(childComplexity, args["input"].(models.SetTRBRequestRelationExistingSystemInput)), true

	case "Mutation.setTRBRequestRelationNewSystem":
		if e.complexity.Mutation.SetTRBRequestRelationNewSystem == nil {
			break
		}

		args, err := ec.field_Mutation_setTRBRequestRelationNewSystem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetTRBRequestRelationNewSystem(childComplexity, args["input"].(models.SetTRBRequestRelationNewSystemInput)), true

	case "Mutation.startGRBReview":
		if e.complexity.Mutation.StartGRBReview == nil {
			break
		}

		args, err := ec.field_Mutation_startGRBReview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StartGRBReview(childComplexity, args["input"].(models.StartGRBReviewInput)), true

	case "Mutation.submitIntake":
		if e.complexity.Mutation.SubmitIntake == nil {
			break
		}

		args, err := ec.field_Mutation_submitIntake_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SubmitIntake(childComplexity, args["input"].(models.SubmitIntakeInput)), true

	case "Mutation.unlinkSystemIntakeRelation":
		if e.complexity.Mutation.UnlinkSystemIntakeRelation == nil {
			break
		}

		args, err := ec.field_Mutation_unlinkSystemIntakeRelation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnlinkSystemIntakeRelation(childComplexity, args["intakeID"].(uuid.UUID)), true

	case "Mutation.unlinkTRBRequestRelation":
		if e.complexity.Mutation.UnlinkTRBRequestRelation == nil {
			break
		}

		args, err := ec.field_Mutation_unlinkTRBRequestRelation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnlinkTRBRequestRelation(childComplexity, args["trbRequestID"].(uuid.UUID)), true

	case "Mutation.updateSystemIntakeAdminLead":
		if e.complexity.Mutation.UpdateSystemIntakeAdminLead == nil {
			break
		}

		args, err := ec.field_Mutation_updateSystemIntakeAdminLead_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSystemIntakeAdminLead(childComplexity, args["input"].(models.UpdateSystemIntakeAdminLeadInput)), true

	case "Mutation.updateSystemIntakeContact":
		if e.complexity.Mutation.UpdateSystemIntakeContact == nil {
			break
		}

		args, err := ec.field_Mutation_updateSystemIntakeContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSystemIntakeContact(childComplexity, args["input"].(models.UpdateSystemIntakeContactInput)), true

	case "Mutation.updateSystemIntakeContactDetails":
		if e.complexity.Mutation.UpdateSystemIntakeContactDetails == nil {
			break
		}

		args, err := ec.field_Mutation_updateSystemIntakeContactDetails_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSystemIntakeContactDetails(childComplexity, args["input"].(models.UpdateSystemIntakeContactDetailsInput)), true

	case "Mutation.updateSystemIntakeContractDetails":
		if e.complexity.Mutation.UpdateSystemIntakeContractDetails == nil {
			break
		}

		args, err := ec.field_Mutation_updateSystemIntakeContractDetails_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSystemIntakeContractDetails(childComplexity, args["input"].(models.UpdateSystemIntakeContractDetailsInput)), true

	case "Mutation.updateSystemIntakeGRBReviewFormPresentationAsync":
		if e.complexity.Mutation.UpdateSystemIntakeGRBReviewFormPresentationAsync == nil {
			break
		}

		args, err := ec.field_Mutation_updateSystemIntakeGRBReviewFormPresentationAsync_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSystemIntakeGRBReviewFormPresentationAsync(childComplexity, args["input"].(models.UpdateSystemIntakeGRBReviewFormInputPresentationAsync)), true

	case "Mutation.updateSystemIntakeGRBReviewFormPresentationStandard":
		if e.complexity.Mutation.UpdateSystemIntakeGRBReviewFormPresentationStandard == nil {
			break
		}

		args, err := ec.field_Mutation_updateSystemIntakeGRBReviewFormPresentationStandard_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSystemIntakeGRBReviewFormPresentationStandard(childComplexity, args["input"].(models.UpdateSystemIntakeGRBReviewFormInputPresentationStandard)), true

	case "Mutation.updateSystemIntakeGRBReviewFormTimeframeAsync":
		if e.complexity.Mutation.UpdateSystemIntakeGRBReviewFormTimeframeAsync == nil {
			break
		}

		args, err := ec.field_Mutation_updateSystemIntakeGRBReviewFormTimeframeAsync_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSystemIntakeGRBReviewFormTimeframeAsync(childComplexity, args["input"].(models.UpdateSystemIntakeGRBReviewFormInputTimeframeAsync)), true

	case "Mutation.updateSystemIntakeGRBReviewType":
		if e.complexity.Mutation.UpdateSystemIntakeGRBReviewType == nil {
			break
		}

		args, err := ec.field_Mutation_updateSystemIntakeGRBReviewType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSystemIntakeGRBReviewType(childComplexity, args["input"].(models.UpdateSystemIntakeGRBReviewTypeInput)), true

	case "Mutation.updateSystemIntakeGRBReviewer":
		if e.complexity.Mutation.UpdateSystemIntakeGRBReviewer == nil {
			break
		}

		args, err := ec.field_Mutation_updateSystemIntakeGRBReviewer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSystemIntakeGRBReviewer(childComplexity, args["input"].(models.UpdateSystemIntakeGRBReviewerInput)), true

	case "Mutation.updateSystemIntakeLinkedCedarSystem":
		if e.complexity.Mutation.UpdateSystemIntakeLinkedCedarSystem == nil {
			break
		}

		args, err := ec.field_Mutation_updateSystemIntakeLinkedCedarSystem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSystemIntakeLinkedCedarSystem(childComplexity, args["input"].(models.UpdateSystemIntakeLinkedCedarSystemInput)), true

	case "Mutation.updateSystemIntakeNote":
		if e.complexity.Mutation.UpdateSystemIntakeNote == nil {
			break
		}

		args, err := ec.field_Mutation_updateSystemIntakeNote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSystemIntakeNote(childComplexity, args["input"].(models.UpdateSystemIntakeNoteInput)), true

	case "Mutation.updateSystemIntakeRequestDetails":
		if e.complexity.Mutation.UpdateSystemIntakeRequestDetails == nil {
			break
		}

		args, err := ec.field_Mutation_updateSystemIntakeRequestDetails_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSystemIntakeRequestDetails(childComplexity, args["input"].(models.UpdateSystemIntakeRequestDetailsInput)), true

	case "Mutation.updateSystemIntakeRequestType":
		if e.complexity.Mutation.UpdateSystemIntakeRequestType == nil {
			break
		}

		args, err := ec.field_Mutation_updateSystemIntakeRequestType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSystemIntakeRequestType(childComplexity, args["id"].(uuid.UUID), args["newType"].(models.SystemIntakeRequestType)), true

	case "Mutation.updateSystemIntakeReviewDates":
		if e.complexity.Mutation.UpdateSystemIntakeReviewDates == nil {
			break
		}

		args, err := ec.field_Mutation_updateSystemIntakeReviewDates_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSystemIntakeReviewDates(childComplexity, args["input"].(models.UpdateSystemIntakeReviewDatesInput)), true

	case "Mutation.updateTRBGuidanceLetter":
		if e.complexity.Mutation.UpdateTRBGuidanceLetter == nil {
			break
		}

		args, err := ec.field_Mutation_updateTRBGuidanceLetter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTRBGuidanceLetter(childComplexity, args["input"].(map[string]interface{})), true

	case "Mutation.updateTRBGuidanceLetterInsight":
		if e.complexity.Mutation.UpdateTRBGuidanceLetterInsight == nil {
			break
		}

		args, err := ec.field_Mutation_updateTRBGuidanceLetterInsight_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTRBGuidanceLetterInsight(childComplexity, args["input"].(map[string]interface{})), true

	case "Mutation.updateTRBGuidanceLetterInsightOrder":
		if e.complexity.Mutation.UpdateTRBGuidanceLetterInsightOrder == nil {
			break
		}

		args, err := ec.field_Mutation_updateTRBGuidanceLetterInsightOrder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTRBGuidanceLetterInsightOrder(childComplexity, args["input"].(models.UpdateTRBGuidanceLetterInsightOrderInput)), true

	case "Mutation.updateTRBRequest":
		if e.complexity.Mutation.UpdateTRBRequest == nil {
			break
		}

		args, err := ec.field_Mutation_updateTRBRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTRBRequest(childComplexity, args["id"].(uuid.UUID), args["changes"].(map[string]interface{})), true

	case "Mutation.updateTRBRequestAttendee":
		if e.complexity.Mutation.UpdateTRBRequestAttendee == nil {
			break
		}

		args, err := ec.field_Mutation_updateTRBRequestAttendee_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTRBRequestAttendee(childComplexity, args["input"].(models.UpdateTRBRequestAttendeeInput)), true

	case "Mutation.updateTRBRequestConsultMeetingTime":
		if e.complexity.Mutation.UpdateTRBRequestConsultMeetingTime == nil {
			break
		}

		args, err := ec.field_Mutation_updateTRBRequestConsultMeetingTime_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTRBRequestConsultMeetingTime(childComplexity, args["input"].(models.UpdateTRBRequestConsultMeetingTimeInput)), true

	case "Mutation.updateTRBRequestForm":
		if e.complexity.Mutation.UpdateTRBRequestForm == nil {
			break
		}

		args, err := ec.field_Mutation_updateTRBRequestForm_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTRBRequestForm(childComplexity, args["input"].(map[string]interface{})), true

	case "Mutation.updateTRBRequestFundingSources":
		if e.complexity.Mutation.UpdateTRBRequestFundingSources == nil {
			break
		}

		args, err := ec.field_Mutation_updateTRBRequestFundingSources_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTRBRequestFundingSources(childComplexity, args["input"].(models.UpdateTRBRequestFundingSourcesInput)), true

	case "Mutation.updateTRBRequestTRBLead":
		if e.complexity.Mutation.UpdateTRBRequestTRBLead == nil {
			break
		}

		args, err := ec.field_Mutation_updateTRBRequestTRBLead_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTRBRequestTRBLead(childComplexity, args["input"].(models.UpdateTRBRequestTRBLeadInput)), true

	case "Mutation.uploadSystemIntakeGRBPresentationDeck":
		if e.complexity.Mutation.UploadSystemIntakeGRBPresentationDeck == nil {
			break
		}

		args, err := ec.field_Mutation_uploadSystemIntakeGRBPresentationDeck_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UploadSystemIntakeGRBPresentationDeck(childComplexity, args["input"].(models.UploadSystemIntakeGRBPresentationDeckInput)), true

	case "Query.cedarAuthorityToOperate":
		if e.complexity.Query.CedarAuthorityToOperate == nil {
			break
		}

		args, err := ec.field_Query_cedarAuthorityToOperate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CedarAuthorityToOperate(childComplexity, args["cedarSystemID"].(string)), true

	case "Query.cedarBudget":
		if e.complexity.Query.CedarBudget == nil {
			break
		}

		args, err := ec.field_Query_cedarBudget_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CedarBudget(childComplexity, args["cedarSystemID"].(string)), true

	case "Query.cedarBudgetSystemCost":
		if e.complexity.Query.CedarBudgetSystemCost == nil {
			break
		}

		args, err := ec.field_Query_cedarBudgetSystemCost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CedarBudgetSystemCost(childComplexity, args["cedarSystemID"].(string)), true

	case "Query.cedarContractsBySystem":
		if e.complexity.Query.CedarContractsBySystem == nil {
			break
		}

		args, err := ec.field_Query_cedarContractsBySystem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CedarContractsBySystem(childComplexity, args["cedarSystemId"].(string)), true

	case "Query.cedarPersonsByCommonName":
		if e.complexity.Query.CedarPersonsByCommonName == nil {
			break
		}

		args, err := ec.field_Query_cedarPersonsByCommonName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CedarPersonsByCommonName(childComplexity, args["commonName"].(string)), true

	case "Query.cedarSoftwareProducts":
		if e.complexity.Query.CedarSoftwareProducts == nil {
			break
		}

		args, err := ec.field_Query_cedarSoftwareProducts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CedarSoftwareProducts(childComplexity, args["cedarSystemId"].(string)), true

	case "Query.cedarSubSystems":
		if e.complexity.Query.CedarSubSystems == nil {
			break
		}

		args, err := ec.field_Query_cedarSubSystems_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CedarSubSystems(childComplexity, args["cedarSystemId"].(string)), true

	case "Query.cedarSystem":
		if e.complexity.Query.CedarSystem == nil {
			break
		}

		args, err := ec.field_Query_cedarSystem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CedarSystem(childComplexity, args["cedarSystemId"].(string)), true

	case "Query.cedarSystemBookmarks":
		if e.complexity.Query.CedarSystemBookmarks == nil {
			break
		}

		return e.complexity.Query.CedarSystemBookmarks(childComplexity), true

	case "Query.cedarSystemDetails":
		if e.complexity.Query.CedarSystemDetails == nil {
			break
		}

		args, err := ec.field_Query_cedarSystemDetails_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CedarSystemDetails(childComplexity, args["cedarSystemId"].(string)), true

	case "Query.cedarSystems":
		if e.complexity.Query.CedarSystems == nil {
			break
		}

		return e.complexity.Query.CedarSystems(childComplexity), true

	case "Query.cedarThreat":
		if e.complexity.Query.CedarThreat == nil {
			break
		}

		args, err := ec.field_Query_cedarThreat_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CedarThreat(childComplexity, args["cedarSystemId"].(string)), true

	case "Query.compareGRBReviewersByIntakeID":
		if e.complexity.Query.CompareGRBReviewersByIntakeID == nil {
			break
		}

		args, err := ec.field_Query_compareGRBReviewersByIntakeID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CompareGRBReviewersByIntakeID(childComplexity, args["id"].(uuid.UUID)), true

	case "Query.currentUser":
		if e.complexity.Query.CurrentUser == nil {
			break
		}

		return e.complexity.Query.CurrentUser(childComplexity), true

	case "Query.deployments":
		if e.complexity.Query.Deployments == nil {
			break
		}

		args, err := ec.field_Query_deployments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Deployments(childComplexity, args["cedarSystemId"].(string), args["deploymentType"].(*string), args["state"].(*string), args["status"].(*string)), true

	case "Query.exchanges":
		if e.complexity.Query.Exchanges == nil {
			break
		}

		args, err := ec.field_Query_exchanges_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Exchanges(childComplexity, args["cedarSystemId"].(string)), true

	case "Query.myCedarSystems":
		if e.complexity.Query.MyCedarSystems == nil {
			break
		}

		return e.complexity.Query.MyCedarSystems(childComplexity), true

	case "Query.mySystemIntakes":
		if e.complexity.Query.MySystemIntakes == nil {
			break
		}

		return e.complexity.Query.MySystemIntakes(childComplexity), true

	case "Query.myTrbRequests":
		if e.complexity.Query.MyTrbRequests == nil {
			break
		}

		args, err := ec.field_Query_myTrbRequests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MyTrbRequests(childComplexity, args["archived"].(bool)), true

	case "Query.roleTypes":
		if e.complexity.Query.RoleTypes == nil {
			break
		}

		return e.complexity.Query.RoleTypes(childComplexity), true

	case "Query.roles":
		if e.complexity.Query.Roles == nil {
			break
		}

		args, err := ec.field_Query_roles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Roles(childComplexity, args["cedarSystemId"].(string), args["roleTypeID"].(*string)), true

	case "Query.systemIntake":
		if e.complexity.Query.SystemIntake == nil {
			break
		}

		args, err := ec.field_Query_systemIntake_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SystemIntake(childComplexity, args["id"].(uuid.UUID)), true

	case "Query.systemIntakeContacts":
		if e.complexity.Query.SystemIntakeContacts == nil {
			break
		}

		args, err := ec.field_Query_systemIntakeContacts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SystemIntakeContacts(childComplexity, args["id"].(uuid.UUID)), true

	case "Query.systemIntakes":
		if e.complexity.Query.SystemIntakes == nil {
			break
		}

		args, err := ec.field_Query_systemIntakes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SystemIntakes(childComplexity, args["openRequests"].(bool)), true

	case "Query.systemIntakesWithLcids":
		if e.complexity.Query.SystemIntakesWithLcids == nil {
			break
		}

		return e.complexity.Query.SystemIntakesWithLcids(childComplexity), true

	case "Query.systemIntakesWithReviewRequested":
		if e.complexity.Query.SystemIntakesWithReviewRequested == nil {
			break
		}

		return e.complexity.Query.SystemIntakesWithReviewRequested(childComplexity), true

	case "Query.trbAdminNote":
		if e.complexity.Query.TrbAdminNote == nil {
			break
		}

		args, err := ec.field_Query_trbAdminNote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrbAdminNote(childComplexity, args["id"].(uuid.UUID)), true

	case "Query.trbLeadOptions":
		if e.complexity.Query.TrbLeadOptions == nil {
			break
		}

		return e.complexity.Query.TrbLeadOptions(childComplexity), true

	case "Query.trbRequest":
		if e.complexity.Query.TrbRequest == nil {
			break
		}

		args, err := ec.field_Query_trbRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrbRequest(childComplexity, args["id"].(uuid.UUID)), true

	case "Query.trbRequests":
		if e.complexity.Query.TrbRequests == nil {
			break
		}

		args, err := ec.field_Query_trbRequests_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TrbRequests(childComplexity, args["archived"].(bool)), true

	case "Query.urls":
		if e.complexity.Query.Urls == nil {
			break
		}

		args, err := ec.field_Query_urls_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Urls(childComplexity, args["cedarSystemId"].(string)), true

	case "Query.userAccount":
		if e.complexity.Query.UserAccount == nil {
			break
		}

		args, err := ec.field_Query_userAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserAccount(childComplexity, args["username"].(string)), true

	case "SystemIntake.acquisitionMethods":
		if e.complexity.SystemIntake.AcquisitionMethods == nil {
			break
		}

		return e.complexity.SystemIntake.AcquisitionMethods(childComplexity), true

	case "SystemIntake.actions":
		if e.complexity.SystemIntake.Actions == nil {
			break
		}

		return e.complexity.SystemIntake.Actions(childComplexity), true

	case "SystemIntake.adminLead":
		if e.complexity.SystemIntake.AdminLead == nil {
			break
		}

		return e.complexity.SystemIntake.AdminLead(childComplexity), true

	case "SystemIntake.annualSpending":
		if e.complexity.SystemIntake.AnnualSpending == nil {
			break
		}

		return e.complexity.SystemIntake.AnnualSpending(childComplexity), true

	case "SystemIntake.archivedAt":
		if e.complexity.SystemIntake.ArchivedAt == nil {
			break
		}

		return e.complexity.SystemIntake.ArchivedAt(childComplexity), true

	case "SystemIntake.businessCase":
		if e.complexity.SystemIntake.BusinessCase == nil {
			break
		}

		return e.complexity.SystemIntake.BusinessCase(childComplexity), true

	case "SystemIntake.businessCaseId":
		if e.complexity.SystemIntake.BusinessCaseID == nil {
			break
		}

		return e.complexity.SystemIntake.BusinessCaseID(childComplexity), true

	case "SystemIntake.businessNeed":
		if e.complexity.SystemIntake.BusinessNeed == nil {
			break
		}

		return e.complexity.SystemIntake.BusinessNeed(childComplexity), true

	case "SystemIntake.businessOwner":
		if e.complexity.SystemIntake.BusinessOwner == nil {
			break
		}

		return e.complexity.SystemIntake.BusinessOwner(childComplexity), true

	case "SystemIntake.businessSolution":
		if e.complexity.SystemIntake.BusinessSolution == nil {
			break
		}

		return e.complexity.SystemIntake.BusinessSolution(childComplexity), true

	case "SystemIntake.cedarSystemId":
		if e.complexity.SystemIntake.CedarSystemID == nil {
			break
		}

		return e.complexity.SystemIntake.CedarSystemID(childComplexity), true

	case "SystemIntake.contract":
		if e.complexity.SystemIntake.Contract == nil {
			break
		}

		return e.complexity.SystemIntake.Contract(childComplexity), true

	case "SystemIntake.contractName":
		if e.complexity.SystemIntake.ContractName == nil {
			break
		}

		return e.complexity.SystemIntake.ContractName(childComplexity), true

	case "SystemIntake.contractNumbers":
		if e.complexity.SystemIntake.ContractNumbers == nil {
			break
		}

		return e.complexity.SystemIntake.ContractNumbers(childComplexity), true

	case "SystemIntake.costs":
		if e.complexity.SystemIntake.Costs == nil {
			break
		}

		return e.complexity.SystemIntake.Costs(childComplexity), true

	case "SystemIntake.createdAt":
		if e.complexity.SystemIntake.CreatedAt == nil {
			break
		}

		return e.complexity.SystemIntake.CreatedAt(childComplexity), true

	case "SystemIntake.currentStage":
		if e.complexity.SystemIntake.CurrentStage == nil {
			break
		}

		return e.complexity.SystemIntake.CurrentStage(childComplexity), true

	case "SystemIntake.decidedAt":
		if e.complexity.SystemIntake.DecidedAt == nil {
			break
		}

		return e.complexity.SystemIntake.DecidedAt(childComplexity), true

	case "SystemIntake.decisionNextSteps":
		if e.complexity.SystemIntake.DecisionNextSteps == nil {
			break
		}

		return e.complexity.SystemIntake.DecisionNextSteps(childComplexity), true

	case "SystemIntake.decisionState":
		if e.complexity.SystemIntake.DecisionState == nil {
			break
		}

		return e.complexity.SystemIntake.DecisionState(childComplexity), true

	case "SystemIntake.documents":
		if e.complexity.SystemIntake.Documents == nil {
			break
		}

		return e.complexity.SystemIntake.Documents(childComplexity), true

	case "SystemIntake.draftBusinessCaseState":
		if e.complexity.SystemIntake.DraftBusinessCaseState == nil {
			break
		}

		return e.complexity.SystemIntake.DraftBusinessCaseState(childComplexity), true

	case "SystemIntake.eaCollaborator":
		if e.complexity.SystemIntake.EACollaborator == nil {
			break
		}

		return e.complexity.SystemIntake.EACollaborator(childComplexity), true

	case "SystemIntake.eaCollaboratorName":
		if e.complexity.SystemIntake.EACollaboratorName == nil {
			break
		}

		return e.complexity.SystemIntake.EACollaboratorName(childComplexity), true

	case "SystemIntake.euaUserId":
		if e.complexity.SystemIntake.EUAUserID == nil {
			break
		}

		return e.complexity.SystemIntake.EUAUserID(childComplexity), true

	case "SystemIntake.existingFunding":
		if e.complexity.SystemIntake.ExistingFunding == nil {
			break
		}

		return e.complexity.SystemIntake.ExistingFunding(childComplexity), true

	case "SystemIntake.finalBusinessCaseState":
		if e.complexity.SystemIntake.FinalBusinessCaseState == nil {
			break
		}

		return e.complexity.SystemIntake.FinalBusinessCaseState(childComplexity), true

	case "SystemIntake.fundingSources":
		if e.complexity.SystemIntake.FundingSources == nil {
			break
		}

		return e.complexity.SystemIntake.FundingSources(childComplexity), true

	case "SystemIntake.grbDate":
		if e.complexity.SystemIntake.GRBDate == nil {
			break
		}

		return e.complexity.SystemIntake.GRBDate(childComplexity), true

	case "SystemIntake.grbMeetingState":
		if e.complexity.SystemIntake.GRBMeetingState == nil {
			break
		}

		return e.complexity.SystemIntake.GRBMeetingState(childComplexity), true

	case "SystemIntake.grbReviewStartedAt":
		if e.complexity.SystemIntake.GRBReviewStartedAt == nil {
			break
		}

		return e.complexity.SystemIntake.GRBReviewStartedAt(childComplexity), true

	case "SystemIntake.grtDate":
		if e.complexity.SystemIntake.GRTDate == nil {
			break
		}

		return e.complexity.SystemIntake.GRTDate(childComplexity), true

	case "SystemIntake.grtMeetingState":
		if e.complexity.SystemIntake.GRTMeetingState == nil {
			break
		}

		return e.complexity.SystemIntake.GRTMeetingState(childComplexity), true

	case "SystemIntake.governanceRequestFeedbacks":
		if e.complexity.SystemIntake.GovernanceRequestFeedbacks == nil {
			break
		}

		return e.complexity.SystemIntake.GovernanceRequestFeedbacks(childComplexity), true

	case "SystemIntake.governanceTeams":
		if e.complexity.SystemIntake.GovernanceTeams == nil {
			break
		}

		return e.complexity.SystemIntake.GovernanceTeams(childComplexity), true

	case "SystemIntake.grbDiscussions":
		if e.complexity.SystemIntake.GrbDiscussions == nil {
			break
		}

		return e.complexity.SystemIntake.GrbDiscussions(childComplexity), true

	case "SystemIntake.grbPresentationDeckRequesterReminderEmailSentTime":
		if e.complexity.SystemIntake.GrbPresentationDeckRequesterReminderEmailSentTime == nil {
			break
		}

		return e.complexity.SystemIntake.GrbPresentationDeckRequesterReminderEmailSentTime(childComplexity), true

	case "SystemIntake.grbPresentationLinks":
		if e.complexity.SystemIntake.GrbPresentationLinks == nil {
			break
		}

		return e.complexity.SystemIntake.GrbPresentationLinks(childComplexity), true

	case "SystemIntake.grbReviewAsyncEndDate":
		if e.complexity.SystemIntake.GrbReviewAsyncEndDate == nil {
			break
		}

		return e.complexity.SystemIntake.GrbReviewAsyncEndDate(childComplexity), true

	case "SystemIntake.grbReviewAsyncGRBMeetingTime":
		if e.complexity.SystemIntake.GrbReviewAsyncGRBMeetingTime == nil {
			break
		}

		return e.complexity.SystemIntake.GrbReviewAsyncGRBMeetingTime(childComplexity), true

	case "SystemIntake.grbReviewAsyncManualEndDate":
		if e.complexity.SystemIntake.GrbReviewAsyncManualEndDate == nil {
			break
		}

		return e.complexity.SystemIntake.GrbReviewAsyncManualEndDate(childComplexity), true

	case "SystemIntake.grbReviewAsyncRecordingTime":
		if e.complexity.SystemIntake.GrbReviewAsyncRecordingTime == nil {
			break
		}

		return e.complexity.SystemIntake.GrbReviewAsyncRecordingTime(childComplexity), true

	case "SystemIntake.grbReviewAsyncStatus":
		if e.complexity.SystemIntake.GrbReviewAsyncStatus == nil {
			break
		}

		return e.complexity.SystemIntake.GrbReviewAsyncStatus(childComplexity), true

	case "SystemIntake.grbReviewType":
		if e.complexity.SystemIntake.GrbReviewType == nil {
			break
		}

		return e.complexity.SystemIntake.GrbReviewType(childComplexity), true

	case "SystemIntake.grbReviewers":
		if e.complexity.SystemIntake.GrbReviewers == nil {
			break
		}

		return e.complexity.SystemIntake.GrbReviewers(childComplexity), true

	case "SystemIntake.grbVotingInformation":
		if e.complexity.SystemIntake.GrbVotingInformation == nil {
			break
		}

		return e.complexity.SystemIntake.GrbVotingInformation(childComplexity), true

	case "SystemIntake.grtReviewEmailBody":
		if e.complexity.SystemIntake.GrtReviewEmailBody == nil {
			break
		}

		return e.complexity.SystemIntake.GrtReviewEmailBody(childComplexity), true

	case "SystemIntake.hasUiChanges":
		if e.complexity.SystemIntake.HasUIChanges == nil {
			break
		}

		return e.complexity.SystemIntake.HasUIChanges(childComplexity), true

	case "SystemIntake.id":
		if e.complexity.SystemIntake.ID == nil {
			break
		}

		return e.complexity.SystemIntake.ID(childComplexity), true

	case "SystemIntake.isso":
		if e.complexity.SystemIntake.Isso == nil {
			break
		}

		return e.complexity.SystemIntake.Isso(childComplexity), true

	case "SystemIntake.itGovTaskStatuses":
		if e.complexity.SystemIntake.ItGovTaskStatuses == nil {
			break
		}

		return e.complexity.SystemIntake.ItGovTaskStatuses(childComplexity), true

	case "SystemIntake.lastMeetingDate":
		if e.complexity.SystemIntake.LastMeetingDate == nil {
			break
		}

		return e.complexity.SystemIntake.LastMeetingDate(childComplexity), true

	case "SystemIntake.lcid":
		if e.complexity.SystemIntake.Lcid == nil {
			break
		}

		return e.complexity.SystemIntake.Lcid(childComplexity), true

	case "SystemIntake.lcidCostBaseline":
		if e.complexity.SystemIntake.LcidCostBaseline == nil {
			break
		}

		return e.complexity.SystemIntake.LcidCostBaseline(childComplexity), true

	case "SystemIntake.lcidScope":
		if e.complexity.SystemIntake.LcidScope == nil {
			break
		}

		return e.complexity.SystemIntake.LcidScope(childComplexity), true

	case "SystemIntake.lcidStatus":
		if e.complexity.SystemIntake.LcidStatus == nil {
			break
		}

		return e.complexity.SystemIntake.LcidStatus(childComplexity), true

	case "SystemIntake.lcidExpiresAt":
		if e.complexity.SystemIntake.LifecycleExpiresAt == nil {
			break
		}

		return e.complexity.SystemIntake.LifecycleExpiresAt(childComplexity), true

	case "SystemIntake.lcidIssuedAt":
		if e.complexity.SystemIntake.LifecycleIssuedAt == nil {
			break
		}

		return e.complexity.SystemIntake.LifecycleIssuedAt(childComplexity), true

	case "SystemIntake.lcidRetiresAt":
		if e.complexity.SystemIntake.LifecycleRetiresAt == nil {
			break
		}

		return e.complexity.SystemIntake.LifecycleRetiresAt(childComplexity), true

	case "SystemIntake.needsEaSupport":
		if e.complexity.SystemIntake.NeedsEaSupport == nil {
			break
		}

		return e.complexity.SystemIntake.NeedsEaSupport(childComplexity), true

	case "SystemIntake.nextMeetingDate":
		if e.complexity.SystemIntake.NextMeetingDate == nil {
			break
		}

		return e.complexity.SystemIntake.NextMeetingDate(childComplexity), true

	case "SystemIntake.notes":
		if e.complexity.SystemIntake.Notes == nil {
			break
		}

		return e.complexity.SystemIntake.Notes(childComplexity), true

	case "SystemIntake.oitSecurityCollaborator":
		if e.complexity.SystemIntake.OITSecurityCollaborator == nil {
			break
		}

		return e.complexity.SystemIntake.OITSecurityCollaborator(childComplexity), true

	case "SystemIntake.oitSecurityCollaboratorName":
		if e.complexity.SystemIntake.OITSecurityCollaboratorName == nil {
			break
		}

		return e.complexity.SystemIntake.OITSecurityCollaboratorName(childComplexity), true

	case "SystemIntake.productManager":
		if e.complexity.SystemIntake.ProductManager == nil {
			break
		}

		return e.complexity.SystemIntake.ProductManager(childComplexity), true

	case "SystemIntake.projectAcronym":
		if e.complexity.SystemIntake.ProjectAcronym == nil {
			break
		}

		return e.complexity.SystemIntake.ProjectAcronym(childComplexity), true

	case "SystemIntake.rejectionReason":
		if e.complexity.SystemIntake.RejectionReason == nil {
			break
		}

		return e.complexity.SystemIntake.RejectionReason(childComplexity), true

	case "SystemIntake.relatedIntakes":
		if e.complexity.SystemIntake.RelatedIntakes == nil {
			break
		}

		return e.complexity.SystemIntake.RelatedIntakes(childComplexity), true

	case "SystemIntake.relatedTRBRequests":
		if e.complexity.SystemIntake.RelatedTRBRequests == nil {
			break
		}

		return e.complexity.SystemIntake.RelatedTRBRequests(childComplexity), true

	case "SystemIntake.relationType":
		if e.complexity.SystemIntake.RelationType == nil {
			break
		}

		return e.complexity.SystemIntake.RelationType(childComplexity), true

	case "SystemIntake.requestFormState":
		if e.complexity.SystemIntake.RequestFormState == nil {
			break
		}

		return e.complexity.SystemIntake.RequestFormState(childComplexity), true

	case "SystemIntake.requestName":
		if e.complexity.SystemIntake.RequestName == nil {
			break
		}

		return e.complexity.SystemIntake.RequestName(childComplexity), true

	case "SystemIntake.requestType":
		if e.complexity.SystemIntake.RequestType == nil {
			break
		}

		return e.complexity.SystemIntake.RequestType(childComplexity), true

	case "SystemIntake.requester":
		if e.complexity.SystemIntake.Requester == nil {
			break
		}

		return e.complexity.SystemIntake.Requester(childComplexity), true

	case "SystemIntake.requesterComponent":
		if e.complexity.SystemIntake.RequesterComponent == nil {
			break
		}

		return e.complexity.SystemIntake.RequesterComponent(childComplexity), true

	case "SystemIntake.requesterName":
		if e.complexity.SystemIntake.RequesterName == nil {
			break
		}

		return e.complexity.SystemIntake.RequesterName(childComplexity), true

	case "SystemIntake.state":
		if e.complexity.SystemIntake.State == nil {
			break
		}

		return e.complexity.SystemIntake.State(childComplexity), true

	case "SystemIntake.statusAdmin":
		if e.complexity.SystemIntake.StatusAdmin == nil {
			break
		}

		return e.complexity.SystemIntake.StatusAdmin(childComplexity), true

	case "SystemIntake.statusRequester":
		if e.complexity.SystemIntake.StatusRequester == nil {
			break
		}

		return e.complexity.SystemIntake.StatusRequester(childComplexity), true

	case "SystemIntake.step":
		if e.complexity.SystemIntake.Step == nil {
			break
		}

		return e.complexity.SystemIntake.Step(childComplexity), true

	case "SystemIntake.submittedAt":
		if e.complexity.SystemIntake.SubmittedAt == nil {
			break
		}

		return e.complexity.SystemIntake.SubmittedAt(childComplexity), true

	case "SystemIntake.systems":
		if e.complexity.SystemIntake.Systems == nil {
			break
		}

		return e.complexity.SystemIntake.Systems(childComplexity), true

	case "SystemIntake.trbCollaborator":
		if e.complexity.SystemIntake.TRBCollaborator == nil {
			break
		}

		return e.complexity.SystemIntake.TRBCollaborator(childComplexity), true

	case "SystemIntake.trbCollaboratorName":
		if e.complexity.SystemIntake.TRBCollaboratorName == nil {
			break
		}

		return e.complexity.SystemIntake.TRBCollaboratorName(childComplexity), true

	case "SystemIntake.trbFollowUpRecommendation":
		if e.complexity.SystemIntake.TRBFollowUpRecommendation == nil {
			break
		}

		return e.complexity.SystemIntake.TRBFollowUpRecommendation(childComplexity), true

	case "SystemIntake.updatedAt":
		if e.complexity.SystemIntake.UpdatedAt == nil {
			break
		}

		return e.complexity.SystemIntake.UpdatedAt(childComplexity), true

	case "SystemIntake.usesAiTech":
		if e.complexity.SystemIntake.UsesAITech == nil {
			break
		}

		return e.complexity.SystemIntake.UsesAITech(childComplexity), true

	case "SystemIntake.usingSoftware":
		if e.complexity.SystemIntake.UsingSoftware == nil {
			break
		}

		return e.complexity.SystemIntake.UsingSoftware(childComplexity), true

	case "SystemIntakeAction.actor":
		if e.complexity.SystemIntakeAction.Actor == nil {
			break
		}

		return e.complexity.SystemIntakeAction.Actor(childComplexity), true

	case "SystemIntakeAction.createdAt":
		if e.complexity.SystemIntakeAction.CreatedAt == nil {
			break
		}

		return e.complexity.SystemIntakeAction.CreatedAt(childComplexity), true

	case "SystemIntakeAction.feedback":
		if e.complexity.SystemIntakeAction.Feedback == nil {
			break
		}

		return e.complexity.SystemIntakeAction.Feedback(childComplexity), true

	case "SystemIntakeAction.id":
		if e.complexity.SystemIntakeAction.ID == nil {
			break
		}

		return e.complexity.SystemIntakeAction.ID(childComplexity), true

	case "SystemIntakeAction.lcidExpirationChange":
		if e.complexity.SystemIntakeAction.LcidExpirationChange == nil {
			break
		}

		return e.complexity.SystemIntakeAction.LcidExpirationChange(childComplexity), true

	case "SystemIntakeAction.newRetirementDate":
		if e.complexity.SystemIntakeAction.NewRetirementDate == nil {
			break
		}

		return e.complexity.SystemIntakeAction.NewRetirementDate(childComplexity), true

	case "SystemIntakeAction.previousRetirementDate":
		if e.complexity.SystemIntakeAction.PreviousRetirementDate == nil {
			break
		}

		return e.complexity.SystemIntakeAction.PreviousRetirementDate(childComplexity), true

	case "SystemIntakeAction.step":
		if e.complexity.SystemIntakeAction.Step == nil {
			break
		}

		return e.complexity.SystemIntakeAction.Step(childComplexity), true

	case "SystemIntakeAction.systemIntake":
		if e.complexity.SystemIntakeAction.SystemIntake == nil {
			break
		}

		return e.complexity.SystemIntakeAction.SystemIntake(childComplexity), true

	case "SystemIntakeAction.type":
		if e.complexity.SystemIntakeAction.Type == nil {
			break
		}

		return e.complexity.SystemIntakeAction.Type(childComplexity), true

	case "SystemIntakeActionActor.email":
		if e.complexity.SystemIntakeActionActor.Email == nil {
			break
		}

		return e.complexity.SystemIntakeActionActor.Email(childComplexity), true

	case "SystemIntakeActionActor.name":
		if e.complexity.SystemIntakeActionActor.Name == nil {
			break
		}

		return e.complexity.SystemIntakeActionActor.Name(childComplexity), true

	case "SystemIntakeAnnualSpending.currentAnnualSpending":
		if e.complexity.SystemIntakeAnnualSpending.CurrentAnnualSpending == nil {
			break
		}

		return e.complexity.SystemIntakeAnnualSpending.CurrentAnnualSpending(childComplexity), true

	case "SystemIntakeAnnualSpending.currentAnnualSpendingITPortion":
		if e.complexity.SystemIntakeAnnualSpending.CurrentAnnualSpendingITPortion == nil {
			break
		}

		return e.complexity.SystemIntakeAnnualSpending.CurrentAnnualSpendingITPortion(childComplexity), true

	case "SystemIntakeAnnualSpending.plannedYearOneSpending":
		if e.complexity.SystemIntakeAnnualSpending.PlannedYearOneSpending == nil {
			break
		}

		return e.complexity.SystemIntakeAnnualSpending.PlannedYearOneSpending(childComplexity), true

	case "SystemIntakeAnnualSpending.plannedYearOneSpendingITPortion":
		if e.complexity.SystemIntakeAnnualSpending.PlannedYearOneSpendingITPortion == nil {
			break
		}

		return e.complexity.SystemIntakeAnnualSpending.PlannedYearOneSpendingITPortion(childComplexity), true

	case "SystemIntakeBusinessOwner.component":
		if e.complexity.SystemIntakeBusinessOwner.Component == nil {
			break
		}

		return e.complexity.SystemIntakeBusinessOwner.Component(childComplexity), true

	case "SystemIntakeBusinessOwner.name":
		if e.complexity.SystemIntakeBusinessOwner.Name == nil {
			break
		}

		return e.complexity.SystemIntakeBusinessOwner.Name(childComplexity), true

	case "SystemIntakeCollaborator.acronym":
		if e.complexity.SystemIntakeCollaborator.Acronym == nil {
			break
		}

		return e.complexity.SystemIntakeCollaborator.Acronym(childComplexity), true

	case "SystemIntakeCollaborator.collaborator":
		if e.complexity.SystemIntakeCollaborator.Collaborator == nil {
			break
		}

		return e.complexity.SystemIntakeCollaborator.Collaborator(childComplexity), true

	case "SystemIntakeCollaborator.key":
		if e.complexity.SystemIntakeCollaborator.Key == nil {
			break
		}

		return e.complexity.SystemIntakeCollaborator.Key(childComplexity), true

	case "SystemIntakeCollaborator.label":
		if e.complexity.SystemIntakeCollaborator.Label == nil {
			break
		}

		return e.complexity.SystemIntakeCollaborator.Label(childComplexity), true

	case "SystemIntakeCollaborator.name":
		if e.complexity.SystemIntakeCollaborator.Name == nil {
			break
		}

		return e.complexity.SystemIntakeCollaborator.Name(childComplexity), true

	case "SystemIntakeContact.component":
		if e.complexity.SystemIntakeContact.Component == nil {
			break
		}

		return e.complexity.SystemIntakeContact.Component(childComplexity), true

	case "SystemIntakeContact.euaUserId":
		if e.complexity.SystemIntakeContact.EUAUserID == nil {
			break
		}

		return e.complexity.SystemIntakeContact.EUAUserID(childComplexity), true

	case "SystemIntakeContact.id":
		if e.complexity.SystemIntakeContact.ID == nil {
			break
		}

		return e.complexity.SystemIntakeContact.ID(childComplexity), true

	case "SystemIntakeContact.role":
		if e.complexity.SystemIntakeContact.Role == nil {
			break
		}

		return e.complexity.SystemIntakeContact.Role(childComplexity), true

	case "SystemIntakeContact.systemIntakeId":
		if e.complexity.SystemIntakeContact.SystemIntakeID == nil {
			break
		}

		return e.complexity.SystemIntakeContact.SystemIntakeID(childComplexity), true

	case "SystemIntakeContactsPayload.invalidEUAIDs":
		if e.complexity.SystemIntakeContactsPayload.InvalidEUAIDs == nil {
			break
		}

		return e.complexity.SystemIntakeContactsPayload.InvalidEUAIDs(childComplexity), true

	case "SystemIntakeContactsPayload.systemIntakeContacts":
		if e.complexity.SystemIntakeContactsPayload.SystemIntakeContacts == nil {
			break
		}

		return e.complexity.SystemIntakeContactsPayload.SystemIntakeContacts(childComplexity), true

	case "SystemIntakeContract.contractor":
		if e.complexity.SystemIntakeContract.Contractor == nil {
			break
		}

		return e.complexity.SystemIntakeContract.Contractor(childComplexity), true

	case "SystemIntakeContract.endDate":
		if e.complexity.SystemIntakeContract.EndDate == nil {
			break
		}

		return e.complexity.SystemIntakeContract.EndDate(childComplexity), true

	case "SystemIntakeContract.hasContract":
		if e.complexity.SystemIntakeContract.HasContract == nil {
			break
		}

		return e.complexity.SystemIntakeContract.HasContract(childComplexity), true

	case "SystemIntakeContract.startDate":
		if e.complexity.SystemIntakeContract.StartDate == nil {
			break
		}

		return e.complexity.SystemIntakeContract.StartDate(childComplexity), true

	case "SystemIntakeContract.vehicle":
		if e.complexity.SystemIntakeContract.Vehicle == nil {
			break
		}

		return e.complexity.SystemIntakeContract.Vehicle(childComplexity), true

	case "SystemIntakeContractNumber.contractNumber":
		if e.complexity.SystemIntakeContractNumber.ContractNumber == nil {
			break
		}

		return e.complexity.SystemIntakeContractNumber.ContractNumber(childComplexity), true

	case "SystemIntakeContractNumber.createdAt":
		if e.complexity.SystemIntakeContractNumber.CreatedAt == nil {
			break
		}

		return e.complexity.SystemIntakeContractNumber.CreatedAt(childComplexity), true

	case "SystemIntakeContractNumber.createdBy":
		if e.complexity.SystemIntakeContractNumber.CreatedBy == nil {
			break
		}

		return e.complexity.SystemIntakeContractNumber.CreatedBy(childComplexity), true

	case "SystemIntakeContractNumber.id":
		if e.complexity.SystemIntakeContractNumber.ID == nil {
			break
		}

		return e.complexity.SystemIntakeContractNumber.ID(childComplexity), true

	case "SystemIntakeContractNumber.modifiedAt":
		if e.complexity.SystemIntakeContractNumber.ModifiedAt == nil {
			break
		}

		return e.complexity.SystemIntakeContractNumber.ModifiedAt(childComplexity), true

	case "SystemIntakeContractNumber.modifiedBy":
		if e.complexity.SystemIntakeContractNumber.ModifiedBy == nil {
			break
		}

		return e.complexity.SystemIntakeContractNumber.ModifiedBy(childComplexity), true

	case "SystemIntakeContractNumber.systemIntakeID":
		if e.complexity.SystemIntakeContractNumber.SystemIntakeID == nil {
			break
		}

		return e.complexity.SystemIntakeContractNumber.SystemIntakeID(childComplexity), true

	case "SystemIntakeCosts.expectedIncreaseAmount":
		if e.complexity.SystemIntakeCosts.ExpectedIncreaseAmount == nil {
			break
		}

		return e.complexity.SystemIntakeCosts.ExpectedIncreaseAmount(childComplexity), true

	case "SystemIntakeCosts.isExpectingIncrease":
		if e.complexity.SystemIntakeCosts.IsExpectingIncrease == nil {
			break
		}

		return e.complexity.SystemIntakeCosts.IsExpectingIncrease(childComplexity), true

	case "SystemIntakeDocument.canDelete":
		if e.complexity.SystemIntakeDocument.CanDelete == nil {
			break
		}

		return e.complexity.SystemIntakeDocument.CanDelete(childComplexity), true

	case "SystemIntakeDocument.canView":
		if e.complexity.SystemIntakeDocument.CanView == nil {
			break
		}

		return e.complexity.SystemIntakeDocument.CanView(childComplexity), true

	case "SystemIntakeDocument.documentType":
		if e.complexity.SystemIntakeDocument.DocumentType == nil {
			break
		}

		return e.complexity.SystemIntakeDocument.DocumentType(childComplexity), true

	case "SystemIntakeDocument.fileName":
		if e.complexity.SystemIntakeDocument.FileName == nil {
			break
		}

		return e.complexity.SystemIntakeDocument.FileName(childComplexity), true

	case "SystemIntakeDocument.id":
		if e.complexity.SystemIntakeDocument.ID == nil {
			break
		}

		return e.complexity.SystemIntakeDocument.ID(childComplexity), true

	case "SystemIntakeDocument.status":
		if e.complexity.SystemIntakeDocument.Status == nil {
			break
		}

		return e.complexity.SystemIntakeDocument.Status(childComplexity), true

	case "SystemIntakeDocument.systemIntakeId":
		if e.complexity.SystemIntakeDocument.SystemIntakeID == nil {
			break
		}

		return e.complexity.SystemIntakeDocument.SystemIntakeID(childComplexity), true

	case "SystemIntakeDocument.url":
		if e.complexity.SystemIntakeDocument.URL == nil {
			break
		}

		return e.complexity.SystemIntakeDocument.URL(childComplexity), true

	case "SystemIntakeDocument.uploadedAt":
		if e.complexity.SystemIntakeDocument.UploadedAt == nil {
			break
		}

		return e.complexity.SystemIntakeDocument.UploadedAt(childComplexity), true

	case "SystemIntakeDocument.version":
		if e.complexity.SystemIntakeDocument.Version == nil {
			break
		}

		return e.complexity.SystemIntakeDocument.Version(childComplexity), true

	case "SystemIntakeDocumentType.commonType":
		if e.complexity.SystemIntakeDocumentType.CommonType == nil {
			break
		}

		return e.complexity.SystemIntakeDocumentType.CommonType(childComplexity), true

	case "SystemIntakeDocumentType.otherTypeDescription":
		if e.complexity.SystemIntakeDocumentType.OtherTypeDescription == nil {
			break
		}

		return e.complexity.SystemIntakeDocumentType.OtherTypeDescription(childComplexity), true

	case "SystemIntakeFundingSource.fundingNumber":
		if e.complexity.SystemIntakeFundingSource.FundingNumber == nil {
			break
		}

		return e.complexity.SystemIntakeFundingSource.FundingNumber(childComplexity), true

	case "SystemIntakeFundingSource.id":
		if e.complexity.SystemIntakeFundingSource.ID == nil {
			break
		}

		return e.complexity.SystemIntakeFundingSource.ID(childComplexity), true

	case "SystemIntakeFundingSource.source":
		if e.complexity.SystemIntakeFundingSource.Source == nil {
			break
		}

		return e.complexity.SystemIntakeFundingSource.Source(childComplexity), true

	case "SystemIntakeGRBPresentationLinks.createdAt":
		if e.complexity.SystemIntakeGRBPresentationLinks.CreatedAt == nil {
			break
		}

		return e.complexity.SystemIntakeGRBPresentationLinks.CreatedAt(childComplexity), true

	case "SystemIntakeGRBPresentationLinks.createdBy":
		if e.complexity.SystemIntakeGRBPresentationLinks.CreatedBy == nil {
			break
		}

		return e.complexity.SystemIntakeGRBPresentationLinks.CreatedBy(childComplexity), true

	case "SystemIntakeGRBPresentationLinks.modifiedAt":
		if e.complexity.SystemIntakeGRBPresentationLinks.ModifiedAt == nil {
			break
		}

		return e.complexity.SystemIntakeGRBPresentationLinks.ModifiedAt(childComplexity), true

	case "SystemIntakeGRBPresentationLinks.modifiedBy":
		if e.complexity.SystemIntakeGRBPresentationLinks.ModifiedBy == nil {
			break
		}

		return e.complexity.SystemIntakeGRBPresentationLinks.ModifiedBy(childComplexity), true

	case "SystemIntakeGRBPresentationLinks.presentationDeckFileName":
		if e.complexity.SystemIntakeGRBPresentationLinks.PresentationDeckFileName == nil {
			break
		}

		return e.complexity.SystemIntakeGRBPresentationLinks.PresentationDeckFileName(childComplexity), true

	case "SystemIntakeGRBPresentationLinks.presentationDeckFileStatus":
		if e.complexity.SystemIntakeGRBPresentationLinks.PresentationDeckFileStatus == nil {
			break
		}

		return e.complexity.SystemIntakeGRBPresentationLinks.PresentationDeckFileStatus(childComplexity), true

	case "SystemIntakeGRBPresentationLinks.presentationDeckFileURL":
		if e.complexity.SystemIntakeGRBPresentationLinks.PresentationDeckFileURL == nil {
			break
		}

		return e.complexity.SystemIntakeGRBPresentationLinks.PresentationDeckFileURL(childComplexity), true

	case "SystemIntakeGRBPresentationLinks.recordingLink":
		if e.complexity.SystemIntakeGRBPresentationLinks.RecordingLink == nil {
			break
		}

		return e.complexity.SystemIntakeGRBPresentationLinks.RecordingLink(childComplexity), true

	case "SystemIntakeGRBPresentationLinks.recordingPasscode":
		if e.complexity.SystemIntakeGRBPresentationLinks.RecordingPasscode == nil {
			break
		}

		return e.complexity.SystemIntakeGRBPresentationLinks.RecordingPasscode(childComplexity), true

	case "SystemIntakeGRBPresentationLinks.systemIntakeID":
		if e.complexity.SystemIntakeGRBPresentationLinks.SystemIntakeID == nil {
			break
		}

		return e.complexity.SystemIntakeGRBPresentationLinks.SystemIntakeID(childComplexity), true

	case "SystemIntakeGRBPresentationLinks.transcriptFileName":
		if e.complexity.SystemIntakeGRBPresentationLinks.TranscriptFileName == nil {
			break
		}

		return e.complexity.SystemIntakeGRBPresentationLinks.TranscriptFileName(childComplexity), true

	case "SystemIntakeGRBPresentationLinks.transcriptFileStatus":
		if e.complexity.SystemIntakeGRBPresentationLinks.TranscriptFileStatus == nil {
			break
		}

		return e.complexity.SystemIntakeGRBPresentationLinks.TranscriptFileStatus(childComplexity), true

	case "SystemIntakeGRBPresentationLinks.transcriptFileURL":
		if e.complexity.SystemIntakeGRBPresentationLinks.TranscriptFileURL == nil {
			break
		}

		return e.complexity.SystemIntakeGRBPresentationLinks.TranscriptFileURL(childComplexity), true

	case "SystemIntakeGRBPresentationLinks.transcriptLink":
		if e.complexity.SystemIntakeGRBPresentationLinks.TranscriptLink == nil {
			break
		}

		return e.complexity.SystemIntakeGRBPresentationLinks.TranscriptLink(childComplexity), true

	case "SystemIntakeGRBReviewDiscussion.initialPost":
		if e.complexity.SystemIntakeGRBReviewDiscussion.InitialPost == nil {
			break
		}

		return e.complexity.SystemIntakeGRBReviewDiscussion.InitialPost(childComplexity), true

	case "SystemIntakeGRBReviewDiscussion.replies":
		if e.complexity.SystemIntakeGRBReviewDiscussion.Replies == nil {
			break
		}

		return e.complexity.SystemIntakeGRBReviewDiscussion.Replies(childComplexity), true

	case "SystemIntakeGRBReviewDiscussionPost.content":
		if e.complexity.SystemIntakeGRBReviewDiscussionPost.Content == nil {
			break
		}

		return e.complexity.SystemIntakeGRBReviewDiscussionPost.Content(childComplexity), true

	case "SystemIntakeGRBReviewDiscussionPost.createdAt":
		if e.complexity.SystemIntakeGRBReviewDiscussionPost.CreatedAt == nil {
			break
		}

		return e.complexity.SystemIntakeGRBReviewDiscussionPost.CreatedAt(childComplexity), true

	case "SystemIntakeGRBReviewDiscussionPost.createdByUserAccount":
		if e.complexity.SystemIntakeGRBReviewDiscussionPost.CreatedByUserAccount == nil {
			break
		}

		return e.complexity.SystemIntakeGRBReviewDiscussionPost.CreatedByUserAccount(childComplexity), true

	case "SystemIntakeGRBReviewDiscussionPost.grbRole":
		if e.complexity.SystemIntakeGRBReviewDiscussionPost.GRBRole == nil {
			break
		}

		return e.complexity.SystemIntakeGRBReviewDiscussionPost.GRBRole(childComplexity), true

	case "SystemIntakeGRBReviewDiscussionPost.id":
		if e.complexity.SystemIntakeGRBReviewDiscussionPost.ID == nil {
			break
		}

		return e.complexity.SystemIntakeGRBReviewDiscussionPost.ID(childComplexity), true

	case "SystemIntakeGRBReviewDiscussionPost.modifiedAt":
		if e.complexity.SystemIntakeGRBReviewDiscussionPost.ModifiedAt == nil {
			break
		}

		return e.complexity.SystemIntakeGRBReviewDiscussionPost.ModifiedAt(childComplexity), true

	case "SystemIntakeGRBReviewDiscussionPost.modifiedByUserAccount":
		if e.complexity.SystemIntakeGRBReviewDiscussionPost.ModifiedByUserAccount == nil {
			break
		}

		return e.complexity.SystemIntakeGRBReviewDiscussionPost.ModifiedByUserAccount(childComplexity), true

	case "SystemIntakeGRBReviewDiscussionPost.systemIntakeID":
		if e.complexity.SystemIntakeGRBReviewDiscussionPost.SystemIntakeID == nil {
			break
		}

		return e.complexity.SystemIntakeGRBReviewDiscussionPost.SystemIntakeID(childComplexity), true

	case "SystemIntakeGRBReviewDiscussionPost.votingRole":
		if e.complexity.SystemIntakeGRBReviewDiscussionPost.VotingRole == nil {
			break
		}

		return e.complexity.SystemIntakeGRBReviewDiscussionPost.VotingRole(childComplexity), true

	case "SystemIntakeGRBReviewer.createdAt":
		if e.complexity.SystemIntakeGRBReviewer.CreatedAt == nil {
			break
		}

		return e.complexity.SystemIntakeGRBReviewer.CreatedAt(childComplexity), true

	case "SystemIntakeGRBReviewer.createdBy":
		if e.complexity.SystemIntakeGRBReviewer.CreatedBy == nil {
			break
		}

		return e.complexity.SystemIntakeGRBReviewer.CreatedBy(childComplexity), true

	case "SystemIntakeGRBReviewer.dateVoted":
		if e.complexity.SystemIntakeGRBReviewer.DateVoted == nil {
			break
		}

		return e.complexity.SystemIntakeGRBReviewer.DateVoted(childComplexity), true

	case "SystemIntakeGRBReviewer.grbRole":
		if e.complexity.SystemIntakeGRBReviewer.GrbRole == nil {
			break
		}

		return e.complexity.SystemIntakeGRBReviewer.GrbRole(childComplexity), true

	case "SystemIntakeGRBReviewer.id":
		if e.complexity.SystemIntakeGRBReviewer.ID == nil {
			break
		}

		return e.complexity.SystemIntakeGRBReviewer.ID(childComplexity), true

	case "SystemIntakeGRBReviewer.modifiedAt":
		if e.complexity.SystemIntakeGRBReviewer.ModifiedAt == nil {
			break
		}

		return e.complexity.SystemIntakeGRBReviewer.ModifiedAt(childComplexity), true

	case "SystemIntakeGRBReviewer.modifiedBy":
		if e.complexity.SystemIntakeGRBReviewer.ModifiedBy == nil {
			break
		}

		return e.complexity.SystemIntakeGRBReviewer.ModifiedBy(childComplexity), true

	case "SystemIntakeGRBReviewer.systemIntakeID":
		if e.complexity.SystemIntakeGRBReviewer.SystemIntakeID == nil {
			break
		}

		return e.complexity.SystemIntakeGRBReviewer.SystemIntakeID(childComplexity), true

	case "SystemIntakeGRBReviewer.userAccount":
		if e.complexity.SystemIntakeGRBReviewer.UserAccount == nil {
			break
		}

		return e.complexity.SystemIntakeGRBReviewer.UserAccount(childComplexity), true

	case "SystemIntakeGRBReviewer.vote":
		if e.complexity.SystemIntakeGRBReviewer.Vote == nil {
			break
		}

		return e.complexity.SystemIntakeGRBReviewer.Vote(childComplexity), true

	case "SystemIntakeGRBReviewer.voteComment":
		if e.complexity.SystemIntakeGRBReviewer.VoteComment == nil {
			break
		}

		return e.complexity.SystemIntakeGRBReviewer.VoteComment(childComplexity), true

	case "SystemIntakeGRBReviewer.votingRole":
		if e.complexity.SystemIntakeGRBReviewer.VotingRole == nil {
			break
		}

		return e.complexity.SystemIntakeGRBReviewer.VotingRole(childComplexity), true

	case "SystemIntakeGovernanceTeam.isPresent":
		if e.complexity.SystemIntakeGovernanceTeam.IsPresent == nil {
			break
		}

		return e.complexity.SystemIntakeGovernanceTeam.IsPresent(childComplexity), true

	case "SystemIntakeGovernanceTeam.teams":
		if e.complexity.SystemIntakeGovernanceTeam.Teams == nil {
			break
		}

		return e.complexity.SystemIntakeGovernanceTeam.Teams(childComplexity), true

	case "SystemIntakeISSO.isPresent":
		if e.complexity.SystemIntakeISSO.IsPresent == nil {
			break
		}

		return e.complexity.SystemIntakeISSO.IsPresent(childComplexity), true

	case "SystemIntakeISSO.name":
		if e.complexity.SystemIntakeISSO.Name == nil {
			break
		}

		return e.complexity.SystemIntakeISSO.Name(childComplexity), true

	case "SystemIntakeLCIDExpirationChange.newCostBaseline":
		if e.complexity.SystemIntakeLCIDExpirationChange.NewCostBaseline == nil {
			break
		}

		return e.complexity.SystemIntakeLCIDExpirationChange.NewCostBaseline(childComplexity), true

	case "SystemIntakeLCIDExpirationChange.newDate":
		if e.complexity.SystemIntakeLCIDExpirationChange.NewDate == nil {
			break
		}

		return e.complexity.SystemIntakeLCIDExpirationChange.NewDate(childComplexity), true

	case "SystemIntakeLCIDExpirationChange.newNextSteps":
		if e.complexity.SystemIntakeLCIDExpirationChange.NewNextSteps == nil {
			break
		}

		return e.complexity.SystemIntakeLCIDExpirationChange.NewNextSteps(childComplexity), true

	case "SystemIntakeLCIDExpirationChange.newScope":
		if e.complexity.SystemIntakeLCIDExpirationChange.NewScope == nil {
			break
		}

		return e.complexity.SystemIntakeLCIDExpirationChange.NewScope(childComplexity), true

	case "SystemIntakeLCIDExpirationChange.previousCostBaseline":
		if e.complexity.SystemIntakeLCIDExpirationChange.PreviousCostBaseline == nil {
			break
		}

		return e.complexity.SystemIntakeLCIDExpirationChange.PreviousCostBaseline(childComplexity), true

	case "SystemIntakeLCIDExpirationChange.previousDate":
		if e.complexity.SystemIntakeLCIDExpirationChange.PreviousDate == nil {
			break
		}

		return e.complexity.SystemIntakeLCIDExpirationChange.PreviousDate(childComplexity), true

	case "SystemIntakeLCIDExpirationChange.previousNextSteps":
		if e.complexity.SystemIntakeLCIDExpirationChange.PreviousNextSteps == nil {
			break
		}

		return e.complexity.SystemIntakeLCIDExpirationChange.PreviousNextSteps(childComplexity), true

	case "SystemIntakeLCIDExpirationChange.previousScope":
		if e.complexity.SystemIntakeLCIDExpirationChange.PreviousScope == nil {
			break
		}

		return e.complexity.SystemIntakeLCIDExpirationChange.PreviousScope(childComplexity), true

	case "SystemIntakeNote.author":
		if e.complexity.SystemIntakeNote.Author == nil {
			break
		}

		return e.complexity.SystemIntakeNote.Author(childComplexity), true

	case "SystemIntakeNote.content":
		if e.complexity.SystemIntakeNote.Content == nil {
			break
		}

		return e.complexity.SystemIntakeNote.Content(childComplexity), true

	case "SystemIntakeNote.createdAt":
		if e.complexity.SystemIntakeNote.CreatedAt == nil {
			break
		}

		return e.complexity.SystemIntakeNote.CreatedAt(childComplexity), true

	case "SystemIntakeNote.editor":
		if e.complexity.SystemIntakeNote.Editor == nil {
			break
		}

		return e.complexity.SystemIntakeNote.Editor(childComplexity), true

	case "SystemIntakeNote.id":
		if e.complexity.SystemIntakeNote.ID == nil {
			break
		}

		return e.complexity.SystemIntakeNote.ID(childComplexity), true

	case "SystemIntakeNote.isArchived":
		if e.complexity.SystemIntakeNote.IsArchived == nil {
			break
		}

		return e.complexity.SystemIntakeNote.IsArchived(childComplexity), true

	case "SystemIntakeNote.modifiedAt":
		if e.complexity.SystemIntakeNote.ModifiedAt == nil {
			break
		}

		return e.complexity.SystemIntakeNote.ModifiedAt(childComplexity), true

	case "SystemIntakeNote.modifiedBy":
		if e.complexity.SystemIntakeNote.ModifiedBy == nil {
			break
		}

		return e.complexity.SystemIntakeNote.ModifiedBy(childComplexity), true

	case "SystemIntakeNoteAuthor.eua":
		if e.complexity.SystemIntakeNoteAuthor.Eua == nil {
			break
		}

		return e.complexity.SystemIntakeNoteAuthor.Eua(childComplexity), true

	case "SystemIntakeNoteAuthor.name":
		if e.complexity.SystemIntakeNoteAuthor.Name == nil {
			break
		}

		return e.complexity.SystemIntakeNoteAuthor.Name(childComplexity), true

	case "SystemIntakeProductManager.component":
		if e.complexity.SystemIntakeProductManager.Component == nil {
			break
		}

		return e.complexity.SystemIntakeProductManager.Component(childComplexity), true

	case "SystemIntakeProductManager.name":
		if e.complexity.SystemIntakeProductManager.Name == nil {
			break
		}

		return e.complexity.SystemIntakeProductManager.Name(childComplexity), true

	case "SystemIntakeRequester.component":
		if e.complexity.SystemIntakeRequester.Component == nil {
			break
		}

		return e.complexity.SystemIntakeRequester.Component(childComplexity), true

	case "SystemIntakeRequester.email":
		if e.complexity.SystemIntakeRequester.Email == nil {
			break
		}

		return e.complexity.SystemIntakeRequester.Email(childComplexity), true

	case "SystemIntakeRequester.name":
		if e.complexity.SystemIntakeRequester.Name == nil {
			break
		}

		return e.complexity.SystemIntakeRequester.Name(childComplexity), true

	case "TRBAdminNote.author":
		if e.complexity.TRBAdminNote.Author == nil {
			break
		}

		return e.complexity.TRBAdminNote.Author(childComplexity), true

	case "TRBAdminNote.category":
		if e.complexity.TRBAdminNote.Category == nil {
			break
		}

		return e.complexity.TRBAdminNote.Category(childComplexity), true

	case "TRBAdminNote.categorySpecificData":
		if e.complexity.TRBAdminNote.CategorySpecificData == nil {
			break
		}

		return e.complexity.TRBAdminNote.CategorySpecificData(childComplexity), true

	case "TRBAdminNote.createdAt":
		if e.complexity.TRBAdminNote.CreatedAt == nil {
			break
		}

		return e.complexity.TRBAdminNote.CreatedAt(childComplexity), true

	case "TRBAdminNote.createdBy":
		if e.complexity.TRBAdminNote.CreatedBy == nil {
			break
		}

		return e.complexity.TRBAdminNote.CreatedBy(childComplexity), true

	case "TRBAdminNote.id":
		if e.complexity.TRBAdminNote.ID == nil {
			break
		}

		return e.complexity.TRBAdminNote.ID(childComplexity), true

	case "TRBAdminNote.isArchived":
		if e.complexity.TRBAdminNote.IsArchived == nil {
			break
		}

		return e.complexity.TRBAdminNote.IsArchived(childComplexity), true

	case "TRBAdminNote.modifiedAt":
		if e.complexity.TRBAdminNote.ModifiedAt == nil {
			break
		}

		return e.complexity.TRBAdminNote.ModifiedAt(childComplexity), true

	case "TRBAdminNote.modifiedBy":
		if e.complexity.TRBAdminNote.ModifiedBy == nil {
			break
		}

		return e.complexity.TRBAdminNote.ModifiedBy(childComplexity), true

	case "TRBAdminNote.noteText":
		if e.complexity.TRBAdminNote.NoteText == nil {
			break
		}

		return e.complexity.TRBAdminNote.NoteText(childComplexity), true

	case "TRBAdminNote.trbRequestId":
		if e.complexity.TRBAdminNote.TRBRequestID == nil {
			break
		}

		return e.complexity.TRBAdminNote.TRBRequestID(childComplexity), true

	case "TRBAdminNoteConsultSessionCategoryData.placeholderField":
		if e.complexity.TRBAdminNoteConsultSessionCategoryData.PlaceholderField == nil {
			break
		}

		return e.complexity.TRBAdminNoteConsultSessionCategoryData.PlaceholderField(childComplexity), true

	case "TRBAdminNoteGeneralRequestCategoryData.placeholderField":
		if e.complexity.TRBAdminNoteGeneralRequestCategoryData.PlaceholderField == nil {
			break
		}

		return e.complexity.TRBAdminNoteGeneralRequestCategoryData.PlaceholderField(childComplexity), true

	case "TRBAdminNoteGuidanceLetterCategoryData.appliesToMeetingSummary":
		if e.complexity.TRBAdminNoteGuidanceLetterCategoryData.AppliesToMeetingSummary == nil {
			break
		}

		return e.complexity.TRBAdminNoteGuidanceLetterCategoryData.AppliesToMeetingSummary(childComplexity), true

	case "TRBAdminNoteGuidanceLetterCategoryData.appliesToNextSteps":
		if e.complexity.TRBAdminNoteGuidanceLetterCategoryData.AppliesToNextSteps == nil {
			break
		}

		return e.complexity.TRBAdminNoteGuidanceLetterCategoryData.AppliesToNextSteps(childComplexity), true

	case "TRBAdminNoteGuidanceLetterCategoryData.insights":
		if e.complexity.TRBAdminNoteGuidanceLetterCategoryData.Insights == nil {
			break
		}

		return e.complexity.TRBAdminNoteGuidanceLetterCategoryData.Insights(childComplexity), true

	case "TRBAdminNoteInitialRequestFormCategoryData.appliesToAttendees":
		if e.complexity.TRBAdminNoteInitialRequestFormCategoryData.AppliesToAttendees == nil {
			break
		}

		return e.complexity.TRBAdminNoteInitialRequestFormCategoryData.AppliesToAttendees(childComplexity), true

	case "TRBAdminNoteInitialRequestFormCategoryData.appliesToBasicRequestDetails":
		if e.complexity.TRBAdminNoteInitialRequestFormCategoryData.AppliesToBasicRequestDetails == nil {
			break
		}

		return e.complexity.TRBAdminNoteInitialRequestFormCategoryData.AppliesToBasicRequestDetails(childComplexity), true

	case "TRBAdminNoteInitialRequestFormCategoryData.appliesToSubjectAreas":
		if e.complexity.TRBAdminNoteInitialRequestFormCategoryData.AppliesToSubjectAreas == nil {
			break
		}

		return e.complexity.TRBAdminNoteInitialRequestFormCategoryData.AppliesToSubjectAreas(childComplexity), true

	case "TRBAdminNoteSupportingDocumentsCategoryData.documents":
		if e.complexity.TRBAdminNoteSupportingDocumentsCategoryData.Documents == nil {
			break
		}

		return e.complexity.TRBAdminNoteSupportingDocumentsCategoryData.Documents(childComplexity), true

	case "TRBFundingSource.createdAt":
		if e.complexity.TRBFundingSource.CreatedAt == nil {
			break
		}

		return e.complexity.TRBFundingSource.CreatedAt(childComplexity), true

	case "TRBFundingSource.createdBy":
		if e.complexity.TRBFundingSource.CreatedBy == nil {
			break
		}

		return e.complexity.TRBFundingSource.CreatedBy(childComplexity), true

	case "TRBFundingSource.fundingNumber":
		if e.complexity.TRBFundingSource.FundingNumber == nil {
			break
		}

		return e.complexity.TRBFundingSource.FundingNumber(childComplexity), true

	case "TRBFundingSource.id":
		if e.complexity.TRBFundingSource.ID == nil {
			break
		}

		return e.complexity.TRBFundingSource.ID(childComplexity), true

	case "TRBFundingSource.modifiedAt":
		if e.complexity.TRBFundingSource.ModifiedAt == nil {
			break
		}

		return e.complexity.TRBFundingSource.ModifiedAt(childComplexity), true

	case "TRBFundingSource.modifiedBy":
		if e.complexity.TRBFundingSource.ModifiedBy == nil {
			break
		}

		return e.complexity.TRBFundingSource.ModifiedBy(childComplexity), true

	case "TRBFundingSource.source":
		if e.complexity.TRBFundingSource.Source == nil {
			break
		}

		return e.complexity.TRBFundingSource.Source(childComplexity), true

	case "TRBFundingSource.trbRequestId":
		if e.complexity.TRBFundingSource.TRBRequestID == nil {
			break
		}

		return e.complexity.TRBFundingSource.TRBRequestID(childComplexity), true

	case "TRBGuidanceLetter.author":
		if e.complexity.TRBGuidanceLetter.Author == nil {
			break
		}

		return e.complexity.TRBGuidanceLetter.Author(childComplexity), true

	case "TRBGuidanceLetter.createdAt":
		if e.complexity.TRBGuidanceLetter.CreatedAt == nil {
			break
		}

		return e.complexity.TRBGuidanceLetter.CreatedAt(childComplexity), true

	case "TRBGuidanceLetter.createdBy":
		if e.complexity.TRBGuidanceLetter.CreatedBy == nil {
			break
		}

		return e.complexity.TRBGuidanceLetter.CreatedBy(childComplexity), true

	case "TRBGuidanceLetter.dateSent":
		if e.complexity.TRBGuidanceLetter.DateSent == nil {
			break
		}

		return e.complexity.TRBGuidanceLetter.DateSent(childComplexity), true

	case "TRBGuidanceLetter.followupPoint":
		if e.complexity.TRBGuidanceLetter.FollowupPoint == nil {
			break
		}

		return e.complexity.TRBGuidanceLetter.FollowupPoint(childComplexity), true

	case "TRBGuidanceLetter.id":
		if e.complexity.TRBGuidanceLetter.ID == nil {
			break
		}

		return e.complexity.TRBGuidanceLetter.ID(childComplexity), true

	case "TRBGuidanceLetter.insights":
		if e.complexity.TRBGuidanceLetter.Insights == nil {
			break
		}

		return e.complexity.TRBGuidanceLetter.Insights(childComplexity), true

	case "TRBGuidanceLetter.isFollowupRecommended":
		if e.complexity.TRBGuidanceLetter.IsFollowupRecommended == nil {
			break
		}

		return e.complexity.TRBGuidanceLetter.IsFollowupRecommended(childComplexity), true

	case "TRBGuidanceLetter.meetingSummary":
		if e.complexity.TRBGuidanceLetter.MeetingSummary == nil {
			break
		}

		return e.complexity.TRBGuidanceLetter.MeetingSummary(childComplexity), true

	case "TRBGuidanceLetter.modifiedAt":
		if e.complexity.TRBGuidanceLetter.ModifiedAt == nil {
			break
		}

		return e.complexity.TRBGuidanceLetter.ModifiedAt(childComplexity), true

	case "TRBGuidanceLetter.modifiedBy":
		if e.complexity.TRBGuidanceLetter.ModifiedBy == nil {
			break
		}

		return e.complexity.TRBGuidanceLetter.ModifiedBy(childComplexity), true

	case "TRBGuidanceLetter.nextSteps":
		if e.complexity.TRBGuidanceLetter.NextSteps == nil {
			break
		}

		return e.complexity.TRBGuidanceLetter.NextSteps(childComplexity), true

	case "TRBGuidanceLetter.trbRequestId":
		if e.complexity.TRBGuidanceLetter.TRBRequestID == nil {
			break
		}

		return e.complexity.TRBGuidanceLetter.TRBRequestID(childComplexity), true

	case "TRBGuidanceLetterInsight.author":
		if e.complexity.TRBGuidanceLetterInsight.Author == nil {
			break
		}

		return e.complexity.TRBGuidanceLetterInsight.Author(childComplexity), true

	case "TRBGuidanceLetterInsight.category":
		if e.complexity.TRBGuidanceLetterInsight.Category == nil {
			break
		}

		return e.complexity.TRBGuidanceLetterInsight.Category(childComplexity), true

	case "TRBGuidanceLetterInsight.createdAt":
		if e.complexity.TRBGuidanceLetterInsight.CreatedAt == nil {
			break
		}

		return e.complexity.TRBGuidanceLetterInsight.CreatedAt(childComplexity), true

	case "TRBGuidanceLetterInsight.createdBy":
		if e.complexity.TRBGuidanceLetterInsight.CreatedBy == nil {
			break
		}

		return e.complexity.TRBGuidanceLetterInsight.CreatedBy(childComplexity), true

	case "TRBGuidanceLetterInsight.deletedAt":
		if e.complexity.TRBGuidanceLetterInsight.DeletedAt == nil {
			break
		}

		return e.complexity.TRBGuidanceLetterInsight.DeletedAt(childComplexity), true

	case "TRBGuidanceLetterInsight.id":
		if e.complexity.TRBGuidanceLetterInsight.ID == nil {
			break
		}

		return e.complexity.TRBGuidanceLetterInsight.ID(childComplexity), true

	case "TRBGuidanceLetterInsight.insight":
		if e.complexity.TRBGuidanceLetterInsight.Insight == nil {
			break
		}

		return e.complexity.TRBGuidanceLetterInsight.Insight(childComplexity), true

	case "TRBGuidanceLetterInsight.links":
		if e.complexity.TRBGuidanceLetterInsight.Links == nil {
			break
		}

		return e.complexity.TRBGuidanceLetterInsight.Links(childComplexity), true

	case "TRBGuidanceLetterInsight.modifiedAt":
		if e.complexity.TRBGuidanceLetterInsight.ModifiedAt == nil {
			break
		}

		return e.complexity.TRBGuidanceLetterInsight.ModifiedAt(childComplexity), true

	case "TRBGuidanceLetterInsight.modifiedBy":
		if e.complexity.TRBGuidanceLetterInsight.ModifiedBy == nil {
			break
		}

		return e.complexity.TRBGuidanceLetterInsight.ModifiedBy(childComplexity), true

	case "TRBGuidanceLetterInsight.trbRequestId":
		if e.complexity.TRBGuidanceLetterInsight.TRBRequestID == nil {
			break
		}

		return e.complexity.TRBGuidanceLetterInsight.TRBRequestID(childComplexity), true

	case "TRBGuidanceLetterInsight.title":
		if e.complexity.TRBGuidanceLetterInsight.Title == nil {
			break
		}

		return e.complexity.TRBGuidanceLetterInsight.Title(childComplexity), true

	case "TRBRequest.adminNotes":
		if e.complexity.TRBRequest.AdminNotes == nil {
			break
		}

		return e.complexity.TRBRequest.AdminNotes(childComplexity), true

	case "TRBRequest.archived":
		if e.complexity.TRBRequest.Archived == nil {
			break
		}

		return e.complexity.TRBRequest.Archived(childComplexity), true

	case "TRBRequest.attendees":
		if e.complexity.TRBRequest.Attendees == nil {
			break
		}

		return e.complexity.TRBRequest.Attendees(childComplexity), true

	case "TRBRequest.consultMeetingTime":
		if e.complexity.TRBRequest.ConsultMeetingTime == nil {
			break
		}

		return e.complexity.TRBRequest.ConsultMeetingTime(childComplexity), true

	case "TRBRequest.contractName":
		if e.complexity.TRBRequest.ContractName == nil {
			break
		}

		return e.complexity.TRBRequest.ContractName(childComplexity), true

	case "TRBRequest.contractNumbers":
		if e.complexity.TRBRequest.ContractNumbers == nil {
			break
		}

		return e.complexity.TRBRequest.ContractNumbers(childComplexity), true

	case "TRBRequest.createdAt":
		if e.complexity.TRBRequest.CreatedAt == nil {
			break
		}

		return e.complexity.TRBRequest.CreatedAt(childComplexity), true

	case "TRBRequest.createdBy":
		if e.complexity.TRBRequest.CreatedBy == nil {
			break
		}

		return e.complexity.TRBRequest.CreatedBy(childComplexity), true

	case "TRBRequest.documents":
		if e.complexity.TRBRequest.Documents == nil {
			break
		}

		return e.complexity.TRBRequest.Documents(childComplexity), true

	case "TRBRequest.feedback":
		if e.complexity.TRBRequest.Feedback == nil {
			break
		}

		return e.complexity.TRBRequest.Feedback(childComplexity), true

	case "TRBRequest.form":
		if e.complexity.TRBRequest.Form == nil {
			break
		}

		return e.complexity.TRBRequest.Form(childComplexity), true

	case "TRBRequest.guidanceLetter":
		if e.complexity.TRBRequest.GuidanceLetter == nil {
			break
		}

		return e.complexity.TRBRequest.GuidanceLetter(childComplexity), true

	case "TRBRequest.id":
		if e.complexity.TRBRequest.ID == nil {
			break
		}

		return e.complexity.TRBRequest.ID(childComplexity), true

	case "TRBRequest.isRecent":
		if e.complexity.TRBRequest.IsRecent == nil {
			break
		}

		return e.complexity.TRBRequest.IsRecent(childComplexity), true

	case "TRBRequest.lastMeetingDate":
		if e.complexity.TRBRequest.LastMeetingDate == nil {
			break
		}

		return e.complexity.TRBRequest.LastMeetingDate(childComplexity), true

	case "TRBRequest.modifiedAt":
		if e.complexity.TRBRequest.ModifiedAt == nil {
			break
		}

		return e.complexity.TRBRequest.ModifiedAt(childComplexity), true

	case "TRBRequest.modifiedBy":
		if e.complexity.TRBRequest.ModifiedBy == nil {
			break
		}

		return e.complexity.TRBRequest.ModifiedBy(childComplexity), true

	case "TRBRequest.name":
		if e.complexity.TRBRequest.Name == nil {
			break
		}

		return e.complexity.TRBRequest.Name(childComplexity), true

	case "TRBRequest.nextMeetingDate":
		if e.complexity.TRBRequest.NextMeetingDate == nil {
			break
		}

		return e.complexity.TRBRequest.NextMeetingDate(childComplexity), true

	case "TRBRequest.relatedIntakes":
		if e.complexity.TRBRequest.RelatedIntakes == nil {
			break
		}

		return e.complexity.TRBRequest.RelatedIntakes(childComplexity), true

	case "TRBRequest.relatedTRBRequests":
		if e.complexity.TRBRequest.RelatedTRBRequests == nil {
			break
		}

		return e.complexity.TRBRequest.RelatedTRBRequests(childComplexity), true

	case "TRBRequest.relationType":
		if e.complexity.TRBRequest.RelationType == nil {
			break
		}

		return e.complexity.TRBRequest.RelationType(childComplexity), true

	case "TRBRequest.requesterComponent":
		if e.complexity.TRBRequest.RequesterComponent == nil {
			break
		}

		return e.complexity.TRBRequest.RequesterComponent(childComplexity), true

	case "TRBRequest.requesterInfo":
		if e.complexity.TRBRequest.RequesterInfo == nil {
			break
		}

		return e.complexity.TRBRequest.RequesterInfo(childComplexity), true

	case "TRBRequest.state":
		if e.complexity.TRBRequest.State == nil {
			break
		}

		return e.complexity.TRBRequest.State(childComplexity), true

	case "TRBRequest.status":
		if e.complexity.TRBRequest.Status == nil {
			break
		}

		return e.complexity.TRBRequest.Status(childComplexity), true

	case "TRBRequest.systems":
		if e.complexity.TRBRequest.Systems == nil {
			break
		}

		return e.complexity.TRBRequest.Systems(childComplexity), true

	case "TRBRequest.trbLead":
		if e.complexity.TRBRequest.TRBLead == nil {
			break
		}

		return e.complexity.TRBRequest.TRBLead(childComplexity), true

	case "TRBRequest.taskStatuses":
		if e.complexity.TRBRequest.TaskStatuses == nil {
			break
		}

		return e.complexity.TRBRequest.TaskStatuses(childComplexity), true

	case "TRBRequest.trbLeadInfo":
		if e.complexity.TRBRequest.TrbLeadInfo == nil {
			break
		}

		return e.complexity.TRBRequest.TrbLeadInfo(childComplexity), true

	case "TRBRequest.type":
		if e.complexity.TRBRequest.Type == nil {
			break
		}

		return e.complexity.TRBRequest.Type(childComplexity), true

	case "TRBRequestAttendee.component":
		if e.complexity.TRBRequestAttendee.Component == nil {
			break
		}

		return e.complexity.TRBRequestAttendee.Component(childComplexity), true

	case "TRBRequestAttendee.createdAt":
		if e.complexity.TRBRequestAttendee.CreatedAt == nil {
			break
		}

		return e.complexity.TRBRequestAttendee.CreatedAt(childComplexity), true

	case "TRBRequestAttendee.createdBy":
		if e.complexity.TRBRequestAttendee.CreatedBy == nil {
			break
		}

		return e.complexity.TRBRequestAttendee.CreatedBy(childComplexity), true

	case "TRBRequestAttendee.euaUserId":
		if e.complexity.TRBRequestAttendee.EUAUserID == nil {
			break
		}

		return e.complexity.TRBRequestAttendee.EUAUserID(childComplexity), true

	case "TRBRequestAttendee.id":
		if e.complexity.TRBRequestAttendee.ID == nil {
			break
		}

		return e.complexity.TRBRequestAttendee.ID(childComplexity), true

	case "TRBRequestAttendee.modifiedAt":
		if e.complexity.TRBRequestAttendee.ModifiedAt == nil {
			break
		}

		return e.complexity.TRBRequestAttendee.ModifiedAt(childComplexity), true

	case "TRBRequestAttendee.modifiedBy":
		if e.complexity.TRBRequestAttendee.ModifiedBy == nil {
			break
		}

		return e.complexity.TRBRequestAttendee.ModifiedBy(childComplexity), true

	case "TRBRequestAttendee.role":
		if e.complexity.TRBRequestAttendee.Role == nil {
			break
		}

		return e.complexity.TRBRequestAttendee.Role(childComplexity), true

	case "TRBRequestAttendee.trbRequestId":
		if e.complexity.TRBRequestAttendee.TRBRequestID == nil {
			break
		}

		return e.complexity.TRBRequestAttendee.TRBRequestID(childComplexity), true

	case "TRBRequestAttendee.userInfo":
		if e.complexity.TRBRequestAttendee.UserInfo == nil {
			break
		}

		return e.complexity.TRBRequestAttendee.UserInfo(childComplexity), true

	case "TRBRequestContractNumber.contractNumber":
		if e.complexity.TRBRequestContractNumber.ContractNumber == nil {
			break
		}

		return e.complexity.TRBRequestContractNumber.ContractNumber(childComplexity), true

	case "TRBRequestContractNumber.createdAt":
		if e.complexity.TRBRequestContractNumber.CreatedAt == nil {
			break
		}

		return e.complexity.TRBRequestContractNumber.CreatedAt(childComplexity), true

	case "TRBRequestContractNumber.createdBy":
		if e.complexity.TRBRequestContractNumber.CreatedBy == nil {
			break
		}

		return e.complexity.TRBRequestContractNumber.CreatedBy(childComplexity), true

	case "TRBRequestContractNumber.id":
		if e.complexity.TRBRequestContractNumber.ID == nil {
			break
		}

		return e.complexity.TRBRequestContractNumber.ID(childComplexity), true

	case "TRBRequestContractNumber.modifiedAt":
		if e.complexity.TRBRequestContractNumber.ModifiedAt == nil {
			break
		}

		return e.complexity.TRBRequestContractNumber.ModifiedAt(childComplexity), true

	case "TRBRequestContractNumber.modifiedBy":
		if e.complexity.TRBRequestContractNumber.ModifiedBy == nil {
			break
		}

		return e.complexity.TRBRequestContractNumber.ModifiedBy(childComplexity), true

	case "TRBRequestContractNumber.trbRequestID":
		if e.complexity.TRBRequestContractNumber.TRBRequestID == nil {
			break
		}

		return e.complexity.TRBRequestContractNumber.TRBRequestID(childComplexity), true

	case "TRBRequestDocument.deletedAt":
		if e.complexity.TRBRequestDocument.DeletedAt == nil {
			break
		}

		return e.complexity.TRBRequestDocument.DeletedAt(childComplexity), true

	case "TRBRequestDocument.documentType":
		if e.complexity.TRBRequestDocument.DocumentType == nil {
			break
		}

		return e.complexity.TRBRequestDocument.DocumentType(childComplexity), true

	case "TRBRequestDocument.fileName":
		if e.complexity.TRBRequestDocument.FileName == nil {
			break
		}

		return e.complexity.TRBRequestDocument.FileName(childComplexity), true

	case "TRBRequestDocument.id":
		if e.complexity.TRBRequestDocument.ID == nil {
			break
		}

		return e.complexity.TRBRequestDocument.ID(childComplexity), true

	case "TRBRequestDocument.status":
		if e.complexity.TRBRequestDocument.Status == nil {
			break
		}

		return e.complexity.TRBRequestDocument.Status(childComplexity), true

	case "TRBRequestDocument.url":
		if e.complexity.TRBRequestDocument.URL == nil {
			break
		}

		return e.complexity.TRBRequestDocument.URL(childComplexity), true

	case "TRBRequestDocument.uploadedAt":
		if e.complexity.TRBRequestDocument.UploadedAt == nil {
			break
		}

		return e.complexity.TRBRequestDocument.UploadedAt(childComplexity), true

	case "TRBRequestDocumentType.commonType":
		if e.complexity.TRBRequestDocumentType.CommonType == nil {
			break
		}

		return e.complexity.TRBRequestDocumentType.CommonType(childComplexity), true

	case "TRBRequestDocumentType.otherTypeDescription":
		if e.complexity.TRBRequestDocumentType.OtherTypeDescription == nil {
			break
		}

		return e.complexity.TRBRequestDocumentType.OtherTypeDescription(childComplexity), true

	case "TRBRequestFeedback.action":
		if e.complexity.TRBRequestFeedback.Action == nil {
			break
		}

		return e.complexity.TRBRequestFeedback.Action(childComplexity), true

	case "TRBRequestFeedback.author":
		if e.complexity.TRBRequestFeedback.Author == nil {
			break
		}

		return e.complexity.TRBRequestFeedback.Author(childComplexity), true

	case "TRBRequestFeedback.copyTrbMailbox":
		if e.complexity.TRBRequestFeedback.CopyTRBMailbox == nil {
			break
		}

		return e.complexity.TRBRequestFeedback.CopyTRBMailbox(childComplexity), true

	case "TRBRequestFeedback.createdAt":
		if e.complexity.TRBRequestFeedback.CreatedAt == nil {
			break
		}

		return e.complexity.TRBRequestFeedback.CreatedAt(childComplexity), true

	case "TRBRequestFeedback.createdBy":
		if e.complexity.TRBRequestFeedback.CreatedBy == nil {
			break
		}

		return e.complexity.TRBRequestFeedback.CreatedBy(childComplexity), true

	case "TRBRequestFeedback.feedbackMessage":
		if e.complexity.TRBRequestFeedback.FeedbackMessage == nil {
			break
		}

		return e.complexity.TRBRequestFeedback.FeedbackMessage(childComplexity), true

	case "TRBRequestFeedback.id":
		if e.complexity.TRBRequestFeedback.ID == nil {
			break
		}

		return e.complexity.TRBRequestFeedback.ID(childComplexity), true

	case "TRBRequestFeedback.modifiedAt":
		if e.complexity.TRBRequestFeedback.ModifiedAt == nil {
			break
		}

		return e.complexity.TRBRequestFeedback.ModifiedAt(childComplexity), true

	case "TRBRequestFeedback.modifiedBy":
		if e.complexity.TRBRequestFeedback.ModifiedBy == nil {
			break
		}

		return e.complexity.TRBRequestFeedback.ModifiedBy(childComplexity), true

	case "TRBRequestFeedback.notifyEuaIds":
		if e.complexity.TRBRequestFeedback.NotifyEuaIds == nil {
			break
		}

		return e.complexity.TRBRequestFeedback.NotifyEuaIds(childComplexity), true

	case "TRBRequestFeedback.trbRequestId":
		if e.complexity.TRBRequestFeedback.TRBRequestID == nil {
			break
		}

		return e.complexity.TRBRequestFeedback.TRBRequestID(childComplexity), true

	case "TRBRequestForm.collabDateCloud":
		if e.complexity.TRBRequestForm.CollabDateCloud == nil {
			break
		}

		return e.complexity.TRBRequestForm.CollabDateCloud(childComplexity), true

	case "TRBRequestForm.collabDateEnterpriseArchitecture":
		if e.complexity.TRBRequestForm.CollabDateEnterpriseArchitecture == nil {
			break
		}

		return e.complexity.TRBRequestForm.CollabDateEnterpriseArchitecture(childComplexity), true

	case "TRBRequestForm.collabDateGovernanceReviewBoard":
		if e.complexity.TRBRequestForm.CollabDateGovernanceReviewBoard == nil {
			break
		}

		return e.complexity.TRBRequestForm.CollabDateGovernanceReviewBoard(childComplexity), true

	case "TRBRequestForm.collabDateOther":
		if e.complexity.TRBRequestForm.CollabDateOther == nil {
			break
		}

		return e.complexity.TRBRequestForm.CollabDateOther(childComplexity), true

	case "TRBRequestForm.collabDatePrivacyAdvisor":
		if e.complexity.TRBRequestForm.CollabDatePrivacyAdvisor == nil {
			break
		}

		return e.complexity.TRBRequestForm.CollabDatePrivacyAdvisor(childComplexity), true

	case "TRBRequestForm.collabDateSecurity":
		if e.complexity.TRBRequestForm.CollabDateSecurity == nil {
			break
		}

		return e.complexity.TRBRequestForm.CollabDateSecurity(childComplexity), true

	case "TRBRequestForm.collabGRBConsultRequested":
		if e.complexity.TRBRequestForm.CollabGRBConsultRequested == nil {
			break
		}

		return e.complexity.TRBRequestForm.CollabGRBConsultRequested(childComplexity), true

	case "TRBRequestForm.collabGroupOther":
		if e.complexity.TRBRequestForm.CollabGroupOther == nil {
			break
		}

		return e.complexity.TRBRequestForm.CollabGroupOther(childComplexity), true

	case "TRBRequestForm.collabGroups":
		if e.complexity.TRBRequestForm.CollabGroups == nil {
			break
		}

		return e.complexity.TRBRequestForm.CollabGroups(childComplexity), true

	case "TRBRequestForm.component":
		if e.complexity.TRBRequestForm.Component == nil {
			break
		}

		return e.complexity.TRBRequestForm.Component(childComplexity), true

	case "TRBRequestForm.createdAt":
		if e.complexity.TRBRequestForm.CreatedAt == nil {
			break
		}

		return e.complexity.TRBRequestForm.CreatedAt(childComplexity), true

	case "TRBRequestForm.createdBy":
		if e.complexity.TRBRequestForm.CreatedBy == nil {
			break
		}

		return e.complexity.TRBRequestForm.CreatedBy(childComplexity), true

	case "TRBRequestForm.expectedEndDate":
		if e.complexity.TRBRequestForm.ExpectedEndDate == nil {
			break
		}

		return e.complexity.TRBRequestForm.ExpectedEndDate(childComplexity), true

	case "TRBRequestForm.expectedStartDate":
		if e.complexity.TRBRequestForm.ExpectedStartDate == nil {
			break
		}

		return e.complexity.TRBRequestForm.ExpectedStartDate(childComplexity), true

	case "TRBRequestForm.fundingSources":
		if e.complexity.TRBRequestForm.FundingSources == nil {
			break
		}

		return e.complexity.TRBRequestForm.FundingSources(childComplexity), true

	case "TRBRequestForm.hasExpectedStartEndDates":
		if e.complexity.TRBRequestForm.HasExpectedStartEndDates == nil {
			break
		}

		return e.complexity.TRBRequestForm.HasExpectedStartEndDates(childComplexity), true

	case "TRBRequestForm.hasSolutionInMind":
		if e.complexity.TRBRequestForm.HasSolutionInMind == nil {
			break
		}

		return e.complexity.TRBRequestForm.HasSolutionInMind(childComplexity), true

	case "TRBRequestForm.id":
		if e.complexity.TRBRequestForm.ID == nil {
			break
		}

		return e.complexity.TRBRequestForm.ID(childComplexity), true

	case "TRBRequestForm.modifiedAt":
		if e.complexity.TRBRequestForm.ModifiedAt == nil {
			break
		}

		return e.complexity.TRBRequestForm.ModifiedAt(childComplexity), true

	case "TRBRequestForm.modifiedBy":
		if e.complexity.TRBRequestForm.ModifiedBy == nil {
			break
		}

		return e.complexity.TRBRequestForm.ModifiedBy(childComplexity), true

	case "TRBRequestForm.needsAssistanceWith":
		if e.complexity.TRBRequestForm.NeedsAssistanceWith == nil {
			break
		}

		return e.complexity.TRBRequestForm.NeedsAssistanceWith(childComplexity), true

	case "TRBRequestForm.proposedSolution":
		if e.complexity.TRBRequestForm.ProposedSolution == nil {
			break
		}

		return e.complexity.TRBRequestForm.ProposedSolution(childComplexity), true

	case "TRBRequestForm.status":
		if e.complexity.TRBRequestForm.Status == nil {
			break
		}

		return e.complexity.TRBRequestForm.Status(childComplexity), true

	case "TRBRequestForm.subjectAreaOptionOther":
		if e.complexity.TRBRequestForm.SubjectAreaOptionOther == nil {
			break
		}

		return e.complexity.TRBRequestForm.SubjectAreaOptionOther(childComplexity), true

	case "TRBRequestForm.subjectAreaOptions":
		if e.complexity.TRBRequestForm.SubjectAreaOptions == nil {
			break
		}

		return e.complexity.TRBRequestForm.SubjectAreaOptions(childComplexity), true

	case "TRBRequestForm.submittedAt":
		if e.complexity.TRBRequestForm.SubmittedAt == nil {
			break
		}

		return e.complexity.TRBRequestForm.SubmittedAt(childComplexity), true

	case "TRBRequestForm.systemIntakes":
		if e.complexity.TRBRequestForm.SystemIntakes == nil {
			break
		}

		return e.complexity.TRBRequestForm.SystemIntakes(childComplexity), true

	case "TRBRequestForm.trbRequestId":
		if e.complexity.TRBRequestForm.TRBRequestID == nil {
			break
		}

		return e.complexity.TRBRequestForm.TRBRequestID(childComplexity), true

	case "TRBRequestForm.whereInProcess":
		if e.complexity.TRBRequestForm.WhereInProcess == nil {
			break
		}

		return e.complexity.TRBRequestForm.WhereInProcess(childComplexity), true

	case "TRBRequestForm.whereInProcessOther":
		if e.complexity.TRBRequestForm.WhereInProcessOther == nil {
			break
		}

		return e.complexity.TRBRequestForm.WhereInProcessOther(childComplexity), true

	case "TRBTaskStatuses.attendConsultStatus":
		if e.complexity.TRBTaskStatuses.AttendConsultStatus == nil {
			break
		}

		return e.complexity.TRBTaskStatuses.AttendConsultStatus(childComplexity), true

	case "TRBTaskStatuses.consultPrepStatus":
		if e.complexity.TRBTaskStatuses.ConsultPrepStatus == nil {
			break
		}

		return e.complexity.TRBTaskStatuses.ConsultPrepStatus(childComplexity), true

	case "TRBTaskStatuses.feedbackStatus":
		if e.complexity.TRBTaskStatuses.FeedbackStatus == nil {
			break
		}

		return e.complexity.TRBTaskStatuses.FeedbackStatus(childComplexity), true

	case "TRBTaskStatuses.formStatus":
		if e.complexity.TRBTaskStatuses.FormStatus == nil {
			break
		}

		return e.complexity.TRBTaskStatuses.FormStatus(childComplexity), true

	case "TRBTaskStatuses.guidanceLetterStatus":
		if e.complexity.TRBTaskStatuses.GuidanceLetterStatus == nil {
			break
		}

		return e.complexity.TRBTaskStatuses.GuidanceLetterStatus(childComplexity), true

	case "TRBTaskStatuses.guidanceLetterStatusTaskList":
		if e.complexity.TRBTaskStatuses.GuidanceLetterStatusTaskList == nil {
			break
		}

		return e.complexity.TRBTaskStatuses.GuidanceLetterStatusTaskList(childComplexity), true

	case "UpdateSystemIntakePayload.systemIntake":
		if e.complexity.UpdateSystemIntakePayload.SystemIntake == nil {
			break
		}

		return e.complexity.UpdateSystemIntakePayload.SystemIntake(childComplexity), true

	case "UpdateSystemIntakePayload.userErrors":
		if e.complexity.UpdateSystemIntakePayload.UserErrors == nil {
			break
		}

		return e.complexity.UpdateSystemIntakePayload.UserErrors(childComplexity), true

	case "UserAccount.commonName":
		if e.complexity.UserAccount.CommonName == nil {
			break
		}

		return e.complexity.UserAccount.CommonName(childComplexity), true

	case "UserAccount.email":
		if e.complexity.UserAccount.Email == nil {
			break
		}

		return e.complexity.UserAccount.Email(childComplexity), true

	case "UserAccount.familyName":
		if e.complexity.UserAccount.FamilyName == nil {
			break
		}

		return e.complexity.UserAccount.FamilyName(childComplexity), true

	case "UserAccount.givenName":
		if e.complexity.UserAccount.GivenName == nil {
			break
		}

		return e.complexity.UserAccount.GivenName(childComplexity), true

	case "UserAccount.hasLoggedIn":
		if e.complexity.UserAccount.HasLoggedIn == nil {
			break
		}

		return e.complexity.UserAccount.HasLoggedIn(childComplexity), true

	case "UserAccount.id":
		if e.complexity.UserAccount.ID == nil {
			break
		}

		return e.complexity.UserAccount.ID(childComplexity), true

	case "UserAccount.locale":
		if e.complexity.UserAccount.Locale == nil {
			break
		}

		return e.complexity.UserAccount.Locale(childComplexity), true

	case "UserAccount.username":
		if e.complexity.UserAccount.Username == nil {
			break
		}

		return e.complexity.UserAccount.Username(childComplexity), true

	case "UserAccount.zoneInfo":
		if e.complexity.UserAccount.ZoneInfo == nil {
			break
		}

		return e.complexity.UserAccount.ZoneInfo(childComplexity), true

	case "UserError.message":
		if e.complexity.UserError.Message == nil {
			break
		}

		return e.complexity.UserError.Message(childComplexity), true

	case "UserError.path":
		if e.complexity.UserError.Path == nil {
			break
		}

		return e.complexity.UserError.Path(childComplexity), true

	case "UserInfo.commonName":
		if e.complexity.UserInfo.CommonName == nil {
			break
		}

		return e.complexity.UserInfo.CommonName(childComplexity), true

	case "UserInfo.email":
		if e.complexity.UserInfo.Email == nil {
			break
		}

		return e.complexity.UserInfo.Email(childComplexity), true

	case "UserInfo.euaUserId":
		if e.complexity.UserInfo.EuaUserID == nil {
			break
		}

		return e.complexity.UserInfo.EuaUserID(childComplexity), true

	case "UserInfo.firstName":
		if e.complexity.UserInfo.FirstName == nil {
			break
		}

		return e.complexity.UserInfo.FirstName(childComplexity), true

	case "UserInfo.lastName":
		if e.complexity.UserInfo.LastName == nil {
			break
		}

		return e.complexity.UserInfo.LastName(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputCastSystemIntakeGRBReviewerVoteInput,
		ec.unmarshalInputCloseTRBRequestInput,
		ec.unmarshalInputCreateCedarSystemBookmarkInput,
		ec.unmarshalInputCreateGRBReviewerInput,
		ec.unmarshalInputCreateSystemIntakeContactInput,
		ec.unmarshalInputCreateSystemIntakeDocumentInput,
		ec.unmarshalInputCreateSystemIntakeGRBReviewersInput,
		ec.unmarshalInputCreateSystemIntakeInput,
		ec.unmarshalInputCreateSystemIntakeNoteInput,
		ec.unmarshalInputCreateTRBAdminNoteConsultSessionInput,
		ec.unmarshalInputCreateTRBAdminNoteGeneralRequestInput,
		ec.unmarshalInputCreateTRBAdminNoteGuidanceLetterInput,
		ec.unmarshalInputCreateTRBAdminNoteInitialRequestFormInput,
		ec.unmarshalInputCreateTRBAdminNoteSupportingDocumentsInput,
		ec.unmarshalInputCreateTRBGuidanceLetterInsightInput,
		ec.unmarshalInputCreateTRBRequestAttendeeInput,
		ec.unmarshalInputCreateTRBRequestDocumentInput,
		ec.unmarshalInputCreateTRBRequestFeedbackInput,
		ec.unmarshalInputDeleteSystemIntakeContactInput,
		ec.unmarshalInputDeleteSystemIntakeGRBPresentationLinksInput,
		ec.unmarshalInputDeleteSystemIntakeGRBReviewerInput,
		ec.unmarshalInputDeleteTRBRequestFundingSourcesInput,
		ec.unmarshalInputEmailNotificationRecipients,
		ec.unmarshalInputReopenTRBRequestInput,
		ec.unmarshalInputSendCantFindSomethingEmailInput,
		ec.unmarshalInputSendFeedbackEmailInput,
		ec.unmarshalInputSendReportAProblemEmailInput,
		ec.unmarshalInputSendTRBGuidanceLetterInput,
		ec.unmarshalInputSetRolesForUserOnSystemInput,
		ec.unmarshalInputSetSystemIntakeRelationExistingServiceInput,
		ec.unmarshalInputSetSystemIntakeRelationExistingSystemInput,
		ec.unmarshalInputSetSystemIntakeRelationNewSystemInput,
		ec.unmarshalInputSetTRBRequestRelationExistingServiceInput,
		ec.unmarshalInputSetTRBRequestRelationExistingSystemInput,
		ec.unmarshalInputSetTRBRequestRelationNewSystemInput,
		ec.unmarshalInputStartGRBReviewInput,
		ec.unmarshalInputSubmitIntakeInput,
		ec.unmarshalInputSystemIntakeAnnualSpendingInput,
		ec.unmarshalInputSystemIntakeBusinessOwnerInput,
		ec.unmarshalInputSystemIntakeChangeLCIDRetirementDateInput,
		ec.unmarshalInputSystemIntakeCloseRequestInput,
		ec.unmarshalInputSystemIntakeCollaboratorInput,
		ec.unmarshalInputSystemIntakeConfirmLCIDInput,
		ec.unmarshalInputSystemIntakeContractInput,
		ec.unmarshalInputSystemIntakeCostsInput,
		ec.unmarshalInputSystemIntakeExpireLCIDInput,
		ec.unmarshalInputSystemIntakeFundingSourceInput,
		ec.unmarshalInputSystemIntakeFundingSourcesInput,
		ec.unmarshalInputSystemIntakeGRBPresentationLinksInput,
		ec.unmarshalInputSystemIntakeGovernanceTeamInput,
		ec.unmarshalInputSystemIntakeISSOInput,
		ec.unmarshalInputSystemIntakeIssueLCIDInput,
		ec.unmarshalInputSystemIntakeNotITGovReqInput,
		ec.unmarshalInputSystemIntakeProductManagerInput,
		ec.unmarshalInputSystemIntakeProgressToNewStepsInput,
		ec.unmarshalInputSystemIntakeRejectIntakeInput,
		ec.unmarshalInputSystemIntakeReopenRequestInput,
		ec.unmarshalInputSystemIntakeRequestEditsInput,
		ec.unmarshalInputSystemIntakeRequesterInput,
		ec.unmarshalInputSystemIntakeRequesterWithComponentInput,
		ec.unmarshalInputSystemIntakeRetireLCIDInput,
		ec.unmarshalInputSystemIntakeUnretireLCIDInput,
		ec.unmarshalInputSystemIntakeUpdateLCIDInput,
		ec.unmarshalInputTRBRequestChanges,
		ec.unmarshalInputUpdateSystemIntakeAdminLeadInput,
		ec.unmarshalInputUpdateSystemIntakeContactDetailsInput,
		ec.unmarshalInputUpdateSystemIntakeContactInput,
		ec.unmarshalInputUpdateSystemIntakeContractDetailsInput,
		ec.unmarshalInputUpdateSystemIntakeGRBReviewerInput,
		ec.unmarshalInputUpdateSystemIntakeLinkedCedarSystemInput,
		ec.unmarshalInputUpdateSystemIntakeNoteInput,
		ec.unmarshalInputUpdateSystemIntakeRequestDetailsInput,
		ec.unmarshalInputUpdateSystemIntakeReviewDatesInput,
		ec.unmarshalInputUpdateTRBGuidanceLetterInput,
		ec.unmarshalInputUpdateTRBGuidanceLetterInsightInput,
		ec.unmarshalInputUpdateTRBGuidanceLetterInsightOrderInput,
		ec.unmarshalInputUpdateTRBRequestAttendeeInput,
		ec.unmarshalInputUpdateTRBRequestConsultMeetingTimeInput,
		ec.unmarshalInputUpdateTRBRequestFormInput,
		ec.unmarshalInputUpdateTRBRequestFundingSourcesInput,
		ec.unmarshalInputUpdateTRBRequestTRBLeadInput,
		ec.unmarshalInputUploadSystemIntakeGRBPresentationDeckInput,
		ec.unmarshalInputcreateSystemIntakeGRBDiscussionPostInput,
		ec.unmarshalInputcreateSystemIntakeGRBDiscussionReplyInput,
		ec.unmarshalInputupdateSystemIntakeGRBReviewFormInputPresentationAsync,
		ec.unmarshalInputupdateSystemIntakeGRBReviewFormInputPresentationStandard,
		ec.unmarshalInputupdateSystemIntakeGRBReviewFormInputTimeframeAsync,
		ec.unmarshalInputupdateSystemIntakeGRBReviewTypeInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema.graphql", Input: `"""
UserError represents application-level errors that are the result of
either user or application developer error.
"""
type UserError {
  message: String!
  path: [String!]!
}

"""
PersonRole is an enumeration of values for a person's role
"""
enum PersonRole {
  BUSINESS_OWNER
  PRODUCT_OWNER
  SYSTEM_OWNER
  SYSTEM_MAINTAINER
  CONTRACT_OFFICE_RSREPRESENTATIVE
  CLOUD_NAVIGATOR
  INFORMATION_SYSTEM_SECURITY_ADVISOR
  PRIVACY_ADVISOR
  CRA
  OTHER
}

"""
CedarAuthorityToOperate represents the response from the /authorityToOperate endpoint from the CEDAR Core API.
"""
type CedarAuthorityToOperate {
  cedarId: String!
  uuid: String!
  actualDispositionDate: Time
  containsPersonallyIdentifiableInformation: Boolean
  countOfTotalNonPrivilegedUserPopulation: Int!
  countOfOpenPoams: Int!
  countOfTotalPrivilegedUserPopulation: Int!
  dateAuthorizationMemoExpires: Time
  dateAuthorizationMemoSigned: Time
  eAuthenticationLevel: String
  fips199OverallImpactRating: Int
  fismaSystemAcronym: String
  fismaSystemName: String
  isAccessedByNonOrganizationalUsers: Boolean
  isPiiLimitedToUserNameAndPass: Boolean
  isProtectedHealthInformation: Boolean
  lastActScaDate: Time
  lastAssessmentDate: Time
  lastContingencyPlanCompletionDate: Time
  lastPenTestDate: Time
  piaCompletionDate: Time
  primaryCyberRiskAdvisor: String
  privacySubjectMatterExpert: String
  recoveryPointObjective: Float
  recoveryTimeObjective: Float
  systemOfRecordsNotice: [String!]!
  tlcPhase: String
  xlcPhase: String
}

"""
CedarBudget represents info about the budget associated with a CEDAR object (usually a system); this information is returned from the CEDAR Core API
Right now, this does not tie in with any other types defined here, and is a root node until that changes.
"""
type CedarBudget {
  fiscalYear: String
  funding: String
  fundingId: String
  fundingSource: String
  id: String
  name: String
  projectId: String!
  projectTitle: String
  systemId: String
}

"""
CedarBudgetActualCost represents an individual budget actual cost item; this information is returned from the CEDAR Core API
as a part of the CedarBudgetSystemCost object
"""
type CedarBudgetActualCost {
  actualSystemCost: String
  fiscalYear: String
  systemId: String
}

"""
CedarBudgetSystemCost represents info about the actual cost associated with a CEDAR object (usually a system); this information is returned from the CEDAR Core API
Right now, this does not tie in with any other types defined here, and is a root node until that changes.
"""
type CedarBudgetSystemCost {
  budgetActualCost: [CedarBudgetActualCost!]!
}

"""
CedarSoftwareProductItem represents an individual software product; this information is returned from the CEDAR Core API
as a part of the CedarSoftwareProducts object
"""
type CedarSoftwareProductItem {
  apiGatewayUse: Boolean
  elaPurchase: String
  elaVendorId: String
  providesAiCapability: Boolean
  refstr: String
  softwareCatagoryConnectionGuid: String
  softwareVendorConnectionGuid: String
  softwareCost: String
  softwareElaOrganization: String
  softwareName: String
  systemSoftwareConnectionGuid: String
  technopediaCategory: String
  technopediaID: String
  vendorName: String
}

"""
CedarSoftwareProducts represents the response from the /softwareProducts endpoint from the CEDAR Core API.
Right now, this does not tie in with any other types defined here, and is a root node until that changes.
"""
type CedarSoftwareProducts {
  aiSolnCatg: [String]!
  aiSolnCatgOther: String
  apiDataArea: [String]!
  apiDescPubLocation: String
  apiDescPublished: String
  apiFHIRUse: String
  apiFHIRUseOther: String
  apiHasPortal: Boolean
  apisAccessibility: String
  apisDeveloped: String
  developmentStage: String
  softwareProducts: [CedarSoftwareProductItem!]!
  systemHasAPIGateway: Boolean
  usesAiTech: String
}

"""
CedarSystem represents the response from the /system/detail endpoint from the CEDAR Core API.
Right now, this does not tie in with any other types defined here, and is a root node until that changes.
"""
type CedarSystem {
  id: String!
  name: String!
  description: String
  acronym: String
  atoEffectiveDate: Time
  atoExpirationDate: Time
  status: String
  businessOwnerOrg: String
  businessOwnerOrgComp: String
  businessOwnerRoles: [CedarRole!]!
  systemMaintainerOrg: String
  systemMaintainerOrgComp: String
  versionId: String
  isBookmarked: Boolean!
  linkedTrbRequests(state: TRBRequestState! = OPEN): [TRBRequest!]!
  linkedSystemIntakes(state: SystemIntakeState! = OPEN): [SystemIntake!]!
  uuid: String
}

"""
CedarSubSystem represents the response from the /system/detail
"""
type CedarSubSystem {
  id: String!
  name: String!
  acronym: String
  description: String
}

"""
CedarThreat represents the response from the /threat endpoint from the CEDAR Core API.
"""
type CedarThreat {
  alternativeId: String
  controlFamily: String
  daysOpen: Int
  id: String
  parentId: String
  type: String
  weaknessRiskLevel: String
}

"""
BusinessOwnerInformation contains information about the Business Owner for a CEDAR system
"""
type CedarBusinessOwnerInformation {
  beneficiaryAddressPurpose: [String!]!
  beneficiaryAddressPurposeOther: String
  beneficiaryAddressSource: [String!]!
  beneficiaryAddressSourceOther: String
  beneficiaryInformation: [String!]!
  costPerYear: String
  editBeneficiaryInformation: Boolean
  isCmsOwned: Boolean
  nr508UserInterface: String
  numberOfContractorFte: String
  numberOfFederalFte: String
  numberOfSupportedUsersPerMonth: String
  storesBankingData: Boolean
  storesBeneficiaryAddress: Boolean
}

"""
SystemMaintainerInformation contains information about the system maintainer of a CEDAR system
"""
type CedarSystemMaintainerInformation {
  agileUsed: Boolean
  adHocAgileDeploymentFrequency: String
  authoritativeDatasource: String
  businessArtifactsOnDemand: Boolean
  dataAtRestEncryptionKeyManagement: String
  deploymentFrequency: String
  devCompletionPercent: String
  devWorkDescription: String
  ecapParticipation: Boolean
  frontendAccessType: String
  hardCodedIPAddress: Boolean
  ip6EnabledAssetPercent: String
  ip6TransitionPlan: String
  ipEnabledAssetCount: Int
  legalHoldCaseName: String
  locallyStoredUserInformation: Boolean
  majorRefreshDate: Time
  multifactorAuthenticationMethod: [String!]!
  multifactorAuthenticationMethodOther: String
  netAccessibility: String
  networkTrafficEncryptionKeyManagement: String
  noMajorRefresh: Boolean
  noPersistentRecordsFlag: Boolean
  noPlannedMajorRefresh: Boolean
  omDocumentationOnDemand: Boolean
  plansToRetireReplace: String
  quarterToRetireReplace: String
  recordsManagementBucket: [String!]!
  recordsManagementDisposalLocation: String
  recordsManagementDisposalPlan: String
  recordsUnderLegalHold: Boolean
  sourceCodeOnDemand: Boolean
  systemCustomization: String
  systemDataLocation: [String!]!
  systemDataLocationNotes: String
  systemDesignOnDemand: Boolean
  systemProductionDate: Time
  systemRequirementsOnDemand: Boolean
  testPlanOnDemand: Boolean
  testReportsOnDemand: Boolean
  testScriptsOnDemand: Boolean
  yearToRetireReplace: String
}

"""
This is the Representation of Cedar system with additional related information
"""
type CedarSystemDetails {
  cedarSystem: CedarSystem!
  systemMaintainerInformation: CedarSystemMaintainerInformation!
  businessOwnerInformation: CedarBusinessOwnerInformation!
  roles: [CedarRole!]!
  deployments: [CedarDeployment!]!
  threats: [CedarThreat!]!
  urls: [CedarURL!]!
  isMySystem: Boolean
  atoEffectiveDate: Time
  atoExpirationDate: Time
}

"""
Represents a user's bookmark of a cedar system
"""
type CedarSystemBookmark {
  euaUserId: String!
  cedarSystemId: String!
}

type CedarContract {
  startDate: Time
  endDate: Time
  contractNumber: String
  contractName: String
  description: String
  orderNumber: String
  serviceProvided: String
  isDeliveryOrg: Boolean
  systemID: String
}

"""
Represents a person response from Okta
"""
type UserInfo {
  firstName: String!
  lastName: String!
  commonName: String!
  email: EmailAddress!
  euaUserId: String!
}

"""
The data needed to bookmark a cedar system
"""
input CreateCedarSystemBookmarkInput {
  cedarSystemId: String!
}

"""
The payload when bookmarking a cedar system
"""
type CreateCedarSystemBookmarkPayload {
  cedarSystemBookmark: CedarSystemBookmark
}

"""
The payload when deleting a bookmark for a cedar system
"""
type DeleteCedarSystemBookmarkPayload {
  cedarSystemId: String!
}

"""
CedarDeployment represents a deployment of a system; this information is returned from the CEDAR Core API
"""
type CedarDeployment {
  id: String!
  name: String!
  systemID: String!
  startDate: Time
  endDate: Time
  isHotSite: String
  description: String
  contractorName: String
  systemVersion: String
  hasProductionData: String
  replicatedSystemElements: [String!]!
  deploymentType: String
  systemName: String
  deploymentElementID: String
  state: String
  status: String
  wanType: String
  dataCenter: CedarDataCenter
}

"""
CedarDataCenter represents the data center used by a CedarDeployment
"""
type CedarDataCenter {
  id: String
  name: String
  version: String
  description: String
  state: String
  status: String
  startDate: Time
  endDate: Time
  address1: String
  address2: String
  city: String
  addressState: String
  zip: String
}

"""
The possible types of assignees for CedarRoles
"""
enum CedarAssigneeType {
  PERSON
  ORGANIZATION
}

"""
CedarRoleType represents a type of role that a user or organization can hold for some system, i.e. "Business Owner" or "Project Lead"
"""
type CedarRoleType {
  id: String!
  application: String!
  name: String!
  description: String
}

"""
CedarRole represents a role assigned to a person or organization for a system; this information is returned from the CEDAR Core API
"""
type CedarRole {
  application: String!
  objectID: String!
  roleTypeID: String!
  assigneeType: CedarAssigneeType
  assigneeUsername: String
  assigneeEmail: String
  assigneeOrgID: String
  assigneeOrgName: String
  assigneeFirstName: String
  assigneeLastName: String
  assigneePhone: String
  assigneeDesc: String
  roleTypeName: String
  roleTypeDesc: String
  roleID: String
  objectType: String
}

input SetRolesForUserOnSystemInput {
  cedarSystemID: String!
  euaUserId: String!
  desiredRoleTypeIDs: [String!]!
}

"""
CedarURL represents info about a URL associated with a CEDAR object (usually a system); this information is returned from the CEDAR Core API
"""
type CedarURL {
  id: String!
  address: String
  isBehindWebApplicationFirewall: Boolean
  isAPIEndpoint: Boolean
  isVersionCodeRepository: Boolean
  urlHostingEnv: String
}

"""
CedarExchangeTypeOfDataItem is one item of the TypeofData slice in a CedarExchange
"""
type CedarExchangeTypeOfDataItem {
  id: String
  name: String
}


enum ExchangeDirection {
  SENDER
  RECEIVER
}

"""
CedarExchange represents info about how data is exchanged between a CEDAR system and another system
"""
type CedarExchange {
  connectionFrequency: [String!]!
  containsBankingData: Boolean
  containsBeneficiaryAddress: Boolean
  containsPhi: Boolean
  containsPii: Boolean
  containsHealthDisparityData: Boolean
  dataExchangeAgreement: String
  dataFormat: String
  dataFormatOther: String
  exchangeDescription: String
  exchangeEndDate: Time
  exchangeId: String
  exchangeName: String
  exchangeRetiredDate: Time
  exchangeStartDate: Time
  exchangeState: String
  exchangeVersion: String
  exchangeDirection: ExchangeDirection
  fromOwnerId: String
  fromOwnerName: String
  fromOwnerType: String
  isBeneficiaryMailingFile: Boolean
  numOfRecords: String
  sharedViaApi: Boolean
  toOwnerId: String
  toOwnerName: String
  toOwnerType: String
  typeOfData: [CedarExchangeTypeOfDataItem!]!
}

"""
A solution proposal within a Business Case
"""
type BusinessCaseSolution {
  acquisitionApproach: String
  cons: String
  costSavings: String
  hasUi: String
  hostingCloudServiceType: String
  hostingLocation: String
  hostingType: String
  pros: String
  securityIsApproved: Boolean
  securityIsBeingReviewed: String
  summary: String
  title: String
}

"""
The cost phase of a
"""
enum LifecycleCostPhase {
  DEVELOPMENT
  OPERATIONS_AND_MAINTENANCE
  OTHER
}

"""
The type of a lifecycle cost solution, part of a Business Case
"""
enum LifecycleCostSolution {
  A
  B
  PREFERRED
}

"""
Represents a lifecycle cost phase
"""
enum LifecycleCostYear {
  LIFECYCLE_COST_YEAR_1
  LIFECYCLE_COST_YEAR_2
  LIFECYCLE_COST_YEAR_3
  LIFECYCLE_COST_YEAR_4
  LIFECYCLE_COST_YEAR_5
}

"""
Information related to the estimated costs over one lifecycle phase for a
system with a given solution
"""
type EstimatedLifecycleCost {
  businessCaseId: UUID!
  cost: Int
  id: UUID!
  phase: LifecycleCostPhase
  solution: LifecycleCostSolution
  year: LifecycleCostYear
}

"""
The status of a Business Case associated with an system IT governence request
"""
enum BusinessCaseStatus {
  CLOSED
  OPEN
}

"""
A Business Case associated with an system IT governence request; contains
equester's justification for their system request
"""
type BusinessCase {
  alternativeASolution: BusinessCaseSolution
  alternativeBSolution: BusinessCaseSolution
  businessNeed: String
  businessOwner: String
  cmsBenefit: String
  createdAt: Time!
  currentSolutionSummary: String
  euaUserId: String!
  id: UUID!
  lifecycleCostLines: [EstimatedLifecycleCost!]
  preferredSolution: BusinessCaseSolution
  priorityAlignment: String
  projectName: String
  requester: String
  requesterPhoneNumber: String
  status: BusinessCaseStatus!
  successIndicators: String
  systemIntake: SystemIntake!
  updatedAt: Time!
}

"""
The type of an IT governance (system) request
"""
enum SystemIntakeRequestType {
  MAJOR_CHANGES
  NEW
  RECOMPETE
  SHUTDOWN
}

"""
Represents the OIT Business Owner of a system
"""
type SystemIntakeBusinessOwner {
  component: String
  name: String
}

"""
Represents a date used for start and end dates on a contract
"""
type ContractDate {
  day: String
  month: String
  year: String
}

"""
Represents a contract for work on a system
"""
type SystemIntakeContract {
  contractor: String
  endDate: ContractDate!
  hasContract: String
  startDate: ContractDate!
  vehicle: String
}

"""
Represents expectations about a system's additional costs
"""
type SystemIntakeCosts {
  expectedIncreaseAmount: String
  isExpectingIncrease: String
}

"""
Represents current and planned annual costs for a system
"""
type SystemIntakeAnnualSpending {
  currentAnnualSpending: String
  currentAnnualSpendingITPortion: String
  plannedYearOneSpending: String
  plannedYearOneSpendingITPortion: String
}

"""
Represents a contact in OIT who is collaborating with the user
creating a system IT governance request
"""
type SystemIntakeCollaborator {
  acronym: String!
  collaborator: String!
  key: String!
  label: String!
  name: String!
}

"""
Contains multiple system request collaborators, if any
"""
type SystemIntakeGovernanceTeam {
  isPresent: Boolean
  teams: [SystemIntakeCollaborator!]
}

"""
The Information System Security Officer (ISSO) that is
assicuated with a system request, if any
"""
type SystemIntakeISSO {
  isPresent: Boolean
  name: String
}

"""
The author of a note added to a system request
"""
type SystemIntakeNoteAuthor {
  eua: String!
  name: String!
}

"""
A note added to a system request
"""
type SystemIntakeNote {
  author: SystemIntakeNoteAuthor!
  content: HTML!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
  isArchived: Boolean!
  editor: UserInfo
  id: UUID!
}

"""
The product manager associated with a system
"""
type SystemIntakeProductManager {
  component: String
  name: String
}

"""
The contact who made an IT governance request for a system
"""
type SystemIntakeRequester {
  component: String
  email: String
  name: String!
}

"""
Represents a single row of presentation link and document data for a system intake's Async GRB review
All data values are optional but there is a constraint to require one data value on insertion
"""
type SystemIntakeGRBPresentationLinks {
  systemIntakeID: UUID!
  createdBy: UUID!
  createdAt: Time!
  modifiedBy: UUID
  modifiedAt: Time
  recordingLink: String
  recordingPasscode: String
  transcriptLink: String
  transcriptFileName: String
  transcriptFileURL: String
  transcriptFileStatus: SystemIntakeDocumentStatus
  presentationDeckFileName: String
  presentationDeckFileURL: String
  presentationDeckFileStatus: SystemIntakeDocumentStatus
}

"""
Data needed to add system intake presentation link data
One of the optional link/files values is required to pass the database constraint
"""
input SystemIntakeGRBPresentationLinksInput {
  systemIntakeID: UUID!
  recordingLink: String @goField(omittable: true)
  recordingPasscode: String @goField(omittable: true)
  transcriptLink: String @goField(omittable: true)
  transcriptFileData: Upload @goField(omittable: true)
  presentationDeckFileData: Upload @goField(omittable: true)
}

"""
Data needed to upload a presentation deck
"""
input UploadSystemIntakeGRBPresentationDeckInput {
  systemIntakeID: UUID!
  presentationDeckFileData: Upload
}

input DeleteSystemIntakeGRBPresentationLinksInput {
  systemIntakeID: UUID!
}

"""
Represents an IT governance request for a system
"""
type SystemIntake {
  actions: [SystemIntakeAction!]!
  adminLead: String
  archivedAt: Time
  businessCase: BusinessCase
  businessNeed: String
  businessOwner: SystemIntakeBusinessOwner!
  businessSolution: String
  contract: SystemIntakeContract!
  costs: SystemIntakeCosts
  annualSpending: SystemIntakeAnnualSpending
  createdAt: Time # TODO - This should probably not be nullable, but some data in IMPL & PROD has it nulled out. We should fix this in the future. (see EASI-3090)
  currentStage: String
  decisionNextSteps: HTML
  eaCollaborator: String
  eaCollaboratorName: String
  euaUserId: String
  existingFunding: Boolean
  fundingSources: [SystemIntakeFundingSource!]!
  governanceRequestFeedbacks: [GovernanceRequestFeedback!]!
  governanceTeams: SystemIntakeGovernanceTeam!
  grbDate: Time
  grtDate: Time
  lastMeetingDate: Time
  nextMeetingDate: Time
  grbReviewStartedAt: Time
  """
  All users are are involved in a GRB review. This will be deprecated in favor of grbVotingInformation
  """
  grbReviewers: [SystemIntakeGRBReviewer!]! @deprecated(reason: "Use grbVotingInformation.grbReviewers instead")
  """
  All information about voting activity in a GRB review
  """
  grbVotingInformation: GRBVotingInformation!
  id: UUID!
  isso: SystemIntakeISSO!
  lcid: String
  lcidIssuedAt: Time
  lcidExpiresAt: Time
  lcidScope: HTML
  lcidCostBaseline: String
  lcidRetiresAt: Time
  needsEaSupport: Boolean
  usingSoftware: String
  acquisitionMethods: [SystemIntakeSoftwareAcquisitionMethods!]!
  notes: [SystemIntakeNote!]!
  oitSecurityCollaborator: String
  oitSecurityCollaboratorName: String
  productManager: SystemIntakeProductManager!
  projectAcronym: String
  rejectionReason: HTML
  requestName: String
  requestType: SystemIntakeRequestType!
  requester: SystemIntakeRequester!
  # Both of these fields only really exist because the ` + "`" + `requester` + "`" + ` type (above) always calls Okta to get the ` + "`" + `email` + "`" + ` field, and the
  # 2 below (requesterName & requesterComponent) are just fields right from the system intakes table
  # TODO Remove them when email is not always fetched on the ` + "`" + `requester` + "`" + ` type
  requesterName: String
  requesterComponent: String
  state: SystemIntakeState!
  step: SystemIntakeStep!
  submittedAt: Time
  trbCollaborator: String
  trbCollaboratorName: String
  updatedAt: Time
  grtReviewEmailBody: String
  decidedAt: Time
  businessCaseId: UUID
  cedarSystemId: String
  documents: [SystemIntakeDocument!]!
  hasUiChanges: Boolean
  usesAiTech: Boolean
  itGovTaskStatuses:  ITGovTaskStatuses!
  requestFormState: SystemIntakeFormState!
  draftBusinessCaseState: SystemIntakeFormState!
  """
  This is a calculated state based on if a date exists for the GRT Meeting date
  """
  grtMeetingState: SystemIntakeMeetingState!
  finalBusinessCaseState: SystemIntakeFormState!
  """
  This is a calculated state based on if a date exists for the GRB Meeting date
  """
  grbMeetingState: SystemIntakeMeetingState!
  decisionState: SystemIntakeDecisionState!
  statusRequester: SystemIntakeStatusRequester!
  statusAdmin: SystemIntakeStatusAdmin!
  """
  Intentionally nullable - lcidStatus is null if (and only if) the intake doesn't have an LCID issued
  """
  lcidStatus: SystemIntakeLCIDStatus
  trbFollowUpRecommendation: SystemIntakeTRBFollowUp
  contractName: String
  relationType: RequestRelationType

  """
  Linked systems
  """
  systems: [CedarSystem!]!

  """
  Linked contract numbers
  """
  contractNumbers: [SystemIntakeContractNumber!]!
  """
  Other System Intakes that share a CEDAR System or Contract Number
  """
  relatedIntakes: [SystemIntake!]!
  """
  TRB Requests that share a CEDAR System or Contract Number
  """
  relatedTRBRequests: [TRBRequest!]!
  """
  GRB Review Discussion Posts/Threads
  """
  grbDiscussions: [SystemIntakeGRBReviewDiscussion!]!
  """
  GRB Presentation Link Data
  """
  grbPresentationLinks: SystemIntakeGRBPresentationLinks
  """
  GRB Presentation Deck Metadata
  """
  grbPresentationDeckRequesterReminderEmailSentTime: Time
  """
  GRB Review Form
  """
  grbReviewType: SystemIntakeGRBReviewType!
  grbReviewAsyncRecordingTime: Time
  grbReviewAsyncEndDate: Time
  grbReviewAsyncGRBMeetingTime: Time
  grbReviewAsyncStatus: SystemIntakeGRBReviewAsyncStatusType
  grbReviewAsyncManualEndDate: Time
}

"""
GRBVotingInformation holds all the information about the voting session for a GRB Review. 
"""
type GRBVotingInformation {
  """
  Who is doing the review for these GRB sessions
  """
  grbReviewers: [SystemIntakeGRBReviewer!]!
  """
  The status of the voting session, this can include if it is not started or in progress, as well as the suggested decision of the voting session
  """
  votingStatus: GRBVotingInformationStatus!
  """
  How many people have voted no objection
  """
  numberOfNoObjection: Int!
  """
  How many people have voted with an objection
  """
  numberOfObjection: Int!
  """
  How many people have not voted
  """
  numberOfNotVoted: Int!
}
"""
All possible permutations of the status of a GRB ASYNC voting session
"""
enum GRBVotingInformationStatus {
  """
  This status is not rendered to the front end, but it is to show a state where the GRB async voting button has not yet been pressed
  """
  NOT_STARTED
  """
  Setup button has been pressed. This shows for the In progress and Past due statuses
  """
  IN_PROGRESS
  """
  End date has passed, quorum of votes has been met (5 votes), vote count for approval met (0 votes with objections).
  """
  APPROVED
  """
  End date has passed, quorum of votes has been met (5 votes), vote count has two or more objections.
  """
  NOT_APPROVED
  """
  End date has passed, quorum of votes has been met (5 votes), vote count is mostly no objections but has one objection vote OR voting has been ended early and a quorum has not been met.
  """
  INCONCLUSIVE
}

"""
The status type of the System Intake GRB Review
"""
enum SystemIntakeGRBReviewAsyncStatusType {
  IN_PROGRESS
  COMPLETED
  PAST_DUE
}

type SystemIntakeContractNumber {
  id: UUID!
  systemIntakeID: UUID!
  contractNumber: String!
  createdBy: UUID!
  createdAt: Time!
  modifiedBy: UUID
  modifiedAt: Time
}

# TODO Figure out if there's any better way to name this.
# The name currently feels a bit abstract, but it's the best I could come up with.
enum RequestRelationType {
  NEW_SYSTEM
  EXISTING_SYSTEM
  EXISTING_SERVICE
}

"""
SystemIntakeState represents whether the intake is open or closed
"""
enum SystemIntakeState {
  OPEN
  CLOSED
}

"""
SystemIntakeStep represents the current step in the intake process
"""
enum SystemIntakeStep {
  INITIAL_REQUEST_FORM
  DRAFT_BUSINESS_CASE
  GRT_MEETING
  GRB_MEETING
  FINAL_BUSINESS_CASE
  DECISION_AND_NEXT_STEPS
}

"""
SystemIntakeSoftwareAcquisitionMethods represents the different methods requesters can select in a system intake
"""
enum SystemIntakeSoftwareAcquisitionMethods {
  CONTRACTOR_FURNISHED
  FED_FURNISHED
  ELA_OR_INTERNAL
  NOT_YET_DETERMINED
  OTHER
}

"""
The statuses of the different steps in the IT Gov v2 workflow
"""
type ITGovTaskStatuses {
  intakeFormStatus: ITGovIntakeFormStatus!
  feedbackFromInitialReviewStatus: ITGovFeedbackStatus!
  bizCaseDraftStatus: ITGovDraftBusinessCaseStatus!
  grtMeetingStatus: ITGovGRTStatus!
  bizCaseFinalStatus: ITGovFinalBusinessCaseStatus!
  grbMeetingStatus: ITGovGRBStatus!
  decisionAndNextStepsStatus: ITGovDecisionStatus!
}

"""
The input data used to set the requester of a system request
"""
input SystemIntakeRequesterInput {
  name: String!
}

"""
The input data used to initialize an IT governance request for a system
"""
input CreateSystemIntakeInput {
  requestType: SystemIntakeRequestType!
  requester: SystemIntakeRequesterInput!
}

"""
The input data used to set the requester for a system request along with the
requester's business component
"""
input SystemIntakeRequesterWithComponentInput {
  name: String!
  component: String!
}

"""
The input data used to set the CMS Business Owner of a system
"""
input SystemIntakeBusinessOwnerInput {
  name: String!
  component: String!
}

"""
The input data used to set the CMS product manager/lead of a system
"""
input SystemIntakeProductManagerInput {
  name: String!
  component: String!
}

"""
The input data used to set the ISSO associated with a system request, if any
"""
input SystemIntakeISSOInput {
  isPresent: Boolean
  name: String
}

"""
The input data used to add an OIT collaborator for a system request
"""
input SystemIntakeCollaboratorInput {
  collaborator: String!
  name: String!
  key: String!
}

"""
The input data used to set the list of OIT collaborators for a system request
"""
input SystemIntakeGovernanceTeamInput {
  isPresent: Boolean
  teams: [SystemIntakeCollaboratorInput]
}

"""
The input data used to update the contact details of the people associated with
a system request
"""
input UpdateSystemIntakeContactDetailsInput {
  id: UUID!
  requester: SystemIntakeRequesterWithComponentInput!,
  businessOwner: SystemIntakeBusinessOwnerInput!,
  productManager: SystemIntakeProductManagerInput!,
  isso: SystemIntakeISSOInput!,
  governanceTeams: SystemIntakeGovernanceTeamInput!,
}

"""
Input to update some fields on a system request
"""
input UpdateSystemIntakeRequestDetailsInput {
  id: UUID!
  requestName: String
  businessNeed: String
  businessSolution: String
  currentStage: String
  needsEaSupport: Boolean
  hasUiChanges: Boolean
  usesAiTech: Boolean
  usingSoftware: String
  acquisitionMethods: [SystemIntakeSoftwareAcquisitionMethods!]!
  cedarSystemId: String
}

"""
Represents the source of funding for a system
"""
type SystemIntakeFundingSource {
  id: UUID!
  fundingNumber: String
  source: String
}

"""
Represents the source of funding for a system
"""
input SystemIntakeFundingSourceInput {
  fundingNumber: String
  source: String
}

"""
The input required to specify the funding source(s) for a system intake
"""
input SystemIntakeFundingSourcesInput {
  existingFunding: Boolean
  fundingSources: [SystemIntakeFundingSourceInput!]!
}

"""
Input data for estimated system cost increases associated with a system request

NOTE: This field is no longer in intake form but data/query is preserved for existing intakes (EASI-2076)
"""
input SystemIntakeCostsInput {
  expectedIncreaseAmount: String
  isExpectingIncrease: String

}

"""
Input data for current and planned year one annual costs associated with a system request
"""
input SystemIntakeAnnualSpendingInput {
  currentAnnualSpending: String
  currentAnnualSpendingITPortion: String
  plannedYearOneSpending: String
  plannedYearOneSpendingITPortion: String
}

"""
Input data containing information about a contract related to a system request
"""
input SystemIntakeContractInput {
  contractor: String
  endDate: Time
  hasContract: String
  startDate: Time
  numbers: [String!]!
}

"""
Input data for updating contract details related to a system request
"""
input UpdateSystemIntakeContractDetailsInput {
  id: UUID!
  fundingSources: SystemIntakeFundingSourcesInput
  costs: SystemIntakeCostsInput
  annualSpending: SystemIntakeAnnualSpendingInput
  contract: SystemIntakeContractInput
}

"""
Input data for updating a system intake's relationship to a CEDAR system
"""
input UpdateSystemIntakeLinkedCedarSystemInput {
  id: UUID!
  cedarSystemId: String
}

# RequestRelationType.NEW_SYSTEM
input SetSystemIntakeRelationNewSystemInput {
  systemIntakeID: UUID!
  contractNumbers: [String!]!
}

# RequestRelationType.EXISTING_SYSTEM
input SetSystemIntakeRelationExistingSystemInput {
  systemIntakeID: UUID!
  cedarSystemIDs: [String!]!
  contractNumbers: [String!]!
}

# RequestRelationType.EXISTING_SERVICE
input SetSystemIntakeRelationExistingServiceInput {
  systemIntakeID: UUID!
  contractName: String!
  contractNumbers: [String!]!
}

"""
Represents the type of an action that is being done to a system request
"""
enum SystemIntakeActionType {
  # v2 actions
  PROGRESS_TO_NEW_STEP
  REQUEST_EDITS
  EXPIRE_LCID
  NOT_GOVERNANCE
  CLOSE_REQUEST
  REOPEN_REQUEST
  UPDATE_LCID
  CONFIRM_LCID
  RETIRE_LCID
  UNRETIRE_LCID
  CHANGE_LCID_RETIREMENT_DATE

  # v1/v2 actions - originally from v1, still used in v2
  ISSUE_LCID
  SUBMIT_INTAKE
  REJECT

  # v1 actions - no longer used in IT Gov v2 workflow
  BIZ_CASE_NEEDS_CHANGES
  CREATE_BIZ_CASE
  GUIDE_RECEIVED_CLOSE
  EXTEND_LCID
  NEED_BIZ_CASE
  NO_GOVERNANCE_NEEDED
  NOT_IT_REQUEST
  NOT_RESPONDING_CLOSE
  PROVIDE_FEEDBACK_NEED_BIZ_CASE
  PROVIDE_GRT_FEEDBACK_BIZ_CASE_DRAFT
  PROVIDE_GRT_FEEDBACK_BIZ_CASE_FINAL
  READY_FOR_GRB
  READY_FOR_GRT

  SEND_EMAIL
  SUBMIT_BIZ_CASE
  SUBMIT_FINAL_BIZ_CASE

}

"""
An action taken on a system intake, often resulting in a change in status.
"""
type SystemIntakeAction {
  id: UUID!
  systemIntake: SystemIntake!
  type: SystemIntakeActionType!
  actor: SystemIntakeActionActor!
  step: SystemIntakeStep
  feedback: HTML
  lcidExpirationChange: SystemIntakeLCIDExpirationChange
  previousRetirementDate: Time # purposely nullable, unlike previousDate in lcidExpirationChange - not all intakes will have a retirement date
  newRetirementDate: Time # purposely nullable, unlike newDate in lcidExpirationChange - not all intakes will have a retirement date
  createdAt: Time!
}

"""
Contains the data about a change to the expiration date of a system request's lifecycle ID
"""
type SystemIntakeLCIDExpirationChange {
  previousDate: Time!
  newDate: Time!
  previousScope: HTML
  newScope: HTML
  previousNextSteps: HTML
  newNextSteps: HTML
  previousCostBaseline: String
  newCostBaseline: String
}

"""
The contact who is associated with an action being done to a system request
"""
type SystemIntakeActionActor {
  name: String!
  email: String!
}

"""
Input for starting a GRB Review, which notifies reviewers by email
"""
input StartGRBReviewInput {
  systemIntakeID: UUID!
}

"""
GRB Reviewers for a system Intake Request
"""
type SystemIntakeGRBReviewer {
  id: UUID!
  userAccount: UserAccount!
  systemIntakeID: UUID!
  votingRole: SystemIntakeGRBReviewerVotingRole!
  vote: SystemIntakeAsyncGRBVotingOption
  voteComment: String
  dateVoted: Time
  grbRole: SystemIntakeGRBReviewerRole!
  createdBy: UUID!
  createdAt: Time!
  modifiedBy: UUID
  modifiedAt: Time
}

"""
GRBReviewerComparisonIntake represents a response when searching for System Intakes
that have GRB reviewers as compared to another Intake.

It's effectively a smaller subset of some of the fields on the entire Intake, plus a special
"reviewers" field specific to the comparison operation.
"""
type GRBReviewerComparisonIntake {
  id: UUID!
  requestName: String!
  reviewers: [GRBReviewerComparison!]!
  intakeCreatedAt: Time
}

"""
GRBReviewerComparison represents an individual GRB Reviewer within the context of a
comparison operation between two system intakes.

For this reason, it is similar to a regular "type GRBReviewer", but has an extra
field for "isCurrentReviewer", representing whether or not the specific GRB Reviewer
is already on the intake being compared against or not.
"""
type GRBReviewerComparison {
  id: UUID!
  userAccount: UserAccount!
  euaUserId: String!
  votingRole: SystemIntakeGRBReviewerVotingRole!
  grbRole: SystemIntakeGRBReviewerRole!
  isCurrentReviewer: Boolean!
}

input CreateGRBReviewerInput {
  euaUserId: String!
  votingRole: SystemIntakeGRBReviewerVotingRole!
  grbRole: SystemIntakeGRBReviewerRole!
}

input CreateSystemIntakeGRBReviewersInput {
  systemIntakeID: UUID!
  reviewers: [CreateGRBReviewerInput!]!
}

type CreateSystemIntakeGRBReviewersPayload {
  reviewers: [SystemIntakeGRBReviewer!]!
}

input UpdateSystemIntakeGRBReviewerInput {
  reviewerID: UUID!
  votingRole: SystemIntakeGRBReviewerVotingRole!
  grbRole: SystemIntakeGRBReviewerRole!
}

input CastSystemIntakeGRBReviewerVoteInput {
  systemIntakeID: UUID!
  vote: SystemIntakeAsyncGRBVotingOption!
  voteComment: String
}

input DeleteSystemIntakeGRBReviewerInput {
  reviewerID: UUID!
}

enum SystemIntakeGRBReviewerRole {
  CO_CHAIR_CIO
  CO_CHAIR_CFO
  CO_CHAIR_HCA
  ACA_3021_REP
  CCIIO_REP
  PROGRAM_OPERATIONS_BDG_CHAIR
  CMCS_REP
  FED_ADMIN_BDG_CHAIR
  PROGRAM_INTEGRITY_BDG_CHAIR
  QIO_REP
  SUBJECT_MATTER_EXPERT
  OTHER
}

enum SystemIntakeGRBReviewerVotingRole {
  VOTING
  ALTERNATE
  NON_VOTING
}

enum SystemIntakeAsyncGRBVotingOption {
  NO_OBJECTION
  OBJECTION
}

type SystemIntakeGRBReviewDiscussionPost {
  id: UUID!
  content: HTML!
  votingRole: SystemIntakeGRBReviewerVotingRole
  grbRole: SystemIntakeGRBReviewerRole
  systemIntakeID: UUID!
  createdByUserAccount: UserAccount!
  createdAt: Time!
  modifiedByUserAccount: UserAccount
  modifiedAt: Time
}

type SystemIntakeGRBReviewDiscussion {
  initialPost: SystemIntakeGRBReviewDiscussionPost!
  replies: [SystemIntakeGRBReviewDiscussionPost!]!
}

enum SystemIntakeGRBReviewType {
  STANDARD
  ASYNC
}

input createSystemIntakeGRBDiscussionPostInput {
  systemIntakeID: UUID!
  content: TaggedHTML!
}

input createSystemIntakeGRBDiscussionReplyInput {
  initialPostID: UUID!
  content: TaggedHTML!
}

"""
Input data used to set or update a System Intake's GRB Review Type
"""
input updateSystemIntakeGRBReviewTypeInput {
  systemIntakeID: UUID!
  grbReviewType: SystemIntakeGRBReviewType!
}

"""
Input data used to set or update a System Intake's GRB Review Presentation (Standard) data
"""
input updateSystemIntakeGRBReviewFormInputPresentationStandard {
  systemIntakeID: UUID!
  grbDate: Time!
}

"""
Input data used to set or update a System Intake's GRB Review Presentation (Async) data
"""
input updateSystemIntakeGRBReviewFormInputPresentationAsync {
  systemIntakeID: UUID!
  grbReviewAsyncRecordingTime: Time @goField(omittable: true)
}

"""
Input data used to set or update a System Intake's GRB Review Timeframe (Async) data
"""
input updateSystemIntakeGRBReviewFormInputTimeframeAsync {
  systemIntakeID: UUID!
  grbReviewAsyncEndDate: Time!
  """
  Whether or not to start the GRB review meeting now or not. It defaults to false
  """
  startGRBReview: Boolean! = false
}

"""
Input data used to update the admin lead assigned to a system IT governance
request
"""
input UpdateSystemIntakeAdminLeadInput {
  adminLead: String!
  id: UUID!
}

"""
Input data used to update GRT and GRB dates for a system request
"""
input UpdateSystemIntakeReviewDatesInput {
  grbDate: Time
  grtDate: Time
  id: UUID!
}

"""
Input data for adding a note to a system request
"""
input CreateSystemIntakeNoteInput {
  content: HTML!
  authorName: String!
  intakeId: UUID!
}

"""
Input data for updating an IT governance admin note
"""
input UpdateSystemIntakeNoteInput {
  content: HTML!
  isArchived: Boolean!
  id: UUID!
}

"""
The payload for updating a system's IT governance request
"""
type UpdateSystemIntakePayload {
  systemIntake: SystemIntake
  userErrors: [UserError!]
}

"""
Steps in the system intake process that a Progress to New Step action can progress to
"""
enum SystemIntakeStepToProgressTo {
  DRAFT_BUSINESS_CASE
  GRT_MEETING
  GRB_MEETING
  FINAL_BUSINESS_CASE
}

"""
Input for submitting a Progress to New Step action in IT Gov v2
"""
input SystemIntakeProgressToNewStepsInput {
  systemIntakeID: UUID!
  newStep: SystemIntakeStepToProgressTo!
  meetingDate: Time # optionally used when progressing to GRT or GRB meeting; ignored when progressing to other steps
  notificationRecipients: EmailNotificationRecipients
  feedback: HTML
  grbRecommendations: HTML
  additionalInfo: HTML
  adminNote: HTML
  grbReviewType: SystemIntakeGRBReviewType
}

"""
Input for updating an intake's LCID in IT Gov v2
"""
input SystemIntakeUpdateLCIDInput {
  systemIntakeID: UUID!

  expiresAt: Time
  scope: HTML
  nextSteps: HTML
  costBaseline: String
  reason: HTML
  additionalInfo: HTML
  notificationRecipients: EmailNotificationRecipients
  adminNote: HTML
}

"""
Input for confirming an intake's decision to issue an LCID in IT Gov v2
"""
input SystemIntakeConfirmLCIDInput {
  systemIntakeID: UUID!
  expiresAt: Time!
  scope: HTML!
  nextSteps: HTML!
  trbFollowUp: SystemIntakeTRBFollowUp!
  costBaseline: String
  additionalInfo: HTML
  notificationRecipients: EmailNotificationRecipients
  adminNote: HTML
}

"""
Input for creating a Request Edits Action in Admin Actions v2
"""
input SystemIntakeRequestEditsInput {
  systemIntakeID: UUID!
  intakeFormStep: SystemIntakeFormStep!
  notificationRecipients: EmailNotificationRecipients
  emailFeedback: HTML!
  additionalInfo: HTML
  adminNote: HTML
}


"""
Different options for whether the Governance team believes a requester's team should consult with the TRB
"""
enum SystemIntakeTRBFollowUp {
  STRONGLY_RECOMMENDED
  RECOMMENDED_BUT_NOT_CRITICAL
  NOT_RECOMMENDED
}

"""
Input for setting an intake's decision to issuing an LCID in IT Gov v2
"""
input SystemIntakeIssueLCIDInput {
  systemIntakeID: UUID!
  lcid: String
  expiresAt: Time!
  scope: HTML!
  nextSteps: HTML!
  trbFollowUp: SystemIntakeTRBFollowUp!
  costBaseline: String
  additionalInfo: HTML
  notificationRecipients: EmailNotificationRecipients
  adminNote: HTML
}

"""
Input for setting an intake's decision to Not Approved by GRB in IT Gov v2
"""
input SystemIntakeRejectIntakeInput {
  systemIntakeID: UUID!
  reason: HTML!
  nextSteps: HTML!
  trbFollowUp: SystemIntakeTRBFollowUp!
  additionalInfo: HTML
  notificationRecipients: EmailNotificationRecipients
  adminNote: HTML
}

"""
Input for expiring an intake's LCID in IT Gov v2
"""
input SystemIntakeExpireLCIDInput {
  systemIntakeID: UUID!
  reason: HTML!
  nextSteps: HTML
  notificationRecipients: EmailNotificationRecipients
  additionalInfo: HTML
  adminNote: HTML
}

"""
Input for retiring an intake's LCID in IT Gov v2
"""
input SystemIntakeRetireLCIDInput {
  systemIntakeID: UUID!
  retiresAt: Time!
  reason: HTML
  additionalInfo: HTML
  notificationRecipients: EmailNotificationRecipients
  adminNote: HTML
}

"""
Input for "unretiring" (i.e. removing retirement date) an LCID in IT Gov v2
"""
input SystemIntakeUnretireLCIDInput {
  systemIntakeID: UUID!
  additionalInfo: HTML
  notificationRecipients: EmailNotificationRecipients
  adminNote: HTML
}

"""
Input for changing an intake's LCID retirement date in IT Gov v2
"""
input SystemIntakeChangeLCIDRetirementDateInput {
  systemIntakeID: UUID!
  retiresAt: Time!
  additionalInfo: HTML
  notificationRecipients: EmailNotificationRecipients
  adminNote: HTML
}

"""
SystemIntakeRequestEditsOptions represents the current step in the intake process
"""
enum SystemIntakeFormStep {
  INITIAL_REQUEST_FORM
  DRAFT_BUSINESS_CASE
  FINAL_BUSINESS_CASE
}

"""
Input for creating a Not an IT Governance Request Action in Admin Actions v2
"""
input SystemIntakeNotITGovReqInput {
  systemIntakeID: UUID!
  notificationRecipients: EmailNotificationRecipients
  reason: HTML
  additionalInfo: HTML
  adminNote: HTML
}

"""
Input for creating a Close Request Action in Admin Actions v2
"""
input SystemIntakeCloseRequestInput {
  systemIntakeID: UUID!
  notificationRecipients: EmailNotificationRecipients
  reason: HTML
  additionalInfo: HTML
  adminNote: HTML
}

"""
Input for creating a Reopen Request Action in Admin Actions v2
"""
input SystemIntakeReopenRequestInput {
  systemIntakeID: UUID!
  notificationRecipients: EmailNotificationRecipients
  reason: HTML
  additionalInfo: HTML
  adminNote: HTML
}

"""
Input to submit an intake for review
"""
input SubmitIntakeInput {
  id: UUID!
}

"""
The current user's Launch Darkly key
"""
type LaunchDarklySettings {
  userKey: String!
  signedHash: String!
}

"""
The current user of the application
"""
type CurrentUser {
  launchDarkly: LaunchDarklySettings!
}

"""
Represents a contact associated with a system intake
"""
type SystemIntakeContact {
  id: UUID!
  euaUserId: String!
  systemIntakeId: UUID!
  component: String!
  role: String!
}

"""
Represents a contact associated with a system intake, including additional fields from CEDAR
"""
type AugmentedSystemIntakeContact {
  id: UUID!
  euaUserId: String!
  systemIntakeId: UUID!
  component: String!
  role: String!
  commonName: String
  email: EmailAddress
}

"""
The data needed to associate a contact with a system intake
"""
input CreateSystemIntakeContactInput {
  euaUserId: String!
  systemIntakeId: UUID!
  component: String!
  role: String!
}

"""
The data needed to update a contact associated with a system intake
"""
input UpdateSystemIntakeContactInput {
  id: UUID!
  euaUserId: String!
  systemIntakeId: UUID!
  component: String!
  role: String!
}

"""
The data needed to delete a system intake contact
"""
input DeleteSystemIntakeContactInput {
  id: UUID!
}

"""
The payload when creating a system intake contact
"""
type CreateSystemIntakeContactPayload {
  systemIntakeContact: SystemIntakeContact
}

"""
The payload when deleting a system intake contact
"""
type DeleteSystemIntakeContactPayload {
  systemIntakeContact: SystemIntakeContact
}

input EmailNotificationRecipients {
  regularRecipientEmails: [EmailAddress!]!
  shouldNotifyITGovernance: Boolean!
  shouldNotifyITInvestment: Boolean!
}

"""
The payload when retrieving system intake contacts
"""
type SystemIntakeContactsPayload {
  systemIntakeContacts: [AugmentedSystemIntakeContact!]!
  invalidEUAIDs: [String!]!
}

"""
The inputs to the user feedback form
"""
input SendFeedbackEmailInput {
  isAnonymous: Boolean!
  canBeContacted: Boolean!
  easiServicesUsed: [String!]!
  cmsRole: String!
  systemEasyToUse: String!
  didntNeedHelpAnswering: String!
  questionsWereRelevant: String!
  hadAccessToInformation: String!
  howSatisfied: String!
  howCanWeImprove: String!
}

input SendCantFindSomethingEmailInput {
  body: String!
}

input SendReportAProblemEmailInput {
  isAnonymous: Boolean!
  canBeContacted: Boolean!
  easiService: String!
  whatWereYouDoing: String!
  whatWentWrong: String!
  howSevereWasTheProblem: String!
}

"""
Represents a request for support from the Technical Review Board (TRB)
"""
type TRBRequest {
  id: UUID!
  name: String
  archived: Boolean!
  type: TRBRequestType!
  state: TRBRequestState!
  status: TRBRequestStatus!
  attendees: [TRBRequestAttendee!]!
  feedback: [TRBRequestFeedback!]!
  documents: [TRBRequestDocument!]! # This query will not return deleted documents -- see pkg/storage/trb_request_document.go ` + "`" + `GetTRBRequestDocumentsByRequestID` + "`" + `
  form: TRBRequestForm!
  guidanceLetter: TRBGuidanceLetter
  taskStatuses: TRBTaskStatuses!
  consultMeetingTime: Time
  lastMeetingDate: Time
  nextMeetingDate: Time
  trbLead: String
  trbLeadInfo: UserInfo!
  requesterInfo: UserInfo!
  requesterComponent: String
  adminNotes: [TRBAdminNote!]! @hasRole(role: EASI_TRB_ADMIN)
  isRecent: Boolean!
  createdBy: String!
  createdAt: Time! # will be used for UploadedAt in frontend
  modifiedBy: String
  modifiedAt: Time
  contractName: String
  relationType: RequestRelationType # TODO: NOT IMPLEMENTED

  """
  Linked contract numbers
  """
  contractNumbers: [TRBRequestContractNumber!]!

  """
  Linked systems
  """
  systems: [CedarSystem!]!

  """
  System Intakes that share a CEDAR System or Contract Number
  """
  relatedIntakes: [SystemIntake!]!
  """
  Other TRB Requests that share a CEDAR System or Contract Number
  """
  relatedTRBRequests: [TRBRequest!]!
}

type TRBRequestContractNumber {
  id: UUID!
  trbRequestID: UUID!
  contractNumber: String!
  createdBy: UUID!
  createdAt: Time!
  modifiedBy: UUID
  modifiedAt: Time
}

"""
Wraps all of the various status on the TRB task list into one type
"""
type TRBTaskStatuses {
  formStatus: TRBFormStatus!
  feedbackStatus: TRBFeedbackStatus!
  consultPrepStatus: TRBConsultPrepStatus!
  attendConsultStatus: TRBAttendConsultStatus!
  guidanceLetterStatus: TRBGuidanceLetterStatus!
  guidanceLetterStatusTaskList: TRBGuidanceLetterStatusTaskList!
}

"""
TRBRequestChanges represents the possible changes you can make to a TRB request when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
https://gqlgen.com/reference/changesets/
"""
input TRBRequestChanges @goModel(model: "map[string]interface{}") {
  name: String
  archived: Boolean
  type: TRBRequestType
}

"""
Represents an EUA user who is included as an attendee for a TRB request
"""
type TRBRequestAttendee {
  id: UUID!
  euaUserId: String! # Sort of duplicative, as this is also in UserInfo
  userInfo: UserInfo
  trbRequestId: UUID!
  component: String
  role: PersonRole
  createdBy: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
}

# lint-disable defined-types-are-used
enum TagType {
  USER_ACCOUNT
  GROUP_IT_GOV
  GROUP_GRB_REVIEWERS
}
# lint-enable defined-types-are-used

"""
The data needed add a TRB request attendee to a TRB request
"""
input CreateTRBRequestAttendeeInput {
  euaUserId: String!
  trbRequestId: UUID!
  component: String!
  role: PersonRole!
}

"""
Represents an EUA user who is included as an attendee for a TRB request
"""
input UpdateTRBRequestAttendeeInput {
  id: UUID!
  component: String!
  role: PersonRole!
}

"""
Enumeration of the possible statuses of documents uploaded in the TRB workflow
"""
enum TRBRequestDocumentStatus {
  AVAILABLE
  PENDING
  UNAVAILABLE
}

"""
Enumeration of the possible statuses of documents uploaded in the System Intake
"""
enum SystemIntakeDocumentStatus {
  AVAILABLE
  PENDING
  UNAVAILABLE
}

"""
Represents the common options for document type that is attached to a
TRB Request
"""
enum TRBDocumentCommonType {
  ARCHITECTURE_DIAGRAM
  PRESENTATION_SLIDE_DECK
  BUSINESS_CASE
  OTHER
}

"""
Represents the common options for document type that is attached to a
System Intake document
"""
enum SystemIntakeDocumentCommonType {
  SOO_SOW
  DRAFT_IGCE
  ACQUISITION_PLAN_OR_STRATEGY
  REQUEST_FOR_ADDITIONAL_FUNDING
  SOFTWARE_BILL_OF_MATERIALS
  MEETING_MINUTES
  OTHER
}

"""
Represents the version options for a document that is attached to a
System Intake document
"""
enum SystemIntakeDocumentVersion {
  CURRENT
  HISTORICAL
}

"""
Denotes the type of a document attached to a TRB request,
which can be one of a number of common types, or a free-text user-specified type
"""
type TRBRequestDocumentType {
  commonType: TRBDocumentCommonType!
  otherTypeDescription: String
}

"""
Represents a document attached to a TRB request
"""
type TRBRequestDocument {
  documentType: TRBRequestDocumentType!
  id: UUID!
  fileName: String!
  status: TRBRequestDocumentStatus!
  uploadedAt: Time!
  url: String!
  deletedAt: Time
}

"""
The data needed to upload a TRB document and attach it to a request with metadata
"""
input CreateTRBRequestDocumentInput {
  requestID: UUID!
  fileData: Upload!
  documentType: TRBDocumentCommonType!
  otherTypeDescription: String  # Needed if documentType == OTHER
}

"""
The data needed to upload a System Intake document and attach it to a request with metadata
"""
input CreateSystemIntakeDocumentInput {
  requestID: UUID!
  fileData: Upload!
  documentType: SystemIntakeDocumentCommonType!
  version: SystemIntakeDocumentVersion!
  otherTypeDescription: String
  sendNotification: Boolean
}

"""
Data returned after uploading a document to a TRB request
"""
type CreateTRBRequestDocumentPayload {
  document: TRBRequestDocument
}

"""
Data returned after deleting a document attached to a TRB request
"""
type DeleteTRBRequestDocumentPayload {
  document: TRBRequestDocument
}

"""Represents a document attached to a System Intake"""
type SystemIntakeDocument {
  documentType: SystemIntakeDocumentType!
  id: UUID!
  fileName: String!
  status: SystemIntakeDocumentStatus!
  version: SystemIntakeDocumentVersion!
  uploadedAt: Time!
  url: String
  canDelete: Boolean!
  canView: Boolean!
  systemIntakeId: UUID!
}

"""
Denotes the type of a document attached to a System Intake,
which can be one of a number of common types, or a free-text user-specified type
"""
type SystemIntakeDocumentType {
  commonType: SystemIntakeDocumentCommonType!
  otherTypeDescription: String
}

"""Data returned after uploading a document to a System Intake"""
type CreateSystemIntakeDocumentPayload {
  document: SystemIntakeDocument
}

"""Data returned after deleting a document attached to a System Intake"""
type DeleteSystemIntakeDocumentPayload {
  document: SystemIntakeDocument
}

"""
Represents the possible actions that can provide feedback on a governance request
"""
enum GovernanceRequestFeedbackSourceAction {
  REQUEST_EDITS
  PROGRESS_TO_NEW_STEP
}

"""
Represents the possible forms on a governance request that can receive feedback
"""
enum GovernanceRequestFeedbackTargetForm {
  NO_TARGET_PROVIDED
  INTAKE_REQUEST
  DRAFT_BUSINESS_CASE
  FINAL_BUSINESS_CASE
}

"""
Represents the possible types of feedback on governance requests, based on who it's directed to
"""
enum GovernanceRequestFeedbackType {
  REQUESTER
  GRB
}

"""
Feedback given to the requester on a governance request
"""
type GovernanceRequestFeedback {
  id: UUID!
  intakeId: UUID!
  feedback: HTML!
  sourceAction: GovernanceRequestFeedbackSourceAction!
  targetForm: GovernanceRequestFeedbackTargetForm!
  type: GovernanceRequestFeedbackType!
  author: UserInfo
  createdBy: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
}

"""
Represents an option selected to the "where are you in the process?" TRB request form
"""
enum TRBWhereInProcessOption {
  I_HAVE_AN_IDEA_AND_WANT_TO_BRAINSTORM
  CONTRACTING_WORK_HAS_STARTED
  DEVELOPMENT_HAS_RECENTLY_STARTED
  DEVELOPMENT_IS_SIGNIFICANTLY_UNDERWAY
  THE_SYSTEM_IS_IN_OPERATION_AND_MAINTENANCE
  OTHER
}

"""
Represents an option selected for collaboration groups in the TRB request form
"""
enum TRBCollabGroupOption {
  SECURITY
  ENTERPRISE_ARCHITECTURE
  CLOUD
  PRIVACY_ADVISOR
  GOVERNANCE_REVIEW_BOARD
  OTHER
}

"""
Represents the status of a TRB request form
"""
enum TRBFormStatus {
  READY_TO_START
  IN_PROGRESS
  COMPLETED
}

"""
Represents the status of the TRB feedback step
"""
enum TRBFeedbackStatus {
  CANNOT_START_YET
  READY_TO_START
  IN_REVIEW
  EDITS_REQUESTED
  COMPLETED
}

"""
Represents the status of the TRB consult step
"""
enum TRBConsultPrepStatus {
  CANNOT_START_YET
  READY_TO_START
  COMPLETED
}

"""
Represents the status of the TRB consult attendance step
"""
enum TRBAttendConsultStatus {
  CANNOT_START_YET
  READY_TO_SCHEDULE
  SCHEDULED
  COMPLETED
}

"""
Represents the status of the TRB guidance letter step
"""
enum TRBGuidanceLetterStatus {
  CANNOT_START_YET
  READY_TO_START
  IN_PROGRESS
  READY_FOR_REVIEW
  COMPLETED
}

"""
Represents the status of the TRB guidance letter step
"""
enum TRBGuidanceLetterStatusTaskList {
  CANNOT_START_YET
  IN_REVIEW
  COMPLETED
}

"""
The possible options on the TRB "Subject Areas" page
"""
enum TRBSubjectAreaOption {
  ACCESS_CONTROL_AND_IDENTITY_MANAGEMENT
  ACCESSIBILITY_COMPLIANCE
  ARTIFICIAL_INTELLIGENCE
  ASSISTANCE_WITH_SYSTEM_CONCEPT_DEVELOPMENT
  BUSINESS_INTELLIGENCE
  CLOUD_MIGRATION
  CONTAINERS_AND_MICROSERVICES
  DISASTER_RECOVERY
  EMAIL_INTEGRATION
  ENTERPRISE_DATA_LAKE_INTEGRATION
  FRAMEWORK_OR_TOOL_ALTERNATIVES
  OPEN_SOURCE_SOFTWARE
  PORTAL_INTEGRATION
  TECHNICAL_REFERENCE_ARCHITECTURE
  SYSTEM_ARCHITECTURE_REVIEW
  SYSTEM_DISPOSITION_PLANNING
  WEB_SERVICES_AND_APIS
  WEB_BASED_UI_SERVICES
}

"""
Represents an EUA user who is included as an form for a TRB request
"""
type TRBRequestForm {
  id: UUID!
  trbRequestId: UUID!
  status: TRBFormStatus!
  component: String
  needsAssistanceWith: String
  hasSolutionInMind: Boolean
  proposedSolution: String
  whereInProcess: TRBWhereInProcessOption
  whereInProcessOther: String
  hasExpectedStartEndDates: Boolean
  expectedStartDate: Time
  expectedEndDate: Time
  collabGroups: [TRBCollabGroupOption!]!
  collabDateSecurity: String
  collabDateEnterpriseArchitecture: String
  collabDateCloud: String
  collabDatePrivacyAdvisor: String
  collabDateGovernanceReviewBoard: String
  collabDateOther: String
  collabGroupOther: String
  collabGRBConsultRequested: Boolean
  """
  TODO: Make Funding sources non-nullable
  """
  fundingSources: [TRBFundingSource!]
  systemIntakes: [SystemIntake!]!
  subjectAreaOptions: [TRBSubjectAreaOption!]
  subjectAreaOptionOther: String
  submittedAt: Time
  createdBy: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
}

"""
Represents an EUA user who is included as an form for a TRB request
"""
input UpdateTRBRequestFormInput @goModel(model: "map[string]interface{}") {
  trbRequestId: UUID!
  isSubmitted: Boolean
  component: String
  needsAssistanceWith: String
  hasSolutionInMind: Boolean
  proposedSolution: String
  whereInProcess: TRBWhereInProcessOption
  whereInProcessOther: String
  hasExpectedStartEndDates: Boolean
  expectedStartDate: Time
  expectedEndDate: Time
  collabGroups: [TRBCollabGroupOption!]
  collabDateSecurity: String
  collabDateEnterpriseArchitecture: String
  collabDateCloud: String
  collabDatePrivacyAdvisor: String
  collabDateGovernanceReviewBoard: String
  collabDateOther: String
  collabGroupOther: String
  collabGRBConsultRequested: Boolean
  systemIntakes: [UUID!]
  subjectAreaOptions: [TRBSubjectAreaOption!]
  subjectAreaOptionOther: String
}

"""
Represents a TRB funding source
"""
type TRBFundingSource {
  id: UUID!
  trbRequestId: UUID!
  fundingNumber: String!
  source: String!
  createdBy: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
}
input UpdateTRBRequestFundingSourcesInput {
  trbRequestId: UUID!
  fundingNumber: String!
  sources: [String!]!
}
input DeleteTRBRequestFundingSourcesInput {
  trbRequestId: UUID!
  fundingNumber: String!
}

"""
Represents the action an admin is taking on a TRB request when leaving feedback
"""
enum TRBFeedbackAction {
  READY_FOR_CONSULT
  REQUEST_EDITS
}

"""
Represents feedback added to a TRB request
"""
type TRBRequestFeedback {
  id: UUID!
  trbRequestId: UUID!
  feedbackMessage: HTML!
  copyTrbMailbox: Boolean!
  notifyEuaIds: [String!]!
  action: TRBFeedbackAction!
  author: UserInfo!
  createdBy: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
}

"""
The data needed to add feedback to a TRB request
"""
input CreateTRBRequestFeedbackInput {
  trbRequestId: UUID!
  feedbackMessage: HTML!
  copyTrbMailbox: Boolean!
  notifyEuaIds: [String!]!
  action: TRBFeedbackAction!
}

"""
The data needed schedule a TRB consult meeting time
"""
input UpdateTRBRequestConsultMeetingTimeInput {
  trbRequestId: UUID!
  consultMeetingTime: Time!
  copyTrbMailbox: Boolean!
  notifyEuaIds: [String!]!
  notes: String!
}

"""
The data needed assign a TRB lead to a TRB request
"""
input UpdateTRBRequestTRBLeadInput {
  trbRequestId: UUID!
  trbLead: String!
}

# RequestRelationType.NEW_SYSTEM
input SetTRBRequestRelationNewSystemInput {
  trbRequestID: UUID!
  contractNumbers: [String!]!
}

# RequestRelationType.EXISTING_SYSTEM
input SetTRBRequestRelationExistingSystemInput {
  trbRequestID: UUID!
  cedarSystemIDs: [String!]!
  contractNumbers: [String!]!
}

# RequestRelationType.EXISTING_SERVICE
input SetTRBRequestRelationExistingServiceInput {
  trbRequestID: UUID!
  contractName: String!
  contractNumbers: [String!]!
}

"""
Represents the category of a single TRB admin note
"""
enum TRBAdminNoteCategory {
  GENERAL_REQUEST
  INITIAL_REQUEST_FORM
  SUPPORTING_DOCUMENTS
  CONSULT_SESSION
  GUIDANCE_LETTER
}

"""
Data specific to admin notes in the General Request category
This type doesn't contain any actual data
"""
type TRBAdminNoteGeneralRequestCategoryData {
  """
  Placeholder field so this type is non-empty, always null
  """
  placeholderField: Boolean # Necessary because gqlgen doesn't support empty types
}

"""
Data specific to admin notes in the Initial Request Form category
"""
type TRBAdminNoteInitialRequestFormCategoryData {
  appliesToBasicRequestDetails: Boolean!
  appliesToSubjectAreas: Boolean!
  appliesToAttendees: Boolean!
}

"""
Data specific to admin notes in the Supporting Documents category
The "documents" property _will_ return deleted documents so that UI can reference the document name
"""
type TRBAdminNoteSupportingDocumentsCategoryData {
  documents: [TRBRequestDocument!]!
}

"""
Data specific to admin notes in the Consult Session category
This type doesn't contain any actual data
"""
type TRBAdminNoteConsultSessionCategoryData {
  """
  Placeholder field so this type is non-empty, always null
  """
  placeholderField: Boolean # Necessary because gqlgen doesn't support empty types
}

"""
Data specific to admin notes in the Guidance Letter category
The "insights" property _will_ return deleted insights so that UI can reference the insight title
"""
type TRBAdminNoteGuidanceLetterCategoryData {
  appliesToMeetingSummary: Boolean!
  appliesToNextSteps: Boolean!
  insights: [TRBGuidanceLetterInsight!]!
}

union TRBAdminNoteCategorySpecificData = TRBAdminNoteGeneralRequestCategoryData | TRBAdminNoteInitialRequestFormCategoryData | TRBAdminNoteSupportingDocumentsCategoryData | TRBAdminNoteConsultSessionCategoryData | TRBAdminNoteGuidanceLetterCategoryData

"""
Represents an admin note attached to a TRB request
"""
type TRBAdminNote {
  id: UUID!
  trbRequestId: UUID!
  category: TRBAdminNoteCategory!
  noteText: HTML!
  author: UserInfo!
  isArchived: Boolean!
  categorySpecificData: TRBAdminNoteCategorySpecificData!
  createdBy: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
}

"""
Represents a guidance letter for a TRB request
"""
type TRBGuidanceLetter {
  id: UUID!
  trbRequestId: UUID!
  author: UserInfo!
  meetingSummary: HTML
  nextSteps: HTML
  isFollowupRecommended: Boolean
  dateSent: Time
  followupPoint: String
  """
  List of insights in the order specified by users
  """
  insights: [TRBGuidanceLetterInsight!]! # This query will not return deleted insights -- see pkg/storage/trb_guidance_letter_insight.go ` + "`" + `GetTRBGuidanceLetterInsightsByTRBRequestID` + "`" + `
  createdBy: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
}

"""
The data needed to create a TRB admin note with the General Request category
"""
input CreateTRBAdminNoteGeneralRequestInput {
  # common fields used by all TRB admin notes
  trbRequestId: UUID!
  noteText: HTML!

  # no category-specific data for this category
}

"""
The data needed to create a TRB admin note with the Initial Request Form category
"""
input CreateTRBAdminNoteInitialRequestFormInput {
  # common fields used by all TRB admin notes
  trbRequestId: UUID!
  noteText: HTML!

  # category-specific data
  appliesToBasicRequestDetails: Boolean!
  appliesToSubjectAreas: Boolean!
  appliesToAttendees: Boolean!
}

"""
The data needed to create a TRB admin note with the Supporting Documents category
"""
input CreateTRBAdminNoteSupportingDocumentsInput {
  # common fields used by all TRB admin notes
  trbRequestId: UUID!
  noteText: HTML!

  # category-specific data
  documentIDs: [UUID!]!
}

"""
The data needed to create a TRB admin note with the Consult Session category
"""
input CreateTRBAdminNoteConsultSessionInput {
  # common fields used by all TRB admin notes
  trbRequestId: UUID!
  noteText: HTML!

  # no category-specific data for this category
}

"""
The data needed to create a TRB admin note with the Guidance Letter category
"""
input CreateTRBAdminNoteGuidanceLetterInput {
  # common fields used by all TRB admin notes
  trbRequestId: UUID!
  noteText: HTML!

  # category-specific data
  appliesToMeetingSummary: Boolean!
  appliesToNextSteps: Boolean!
  insightIDs: [UUID!]!
}

"""
The data needed to update a TRB guidance letter
"""
input UpdateTRBGuidanceLetterInput @goModel(model: "map[string]interface{}") {
  trbRequestId: UUID!
  meetingSummary: HTML
  nextSteps: HTML
  isFollowupRecommended: Boolean
  followupPoint: String
}

"""
The data needed to send a TRB guidance letter, including who to notify
"""
input SendTRBGuidanceLetterInput {
  id: UUID!
  copyITGovMailbox: Boolean!
  copyTrbMailbox: Boolean!
  notifyEuaIds: [String!]!
}

"""
Represents an insight and links that have been added to a TRB guidance letter
"""
type TRBGuidanceLetterInsight {
  id: UUID!
  trbRequestId: UUID!
  title: String!
  insight: HTML!
  links: [String!]!
  author: UserInfo!
  createdBy: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
  deletedAt: Time
  category: TRBGuidanceLetterInsightCategory
}

"""
The input required to add an insight & links to a TRB guidance letter
"""
input CreateTRBGuidanceLetterInsightInput {
  trbRequestId: UUID!
  title: String!
  insight: HTML!
  links: [String!]!
  category: TRBGuidanceLetterInsightCategory!
}

"""
The input required to update an insight to a TRB guidance letter
"""
input UpdateTRBGuidanceLetterInsightInput @goModel(model: "map[string]interface{}") {
  id: UUID!
  title: String
  insight: HTML
  links: [String!]
  category: TRBGuidanceLetterInsightCategory
}

enum TRBGuidanceLetterInsightCategory {
  REQUIREMENT
  RECOMMENDATION
  CONSIDERATION
  UNCATEGORIZED
}

"""
"""
input UpdateTRBGuidanceLetterInsightOrderInput {
  trbRequestId: UUID!
  """
  List of the insight IDs in the new order they should be displayed
  """
  newOrder: [UUID!]!
  category: TRBGuidanceLetterInsightCategory!
}

"""
The input needed to close a TRB request
"""
input CloseTRBRequestInput {
  id: UUID!
  reasonClosed: HTML!
  copyTrbMailbox: Boolean!
  notifyEuaIds: [String!]!
}

"""
The data needed to reopen a TRB request
"""
input ReopenTRBRequestInput {
  trbRequestId: UUID!
  reasonReopened: HTML!
  copyTrbMailbox: Boolean!
  notifyEuaIds: [String!]!
}

"""
Defines the mutations for the schema
"""
type Mutation {
  # Mutations for IT Gov v2 workflow
  createSystemIntakeActionProgressToNewStep(
    input: SystemIntakeProgressToNewStepsInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionRequestEdits(
    input: SystemIntakeRequestEditsInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionExpireLCID(
    input: SystemIntakeExpireLCIDInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionUpdateLCID(
    input: SystemIntakeUpdateLCIDInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionRetireLCID(
    input: SystemIntakeRetireLCIDInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionUnretireLCID(
    input: SystemIntakeUnretireLCIDInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionChangeLCIDRetirementDate(
    input: SystemIntakeChangeLCIDRetirementDateInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionConfirmLCID(
    input: SystemIntakeConfirmLCIDInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionIssueLCID(
    input: SystemIntakeIssueLCIDInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionRejectIntake(
    input: SystemIntakeRejectIntakeInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionReopenRequest(
    input: SystemIntakeReopenRequestInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionCloseRequest(
    input: SystemIntakeCloseRequestInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionNotITGovRequest(
    input: SystemIntakeNotITGovReqInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)

  createSystemIntakeNote(input: CreateSystemIntakeNoteInput!): SystemIntakeNote
  @hasRole(role: EASI_GOVTEAM)
  updateSystemIntakeNote(input: UpdateSystemIntakeNoteInput!): SystemIntakeNote!
  @hasRole(role: EASI_GOVTEAM)
  createSystemIntake(input: CreateSystemIntakeInput!): SystemIntake
  @hasRole(role: EASI_USER)
  updateSystemIntakeRequestType(id: UUID!, newType: SystemIntakeRequestType!): SystemIntake!
  @hasRole(role: EASI_USER)

  submitIntake(
    input: SubmitIntakeInput!
  ): UpdateSystemIntakePayload
  updateSystemIntakeAdminLead(input: UpdateSystemIntakeAdminLeadInput!): UpdateSystemIntakePayload
  @hasRole(role: EASI_GOVTEAM)
  updateSystemIntakeReviewDates(input: UpdateSystemIntakeReviewDatesInput!): UpdateSystemIntakePayload
  @hasRole(role: EASI_GOVTEAM)
  updateSystemIntakeContactDetails(input: UpdateSystemIntakeContactDetailsInput!): UpdateSystemIntakePayload
  updateSystemIntakeRequestDetails(input: UpdateSystemIntakeRequestDetailsInput!): UpdateSystemIntakePayload
  updateSystemIntakeContractDetails(input: UpdateSystemIntakeContractDetailsInput!): UpdateSystemIntakePayload
  createCedarSystemBookmark(
    input: CreateCedarSystemBookmarkInput!
  ): CreateCedarSystemBookmarkPayload
  deleteCedarSystemBookmark(
    input: CreateCedarSystemBookmarkInput!
  ): DeleteCedarSystemBookmarkPayload

  setSystemIntakeRelationNewSystem(input: SetSystemIntakeRelationNewSystemInput): UpdateSystemIntakePayload
  setSystemIntakeRelationExistingSystem(input: SetSystemIntakeRelationExistingSystemInput): UpdateSystemIntakePayload
  setSystemIntakeRelationExistingService(input: SetSystemIntakeRelationExistingServiceInput): UpdateSystemIntakePayload
  unlinkSystemIntakeRelation(intakeID: UUID!): UpdateSystemIntakePayload

  createSystemIntakeContact(input: CreateSystemIntakeContactInput!): CreateSystemIntakeContactPayload
  updateSystemIntakeContact(input: UpdateSystemIntakeContactInput!): CreateSystemIntakeContactPayload
  deleteSystemIntakeContact(input: DeleteSystemIntakeContactInput!): DeleteSystemIntakeContactPayload

  startGRBReview(input: StartGRBReviewInput!): String

  createSystemIntakeGRBReviewers(input: CreateSystemIntakeGRBReviewersInput!): CreateSystemIntakeGRBReviewersPayload
  updateSystemIntakeGRBReviewer(input: UpdateSystemIntakeGRBReviewerInput!): SystemIntakeGRBReviewer!
  deleteSystemIntakeGRBReviewer(input: DeleteSystemIntakeGRBReviewerInput!): UUID!

  castSystemIntakeGRBReviewerVote(input: CastSystemIntakeGRBReviewerVoteInput!):SystemIntakeGRBReviewer!

  createSystemIntakeGRBDiscussionPost(input: createSystemIntakeGRBDiscussionPostInput!): SystemIntakeGRBReviewDiscussionPost
  createSystemIntakeGRBDiscussionReply(input: createSystemIntakeGRBDiscussionReplyInput!): SystemIntakeGRBReviewDiscussionPost

  updateSystemIntakeGRBReviewType(input: updateSystemIntakeGRBReviewTypeInput!): UpdateSystemIntakePayload
  @hasRole(role: EASI_GOVTEAM)
  updateSystemIntakeGRBReviewFormPresentationStandard(input: updateSystemIntakeGRBReviewFormInputPresentationStandard!): UpdateSystemIntakePayload
  @hasRole(role: EASI_GOVTEAM)
  updateSystemIntakeGRBReviewFormPresentationAsync(input: updateSystemIntakeGRBReviewFormInputPresentationAsync!): UpdateSystemIntakePayload
  @hasRole(role: EASI_GOVTEAM)
  updateSystemIntakeGRBReviewFormTimeframeAsync(input: updateSystemIntakeGRBReviewFormInputTimeframeAsync!): UpdateSystemIntakePayload
  @hasRole(role: EASI_GOVTEAM)

  updateSystemIntakeLinkedCedarSystem(input: UpdateSystemIntakeLinkedCedarSystemInput!): UpdateSystemIntakePayload

  setSystemIntakeGRBPresentationLinks(input: SystemIntakeGRBPresentationLinksInput!): SystemIntakeGRBPresentationLinks
  uploadSystemIntakeGRBPresentationDeck(input: UploadSystemIntakeGRBPresentationDeckInput!): SystemIntakeGRBPresentationLinks
  deleteSystemIntakeGRBPresentationLinks(input: DeleteSystemIntakeGRBPresentationLinksInput!): UUID!
  manuallyEndSystemIntakeGRBReviewAsyncVoting(systemIntakeID: UUID!): UpdateSystemIntakePayload
  @hasRole(role: EASI_GOVTEAM)

  archiveSystemIntake(id: UUID!): SystemIntake!

  sendFeedbackEmail(input: SendFeedbackEmailInput!): String
  sendCantFindSomethingEmail(input: SendCantFindSomethingEmailInput!): String
  sendReportAProblemEmail(input: SendReportAProblemEmailInput!): String
  createTRBRequest(requestType: TRBRequestType!): TRBRequest!
  updateTRBRequest(id: UUID!, changes: TRBRequestChanges): TRBRequest!
  createTRBRequestAttendee(input: CreateTRBRequestAttendeeInput!): TRBRequestAttendee!
  updateTRBRequestAttendee(input: UpdateTRBRequestAttendeeInput!): TRBRequestAttendee!
  deleteTRBRequestAttendee(id: UUID!): TRBRequestAttendee!
  createTRBRequestDocument(input: CreateTRBRequestDocumentInput!): CreateTRBRequestDocumentPayload
  deleteTRBRequestDocument(id: UUID!): DeleteTRBRequestDocumentPayload
  createSystemIntakeDocument(input: CreateSystemIntakeDocumentInput!): CreateSystemIntakeDocumentPayload
  deleteSystemIntakeDocument(id: UUID!): DeleteSystemIntakeDocumentPayload
  updateTRBRequestForm(input: UpdateTRBRequestFormInput!): TRBRequestForm!
  updateTRBRequestFundingSources(input: UpdateTRBRequestFundingSourcesInput!): [TRBFundingSource!]!
  deleteTRBRequestFundingSources(input: DeleteTRBRequestFundingSourcesInput!): [TRBFundingSource!]!
  setRolesForUserOnSystem(input: SetRolesForUserOnSystemInput!): String
  createTRBRequestFeedback(input: CreateTRBRequestFeedbackInput!): TRBRequestFeedback!
  @hasRole(role: EASI_TRB_ADMIN)
  updateTRBRequestConsultMeetingTime(input: UpdateTRBRequestConsultMeetingTimeInput!): TRBRequest!
  @hasRole(role: EASI_TRB_ADMIN)
  updateTRBRequestTRBLead(input: UpdateTRBRequestTRBLeadInput!): TRBRequest!
  @hasRole(role: EASI_TRB_ADMIN)

  setTRBRequestRelationNewSystem(input: SetTRBRequestRelationNewSystemInput!): TRBRequest
  setTRBRequestRelationExistingSystem(input: SetTRBRequestRelationExistingSystemInput!): TRBRequest
  setTRBRequestRelationExistingService(input: SetTRBRequestRelationExistingServiceInput!): TRBRequest
  unlinkTRBRequestRelation(trbRequestID: UUID!): TRBRequest

  # separate mutations for each category of admin note
  createTRBAdminNoteGeneralRequest(input: CreateTRBAdminNoteGeneralRequestInput!): TRBAdminNote!
  @hasRole(role: EASI_TRB_ADMIN)
  createTRBAdminNoteInitialRequestForm(input: CreateTRBAdminNoteInitialRequestFormInput!): TRBAdminNote!
  @hasRole(role: EASI_TRB_ADMIN)
  createTRBAdminNoteSupportingDocuments(input: CreateTRBAdminNoteSupportingDocumentsInput!): TRBAdminNote!
  @hasRole(role: EASI_TRB_ADMIN)
  createTRBAdminNoteConsultSession(input: CreateTRBAdminNoteConsultSessionInput!): TRBAdminNote!
  @hasRole(role: EASI_TRB_ADMIN)
  createTRBAdminNoteGuidanceLetter(input: CreateTRBAdminNoteGuidanceLetterInput!): TRBAdminNote!
  @hasRole(role: EASI_TRB_ADMIN)
  setTRBAdminNoteArchived(id: UUID!, isArchived: Boolean!): TRBAdminNote!
  @hasRole(role: EASI_TRB_ADMIN)
  createTRBGuidanceLetter(trbRequestId: UUID!): TRBGuidanceLetter!
  @hasRole(role: EASI_TRB_ADMIN)
  updateTRBGuidanceLetter(input: UpdateTRBGuidanceLetterInput!): TRBGuidanceLetter!
  @hasRole(role: EASI_TRB_ADMIN)
  requestReviewForTRBGuidanceLetter(id: UUID!): TRBGuidanceLetter!
  @hasRole(role: EASI_TRB_ADMIN)
  sendTRBGuidanceLetter(input: SendTRBGuidanceLetterInput!): TRBGuidanceLetter!
  @hasRole(role: EASI_TRB_ADMIN)
  createTRBGuidanceLetterInsight(input: CreateTRBGuidanceLetterInsightInput!): TRBGuidanceLetterInsight!
  @hasRole(role: EASI_TRB_ADMIN)
  updateTRBGuidanceLetterInsight(input: UpdateTRBGuidanceLetterInsightInput!): TRBGuidanceLetterInsight!
  @hasRole(role: EASI_TRB_ADMIN)
  updateTRBGuidanceLetterInsightOrder(input: UpdateTRBGuidanceLetterInsightOrderInput!): [TRBGuidanceLetterInsight!]!
  @hasRole(role: EASI_TRB_ADMIN)
  deleteTRBGuidanceLetterInsight(id: UUID!): TRBGuidanceLetterInsight!
  @hasRole(role: EASI_TRB_ADMIN)
  closeTRBRequest(input: CloseTRBRequestInput!): TRBRequest!
  @hasRole(role: EASI_TRB_ADMIN)
  reopenTrbRequest(input: ReopenTRBRequestInput!): TRBRequest!
  @hasRole(role: EASI_TRB_ADMIN)
  createTrbLeadOption(eua: String!): UserInfo!
  @hasRole(role: EASI_TRB_ADMIN)
  deleteTrbLeadOption(eua: String!): Boolean!
  @hasRole(role: EASI_TRB_ADMIN)
  sendGRBReviewPresentationDeckReminderEmail(systemIntakeID: UUID!): Boolean!
  @hasRole(role: EASI_GOVTEAM)
}

"""
Query definition for the schema
"""
type Query {
  """
  Requests fetches a requester's own Intake Requests
  first is currently non-functional and can be removed later
  """
  systemIntake(id: UUID!): SystemIntake
  systemIntakes(openRequests: Boolean!): [SystemIntake!]!
  mySystemIntakes:[SystemIntake!]!
  systemIntakesWithReviewRequested: [SystemIntake!]!
  systemIntakesWithLcids: [SystemIntake!]!
  compareGRBReviewersByIntakeID(id: UUID!): [GRBReviewerComparisonIntake!]!
  currentUser: CurrentUser
  cedarAuthorityToOperate(cedarSystemID: String!): [CedarAuthorityToOperate!]!
  cedarBudget(cedarSystemID: String!): [CedarBudget!]
  cedarBudgetSystemCost(cedarSystemID: String!): CedarBudgetSystemCost
  cedarPersonsByCommonName(commonName: String!): [UserInfo!]!
  cedarSoftwareProducts(cedarSystemId: String!): CedarSoftwareProducts
  cedarSystem(cedarSystemId: String!): CedarSystem
  cedarSystems: [CedarSystem!]!
  cedarSubSystems(cedarSystemId: String!): [CedarSubSystem!]!
  cedarContractsBySystem(cedarSystemId: String!): [CedarContract!]!
  myCedarSystems: [CedarSystem!]!
  cedarSystemBookmarks: [CedarSystemBookmark!]!
  cedarThreat(cedarSystemId: String!): [CedarThreat!]!
  deployments(cedarSystemId: String!, deploymentType: String, state: String, status: String): [CedarDeployment!]!
  roleTypes: [CedarRoleType!]!
  roles(cedarSystemId: String!, roleTypeID: String): [CedarRole!]!
  exchanges(cedarSystemId: String!): [CedarExchange!]!
  urls(cedarSystemId: String!): [CedarURL!]!
  cedarSystemDetails(cedarSystemId: String!): CedarSystemDetails
  systemIntakeContacts(id: UUID!): SystemIntakeContactsPayload!
  trbRequest(id: UUID!): TRBRequest!
  trbRequests(archived: Boolean! = false): [TRBRequest!]! @hasRole(role: EASI_TRB_ADMIN)
  myTrbRequests(archived: Boolean! = false): [TRBRequest!]!
  trbLeadOptions: [UserInfo!]!
  trbAdminNote(id: UUID!): TRBAdminNote!
  @hasRole(role: EASI_TRB_ADMIN)
  userAccount(username: String!): UserAccount
}

enum TRBRequestType {
  NEED_HELP
  BRAINSTORM
  FOLLOWUP
  FORMAL_REVIEW
  OTHER
}

enum TRBRequestState {
  OPEN
  CLOSED
}

enum TRBRequestStatus {
  NEW
  DRAFT_REQUEST_FORM
  REQUEST_FORM_COMPLETE
  READY_FOR_CONSULT
  CONSULT_SCHEDULED
  CONSULT_COMPLETE
  DRAFT_GUIDANCE_LETTER
  GUIDANCE_LETTER_IN_REVIEW
  GUIDANCE_LETTER_SENT
  FOLLOW_UP_REQUESTED
}

"""
UUIDs are represented using 36 ASCII characters, for example B0511859-ADE6-4A67-8969-16EC280C0E1A
"""
scalar UUID

"""
HTML are represented using as strings,  <p><strong>Notification email</strong></p>
"""
scalar HTML

"""
TaggedHTML is represented using strings but can contain Tags (ex: @User) and possibly other richer elements than HTML
"""
scalar TaggedHTML

"""
Time values are represented as strings using RFC3339 format, for example 2019-10-12T07:20:50.52Z
"""
scalar Time

"""
Email addresses are represented as strings
"""
scalar EmailAddress

"""
https://gqlgen.com/reference/file-upload/
Represents a multipart file upload
"""
scalar Upload

directive @hasRole(role: Role!) on FIELD_DEFINITION

# https://gqlgen.com/config/#inline-config-with-directives
directive @goModel(
  model: String
  models: [String!]
  forceGenerate: Boolean
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

# https://gqlgen.com/config/#inline-config-with-directives
directive @goField(
  omittable: Boolean
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

"""
A user role associated with a job code
"""
enum Role {
  """
  An admin on the GRT
  """
  EASI_GOVTEAM

  """
  An admin on the TRB
  """
  EASI_TRB_ADMIN

  """
  A generic EASi user
  """
  EASI_USER
}


"""
The requester view of the IT gov intake step status
"""
enum ITGovIntakeFormStatus {
  """
  Ready to begin filling out
  """
  READY
  """
  The form has started to be filled out
  """
  IN_PROGRESS
  """
  The form has edits requested
  """
  EDITS_REQUESTED
  """
  The Form is completed
  """
  COMPLETED
}


"""
The requester view of the IT gov feedback step status
"""
enum ITGovFeedbackStatus {
  """
  This step can't be started yet
  """
  CANT_START
  """
  This step is in review
  """
  IN_REVIEW
  """
  The step is completed
  """
  COMPLETED
}


"""
The requester view of the IT gov Decision step status
"""
enum ITGovDecisionStatus {
  """
  This step can't be started yet
  """
  CANT_START
  """
  This step is in review
  """
  IN_REVIEW
  """
  The step is completed
  """
  COMPLETED
}


"""
The requester view of the IT gov draft Business Case step status
"""
enum ITGovDraftBusinessCaseStatus {
  """
  This step can't be started yet
  """
  CANT_START
  """
  This step is no longer needed
  """
  NOT_NEEDED
  """
  Ready to begin filling out
  """
  READY
  """
  The form has started to be filled out
  """
  IN_PROGRESS

  """
  This draft Business Case has edits requested
  """
  EDITS_REQUESTED

  """
  The draft Business Case has been submitted and it is waiting for feedback from the governance team
  """
  SUBMITTED

  """
  The draft Business Case has been completed and the intake is on a further step
  """
  DONE
}


"""
The requester view of the IT Gov GRT step status
"""
enum ITGovGRTStatus {
  """
  This step can't be started yet
  """
  CANT_START
  """
  This step is not needed and has been skipped
  """
  NOT_NEEDED
  """
  The GRT meeting is waiting to be scheduled
  """
  READY_TO_SCHEDULE
  """
  The GRT meeting has been scheduled
  """
  SCHEDULED
  """
  The GRT meeting has already happened, and an outcome hasn't been noted yet
  """
  AWAITING_DECISION
  """
  The step is completed
  """
  COMPLETED
}

"""
The requester view of the IT Gov Final Business Case step status
"""
enum ITGovFinalBusinessCaseStatus {
  """
  This step can't be started yet
  """
  CANT_START
  """
  This step is not needed and has been skipped
  """
  NOT_NEEDED
  """
  Ready to begin filling out
  """
  READY
  """
  The form has started to be filled out
  """
  IN_PROGRESS
  """
  This Business Case has edits requested
  """
  EDITS_REQUESTED

  """
  The Business Case has been submitted and it is waiting for feedback from the governance team
  """
  SUBMITTED

  """
  The Business Case has been completed and the intake is on a further step
  """
  DONE
}

"""
The requester view of the IT Gov GRB step status
"""
enum ITGovGRBStatus {
  """
  This step can't be started yet
  """
  CANT_START
  """
  This step is not needed and has been skipped
  """
  NOT_NEEDED
  """
  The GRB meeting is waiting to be scheduled
  """
  READY_TO_SCHEDULE
  """
  The GRB meeting has been scheduled
  """
  SCHEDULED
  """
  The GRB meeting is waiting for review
  """
  AWAITING_GRB_REVIEW,
  """
  The GRB review is currently in progress
  """
  REVIEW_IN_PROGRESS,
  """
  The GRT meeting has already happened, and an outcome hasn't been noted yet
  """
  AWAITING_DECISION
  """
  The step is completed
  """
  COMPLETED
}

"""
This represents the possible state any system intake form can take
"""
enum SystemIntakeFormState {
  NOT_STARTED
  IN_PROGRESS
  EDITS_REQUESTED
  SUBMITTED
}

"""
This represents the possible System Intake Decision States
"""
enum SystemIntakeDecisionState {
  NO_DECISION
  LCID_ISSUED
  NOT_APPROVED
  NOT_GOVERNANCE
}

"""
This represents the possible states any system intake meeting can take.
"""
enum SystemIntakeMeetingState {
  SCHEDULED
  NOT_SCHEDULED
}

"""
This represents the statuses that an admin would see as a representation of a system intake. Note, there is no status for a brand new request, because an Admin doesn't see the request until it is in progress.
"""
enum SystemIntakeStatusAdmin {
  INITIAL_REQUEST_FORM_IN_PROGRESS
  INITIAL_REQUEST_FORM_SUBMITTED
  DRAFT_BUSINESS_CASE_IN_PROGRESS
  DRAFT_BUSINESS_CASE_SUBMITTED
  GRT_MEETING_READY
  GRT_MEETING_COMPLETE
  GRB_MEETING_READY
  GRB_MEETING_COMPLETE
  GRB_REVIEW_IN_PROGRESS
  FINAL_BUSINESS_CASE_IN_PROGRESS
  FINAL_BUSINESS_CASE_SUBMITTED
  LCID_ISSUED
  LCID_EXPIRED
  LCID_RETIRED
  NOT_GOVERNANCE
  NOT_APPROVED
  CLOSED
}

"""
This represents the (calculated) statuses that a requester view of a system Intake Request can show as part of the IT Gov v2 workflow
"""
enum SystemIntakeStatusRequester {
  INITIAL_REQUEST_FORM_NEW
  INITIAL_REQUEST_FORM_IN_PROGRESS
  INITIAL_REQUEST_FORM_SUBMITTED
  INITIAL_REQUEST_FORM_EDITS_REQUESTED
  DRAFT_BUSINESS_CASE_IN_PROGRESS
  DRAFT_BUSINESS_CASE_SUBMITTED
  DRAFT_BUSINESS_CASE_EDITS_REQUESTED
  GRT_MEETING_READY
  GRT_MEETING_AWAITING_DECISION
  FINAL_BUSINESS_CASE_IN_PROGRESS
  FINAL_BUSINESS_CASE_SUBMITTED
  FINAL_BUSINESS_CASE_EDITS_REQUESTED
  GRB_MEETING_READY
  GRB_MEETING_AWAITING_DECISION
  GRB_REVIEW_IN_PROGRESS
  LCID_ISSUED
  LCID_EXPIRED
  LCID_RETIRED
  NOT_GOVERNANCE
  NOT_APPROVED
  CLOSED
}

"""
The possible statuses that an issued LCID can be in
"""
enum SystemIntakeLCIDStatus {
  ISSUED
  EXPIRED
  RETIRED
}

"""
The representation of a User account in the EASI application
"""
type UserAccount {
  id: UUID!
  """
  The unique username of this user account
  """
  username: String!
  """
  The Common Name of a user. Typically this is a combination of Given and Family name
  """
  commonName: String!
  """
  The language localization of a user.
  """
  locale: String!
  """
  The email address associated to this user account
  """
  email: String!
  """
  A users given name
  """
  givenName: String!
  """
  A users family name
  """
  familyName: String!
  """
  The zone information connected with a user account
  """
  zoneInfo: String!
  """
  Represents if a user has logged in. If the user was added as a result of another action, this will show FALSE. When the user logs in, their account will be updated
  """
  hasLoggedIn: Boolean
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_hasRole_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.dir_hasRole_argsRole(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["role"] = arg0
	return args, nil
}
func (ec *executionContext) dir_hasRole_argsRole(
	ctx context.Context,
	rawArgs map[string]any,
) (models.Role, error) {
	if _, ok := rawArgs["role"]; !ok {
		var zeroVal models.Role
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
	if tmp, ok := rawArgs["role"]; ok {
		return ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, tmp)
	}

	var zeroVal models.Role
	return zeroVal, nil
}

func (ec *executionContext) field_CedarSystem_linkedSystemIntakes_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_CedarSystem_linkedSystemIntakes_argsState(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["state"] = arg0
	return args, nil
}
func (ec *executionContext) field_CedarSystem_linkedSystemIntakes_argsState(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SystemIntakeState, error) {
	if _, ok := rawArgs["state"]; !ok {
		var zeroVal models.SystemIntakeState
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
	if tmp, ok := rawArgs["state"]; ok {
		return ec.unmarshalNSystemIntakeState2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeState(ctx, tmp)
	}

	var zeroVal models.SystemIntakeState
	return zeroVal, nil
}

func (ec *executionContext) field_CedarSystem_linkedTrbRequests_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_CedarSystem_linkedTrbRequests_argsState(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["state"] = arg0
	return args, nil
}
func (ec *executionContext) field_CedarSystem_linkedTrbRequests_argsState(
	ctx context.Context,
	rawArgs map[string]any,
) (models.TRBRequestState, error) {
	if _, ok := rawArgs["state"]; !ok {
		var zeroVal models.TRBRequestState
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
	if tmp, ok := rawArgs["state"]; ok {
		return ec.unmarshalNTRBRequestState2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestState(ctx, tmp)
	}

	var zeroVal models.TRBRequestState
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_archiveSystemIntake_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_archiveSystemIntake_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_archiveSystemIntake_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uuid.UUID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_castSystemIntakeGRBReviewerVote_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_castSystemIntakeGRBReviewerVote_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_castSystemIntakeGRBReviewerVote_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.CastSystemIntakeGRBReviewerVoteInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.CastSystemIntakeGRBReviewerVoteInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCastSystemIntakeGRBReviewerVoteInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCastSystemIntakeGRBReviewerVoteInput(ctx, tmp)
	}

	var zeroVal models.CastSystemIntakeGRBReviewerVoteInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_closeTRBRequest_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_closeTRBRequest_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_closeTRBRequest_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.CloseTRBRequestInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.CloseTRBRequestInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCloseTRBRequestInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCloseTRBRequestInput(ctx, tmp)
	}

	var zeroVal models.CloseTRBRequestInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createCedarSystemBookmark_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createCedarSystemBookmark_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createCedarSystemBookmark_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.CreateCedarSystemBookmarkInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.CreateCedarSystemBookmarkInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateCedarSystemBookmarkInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateCedarSystemBookmarkInput(ctx, tmp)
	}

	var zeroVal models.CreateCedarSystemBookmarkInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createSystemIntakeActionChangeLCIDRetirementDate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createSystemIntakeActionChangeLCIDRetirementDate_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createSystemIntakeActionChangeLCIDRetirementDate_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SystemIntakeChangeLCIDRetirementDateInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.SystemIntakeChangeLCIDRetirementDateInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSystemIntakeChangeLCIDRetirementDateInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeChangeLCIDRetirementDateInput(ctx, tmp)
	}

	var zeroVal models.SystemIntakeChangeLCIDRetirementDateInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createSystemIntakeActionCloseRequest_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createSystemIntakeActionCloseRequest_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createSystemIntakeActionCloseRequest_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SystemIntakeCloseRequestInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.SystemIntakeCloseRequestInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSystemIntakeCloseRequestInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeCloseRequestInput(ctx, tmp)
	}

	var zeroVal models.SystemIntakeCloseRequestInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createSystemIntakeActionConfirmLCID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createSystemIntakeActionConfirmLCID_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createSystemIntakeActionConfirmLCID_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SystemIntakeConfirmLCIDInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.SystemIntakeConfirmLCIDInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSystemIntakeConfirmLCIDInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeConfirmLCIDInput(ctx, tmp)
	}

	var zeroVal models.SystemIntakeConfirmLCIDInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createSystemIntakeActionExpireLCID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createSystemIntakeActionExpireLCID_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createSystemIntakeActionExpireLCID_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SystemIntakeExpireLCIDInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.SystemIntakeExpireLCIDInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSystemIntakeExpireLCIDInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeExpireLCIDInput(ctx, tmp)
	}

	var zeroVal models.SystemIntakeExpireLCIDInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createSystemIntakeActionIssueLCID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createSystemIntakeActionIssueLCID_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createSystemIntakeActionIssueLCID_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SystemIntakeIssueLCIDInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.SystemIntakeIssueLCIDInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSystemIntakeIssueLCIDInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeIssueLCIDInput(ctx, tmp)
	}

	var zeroVal models.SystemIntakeIssueLCIDInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createSystemIntakeActionNotITGovRequest_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createSystemIntakeActionNotITGovRequest_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createSystemIntakeActionNotITGovRequest_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SystemIntakeNotITGovReqInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.SystemIntakeNotITGovReqInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSystemIntakeNotITGovReqInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeNotITGovReqInput(ctx, tmp)
	}

	var zeroVal models.SystemIntakeNotITGovReqInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createSystemIntakeActionProgressToNewStep_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createSystemIntakeActionProgressToNewStep_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createSystemIntakeActionProgressToNewStep_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SystemIntakeProgressToNewStepsInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.SystemIntakeProgressToNewStepsInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSystemIntakeProgressToNewStepsInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeProgressToNewStepsInput(ctx, tmp)
	}

	var zeroVal models.SystemIntakeProgressToNewStepsInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createSystemIntakeActionRejectIntake_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createSystemIntakeActionRejectIntake_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createSystemIntakeActionRejectIntake_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SystemIntakeRejectIntakeInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.SystemIntakeRejectIntakeInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSystemIntakeRejectIntakeInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeRejectIntakeInput(ctx, tmp)
	}

	var zeroVal models.SystemIntakeRejectIntakeInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createSystemIntakeActionReopenRequest_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createSystemIntakeActionReopenRequest_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createSystemIntakeActionReopenRequest_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SystemIntakeReopenRequestInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.SystemIntakeReopenRequestInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSystemIntakeReopenRequestInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeReopenRequestInput(ctx, tmp)
	}

	var zeroVal models.SystemIntakeReopenRequestInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createSystemIntakeActionRequestEdits_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createSystemIntakeActionRequestEdits_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createSystemIntakeActionRequestEdits_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SystemIntakeRequestEditsInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.SystemIntakeRequestEditsInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSystemIntakeRequestEditsInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeRequestEditsInput(ctx, tmp)
	}

	var zeroVal models.SystemIntakeRequestEditsInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createSystemIntakeActionRetireLCID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createSystemIntakeActionRetireLCID_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createSystemIntakeActionRetireLCID_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SystemIntakeRetireLCIDInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.SystemIntakeRetireLCIDInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSystemIntakeRetireLCIDInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeRetireLCIDInput(ctx, tmp)
	}

	var zeroVal models.SystemIntakeRetireLCIDInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createSystemIntakeActionUnretireLCID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createSystemIntakeActionUnretireLCID_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createSystemIntakeActionUnretireLCID_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SystemIntakeUnretireLCIDInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.SystemIntakeUnretireLCIDInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSystemIntakeUnretireLCIDInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeUnretireLCIDInput(ctx, tmp)
	}

	var zeroVal models.SystemIntakeUnretireLCIDInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createSystemIntakeActionUpdateLCID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createSystemIntakeActionUpdateLCID_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createSystemIntakeActionUpdateLCID_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SystemIntakeUpdateLCIDInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.SystemIntakeUpdateLCIDInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSystemIntakeUpdateLCIDInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeUpdateLCIDInput(ctx, tmp)
	}

	var zeroVal models.SystemIntakeUpdateLCIDInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createSystemIntakeContact_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createSystemIntakeContact_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createSystemIntakeContact_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.CreateSystemIntakeContactInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.CreateSystemIntakeContactInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateSystemIntakeContactInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateSystemIntakeContactInput(ctx, tmp)
	}

	var zeroVal models.CreateSystemIntakeContactInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createSystemIntakeDocument_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createSystemIntakeDocument_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createSystemIntakeDocument_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.CreateSystemIntakeDocumentInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.CreateSystemIntakeDocumentInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateSystemIntakeDocumentInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateSystemIntakeDocumentInput(ctx, tmp)
	}

	var zeroVal models.CreateSystemIntakeDocumentInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createSystemIntakeGRBDiscussionPost_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createSystemIntakeGRBDiscussionPost_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createSystemIntakeGRBDiscussionPost_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.CreateSystemIntakeGRBDiscussionPostInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.CreateSystemIntakeGRBDiscussionPostInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNcreateSystemIntakeGRBDiscussionPostInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateSystemIntakeGRBDiscussionPostInput(ctx, tmp)
	}

	var zeroVal models.CreateSystemIntakeGRBDiscussionPostInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createSystemIntakeGRBDiscussionReply_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createSystemIntakeGRBDiscussionReply_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createSystemIntakeGRBDiscussionReply_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.CreateSystemIntakeGRBDiscussionReplyInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.CreateSystemIntakeGRBDiscussionReplyInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNcreateSystemIntakeGRBDiscussionReplyInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateSystemIntakeGRBDiscussionReplyInput(ctx, tmp)
	}

	var zeroVal models.CreateSystemIntakeGRBDiscussionReplyInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createSystemIntakeGRBReviewers_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createSystemIntakeGRBReviewers_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createSystemIntakeGRBReviewers_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.CreateSystemIntakeGRBReviewersInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.CreateSystemIntakeGRBReviewersInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateSystemIntakeGRBReviewersInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateSystemIntakeGRBReviewersInput(ctx, tmp)
	}

	var zeroVal models.CreateSystemIntakeGRBReviewersInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createSystemIntakeNote_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createSystemIntakeNote_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createSystemIntakeNote_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.CreateSystemIntakeNoteInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.CreateSystemIntakeNoteInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateSystemIntakeNoteInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateSystemIntakeNoteInput(ctx, tmp)
	}

	var zeroVal models.CreateSystemIntakeNoteInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createSystemIntake_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createSystemIntake_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createSystemIntake_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.CreateSystemIntakeInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.CreateSystemIntakeInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateSystemIntakeInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateSystemIntakeInput(ctx, tmp)
	}

	var zeroVal models.CreateSystemIntakeInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createTRBAdminNoteConsultSession_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createTRBAdminNoteConsultSession_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createTRBAdminNoteConsultSession_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.CreateTRBAdminNoteConsultSessionInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.CreateTRBAdminNoteConsultSessionInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateTRBAdminNoteConsultSessionInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateTRBAdminNoteConsultSessionInput(ctx, tmp)
	}

	var zeroVal models.CreateTRBAdminNoteConsultSessionInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createTRBAdminNoteGeneralRequest_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createTRBAdminNoteGeneralRequest_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createTRBAdminNoteGeneralRequest_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.CreateTRBAdminNoteGeneralRequestInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.CreateTRBAdminNoteGeneralRequestInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateTRBAdminNoteGeneralRequestInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateTRBAdminNoteGeneralRequestInput(ctx, tmp)
	}

	var zeroVal models.CreateTRBAdminNoteGeneralRequestInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createTRBAdminNoteGuidanceLetter_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createTRBAdminNoteGuidanceLetter_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createTRBAdminNoteGuidanceLetter_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.CreateTRBAdminNoteGuidanceLetterInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.CreateTRBAdminNoteGuidanceLetterInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateTRBAdminNoteGuidanceLetterInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateTRBAdminNoteGuidanceLetterInput(ctx, tmp)
	}

	var zeroVal models.CreateTRBAdminNoteGuidanceLetterInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createTRBAdminNoteInitialRequestForm_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createTRBAdminNoteInitialRequestForm_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createTRBAdminNoteInitialRequestForm_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.CreateTRBAdminNoteInitialRequestFormInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.CreateTRBAdminNoteInitialRequestFormInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateTRBAdminNoteInitialRequestFormInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateTRBAdminNoteInitialRequestFormInput(ctx, tmp)
	}

	var zeroVal models.CreateTRBAdminNoteInitialRequestFormInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createTRBAdminNoteSupportingDocuments_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createTRBAdminNoteSupportingDocuments_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createTRBAdminNoteSupportingDocuments_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.CreateTRBAdminNoteSupportingDocumentsInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.CreateTRBAdminNoteSupportingDocumentsInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateTRBAdminNoteSupportingDocumentsInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateTRBAdminNoteSupportingDocumentsInput(ctx, tmp)
	}

	var zeroVal models.CreateTRBAdminNoteSupportingDocumentsInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createTRBGuidanceLetterInsight_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createTRBGuidanceLetterInsight_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createTRBGuidanceLetterInsight_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.CreateTRBGuidanceLetterInsightInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.CreateTRBGuidanceLetterInsightInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateTRBGuidanceLetterInsightInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateTRBGuidanceLetterInsightInput(ctx, tmp)
	}

	var zeroVal models.CreateTRBGuidanceLetterInsightInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createTRBGuidanceLetter_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createTRBGuidanceLetter_argsTrbRequestID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["trbRequestId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createTRBGuidanceLetter_argsTrbRequestID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	if _, ok := rawArgs["trbRequestId"]; !ok {
		var zeroVal uuid.UUID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("trbRequestId"))
	if tmp, ok := rawArgs["trbRequestId"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createTRBRequestAttendee_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createTRBRequestAttendee_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createTRBRequestAttendee_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.CreateTRBRequestAttendeeInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.CreateTRBRequestAttendeeInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateTRBRequestAttendeeInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateTRBRequestAttendeeInput(ctx, tmp)
	}

	var zeroVal models.CreateTRBRequestAttendeeInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createTRBRequestDocument_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createTRBRequestDocument_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createTRBRequestDocument_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.CreateTRBRequestDocumentInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.CreateTRBRequestDocumentInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateTRBRequestDocumentInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateTRBRequestDocumentInput(ctx, tmp)
	}

	var zeroVal models.CreateTRBRequestDocumentInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createTRBRequestFeedback_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createTRBRequestFeedback_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createTRBRequestFeedback_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.CreateTRBRequestFeedbackInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.CreateTRBRequestFeedbackInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateTRBRequestFeedbackInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateTRBRequestFeedbackInput(ctx, tmp)
	}

	var zeroVal models.CreateTRBRequestFeedbackInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createTRBRequest_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createTRBRequest_argsRequestType(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["requestType"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createTRBRequest_argsRequestType(
	ctx context.Context,
	rawArgs map[string]any,
) (models.TRBRequestType, error) {
	if _, ok := rawArgs["requestType"]; !ok {
		var zeroVal models.TRBRequestType
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("requestType"))
	if tmp, ok := rawArgs["requestType"]; ok {
		return ec.unmarshalNTRBRequestType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestType(ctx, tmp)
	}

	var zeroVal models.TRBRequestType
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_createTrbLeadOption_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_createTrbLeadOption_argsEua(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["eua"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_createTrbLeadOption_argsEua(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["eua"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("eua"))
	if tmp, ok := rawArgs["eua"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteCedarSystemBookmark_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteCedarSystemBookmark_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteCedarSystemBookmark_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.CreateCedarSystemBookmarkInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.CreateCedarSystemBookmarkInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateCedarSystemBookmarkInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateCedarSystemBookmarkInput(ctx, tmp)
	}

	var zeroVal models.CreateCedarSystemBookmarkInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteSystemIntakeContact_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteSystemIntakeContact_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteSystemIntakeContact_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.DeleteSystemIntakeContactInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.DeleteSystemIntakeContactInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNDeleteSystemIntakeContactInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐDeleteSystemIntakeContactInput(ctx, tmp)
	}

	var zeroVal models.DeleteSystemIntakeContactInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteSystemIntakeDocument_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteSystemIntakeDocument_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteSystemIntakeDocument_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uuid.UUID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteSystemIntakeGRBPresentationLinks_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteSystemIntakeGRBPresentationLinks_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteSystemIntakeGRBPresentationLinks_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.DeleteSystemIntakeGRBPresentationLinksInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.DeleteSystemIntakeGRBPresentationLinksInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNDeleteSystemIntakeGRBPresentationLinksInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐDeleteSystemIntakeGRBPresentationLinksInput(ctx, tmp)
	}

	var zeroVal models.DeleteSystemIntakeGRBPresentationLinksInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteSystemIntakeGRBReviewer_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteSystemIntakeGRBReviewer_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteSystemIntakeGRBReviewer_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.DeleteSystemIntakeGRBReviewerInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.DeleteSystemIntakeGRBReviewerInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNDeleteSystemIntakeGRBReviewerInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐDeleteSystemIntakeGRBReviewerInput(ctx, tmp)
	}

	var zeroVal models.DeleteSystemIntakeGRBReviewerInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteTRBGuidanceLetterInsight_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteTRBGuidanceLetterInsight_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteTRBGuidanceLetterInsight_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uuid.UUID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteTRBRequestAttendee_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteTRBRequestAttendee_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteTRBRequestAttendee_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uuid.UUID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteTRBRequestDocument_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteTRBRequestDocument_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteTRBRequestDocument_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uuid.UUID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteTRBRequestFundingSources_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteTRBRequestFundingSources_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteTRBRequestFundingSources_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.DeleteTRBRequestFundingSourcesInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.DeleteTRBRequestFundingSourcesInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNDeleteTRBRequestFundingSourcesInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐDeleteTRBRequestFundingSourcesInput(ctx, tmp)
	}

	var zeroVal models.DeleteTRBRequestFundingSourcesInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_deleteTrbLeadOption_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_deleteTrbLeadOption_argsEua(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["eua"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_deleteTrbLeadOption_argsEua(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["eua"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("eua"))
	if tmp, ok := rawArgs["eua"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_manuallyEndSystemIntakeGRBReviewAsyncVoting_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_manuallyEndSystemIntakeGRBReviewAsyncVoting_argsSystemIntakeID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["systemIntakeID"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_manuallyEndSystemIntakeGRBReviewAsyncVoting_argsSystemIntakeID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	if _, ok := rawArgs["systemIntakeID"]; !ok {
		var zeroVal uuid.UUID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
	if tmp, ok := rawArgs["systemIntakeID"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_reopenTrbRequest_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_reopenTrbRequest_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_reopenTrbRequest_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.ReopenTRBRequestInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.ReopenTRBRequestInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNReopenTRBRequestInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐReopenTRBRequestInput(ctx, tmp)
	}

	var zeroVal models.ReopenTRBRequestInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_requestReviewForTRBGuidanceLetter_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_requestReviewForTRBGuidanceLetter_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_requestReviewForTRBGuidanceLetter_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uuid.UUID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_sendCantFindSomethingEmail_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_sendCantFindSomethingEmail_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_sendCantFindSomethingEmail_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SendCantFindSomethingEmailInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.SendCantFindSomethingEmailInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSendCantFindSomethingEmailInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSendCantFindSomethingEmailInput(ctx, tmp)
	}

	var zeroVal models.SendCantFindSomethingEmailInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_sendFeedbackEmail_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_sendFeedbackEmail_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_sendFeedbackEmail_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SendFeedbackEmailInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.SendFeedbackEmailInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSendFeedbackEmailInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSendFeedbackEmailInput(ctx, tmp)
	}

	var zeroVal models.SendFeedbackEmailInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_sendGRBReviewPresentationDeckReminderEmail_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_sendGRBReviewPresentationDeckReminderEmail_argsSystemIntakeID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["systemIntakeID"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_sendGRBReviewPresentationDeckReminderEmail_argsSystemIntakeID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	if _, ok := rawArgs["systemIntakeID"]; !ok {
		var zeroVal uuid.UUID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
	if tmp, ok := rawArgs["systemIntakeID"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_sendReportAProblemEmail_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_sendReportAProblemEmail_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_sendReportAProblemEmail_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SendReportAProblemEmailInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.SendReportAProblemEmailInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSendReportAProblemEmailInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSendReportAProblemEmailInput(ctx, tmp)
	}

	var zeroVal models.SendReportAProblemEmailInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_sendTRBGuidanceLetter_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_sendTRBGuidanceLetter_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_sendTRBGuidanceLetter_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SendTRBGuidanceLetterInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.SendTRBGuidanceLetterInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSendTRBGuidanceLetterInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSendTRBGuidanceLetterInput(ctx, tmp)
	}

	var zeroVal models.SendTRBGuidanceLetterInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_setRolesForUserOnSystem_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_setRolesForUserOnSystem_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_setRolesForUserOnSystem_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SetRolesForUserOnSystemInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.SetRolesForUserOnSystemInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSetRolesForUserOnSystemInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSetRolesForUserOnSystemInput(ctx, tmp)
	}

	var zeroVal models.SetRolesForUserOnSystemInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_setSystemIntakeGRBPresentationLinks_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_setSystemIntakeGRBPresentationLinks_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_setSystemIntakeGRBPresentationLinks_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SystemIntakeGRBPresentationLinksInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.SystemIntakeGRBPresentationLinksInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSystemIntakeGRBPresentationLinksInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBPresentationLinksInput(ctx, tmp)
	}

	var zeroVal models.SystemIntakeGRBPresentationLinksInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_setSystemIntakeRelationExistingService_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_setSystemIntakeRelationExistingService_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_setSystemIntakeRelationExistingService_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (*models.SetSystemIntakeRelationExistingServiceInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal *models.SetSystemIntakeRelationExistingServiceInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalOSetSystemIntakeRelationExistingServiceInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSetSystemIntakeRelationExistingServiceInput(ctx, tmp)
	}

	var zeroVal *models.SetSystemIntakeRelationExistingServiceInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_setSystemIntakeRelationExistingSystem_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_setSystemIntakeRelationExistingSystem_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_setSystemIntakeRelationExistingSystem_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (*models.SetSystemIntakeRelationExistingSystemInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal *models.SetSystemIntakeRelationExistingSystemInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalOSetSystemIntakeRelationExistingSystemInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSetSystemIntakeRelationExistingSystemInput(ctx, tmp)
	}

	var zeroVal *models.SetSystemIntakeRelationExistingSystemInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_setSystemIntakeRelationNewSystem_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_setSystemIntakeRelationNewSystem_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_setSystemIntakeRelationNewSystem_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (*models.SetSystemIntakeRelationNewSystemInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal *models.SetSystemIntakeRelationNewSystemInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalOSetSystemIntakeRelationNewSystemInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSetSystemIntakeRelationNewSystemInput(ctx, tmp)
	}

	var zeroVal *models.SetSystemIntakeRelationNewSystemInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_setTRBAdminNoteArchived_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_setTRBAdminNoteArchived_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_setTRBAdminNoteArchived_argsIsArchived(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["isArchived"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_setTRBAdminNoteArchived_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uuid.UUID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_setTRBAdminNoteArchived_argsIsArchived(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["isArchived"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("isArchived"))
	if tmp, ok := rawArgs["isArchived"]; ok {
		return ec.unmarshalNBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_setTRBRequestRelationExistingService_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_setTRBRequestRelationExistingService_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_setTRBRequestRelationExistingService_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SetTRBRequestRelationExistingServiceInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.SetTRBRequestRelationExistingServiceInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSetTRBRequestRelationExistingServiceInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSetTRBRequestRelationExistingServiceInput(ctx, tmp)
	}

	var zeroVal models.SetTRBRequestRelationExistingServiceInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_setTRBRequestRelationExistingSystem_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_setTRBRequestRelationExistingSystem_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_setTRBRequestRelationExistingSystem_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SetTRBRequestRelationExistingSystemInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.SetTRBRequestRelationExistingSystemInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSetTRBRequestRelationExistingSystemInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSetTRBRequestRelationExistingSystemInput(ctx, tmp)
	}

	var zeroVal models.SetTRBRequestRelationExistingSystemInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_setTRBRequestRelationNewSystem_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_setTRBRequestRelationNewSystem_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_setTRBRequestRelationNewSystem_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SetTRBRequestRelationNewSystemInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.SetTRBRequestRelationNewSystemInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSetTRBRequestRelationNewSystemInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSetTRBRequestRelationNewSystemInput(ctx, tmp)
	}

	var zeroVal models.SetTRBRequestRelationNewSystemInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_startGRBReview_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_startGRBReview_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_startGRBReview_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.StartGRBReviewInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.StartGRBReviewInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNStartGRBReviewInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐStartGRBReviewInput(ctx, tmp)
	}

	var zeroVal models.StartGRBReviewInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_submitIntake_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_submitIntake_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_submitIntake_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SubmitIntakeInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.SubmitIntakeInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNSubmitIntakeInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSubmitIntakeInput(ctx, tmp)
	}

	var zeroVal models.SubmitIntakeInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_unlinkSystemIntakeRelation_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_unlinkSystemIntakeRelation_argsIntakeID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["intakeID"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_unlinkSystemIntakeRelation_argsIntakeID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	if _, ok := rawArgs["intakeID"]; !ok {
		var zeroVal uuid.UUID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("intakeID"))
	if tmp, ok := rawArgs["intakeID"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_unlinkTRBRequestRelation_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_unlinkTRBRequestRelation_argsTrbRequestID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["trbRequestID"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_unlinkTRBRequestRelation_argsTrbRequestID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	if _, ok := rawArgs["trbRequestID"]; !ok {
		var zeroVal uuid.UUID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("trbRequestID"))
	if tmp, ok := rawArgs["trbRequestID"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateSystemIntakeAdminLead_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateSystemIntakeAdminLead_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateSystemIntakeAdminLead_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.UpdateSystemIntakeAdminLeadInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.UpdateSystemIntakeAdminLeadInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateSystemIntakeAdminLeadInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeAdminLeadInput(ctx, tmp)
	}

	var zeroVal models.UpdateSystemIntakeAdminLeadInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateSystemIntakeContactDetails_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateSystemIntakeContactDetails_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateSystemIntakeContactDetails_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.UpdateSystemIntakeContactDetailsInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.UpdateSystemIntakeContactDetailsInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateSystemIntakeContactDetailsInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeContactDetailsInput(ctx, tmp)
	}

	var zeroVal models.UpdateSystemIntakeContactDetailsInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateSystemIntakeContact_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateSystemIntakeContact_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateSystemIntakeContact_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.UpdateSystemIntakeContactInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.UpdateSystemIntakeContactInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateSystemIntakeContactInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeContactInput(ctx, tmp)
	}

	var zeroVal models.UpdateSystemIntakeContactInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateSystemIntakeContractDetails_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateSystemIntakeContractDetails_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateSystemIntakeContractDetails_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.UpdateSystemIntakeContractDetailsInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.UpdateSystemIntakeContractDetailsInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateSystemIntakeContractDetailsInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeContractDetailsInput(ctx, tmp)
	}

	var zeroVal models.UpdateSystemIntakeContractDetailsInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateSystemIntakeGRBReviewFormPresentationAsync_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateSystemIntakeGRBReviewFormPresentationAsync_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateSystemIntakeGRBReviewFormPresentationAsync_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.UpdateSystemIntakeGRBReviewFormInputPresentationAsync, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.UpdateSystemIntakeGRBReviewFormInputPresentationAsync
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNupdateSystemIntakeGRBReviewFormInputPresentationAsync2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeGRBReviewFormInputPresentationAsync(ctx, tmp)
	}

	var zeroVal models.UpdateSystemIntakeGRBReviewFormInputPresentationAsync
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateSystemIntakeGRBReviewFormPresentationStandard_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateSystemIntakeGRBReviewFormPresentationStandard_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateSystemIntakeGRBReviewFormPresentationStandard_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.UpdateSystemIntakeGRBReviewFormInputPresentationStandard, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.UpdateSystemIntakeGRBReviewFormInputPresentationStandard
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNupdateSystemIntakeGRBReviewFormInputPresentationStandard2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeGRBReviewFormInputPresentationStandard(ctx, tmp)
	}

	var zeroVal models.UpdateSystemIntakeGRBReviewFormInputPresentationStandard
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateSystemIntakeGRBReviewFormTimeframeAsync_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateSystemIntakeGRBReviewFormTimeframeAsync_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateSystemIntakeGRBReviewFormTimeframeAsync_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.UpdateSystemIntakeGRBReviewFormInputTimeframeAsync, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.UpdateSystemIntakeGRBReviewFormInputTimeframeAsync
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNupdateSystemIntakeGRBReviewFormInputTimeframeAsync2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeGRBReviewFormInputTimeframeAsync(ctx, tmp)
	}

	var zeroVal models.UpdateSystemIntakeGRBReviewFormInputTimeframeAsync
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateSystemIntakeGRBReviewType_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateSystemIntakeGRBReviewType_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateSystemIntakeGRBReviewType_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.UpdateSystemIntakeGRBReviewTypeInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.UpdateSystemIntakeGRBReviewTypeInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNupdateSystemIntakeGRBReviewTypeInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeGRBReviewTypeInput(ctx, tmp)
	}

	var zeroVal models.UpdateSystemIntakeGRBReviewTypeInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateSystemIntakeGRBReviewer_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateSystemIntakeGRBReviewer_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateSystemIntakeGRBReviewer_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.UpdateSystemIntakeGRBReviewerInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.UpdateSystemIntakeGRBReviewerInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateSystemIntakeGRBReviewerInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeGRBReviewerInput(ctx, tmp)
	}

	var zeroVal models.UpdateSystemIntakeGRBReviewerInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateSystemIntakeLinkedCedarSystem_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateSystemIntakeLinkedCedarSystem_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateSystemIntakeLinkedCedarSystem_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.UpdateSystemIntakeLinkedCedarSystemInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.UpdateSystemIntakeLinkedCedarSystemInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateSystemIntakeLinkedCedarSystemInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeLinkedCedarSystemInput(ctx, tmp)
	}

	var zeroVal models.UpdateSystemIntakeLinkedCedarSystemInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateSystemIntakeNote_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateSystemIntakeNote_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateSystemIntakeNote_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.UpdateSystemIntakeNoteInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.UpdateSystemIntakeNoteInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateSystemIntakeNoteInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeNoteInput(ctx, tmp)
	}

	var zeroVal models.UpdateSystemIntakeNoteInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateSystemIntakeRequestDetails_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateSystemIntakeRequestDetails_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateSystemIntakeRequestDetails_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.UpdateSystemIntakeRequestDetailsInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.UpdateSystemIntakeRequestDetailsInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateSystemIntakeRequestDetailsInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeRequestDetailsInput(ctx, tmp)
	}

	var zeroVal models.UpdateSystemIntakeRequestDetailsInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateSystemIntakeRequestType_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateSystemIntakeRequestType_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateSystemIntakeRequestType_argsNewType(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["newType"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateSystemIntakeRequestType_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uuid.UUID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateSystemIntakeRequestType_argsNewType(
	ctx context.Context,
	rawArgs map[string]any,
) (models.SystemIntakeRequestType, error) {
	if _, ok := rawArgs["newType"]; !ok {
		var zeroVal models.SystemIntakeRequestType
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("newType"))
	if tmp, ok := rawArgs["newType"]; ok {
		return ec.unmarshalNSystemIntakeRequestType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeRequestType(ctx, tmp)
	}

	var zeroVal models.SystemIntakeRequestType
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateSystemIntakeReviewDates_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateSystemIntakeReviewDates_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateSystemIntakeReviewDates_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.UpdateSystemIntakeReviewDatesInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.UpdateSystemIntakeReviewDatesInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateSystemIntakeReviewDatesInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeReviewDatesInput(ctx, tmp)
	}

	var zeroVal models.UpdateSystemIntakeReviewDatesInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTRBGuidanceLetterInsightOrder_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateTRBGuidanceLetterInsightOrder_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateTRBGuidanceLetterInsightOrder_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.UpdateTRBGuidanceLetterInsightOrderInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.UpdateTRBGuidanceLetterInsightOrderInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateTRBGuidanceLetterInsightOrderInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateTRBGuidanceLetterInsightOrderInput(ctx, tmp)
	}

	var zeroVal models.UpdateTRBGuidanceLetterInsightOrderInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTRBGuidanceLetterInsight_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateTRBGuidanceLetterInsight_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateTRBGuidanceLetterInsight_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (map[string]interface{}, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal map[string]interface{}
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateTRBGuidanceLetterInsightInput2map(ctx, tmp)
	}

	var zeroVal map[string]interface{}
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTRBGuidanceLetter_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateTRBGuidanceLetter_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateTRBGuidanceLetter_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (map[string]interface{}, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal map[string]interface{}
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateTRBGuidanceLetterInput2map(ctx, tmp)
	}

	var zeroVal map[string]interface{}
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTRBRequestAttendee_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateTRBRequestAttendee_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateTRBRequestAttendee_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.UpdateTRBRequestAttendeeInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.UpdateTRBRequestAttendeeInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateTRBRequestAttendeeInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateTRBRequestAttendeeInput(ctx, tmp)
	}

	var zeroVal models.UpdateTRBRequestAttendeeInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTRBRequestConsultMeetingTime_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateTRBRequestConsultMeetingTime_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateTRBRequestConsultMeetingTime_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.UpdateTRBRequestConsultMeetingTimeInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.UpdateTRBRequestConsultMeetingTimeInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateTRBRequestConsultMeetingTimeInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateTRBRequestConsultMeetingTimeInput(ctx, tmp)
	}

	var zeroVal models.UpdateTRBRequestConsultMeetingTimeInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTRBRequestForm_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateTRBRequestForm_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateTRBRequestForm_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (map[string]interface{}, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal map[string]interface{}
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateTRBRequestFormInput2map(ctx, tmp)
	}

	var zeroVal map[string]interface{}
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTRBRequestFundingSources_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateTRBRequestFundingSources_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateTRBRequestFundingSources_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.UpdateTRBRequestFundingSourcesInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.UpdateTRBRequestFundingSourcesInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateTRBRequestFundingSourcesInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateTRBRequestFundingSourcesInput(ctx, tmp)
	}

	var zeroVal models.UpdateTRBRequestFundingSourcesInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTRBRequestTRBLead_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateTRBRequestTRBLead_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_updateTRBRequestTRBLead_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.UpdateTRBRequestTRBLeadInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.UpdateTRBRequestTRBLeadInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUpdateTRBRequestTRBLeadInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateTRBRequestTRBLeadInput(ctx, tmp)
	}

	var zeroVal models.UpdateTRBRequestTRBLeadInput
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTRBRequest_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_updateTRBRequest_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_Mutation_updateTRBRequest_argsChanges(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["changes"] = arg1
	return args, nil
}
func (ec *executionContext) field_Mutation_updateTRBRequest_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uuid.UUID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_updateTRBRequest_argsChanges(
	ctx context.Context,
	rawArgs map[string]any,
) (map[string]interface{}, error) {
	if _, ok := rawArgs["changes"]; !ok {
		var zeroVal map[string]interface{}
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("changes"))
	if tmp, ok := rawArgs["changes"]; ok {
		return ec.unmarshalOTRBRequestChanges2map(ctx, tmp)
	}

	var zeroVal map[string]interface{}
	return zeroVal, nil
}

func (ec *executionContext) field_Mutation_uploadSystemIntakeGRBPresentationDeck_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Mutation_uploadSystemIntakeGRBPresentationDeck_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_Mutation_uploadSystemIntakeGRBPresentationDeck_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (models.UploadSystemIntakeGRBPresentationDeckInput, error) {
	if _, ok := rawArgs["input"]; !ok {
		var zeroVal models.UploadSystemIntakeGRBPresentationDeckInput
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNUploadSystemIntakeGRBPresentationDeckInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUploadSystemIntakeGRBPresentationDeckInput(ctx, tmp)
	}

	var zeroVal models.UploadSystemIntakeGRBPresentationDeckInput
	return zeroVal, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query___type_argsName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query___type_argsName(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["name"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
	if tmp, ok := rawArgs["name"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_cedarAuthorityToOperate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_cedarAuthorityToOperate_argsCedarSystemID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cedarSystemID"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_cedarAuthorityToOperate_argsCedarSystemID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["cedarSystemID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cedarSystemID"))
	if tmp, ok := rawArgs["cedarSystemID"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_cedarBudgetSystemCost_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_cedarBudgetSystemCost_argsCedarSystemID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cedarSystemID"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_cedarBudgetSystemCost_argsCedarSystemID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["cedarSystemID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cedarSystemID"))
	if tmp, ok := rawArgs["cedarSystemID"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_cedarBudget_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_cedarBudget_argsCedarSystemID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cedarSystemID"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_cedarBudget_argsCedarSystemID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["cedarSystemID"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cedarSystemID"))
	if tmp, ok := rawArgs["cedarSystemID"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_cedarContractsBySystem_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_cedarContractsBySystem_argsCedarSystemID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cedarSystemId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_cedarContractsBySystem_argsCedarSystemID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["cedarSystemId"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cedarSystemId"))
	if tmp, ok := rawArgs["cedarSystemId"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_cedarPersonsByCommonName_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_cedarPersonsByCommonName_argsCommonName(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["commonName"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_cedarPersonsByCommonName_argsCommonName(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["commonName"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("commonName"))
	if tmp, ok := rawArgs["commonName"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_cedarSoftwareProducts_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_cedarSoftwareProducts_argsCedarSystemID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cedarSystemId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_cedarSoftwareProducts_argsCedarSystemID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["cedarSystemId"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cedarSystemId"))
	if tmp, ok := rawArgs["cedarSystemId"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_cedarSubSystems_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_cedarSubSystems_argsCedarSystemID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cedarSystemId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_cedarSubSystems_argsCedarSystemID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["cedarSystemId"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cedarSystemId"))
	if tmp, ok := rawArgs["cedarSystemId"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_cedarSystemDetails_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_cedarSystemDetails_argsCedarSystemID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cedarSystemId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_cedarSystemDetails_argsCedarSystemID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["cedarSystemId"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cedarSystemId"))
	if tmp, ok := rawArgs["cedarSystemId"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_cedarSystem_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_cedarSystem_argsCedarSystemID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cedarSystemId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_cedarSystem_argsCedarSystemID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["cedarSystemId"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cedarSystemId"))
	if tmp, ok := rawArgs["cedarSystemId"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_cedarThreat_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_cedarThreat_argsCedarSystemID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cedarSystemId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_cedarThreat_argsCedarSystemID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["cedarSystemId"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cedarSystemId"))
	if tmp, ok := rawArgs["cedarSystemId"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_compareGRBReviewersByIntakeID_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_compareGRBReviewersByIntakeID_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_compareGRBReviewersByIntakeID_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uuid.UUID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_Query_deployments_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_deployments_argsCedarSystemID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cedarSystemId"] = arg0
	arg1, err := ec.field_Query_deployments_argsDeploymentType(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["deploymentType"] = arg1
	arg2, err := ec.field_Query_deployments_argsState(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["state"] = arg2
	arg3, err := ec.field_Query_deployments_argsStatus(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["status"] = arg3
	return args, nil
}
func (ec *executionContext) field_Query_deployments_argsCedarSystemID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["cedarSystemId"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cedarSystemId"))
	if tmp, ok := rawArgs["cedarSystemId"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_deployments_argsDeploymentType(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["deploymentType"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("deploymentType"))
	if tmp, ok := rawArgs["deploymentType"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_deployments_argsState(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["state"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
	if tmp, ok := rawArgs["state"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_deployments_argsStatus(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["status"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
	if tmp, ok := rawArgs["status"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_exchanges_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_exchanges_argsCedarSystemID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cedarSystemId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_exchanges_argsCedarSystemID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["cedarSystemId"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cedarSystemId"))
	if tmp, ok := rawArgs["cedarSystemId"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_myTrbRequests_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_myTrbRequests_argsArchived(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["archived"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_myTrbRequests_argsArchived(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["archived"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("archived"))
	if tmp, ok := rawArgs["archived"]; ok {
		return ec.unmarshalNBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field_Query_roles_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_roles_argsCedarSystemID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cedarSystemId"] = arg0
	arg1, err := ec.field_Query_roles_argsRoleTypeID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["roleTypeID"] = arg1
	return args, nil
}
func (ec *executionContext) field_Query_roles_argsCedarSystemID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["cedarSystemId"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cedarSystemId"))
	if tmp, ok := rawArgs["cedarSystemId"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_roles_argsRoleTypeID(
	ctx context.Context,
	rawArgs map[string]any,
) (*string, error) {
	if _, ok := rawArgs["roleTypeID"]; !ok {
		var zeroVal *string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("roleTypeID"))
	if tmp, ok := rawArgs["roleTypeID"]; ok {
		return ec.unmarshalOString2ᚖstring(ctx, tmp)
	}

	var zeroVal *string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_systemIntakeContacts_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_systemIntakeContacts_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_systemIntakeContacts_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uuid.UUID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_Query_systemIntake_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_systemIntake_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_systemIntake_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uuid.UUID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_Query_systemIntakes_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_systemIntakes_argsOpenRequests(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["openRequests"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_systemIntakes_argsOpenRequests(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["openRequests"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("openRequests"))
	if tmp, ok := rawArgs["openRequests"]; ok {
		return ec.unmarshalNBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field_Query_trbAdminNote_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_trbAdminNote_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_trbAdminNote_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uuid.UUID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_Query_trbRequest_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_trbRequest_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_trbRequest_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	if _, ok := rawArgs["id"]; !ok {
		var zeroVal uuid.UUID
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_Query_trbRequests_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_trbRequests_argsArchived(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["archived"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_trbRequests_argsArchived(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["archived"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("archived"))
	if tmp, ok := rawArgs["archived"]; ok {
		return ec.unmarshalNBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field_Query_urls_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_urls_argsCedarSystemID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["cedarSystemId"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_urls_argsCedarSystemID(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["cedarSystemId"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("cedarSystemId"))
	if tmp, ok := rawArgs["cedarSystemId"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field_Query_userAccount_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_Query_userAccount_argsUsername(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["username"] = arg0
	return args, nil
}
func (ec *executionContext) field_Query_userAccount_argsUsername(
	ctx context.Context,
	rawArgs map[string]any,
) (string, error) {
	if _, ok := rawArgs["username"]; !ok {
		var zeroVal string
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
	if tmp, ok := rawArgs["username"]; ok {
		return ec.unmarshalNString2string(ctx, tmp)
	}

	var zeroVal string
	return zeroVal, nil
}

func (ec *executionContext) field___Directive_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Directive_args_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Directive_args_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal *bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field___Field_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Field_args_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Field_args_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (*bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal *bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
	}

	var zeroVal *bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_enumValues_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_enumValues_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field___Type_fields_argsIncludeDeprecated(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}
func (ec *executionContext) field___Type_fields_argsIncludeDeprecated(
	ctx context.Context,
	rawArgs map[string]any,
) (bool, error) {
	if _, ok := rawArgs["includeDeprecated"]; !ok {
		var zeroVal bool
		return zeroVal, nil
	}

	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		return ec.unmarshalOBoolean2bool(ctx, tmp)
	}

	var zeroVal bool
	return zeroVal, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AugmentedSystemIntakeContact_id(ctx context.Context, field graphql.CollectedField, obj *models.AugmentedSystemIntakeContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AugmentedSystemIntakeContact_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AugmentedSystemIntakeContact_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AugmentedSystemIntakeContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AugmentedSystemIntakeContact_euaUserId(ctx context.Context, field graphql.CollectedField, obj *models.AugmentedSystemIntakeContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AugmentedSystemIntakeContact_euaUserId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EUAUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AugmentedSystemIntakeContact_euaUserId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AugmentedSystemIntakeContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AugmentedSystemIntakeContact_systemIntakeId(ctx context.Context, field graphql.CollectedField, obj *models.AugmentedSystemIntakeContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AugmentedSystemIntakeContact_systemIntakeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemIntakeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AugmentedSystemIntakeContact_systemIntakeId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AugmentedSystemIntakeContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AugmentedSystemIntakeContact_component(ctx context.Context, field graphql.CollectedField, obj *models.AugmentedSystemIntakeContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AugmentedSystemIntakeContact_component(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Component, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AugmentedSystemIntakeContact_component(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AugmentedSystemIntakeContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AugmentedSystemIntakeContact_role(ctx context.Context, field graphql.CollectedField, obj *models.AugmentedSystemIntakeContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AugmentedSystemIntakeContact_role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AugmentedSystemIntakeContact_role(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AugmentedSystemIntakeContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AugmentedSystemIntakeContact_commonName(ctx context.Context, field graphql.CollectedField, obj *models.AugmentedSystemIntakeContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AugmentedSystemIntakeContact_commonName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommonName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AugmentedSystemIntakeContact_commonName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AugmentedSystemIntakeContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AugmentedSystemIntakeContact_email(ctx context.Context, field graphql.CollectedField, obj *models.AugmentedSystemIntakeContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AugmentedSystemIntakeContact_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.EmailAddress)
	fc.Result = res
	return ec.marshalOEmailAddress2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AugmentedSystemIntakeContact_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AugmentedSystemIntakeContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EmailAddress does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCase_alternativeASolution(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCase) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCase_alternativeASolution(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BusinessCase().AlternativeASolution(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.BusinessCaseSolution)
	fc.Result = res
	return ec.marshalOBusinessCaseSolution2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐBusinessCaseSolution(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCase_alternativeASolution(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCase",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "acquisitionApproach":
				return ec.fieldContext_BusinessCaseSolution_acquisitionApproach(ctx, field)
			case "cons":
				return ec.fieldContext_BusinessCaseSolution_cons(ctx, field)
			case "costSavings":
				return ec.fieldContext_BusinessCaseSolution_costSavings(ctx, field)
			case "hasUi":
				return ec.fieldContext_BusinessCaseSolution_hasUi(ctx, field)
			case "hostingCloudServiceType":
				return ec.fieldContext_BusinessCaseSolution_hostingCloudServiceType(ctx, field)
			case "hostingLocation":
				return ec.fieldContext_BusinessCaseSolution_hostingLocation(ctx, field)
			case "hostingType":
				return ec.fieldContext_BusinessCaseSolution_hostingType(ctx, field)
			case "pros":
				return ec.fieldContext_BusinessCaseSolution_pros(ctx, field)
			case "securityIsApproved":
				return ec.fieldContext_BusinessCaseSolution_securityIsApproved(ctx, field)
			case "securityIsBeingReviewed":
				return ec.fieldContext_BusinessCaseSolution_securityIsBeingReviewed(ctx, field)
			case "summary":
				return ec.fieldContext_BusinessCaseSolution_summary(ctx, field)
			case "title":
				return ec.fieldContext_BusinessCaseSolution_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BusinessCaseSolution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCase_alternativeBSolution(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCase) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCase_alternativeBSolution(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BusinessCase().AlternativeBSolution(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.BusinessCaseSolution)
	fc.Result = res
	return ec.marshalOBusinessCaseSolution2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐBusinessCaseSolution(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCase_alternativeBSolution(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCase",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "acquisitionApproach":
				return ec.fieldContext_BusinessCaseSolution_acquisitionApproach(ctx, field)
			case "cons":
				return ec.fieldContext_BusinessCaseSolution_cons(ctx, field)
			case "costSavings":
				return ec.fieldContext_BusinessCaseSolution_costSavings(ctx, field)
			case "hasUi":
				return ec.fieldContext_BusinessCaseSolution_hasUi(ctx, field)
			case "hostingCloudServiceType":
				return ec.fieldContext_BusinessCaseSolution_hostingCloudServiceType(ctx, field)
			case "hostingLocation":
				return ec.fieldContext_BusinessCaseSolution_hostingLocation(ctx, field)
			case "hostingType":
				return ec.fieldContext_BusinessCaseSolution_hostingType(ctx, field)
			case "pros":
				return ec.fieldContext_BusinessCaseSolution_pros(ctx, field)
			case "securityIsApproved":
				return ec.fieldContext_BusinessCaseSolution_securityIsApproved(ctx, field)
			case "securityIsBeingReviewed":
				return ec.fieldContext_BusinessCaseSolution_securityIsBeingReviewed(ctx, field)
			case "summary":
				return ec.fieldContext_BusinessCaseSolution_summary(ctx, field)
			case "title":
				return ec.fieldContext_BusinessCaseSolution_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BusinessCaseSolution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCase_businessNeed(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCase) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCase_businessNeed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessNeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCase_businessNeed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCase",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCase_businessOwner(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCase) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCase_businessOwner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessOwner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCase_businessOwner(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCase",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCase_cmsBenefit(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCase) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCase_cmsBenefit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CMSBenefit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCase_cmsBenefit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCase",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCase_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCase) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCase_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCase_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCase",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCase_currentSolutionSummary(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCase) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCase_currentSolutionSummary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentSolutionSummary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCase_currentSolutionSummary(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCase",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCase_euaUserId(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCase) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCase_euaUserId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EUAUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCase_euaUserId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCase",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCase_id(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCase) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCase_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCase_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCase",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCase_lifecycleCostLines(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCase) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCase_lifecycleCostLines(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BusinessCase().LifecycleCostLines(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.EstimatedLifecycleCost)
	fc.Result = res
	return ec.marshalOEstimatedLifecycleCost2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEstimatedLifecycleCostᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCase_lifecycleCostLines(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCase",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "businessCaseId":
				return ec.fieldContext_EstimatedLifecycleCost_businessCaseId(ctx, field)
			case "cost":
				return ec.fieldContext_EstimatedLifecycleCost_cost(ctx, field)
			case "id":
				return ec.fieldContext_EstimatedLifecycleCost_id(ctx, field)
			case "phase":
				return ec.fieldContext_EstimatedLifecycleCost_phase(ctx, field)
			case "solution":
				return ec.fieldContext_EstimatedLifecycleCost_solution(ctx, field)
			case "year":
				return ec.fieldContext_EstimatedLifecycleCost_year(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EstimatedLifecycleCost", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCase_preferredSolution(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCase) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCase_preferredSolution(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BusinessCase().PreferredSolution(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.BusinessCaseSolution)
	fc.Result = res
	return ec.marshalOBusinessCaseSolution2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐBusinessCaseSolution(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCase_preferredSolution(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCase",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "acquisitionApproach":
				return ec.fieldContext_BusinessCaseSolution_acquisitionApproach(ctx, field)
			case "cons":
				return ec.fieldContext_BusinessCaseSolution_cons(ctx, field)
			case "costSavings":
				return ec.fieldContext_BusinessCaseSolution_costSavings(ctx, field)
			case "hasUi":
				return ec.fieldContext_BusinessCaseSolution_hasUi(ctx, field)
			case "hostingCloudServiceType":
				return ec.fieldContext_BusinessCaseSolution_hostingCloudServiceType(ctx, field)
			case "hostingLocation":
				return ec.fieldContext_BusinessCaseSolution_hostingLocation(ctx, field)
			case "hostingType":
				return ec.fieldContext_BusinessCaseSolution_hostingType(ctx, field)
			case "pros":
				return ec.fieldContext_BusinessCaseSolution_pros(ctx, field)
			case "securityIsApproved":
				return ec.fieldContext_BusinessCaseSolution_securityIsApproved(ctx, field)
			case "securityIsBeingReviewed":
				return ec.fieldContext_BusinessCaseSolution_securityIsBeingReviewed(ctx, field)
			case "summary":
				return ec.fieldContext_BusinessCaseSolution_summary(ctx, field)
			case "title":
				return ec.fieldContext_BusinessCaseSolution_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BusinessCaseSolution", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCase_priorityAlignment(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCase) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCase_priorityAlignment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriorityAlignment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCase_priorityAlignment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCase",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCase_projectName(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCase) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCase_projectName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCase_projectName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCase",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCase_requester(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCase) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCase_requester(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Requester, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCase_requester(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCase",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCase_requesterPhoneNumber(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCase) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCase_requesterPhoneNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequesterPhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCase_requesterPhoneNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCase",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCase_status(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCase) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCase_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.BusinessCaseStatus)
	fc.Result = res
	return ec.marshalNBusinessCaseStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐBusinessCaseStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCase_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCase",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type BusinessCaseStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCase_successIndicators(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCase) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCase_successIndicators(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuccessIndicators, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCase_successIndicators(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCase",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCase_systemIntake(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCase) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCase_systemIntake(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.BusinessCase().SystemIntake(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntake)
	fc.Result = res
	return ec.marshalNSystemIntake2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntake(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCase_systemIntake(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCase",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "actions":
				return ec.fieldContext_SystemIntake_actions(ctx, field)
			case "adminLead":
				return ec.fieldContext_SystemIntake_adminLead(ctx, field)
			case "archivedAt":
				return ec.fieldContext_SystemIntake_archivedAt(ctx, field)
			case "businessCase":
				return ec.fieldContext_SystemIntake_businessCase(ctx, field)
			case "businessNeed":
				return ec.fieldContext_SystemIntake_businessNeed(ctx, field)
			case "businessOwner":
				return ec.fieldContext_SystemIntake_businessOwner(ctx, field)
			case "businessSolution":
				return ec.fieldContext_SystemIntake_businessSolution(ctx, field)
			case "contract":
				return ec.fieldContext_SystemIntake_contract(ctx, field)
			case "costs":
				return ec.fieldContext_SystemIntake_costs(ctx, field)
			case "annualSpending":
				return ec.fieldContext_SystemIntake_annualSpending(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntake_createdAt(ctx, field)
			case "currentStage":
				return ec.fieldContext_SystemIntake_currentStage(ctx, field)
			case "decisionNextSteps":
				return ec.fieldContext_SystemIntake_decisionNextSteps(ctx, field)
			case "eaCollaborator":
				return ec.fieldContext_SystemIntake_eaCollaborator(ctx, field)
			case "eaCollaboratorName":
				return ec.fieldContext_SystemIntake_eaCollaboratorName(ctx, field)
			case "euaUserId":
				return ec.fieldContext_SystemIntake_euaUserId(ctx, field)
			case "existingFunding":
				return ec.fieldContext_SystemIntake_existingFunding(ctx, field)
			case "fundingSources":
				return ec.fieldContext_SystemIntake_fundingSources(ctx, field)
			case "governanceRequestFeedbacks":
				return ec.fieldContext_SystemIntake_governanceRequestFeedbacks(ctx, field)
			case "governanceTeams":
				return ec.fieldContext_SystemIntake_governanceTeams(ctx, field)
			case "grbDate":
				return ec.fieldContext_SystemIntake_grbDate(ctx, field)
			case "grtDate":
				return ec.fieldContext_SystemIntake_grtDate(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_SystemIntake_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_SystemIntake_nextMeetingDate(ctx, field)
			case "grbReviewStartedAt":
				return ec.fieldContext_SystemIntake_grbReviewStartedAt(ctx, field)
			case "grbReviewers":
				return ec.fieldContext_SystemIntake_grbReviewers(ctx, field)
			case "grbVotingInformation":
				return ec.fieldContext_SystemIntake_grbVotingInformation(ctx, field)
			case "id":
				return ec.fieldContext_SystemIntake_id(ctx, field)
			case "isso":
				return ec.fieldContext_SystemIntake_isso(ctx, field)
			case "lcid":
				return ec.fieldContext_SystemIntake_lcid(ctx, field)
			case "lcidIssuedAt":
				return ec.fieldContext_SystemIntake_lcidIssuedAt(ctx, field)
			case "lcidExpiresAt":
				return ec.fieldContext_SystemIntake_lcidExpiresAt(ctx, field)
			case "lcidScope":
				return ec.fieldContext_SystemIntake_lcidScope(ctx, field)
			case "lcidCostBaseline":
				return ec.fieldContext_SystemIntake_lcidCostBaseline(ctx, field)
			case "lcidRetiresAt":
				return ec.fieldContext_SystemIntake_lcidRetiresAt(ctx, field)
			case "needsEaSupport":
				return ec.fieldContext_SystemIntake_needsEaSupport(ctx, field)
			case "usingSoftware":
				return ec.fieldContext_SystemIntake_usingSoftware(ctx, field)
			case "acquisitionMethods":
				return ec.fieldContext_SystemIntake_acquisitionMethods(ctx, field)
			case "notes":
				return ec.fieldContext_SystemIntake_notes(ctx, field)
			case "oitSecurityCollaborator":
				return ec.fieldContext_SystemIntake_oitSecurityCollaborator(ctx, field)
			case "oitSecurityCollaboratorName":
				return ec.fieldContext_SystemIntake_oitSecurityCollaboratorName(ctx, field)
			case "productManager":
				return ec.fieldContext_SystemIntake_productManager(ctx, field)
			case "projectAcronym":
				return ec.fieldContext_SystemIntake_projectAcronym(ctx, field)
			case "rejectionReason":
				return ec.fieldContext_SystemIntake_rejectionReason(ctx, field)
			case "requestName":
				return ec.fieldContext_SystemIntake_requestName(ctx, field)
			case "requestType":
				return ec.fieldContext_SystemIntake_requestType(ctx, field)
			case "requester":
				return ec.fieldContext_SystemIntake_requester(ctx, field)
			case "requesterName":
				return ec.fieldContext_SystemIntake_requesterName(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_SystemIntake_requesterComponent(ctx, field)
			case "state":
				return ec.fieldContext_SystemIntake_state(ctx, field)
			case "step":
				return ec.fieldContext_SystemIntake_step(ctx, field)
			case "submittedAt":
				return ec.fieldContext_SystemIntake_submittedAt(ctx, field)
			case "trbCollaborator":
				return ec.fieldContext_SystemIntake_trbCollaborator(ctx, field)
			case "trbCollaboratorName":
				return ec.fieldContext_SystemIntake_trbCollaboratorName(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SystemIntake_updatedAt(ctx, field)
			case "grtReviewEmailBody":
				return ec.fieldContext_SystemIntake_grtReviewEmailBody(ctx, field)
			case "decidedAt":
				return ec.fieldContext_SystemIntake_decidedAt(ctx, field)
			case "businessCaseId":
				return ec.fieldContext_SystemIntake_businessCaseId(ctx, field)
			case "cedarSystemId":
				return ec.fieldContext_SystemIntake_cedarSystemId(ctx, field)
			case "documents":
				return ec.fieldContext_SystemIntake_documents(ctx, field)
			case "hasUiChanges":
				return ec.fieldContext_SystemIntake_hasUiChanges(ctx, field)
			case "usesAiTech":
				return ec.fieldContext_SystemIntake_usesAiTech(ctx, field)
			case "itGovTaskStatuses":
				return ec.fieldContext_SystemIntake_itGovTaskStatuses(ctx, field)
			case "requestFormState":
				return ec.fieldContext_SystemIntake_requestFormState(ctx, field)
			case "draftBusinessCaseState":
				return ec.fieldContext_SystemIntake_draftBusinessCaseState(ctx, field)
			case "grtMeetingState":
				return ec.fieldContext_SystemIntake_grtMeetingState(ctx, field)
			case "finalBusinessCaseState":
				return ec.fieldContext_SystemIntake_finalBusinessCaseState(ctx, field)
			case "grbMeetingState":
				return ec.fieldContext_SystemIntake_grbMeetingState(ctx, field)
			case "decisionState":
				return ec.fieldContext_SystemIntake_decisionState(ctx, field)
			case "statusRequester":
				return ec.fieldContext_SystemIntake_statusRequester(ctx, field)
			case "statusAdmin":
				return ec.fieldContext_SystemIntake_statusAdmin(ctx, field)
			case "lcidStatus":
				return ec.fieldContext_SystemIntake_lcidStatus(ctx, field)
			case "trbFollowUpRecommendation":
				return ec.fieldContext_SystemIntake_trbFollowUpRecommendation(ctx, field)
			case "contractName":
				return ec.fieldContext_SystemIntake_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_SystemIntake_relationType(ctx, field)
			case "systems":
				return ec.fieldContext_SystemIntake_systems(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_SystemIntake_contractNumbers(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_SystemIntake_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_SystemIntake_relatedTRBRequests(ctx, field)
			case "grbDiscussions":
				return ec.fieldContext_SystemIntake_grbDiscussions(ctx, field)
			case "grbPresentationLinks":
				return ec.fieldContext_SystemIntake_grbPresentationLinks(ctx, field)
			case "grbPresentationDeckRequesterReminderEmailSentTime":
				return ec.fieldContext_SystemIntake_grbPresentationDeckRequesterReminderEmailSentTime(ctx, field)
			case "grbReviewType":
				return ec.fieldContext_SystemIntake_grbReviewType(ctx, field)
			case "grbReviewAsyncRecordingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncRecordingTime(ctx, field)
			case "grbReviewAsyncEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncEndDate(ctx, field)
			case "grbReviewAsyncGRBMeetingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncGRBMeetingTime(ctx, field)
			case "grbReviewAsyncStatus":
				return ec.fieldContext_SystemIntake_grbReviewAsyncStatus(ctx, field)
			case "grbReviewAsyncManualEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncManualEndDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntake", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCase_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCase) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCase_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCase_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCase",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCaseSolution_acquisitionApproach(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCaseSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCaseSolution_acquisitionApproach(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AcquisitionApproach, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCaseSolution_acquisitionApproach(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCaseSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCaseSolution_cons(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCaseSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCaseSolution_cons(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cons, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCaseSolution_cons(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCaseSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCaseSolution_costSavings(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCaseSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCaseSolution_costSavings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CostSavings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCaseSolution_costSavings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCaseSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCaseSolution_hasUi(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCaseSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCaseSolution_hasUi(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasUI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCaseSolution_hasUi(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCaseSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCaseSolution_hostingCloudServiceType(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCaseSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCaseSolution_hostingCloudServiceType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HostingCloudServiceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCaseSolution_hostingCloudServiceType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCaseSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCaseSolution_hostingLocation(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCaseSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCaseSolution_hostingLocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HostingLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCaseSolution_hostingLocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCaseSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCaseSolution_hostingType(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCaseSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCaseSolution_hostingType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HostingType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCaseSolution_hostingType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCaseSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCaseSolution_pros(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCaseSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCaseSolution_pros(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pros, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCaseSolution_pros(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCaseSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCaseSolution_securityIsApproved(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCaseSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCaseSolution_securityIsApproved(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecurityIsApproved, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCaseSolution_securityIsApproved(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCaseSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCaseSolution_securityIsBeingReviewed(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCaseSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCaseSolution_securityIsBeingReviewed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecurityIsBeingReviewed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCaseSolution_securityIsBeingReviewed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCaseSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCaseSolution_summary(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCaseSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCaseSolution_summary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Summary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCaseSolution_summary(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCaseSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BusinessCaseSolution_title(ctx context.Context, field graphql.CollectedField, obj *models.BusinessCaseSolution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BusinessCaseSolution_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BusinessCaseSolution_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BusinessCaseSolution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_cedarId(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_cedarId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CedarID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalNString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_cedarId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_uuid(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_uuid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalNString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_uuid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_actualDispositionDate(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_actualDispositionDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualDispositionDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.Time)
	fc.Result = res
	return ec.marshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_actualDispositionDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_containsPersonallyIdentifiableInformation(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_containsPersonallyIdentifiableInformation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContainsPersonallyIdentifiableInformation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_containsPersonallyIdentifiableInformation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_countOfTotalNonPrivilegedUserPopulation(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_countOfTotalNonPrivilegedUserPopulation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountOfTotalNonPrivilegedUserPopulation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_countOfTotalNonPrivilegedUserPopulation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_countOfOpenPoams(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_countOfOpenPoams(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountOfOpenPoams, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_countOfOpenPoams(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_countOfTotalPrivilegedUserPopulation(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_countOfTotalPrivilegedUserPopulation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountOfTotalPrivilegedUserPopulation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_countOfTotalPrivilegedUserPopulation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_dateAuthorizationMemoExpires(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_dateAuthorizationMemoExpires(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateAuthorizationMemoExpires, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.Time)
	fc.Result = res
	return ec.marshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_dateAuthorizationMemoExpires(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_dateAuthorizationMemoSigned(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_dateAuthorizationMemoSigned(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateAuthorizationMemoSigned, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.Time)
	fc.Result = res
	return ec.marshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_dateAuthorizationMemoSigned(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_eAuthenticationLevel(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_eAuthenticationLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EAuthenticationLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_eAuthenticationLevel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_fips199OverallImpactRating(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_fips199OverallImpactRating(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fips199OverallImpactRating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_fips199OverallImpactRating(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_fismaSystemAcronym(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_fismaSystemAcronym(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FismaSystemAcronym, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_fismaSystemAcronym(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_fismaSystemName(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_fismaSystemName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FismaSystemName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_fismaSystemName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_isAccessedByNonOrganizationalUsers(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_isAccessedByNonOrganizationalUsers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAccessedByNonOrganizationalUsers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_isAccessedByNonOrganizationalUsers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_isPiiLimitedToUserNameAndPass(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_isPiiLimitedToUserNameAndPass(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPiiLimitedToUserNameAndPass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_isPiiLimitedToUserNameAndPass(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_isProtectedHealthInformation(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_isProtectedHealthInformation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsProtectedHealthInformation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_isProtectedHealthInformation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_lastActScaDate(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_lastActScaDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastActScaDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.Time)
	fc.Result = res
	return ec.marshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_lastActScaDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_lastAssessmentDate(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_lastAssessmentDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastAssessmentDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.Time)
	fc.Result = res
	return ec.marshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_lastAssessmentDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_lastContingencyPlanCompletionDate(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_lastContingencyPlanCompletionDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastContingencyPlanCompletionDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.Time)
	fc.Result = res
	return ec.marshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_lastContingencyPlanCompletionDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_lastPenTestDate(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_lastPenTestDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastPenTestDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.Time)
	fc.Result = res
	return ec.marshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_lastPenTestDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_piaCompletionDate(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_piaCompletionDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PiaCompletionDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.Time)
	fc.Result = res
	return ec.marshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_piaCompletionDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_primaryCyberRiskAdvisor(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_primaryCyberRiskAdvisor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrimaryCyberRiskAdvisor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_primaryCyberRiskAdvisor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_privacySubjectMatterExpert(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_privacySubjectMatterExpert(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrivacySubjectMatterExpert, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_privacySubjectMatterExpert(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_recoveryPointObjective(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_recoveryPointObjective(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecoveryPointObjective, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_recoveryPointObjective(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_recoveryTimeObjective(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_recoveryTimeObjective(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecoveryTimeObjective, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_recoveryTimeObjective(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_systemOfRecordsNotice(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_systemOfRecordsNotice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemOfRecordsNotice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]zero.String)
	fc.Result = res
	return ec.marshalNString2ᚕgithubᚗcomᚋgureguᚋnullᚋzeroᚐStringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_systemOfRecordsNotice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_tlcPhase(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_tlcPhase(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TLCPhase, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_tlcPhase(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarAuthorityToOperate_xlcPhase(ctx context.Context, field graphql.CollectedField, obj *models.CedarAuthorityToOperate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarAuthorityToOperate_xlcPhase(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XLCPhase, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarAuthorityToOperate_xlcPhase(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarAuthorityToOperate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBudget_fiscalYear(ctx context.Context, field graphql.CollectedField, obj *models.CedarBudget) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBudget_fiscalYear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FiscalYear, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBudget_fiscalYear(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBudget",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBudget_funding(ctx context.Context, field graphql.CollectedField, obj *models.CedarBudget) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBudget_funding(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Funding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBudget_funding(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBudget",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBudget_fundingId(ctx context.Context, field graphql.CollectedField, obj *models.CedarBudget) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBudget_fundingId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundingID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBudget_fundingId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBudget",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBudget_fundingSource(ctx context.Context, field graphql.CollectedField, obj *models.CedarBudget) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBudget_fundingSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundingSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBudget_fundingSource(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBudget",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBudget_id(ctx context.Context, field graphql.CollectedField, obj *models.CedarBudget) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBudget_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBudget_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBudget",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBudget_name(ctx context.Context, field graphql.CollectedField, obj *models.CedarBudget) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBudget_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBudget_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBudget",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBudget_projectId(ctx context.Context, field graphql.CollectedField, obj *models.CedarBudget) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBudget_projectId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalNString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBudget_projectId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBudget",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBudget_projectTitle(ctx context.Context, field graphql.CollectedField, obj *models.CedarBudget) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBudget_projectTitle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBudget_projectTitle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBudget",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBudget_systemId(ctx context.Context, field graphql.CollectedField, obj *models.CedarBudget) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBudget_systemId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBudget_systemId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBudget",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBudgetActualCost_actualSystemCost(ctx context.Context, field graphql.CollectedField, obj *models.CedarBudgetActualCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBudgetActualCost_actualSystemCost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActualSystemCost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBudgetActualCost_actualSystemCost(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBudgetActualCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBudgetActualCost_fiscalYear(ctx context.Context, field graphql.CollectedField, obj *models.CedarBudgetActualCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBudgetActualCost_fiscalYear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FiscalYear, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBudgetActualCost_fiscalYear(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBudgetActualCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBudgetActualCost_systemId(ctx context.Context, field graphql.CollectedField, obj *models.CedarBudgetActualCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBudgetActualCost_systemId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBudgetActualCost_systemId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBudgetActualCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBudgetSystemCost_budgetActualCost(ctx context.Context, field graphql.CollectedField, obj *models.CedarBudgetSystemCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBudgetSystemCost_budgetActualCost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CedarBudgetSystemCost().BudgetActualCost(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CedarBudgetActualCost)
	fc.Result = res
	return ec.marshalNCedarBudgetActualCost2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarBudgetActualCostᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBudgetSystemCost_budgetActualCost(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBudgetSystemCost",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "actualSystemCost":
				return ec.fieldContext_CedarBudgetActualCost_actualSystemCost(ctx, field)
			case "fiscalYear":
				return ec.fieldContext_CedarBudgetActualCost_fiscalYear(ctx, field)
			case "systemId":
				return ec.fieldContext_CedarBudgetActualCost_systemId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarBudgetActualCost", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBusinessOwnerInformation_beneficiaryAddressPurpose(ctx context.Context, field graphql.CollectedField, obj *models.CedarBusinessOwnerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBusinessOwnerInformation_beneficiaryAddressPurpose(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiaryAddressPurpose, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBusinessOwnerInformation_beneficiaryAddressPurpose(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBusinessOwnerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBusinessOwnerInformation_beneficiaryAddressPurposeOther(ctx context.Context, field graphql.CollectedField, obj *models.CedarBusinessOwnerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBusinessOwnerInformation_beneficiaryAddressPurposeOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiaryAddressPurposeOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBusinessOwnerInformation_beneficiaryAddressPurposeOther(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBusinessOwnerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBusinessOwnerInformation_beneficiaryAddressSource(ctx context.Context, field graphql.CollectedField, obj *models.CedarBusinessOwnerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBusinessOwnerInformation_beneficiaryAddressSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiaryAddressSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBusinessOwnerInformation_beneficiaryAddressSource(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBusinessOwnerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBusinessOwnerInformation_beneficiaryAddressSourceOther(ctx context.Context, field graphql.CollectedField, obj *models.CedarBusinessOwnerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBusinessOwnerInformation_beneficiaryAddressSourceOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiaryAddressSourceOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBusinessOwnerInformation_beneficiaryAddressSourceOther(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBusinessOwnerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBusinessOwnerInformation_beneficiaryInformation(ctx context.Context, field graphql.CollectedField, obj *models.CedarBusinessOwnerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBusinessOwnerInformation_beneficiaryInformation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiaryInformation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBusinessOwnerInformation_beneficiaryInformation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBusinessOwnerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBusinessOwnerInformation_costPerYear(ctx context.Context, field graphql.CollectedField, obj *models.CedarBusinessOwnerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBusinessOwnerInformation_costPerYear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CostPerYear, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBusinessOwnerInformation_costPerYear(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBusinessOwnerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBusinessOwnerInformation_editBeneficiaryInformation(ctx context.Context, field graphql.CollectedField, obj *models.CedarBusinessOwnerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBusinessOwnerInformation_editBeneficiaryInformation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EditBeneficiaryInformation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBusinessOwnerInformation_editBeneficiaryInformation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBusinessOwnerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBusinessOwnerInformation_isCmsOwned(ctx context.Context, field graphql.CollectedField, obj *models.CedarBusinessOwnerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBusinessOwnerInformation_isCmsOwned(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCmsOwned, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBusinessOwnerInformation_isCmsOwned(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBusinessOwnerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBusinessOwnerInformation_nr508UserInterface(ctx context.Context, field graphql.CollectedField, obj *models.CedarBusinessOwnerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBusinessOwnerInformation_nr508UserInterface(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nr508UserInterface, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBusinessOwnerInformation_nr508UserInterface(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBusinessOwnerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBusinessOwnerInformation_numberOfContractorFte(ctx context.Context, field graphql.CollectedField, obj *models.CedarBusinessOwnerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBusinessOwnerInformation_numberOfContractorFte(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfContractorFte, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBusinessOwnerInformation_numberOfContractorFte(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBusinessOwnerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBusinessOwnerInformation_numberOfFederalFte(ctx context.Context, field graphql.CollectedField, obj *models.CedarBusinessOwnerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBusinessOwnerInformation_numberOfFederalFte(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfFederalFte, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBusinessOwnerInformation_numberOfFederalFte(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBusinessOwnerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBusinessOwnerInformation_numberOfSupportedUsersPerMonth(ctx context.Context, field graphql.CollectedField, obj *models.CedarBusinessOwnerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBusinessOwnerInformation_numberOfSupportedUsersPerMonth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfSupportedUsersPerMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBusinessOwnerInformation_numberOfSupportedUsersPerMonth(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBusinessOwnerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBusinessOwnerInformation_storesBankingData(ctx context.Context, field graphql.CollectedField, obj *models.CedarBusinessOwnerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBusinessOwnerInformation_storesBankingData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoresBankingData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBusinessOwnerInformation_storesBankingData(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBusinessOwnerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarBusinessOwnerInformation_storesBeneficiaryAddress(ctx context.Context, field graphql.CollectedField, obj *models.CedarBusinessOwnerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarBusinessOwnerInformation_storesBeneficiaryAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StoresBeneficiaryAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarBusinessOwnerInformation_storesBeneficiaryAddress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarBusinessOwnerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarContract_startDate(ctx context.Context, field graphql.CollectedField, obj *models.CedarContract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarContract_startDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.Time)
	fc.Result = res
	return ec.marshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarContract_startDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarContract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarContract_endDate(ctx context.Context, field graphql.CollectedField, obj *models.CedarContract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarContract_endDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.Time)
	fc.Result = res
	return ec.marshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarContract_endDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarContract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarContract_contractNumber(ctx context.Context, field graphql.CollectedField, obj *models.CedarContract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarContract_contractNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarContract_contractNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarContract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarContract_contractName(ctx context.Context, field graphql.CollectedField, obj *models.CedarContract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarContract_contractName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarContract_contractName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarContract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarContract_description(ctx context.Context, field graphql.CollectedField, obj *models.CedarContract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarContract_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarContract_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarContract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarContract_orderNumber(ctx context.Context, field graphql.CollectedField, obj *models.CedarContract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarContract_orderNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarContract_orderNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarContract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarContract_serviceProvided(ctx context.Context, field graphql.CollectedField, obj *models.CedarContract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarContract_serviceProvided(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceProvided, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarContract_serviceProvided(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarContract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarContract_isDeliveryOrg(ctx context.Context, field graphql.CollectedField, obj *models.CedarContract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarContract_isDeliveryOrg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeliveryOrg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarContract_isDeliveryOrg(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarContract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarContract_systemID(ctx context.Context, field graphql.CollectedField, obj *models.CedarContract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarContract_systemID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarContract_systemID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarContract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDataCenter_id(ctx context.Context, field graphql.CollectedField, obj *models.CedarDataCenter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDataCenter_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDataCenter_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDataCenter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDataCenter_name(ctx context.Context, field graphql.CollectedField, obj *models.CedarDataCenter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDataCenter_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDataCenter_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDataCenter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDataCenter_version(ctx context.Context, field graphql.CollectedField, obj *models.CedarDataCenter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDataCenter_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDataCenter_version(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDataCenter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDataCenter_description(ctx context.Context, field graphql.CollectedField, obj *models.CedarDataCenter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDataCenter_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDataCenter_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDataCenter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDataCenter_state(ctx context.Context, field graphql.CollectedField, obj *models.CedarDataCenter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDataCenter_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDataCenter_state(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDataCenter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDataCenter_status(ctx context.Context, field graphql.CollectedField, obj *models.CedarDataCenter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDataCenter_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDataCenter_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDataCenter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDataCenter_startDate(ctx context.Context, field graphql.CollectedField, obj *models.CedarDataCenter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDataCenter_startDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.Time)
	fc.Result = res
	return ec.marshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDataCenter_startDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDataCenter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDataCenter_endDate(ctx context.Context, field graphql.CollectedField, obj *models.CedarDataCenter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDataCenter_endDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.Time)
	fc.Result = res
	return ec.marshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDataCenter_endDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDataCenter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDataCenter_address1(ctx context.Context, field graphql.CollectedField, obj *models.CedarDataCenter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDataCenter_address1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDataCenter_address1(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDataCenter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDataCenter_address2(ctx context.Context, field graphql.CollectedField, obj *models.CedarDataCenter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDataCenter_address2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDataCenter_address2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDataCenter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDataCenter_city(ctx context.Context, field graphql.CollectedField, obj *models.CedarDataCenter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDataCenter_city(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDataCenter_city(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDataCenter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDataCenter_addressState(ctx context.Context, field graphql.CollectedField, obj *models.CedarDataCenter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDataCenter_addressState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDataCenter_addressState(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDataCenter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDataCenter_zip(ctx context.Context, field graphql.CollectedField, obj *models.CedarDataCenter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDataCenter_zip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDataCenter_zip(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDataCenter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDeployment_id(ctx context.Context, field graphql.CollectedField, obj *models.CedarDeployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDeployment_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalNString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDeployment_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDeployment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDeployment_name(ctx context.Context, field graphql.CollectedField, obj *models.CedarDeployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDeployment_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalNString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDeployment_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDeployment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDeployment_systemID(ctx context.Context, field graphql.CollectedField, obj *models.CedarDeployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDeployment_systemID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalNString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDeployment_systemID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDeployment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDeployment_startDate(ctx context.Context, field graphql.CollectedField, obj *models.CedarDeployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDeployment_startDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.Time)
	fc.Result = res
	return ec.marshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDeployment_startDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDeployment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDeployment_endDate(ctx context.Context, field graphql.CollectedField, obj *models.CedarDeployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDeployment_endDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.Time)
	fc.Result = res
	return ec.marshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDeployment_endDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDeployment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDeployment_isHotSite(ctx context.Context, field graphql.CollectedField, obj *models.CedarDeployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDeployment_isHotSite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsHotSite, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDeployment_isHotSite(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDeployment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDeployment_description(ctx context.Context, field graphql.CollectedField, obj *models.CedarDeployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDeployment_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDeployment_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDeployment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDeployment_contractorName(ctx context.Context, field graphql.CollectedField, obj *models.CedarDeployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDeployment_contractorName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDeployment_contractorName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDeployment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDeployment_systemVersion(ctx context.Context, field graphql.CollectedField, obj *models.CedarDeployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDeployment_systemVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDeployment_systemVersion(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDeployment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDeployment_hasProductionData(ctx context.Context, field graphql.CollectedField, obj *models.CedarDeployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDeployment_hasProductionData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasProductionData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDeployment_hasProductionData(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDeployment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDeployment_replicatedSystemElements(ctx context.Context, field graphql.CollectedField, obj *models.CedarDeployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDeployment_replicatedSystemElements(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReplicatedSystemElements, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDeployment_replicatedSystemElements(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDeployment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDeployment_deploymentType(ctx context.Context, field graphql.CollectedField, obj *models.CedarDeployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDeployment_deploymentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeploymentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDeployment_deploymentType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDeployment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDeployment_systemName(ctx context.Context, field graphql.CollectedField, obj *models.CedarDeployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDeployment_systemName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDeployment_systemName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDeployment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDeployment_deploymentElementID(ctx context.Context, field graphql.CollectedField, obj *models.CedarDeployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDeployment_deploymentElementID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeploymentElementID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDeployment_deploymentElementID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDeployment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDeployment_state(ctx context.Context, field graphql.CollectedField, obj *models.CedarDeployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDeployment_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDeployment_state(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDeployment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDeployment_status(ctx context.Context, field graphql.CollectedField, obj *models.CedarDeployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDeployment_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDeployment_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDeployment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDeployment_wanType(ctx context.Context, field graphql.CollectedField, obj *models.CedarDeployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDeployment_wanType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WanType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDeployment_wanType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDeployment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarDeployment_dataCenter(ctx context.Context, field graphql.CollectedField, obj *models.CedarDeployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarDeployment_dataCenter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataCenter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CedarDataCenter)
	fc.Result = res
	return ec.marshalOCedarDataCenter2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarDataCenter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarDeployment_dataCenter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarDeployment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CedarDataCenter_id(ctx, field)
			case "name":
				return ec.fieldContext_CedarDataCenter_name(ctx, field)
			case "version":
				return ec.fieldContext_CedarDataCenter_version(ctx, field)
			case "description":
				return ec.fieldContext_CedarDataCenter_description(ctx, field)
			case "state":
				return ec.fieldContext_CedarDataCenter_state(ctx, field)
			case "status":
				return ec.fieldContext_CedarDataCenter_status(ctx, field)
			case "startDate":
				return ec.fieldContext_CedarDataCenter_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_CedarDataCenter_endDate(ctx, field)
			case "address1":
				return ec.fieldContext_CedarDataCenter_address1(ctx, field)
			case "address2":
				return ec.fieldContext_CedarDataCenter_address2(ctx, field)
			case "city":
				return ec.fieldContext_CedarDataCenter_city(ctx, field)
			case "addressState":
				return ec.fieldContext_CedarDataCenter_addressState(ctx, field)
			case "zip":
				return ec.fieldContext_CedarDataCenter_zip(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarDataCenter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_connectionFrequency(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_connectionFrequency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConnectionFrequency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]zero.String)
	fc.Result = res
	return ec.marshalNString2ᚕgithubᚗcomᚋgureguᚋnullᚋzeroᚐStringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_connectionFrequency(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_containsBankingData(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_containsBankingData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContainsBankingData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_containsBankingData(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_containsBeneficiaryAddress(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_containsBeneficiaryAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContainsBeneficiaryAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_containsBeneficiaryAddress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_containsPhi(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_containsPhi(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContainsPhi, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_containsPhi(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_containsPii(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_containsPii(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContainsPii, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_containsPii(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_containsHealthDisparityData(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_containsHealthDisparityData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContainsHealthDisparityData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_containsHealthDisparityData(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_dataExchangeAgreement(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_dataExchangeAgreement(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataExchangeAgreement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_dataExchangeAgreement(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_dataFormat(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_dataFormat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataFormat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_dataFormat(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_dataFormatOther(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_dataFormatOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataFormatOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_dataFormatOther(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_exchangeDescription(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_exchangeDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExchangeDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_exchangeDescription(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_exchangeEndDate(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_exchangeEndDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExchangeEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.Time)
	fc.Result = res
	return ec.marshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_exchangeEndDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_exchangeId(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_exchangeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExchangeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_exchangeId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_exchangeName(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_exchangeName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExchangeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_exchangeName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_exchangeRetiredDate(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_exchangeRetiredDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExchangeRetiredDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.Time)
	fc.Result = res
	return ec.marshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_exchangeRetiredDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_exchangeStartDate(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_exchangeStartDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExchangeStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.Time)
	fc.Result = res
	return ec.marshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_exchangeStartDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_exchangeState(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_exchangeState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExchangeState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_exchangeState(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_exchangeVersion(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_exchangeVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExchangeVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_exchangeVersion(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_exchangeDirection(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_exchangeDirection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExchangeDirection, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.ExchangeDirection)
	fc.Result = res
	return ec.marshalOExchangeDirection2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐExchangeDirection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_exchangeDirection(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ExchangeDirection does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_fromOwnerId(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_fromOwnerId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FromOwnerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_fromOwnerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_fromOwnerName(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_fromOwnerName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FromOwnerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_fromOwnerName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_fromOwnerType(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_fromOwnerType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FromOwnerType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_fromOwnerType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_isBeneficiaryMailingFile(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_isBeneficiaryMailingFile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBeneficiaryMailingFile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_isBeneficiaryMailingFile(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_numOfRecords(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_numOfRecords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumOfRecords, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_numOfRecords(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_sharedViaApi(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_sharedViaApi(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SharedViaAPI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_sharedViaApi(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_toOwnerId(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_toOwnerId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ToOwnerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_toOwnerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_toOwnerName(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_toOwnerName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ToOwnerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_toOwnerName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_toOwnerType(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_toOwnerType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ToOwnerType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_toOwnerType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchange_typeOfData(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchange_typeOfData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeOfData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CedarExchangeTypeOfDataItem)
	fc.Result = res
	return ec.marshalNCedarExchangeTypeOfDataItem2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarExchangeTypeOfDataItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchange_typeOfData(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CedarExchangeTypeOfDataItem_id(ctx, field)
			case "name":
				return ec.fieldContext_CedarExchangeTypeOfDataItem_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarExchangeTypeOfDataItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchangeTypeOfDataItem_id(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchangeTypeOfDataItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchangeTypeOfDataItem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchangeTypeOfDataItem_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchangeTypeOfDataItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarExchangeTypeOfDataItem_name(ctx context.Context, field graphql.CollectedField, obj *models.CedarExchangeTypeOfDataItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarExchangeTypeOfDataItem_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarExchangeTypeOfDataItem_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarExchangeTypeOfDataItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarRole_application(ctx context.Context, field graphql.CollectedField, obj *models.CedarRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarRole_application(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Application, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalNString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarRole_application(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarRole_objectID(ctx context.Context, field graphql.CollectedField, obj *models.CedarRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarRole_objectID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalNString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarRole_objectID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarRole_roleTypeID(ctx context.Context, field graphql.CollectedField, obj *models.CedarRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarRole_roleTypeID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalNString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarRole_roleTypeID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarRole_assigneeType(ctx context.Context, field graphql.CollectedField, obj *models.CedarRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarRole_assigneeType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssigneeType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CedarAssigneeType)
	fc.Result = res
	return ec.marshalOCedarAssigneeType2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarAssigneeType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarRole_assigneeType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CedarAssigneeType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarRole_assigneeUsername(ctx context.Context, field graphql.CollectedField, obj *models.CedarRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarRole_assigneeUsername(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssigneeUsername, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarRole_assigneeUsername(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarRole_assigneeEmail(ctx context.Context, field graphql.CollectedField, obj *models.CedarRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarRole_assigneeEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssigneeEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarRole_assigneeEmail(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarRole_assigneeOrgID(ctx context.Context, field graphql.CollectedField, obj *models.CedarRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarRole_assigneeOrgID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssigneeOrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarRole_assigneeOrgID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarRole_assigneeOrgName(ctx context.Context, field graphql.CollectedField, obj *models.CedarRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarRole_assigneeOrgName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssigneeOrgName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarRole_assigneeOrgName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarRole_assigneeFirstName(ctx context.Context, field graphql.CollectedField, obj *models.CedarRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarRole_assigneeFirstName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssigneeFirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarRole_assigneeFirstName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarRole_assigneeLastName(ctx context.Context, field graphql.CollectedField, obj *models.CedarRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarRole_assigneeLastName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssigneeLastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarRole_assigneeLastName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarRole_assigneePhone(ctx context.Context, field graphql.CollectedField, obj *models.CedarRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarRole_assigneePhone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssigneePhone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarRole_assigneePhone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarRole_assigneeDesc(ctx context.Context, field graphql.CollectedField, obj *models.CedarRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarRole_assigneeDesc(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssigneeDesc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarRole_assigneeDesc(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarRole_roleTypeName(ctx context.Context, field graphql.CollectedField, obj *models.CedarRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarRole_roleTypeName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarRole_roleTypeName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarRole_roleTypeDesc(ctx context.Context, field graphql.CollectedField, obj *models.CedarRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarRole_roleTypeDesc(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleTypeDesc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarRole_roleTypeDesc(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarRole_roleID(ctx context.Context, field graphql.CollectedField, obj *models.CedarRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarRole_roleID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarRole_roleID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarRole_objectType(ctx context.Context, field graphql.CollectedField, obj *models.CedarRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarRole_objectType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjectType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarRole_objectType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarRoleType_id(ctx context.Context, field graphql.CollectedField, obj *models.CedarRoleType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarRoleType_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalNString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarRoleType_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarRoleType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarRoleType_application(ctx context.Context, field graphql.CollectedField, obj *models.CedarRoleType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarRoleType_application(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Application, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalNString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarRoleType_application(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarRoleType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarRoleType_name(ctx context.Context, field graphql.CollectedField, obj *models.CedarRoleType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarRoleType_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalNString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarRoleType_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarRoleType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarRoleType_description(ctx context.Context, field graphql.CollectedField, obj *models.CedarRoleType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarRoleType_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarRoleType_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarRoleType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProductItem_apiGatewayUse(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProductItem_apiGatewayUse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIGatewayUse, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProductItem_apiGatewayUse(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProductItem_elaPurchase(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProductItem_elaPurchase(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ElaPurchase, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProductItem_elaPurchase(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProductItem_elaVendorId(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProductItem_elaVendorId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ElaVendorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProductItem_elaVendorId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProductItem_providesAiCapability(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProductItem_providesAiCapability(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProvidesAiCapability, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProductItem_providesAiCapability(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProductItem_refstr(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProductItem_refstr(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Refstr, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProductItem_refstr(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProductItem_softwareCatagoryConnectionGuid(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProductItem_softwareCatagoryConnectionGuid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SoftwareCatagoryConnectionGUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProductItem_softwareCatagoryConnectionGuid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProductItem_softwareVendorConnectionGuid(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProductItem_softwareVendorConnectionGuid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SoftwareVendorConnectionGUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProductItem_softwareVendorConnectionGuid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProductItem_softwareCost(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProductItem_softwareCost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SoftwareCost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProductItem_softwareCost(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProductItem_softwareElaOrganization(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProductItem_softwareElaOrganization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SoftwareElaOrganization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProductItem_softwareElaOrganization(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProductItem_softwareName(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProductItem_softwareName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SoftwareName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProductItem_softwareName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProductItem_systemSoftwareConnectionGuid(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProductItem_systemSoftwareConnectionGuid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemSoftwareConnectionGUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProductItem_systemSoftwareConnectionGuid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProductItem_technopediaCategory(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProductItem_technopediaCategory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TechnopediaCategory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProductItem_technopediaCategory(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProductItem_technopediaID(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProductItem_technopediaID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TechnopediaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProductItem_technopediaID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProductItem_vendorName(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProductItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProductItem_vendorName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VendorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProductItem_vendorName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProductItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProducts_aiSolnCatg(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProducts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProducts_aiSolnCatg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AiSolnCatg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]zero.String)
	fc.Result = res
	return ec.marshalNString2ᚕgithubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProducts_aiSolnCatg(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProducts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProducts_aiSolnCatgOther(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProducts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProducts_aiSolnCatgOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AISolnCatgOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProducts_aiSolnCatgOther(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProducts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProducts_apiDataArea(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProducts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProducts_apiDataArea(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIDataArea, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]zero.String)
	fc.Result = res
	return ec.marshalNString2ᚕgithubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProducts_apiDataArea(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProducts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProducts_apiDescPubLocation(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProducts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProducts_apiDescPubLocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIDescPubLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProducts_apiDescPubLocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProducts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProducts_apiDescPublished(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProducts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProducts_apiDescPublished(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIDescPublished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProducts_apiDescPublished(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProducts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProducts_apiFHIRUse(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProducts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProducts_apiFHIRUse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIFHIRUse, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProducts_apiFHIRUse(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProducts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProducts_apiFHIRUseOther(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProducts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProducts_apiFHIRUseOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIFHIRUseOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProducts_apiFHIRUseOther(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProducts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProducts_apiHasPortal(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProducts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProducts_apiHasPortal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIHasPortal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProducts_apiHasPortal(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProducts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProducts_apisAccessibility(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProducts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProducts_apisAccessibility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApisAccessibility, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProducts_apisAccessibility(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProducts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProducts_apisDeveloped(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProducts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProducts_apisDeveloped(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApisDeveloped, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProducts_apisDeveloped(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProducts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProducts_developmentStage(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProducts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProducts_developmentStage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DevelopmentStage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProducts_developmentStage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProducts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProducts_softwareProducts(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProducts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProducts_softwareProducts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CedarSoftwareProducts().SoftwareProducts(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CedarSoftwareProductItem)
	fc.Result = res
	return ec.marshalNCedarSoftwareProductItem2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSoftwareProductItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProducts_softwareProducts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProducts",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "apiGatewayUse":
				return ec.fieldContext_CedarSoftwareProductItem_apiGatewayUse(ctx, field)
			case "elaPurchase":
				return ec.fieldContext_CedarSoftwareProductItem_elaPurchase(ctx, field)
			case "elaVendorId":
				return ec.fieldContext_CedarSoftwareProductItem_elaVendorId(ctx, field)
			case "providesAiCapability":
				return ec.fieldContext_CedarSoftwareProductItem_providesAiCapability(ctx, field)
			case "refstr":
				return ec.fieldContext_CedarSoftwareProductItem_refstr(ctx, field)
			case "softwareCatagoryConnectionGuid":
				return ec.fieldContext_CedarSoftwareProductItem_softwareCatagoryConnectionGuid(ctx, field)
			case "softwareVendorConnectionGuid":
				return ec.fieldContext_CedarSoftwareProductItem_softwareVendorConnectionGuid(ctx, field)
			case "softwareCost":
				return ec.fieldContext_CedarSoftwareProductItem_softwareCost(ctx, field)
			case "softwareElaOrganization":
				return ec.fieldContext_CedarSoftwareProductItem_softwareElaOrganization(ctx, field)
			case "softwareName":
				return ec.fieldContext_CedarSoftwareProductItem_softwareName(ctx, field)
			case "systemSoftwareConnectionGuid":
				return ec.fieldContext_CedarSoftwareProductItem_systemSoftwareConnectionGuid(ctx, field)
			case "technopediaCategory":
				return ec.fieldContext_CedarSoftwareProductItem_technopediaCategory(ctx, field)
			case "technopediaID":
				return ec.fieldContext_CedarSoftwareProductItem_technopediaID(ctx, field)
			case "vendorName":
				return ec.fieldContext_CedarSoftwareProductItem_vendorName(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarSoftwareProductItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProducts_systemHasAPIGateway(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProducts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProducts_systemHasAPIGateway(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemHasAPIGateway, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProducts_systemHasAPIGateway(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProducts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSoftwareProducts_usesAiTech(ctx context.Context, field graphql.CollectedField, obj *models.CedarSoftwareProducts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSoftwareProducts_usesAiTech(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsesAiTech, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSoftwareProducts_usesAiTech(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSoftwareProducts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSubSystem_id(ctx context.Context, field graphql.CollectedField, obj *models.CedarSubSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSubSystem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalNString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSubSystem_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSubSystem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSubSystem_name(ctx context.Context, field graphql.CollectedField, obj *models.CedarSubSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSubSystem_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalNString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSubSystem_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSubSystem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSubSystem_acronym(ctx context.Context, field graphql.CollectedField, obj *models.CedarSubSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSubSystem_acronym(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Acronym, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSubSystem_acronym(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSubSystem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSubSystem_description(ctx context.Context, field graphql.CollectedField, obj *models.CedarSubSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSubSystem_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSubSystem_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSubSystem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystem_id(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalNString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystem_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystem_name(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystem_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalNString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystem_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystem_description(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystem_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystem_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystem_acronym(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystem_acronym(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Acronym, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystem_acronym(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystem_atoEffectiveDate(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystem_atoEffectiveDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ATOEffectiveDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.Time)
	fc.Result = res
	return ec.marshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystem_atoEffectiveDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystem_atoExpirationDate(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystem_atoExpirationDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ATOExpirationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.Time)
	fc.Result = res
	return ec.marshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystem_atoExpirationDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystem_status(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystem_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystem_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystem_businessOwnerOrg(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystem_businessOwnerOrg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessOwnerOrg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystem_businessOwnerOrg(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystem_businessOwnerOrgComp(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystem_businessOwnerOrgComp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessOwnerOrgComp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystem_businessOwnerOrgComp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystem_businessOwnerRoles(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystem_businessOwnerRoles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CedarSystem().BusinessOwnerRoles(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CedarRole)
	fc.Result = res
	return ec.marshalNCedarRole2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystem_businessOwnerRoles(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystem",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "application":
				return ec.fieldContext_CedarRole_application(ctx, field)
			case "objectID":
				return ec.fieldContext_CedarRole_objectID(ctx, field)
			case "roleTypeID":
				return ec.fieldContext_CedarRole_roleTypeID(ctx, field)
			case "assigneeType":
				return ec.fieldContext_CedarRole_assigneeType(ctx, field)
			case "assigneeUsername":
				return ec.fieldContext_CedarRole_assigneeUsername(ctx, field)
			case "assigneeEmail":
				return ec.fieldContext_CedarRole_assigneeEmail(ctx, field)
			case "assigneeOrgID":
				return ec.fieldContext_CedarRole_assigneeOrgID(ctx, field)
			case "assigneeOrgName":
				return ec.fieldContext_CedarRole_assigneeOrgName(ctx, field)
			case "assigneeFirstName":
				return ec.fieldContext_CedarRole_assigneeFirstName(ctx, field)
			case "assigneeLastName":
				return ec.fieldContext_CedarRole_assigneeLastName(ctx, field)
			case "assigneePhone":
				return ec.fieldContext_CedarRole_assigneePhone(ctx, field)
			case "assigneeDesc":
				return ec.fieldContext_CedarRole_assigneeDesc(ctx, field)
			case "roleTypeName":
				return ec.fieldContext_CedarRole_roleTypeName(ctx, field)
			case "roleTypeDesc":
				return ec.fieldContext_CedarRole_roleTypeDesc(ctx, field)
			case "roleID":
				return ec.fieldContext_CedarRole_roleID(ctx, field)
			case "objectType":
				return ec.fieldContext_CedarRole_objectType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystem_systemMaintainerOrg(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystem_systemMaintainerOrg(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemMaintainerOrg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystem_systemMaintainerOrg(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystem_systemMaintainerOrgComp(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystem_systemMaintainerOrgComp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemMaintainerOrgComp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystem_systemMaintainerOrgComp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystem_versionId(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystem_versionId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VersionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystem_versionId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystem_isBookmarked(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystem_isBookmarked(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CedarSystem().IsBookmarked(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystem_isBookmarked(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystem",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystem_linkedTrbRequests(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystem_linkedTrbRequests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CedarSystem().LinkedTrbRequests(rctx, obj, fc.Args["state"].(models.TRBRequestState))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TRBRequest)
	fc.Result = res
	return ec.marshalNTRBRequest2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystem_linkedTrbRequests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystem",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequest_id(ctx, field)
			case "name":
				return ec.fieldContext_TRBRequest_name(ctx, field)
			case "archived":
				return ec.fieldContext_TRBRequest_archived(ctx, field)
			case "type":
				return ec.fieldContext_TRBRequest_type(ctx, field)
			case "state":
				return ec.fieldContext_TRBRequest_state(ctx, field)
			case "status":
				return ec.fieldContext_TRBRequest_status(ctx, field)
			case "attendees":
				return ec.fieldContext_TRBRequest_attendees(ctx, field)
			case "feedback":
				return ec.fieldContext_TRBRequest_feedback(ctx, field)
			case "documents":
				return ec.fieldContext_TRBRequest_documents(ctx, field)
			case "form":
				return ec.fieldContext_TRBRequest_form(ctx, field)
			case "guidanceLetter":
				return ec.fieldContext_TRBRequest_guidanceLetter(ctx, field)
			case "taskStatuses":
				return ec.fieldContext_TRBRequest_taskStatuses(ctx, field)
			case "consultMeetingTime":
				return ec.fieldContext_TRBRequest_consultMeetingTime(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_TRBRequest_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_TRBRequest_nextMeetingDate(ctx, field)
			case "trbLead":
				return ec.fieldContext_TRBRequest_trbLead(ctx, field)
			case "trbLeadInfo":
				return ec.fieldContext_TRBRequest_trbLeadInfo(ctx, field)
			case "requesterInfo":
				return ec.fieldContext_TRBRequest_requesterInfo(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_TRBRequest_requesterComponent(ctx, field)
			case "adminNotes":
				return ec.fieldContext_TRBRequest_adminNotes(ctx, field)
			case "isRecent":
				return ec.fieldContext_TRBRequest_isRecent(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequest_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequest_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequest_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequest_modifiedAt(ctx, field)
			case "contractName":
				return ec.fieldContext_TRBRequest_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_TRBRequest_relationType(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_TRBRequest_contractNumbers(ctx, field)
			case "systems":
				return ec.fieldContext_TRBRequest_systems(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_TRBRequest_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_TRBRequest_relatedTRBRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_CedarSystem_linkedTrbRequests_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystem_linkedSystemIntakes(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystem_linkedSystemIntakes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CedarSystem().LinkedSystemIntakes(rctx, obj, fc.Args["state"].(models.SystemIntakeState))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.SystemIntake)
	fc.Result = res
	return ec.marshalNSystemIntake2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystem_linkedSystemIntakes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystem",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "actions":
				return ec.fieldContext_SystemIntake_actions(ctx, field)
			case "adminLead":
				return ec.fieldContext_SystemIntake_adminLead(ctx, field)
			case "archivedAt":
				return ec.fieldContext_SystemIntake_archivedAt(ctx, field)
			case "businessCase":
				return ec.fieldContext_SystemIntake_businessCase(ctx, field)
			case "businessNeed":
				return ec.fieldContext_SystemIntake_businessNeed(ctx, field)
			case "businessOwner":
				return ec.fieldContext_SystemIntake_businessOwner(ctx, field)
			case "businessSolution":
				return ec.fieldContext_SystemIntake_businessSolution(ctx, field)
			case "contract":
				return ec.fieldContext_SystemIntake_contract(ctx, field)
			case "costs":
				return ec.fieldContext_SystemIntake_costs(ctx, field)
			case "annualSpending":
				return ec.fieldContext_SystemIntake_annualSpending(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntake_createdAt(ctx, field)
			case "currentStage":
				return ec.fieldContext_SystemIntake_currentStage(ctx, field)
			case "decisionNextSteps":
				return ec.fieldContext_SystemIntake_decisionNextSteps(ctx, field)
			case "eaCollaborator":
				return ec.fieldContext_SystemIntake_eaCollaborator(ctx, field)
			case "eaCollaboratorName":
				return ec.fieldContext_SystemIntake_eaCollaboratorName(ctx, field)
			case "euaUserId":
				return ec.fieldContext_SystemIntake_euaUserId(ctx, field)
			case "existingFunding":
				return ec.fieldContext_SystemIntake_existingFunding(ctx, field)
			case "fundingSources":
				return ec.fieldContext_SystemIntake_fundingSources(ctx, field)
			case "governanceRequestFeedbacks":
				return ec.fieldContext_SystemIntake_governanceRequestFeedbacks(ctx, field)
			case "governanceTeams":
				return ec.fieldContext_SystemIntake_governanceTeams(ctx, field)
			case "grbDate":
				return ec.fieldContext_SystemIntake_grbDate(ctx, field)
			case "grtDate":
				return ec.fieldContext_SystemIntake_grtDate(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_SystemIntake_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_SystemIntake_nextMeetingDate(ctx, field)
			case "grbReviewStartedAt":
				return ec.fieldContext_SystemIntake_grbReviewStartedAt(ctx, field)
			case "grbReviewers":
				return ec.fieldContext_SystemIntake_grbReviewers(ctx, field)
			case "grbVotingInformation":
				return ec.fieldContext_SystemIntake_grbVotingInformation(ctx, field)
			case "id":
				return ec.fieldContext_SystemIntake_id(ctx, field)
			case "isso":
				return ec.fieldContext_SystemIntake_isso(ctx, field)
			case "lcid":
				return ec.fieldContext_SystemIntake_lcid(ctx, field)
			case "lcidIssuedAt":
				return ec.fieldContext_SystemIntake_lcidIssuedAt(ctx, field)
			case "lcidExpiresAt":
				return ec.fieldContext_SystemIntake_lcidExpiresAt(ctx, field)
			case "lcidScope":
				return ec.fieldContext_SystemIntake_lcidScope(ctx, field)
			case "lcidCostBaseline":
				return ec.fieldContext_SystemIntake_lcidCostBaseline(ctx, field)
			case "lcidRetiresAt":
				return ec.fieldContext_SystemIntake_lcidRetiresAt(ctx, field)
			case "needsEaSupport":
				return ec.fieldContext_SystemIntake_needsEaSupport(ctx, field)
			case "usingSoftware":
				return ec.fieldContext_SystemIntake_usingSoftware(ctx, field)
			case "acquisitionMethods":
				return ec.fieldContext_SystemIntake_acquisitionMethods(ctx, field)
			case "notes":
				return ec.fieldContext_SystemIntake_notes(ctx, field)
			case "oitSecurityCollaborator":
				return ec.fieldContext_SystemIntake_oitSecurityCollaborator(ctx, field)
			case "oitSecurityCollaboratorName":
				return ec.fieldContext_SystemIntake_oitSecurityCollaboratorName(ctx, field)
			case "productManager":
				return ec.fieldContext_SystemIntake_productManager(ctx, field)
			case "projectAcronym":
				return ec.fieldContext_SystemIntake_projectAcronym(ctx, field)
			case "rejectionReason":
				return ec.fieldContext_SystemIntake_rejectionReason(ctx, field)
			case "requestName":
				return ec.fieldContext_SystemIntake_requestName(ctx, field)
			case "requestType":
				return ec.fieldContext_SystemIntake_requestType(ctx, field)
			case "requester":
				return ec.fieldContext_SystemIntake_requester(ctx, field)
			case "requesterName":
				return ec.fieldContext_SystemIntake_requesterName(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_SystemIntake_requesterComponent(ctx, field)
			case "state":
				return ec.fieldContext_SystemIntake_state(ctx, field)
			case "step":
				return ec.fieldContext_SystemIntake_step(ctx, field)
			case "submittedAt":
				return ec.fieldContext_SystemIntake_submittedAt(ctx, field)
			case "trbCollaborator":
				return ec.fieldContext_SystemIntake_trbCollaborator(ctx, field)
			case "trbCollaboratorName":
				return ec.fieldContext_SystemIntake_trbCollaboratorName(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SystemIntake_updatedAt(ctx, field)
			case "grtReviewEmailBody":
				return ec.fieldContext_SystemIntake_grtReviewEmailBody(ctx, field)
			case "decidedAt":
				return ec.fieldContext_SystemIntake_decidedAt(ctx, field)
			case "businessCaseId":
				return ec.fieldContext_SystemIntake_businessCaseId(ctx, field)
			case "cedarSystemId":
				return ec.fieldContext_SystemIntake_cedarSystemId(ctx, field)
			case "documents":
				return ec.fieldContext_SystemIntake_documents(ctx, field)
			case "hasUiChanges":
				return ec.fieldContext_SystemIntake_hasUiChanges(ctx, field)
			case "usesAiTech":
				return ec.fieldContext_SystemIntake_usesAiTech(ctx, field)
			case "itGovTaskStatuses":
				return ec.fieldContext_SystemIntake_itGovTaskStatuses(ctx, field)
			case "requestFormState":
				return ec.fieldContext_SystemIntake_requestFormState(ctx, field)
			case "draftBusinessCaseState":
				return ec.fieldContext_SystemIntake_draftBusinessCaseState(ctx, field)
			case "grtMeetingState":
				return ec.fieldContext_SystemIntake_grtMeetingState(ctx, field)
			case "finalBusinessCaseState":
				return ec.fieldContext_SystemIntake_finalBusinessCaseState(ctx, field)
			case "grbMeetingState":
				return ec.fieldContext_SystemIntake_grbMeetingState(ctx, field)
			case "decisionState":
				return ec.fieldContext_SystemIntake_decisionState(ctx, field)
			case "statusRequester":
				return ec.fieldContext_SystemIntake_statusRequester(ctx, field)
			case "statusAdmin":
				return ec.fieldContext_SystemIntake_statusAdmin(ctx, field)
			case "lcidStatus":
				return ec.fieldContext_SystemIntake_lcidStatus(ctx, field)
			case "trbFollowUpRecommendation":
				return ec.fieldContext_SystemIntake_trbFollowUpRecommendation(ctx, field)
			case "contractName":
				return ec.fieldContext_SystemIntake_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_SystemIntake_relationType(ctx, field)
			case "systems":
				return ec.fieldContext_SystemIntake_systems(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_SystemIntake_contractNumbers(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_SystemIntake_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_SystemIntake_relatedTRBRequests(ctx, field)
			case "grbDiscussions":
				return ec.fieldContext_SystemIntake_grbDiscussions(ctx, field)
			case "grbPresentationLinks":
				return ec.fieldContext_SystemIntake_grbPresentationLinks(ctx, field)
			case "grbPresentationDeckRequesterReminderEmailSentTime":
				return ec.fieldContext_SystemIntake_grbPresentationDeckRequesterReminderEmailSentTime(ctx, field)
			case "grbReviewType":
				return ec.fieldContext_SystemIntake_grbReviewType(ctx, field)
			case "grbReviewAsyncRecordingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncRecordingTime(ctx, field)
			case "grbReviewAsyncEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncEndDate(ctx, field)
			case "grbReviewAsyncGRBMeetingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncGRBMeetingTime(ctx, field)
			case "grbReviewAsyncStatus":
				return ec.fieldContext_SystemIntake_grbReviewAsyncStatus(ctx, field)
			case "grbReviewAsyncManualEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncManualEndDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntake", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_CedarSystem_linkedSystemIntakes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystem_uuid(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystem_uuid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystem_uuid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemBookmark_euaUserId(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemBookmark) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemBookmark_euaUserId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EUAUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemBookmark_euaUserId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemBookmark",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemBookmark_cedarSystemId(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemBookmark) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemBookmark_cedarSystemId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CedarSystemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemBookmark_cedarSystemId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemBookmark",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemDetails_cedarSystem(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemDetails_cedarSystem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CedarSystem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CedarSystem)
	fc.Result = res
	return ec.marshalNCedarSystem2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSystem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemDetails_cedarSystem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CedarSystem_id(ctx, field)
			case "name":
				return ec.fieldContext_CedarSystem_name(ctx, field)
			case "description":
				return ec.fieldContext_CedarSystem_description(ctx, field)
			case "acronym":
				return ec.fieldContext_CedarSystem_acronym(ctx, field)
			case "atoEffectiveDate":
				return ec.fieldContext_CedarSystem_atoEffectiveDate(ctx, field)
			case "atoExpirationDate":
				return ec.fieldContext_CedarSystem_atoExpirationDate(ctx, field)
			case "status":
				return ec.fieldContext_CedarSystem_status(ctx, field)
			case "businessOwnerOrg":
				return ec.fieldContext_CedarSystem_businessOwnerOrg(ctx, field)
			case "businessOwnerOrgComp":
				return ec.fieldContext_CedarSystem_businessOwnerOrgComp(ctx, field)
			case "businessOwnerRoles":
				return ec.fieldContext_CedarSystem_businessOwnerRoles(ctx, field)
			case "systemMaintainerOrg":
				return ec.fieldContext_CedarSystem_systemMaintainerOrg(ctx, field)
			case "systemMaintainerOrgComp":
				return ec.fieldContext_CedarSystem_systemMaintainerOrgComp(ctx, field)
			case "versionId":
				return ec.fieldContext_CedarSystem_versionId(ctx, field)
			case "isBookmarked":
				return ec.fieldContext_CedarSystem_isBookmarked(ctx, field)
			case "linkedTrbRequests":
				return ec.fieldContext_CedarSystem_linkedTrbRequests(ctx, field)
			case "linkedSystemIntakes":
				return ec.fieldContext_CedarSystem_linkedSystemIntakes(ctx, field)
			case "uuid":
				return ec.fieldContext_CedarSystem_uuid(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarSystem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemDetails_systemMaintainerInformation(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemDetails_systemMaintainerInformation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CedarSystemDetails().SystemMaintainerInformation(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CedarSystemMaintainerInformation)
	fc.Result = res
	return ec.marshalNCedarSystemMaintainerInformation2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSystemMaintainerInformation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemDetails_systemMaintainerInformation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemDetails",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "agileUsed":
				return ec.fieldContext_CedarSystemMaintainerInformation_agileUsed(ctx, field)
			case "adHocAgileDeploymentFrequency":
				return ec.fieldContext_CedarSystemMaintainerInformation_adHocAgileDeploymentFrequency(ctx, field)
			case "authoritativeDatasource":
				return ec.fieldContext_CedarSystemMaintainerInformation_authoritativeDatasource(ctx, field)
			case "businessArtifactsOnDemand":
				return ec.fieldContext_CedarSystemMaintainerInformation_businessArtifactsOnDemand(ctx, field)
			case "dataAtRestEncryptionKeyManagement":
				return ec.fieldContext_CedarSystemMaintainerInformation_dataAtRestEncryptionKeyManagement(ctx, field)
			case "deploymentFrequency":
				return ec.fieldContext_CedarSystemMaintainerInformation_deploymentFrequency(ctx, field)
			case "devCompletionPercent":
				return ec.fieldContext_CedarSystemMaintainerInformation_devCompletionPercent(ctx, field)
			case "devWorkDescription":
				return ec.fieldContext_CedarSystemMaintainerInformation_devWorkDescription(ctx, field)
			case "ecapParticipation":
				return ec.fieldContext_CedarSystemMaintainerInformation_ecapParticipation(ctx, field)
			case "frontendAccessType":
				return ec.fieldContext_CedarSystemMaintainerInformation_frontendAccessType(ctx, field)
			case "hardCodedIPAddress":
				return ec.fieldContext_CedarSystemMaintainerInformation_hardCodedIPAddress(ctx, field)
			case "ip6EnabledAssetPercent":
				return ec.fieldContext_CedarSystemMaintainerInformation_ip6EnabledAssetPercent(ctx, field)
			case "ip6TransitionPlan":
				return ec.fieldContext_CedarSystemMaintainerInformation_ip6TransitionPlan(ctx, field)
			case "ipEnabledAssetCount":
				return ec.fieldContext_CedarSystemMaintainerInformation_ipEnabledAssetCount(ctx, field)
			case "legalHoldCaseName":
				return ec.fieldContext_CedarSystemMaintainerInformation_legalHoldCaseName(ctx, field)
			case "locallyStoredUserInformation":
				return ec.fieldContext_CedarSystemMaintainerInformation_locallyStoredUserInformation(ctx, field)
			case "majorRefreshDate":
				return ec.fieldContext_CedarSystemMaintainerInformation_majorRefreshDate(ctx, field)
			case "multifactorAuthenticationMethod":
				return ec.fieldContext_CedarSystemMaintainerInformation_multifactorAuthenticationMethod(ctx, field)
			case "multifactorAuthenticationMethodOther":
				return ec.fieldContext_CedarSystemMaintainerInformation_multifactorAuthenticationMethodOther(ctx, field)
			case "netAccessibility":
				return ec.fieldContext_CedarSystemMaintainerInformation_netAccessibility(ctx, field)
			case "networkTrafficEncryptionKeyManagement":
				return ec.fieldContext_CedarSystemMaintainerInformation_networkTrafficEncryptionKeyManagement(ctx, field)
			case "noMajorRefresh":
				return ec.fieldContext_CedarSystemMaintainerInformation_noMajorRefresh(ctx, field)
			case "noPersistentRecordsFlag":
				return ec.fieldContext_CedarSystemMaintainerInformation_noPersistentRecordsFlag(ctx, field)
			case "noPlannedMajorRefresh":
				return ec.fieldContext_CedarSystemMaintainerInformation_noPlannedMajorRefresh(ctx, field)
			case "omDocumentationOnDemand":
				return ec.fieldContext_CedarSystemMaintainerInformation_omDocumentationOnDemand(ctx, field)
			case "plansToRetireReplace":
				return ec.fieldContext_CedarSystemMaintainerInformation_plansToRetireReplace(ctx, field)
			case "quarterToRetireReplace":
				return ec.fieldContext_CedarSystemMaintainerInformation_quarterToRetireReplace(ctx, field)
			case "recordsManagementBucket":
				return ec.fieldContext_CedarSystemMaintainerInformation_recordsManagementBucket(ctx, field)
			case "recordsManagementDisposalLocation":
				return ec.fieldContext_CedarSystemMaintainerInformation_recordsManagementDisposalLocation(ctx, field)
			case "recordsManagementDisposalPlan":
				return ec.fieldContext_CedarSystemMaintainerInformation_recordsManagementDisposalPlan(ctx, field)
			case "recordsUnderLegalHold":
				return ec.fieldContext_CedarSystemMaintainerInformation_recordsUnderLegalHold(ctx, field)
			case "sourceCodeOnDemand":
				return ec.fieldContext_CedarSystemMaintainerInformation_sourceCodeOnDemand(ctx, field)
			case "systemCustomization":
				return ec.fieldContext_CedarSystemMaintainerInformation_systemCustomization(ctx, field)
			case "systemDataLocation":
				return ec.fieldContext_CedarSystemMaintainerInformation_systemDataLocation(ctx, field)
			case "systemDataLocationNotes":
				return ec.fieldContext_CedarSystemMaintainerInformation_systemDataLocationNotes(ctx, field)
			case "systemDesignOnDemand":
				return ec.fieldContext_CedarSystemMaintainerInformation_systemDesignOnDemand(ctx, field)
			case "systemProductionDate":
				return ec.fieldContext_CedarSystemMaintainerInformation_systemProductionDate(ctx, field)
			case "systemRequirementsOnDemand":
				return ec.fieldContext_CedarSystemMaintainerInformation_systemRequirementsOnDemand(ctx, field)
			case "testPlanOnDemand":
				return ec.fieldContext_CedarSystemMaintainerInformation_testPlanOnDemand(ctx, field)
			case "testReportsOnDemand":
				return ec.fieldContext_CedarSystemMaintainerInformation_testReportsOnDemand(ctx, field)
			case "testScriptsOnDemand":
				return ec.fieldContext_CedarSystemMaintainerInformation_testScriptsOnDemand(ctx, field)
			case "yearToRetireReplace":
				return ec.fieldContext_CedarSystemMaintainerInformation_yearToRetireReplace(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarSystemMaintainerInformation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemDetails_businessOwnerInformation(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemDetails_businessOwnerInformation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CedarSystemDetails().BusinessOwnerInformation(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.CedarBusinessOwnerInformation)
	fc.Result = res
	return ec.marshalNCedarBusinessOwnerInformation2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarBusinessOwnerInformation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemDetails_businessOwnerInformation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemDetails",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "beneficiaryAddressPurpose":
				return ec.fieldContext_CedarBusinessOwnerInformation_beneficiaryAddressPurpose(ctx, field)
			case "beneficiaryAddressPurposeOther":
				return ec.fieldContext_CedarBusinessOwnerInformation_beneficiaryAddressPurposeOther(ctx, field)
			case "beneficiaryAddressSource":
				return ec.fieldContext_CedarBusinessOwnerInformation_beneficiaryAddressSource(ctx, field)
			case "beneficiaryAddressSourceOther":
				return ec.fieldContext_CedarBusinessOwnerInformation_beneficiaryAddressSourceOther(ctx, field)
			case "beneficiaryInformation":
				return ec.fieldContext_CedarBusinessOwnerInformation_beneficiaryInformation(ctx, field)
			case "costPerYear":
				return ec.fieldContext_CedarBusinessOwnerInformation_costPerYear(ctx, field)
			case "editBeneficiaryInformation":
				return ec.fieldContext_CedarBusinessOwnerInformation_editBeneficiaryInformation(ctx, field)
			case "isCmsOwned":
				return ec.fieldContext_CedarBusinessOwnerInformation_isCmsOwned(ctx, field)
			case "nr508UserInterface":
				return ec.fieldContext_CedarBusinessOwnerInformation_nr508UserInterface(ctx, field)
			case "numberOfContractorFte":
				return ec.fieldContext_CedarBusinessOwnerInformation_numberOfContractorFte(ctx, field)
			case "numberOfFederalFte":
				return ec.fieldContext_CedarBusinessOwnerInformation_numberOfFederalFte(ctx, field)
			case "numberOfSupportedUsersPerMonth":
				return ec.fieldContext_CedarBusinessOwnerInformation_numberOfSupportedUsersPerMonth(ctx, field)
			case "storesBankingData":
				return ec.fieldContext_CedarBusinessOwnerInformation_storesBankingData(ctx, field)
			case "storesBeneficiaryAddress":
				return ec.fieldContext_CedarBusinessOwnerInformation_storesBeneficiaryAddress(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarBusinessOwnerInformation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemDetails_roles(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemDetails_roles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Roles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CedarRole)
	fc.Result = res
	return ec.marshalNCedarRole2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemDetails_roles(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "application":
				return ec.fieldContext_CedarRole_application(ctx, field)
			case "objectID":
				return ec.fieldContext_CedarRole_objectID(ctx, field)
			case "roleTypeID":
				return ec.fieldContext_CedarRole_roleTypeID(ctx, field)
			case "assigneeType":
				return ec.fieldContext_CedarRole_assigneeType(ctx, field)
			case "assigneeUsername":
				return ec.fieldContext_CedarRole_assigneeUsername(ctx, field)
			case "assigneeEmail":
				return ec.fieldContext_CedarRole_assigneeEmail(ctx, field)
			case "assigneeOrgID":
				return ec.fieldContext_CedarRole_assigneeOrgID(ctx, field)
			case "assigneeOrgName":
				return ec.fieldContext_CedarRole_assigneeOrgName(ctx, field)
			case "assigneeFirstName":
				return ec.fieldContext_CedarRole_assigneeFirstName(ctx, field)
			case "assigneeLastName":
				return ec.fieldContext_CedarRole_assigneeLastName(ctx, field)
			case "assigneePhone":
				return ec.fieldContext_CedarRole_assigneePhone(ctx, field)
			case "assigneeDesc":
				return ec.fieldContext_CedarRole_assigneeDesc(ctx, field)
			case "roleTypeName":
				return ec.fieldContext_CedarRole_roleTypeName(ctx, field)
			case "roleTypeDesc":
				return ec.fieldContext_CedarRole_roleTypeDesc(ctx, field)
			case "roleID":
				return ec.fieldContext_CedarRole_roleID(ctx, field)
			case "objectType":
				return ec.fieldContext_CedarRole_objectType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemDetails_deployments(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemDetails_deployments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deployments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CedarDeployment)
	fc.Result = res
	return ec.marshalNCedarDeployment2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarDeploymentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemDetails_deployments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CedarDeployment_id(ctx, field)
			case "name":
				return ec.fieldContext_CedarDeployment_name(ctx, field)
			case "systemID":
				return ec.fieldContext_CedarDeployment_systemID(ctx, field)
			case "startDate":
				return ec.fieldContext_CedarDeployment_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_CedarDeployment_endDate(ctx, field)
			case "isHotSite":
				return ec.fieldContext_CedarDeployment_isHotSite(ctx, field)
			case "description":
				return ec.fieldContext_CedarDeployment_description(ctx, field)
			case "contractorName":
				return ec.fieldContext_CedarDeployment_contractorName(ctx, field)
			case "systemVersion":
				return ec.fieldContext_CedarDeployment_systemVersion(ctx, field)
			case "hasProductionData":
				return ec.fieldContext_CedarDeployment_hasProductionData(ctx, field)
			case "replicatedSystemElements":
				return ec.fieldContext_CedarDeployment_replicatedSystemElements(ctx, field)
			case "deploymentType":
				return ec.fieldContext_CedarDeployment_deploymentType(ctx, field)
			case "systemName":
				return ec.fieldContext_CedarDeployment_systemName(ctx, field)
			case "deploymentElementID":
				return ec.fieldContext_CedarDeployment_deploymentElementID(ctx, field)
			case "state":
				return ec.fieldContext_CedarDeployment_state(ctx, field)
			case "status":
				return ec.fieldContext_CedarDeployment_status(ctx, field)
			case "wanType":
				return ec.fieldContext_CedarDeployment_wanType(ctx, field)
			case "dataCenter":
				return ec.fieldContext_CedarDeployment_dataCenter(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarDeployment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemDetails_threats(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemDetails_threats(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Threats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CedarThreat)
	fc.Result = res
	return ec.marshalNCedarThreat2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarThreatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemDetails_threats(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "alternativeId":
				return ec.fieldContext_CedarThreat_alternativeId(ctx, field)
			case "controlFamily":
				return ec.fieldContext_CedarThreat_controlFamily(ctx, field)
			case "daysOpen":
				return ec.fieldContext_CedarThreat_daysOpen(ctx, field)
			case "id":
				return ec.fieldContext_CedarThreat_id(ctx, field)
			case "parentId":
				return ec.fieldContext_CedarThreat_parentId(ctx, field)
			case "type":
				return ec.fieldContext_CedarThreat_type(ctx, field)
			case "weaknessRiskLevel":
				return ec.fieldContext_CedarThreat_weaknessRiskLevel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarThreat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemDetails_urls(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemDetails_urls(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URLs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CedarURL)
	fc.Result = res
	return ec.marshalNCedarURL2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarURLᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemDetails_urls(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CedarURL_id(ctx, field)
			case "address":
				return ec.fieldContext_CedarURL_address(ctx, field)
			case "isBehindWebApplicationFirewall":
				return ec.fieldContext_CedarURL_isBehindWebApplicationFirewall(ctx, field)
			case "isAPIEndpoint":
				return ec.fieldContext_CedarURL_isAPIEndpoint(ctx, field)
			case "isVersionCodeRepository":
				return ec.fieldContext_CedarURL_isVersionCodeRepository(ctx, field)
			case "urlHostingEnv":
				return ec.fieldContext_CedarURL_urlHostingEnv(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarURL", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemDetails_isMySystem(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemDetails_isMySystem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsMySystem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemDetails_isMySystem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemDetails_atoEffectiveDate(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemDetails_atoEffectiveDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ATOEffectiveDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.Time)
	fc.Result = res
	return ec.marshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemDetails_atoEffectiveDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemDetails_atoExpirationDate(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemDetails_atoExpirationDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ATOExpirationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.Time)
	fc.Result = res
	return ec.marshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemDetails_atoExpirationDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_agileUsed(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_agileUsed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgileUsed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_agileUsed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_adHocAgileDeploymentFrequency(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_adHocAgileDeploymentFrequency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdHocAgileDeploymentFrequency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_adHocAgileDeploymentFrequency(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_authoritativeDatasource(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_authoritativeDatasource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthoritativeDatasource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_authoritativeDatasource(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_businessArtifactsOnDemand(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_businessArtifactsOnDemand(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessArtifactsOnDemand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_businessArtifactsOnDemand(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_dataAtRestEncryptionKeyManagement(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_dataAtRestEncryptionKeyManagement(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataAtRestEncryptionKeyManagement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_dataAtRestEncryptionKeyManagement(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_deploymentFrequency(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_deploymentFrequency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeploymentFrequency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_deploymentFrequency(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_devCompletionPercent(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_devCompletionPercent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DevCompletionPercent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_devCompletionPercent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_devWorkDescription(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_devWorkDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DevWorkDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_devWorkDescription(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_ecapParticipation(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_ecapParticipation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EcapParticipation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_ecapParticipation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_frontendAccessType(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_frontendAccessType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FrontendAccessType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_frontendAccessType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_hardCodedIPAddress(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_hardCodedIPAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HardCodedIPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_hardCodedIPAddress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_ip6EnabledAssetPercent(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_ip6EnabledAssetPercent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IP6EnabledAssetPercent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_ip6EnabledAssetPercent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_ip6TransitionPlan(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_ip6TransitionPlan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IP6TransitionPlan, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_ip6TransitionPlan(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_ipEnabledAssetCount(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_ipEnabledAssetCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPEnabledAssetCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_ipEnabledAssetCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_legalHoldCaseName(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_legalHoldCaseName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalHoldCaseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_legalHoldCaseName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_locallyStoredUserInformation(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_locallyStoredUserInformation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocallyStoredUserInformation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_locallyStoredUserInformation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_majorRefreshDate(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_majorRefreshDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MajorRefreshDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_majorRefreshDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_multifactorAuthenticationMethod(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_multifactorAuthenticationMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MultifactorAuthenticationMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_multifactorAuthenticationMethod(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_multifactorAuthenticationMethodOther(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_multifactorAuthenticationMethodOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MultifactorAuthenticationMethodOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_multifactorAuthenticationMethodOther(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_netAccessibility(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_netAccessibility(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NetAccessibility, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_netAccessibility(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_networkTrafficEncryptionKeyManagement(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_networkTrafficEncryptionKeyManagement(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NetworkTrafficEncryptionKeyManagement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_networkTrafficEncryptionKeyManagement(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_noMajorRefresh(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_noMajorRefresh(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoMajorRefresh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_noMajorRefresh(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_noPersistentRecordsFlag(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_noPersistentRecordsFlag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoPersistentRecordsFlag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_noPersistentRecordsFlag(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_noPlannedMajorRefresh(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_noPlannedMajorRefresh(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoPlannedMajorRefresh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_noPlannedMajorRefresh(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_omDocumentationOnDemand(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_omDocumentationOnDemand(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OmDocumentationOnDemand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_omDocumentationOnDemand(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_plansToRetireReplace(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_plansToRetireReplace(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlansToRetireReplace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_plansToRetireReplace(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_quarterToRetireReplace(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_quarterToRetireReplace(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuarterToRetireReplace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_quarterToRetireReplace(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_recordsManagementBucket(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_recordsManagementBucket(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordsManagementBucket, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_recordsManagementBucket(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_recordsManagementDisposalLocation(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_recordsManagementDisposalLocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordsManagementDisposalLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_recordsManagementDisposalLocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_recordsManagementDisposalPlan(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_recordsManagementDisposalPlan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordsManagementDisposalPlan, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_recordsManagementDisposalPlan(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_recordsUnderLegalHold(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_recordsUnderLegalHold(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordsUnderLegalHold, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_recordsUnderLegalHold(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_sourceCodeOnDemand(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_sourceCodeOnDemand(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceCodeOnDemand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_sourceCodeOnDemand(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_systemCustomization(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_systemCustomization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemCustomization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_systemCustomization(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_systemDataLocation(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_systemDataLocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemDataLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_systemDataLocation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_systemDataLocationNotes(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_systemDataLocationNotes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemDataLocationNotes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_systemDataLocationNotes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_systemDesignOnDemand(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_systemDesignOnDemand(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemDesignOnDemand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_systemDesignOnDemand(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_systemProductionDate(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_systemProductionDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemProductionDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_systemProductionDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_systemRequirementsOnDemand(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_systemRequirementsOnDemand(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemRequirementsOnDemand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_systemRequirementsOnDemand(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_testPlanOnDemand(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_testPlanOnDemand(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestPlanOnDemand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_testPlanOnDemand(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_testReportsOnDemand(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_testReportsOnDemand(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestReportsOnDemand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_testReportsOnDemand(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_testScriptsOnDemand(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_testScriptsOnDemand(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TestScriptsOnDemand, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_testScriptsOnDemand(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarSystemMaintainerInformation_yearToRetireReplace(ctx context.Context, field graphql.CollectedField, obj *models.CedarSystemMaintainerInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarSystemMaintainerInformation_yearToRetireReplace(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YearToRetireReplace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarSystemMaintainerInformation_yearToRetireReplace(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarSystemMaintainerInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarThreat_alternativeId(ctx context.Context, field graphql.CollectedField, obj *models.CedarThreat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarThreat_alternativeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlternativeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarThreat_alternativeId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarThreat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarThreat_controlFamily(ctx context.Context, field graphql.CollectedField, obj *models.CedarThreat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarThreat_controlFamily(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ControlFamily, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarThreat_controlFamily(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarThreat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarThreat_daysOpen(ctx context.Context, field graphql.CollectedField, obj *models.CedarThreat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarThreat_daysOpen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DaysOpen, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarThreat_daysOpen(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarThreat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarThreat_id(ctx context.Context, field graphql.CollectedField, obj *models.CedarThreat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarThreat_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarThreat_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarThreat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarThreat_parentId(ctx context.Context, field graphql.CollectedField, obj *models.CedarThreat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarThreat_parentId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarThreat_parentId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarThreat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarThreat_type(ctx context.Context, field graphql.CollectedField, obj *models.CedarThreat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarThreat_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarThreat_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarThreat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarThreat_weaknessRiskLevel(ctx context.Context, field graphql.CollectedField, obj *models.CedarThreat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarThreat_weaknessRiskLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WeaknessRiskLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarThreat_weaknessRiskLevel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarThreat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarURL_id(ctx context.Context, field graphql.CollectedField, obj *models.CedarURL) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarURL_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalNString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarURL_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarURL",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarURL_address(ctx context.Context, field graphql.CollectedField, obj *models.CedarURL) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarURL_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarURL_address(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarURL",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarURL_isBehindWebApplicationFirewall(ctx context.Context, field graphql.CollectedField, obj *models.CedarURL) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarURL_isBehindWebApplicationFirewall(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBehindWebApplicationFirewall, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarURL_isBehindWebApplicationFirewall(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarURL",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarURL_isAPIEndpoint(ctx context.Context, field graphql.CollectedField, obj *models.CedarURL) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarURL_isAPIEndpoint(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAPIEndpoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarURL_isAPIEndpoint(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarURL",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarURL_isVersionCodeRepository(ctx context.Context, field graphql.CollectedField, obj *models.CedarURL) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarURL_isVersionCodeRepository(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsVersionCodeRepository, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarURL_isVersionCodeRepository(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarURL",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CedarURL_urlHostingEnv(ctx context.Context, field graphql.CollectedField, obj *models.CedarURL) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CedarURL_urlHostingEnv(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URLHostingEnv, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CedarURL_urlHostingEnv(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CedarURL",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContractDate_day(ctx context.Context, field graphql.CollectedField, obj *models.ContractDate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContractDate_day(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContractDate_day(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContractDate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContractDate_month(ctx context.Context, field graphql.CollectedField, obj *models.ContractDate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContractDate_month(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContractDate_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContractDate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContractDate_year(ctx context.Context, field graphql.CollectedField, obj *models.ContractDate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContractDate_year(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContractDate_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContractDate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCedarSystemBookmarkPayload_cedarSystemBookmark(ctx context.Context, field graphql.CollectedField, obj *models.CreateCedarSystemBookmarkPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCedarSystemBookmarkPayload_cedarSystemBookmark(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CedarSystemBookmark, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CedarSystemBookmark)
	fc.Result = res
	return ec.marshalOCedarSystemBookmark2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSystemBookmark(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCedarSystemBookmarkPayload_cedarSystemBookmark(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCedarSystemBookmarkPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "euaUserId":
				return ec.fieldContext_CedarSystemBookmark_euaUserId(ctx, field)
			case "cedarSystemId":
				return ec.fieldContext_CedarSystemBookmark_cedarSystemId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarSystemBookmark", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateSystemIntakeContactPayload_systemIntakeContact(ctx context.Context, field graphql.CollectedField, obj *models.CreateSystemIntakeContactPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateSystemIntakeContactPayload_systemIntakeContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemIntakeContact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeContact)
	fc.Result = res
	return ec.marshalOSystemIntakeContact2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateSystemIntakeContactPayload_systemIntakeContact(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateSystemIntakeContactPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SystemIntakeContact_id(ctx, field)
			case "euaUserId":
				return ec.fieldContext_SystemIntakeContact_euaUserId(ctx, field)
			case "systemIntakeId":
				return ec.fieldContext_SystemIntakeContact_systemIntakeId(ctx, field)
			case "component":
				return ec.fieldContext_SystemIntakeContact_component(ctx, field)
			case "role":
				return ec.fieldContext_SystemIntakeContact_role(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeContact", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateSystemIntakeDocumentPayload_document(ctx context.Context, field graphql.CollectedField, obj *models.CreateSystemIntakeDocumentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateSystemIntakeDocumentPayload_document(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Document, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeDocument)
	fc.Result = res
	return ec.marshalOSystemIntakeDocument2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocument(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateSystemIntakeDocumentPayload_document(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateSystemIntakeDocumentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "documentType":
				return ec.fieldContext_SystemIntakeDocument_documentType(ctx, field)
			case "id":
				return ec.fieldContext_SystemIntakeDocument_id(ctx, field)
			case "fileName":
				return ec.fieldContext_SystemIntakeDocument_fileName(ctx, field)
			case "status":
				return ec.fieldContext_SystemIntakeDocument_status(ctx, field)
			case "version":
				return ec.fieldContext_SystemIntakeDocument_version(ctx, field)
			case "uploadedAt":
				return ec.fieldContext_SystemIntakeDocument_uploadedAt(ctx, field)
			case "url":
				return ec.fieldContext_SystemIntakeDocument_url(ctx, field)
			case "canDelete":
				return ec.fieldContext_SystemIntakeDocument_canDelete(ctx, field)
			case "canView":
				return ec.fieldContext_SystemIntakeDocument_canView(ctx, field)
			case "systemIntakeId":
				return ec.fieldContext_SystemIntakeDocument_systemIntakeId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeDocument", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateSystemIntakeGRBReviewersPayload_reviewers(ctx context.Context, field graphql.CollectedField, obj *models.CreateSystemIntakeGRBReviewersPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateSystemIntakeGRBReviewersPayload_reviewers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reviewers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.SystemIntakeGRBReviewer)
	fc.Result = res
	return ec.marshalNSystemIntakeGRBReviewer2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateSystemIntakeGRBReviewersPayload_reviewers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateSystemIntakeGRBReviewersPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SystemIntakeGRBReviewer_id(ctx, field)
			case "userAccount":
				return ec.fieldContext_SystemIntakeGRBReviewer_userAccount(ctx, field)
			case "systemIntakeID":
				return ec.fieldContext_SystemIntakeGRBReviewer_systemIntakeID(ctx, field)
			case "votingRole":
				return ec.fieldContext_SystemIntakeGRBReviewer_votingRole(ctx, field)
			case "vote":
				return ec.fieldContext_SystemIntakeGRBReviewer_vote(ctx, field)
			case "voteComment":
				return ec.fieldContext_SystemIntakeGRBReviewer_voteComment(ctx, field)
			case "dateVoted":
				return ec.fieldContext_SystemIntakeGRBReviewer_dateVoted(ctx, field)
			case "grbRole":
				return ec.fieldContext_SystemIntakeGRBReviewer_grbRole(ctx, field)
			case "createdBy":
				return ec.fieldContext_SystemIntakeGRBReviewer_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntakeGRBReviewer_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_SystemIntakeGRBReviewer_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_SystemIntakeGRBReviewer_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeGRBReviewer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateTRBRequestDocumentPayload_document(ctx context.Context, field graphql.CollectedField, obj *models.CreateTRBRequestDocumentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateTRBRequestDocumentPayload_document(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Document, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TRBRequestDocument)
	fc.Result = res
	return ec.marshalOTRBRequestDocument2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestDocument(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateTRBRequestDocumentPayload_document(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateTRBRequestDocumentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "documentType":
				return ec.fieldContext_TRBRequestDocument_documentType(ctx, field)
			case "id":
				return ec.fieldContext_TRBRequestDocument_id(ctx, field)
			case "fileName":
				return ec.fieldContext_TRBRequestDocument_fileName(ctx, field)
			case "status":
				return ec.fieldContext_TRBRequestDocument_status(ctx, field)
			case "uploadedAt":
				return ec.fieldContext_TRBRequestDocument_uploadedAt(ctx, field)
			case "url":
				return ec.fieldContext_TRBRequestDocument_url(ctx, field)
			case "deletedAt":
				return ec.fieldContext_TRBRequestDocument_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequestDocument", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CurrentUser_launchDarkly(ctx context.Context, field graphql.CollectedField, obj *models.CurrentUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CurrentUser_launchDarkly(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LaunchDarkly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.LaunchDarklySettings)
	fc.Result = res
	return ec.marshalNLaunchDarklySettings2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐLaunchDarklySettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CurrentUser_launchDarkly(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CurrentUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userKey":
				return ec.fieldContext_LaunchDarklySettings_userKey(ctx, field)
			case "signedHash":
				return ec.fieldContext_LaunchDarklySettings_signedHash(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LaunchDarklySettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteCedarSystemBookmarkPayload_cedarSystemId(ctx context.Context, field graphql.CollectedField, obj *models.DeleteCedarSystemBookmarkPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteCedarSystemBookmarkPayload_cedarSystemId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CedarSystemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteCedarSystemBookmarkPayload_cedarSystemId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteCedarSystemBookmarkPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteSystemIntakeContactPayload_systemIntakeContact(ctx context.Context, field graphql.CollectedField, obj *models.DeleteSystemIntakeContactPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteSystemIntakeContactPayload_systemIntakeContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemIntakeContact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeContact)
	fc.Result = res
	return ec.marshalOSystemIntakeContact2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteSystemIntakeContactPayload_systemIntakeContact(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteSystemIntakeContactPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SystemIntakeContact_id(ctx, field)
			case "euaUserId":
				return ec.fieldContext_SystemIntakeContact_euaUserId(ctx, field)
			case "systemIntakeId":
				return ec.fieldContext_SystemIntakeContact_systemIntakeId(ctx, field)
			case "component":
				return ec.fieldContext_SystemIntakeContact_component(ctx, field)
			case "role":
				return ec.fieldContext_SystemIntakeContact_role(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeContact", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteSystemIntakeDocumentPayload_document(ctx context.Context, field graphql.CollectedField, obj *models.DeleteSystemIntakeDocumentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteSystemIntakeDocumentPayload_document(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Document, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeDocument)
	fc.Result = res
	return ec.marshalOSystemIntakeDocument2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocument(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteSystemIntakeDocumentPayload_document(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteSystemIntakeDocumentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "documentType":
				return ec.fieldContext_SystemIntakeDocument_documentType(ctx, field)
			case "id":
				return ec.fieldContext_SystemIntakeDocument_id(ctx, field)
			case "fileName":
				return ec.fieldContext_SystemIntakeDocument_fileName(ctx, field)
			case "status":
				return ec.fieldContext_SystemIntakeDocument_status(ctx, field)
			case "version":
				return ec.fieldContext_SystemIntakeDocument_version(ctx, field)
			case "uploadedAt":
				return ec.fieldContext_SystemIntakeDocument_uploadedAt(ctx, field)
			case "url":
				return ec.fieldContext_SystemIntakeDocument_url(ctx, field)
			case "canDelete":
				return ec.fieldContext_SystemIntakeDocument_canDelete(ctx, field)
			case "canView":
				return ec.fieldContext_SystemIntakeDocument_canView(ctx, field)
			case "systemIntakeId":
				return ec.fieldContext_SystemIntakeDocument_systemIntakeId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeDocument", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteTRBRequestDocumentPayload_document(ctx context.Context, field graphql.CollectedField, obj *models.DeleteTRBRequestDocumentPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteTRBRequestDocumentPayload_document(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Document, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TRBRequestDocument)
	fc.Result = res
	return ec.marshalOTRBRequestDocument2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestDocument(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteTRBRequestDocumentPayload_document(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteTRBRequestDocumentPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "documentType":
				return ec.fieldContext_TRBRequestDocument_documentType(ctx, field)
			case "id":
				return ec.fieldContext_TRBRequestDocument_id(ctx, field)
			case "fileName":
				return ec.fieldContext_TRBRequestDocument_fileName(ctx, field)
			case "status":
				return ec.fieldContext_TRBRequestDocument_status(ctx, field)
			case "uploadedAt":
				return ec.fieldContext_TRBRequestDocument_uploadedAt(ctx, field)
			case "url":
				return ec.fieldContext_TRBRequestDocument_url(ctx, field)
			case "deletedAt":
				return ec.fieldContext_TRBRequestDocument_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequestDocument", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EstimatedLifecycleCost_businessCaseId(ctx context.Context, field graphql.CollectedField, obj *models.EstimatedLifecycleCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EstimatedLifecycleCost_businessCaseId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCaseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EstimatedLifecycleCost_businessCaseId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EstimatedLifecycleCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EstimatedLifecycleCost_cost(ctx context.Context, field graphql.CollectedField, obj *models.EstimatedLifecycleCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EstimatedLifecycleCost_cost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EstimatedLifecycleCost_cost(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EstimatedLifecycleCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EstimatedLifecycleCost_id(ctx context.Context, field graphql.CollectedField, obj *models.EstimatedLifecycleCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EstimatedLifecycleCost_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EstimatedLifecycleCost_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EstimatedLifecycleCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EstimatedLifecycleCost_phase(ctx context.Context, field graphql.CollectedField, obj *models.EstimatedLifecycleCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EstimatedLifecycleCost_phase(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phase, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.LifecycleCostPhase)
	fc.Result = res
	return ec.marshalOLifecycleCostPhase2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐLifecycleCostPhase(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EstimatedLifecycleCost_phase(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EstimatedLifecycleCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type LifecycleCostPhase does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EstimatedLifecycleCost_solution(ctx context.Context, field graphql.CollectedField, obj *models.EstimatedLifecycleCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EstimatedLifecycleCost_solution(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Solution, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.LifecycleCostSolution)
	fc.Result = res
	return ec.marshalOLifecycleCostSolution2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐLifecycleCostSolution(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EstimatedLifecycleCost_solution(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EstimatedLifecycleCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type LifecycleCostSolution does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EstimatedLifecycleCost_year(ctx context.Context, field graphql.CollectedField, obj *models.EstimatedLifecycleCost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EstimatedLifecycleCost_year(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.LifecycleCostYear)
	fc.Result = res
	return ec.marshalOLifecycleCostYear2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐLifecycleCostYear(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EstimatedLifecycleCost_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EstimatedLifecycleCost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type LifecycleCostYear does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GRBReviewerComparison_id(ctx context.Context, field graphql.CollectedField, obj *models.GRBReviewerComparison) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GRBReviewerComparison_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GRBReviewerComparison_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GRBReviewerComparison",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GRBReviewerComparison_userAccount(ctx context.Context, field graphql.CollectedField, obj *models.GRBReviewerComparison) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GRBReviewerComparison_userAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserAccount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GRBReviewerComparison_userAccount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GRBReviewerComparison",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GRBReviewerComparison_euaUserId(ctx context.Context, field graphql.CollectedField, obj *models.GRBReviewerComparison) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GRBReviewerComparison_euaUserId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EuaUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GRBReviewerComparison_euaUserId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GRBReviewerComparison",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GRBReviewerComparison_votingRole(ctx context.Context, field graphql.CollectedField, obj *models.GRBReviewerComparison) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GRBReviewerComparison_votingRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VotingRole, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SystemIntakeGRBReviewerVotingRole)
	fc.Result = res
	return ec.marshalNSystemIntakeGRBReviewerVotingRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewerVotingRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GRBReviewerComparison_votingRole(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GRBReviewerComparison",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeGRBReviewerVotingRole does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GRBReviewerComparison_grbRole(ctx context.Context, field graphql.CollectedField, obj *models.GRBReviewerComparison) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GRBReviewerComparison_grbRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrbRole, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SystemIntakeGRBReviewerRole)
	fc.Result = res
	return ec.marshalNSystemIntakeGRBReviewerRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewerRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GRBReviewerComparison_grbRole(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GRBReviewerComparison",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeGRBReviewerRole does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GRBReviewerComparison_isCurrentReviewer(ctx context.Context, field graphql.CollectedField, obj *models.GRBReviewerComparison) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GRBReviewerComparison_isCurrentReviewer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCurrentReviewer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GRBReviewerComparison_isCurrentReviewer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GRBReviewerComparison",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GRBReviewerComparisonIntake_id(ctx context.Context, field graphql.CollectedField, obj *models.GRBReviewerComparisonIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GRBReviewerComparisonIntake_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GRBReviewerComparisonIntake_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GRBReviewerComparisonIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GRBReviewerComparisonIntake_requestName(ctx context.Context, field graphql.CollectedField, obj *models.GRBReviewerComparisonIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GRBReviewerComparisonIntake_requestName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequestName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GRBReviewerComparisonIntake_requestName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GRBReviewerComparisonIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GRBReviewerComparisonIntake_reviewers(ctx context.Context, field graphql.CollectedField, obj *models.GRBReviewerComparisonIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GRBReviewerComparisonIntake_reviewers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reviewers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.GRBReviewerComparison)
	fc.Result = res
	return ec.marshalNGRBReviewerComparison2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGRBReviewerComparisonᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GRBReviewerComparisonIntake_reviewers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GRBReviewerComparisonIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GRBReviewerComparison_id(ctx, field)
			case "userAccount":
				return ec.fieldContext_GRBReviewerComparison_userAccount(ctx, field)
			case "euaUserId":
				return ec.fieldContext_GRBReviewerComparison_euaUserId(ctx, field)
			case "votingRole":
				return ec.fieldContext_GRBReviewerComparison_votingRole(ctx, field)
			case "grbRole":
				return ec.fieldContext_GRBReviewerComparison_grbRole(ctx, field)
			case "isCurrentReviewer":
				return ec.fieldContext_GRBReviewerComparison_isCurrentReviewer(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GRBReviewerComparison", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GRBReviewerComparisonIntake_intakeCreatedAt(ctx context.Context, field graphql.CollectedField, obj *models.GRBReviewerComparisonIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GRBReviewerComparisonIntake_intakeCreatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntakeCreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GRBReviewerComparisonIntake_intakeCreatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GRBReviewerComparisonIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GRBVotingInformation_grbReviewers(ctx context.Context, field graphql.CollectedField, obj *models.GRBVotingInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GRBVotingInformation_grbReviewers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GRBReviewers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.SystemIntakeGRBReviewer)
	fc.Result = res
	return ec.marshalNSystemIntakeGRBReviewer2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GRBVotingInformation_grbReviewers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GRBVotingInformation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SystemIntakeGRBReviewer_id(ctx, field)
			case "userAccount":
				return ec.fieldContext_SystemIntakeGRBReviewer_userAccount(ctx, field)
			case "systemIntakeID":
				return ec.fieldContext_SystemIntakeGRBReviewer_systemIntakeID(ctx, field)
			case "votingRole":
				return ec.fieldContext_SystemIntakeGRBReviewer_votingRole(ctx, field)
			case "vote":
				return ec.fieldContext_SystemIntakeGRBReviewer_vote(ctx, field)
			case "voteComment":
				return ec.fieldContext_SystemIntakeGRBReviewer_voteComment(ctx, field)
			case "dateVoted":
				return ec.fieldContext_SystemIntakeGRBReviewer_dateVoted(ctx, field)
			case "grbRole":
				return ec.fieldContext_SystemIntakeGRBReviewer_grbRole(ctx, field)
			case "createdBy":
				return ec.fieldContext_SystemIntakeGRBReviewer_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntakeGRBReviewer_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_SystemIntakeGRBReviewer_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_SystemIntakeGRBReviewer_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeGRBReviewer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GRBVotingInformation_votingStatus(ctx context.Context, field graphql.CollectedField, obj *models.GRBVotingInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GRBVotingInformation_votingStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VotingStatus(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.GRBVotingInformationStatus)
	fc.Result = res
	return ec.marshalNGRBVotingInformationStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGRBVotingInformationStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GRBVotingInformation_votingStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GRBVotingInformation",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type GRBVotingInformationStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GRBVotingInformation_numberOfNoObjection(ctx context.Context, field graphql.CollectedField, obj *models.GRBVotingInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GRBVotingInformation_numberOfNoObjection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfNoObjection(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GRBVotingInformation_numberOfNoObjection(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GRBVotingInformation",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GRBVotingInformation_numberOfObjection(ctx context.Context, field graphql.CollectedField, obj *models.GRBVotingInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GRBVotingInformation_numberOfObjection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfObjection(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GRBVotingInformation_numberOfObjection(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GRBVotingInformation",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GRBVotingInformation_numberOfNotVoted(ctx context.Context, field graphql.CollectedField, obj *models.GRBVotingInformation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GRBVotingInformation_numberOfNotVoted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfNotVoted(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GRBVotingInformation_numberOfNotVoted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GRBVotingInformation",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GovernanceRequestFeedback_id(ctx context.Context, field graphql.CollectedField, obj *models.GovernanceRequestFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GovernanceRequestFeedback_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GovernanceRequestFeedback_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GovernanceRequestFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GovernanceRequestFeedback_intakeId(ctx context.Context, field graphql.CollectedField, obj *models.GovernanceRequestFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GovernanceRequestFeedback_intakeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntakeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GovernanceRequestFeedback_intakeId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GovernanceRequestFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GovernanceRequestFeedback_feedback(ctx context.Context, field graphql.CollectedField, obj *models.GovernanceRequestFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GovernanceRequestFeedback_feedback(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Feedback, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.HTML)
	fc.Result = res
	return ec.marshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GovernanceRequestFeedback_feedback(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GovernanceRequestFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GovernanceRequestFeedback_sourceAction(ctx context.Context, field graphql.CollectedField, obj *models.GovernanceRequestFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GovernanceRequestFeedback_sourceAction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceAction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.GovernanceRequestFeedbackSourceAction)
	fc.Result = res
	return ec.marshalNGovernanceRequestFeedbackSourceAction2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGovernanceRequestFeedbackSourceAction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GovernanceRequestFeedback_sourceAction(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GovernanceRequestFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type GovernanceRequestFeedbackSourceAction does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GovernanceRequestFeedback_targetForm(ctx context.Context, field graphql.CollectedField, obj *models.GovernanceRequestFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GovernanceRequestFeedback_targetForm(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetForm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.GovernanceRequestFeedbackTargetForm)
	fc.Result = res
	return ec.marshalNGovernanceRequestFeedbackTargetForm2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGovernanceRequestFeedbackTargetForm(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GovernanceRequestFeedback_targetForm(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GovernanceRequestFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type GovernanceRequestFeedbackTargetForm does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GovernanceRequestFeedback_type(ctx context.Context, field graphql.CollectedField, obj *models.GovernanceRequestFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GovernanceRequestFeedback_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.GovernanceRequestFeedbackType)
	fc.Result = res
	return ec.marshalNGovernanceRequestFeedbackType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGovernanceRequestFeedbackType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GovernanceRequestFeedback_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GovernanceRequestFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type GovernanceRequestFeedbackType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GovernanceRequestFeedback_author(ctx context.Context, field graphql.CollectedField, obj *models.GovernanceRequestFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GovernanceRequestFeedback_author(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GovernanceRequestFeedback().Author(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UserInfo)
	fc.Result = res
	return ec.marshalOUserInfo2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUserInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GovernanceRequestFeedback_author(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GovernanceRequestFeedback",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstName":
				return ec.fieldContext_UserInfo_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_UserInfo_lastName(ctx, field)
			case "commonName":
				return ec.fieldContext_UserInfo_commonName(ctx, field)
			case "email":
				return ec.fieldContext_UserInfo_email(ctx, field)
			case "euaUserId":
				return ec.fieldContext_UserInfo_euaUserId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GovernanceRequestFeedback_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.GovernanceRequestFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GovernanceRequestFeedback_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GovernanceRequestFeedback_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GovernanceRequestFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GovernanceRequestFeedback_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.GovernanceRequestFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GovernanceRequestFeedback_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GovernanceRequestFeedback_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GovernanceRequestFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GovernanceRequestFeedback_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.GovernanceRequestFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GovernanceRequestFeedback_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GovernanceRequestFeedback_modifiedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GovernanceRequestFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GovernanceRequestFeedback_modifiedAt(ctx context.Context, field graphql.CollectedField, obj *models.GovernanceRequestFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GovernanceRequestFeedback_modifiedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GovernanceRequestFeedback_modifiedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GovernanceRequestFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ITGovTaskStatuses_intakeFormStatus(ctx context.Context, field graphql.CollectedField, obj *models.ITGovTaskStatuses) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ITGovTaskStatuses_intakeFormStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ITGovTaskStatuses().IntakeFormStatus(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.ITGovIntakeFormStatus)
	fc.Result = res
	return ec.marshalNITGovIntakeFormStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovIntakeFormStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ITGovTaskStatuses_intakeFormStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ITGovTaskStatuses",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ITGovIntakeFormStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ITGovTaskStatuses_feedbackFromInitialReviewStatus(ctx context.Context, field graphql.CollectedField, obj *models.ITGovTaskStatuses) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ITGovTaskStatuses_feedbackFromInitialReviewStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ITGovTaskStatuses().FeedbackFromInitialReviewStatus(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.ITGovFeedbackStatus)
	fc.Result = res
	return ec.marshalNITGovFeedbackStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovFeedbackStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ITGovTaskStatuses_feedbackFromInitialReviewStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ITGovTaskStatuses",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ITGovFeedbackStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ITGovTaskStatuses_bizCaseDraftStatus(ctx context.Context, field graphql.CollectedField, obj *models.ITGovTaskStatuses) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ITGovTaskStatuses_bizCaseDraftStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ITGovTaskStatuses().BizCaseDraftStatus(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.ITGovDraftBusinessCaseStatus)
	fc.Result = res
	return ec.marshalNITGovDraftBusinessCaseStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovDraftBusinessCaseStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ITGovTaskStatuses_bizCaseDraftStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ITGovTaskStatuses",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ITGovDraftBusinessCaseStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ITGovTaskStatuses_grtMeetingStatus(ctx context.Context, field graphql.CollectedField, obj *models.ITGovTaskStatuses) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ITGovTaskStatuses_grtMeetingStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ITGovTaskStatuses().GrtMeetingStatus(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.ITGovGRTStatus)
	fc.Result = res
	return ec.marshalNITGovGRTStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovGRTStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ITGovTaskStatuses_grtMeetingStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ITGovTaskStatuses",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ITGovGRTStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ITGovTaskStatuses_bizCaseFinalStatus(ctx context.Context, field graphql.CollectedField, obj *models.ITGovTaskStatuses) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ITGovTaskStatuses_bizCaseFinalStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ITGovTaskStatuses().BizCaseFinalStatus(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.ITGovFinalBusinessCaseStatus)
	fc.Result = res
	return ec.marshalNITGovFinalBusinessCaseStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovFinalBusinessCaseStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ITGovTaskStatuses_bizCaseFinalStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ITGovTaskStatuses",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ITGovFinalBusinessCaseStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ITGovTaskStatuses_grbMeetingStatus(ctx context.Context, field graphql.CollectedField, obj *models.ITGovTaskStatuses) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ITGovTaskStatuses_grbMeetingStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ITGovTaskStatuses().GrbMeetingStatus(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.ITGovGRBStatus)
	fc.Result = res
	return ec.marshalNITGovGRBStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovGRBStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ITGovTaskStatuses_grbMeetingStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ITGovTaskStatuses",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ITGovGRBStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ITGovTaskStatuses_decisionAndNextStepsStatus(ctx context.Context, field graphql.CollectedField, obj *models.ITGovTaskStatuses) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ITGovTaskStatuses_decisionAndNextStepsStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ITGovTaskStatuses().DecisionAndNextStepsStatus(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.ITGovDecisionStatus)
	fc.Result = res
	return ec.marshalNITGovDecisionStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovDecisionStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ITGovTaskStatuses_decisionAndNextStepsStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ITGovTaskStatuses",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ITGovDecisionStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LaunchDarklySettings_userKey(ctx context.Context, field graphql.CollectedField, obj *models.LaunchDarklySettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LaunchDarklySettings_userKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LaunchDarklySettings_userKey(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LaunchDarklySettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LaunchDarklySettings_signedHash(ctx context.Context, field graphql.CollectedField, obj *models.LaunchDarklySettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LaunchDarklySettings_signedHash(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignedHash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LaunchDarklySettings_signedHash(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LaunchDarklySettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSystemIntakeActionProgressToNewStep(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSystemIntakeActionProgressToNewStep(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateSystemIntakeActionProgressToNewStep(rctx, fc.Args["input"].(models.SystemIntakeProgressToNewStepsInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_GOVTEAM")
			if err != nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.UpdateSystemIntakePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.UpdateSystemIntakePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSystemIntakeActionProgressToNewStep(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSystemIntakeActionProgressToNewStep_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSystemIntakeActionRequestEdits(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSystemIntakeActionRequestEdits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateSystemIntakeActionRequestEdits(rctx, fc.Args["input"].(models.SystemIntakeRequestEditsInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_GOVTEAM")
			if err != nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.UpdateSystemIntakePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.UpdateSystemIntakePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSystemIntakeActionRequestEdits(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSystemIntakeActionRequestEdits_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSystemIntakeActionExpireLCID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSystemIntakeActionExpireLCID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateSystemIntakeActionExpireLcid(rctx, fc.Args["input"].(models.SystemIntakeExpireLCIDInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_GOVTEAM")
			if err != nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.UpdateSystemIntakePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.UpdateSystemIntakePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSystemIntakeActionExpireLCID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSystemIntakeActionExpireLCID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSystemIntakeActionUpdateLCID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSystemIntakeActionUpdateLCID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateSystemIntakeActionUpdateLcid(rctx, fc.Args["input"].(models.SystemIntakeUpdateLCIDInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_GOVTEAM")
			if err != nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.UpdateSystemIntakePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.UpdateSystemIntakePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSystemIntakeActionUpdateLCID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSystemIntakeActionUpdateLCID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSystemIntakeActionRetireLCID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSystemIntakeActionRetireLCID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateSystemIntakeActionRetireLcid(rctx, fc.Args["input"].(models.SystemIntakeRetireLCIDInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_GOVTEAM")
			if err != nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.UpdateSystemIntakePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.UpdateSystemIntakePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSystemIntakeActionRetireLCID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSystemIntakeActionRetireLCID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSystemIntakeActionUnretireLCID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSystemIntakeActionUnretireLCID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateSystemIntakeActionUnretireLcid(rctx, fc.Args["input"].(models.SystemIntakeUnretireLCIDInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_GOVTEAM")
			if err != nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.UpdateSystemIntakePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.UpdateSystemIntakePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSystemIntakeActionUnretireLCID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSystemIntakeActionUnretireLCID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSystemIntakeActionChangeLCIDRetirementDate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSystemIntakeActionChangeLCIDRetirementDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateSystemIntakeActionChangeLCIDRetirementDate(rctx, fc.Args["input"].(models.SystemIntakeChangeLCIDRetirementDateInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_GOVTEAM")
			if err != nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.UpdateSystemIntakePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.UpdateSystemIntakePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSystemIntakeActionChangeLCIDRetirementDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSystemIntakeActionChangeLCIDRetirementDate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSystemIntakeActionConfirmLCID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSystemIntakeActionConfirmLCID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateSystemIntakeActionConfirmLcid(rctx, fc.Args["input"].(models.SystemIntakeConfirmLCIDInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_GOVTEAM")
			if err != nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.UpdateSystemIntakePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.UpdateSystemIntakePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSystemIntakeActionConfirmLCID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSystemIntakeActionConfirmLCID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSystemIntakeActionIssueLCID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSystemIntakeActionIssueLCID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateSystemIntakeActionIssueLcid(rctx, fc.Args["input"].(models.SystemIntakeIssueLCIDInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_GOVTEAM")
			if err != nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.UpdateSystemIntakePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.UpdateSystemIntakePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSystemIntakeActionIssueLCID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSystemIntakeActionIssueLCID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSystemIntakeActionRejectIntake(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSystemIntakeActionRejectIntake(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateSystemIntakeActionRejectIntake(rctx, fc.Args["input"].(models.SystemIntakeRejectIntakeInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_GOVTEAM")
			if err != nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.UpdateSystemIntakePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.UpdateSystemIntakePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSystemIntakeActionRejectIntake(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSystemIntakeActionRejectIntake_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSystemIntakeActionReopenRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSystemIntakeActionReopenRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateSystemIntakeActionReopenRequest(rctx, fc.Args["input"].(models.SystemIntakeReopenRequestInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_GOVTEAM")
			if err != nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.UpdateSystemIntakePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.UpdateSystemIntakePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSystemIntakeActionReopenRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSystemIntakeActionReopenRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSystemIntakeActionCloseRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSystemIntakeActionCloseRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateSystemIntakeActionCloseRequest(rctx, fc.Args["input"].(models.SystemIntakeCloseRequestInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_GOVTEAM")
			if err != nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.UpdateSystemIntakePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.UpdateSystemIntakePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSystemIntakeActionCloseRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSystemIntakeActionCloseRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSystemIntakeActionNotITGovRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSystemIntakeActionNotITGovRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateSystemIntakeActionNotITGovRequest(rctx, fc.Args["input"].(models.SystemIntakeNotITGovReqInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_GOVTEAM")
			if err != nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.UpdateSystemIntakePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.UpdateSystemIntakePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSystemIntakeActionNotITGovRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSystemIntakeActionNotITGovRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSystemIntakeNote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSystemIntakeNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateSystemIntakeNote(rctx, fc.Args["input"].(models.CreateSystemIntakeNoteInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_GOVTEAM")
			if err != nil {
				var zeroVal *models.SystemIntakeNote
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.SystemIntakeNote
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.SystemIntakeNote); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.SystemIntakeNote`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeNote)
	fc.Result = res
	return ec.marshalOSystemIntakeNote2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeNote(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSystemIntakeNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "author":
				return ec.fieldContext_SystemIntakeNote_author(ctx, field)
			case "content":
				return ec.fieldContext_SystemIntakeNote_content(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntakeNote_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_SystemIntakeNote_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_SystemIntakeNote_modifiedAt(ctx, field)
			case "isArchived":
				return ec.fieldContext_SystemIntakeNote_isArchived(ctx, field)
			case "editor":
				return ec.fieldContext_SystemIntakeNote_editor(ctx, field)
			case "id":
				return ec.fieldContext_SystemIntakeNote_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeNote", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSystemIntakeNote_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSystemIntakeNote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSystemIntakeNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateSystemIntakeNote(rctx, fc.Args["input"].(models.UpdateSystemIntakeNoteInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_GOVTEAM")
			if err != nil {
				var zeroVal *models.SystemIntakeNote
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.SystemIntakeNote
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.SystemIntakeNote); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.SystemIntakeNote`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeNote)
	fc.Result = res
	return ec.marshalNSystemIntakeNote2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeNote(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSystemIntakeNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "author":
				return ec.fieldContext_SystemIntakeNote_author(ctx, field)
			case "content":
				return ec.fieldContext_SystemIntakeNote_content(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntakeNote_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_SystemIntakeNote_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_SystemIntakeNote_modifiedAt(ctx, field)
			case "isArchived":
				return ec.fieldContext_SystemIntakeNote_isArchived(ctx, field)
			case "editor":
				return ec.fieldContext_SystemIntakeNote_editor(ctx, field)
			case "id":
				return ec.fieldContext_SystemIntakeNote_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeNote", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSystemIntakeNote_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSystemIntake(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSystemIntake(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateSystemIntake(rctx, fc.Args["input"].(models.CreateSystemIntakeInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_USER")
			if err != nil {
				var zeroVal *models.SystemIntake
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.SystemIntake
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.SystemIntake); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.SystemIntake`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntake)
	fc.Result = res
	return ec.marshalOSystemIntake2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntake(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSystemIntake(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "actions":
				return ec.fieldContext_SystemIntake_actions(ctx, field)
			case "adminLead":
				return ec.fieldContext_SystemIntake_adminLead(ctx, field)
			case "archivedAt":
				return ec.fieldContext_SystemIntake_archivedAt(ctx, field)
			case "businessCase":
				return ec.fieldContext_SystemIntake_businessCase(ctx, field)
			case "businessNeed":
				return ec.fieldContext_SystemIntake_businessNeed(ctx, field)
			case "businessOwner":
				return ec.fieldContext_SystemIntake_businessOwner(ctx, field)
			case "businessSolution":
				return ec.fieldContext_SystemIntake_businessSolution(ctx, field)
			case "contract":
				return ec.fieldContext_SystemIntake_contract(ctx, field)
			case "costs":
				return ec.fieldContext_SystemIntake_costs(ctx, field)
			case "annualSpending":
				return ec.fieldContext_SystemIntake_annualSpending(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntake_createdAt(ctx, field)
			case "currentStage":
				return ec.fieldContext_SystemIntake_currentStage(ctx, field)
			case "decisionNextSteps":
				return ec.fieldContext_SystemIntake_decisionNextSteps(ctx, field)
			case "eaCollaborator":
				return ec.fieldContext_SystemIntake_eaCollaborator(ctx, field)
			case "eaCollaboratorName":
				return ec.fieldContext_SystemIntake_eaCollaboratorName(ctx, field)
			case "euaUserId":
				return ec.fieldContext_SystemIntake_euaUserId(ctx, field)
			case "existingFunding":
				return ec.fieldContext_SystemIntake_existingFunding(ctx, field)
			case "fundingSources":
				return ec.fieldContext_SystemIntake_fundingSources(ctx, field)
			case "governanceRequestFeedbacks":
				return ec.fieldContext_SystemIntake_governanceRequestFeedbacks(ctx, field)
			case "governanceTeams":
				return ec.fieldContext_SystemIntake_governanceTeams(ctx, field)
			case "grbDate":
				return ec.fieldContext_SystemIntake_grbDate(ctx, field)
			case "grtDate":
				return ec.fieldContext_SystemIntake_grtDate(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_SystemIntake_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_SystemIntake_nextMeetingDate(ctx, field)
			case "grbReviewStartedAt":
				return ec.fieldContext_SystemIntake_grbReviewStartedAt(ctx, field)
			case "grbReviewers":
				return ec.fieldContext_SystemIntake_grbReviewers(ctx, field)
			case "grbVotingInformation":
				return ec.fieldContext_SystemIntake_grbVotingInformation(ctx, field)
			case "id":
				return ec.fieldContext_SystemIntake_id(ctx, field)
			case "isso":
				return ec.fieldContext_SystemIntake_isso(ctx, field)
			case "lcid":
				return ec.fieldContext_SystemIntake_lcid(ctx, field)
			case "lcidIssuedAt":
				return ec.fieldContext_SystemIntake_lcidIssuedAt(ctx, field)
			case "lcidExpiresAt":
				return ec.fieldContext_SystemIntake_lcidExpiresAt(ctx, field)
			case "lcidScope":
				return ec.fieldContext_SystemIntake_lcidScope(ctx, field)
			case "lcidCostBaseline":
				return ec.fieldContext_SystemIntake_lcidCostBaseline(ctx, field)
			case "lcidRetiresAt":
				return ec.fieldContext_SystemIntake_lcidRetiresAt(ctx, field)
			case "needsEaSupport":
				return ec.fieldContext_SystemIntake_needsEaSupport(ctx, field)
			case "usingSoftware":
				return ec.fieldContext_SystemIntake_usingSoftware(ctx, field)
			case "acquisitionMethods":
				return ec.fieldContext_SystemIntake_acquisitionMethods(ctx, field)
			case "notes":
				return ec.fieldContext_SystemIntake_notes(ctx, field)
			case "oitSecurityCollaborator":
				return ec.fieldContext_SystemIntake_oitSecurityCollaborator(ctx, field)
			case "oitSecurityCollaboratorName":
				return ec.fieldContext_SystemIntake_oitSecurityCollaboratorName(ctx, field)
			case "productManager":
				return ec.fieldContext_SystemIntake_productManager(ctx, field)
			case "projectAcronym":
				return ec.fieldContext_SystemIntake_projectAcronym(ctx, field)
			case "rejectionReason":
				return ec.fieldContext_SystemIntake_rejectionReason(ctx, field)
			case "requestName":
				return ec.fieldContext_SystemIntake_requestName(ctx, field)
			case "requestType":
				return ec.fieldContext_SystemIntake_requestType(ctx, field)
			case "requester":
				return ec.fieldContext_SystemIntake_requester(ctx, field)
			case "requesterName":
				return ec.fieldContext_SystemIntake_requesterName(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_SystemIntake_requesterComponent(ctx, field)
			case "state":
				return ec.fieldContext_SystemIntake_state(ctx, field)
			case "step":
				return ec.fieldContext_SystemIntake_step(ctx, field)
			case "submittedAt":
				return ec.fieldContext_SystemIntake_submittedAt(ctx, field)
			case "trbCollaborator":
				return ec.fieldContext_SystemIntake_trbCollaborator(ctx, field)
			case "trbCollaboratorName":
				return ec.fieldContext_SystemIntake_trbCollaboratorName(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SystemIntake_updatedAt(ctx, field)
			case "grtReviewEmailBody":
				return ec.fieldContext_SystemIntake_grtReviewEmailBody(ctx, field)
			case "decidedAt":
				return ec.fieldContext_SystemIntake_decidedAt(ctx, field)
			case "businessCaseId":
				return ec.fieldContext_SystemIntake_businessCaseId(ctx, field)
			case "cedarSystemId":
				return ec.fieldContext_SystemIntake_cedarSystemId(ctx, field)
			case "documents":
				return ec.fieldContext_SystemIntake_documents(ctx, field)
			case "hasUiChanges":
				return ec.fieldContext_SystemIntake_hasUiChanges(ctx, field)
			case "usesAiTech":
				return ec.fieldContext_SystemIntake_usesAiTech(ctx, field)
			case "itGovTaskStatuses":
				return ec.fieldContext_SystemIntake_itGovTaskStatuses(ctx, field)
			case "requestFormState":
				return ec.fieldContext_SystemIntake_requestFormState(ctx, field)
			case "draftBusinessCaseState":
				return ec.fieldContext_SystemIntake_draftBusinessCaseState(ctx, field)
			case "grtMeetingState":
				return ec.fieldContext_SystemIntake_grtMeetingState(ctx, field)
			case "finalBusinessCaseState":
				return ec.fieldContext_SystemIntake_finalBusinessCaseState(ctx, field)
			case "grbMeetingState":
				return ec.fieldContext_SystemIntake_grbMeetingState(ctx, field)
			case "decisionState":
				return ec.fieldContext_SystemIntake_decisionState(ctx, field)
			case "statusRequester":
				return ec.fieldContext_SystemIntake_statusRequester(ctx, field)
			case "statusAdmin":
				return ec.fieldContext_SystemIntake_statusAdmin(ctx, field)
			case "lcidStatus":
				return ec.fieldContext_SystemIntake_lcidStatus(ctx, field)
			case "trbFollowUpRecommendation":
				return ec.fieldContext_SystemIntake_trbFollowUpRecommendation(ctx, field)
			case "contractName":
				return ec.fieldContext_SystemIntake_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_SystemIntake_relationType(ctx, field)
			case "systems":
				return ec.fieldContext_SystemIntake_systems(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_SystemIntake_contractNumbers(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_SystemIntake_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_SystemIntake_relatedTRBRequests(ctx, field)
			case "grbDiscussions":
				return ec.fieldContext_SystemIntake_grbDiscussions(ctx, field)
			case "grbPresentationLinks":
				return ec.fieldContext_SystemIntake_grbPresentationLinks(ctx, field)
			case "grbPresentationDeckRequesterReminderEmailSentTime":
				return ec.fieldContext_SystemIntake_grbPresentationDeckRequesterReminderEmailSentTime(ctx, field)
			case "grbReviewType":
				return ec.fieldContext_SystemIntake_grbReviewType(ctx, field)
			case "grbReviewAsyncRecordingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncRecordingTime(ctx, field)
			case "grbReviewAsyncEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncEndDate(ctx, field)
			case "grbReviewAsyncGRBMeetingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncGRBMeetingTime(ctx, field)
			case "grbReviewAsyncStatus":
				return ec.fieldContext_SystemIntake_grbReviewAsyncStatus(ctx, field)
			case "grbReviewAsyncManualEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncManualEndDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntake", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSystemIntake_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSystemIntakeRequestType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSystemIntakeRequestType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateSystemIntakeRequestType(rctx, fc.Args["id"].(uuid.UUID), fc.Args["newType"].(models.SystemIntakeRequestType))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_USER")
			if err != nil {
				var zeroVal *models.SystemIntake
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.SystemIntake
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.SystemIntake); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.SystemIntake`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntake)
	fc.Result = res
	return ec.marshalNSystemIntake2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntake(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSystemIntakeRequestType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "actions":
				return ec.fieldContext_SystemIntake_actions(ctx, field)
			case "adminLead":
				return ec.fieldContext_SystemIntake_adminLead(ctx, field)
			case "archivedAt":
				return ec.fieldContext_SystemIntake_archivedAt(ctx, field)
			case "businessCase":
				return ec.fieldContext_SystemIntake_businessCase(ctx, field)
			case "businessNeed":
				return ec.fieldContext_SystemIntake_businessNeed(ctx, field)
			case "businessOwner":
				return ec.fieldContext_SystemIntake_businessOwner(ctx, field)
			case "businessSolution":
				return ec.fieldContext_SystemIntake_businessSolution(ctx, field)
			case "contract":
				return ec.fieldContext_SystemIntake_contract(ctx, field)
			case "costs":
				return ec.fieldContext_SystemIntake_costs(ctx, field)
			case "annualSpending":
				return ec.fieldContext_SystemIntake_annualSpending(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntake_createdAt(ctx, field)
			case "currentStage":
				return ec.fieldContext_SystemIntake_currentStage(ctx, field)
			case "decisionNextSteps":
				return ec.fieldContext_SystemIntake_decisionNextSteps(ctx, field)
			case "eaCollaborator":
				return ec.fieldContext_SystemIntake_eaCollaborator(ctx, field)
			case "eaCollaboratorName":
				return ec.fieldContext_SystemIntake_eaCollaboratorName(ctx, field)
			case "euaUserId":
				return ec.fieldContext_SystemIntake_euaUserId(ctx, field)
			case "existingFunding":
				return ec.fieldContext_SystemIntake_existingFunding(ctx, field)
			case "fundingSources":
				return ec.fieldContext_SystemIntake_fundingSources(ctx, field)
			case "governanceRequestFeedbacks":
				return ec.fieldContext_SystemIntake_governanceRequestFeedbacks(ctx, field)
			case "governanceTeams":
				return ec.fieldContext_SystemIntake_governanceTeams(ctx, field)
			case "grbDate":
				return ec.fieldContext_SystemIntake_grbDate(ctx, field)
			case "grtDate":
				return ec.fieldContext_SystemIntake_grtDate(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_SystemIntake_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_SystemIntake_nextMeetingDate(ctx, field)
			case "grbReviewStartedAt":
				return ec.fieldContext_SystemIntake_grbReviewStartedAt(ctx, field)
			case "grbReviewers":
				return ec.fieldContext_SystemIntake_grbReviewers(ctx, field)
			case "grbVotingInformation":
				return ec.fieldContext_SystemIntake_grbVotingInformation(ctx, field)
			case "id":
				return ec.fieldContext_SystemIntake_id(ctx, field)
			case "isso":
				return ec.fieldContext_SystemIntake_isso(ctx, field)
			case "lcid":
				return ec.fieldContext_SystemIntake_lcid(ctx, field)
			case "lcidIssuedAt":
				return ec.fieldContext_SystemIntake_lcidIssuedAt(ctx, field)
			case "lcidExpiresAt":
				return ec.fieldContext_SystemIntake_lcidExpiresAt(ctx, field)
			case "lcidScope":
				return ec.fieldContext_SystemIntake_lcidScope(ctx, field)
			case "lcidCostBaseline":
				return ec.fieldContext_SystemIntake_lcidCostBaseline(ctx, field)
			case "lcidRetiresAt":
				return ec.fieldContext_SystemIntake_lcidRetiresAt(ctx, field)
			case "needsEaSupport":
				return ec.fieldContext_SystemIntake_needsEaSupport(ctx, field)
			case "usingSoftware":
				return ec.fieldContext_SystemIntake_usingSoftware(ctx, field)
			case "acquisitionMethods":
				return ec.fieldContext_SystemIntake_acquisitionMethods(ctx, field)
			case "notes":
				return ec.fieldContext_SystemIntake_notes(ctx, field)
			case "oitSecurityCollaborator":
				return ec.fieldContext_SystemIntake_oitSecurityCollaborator(ctx, field)
			case "oitSecurityCollaboratorName":
				return ec.fieldContext_SystemIntake_oitSecurityCollaboratorName(ctx, field)
			case "productManager":
				return ec.fieldContext_SystemIntake_productManager(ctx, field)
			case "projectAcronym":
				return ec.fieldContext_SystemIntake_projectAcronym(ctx, field)
			case "rejectionReason":
				return ec.fieldContext_SystemIntake_rejectionReason(ctx, field)
			case "requestName":
				return ec.fieldContext_SystemIntake_requestName(ctx, field)
			case "requestType":
				return ec.fieldContext_SystemIntake_requestType(ctx, field)
			case "requester":
				return ec.fieldContext_SystemIntake_requester(ctx, field)
			case "requesterName":
				return ec.fieldContext_SystemIntake_requesterName(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_SystemIntake_requesterComponent(ctx, field)
			case "state":
				return ec.fieldContext_SystemIntake_state(ctx, field)
			case "step":
				return ec.fieldContext_SystemIntake_step(ctx, field)
			case "submittedAt":
				return ec.fieldContext_SystemIntake_submittedAt(ctx, field)
			case "trbCollaborator":
				return ec.fieldContext_SystemIntake_trbCollaborator(ctx, field)
			case "trbCollaboratorName":
				return ec.fieldContext_SystemIntake_trbCollaboratorName(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SystemIntake_updatedAt(ctx, field)
			case "grtReviewEmailBody":
				return ec.fieldContext_SystemIntake_grtReviewEmailBody(ctx, field)
			case "decidedAt":
				return ec.fieldContext_SystemIntake_decidedAt(ctx, field)
			case "businessCaseId":
				return ec.fieldContext_SystemIntake_businessCaseId(ctx, field)
			case "cedarSystemId":
				return ec.fieldContext_SystemIntake_cedarSystemId(ctx, field)
			case "documents":
				return ec.fieldContext_SystemIntake_documents(ctx, field)
			case "hasUiChanges":
				return ec.fieldContext_SystemIntake_hasUiChanges(ctx, field)
			case "usesAiTech":
				return ec.fieldContext_SystemIntake_usesAiTech(ctx, field)
			case "itGovTaskStatuses":
				return ec.fieldContext_SystemIntake_itGovTaskStatuses(ctx, field)
			case "requestFormState":
				return ec.fieldContext_SystemIntake_requestFormState(ctx, field)
			case "draftBusinessCaseState":
				return ec.fieldContext_SystemIntake_draftBusinessCaseState(ctx, field)
			case "grtMeetingState":
				return ec.fieldContext_SystemIntake_grtMeetingState(ctx, field)
			case "finalBusinessCaseState":
				return ec.fieldContext_SystemIntake_finalBusinessCaseState(ctx, field)
			case "grbMeetingState":
				return ec.fieldContext_SystemIntake_grbMeetingState(ctx, field)
			case "decisionState":
				return ec.fieldContext_SystemIntake_decisionState(ctx, field)
			case "statusRequester":
				return ec.fieldContext_SystemIntake_statusRequester(ctx, field)
			case "statusAdmin":
				return ec.fieldContext_SystemIntake_statusAdmin(ctx, field)
			case "lcidStatus":
				return ec.fieldContext_SystemIntake_lcidStatus(ctx, field)
			case "trbFollowUpRecommendation":
				return ec.fieldContext_SystemIntake_trbFollowUpRecommendation(ctx, field)
			case "contractName":
				return ec.fieldContext_SystemIntake_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_SystemIntake_relationType(ctx, field)
			case "systems":
				return ec.fieldContext_SystemIntake_systems(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_SystemIntake_contractNumbers(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_SystemIntake_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_SystemIntake_relatedTRBRequests(ctx, field)
			case "grbDiscussions":
				return ec.fieldContext_SystemIntake_grbDiscussions(ctx, field)
			case "grbPresentationLinks":
				return ec.fieldContext_SystemIntake_grbPresentationLinks(ctx, field)
			case "grbPresentationDeckRequesterReminderEmailSentTime":
				return ec.fieldContext_SystemIntake_grbPresentationDeckRequesterReminderEmailSentTime(ctx, field)
			case "grbReviewType":
				return ec.fieldContext_SystemIntake_grbReviewType(ctx, field)
			case "grbReviewAsyncRecordingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncRecordingTime(ctx, field)
			case "grbReviewAsyncEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncEndDate(ctx, field)
			case "grbReviewAsyncGRBMeetingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncGRBMeetingTime(ctx, field)
			case "grbReviewAsyncStatus":
				return ec.fieldContext_SystemIntake_grbReviewAsyncStatus(ctx, field)
			case "grbReviewAsyncManualEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncManualEndDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntake", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSystemIntakeRequestType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_submitIntake(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_submitIntake(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SubmitIntake(rctx, fc.Args["input"].(models.SubmitIntakeInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_submitIntake(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_submitIntake_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSystemIntakeAdminLead(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSystemIntakeAdminLead(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateSystemIntakeAdminLead(rctx, fc.Args["input"].(models.UpdateSystemIntakeAdminLeadInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_GOVTEAM")
			if err != nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.UpdateSystemIntakePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.UpdateSystemIntakePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSystemIntakeAdminLead(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSystemIntakeAdminLead_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSystemIntakeReviewDates(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSystemIntakeReviewDates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateSystemIntakeReviewDates(rctx, fc.Args["input"].(models.UpdateSystemIntakeReviewDatesInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_GOVTEAM")
			if err != nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.UpdateSystemIntakePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.UpdateSystemIntakePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSystemIntakeReviewDates(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSystemIntakeReviewDates_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSystemIntakeContactDetails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSystemIntakeContactDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSystemIntakeContactDetails(rctx, fc.Args["input"].(models.UpdateSystemIntakeContactDetailsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSystemIntakeContactDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSystemIntakeContactDetails_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSystemIntakeRequestDetails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSystemIntakeRequestDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSystemIntakeRequestDetails(rctx, fc.Args["input"].(models.UpdateSystemIntakeRequestDetailsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSystemIntakeRequestDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSystemIntakeRequestDetails_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSystemIntakeContractDetails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSystemIntakeContractDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSystemIntakeContractDetails(rctx, fc.Args["input"].(models.UpdateSystemIntakeContractDetailsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSystemIntakeContractDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSystemIntakeContractDetails_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCedarSystemBookmark(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCedarSystemBookmark(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCedarSystemBookmark(rctx, fc.Args["input"].(models.CreateCedarSystemBookmarkInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CreateCedarSystemBookmarkPayload)
	fc.Result = res
	return ec.marshalOCreateCedarSystemBookmarkPayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateCedarSystemBookmarkPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCedarSystemBookmark(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cedarSystemBookmark":
				return ec.fieldContext_CreateCedarSystemBookmarkPayload_cedarSystemBookmark(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateCedarSystemBookmarkPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCedarSystemBookmark_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteCedarSystemBookmark(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteCedarSystemBookmark(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteCedarSystemBookmark(rctx, fc.Args["input"].(models.CreateCedarSystemBookmarkInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DeleteCedarSystemBookmarkPayload)
	fc.Result = res
	return ec.marshalODeleteCedarSystemBookmarkPayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐDeleteCedarSystemBookmarkPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteCedarSystemBookmark(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cedarSystemId":
				return ec.fieldContext_DeleteCedarSystemBookmarkPayload_cedarSystemId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteCedarSystemBookmarkPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteCedarSystemBookmark_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setSystemIntakeRelationNewSystem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setSystemIntakeRelationNewSystem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetSystemIntakeRelationNewSystem(rctx, fc.Args["input"].(*models.SetSystemIntakeRelationNewSystemInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setSystemIntakeRelationNewSystem(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setSystemIntakeRelationNewSystem_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setSystemIntakeRelationExistingSystem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setSystemIntakeRelationExistingSystem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetSystemIntakeRelationExistingSystem(rctx, fc.Args["input"].(*models.SetSystemIntakeRelationExistingSystemInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setSystemIntakeRelationExistingSystem(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setSystemIntakeRelationExistingSystem_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setSystemIntakeRelationExistingService(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setSystemIntakeRelationExistingService(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetSystemIntakeRelationExistingService(rctx, fc.Args["input"].(*models.SetSystemIntakeRelationExistingServiceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setSystemIntakeRelationExistingService(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setSystemIntakeRelationExistingService_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_unlinkSystemIntakeRelation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_unlinkSystemIntakeRelation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UnlinkSystemIntakeRelation(rctx, fc.Args["intakeID"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_unlinkSystemIntakeRelation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_unlinkSystemIntakeRelation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSystemIntakeContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSystemIntakeContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSystemIntakeContact(rctx, fc.Args["input"].(models.CreateSystemIntakeContactInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CreateSystemIntakeContactPayload)
	fc.Result = res
	return ec.marshalOCreateSystemIntakeContactPayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateSystemIntakeContactPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSystemIntakeContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntakeContact":
				return ec.fieldContext_CreateSystemIntakeContactPayload_systemIntakeContact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateSystemIntakeContactPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSystemIntakeContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSystemIntakeContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSystemIntakeContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSystemIntakeContact(rctx, fc.Args["input"].(models.UpdateSystemIntakeContactInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CreateSystemIntakeContactPayload)
	fc.Result = res
	return ec.marshalOCreateSystemIntakeContactPayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateSystemIntakeContactPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSystemIntakeContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntakeContact":
				return ec.fieldContext_CreateSystemIntakeContactPayload_systemIntakeContact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateSystemIntakeContactPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSystemIntakeContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteSystemIntakeContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteSystemIntakeContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSystemIntakeContact(rctx, fc.Args["input"].(models.DeleteSystemIntakeContactInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DeleteSystemIntakeContactPayload)
	fc.Result = res
	return ec.marshalODeleteSystemIntakeContactPayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐDeleteSystemIntakeContactPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteSystemIntakeContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntakeContact":
				return ec.fieldContext_DeleteSystemIntakeContactPayload_systemIntakeContact(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteSystemIntakeContactPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteSystemIntakeContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_startGRBReview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_startGRBReview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StartGRBReview(rctx, fc.Args["input"].(models.StartGRBReviewInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_startGRBReview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_startGRBReview_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSystemIntakeGRBReviewers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSystemIntakeGRBReviewers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSystemIntakeGRBReviewers(rctx, fc.Args["input"].(models.CreateSystemIntakeGRBReviewersInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CreateSystemIntakeGRBReviewersPayload)
	fc.Result = res
	return ec.marshalOCreateSystemIntakeGRBReviewersPayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateSystemIntakeGRBReviewersPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSystemIntakeGRBReviewers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "reviewers":
				return ec.fieldContext_CreateSystemIntakeGRBReviewersPayload_reviewers(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateSystemIntakeGRBReviewersPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSystemIntakeGRBReviewers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSystemIntakeGRBReviewer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSystemIntakeGRBReviewer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSystemIntakeGRBReviewer(rctx, fc.Args["input"].(models.UpdateSystemIntakeGRBReviewerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeGRBReviewer)
	fc.Result = res
	return ec.marshalNSystemIntakeGRBReviewer2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSystemIntakeGRBReviewer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SystemIntakeGRBReviewer_id(ctx, field)
			case "userAccount":
				return ec.fieldContext_SystemIntakeGRBReviewer_userAccount(ctx, field)
			case "systemIntakeID":
				return ec.fieldContext_SystemIntakeGRBReviewer_systemIntakeID(ctx, field)
			case "votingRole":
				return ec.fieldContext_SystemIntakeGRBReviewer_votingRole(ctx, field)
			case "vote":
				return ec.fieldContext_SystemIntakeGRBReviewer_vote(ctx, field)
			case "voteComment":
				return ec.fieldContext_SystemIntakeGRBReviewer_voteComment(ctx, field)
			case "dateVoted":
				return ec.fieldContext_SystemIntakeGRBReviewer_dateVoted(ctx, field)
			case "grbRole":
				return ec.fieldContext_SystemIntakeGRBReviewer_grbRole(ctx, field)
			case "createdBy":
				return ec.fieldContext_SystemIntakeGRBReviewer_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntakeGRBReviewer_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_SystemIntakeGRBReviewer_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_SystemIntakeGRBReviewer_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeGRBReviewer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSystemIntakeGRBReviewer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteSystemIntakeGRBReviewer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteSystemIntakeGRBReviewer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSystemIntakeGRBReviewer(rctx, fc.Args["input"].(models.DeleteSystemIntakeGRBReviewerInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteSystemIntakeGRBReviewer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteSystemIntakeGRBReviewer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_castSystemIntakeGRBReviewerVote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_castSystemIntakeGRBReviewerVote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CastSystemIntakeGRBReviewerVote(rctx, fc.Args["input"].(models.CastSystemIntakeGRBReviewerVoteInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeGRBReviewer)
	fc.Result = res
	return ec.marshalNSystemIntakeGRBReviewer2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_castSystemIntakeGRBReviewerVote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SystemIntakeGRBReviewer_id(ctx, field)
			case "userAccount":
				return ec.fieldContext_SystemIntakeGRBReviewer_userAccount(ctx, field)
			case "systemIntakeID":
				return ec.fieldContext_SystemIntakeGRBReviewer_systemIntakeID(ctx, field)
			case "votingRole":
				return ec.fieldContext_SystemIntakeGRBReviewer_votingRole(ctx, field)
			case "vote":
				return ec.fieldContext_SystemIntakeGRBReviewer_vote(ctx, field)
			case "voteComment":
				return ec.fieldContext_SystemIntakeGRBReviewer_voteComment(ctx, field)
			case "dateVoted":
				return ec.fieldContext_SystemIntakeGRBReviewer_dateVoted(ctx, field)
			case "grbRole":
				return ec.fieldContext_SystemIntakeGRBReviewer_grbRole(ctx, field)
			case "createdBy":
				return ec.fieldContext_SystemIntakeGRBReviewer_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntakeGRBReviewer_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_SystemIntakeGRBReviewer_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_SystemIntakeGRBReviewer_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeGRBReviewer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_castSystemIntakeGRBReviewerVote_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSystemIntakeGRBDiscussionPost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSystemIntakeGRBDiscussionPost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSystemIntakeGRBDiscussionPost(rctx, fc.Args["input"].(models.CreateSystemIntakeGRBDiscussionPostInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeGRBReviewDiscussionPost)
	fc.Result = res
	return ec.marshalOSystemIntakeGRBReviewDiscussionPost2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewDiscussionPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSystemIntakeGRBDiscussionPost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_id(ctx, field)
			case "content":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_content(ctx, field)
			case "votingRole":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_votingRole(ctx, field)
			case "grbRole":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_grbRole(ctx, field)
			case "systemIntakeID":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_systemIntakeID(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_createdByUserAccount(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_createdAt(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_modifiedByUserAccount(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeGRBReviewDiscussionPost", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSystemIntakeGRBDiscussionPost_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSystemIntakeGRBDiscussionReply(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSystemIntakeGRBDiscussionReply(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSystemIntakeGRBDiscussionReply(rctx, fc.Args["input"].(models.CreateSystemIntakeGRBDiscussionReplyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeGRBReviewDiscussionPost)
	fc.Result = res
	return ec.marshalOSystemIntakeGRBReviewDiscussionPost2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewDiscussionPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSystemIntakeGRBDiscussionReply(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_id(ctx, field)
			case "content":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_content(ctx, field)
			case "votingRole":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_votingRole(ctx, field)
			case "grbRole":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_grbRole(ctx, field)
			case "systemIntakeID":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_systemIntakeID(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_createdByUserAccount(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_createdAt(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_modifiedByUserAccount(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeGRBReviewDiscussionPost", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSystemIntakeGRBDiscussionReply_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSystemIntakeGRBReviewType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSystemIntakeGRBReviewType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateSystemIntakeGRBReviewType(rctx, fc.Args["input"].(models.UpdateSystemIntakeGRBReviewTypeInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_GOVTEAM")
			if err != nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.UpdateSystemIntakePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.UpdateSystemIntakePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSystemIntakeGRBReviewType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSystemIntakeGRBReviewType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSystemIntakeGRBReviewFormPresentationStandard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSystemIntakeGRBReviewFormPresentationStandard(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateSystemIntakeGRBReviewFormPresentationStandard(rctx, fc.Args["input"].(models.UpdateSystemIntakeGRBReviewFormInputPresentationStandard))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_GOVTEAM")
			if err != nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.UpdateSystemIntakePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.UpdateSystemIntakePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSystemIntakeGRBReviewFormPresentationStandard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSystemIntakeGRBReviewFormPresentationStandard_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSystemIntakeGRBReviewFormPresentationAsync(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSystemIntakeGRBReviewFormPresentationAsync(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateSystemIntakeGRBReviewFormPresentationAsync(rctx, fc.Args["input"].(models.UpdateSystemIntakeGRBReviewFormInputPresentationAsync))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_GOVTEAM")
			if err != nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.UpdateSystemIntakePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.UpdateSystemIntakePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSystemIntakeGRBReviewFormPresentationAsync(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSystemIntakeGRBReviewFormPresentationAsync_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSystemIntakeGRBReviewFormTimeframeAsync(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSystemIntakeGRBReviewFormTimeframeAsync(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateSystemIntakeGRBReviewFormTimeframeAsync(rctx, fc.Args["input"].(models.UpdateSystemIntakeGRBReviewFormInputTimeframeAsync))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_GOVTEAM")
			if err != nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.UpdateSystemIntakePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.UpdateSystemIntakePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSystemIntakeGRBReviewFormTimeframeAsync(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSystemIntakeGRBReviewFormTimeframeAsync_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSystemIntakeLinkedCedarSystem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateSystemIntakeLinkedCedarSystem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSystemIntakeLinkedCedarSystem(rctx, fc.Args["input"].(models.UpdateSystemIntakeLinkedCedarSystemInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateSystemIntakeLinkedCedarSystem(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSystemIntakeLinkedCedarSystem_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setSystemIntakeGRBPresentationLinks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setSystemIntakeGRBPresentationLinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetSystemIntakeGRBPresentationLinks(rctx, fc.Args["input"].(models.SystemIntakeGRBPresentationLinksInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeGRBPresentationLinks)
	fc.Result = res
	return ec.marshalOSystemIntakeGRBPresentationLinks2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBPresentationLinks(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setSystemIntakeGRBPresentationLinks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntakeID":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_systemIntakeID(ctx, field)
			case "createdBy":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_modifiedAt(ctx, field)
			case "recordingLink":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_recordingLink(ctx, field)
			case "recordingPasscode":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_recordingPasscode(ctx, field)
			case "transcriptLink":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_transcriptLink(ctx, field)
			case "transcriptFileName":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_transcriptFileName(ctx, field)
			case "transcriptFileURL":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_transcriptFileURL(ctx, field)
			case "transcriptFileStatus":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_transcriptFileStatus(ctx, field)
			case "presentationDeckFileName":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_presentationDeckFileName(ctx, field)
			case "presentationDeckFileURL":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_presentationDeckFileURL(ctx, field)
			case "presentationDeckFileStatus":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_presentationDeckFileStatus(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeGRBPresentationLinks", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setSystemIntakeGRBPresentationLinks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_uploadSystemIntakeGRBPresentationDeck(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_uploadSystemIntakeGRBPresentationDeck(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UploadSystemIntakeGRBPresentationDeck(rctx, fc.Args["input"].(models.UploadSystemIntakeGRBPresentationDeckInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeGRBPresentationLinks)
	fc.Result = res
	return ec.marshalOSystemIntakeGRBPresentationLinks2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBPresentationLinks(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_uploadSystemIntakeGRBPresentationDeck(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntakeID":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_systemIntakeID(ctx, field)
			case "createdBy":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_modifiedAt(ctx, field)
			case "recordingLink":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_recordingLink(ctx, field)
			case "recordingPasscode":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_recordingPasscode(ctx, field)
			case "transcriptLink":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_transcriptLink(ctx, field)
			case "transcriptFileName":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_transcriptFileName(ctx, field)
			case "transcriptFileURL":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_transcriptFileURL(ctx, field)
			case "transcriptFileStatus":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_transcriptFileStatus(ctx, field)
			case "presentationDeckFileName":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_presentationDeckFileName(ctx, field)
			case "presentationDeckFileURL":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_presentationDeckFileURL(ctx, field)
			case "presentationDeckFileStatus":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_presentationDeckFileStatus(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeGRBPresentationLinks", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_uploadSystemIntakeGRBPresentationDeck_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteSystemIntakeGRBPresentationLinks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteSystemIntakeGRBPresentationLinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSystemIntakeGRBPresentationLinks(rctx, fc.Args["input"].(models.DeleteSystemIntakeGRBPresentationLinksInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteSystemIntakeGRBPresentationLinks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteSystemIntakeGRBPresentationLinks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_manuallyEndSystemIntakeGRBReviewAsyncVoting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_manuallyEndSystemIntakeGRBReviewAsyncVoting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ManuallyEndSystemIntakeGRBReviewAsyncVoting(rctx, fc.Args["systemIntakeID"].(uuid.UUID))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_GOVTEAM")
			if err != nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.UpdateSystemIntakePayload
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.UpdateSystemIntakePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.UpdateSystemIntakePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UpdateSystemIntakePayload)
	fc.Result = res
	return ec.marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_manuallyEndSystemIntakeGRBReviewAsyncVoting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntake":
				return ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
			case "userErrors":
				return ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateSystemIntakePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_manuallyEndSystemIntakeGRBReviewAsyncVoting_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_archiveSystemIntake(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_archiveSystemIntake(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ArchiveSystemIntake(rctx, fc.Args["id"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntake)
	fc.Result = res
	return ec.marshalNSystemIntake2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntake(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_archiveSystemIntake(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "actions":
				return ec.fieldContext_SystemIntake_actions(ctx, field)
			case "adminLead":
				return ec.fieldContext_SystemIntake_adminLead(ctx, field)
			case "archivedAt":
				return ec.fieldContext_SystemIntake_archivedAt(ctx, field)
			case "businessCase":
				return ec.fieldContext_SystemIntake_businessCase(ctx, field)
			case "businessNeed":
				return ec.fieldContext_SystemIntake_businessNeed(ctx, field)
			case "businessOwner":
				return ec.fieldContext_SystemIntake_businessOwner(ctx, field)
			case "businessSolution":
				return ec.fieldContext_SystemIntake_businessSolution(ctx, field)
			case "contract":
				return ec.fieldContext_SystemIntake_contract(ctx, field)
			case "costs":
				return ec.fieldContext_SystemIntake_costs(ctx, field)
			case "annualSpending":
				return ec.fieldContext_SystemIntake_annualSpending(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntake_createdAt(ctx, field)
			case "currentStage":
				return ec.fieldContext_SystemIntake_currentStage(ctx, field)
			case "decisionNextSteps":
				return ec.fieldContext_SystemIntake_decisionNextSteps(ctx, field)
			case "eaCollaborator":
				return ec.fieldContext_SystemIntake_eaCollaborator(ctx, field)
			case "eaCollaboratorName":
				return ec.fieldContext_SystemIntake_eaCollaboratorName(ctx, field)
			case "euaUserId":
				return ec.fieldContext_SystemIntake_euaUserId(ctx, field)
			case "existingFunding":
				return ec.fieldContext_SystemIntake_existingFunding(ctx, field)
			case "fundingSources":
				return ec.fieldContext_SystemIntake_fundingSources(ctx, field)
			case "governanceRequestFeedbacks":
				return ec.fieldContext_SystemIntake_governanceRequestFeedbacks(ctx, field)
			case "governanceTeams":
				return ec.fieldContext_SystemIntake_governanceTeams(ctx, field)
			case "grbDate":
				return ec.fieldContext_SystemIntake_grbDate(ctx, field)
			case "grtDate":
				return ec.fieldContext_SystemIntake_grtDate(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_SystemIntake_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_SystemIntake_nextMeetingDate(ctx, field)
			case "grbReviewStartedAt":
				return ec.fieldContext_SystemIntake_grbReviewStartedAt(ctx, field)
			case "grbReviewers":
				return ec.fieldContext_SystemIntake_grbReviewers(ctx, field)
			case "grbVotingInformation":
				return ec.fieldContext_SystemIntake_grbVotingInformation(ctx, field)
			case "id":
				return ec.fieldContext_SystemIntake_id(ctx, field)
			case "isso":
				return ec.fieldContext_SystemIntake_isso(ctx, field)
			case "lcid":
				return ec.fieldContext_SystemIntake_lcid(ctx, field)
			case "lcidIssuedAt":
				return ec.fieldContext_SystemIntake_lcidIssuedAt(ctx, field)
			case "lcidExpiresAt":
				return ec.fieldContext_SystemIntake_lcidExpiresAt(ctx, field)
			case "lcidScope":
				return ec.fieldContext_SystemIntake_lcidScope(ctx, field)
			case "lcidCostBaseline":
				return ec.fieldContext_SystemIntake_lcidCostBaseline(ctx, field)
			case "lcidRetiresAt":
				return ec.fieldContext_SystemIntake_lcidRetiresAt(ctx, field)
			case "needsEaSupport":
				return ec.fieldContext_SystemIntake_needsEaSupport(ctx, field)
			case "usingSoftware":
				return ec.fieldContext_SystemIntake_usingSoftware(ctx, field)
			case "acquisitionMethods":
				return ec.fieldContext_SystemIntake_acquisitionMethods(ctx, field)
			case "notes":
				return ec.fieldContext_SystemIntake_notes(ctx, field)
			case "oitSecurityCollaborator":
				return ec.fieldContext_SystemIntake_oitSecurityCollaborator(ctx, field)
			case "oitSecurityCollaboratorName":
				return ec.fieldContext_SystemIntake_oitSecurityCollaboratorName(ctx, field)
			case "productManager":
				return ec.fieldContext_SystemIntake_productManager(ctx, field)
			case "projectAcronym":
				return ec.fieldContext_SystemIntake_projectAcronym(ctx, field)
			case "rejectionReason":
				return ec.fieldContext_SystemIntake_rejectionReason(ctx, field)
			case "requestName":
				return ec.fieldContext_SystemIntake_requestName(ctx, field)
			case "requestType":
				return ec.fieldContext_SystemIntake_requestType(ctx, field)
			case "requester":
				return ec.fieldContext_SystemIntake_requester(ctx, field)
			case "requesterName":
				return ec.fieldContext_SystemIntake_requesterName(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_SystemIntake_requesterComponent(ctx, field)
			case "state":
				return ec.fieldContext_SystemIntake_state(ctx, field)
			case "step":
				return ec.fieldContext_SystemIntake_step(ctx, field)
			case "submittedAt":
				return ec.fieldContext_SystemIntake_submittedAt(ctx, field)
			case "trbCollaborator":
				return ec.fieldContext_SystemIntake_trbCollaborator(ctx, field)
			case "trbCollaboratorName":
				return ec.fieldContext_SystemIntake_trbCollaboratorName(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SystemIntake_updatedAt(ctx, field)
			case "grtReviewEmailBody":
				return ec.fieldContext_SystemIntake_grtReviewEmailBody(ctx, field)
			case "decidedAt":
				return ec.fieldContext_SystemIntake_decidedAt(ctx, field)
			case "businessCaseId":
				return ec.fieldContext_SystemIntake_businessCaseId(ctx, field)
			case "cedarSystemId":
				return ec.fieldContext_SystemIntake_cedarSystemId(ctx, field)
			case "documents":
				return ec.fieldContext_SystemIntake_documents(ctx, field)
			case "hasUiChanges":
				return ec.fieldContext_SystemIntake_hasUiChanges(ctx, field)
			case "usesAiTech":
				return ec.fieldContext_SystemIntake_usesAiTech(ctx, field)
			case "itGovTaskStatuses":
				return ec.fieldContext_SystemIntake_itGovTaskStatuses(ctx, field)
			case "requestFormState":
				return ec.fieldContext_SystemIntake_requestFormState(ctx, field)
			case "draftBusinessCaseState":
				return ec.fieldContext_SystemIntake_draftBusinessCaseState(ctx, field)
			case "grtMeetingState":
				return ec.fieldContext_SystemIntake_grtMeetingState(ctx, field)
			case "finalBusinessCaseState":
				return ec.fieldContext_SystemIntake_finalBusinessCaseState(ctx, field)
			case "grbMeetingState":
				return ec.fieldContext_SystemIntake_grbMeetingState(ctx, field)
			case "decisionState":
				return ec.fieldContext_SystemIntake_decisionState(ctx, field)
			case "statusRequester":
				return ec.fieldContext_SystemIntake_statusRequester(ctx, field)
			case "statusAdmin":
				return ec.fieldContext_SystemIntake_statusAdmin(ctx, field)
			case "lcidStatus":
				return ec.fieldContext_SystemIntake_lcidStatus(ctx, field)
			case "trbFollowUpRecommendation":
				return ec.fieldContext_SystemIntake_trbFollowUpRecommendation(ctx, field)
			case "contractName":
				return ec.fieldContext_SystemIntake_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_SystemIntake_relationType(ctx, field)
			case "systems":
				return ec.fieldContext_SystemIntake_systems(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_SystemIntake_contractNumbers(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_SystemIntake_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_SystemIntake_relatedTRBRequests(ctx, field)
			case "grbDiscussions":
				return ec.fieldContext_SystemIntake_grbDiscussions(ctx, field)
			case "grbPresentationLinks":
				return ec.fieldContext_SystemIntake_grbPresentationLinks(ctx, field)
			case "grbPresentationDeckRequesterReminderEmailSentTime":
				return ec.fieldContext_SystemIntake_grbPresentationDeckRequesterReminderEmailSentTime(ctx, field)
			case "grbReviewType":
				return ec.fieldContext_SystemIntake_grbReviewType(ctx, field)
			case "grbReviewAsyncRecordingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncRecordingTime(ctx, field)
			case "grbReviewAsyncEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncEndDate(ctx, field)
			case "grbReviewAsyncGRBMeetingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncGRBMeetingTime(ctx, field)
			case "grbReviewAsyncStatus":
				return ec.fieldContext_SystemIntake_grbReviewAsyncStatus(ctx, field)
			case "grbReviewAsyncManualEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncManualEndDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntake", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_archiveSystemIntake_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_sendFeedbackEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_sendFeedbackEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SendFeedbackEmail(rctx, fc.Args["input"].(models.SendFeedbackEmailInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_sendFeedbackEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_sendFeedbackEmail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_sendCantFindSomethingEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_sendCantFindSomethingEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SendCantFindSomethingEmail(rctx, fc.Args["input"].(models.SendCantFindSomethingEmailInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_sendCantFindSomethingEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_sendCantFindSomethingEmail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_sendReportAProblemEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_sendReportAProblemEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SendReportAProblemEmail(rctx, fc.Args["input"].(models.SendReportAProblemEmailInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_sendReportAProblemEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_sendReportAProblemEmail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTRBRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTRBRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateTRBRequest(rctx, fc.Args["requestType"].(models.TRBRequestType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBRequest)
	fc.Result = res
	return ec.marshalNTRBRequest2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTRBRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequest_id(ctx, field)
			case "name":
				return ec.fieldContext_TRBRequest_name(ctx, field)
			case "archived":
				return ec.fieldContext_TRBRequest_archived(ctx, field)
			case "type":
				return ec.fieldContext_TRBRequest_type(ctx, field)
			case "state":
				return ec.fieldContext_TRBRequest_state(ctx, field)
			case "status":
				return ec.fieldContext_TRBRequest_status(ctx, field)
			case "attendees":
				return ec.fieldContext_TRBRequest_attendees(ctx, field)
			case "feedback":
				return ec.fieldContext_TRBRequest_feedback(ctx, field)
			case "documents":
				return ec.fieldContext_TRBRequest_documents(ctx, field)
			case "form":
				return ec.fieldContext_TRBRequest_form(ctx, field)
			case "guidanceLetter":
				return ec.fieldContext_TRBRequest_guidanceLetter(ctx, field)
			case "taskStatuses":
				return ec.fieldContext_TRBRequest_taskStatuses(ctx, field)
			case "consultMeetingTime":
				return ec.fieldContext_TRBRequest_consultMeetingTime(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_TRBRequest_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_TRBRequest_nextMeetingDate(ctx, field)
			case "trbLead":
				return ec.fieldContext_TRBRequest_trbLead(ctx, field)
			case "trbLeadInfo":
				return ec.fieldContext_TRBRequest_trbLeadInfo(ctx, field)
			case "requesterInfo":
				return ec.fieldContext_TRBRequest_requesterInfo(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_TRBRequest_requesterComponent(ctx, field)
			case "adminNotes":
				return ec.fieldContext_TRBRequest_adminNotes(ctx, field)
			case "isRecent":
				return ec.fieldContext_TRBRequest_isRecent(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequest_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequest_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequest_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequest_modifiedAt(ctx, field)
			case "contractName":
				return ec.fieldContext_TRBRequest_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_TRBRequest_relationType(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_TRBRequest_contractNumbers(ctx, field)
			case "systems":
				return ec.fieldContext_TRBRequest_systems(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_TRBRequest_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_TRBRequest_relatedTRBRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTRBRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTRBRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTRBRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTRBRequest(rctx, fc.Args["id"].(uuid.UUID), fc.Args["changes"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBRequest)
	fc.Result = res
	return ec.marshalNTRBRequest2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTRBRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequest_id(ctx, field)
			case "name":
				return ec.fieldContext_TRBRequest_name(ctx, field)
			case "archived":
				return ec.fieldContext_TRBRequest_archived(ctx, field)
			case "type":
				return ec.fieldContext_TRBRequest_type(ctx, field)
			case "state":
				return ec.fieldContext_TRBRequest_state(ctx, field)
			case "status":
				return ec.fieldContext_TRBRequest_status(ctx, field)
			case "attendees":
				return ec.fieldContext_TRBRequest_attendees(ctx, field)
			case "feedback":
				return ec.fieldContext_TRBRequest_feedback(ctx, field)
			case "documents":
				return ec.fieldContext_TRBRequest_documents(ctx, field)
			case "form":
				return ec.fieldContext_TRBRequest_form(ctx, field)
			case "guidanceLetter":
				return ec.fieldContext_TRBRequest_guidanceLetter(ctx, field)
			case "taskStatuses":
				return ec.fieldContext_TRBRequest_taskStatuses(ctx, field)
			case "consultMeetingTime":
				return ec.fieldContext_TRBRequest_consultMeetingTime(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_TRBRequest_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_TRBRequest_nextMeetingDate(ctx, field)
			case "trbLead":
				return ec.fieldContext_TRBRequest_trbLead(ctx, field)
			case "trbLeadInfo":
				return ec.fieldContext_TRBRequest_trbLeadInfo(ctx, field)
			case "requesterInfo":
				return ec.fieldContext_TRBRequest_requesterInfo(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_TRBRequest_requesterComponent(ctx, field)
			case "adminNotes":
				return ec.fieldContext_TRBRequest_adminNotes(ctx, field)
			case "isRecent":
				return ec.fieldContext_TRBRequest_isRecent(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequest_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequest_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequest_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequest_modifiedAt(ctx, field)
			case "contractName":
				return ec.fieldContext_TRBRequest_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_TRBRequest_relationType(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_TRBRequest_contractNumbers(ctx, field)
			case "systems":
				return ec.fieldContext_TRBRequest_systems(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_TRBRequest_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_TRBRequest_relatedTRBRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTRBRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTRBRequestAttendee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTRBRequestAttendee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateTRBRequestAttendee(rctx, fc.Args["input"].(models.CreateTRBRequestAttendeeInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBRequestAttendee)
	fc.Result = res
	return ec.marshalNTRBRequestAttendee2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestAttendee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTRBRequestAttendee(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequestAttendee_id(ctx, field)
			case "euaUserId":
				return ec.fieldContext_TRBRequestAttendee_euaUserId(ctx, field)
			case "userInfo":
				return ec.fieldContext_TRBRequestAttendee_userInfo(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBRequestAttendee_trbRequestId(ctx, field)
			case "component":
				return ec.fieldContext_TRBRequestAttendee_component(ctx, field)
			case "role":
				return ec.fieldContext_TRBRequestAttendee_role(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequestAttendee_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequestAttendee_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequestAttendee_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequestAttendee_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequestAttendee", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTRBRequestAttendee_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTRBRequestAttendee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTRBRequestAttendee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTRBRequestAttendee(rctx, fc.Args["input"].(models.UpdateTRBRequestAttendeeInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBRequestAttendee)
	fc.Result = res
	return ec.marshalNTRBRequestAttendee2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestAttendee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTRBRequestAttendee(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequestAttendee_id(ctx, field)
			case "euaUserId":
				return ec.fieldContext_TRBRequestAttendee_euaUserId(ctx, field)
			case "userInfo":
				return ec.fieldContext_TRBRequestAttendee_userInfo(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBRequestAttendee_trbRequestId(ctx, field)
			case "component":
				return ec.fieldContext_TRBRequestAttendee_component(ctx, field)
			case "role":
				return ec.fieldContext_TRBRequestAttendee_role(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequestAttendee_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequestAttendee_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequestAttendee_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequestAttendee_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequestAttendee", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTRBRequestAttendee_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTRBRequestAttendee(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteTRBRequestAttendee(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteTRBRequestAttendee(rctx, fc.Args["id"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBRequestAttendee)
	fc.Result = res
	return ec.marshalNTRBRequestAttendee2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestAttendee(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteTRBRequestAttendee(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequestAttendee_id(ctx, field)
			case "euaUserId":
				return ec.fieldContext_TRBRequestAttendee_euaUserId(ctx, field)
			case "userInfo":
				return ec.fieldContext_TRBRequestAttendee_userInfo(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBRequestAttendee_trbRequestId(ctx, field)
			case "component":
				return ec.fieldContext_TRBRequestAttendee_component(ctx, field)
			case "role":
				return ec.fieldContext_TRBRequestAttendee_role(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequestAttendee_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequestAttendee_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequestAttendee_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequestAttendee_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequestAttendee", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTRBRequestAttendee_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTRBRequestDocument(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTRBRequestDocument(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateTRBRequestDocument(rctx, fc.Args["input"].(models.CreateTRBRequestDocumentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CreateTRBRequestDocumentPayload)
	fc.Result = res
	return ec.marshalOCreateTRBRequestDocumentPayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateTRBRequestDocumentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTRBRequestDocument(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "document":
				return ec.fieldContext_CreateTRBRequestDocumentPayload_document(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateTRBRequestDocumentPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTRBRequestDocument_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTRBRequestDocument(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteTRBRequestDocument(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteTRBRequestDocument(rctx, fc.Args["id"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DeleteTRBRequestDocumentPayload)
	fc.Result = res
	return ec.marshalODeleteTRBRequestDocumentPayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐDeleteTRBRequestDocumentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteTRBRequestDocument(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "document":
				return ec.fieldContext_DeleteTRBRequestDocumentPayload_document(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteTRBRequestDocumentPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTRBRequestDocument_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSystemIntakeDocument(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSystemIntakeDocument(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSystemIntakeDocument(rctx, fc.Args["input"].(models.CreateSystemIntakeDocumentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CreateSystemIntakeDocumentPayload)
	fc.Result = res
	return ec.marshalOCreateSystemIntakeDocumentPayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateSystemIntakeDocumentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSystemIntakeDocument(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "document":
				return ec.fieldContext_CreateSystemIntakeDocumentPayload_document(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreateSystemIntakeDocumentPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSystemIntakeDocument_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteSystemIntakeDocument(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteSystemIntakeDocument(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSystemIntakeDocument(rctx, fc.Args["id"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.DeleteSystemIntakeDocumentPayload)
	fc.Result = res
	return ec.marshalODeleteSystemIntakeDocumentPayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐDeleteSystemIntakeDocumentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteSystemIntakeDocument(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "document":
				return ec.fieldContext_DeleteSystemIntakeDocumentPayload_document(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteSystemIntakeDocumentPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteSystemIntakeDocument_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTRBRequestForm(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTRBRequestForm(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTRBRequestForm(rctx, fc.Args["input"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBRequestForm)
	fc.Result = res
	return ec.marshalNTRBRequestForm2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestForm(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTRBRequestForm(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequestForm_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBRequestForm_trbRequestId(ctx, field)
			case "status":
				return ec.fieldContext_TRBRequestForm_status(ctx, field)
			case "component":
				return ec.fieldContext_TRBRequestForm_component(ctx, field)
			case "needsAssistanceWith":
				return ec.fieldContext_TRBRequestForm_needsAssistanceWith(ctx, field)
			case "hasSolutionInMind":
				return ec.fieldContext_TRBRequestForm_hasSolutionInMind(ctx, field)
			case "proposedSolution":
				return ec.fieldContext_TRBRequestForm_proposedSolution(ctx, field)
			case "whereInProcess":
				return ec.fieldContext_TRBRequestForm_whereInProcess(ctx, field)
			case "whereInProcessOther":
				return ec.fieldContext_TRBRequestForm_whereInProcessOther(ctx, field)
			case "hasExpectedStartEndDates":
				return ec.fieldContext_TRBRequestForm_hasExpectedStartEndDates(ctx, field)
			case "expectedStartDate":
				return ec.fieldContext_TRBRequestForm_expectedStartDate(ctx, field)
			case "expectedEndDate":
				return ec.fieldContext_TRBRequestForm_expectedEndDate(ctx, field)
			case "collabGroups":
				return ec.fieldContext_TRBRequestForm_collabGroups(ctx, field)
			case "collabDateSecurity":
				return ec.fieldContext_TRBRequestForm_collabDateSecurity(ctx, field)
			case "collabDateEnterpriseArchitecture":
				return ec.fieldContext_TRBRequestForm_collabDateEnterpriseArchitecture(ctx, field)
			case "collabDateCloud":
				return ec.fieldContext_TRBRequestForm_collabDateCloud(ctx, field)
			case "collabDatePrivacyAdvisor":
				return ec.fieldContext_TRBRequestForm_collabDatePrivacyAdvisor(ctx, field)
			case "collabDateGovernanceReviewBoard":
				return ec.fieldContext_TRBRequestForm_collabDateGovernanceReviewBoard(ctx, field)
			case "collabDateOther":
				return ec.fieldContext_TRBRequestForm_collabDateOther(ctx, field)
			case "collabGroupOther":
				return ec.fieldContext_TRBRequestForm_collabGroupOther(ctx, field)
			case "collabGRBConsultRequested":
				return ec.fieldContext_TRBRequestForm_collabGRBConsultRequested(ctx, field)
			case "fundingSources":
				return ec.fieldContext_TRBRequestForm_fundingSources(ctx, field)
			case "systemIntakes":
				return ec.fieldContext_TRBRequestForm_systemIntakes(ctx, field)
			case "subjectAreaOptions":
				return ec.fieldContext_TRBRequestForm_subjectAreaOptions(ctx, field)
			case "subjectAreaOptionOther":
				return ec.fieldContext_TRBRequestForm_subjectAreaOptionOther(ctx, field)
			case "submittedAt":
				return ec.fieldContext_TRBRequestForm_submittedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequestForm_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequestForm_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequestForm_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequestForm_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequestForm", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTRBRequestForm_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTRBRequestFundingSources(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTRBRequestFundingSources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateTRBRequestFundingSources(rctx, fc.Args["input"].(models.UpdateTRBRequestFundingSourcesInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TRBFundingSource)
	fc.Result = res
	return ec.marshalNTRBFundingSource2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBFundingSourceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTRBRequestFundingSources(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBFundingSource_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBFundingSource_trbRequestId(ctx, field)
			case "fundingNumber":
				return ec.fieldContext_TRBFundingSource_fundingNumber(ctx, field)
			case "source":
				return ec.fieldContext_TRBFundingSource_source(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBFundingSource_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBFundingSource_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBFundingSource_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBFundingSource_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBFundingSource", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTRBRequestFundingSources_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTRBRequestFundingSources(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteTRBRequestFundingSources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteTRBRequestFundingSources(rctx, fc.Args["input"].(models.DeleteTRBRequestFundingSourcesInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TRBFundingSource)
	fc.Result = res
	return ec.marshalNTRBFundingSource2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBFundingSourceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteTRBRequestFundingSources(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBFundingSource_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBFundingSource_trbRequestId(ctx, field)
			case "fundingNumber":
				return ec.fieldContext_TRBFundingSource_fundingNumber(ctx, field)
			case "source":
				return ec.fieldContext_TRBFundingSource_source(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBFundingSource_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBFundingSource_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBFundingSource_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBFundingSource_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBFundingSource", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTRBRequestFundingSources_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setRolesForUserOnSystem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setRolesForUserOnSystem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetRolesForUserOnSystem(rctx, fc.Args["input"].(models.SetRolesForUserOnSystemInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setRolesForUserOnSystem(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setRolesForUserOnSystem_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTRBRequestFeedback(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTRBRequestFeedback(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateTRBRequestFeedback(rctx, fc.Args["input"].(models.CreateTRBRequestFeedbackInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal *models.TRBRequestFeedback
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.TRBRequestFeedback
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.TRBRequestFeedback); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.TRBRequestFeedback`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBRequestFeedback)
	fc.Result = res
	return ec.marshalNTRBRequestFeedback2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestFeedback(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTRBRequestFeedback(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequestFeedback_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBRequestFeedback_trbRequestId(ctx, field)
			case "feedbackMessage":
				return ec.fieldContext_TRBRequestFeedback_feedbackMessage(ctx, field)
			case "copyTrbMailbox":
				return ec.fieldContext_TRBRequestFeedback_copyTrbMailbox(ctx, field)
			case "notifyEuaIds":
				return ec.fieldContext_TRBRequestFeedback_notifyEuaIds(ctx, field)
			case "action":
				return ec.fieldContext_TRBRequestFeedback_action(ctx, field)
			case "author":
				return ec.fieldContext_TRBRequestFeedback_author(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequestFeedback_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequestFeedback_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequestFeedback_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequestFeedback_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequestFeedback", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTRBRequestFeedback_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTRBRequestConsultMeetingTime(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTRBRequestConsultMeetingTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateTRBRequestConsultMeetingTime(rctx, fc.Args["input"].(models.UpdateTRBRequestConsultMeetingTimeInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal *models.TRBRequest
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.TRBRequest
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.TRBRequest); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.TRBRequest`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBRequest)
	fc.Result = res
	return ec.marshalNTRBRequest2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTRBRequestConsultMeetingTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequest_id(ctx, field)
			case "name":
				return ec.fieldContext_TRBRequest_name(ctx, field)
			case "archived":
				return ec.fieldContext_TRBRequest_archived(ctx, field)
			case "type":
				return ec.fieldContext_TRBRequest_type(ctx, field)
			case "state":
				return ec.fieldContext_TRBRequest_state(ctx, field)
			case "status":
				return ec.fieldContext_TRBRequest_status(ctx, field)
			case "attendees":
				return ec.fieldContext_TRBRequest_attendees(ctx, field)
			case "feedback":
				return ec.fieldContext_TRBRequest_feedback(ctx, field)
			case "documents":
				return ec.fieldContext_TRBRequest_documents(ctx, field)
			case "form":
				return ec.fieldContext_TRBRequest_form(ctx, field)
			case "guidanceLetter":
				return ec.fieldContext_TRBRequest_guidanceLetter(ctx, field)
			case "taskStatuses":
				return ec.fieldContext_TRBRequest_taskStatuses(ctx, field)
			case "consultMeetingTime":
				return ec.fieldContext_TRBRequest_consultMeetingTime(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_TRBRequest_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_TRBRequest_nextMeetingDate(ctx, field)
			case "trbLead":
				return ec.fieldContext_TRBRequest_trbLead(ctx, field)
			case "trbLeadInfo":
				return ec.fieldContext_TRBRequest_trbLeadInfo(ctx, field)
			case "requesterInfo":
				return ec.fieldContext_TRBRequest_requesterInfo(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_TRBRequest_requesterComponent(ctx, field)
			case "adminNotes":
				return ec.fieldContext_TRBRequest_adminNotes(ctx, field)
			case "isRecent":
				return ec.fieldContext_TRBRequest_isRecent(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequest_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequest_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequest_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequest_modifiedAt(ctx, field)
			case "contractName":
				return ec.fieldContext_TRBRequest_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_TRBRequest_relationType(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_TRBRequest_contractNumbers(ctx, field)
			case "systems":
				return ec.fieldContext_TRBRequest_systems(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_TRBRequest_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_TRBRequest_relatedTRBRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTRBRequestConsultMeetingTime_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTRBRequestTRBLead(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTRBRequestTRBLead(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateTRBRequestTRBLead(rctx, fc.Args["input"].(models.UpdateTRBRequestTRBLeadInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal *models.TRBRequest
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.TRBRequest
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.TRBRequest); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.TRBRequest`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBRequest)
	fc.Result = res
	return ec.marshalNTRBRequest2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTRBRequestTRBLead(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequest_id(ctx, field)
			case "name":
				return ec.fieldContext_TRBRequest_name(ctx, field)
			case "archived":
				return ec.fieldContext_TRBRequest_archived(ctx, field)
			case "type":
				return ec.fieldContext_TRBRequest_type(ctx, field)
			case "state":
				return ec.fieldContext_TRBRequest_state(ctx, field)
			case "status":
				return ec.fieldContext_TRBRequest_status(ctx, field)
			case "attendees":
				return ec.fieldContext_TRBRequest_attendees(ctx, field)
			case "feedback":
				return ec.fieldContext_TRBRequest_feedback(ctx, field)
			case "documents":
				return ec.fieldContext_TRBRequest_documents(ctx, field)
			case "form":
				return ec.fieldContext_TRBRequest_form(ctx, field)
			case "guidanceLetter":
				return ec.fieldContext_TRBRequest_guidanceLetter(ctx, field)
			case "taskStatuses":
				return ec.fieldContext_TRBRequest_taskStatuses(ctx, field)
			case "consultMeetingTime":
				return ec.fieldContext_TRBRequest_consultMeetingTime(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_TRBRequest_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_TRBRequest_nextMeetingDate(ctx, field)
			case "trbLead":
				return ec.fieldContext_TRBRequest_trbLead(ctx, field)
			case "trbLeadInfo":
				return ec.fieldContext_TRBRequest_trbLeadInfo(ctx, field)
			case "requesterInfo":
				return ec.fieldContext_TRBRequest_requesterInfo(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_TRBRequest_requesterComponent(ctx, field)
			case "adminNotes":
				return ec.fieldContext_TRBRequest_adminNotes(ctx, field)
			case "isRecent":
				return ec.fieldContext_TRBRequest_isRecent(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequest_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequest_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequest_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequest_modifiedAt(ctx, field)
			case "contractName":
				return ec.fieldContext_TRBRequest_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_TRBRequest_relationType(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_TRBRequest_contractNumbers(ctx, field)
			case "systems":
				return ec.fieldContext_TRBRequest_systems(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_TRBRequest_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_TRBRequest_relatedTRBRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTRBRequestTRBLead_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setTRBRequestRelationNewSystem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setTRBRequestRelationNewSystem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetTRBRequestRelationNewSystem(rctx, fc.Args["input"].(models.SetTRBRequestRelationNewSystemInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TRBRequest)
	fc.Result = res
	return ec.marshalOTRBRequest2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setTRBRequestRelationNewSystem(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequest_id(ctx, field)
			case "name":
				return ec.fieldContext_TRBRequest_name(ctx, field)
			case "archived":
				return ec.fieldContext_TRBRequest_archived(ctx, field)
			case "type":
				return ec.fieldContext_TRBRequest_type(ctx, field)
			case "state":
				return ec.fieldContext_TRBRequest_state(ctx, field)
			case "status":
				return ec.fieldContext_TRBRequest_status(ctx, field)
			case "attendees":
				return ec.fieldContext_TRBRequest_attendees(ctx, field)
			case "feedback":
				return ec.fieldContext_TRBRequest_feedback(ctx, field)
			case "documents":
				return ec.fieldContext_TRBRequest_documents(ctx, field)
			case "form":
				return ec.fieldContext_TRBRequest_form(ctx, field)
			case "guidanceLetter":
				return ec.fieldContext_TRBRequest_guidanceLetter(ctx, field)
			case "taskStatuses":
				return ec.fieldContext_TRBRequest_taskStatuses(ctx, field)
			case "consultMeetingTime":
				return ec.fieldContext_TRBRequest_consultMeetingTime(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_TRBRequest_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_TRBRequest_nextMeetingDate(ctx, field)
			case "trbLead":
				return ec.fieldContext_TRBRequest_trbLead(ctx, field)
			case "trbLeadInfo":
				return ec.fieldContext_TRBRequest_trbLeadInfo(ctx, field)
			case "requesterInfo":
				return ec.fieldContext_TRBRequest_requesterInfo(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_TRBRequest_requesterComponent(ctx, field)
			case "adminNotes":
				return ec.fieldContext_TRBRequest_adminNotes(ctx, field)
			case "isRecent":
				return ec.fieldContext_TRBRequest_isRecent(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequest_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequest_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequest_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequest_modifiedAt(ctx, field)
			case "contractName":
				return ec.fieldContext_TRBRequest_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_TRBRequest_relationType(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_TRBRequest_contractNumbers(ctx, field)
			case "systems":
				return ec.fieldContext_TRBRequest_systems(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_TRBRequest_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_TRBRequest_relatedTRBRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setTRBRequestRelationNewSystem_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setTRBRequestRelationExistingSystem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setTRBRequestRelationExistingSystem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetTRBRequestRelationExistingSystem(rctx, fc.Args["input"].(models.SetTRBRequestRelationExistingSystemInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TRBRequest)
	fc.Result = res
	return ec.marshalOTRBRequest2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setTRBRequestRelationExistingSystem(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequest_id(ctx, field)
			case "name":
				return ec.fieldContext_TRBRequest_name(ctx, field)
			case "archived":
				return ec.fieldContext_TRBRequest_archived(ctx, field)
			case "type":
				return ec.fieldContext_TRBRequest_type(ctx, field)
			case "state":
				return ec.fieldContext_TRBRequest_state(ctx, field)
			case "status":
				return ec.fieldContext_TRBRequest_status(ctx, field)
			case "attendees":
				return ec.fieldContext_TRBRequest_attendees(ctx, field)
			case "feedback":
				return ec.fieldContext_TRBRequest_feedback(ctx, field)
			case "documents":
				return ec.fieldContext_TRBRequest_documents(ctx, field)
			case "form":
				return ec.fieldContext_TRBRequest_form(ctx, field)
			case "guidanceLetter":
				return ec.fieldContext_TRBRequest_guidanceLetter(ctx, field)
			case "taskStatuses":
				return ec.fieldContext_TRBRequest_taskStatuses(ctx, field)
			case "consultMeetingTime":
				return ec.fieldContext_TRBRequest_consultMeetingTime(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_TRBRequest_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_TRBRequest_nextMeetingDate(ctx, field)
			case "trbLead":
				return ec.fieldContext_TRBRequest_trbLead(ctx, field)
			case "trbLeadInfo":
				return ec.fieldContext_TRBRequest_trbLeadInfo(ctx, field)
			case "requesterInfo":
				return ec.fieldContext_TRBRequest_requesterInfo(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_TRBRequest_requesterComponent(ctx, field)
			case "adminNotes":
				return ec.fieldContext_TRBRequest_adminNotes(ctx, field)
			case "isRecent":
				return ec.fieldContext_TRBRequest_isRecent(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequest_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequest_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequest_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequest_modifiedAt(ctx, field)
			case "contractName":
				return ec.fieldContext_TRBRequest_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_TRBRequest_relationType(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_TRBRequest_contractNumbers(ctx, field)
			case "systems":
				return ec.fieldContext_TRBRequest_systems(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_TRBRequest_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_TRBRequest_relatedTRBRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setTRBRequestRelationExistingSystem_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setTRBRequestRelationExistingService(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setTRBRequestRelationExistingService(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetTRBRequestRelationExistingService(rctx, fc.Args["input"].(models.SetTRBRequestRelationExistingServiceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TRBRequest)
	fc.Result = res
	return ec.marshalOTRBRequest2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setTRBRequestRelationExistingService(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequest_id(ctx, field)
			case "name":
				return ec.fieldContext_TRBRequest_name(ctx, field)
			case "archived":
				return ec.fieldContext_TRBRequest_archived(ctx, field)
			case "type":
				return ec.fieldContext_TRBRequest_type(ctx, field)
			case "state":
				return ec.fieldContext_TRBRequest_state(ctx, field)
			case "status":
				return ec.fieldContext_TRBRequest_status(ctx, field)
			case "attendees":
				return ec.fieldContext_TRBRequest_attendees(ctx, field)
			case "feedback":
				return ec.fieldContext_TRBRequest_feedback(ctx, field)
			case "documents":
				return ec.fieldContext_TRBRequest_documents(ctx, field)
			case "form":
				return ec.fieldContext_TRBRequest_form(ctx, field)
			case "guidanceLetter":
				return ec.fieldContext_TRBRequest_guidanceLetter(ctx, field)
			case "taskStatuses":
				return ec.fieldContext_TRBRequest_taskStatuses(ctx, field)
			case "consultMeetingTime":
				return ec.fieldContext_TRBRequest_consultMeetingTime(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_TRBRequest_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_TRBRequest_nextMeetingDate(ctx, field)
			case "trbLead":
				return ec.fieldContext_TRBRequest_trbLead(ctx, field)
			case "trbLeadInfo":
				return ec.fieldContext_TRBRequest_trbLeadInfo(ctx, field)
			case "requesterInfo":
				return ec.fieldContext_TRBRequest_requesterInfo(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_TRBRequest_requesterComponent(ctx, field)
			case "adminNotes":
				return ec.fieldContext_TRBRequest_adminNotes(ctx, field)
			case "isRecent":
				return ec.fieldContext_TRBRequest_isRecent(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequest_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequest_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequest_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequest_modifiedAt(ctx, field)
			case "contractName":
				return ec.fieldContext_TRBRequest_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_TRBRequest_relationType(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_TRBRequest_contractNumbers(ctx, field)
			case "systems":
				return ec.fieldContext_TRBRequest_systems(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_TRBRequest_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_TRBRequest_relatedTRBRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setTRBRequestRelationExistingService_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_unlinkTRBRequestRelation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_unlinkTRBRequestRelation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UnlinkTRBRequestRelation(rctx, fc.Args["trbRequestID"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TRBRequest)
	fc.Result = res
	return ec.marshalOTRBRequest2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_unlinkTRBRequestRelation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequest_id(ctx, field)
			case "name":
				return ec.fieldContext_TRBRequest_name(ctx, field)
			case "archived":
				return ec.fieldContext_TRBRequest_archived(ctx, field)
			case "type":
				return ec.fieldContext_TRBRequest_type(ctx, field)
			case "state":
				return ec.fieldContext_TRBRequest_state(ctx, field)
			case "status":
				return ec.fieldContext_TRBRequest_status(ctx, field)
			case "attendees":
				return ec.fieldContext_TRBRequest_attendees(ctx, field)
			case "feedback":
				return ec.fieldContext_TRBRequest_feedback(ctx, field)
			case "documents":
				return ec.fieldContext_TRBRequest_documents(ctx, field)
			case "form":
				return ec.fieldContext_TRBRequest_form(ctx, field)
			case "guidanceLetter":
				return ec.fieldContext_TRBRequest_guidanceLetter(ctx, field)
			case "taskStatuses":
				return ec.fieldContext_TRBRequest_taskStatuses(ctx, field)
			case "consultMeetingTime":
				return ec.fieldContext_TRBRequest_consultMeetingTime(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_TRBRequest_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_TRBRequest_nextMeetingDate(ctx, field)
			case "trbLead":
				return ec.fieldContext_TRBRequest_trbLead(ctx, field)
			case "trbLeadInfo":
				return ec.fieldContext_TRBRequest_trbLeadInfo(ctx, field)
			case "requesterInfo":
				return ec.fieldContext_TRBRequest_requesterInfo(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_TRBRequest_requesterComponent(ctx, field)
			case "adminNotes":
				return ec.fieldContext_TRBRequest_adminNotes(ctx, field)
			case "isRecent":
				return ec.fieldContext_TRBRequest_isRecent(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequest_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequest_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequest_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequest_modifiedAt(ctx, field)
			case "contractName":
				return ec.fieldContext_TRBRequest_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_TRBRequest_relationType(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_TRBRequest_contractNumbers(ctx, field)
			case "systems":
				return ec.fieldContext_TRBRequest_systems(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_TRBRequest_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_TRBRequest_relatedTRBRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_unlinkTRBRequestRelation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTRBAdminNoteGeneralRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTRBAdminNoteGeneralRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateTRBAdminNoteGeneralRequest(rctx, fc.Args["input"].(models.CreateTRBAdminNoteGeneralRequestInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal *models.TRBAdminNote
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.TRBAdminNote
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.TRBAdminNote); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.TRBAdminNote`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBAdminNote)
	fc.Result = res
	return ec.marshalNTRBAdminNote2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBAdminNote(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTRBAdminNoteGeneralRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBAdminNote_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBAdminNote_trbRequestId(ctx, field)
			case "category":
				return ec.fieldContext_TRBAdminNote_category(ctx, field)
			case "noteText":
				return ec.fieldContext_TRBAdminNote_noteText(ctx, field)
			case "author":
				return ec.fieldContext_TRBAdminNote_author(ctx, field)
			case "isArchived":
				return ec.fieldContext_TRBAdminNote_isArchived(ctx, field)
			case "categorySpecificData":
				return ec.fieldContext_TRBAdminNote_categorySpecificData(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBAdminNote_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBAdminNote_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBAdminNote_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBAdminNote_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBAdminNote", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTRBAdminNoteGeneralRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTRBAdminNoteInitialRequestForm(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTRBAdminNoteInitialRequestForm(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateTRBAdminNoteInitialRequestForm(rctx, fc.Args["input"].(models.CreateTRBAdminNoteInitialRequestFormInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal *models.TRBAdminNote
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.TRBAdminNote
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.TRBAdminNote); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.TRBAdminNote`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBAdminNote)
	fc.Result = res
	return ec.marshalNTRBAdminNote2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBAdminNote(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTRBAdminNoteInitialRequestForm(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBAdminNote_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBAdminNote_trbRequestId(ctx, field)
			case "category":
				return ec.fieldContext_TRBAdminNote_category(ctx, field)
			case "noteText":
				return ec.fieldContext_TRBAdminNote_noteText(ctx, field)
			case "author":
				return ec.fieldContext_TRBAdminNote_author(ctx, field)
			case "isArchived":
				return ec.fieldContext_TRBAdminNote_isArchived(ctx, field)
			case "categorySpecificData":
				return ec.fieldContext_TRBAdminNote_categorySpecificData(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBAdminNote_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBAdminNote_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBAdminNote_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBAdminNote_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBAdminNote", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTRBAdminNoteInitialRequestForm_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTRBAdminNoteSupportingDocuments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTRBAdminNoteSupportingDocuments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateTRBAdminNoteSupportingDocuments(rctx, fc.Args["input"].(models.CreateTRBAdminNoteSupportingDocumentsInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal *models.TRBAdminNote
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.TRBAdminNote
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.TRBAdminNote); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.TRBAdminNote`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBAdminNote)
	fc.Result = res
	return ec.marshalNTRBAdminNote2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBAdminNote(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTRBAdminNoteSupportingDocuments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBAdminNote_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBAdminNote_trbRequestId(ctx, field)
			case "category":
				return ec.fieldContext_TRBAdminNote_category(ctx, field)
			case "noteText":
				return ec.fieldContext_TRBAdminNote_noteText(ctx, field)
			case "author":
				return ec.fieldContext_TRBAdminNote_author(ctx, field)
			case "isArchived":
				return ec.fieldContext_TRBAdminNote_isArchived(ctx, field)
			case "categorySpecificData":
				return ec.fieldContext_TRBAdminNote_categorySpecificData(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBAdminNote_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBAdminNote_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBAdminNote_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBAdminNote_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBAdminNote", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTRBAdminNoteSupportingDocuments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTRBAdminNoteConsultSession(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTRBAdminNoteConsultSession(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateTRBAdminNoteConsultSession(rctx, fc.Args["input"].(models.CreateTRBAdminNoteConsultSessionInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal *models.TRBAdminNote
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.TRBAdminNote
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.TRBAdminNote); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.TRBAdminNote`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBAdminNote)
	fc.Result = res
	return ec.marshalNTRBAdminNote2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBAdminNote(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTRBAdminNoteConsultSession(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBAdminNote_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBAdminNote_trbRequestId(ctx, field)
			case "category":
				return ec.fieldContext_TRBAdminNote_category(ctx, field)
			case "noteText":
				return ec.fieldContext_TRBAdminNote_noteText(ctx, field)
			case "author":
				return ec.fieldContext_TRBAdminNote_author(ctx, field)
			case "isArchived":
				return ec.fieldContext_TRBAdminNote_isArchived(ctx, field)
			case "categorySpecificData":
				return ec.fieldContext_TRBAdminNote_categorySpecificData(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBAdminNote_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBAdminNote_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBAdminNote_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBAdminNote_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBAdminNote", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTRBAdminNoteConsultSession_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTRBAdminNoteGuidanceLetter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTRBAdminNoteGuidanceLetter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateTRBAdminNoteGuidanceLetter(rctx, fc.Args["input"].(models.CreateTRBAdminNoteGuidanceLetterInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal *models.TRBAdminNote
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.TRBAdminNote
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.TRBAdminNote); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.TRBAdminNote`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBAdminNote)
	fc.Result = res
	return ec.marshalNTRBAdminNote2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBAdminNote(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTRBAdminNoteGuidanceLetter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBAdminNote_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBAdminNote_trbRequestId(ctx, field)
			case "category":
				return ec.fieldContext_TRBAdminNote_category(ctx, field)
			case "noteText":
				return ec.fieldContext_TRBAdminNote_noteText(ctx, field)
			case "author":
				return ec.fieldContext_TRBAdminNote_author(ctx, field)
			case "isArchived":
				return ec.fieldContext_TRBAdminNote_isArchived(ctx, field)
			case "categorySpecificData":
				return ec.fieldContext_TRBAdminNote_categorySpecificData(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBAdminNote_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBAdminNote_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBAdminNote_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBAdminNote_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBAdminNote", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTRBAdminNoteGuidanceLetter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setTRBAdminNoteArchived(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setTRBAdminNoteArchived(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SetTRBAdminNoteArchived(rctx, fc.Args["id"].(uuid.UUID), fc.Args["isArchived"].(bool))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal *models.TRBAdminNote
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.TRBAdminNote
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.TRBAdminNote); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.TRBAdminNote`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBAdminNote)
	fc.Result = res
	return ec.marshalNTRBAdminNote2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBAdminNote(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setTRBAdminNoteArchived(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBAdminNote_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBAdminNote_trbRequestId(ctx, field)
			case "category":
				return ec.fieldContext_TRBAdminNote_category(ctx, field)
			case "noteText":
				return ec.fieldContext_TRBAdminNote_noteText(ctx, field)
			case "author":
				return ec.fieldContext_TRBAdminNote_author(ctx, field)
			case "isArchived":
				return ec.fieldContext_TRBAdminNote_isArchived(ctx, field)
			case "categorySpecificData":
				return ec.fieldContext_TRBAdminNote_categorySpecificData(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBAdminNote_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBAdminNote_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBAdminNote_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBAdminNote_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBAdminNote", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setTRBAdminNoteArchived_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTRBGuidanceLetter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTRBGuidanceLetter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateTRBGuidanceLetter(rctx, fc.Args["trbRequestId"].(uuid.UUID))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal *models.TRBGuidanceLetter
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.TRBGuidanceLetter
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.TRBGuidanceLetter); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.TRBGuidanceLetter`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBGuidanceLetter)
	fc.Result = res
	return ec.marshalNTRBGuidanceLetter2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTRBGuidanceLetter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBGuidanceLetter_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBGuidanceLetter_trbRequestId(ctx, field)
			case "author":
				return ec.fieldContext_TRBGuidanceLetter_author(ctx, field)
			case "meetingSummary":
				return ec.fieldContext_TRBGuidanceLetter_meetingSummary(ctx, field)
			case "nextSteps":
				return ec.fieldContext_TRBGuidanceLetter_nextSteps(ctx, field)
			case "isFollowupRecommended":
				return ec.fieldContext_TRBGuidanceLetter_isFollowupRecommended(ctx, field)
			case "dateSent":
				return ec.fieldContext_TRBGuidanceLetter_dateSent(ctx, field)
			case "followupPoint":
				return ec.fieldContext_TRBGuidanceLetter_followupPoint(ctx, field)
			case "insights":
				return ec.fieldContext_TRBGuidanceLetter_insights(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBGuidanceLetter_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBGuidanceLetter_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBGuidanceLetter_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBGuidanceLetter_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBGuidanceLetter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTRBGuidanceLetter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTRBGuidanceLetter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTRBGuidanceLetter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateTRBGuidanceLetter(rctx, fc.Args["input"].(map[string]interface{}))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal *models.TRBGuidanceLetter
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.TRBGuidanceLetter
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.TRBGuidanceLetter); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.TRBGuidanceLetter`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBGuidanceLetter)
	fc.Result = res
	return ec.marshalNTRBGuidanceLetter2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTRBGuidanceLetter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBGuidanceLetter_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBGuidanceLetter_trbRequestId(ctx, field)
			case "author":
				return ec.fieldContext_TRBGuidanceLetter_author(ctx, field)
			case "meetingSummary":
				return ec.fieldContext_TRBGuidanceLetter_meetingSummary(ctx, field)
			case "nextSteps":
				return ec.fieldContext_TRBGuidanceLetter_nextSteps(ctx, field)
			case "isFollowupRecommended":
				return ec.fieldContext_TRBGuidanceLetter_isFollowupRecommended(ctx, field)
			case "dateSent":
				return ec.fieldContext_TRBGuidanceLetter_dateSent(ctx, field)
			case "followupPoint":
				return ec.fieldContext_TRBGuidanceLetter_followupPoint(ctx, field)
			case "insights":
				return ec.fieldContext_TRBGuidanceLetter_insights(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBGuidanceLetter_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBGuidanceLetter_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBGuidanceLetter_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBGuidanceLetter_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBGuidanceLetter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTRBGuidanceLetter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_requestReviewForTRBGuidanceLetter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_requestReviewForTRBGuidanceLetter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RequestReviewForTRBGuidanceLetter(rctx, fc.Args["id"].(uuid.UUID))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal *models.TRBGuidanceLetter
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.TRBGuidanceLetter
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.TRBGuidanceLetter); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.TRBGuidanceLetter`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBGuidanceLetter)
	fc.Result = res
	return ec.marshalNTRBGuidanceLetter2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_requestReviewForTRBGuidanceLetter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBGuidanceLetter_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBGuidanceLetter_trbRequestId(ctx, field)
			case "author":
				return ec.fieldContext_TRBGuidanceLetter_author(ctx, field)
			case "meetingSummary":
				return ec.fieldContext_TRBGuidanceLetter_meetingSummary(ctx, field)
			case "nextSteps":
				return ec.fieldContext_TRBGuidanceLetter_nextSteps(ctx, field)
			case "isFollowupRecommended":
				return ec.fieldContext_TRBGuidanceLetter_isFollowupRecommended(ctx, field)
			case "dateSent":
				return ec.fieldContext_TRBGuidanceLetter_dateSent(ctx, field)
			case "followupPoint":
				return ec.fieldContext_TRBGuidanceLetter_followupPoint(ctx, field)
			case "insights":
				return ec.fieldContext_TRBGuidanceLetter_insights(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBGuidanceLetter_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBGuidanceLetter_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBGuidanceLetter_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBGuidanceLetter_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBGuidanceLetter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_requestReviewForTRBGuidanceLetter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_sendTRBGuidanceLetter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_sendTRBGuidanceLetter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SendTRBGuidanceLetter(rctx, fc.Args["input"].(models.SendTRBGuidanceLetterInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal *models.TRBGuidanceLetter
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.TRBGuidanceLetter
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.TRBGuidanceLetter); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.TRBGuidanceLetter`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBGuidanceLetter)
	fc.Result = res
	return ec.marshalNTRBGuidanceLetter2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_sendTRBGuidanceLetter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBGuidanceLetter_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBGuidanceLetter_trbRequestId(ctx, field)
			case "author":
				return ec.fieldContext_TRBGuidanceLetter_author(ctx, field)
			case "meetingSummary":
				return ec.fieldContext_TRBGuidanceLetter_meetingSummary(ctx, field)
			case "nextSteps":
				return ec.fieldContext_TRBGuidanceLetter_nextSteps(ctx, field)
			case "isFollowupRecommended":
				return ec.fieldContext_TRBGuidanceLetter_isFollowupRecommended(ctx, field)
			case "dateSent":
				return ec.fieldContext_TRBGuidanceLetter_dateSent(ctx, field)
			case "followupPoint":
				return ec.fieldContext_TRBGuidanceLetter_followupPoint(ctx, field)
			case "insights":
				return ec.fieldContext_TRBGuidanceLetter_insights(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBGuidanceLetter_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBGuidanceLetter_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBGuidanceLetter_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBGuidanceLetter_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBGuidanceLetter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_sendTRBGuidanceLetter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTRBGuidanceLetterInsight(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTRBGuidanceLetterInsight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateTRBGuidanceLetterInsight(rctx, fc.Args["input"].(models.CreateTRBGuidanceLetterInsightInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal *models.TRBGuidanceLetterInsight
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.TRBGuidanceLetterInsight
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.TRBGuidanceLetterInsight); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.TRBGuidanceLetterInsight`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBGuidanceLetterInsight)
	fc.Result = res
	return ec.marshalNTRBGuidanceLetterInsight2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterInsight(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTRBGuidanceLetterInsight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBGuidanceLetterInsight_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBGuidanceLetterInsight_trbRequestId(ctx, field)
			case "title":
				return ec.fieldContext_TRBGuidanceLetterInsight_title(ctx, field)
			case "insight":
				return ec.fieldContext_TRBGuidanceLetterInsight_insight(ctx, field)
			case "links":
				return ec.fieldContext_TRBGuidanceLetterInsight_links(ctx, field)
			case "author":
				return ec.fieldContext_TRBGuidanceLetterInsight_author(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBGuidanceLetterInsight_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBGuidanceLetterInsight_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBGuidanceLetterInsight_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBGuidanceLetterInsight_modifiedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_TRBGuidanceLetterInsight_deletedAt(ctx, field)
			case "category":
				return ec.fieldContext_TRBGuidanceLetterInsight_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBGuidanceLetterInsight", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTRBGuidanceLetterInsight_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTRBGuidanceLetterInsight(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTRBGuidanceLetterInsight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateTRBGuidanceLetterInsight(rctx, fc.Args["input"].(map[string]interface{}))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal *models.TRBGuidanceLetterInsight
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.TRBGuidanceLetterInsight
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.TRBGuidanceLetterInsight); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.TRBGuidanceLetterInsight`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBGuidanceLetterInsight)
	fc.Result = res
	return ec.marshalNTRBGuidanceLetterInsight2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterInsight(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTRBGuidanceLetterInsight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBGuidanceLetterInsight_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBGuidanceLetterInsight_trbRequestId(ctx, field)
			case "title":
				return ec.fieldContext_TRBGuidanceLetterInsight_title(ctx, field)
			case "insight":
				return ec.fieldContext_TRBGuidanceLetterInsight_insight(ctx, field)
			case "links":
				return ec.fieldContext_TRBGuidanceLetterInsight_links(ctx, field)
			case "author":
				return ec.fieldContext_TRBGuidanceLetterInsight_author(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBGuidanceLetterInsight_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBGuidanceLetterInsight_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBGuidanceLetterInsight_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBGuidanceLetterInsight_modifiedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_TRBGuidanceLetterInsight_deletedAt(ctx, field)
			case "category":
				return ec.fieldContext_TRBGuidanceLetterInsight_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBGuidanceLetterInsight", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTRBGuidanceLetterInsight_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTRBGuidanceLetterInsightOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateTRBGuidanceLetterInsightOrder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateTRBGuidanceLetterInsightOrder(rctx, fc.Args["input"].(models.UpdateTRBGuidanceLetterInsightOrderInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal []*models.TRBGuidanceLetterInsight
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal []*models.TRBGuidanceLetterInsight
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.TRBGuidanceLetterInsight); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cms-enterprise/easi-app/pkg/models.TRBGuidanceLetterInsight`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TRBGuidanceLetterInsight)
	fc.Result = res
	return ec.marshalNTRBGuidanceLetterInsight2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterInsightᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateTRBGuidanceLetterInsightOrder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBGuidanceLetterInsight_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBGuidanceLetterInsight_trbRequestId(ctx, field)
			case "title":
				return ec.fieldContext_TRBGuidanceLetterInsight_title(ctx, field)
			case "insight":
				return ec.fieldContext_TRBGuidanceLetterInsight_insight(ctx, field)
			case "links":
				return ec.fieldContext_TRBGuidanceLetterInsight_links(ctx, field)
			case "author":
				return ec.fieldContext_TRBGuidanceLetterInsight_author(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBGuidanceLetterInsight_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBGuidanceLetterInsight_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBGuidanceLetterInsight_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBGuidanceLetterInsight_modifiedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_TRBGuidanceLetterInsight_deletedAt(ctx, field)
			case "category":
				return ec.fieldContext_TRBGuidanceLetterInsight_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBGuidanceLetterInsight", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTRBGuidanceLetterInsightOrder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTRBGuidanceLetterInsight(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteTRBGuidanceLetterInsight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteTRBGuidanceLetterInsight(rctx, fc.Args["id"].(uuid.UUID))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal *models.TRBGuidanceLetterInsight
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.TRBGuidanceLetterInsight
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.TRBGuidanceLetterInsight); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.TRBGuidanceLetterInsight`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBGuidanceLetterInsight)
	fc.Result = res
	return ec.marshalNTRBGuidanceLetterInsight2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterInsight(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteTRBGuidanceLetterInsight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBGuidanceLetterInsight_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBGuidanceLetterInsight_trbRequestId(ctx, field)
			case "title":
				return ec.fieldContext_TRBGuidanceLetterInsight_title(ctx, field)
			case "insight":
				return ec.fieldContext_TRBGuidanceLetterInsight_insight(ctx, field)
			case "links":
				return ec.fieldContext_TRBGuidanceLetterInsight_links(ctx, field)
			case "author":
				return ec.fieldContext_TRBGuidanceLetterInsight_author(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBGuidanceLetterInsight_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBGuidanceLetterInsight_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBGuidanceLetterInsight_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBGuidanceLetterInsight_modifiedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_TRBGuidanceLetterInsight_deletedAt(ctx, field)
			case "category":
				return ec.fieldContext_TRBGuidanceLetterInsight_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBGuidanceLetterInsight", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTRBGuidanceLetterInsight_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_closeTRBRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_closeTRBRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CloseTRBRequest(rctx, fc.Args["input"].(models.CloseTRBRequestInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal *models.TRBRequest
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.TRBRequest
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.TRBRequest); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.TRBRequest`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBRequest)
	fc.Result = res
	return ec.marshalNTRBRequest2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_closeTRBRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequest_id(ctx, field)
			case "name":
				return ec.fieldContext_TRBRequest_name(ctx, field)
			case "archived":
				return ec.fieldContext_TRBRequest_archived(ctx, field)
			case "type":
				return ec.fieldContext_TRBRequest_type(ctx, field)
			case "state":
				return ec.fieldContext_TRBRequest_state(ctx, field)
			case "status":
				return ec.fieldContext_TRBRequest_status(ctx, field)
			case "attendees":
				return ec.fieldContext_TRBRequest_attendees(ctx, field)
			case "feedback":
				return ec.fieldContext_TRBRequest_feedback(ctx, field)
			case "documents":
				return ec.fieldContext_TRBRequest_documents(ctx, field)
			case "form":
				return ec.fieldContext_TRBRequest_form(ctx, field)
			case "guidanceLetter":
				return ec.fieldContext_TRBRequest_guidanceLetter(ctx, field)
			case "taskStatuses":
				return ec.fieldContext_TRBRequest_taskStatuses(ctx, field)
			case "consultMeetingTime":
				return ec.fieldContext_TRBRequest_consultMeetingTime(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_TRBRequest_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_TRBRequest_nextMeetingDate(ctx, field)
			case "trbLead":
				return ec.fieldContext_TRBRequest_trbLead(ctx, field)
			case "trbLeadInfo":
				return ec.fieldContext_TRBRequest_trbLeadInfo(ctx, field)
			case "requesterInfo":
				return ec.fieldContext_TRBRequest_requesterInfo(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_TRBRequest_requesterComponent(ctx, field)
			case "adminNotes":
				return ec.fieldContext_TRBRequest_adminNotes(ctx, field)
			case "isRecent":
				return ec.fieldContext_TRBRequest_isRecent(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequest_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequest_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequest_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequest_modifiedAt(ctx, field)
			case "contractName":
				return ec.fieldContext_TRBRequest_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_TRBRequest_relationType(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_TRBRequest_contractNumbers(ctx, field)
			case "systems":
				return ec.fieldContext_TRBRequest_systems(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_TRBRequest_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_TRBRequest_relatedTRBRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_closeTRBRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_reopenTrbRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_reopenTrbRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ReopenTrbRequest(rctx, fc.Args["input"].(models.ReopenTRBRequestInput))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal *models.TRBRequest
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.TRBRequest
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.TRBRequest); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.TRBRequest`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBRequest)
	fc.Result = res
	return ec.marshalNTRBRequest2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_reopenTrbRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequest_id(ctx, field)
			case "name":
				return ec.fieldContext_TRBRequest_name(ctx, field)
			case "archived":
				return ec.fieldContext_TRBRequest_archived(ctx, field)
			case "type":
				return ec.fieldContext_TRBRequest_type(ctx, field)
			case "state":
				return ec.fieldContext_TRBRequest_state(ctx, field)
			case "status":
				return ec.fieldContext_TRBRequest_status(ctx, field)
			case "attendees":
				return ec.fieldContext_TRBRequest_attendees(ctx, field)
			case "feedback":
				return ec.fieldContext_TRBRequest_feedback(ctx, field)
			case "documents":
				return ec.fieldContext_TRBRequest_documents(ctx, field)
			case "form":
				return ec.fieldContext_TRBRequest_form(ctx, field)
			case "guidanceLetter":
				return ec.fieldContext_TRBRequest_guidanceLetter(ctx, field)
			case "taskStatuses":
				return ec.fieldContext_TRBRequest_taskStatuses(ctx, field)
			case "consultMeetingTime":
				return ec.fieldContext_TRBRequest_consultMeetingTime(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_TRBRequest_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_TRBRequest_nextMeetingDate(ctx, field)
			case "trbLead":
				return ec.fieldContext_TRBRequest_trbLead(ctx, field)
			case "trbLeadInfo":
				return ec.fieldContext_TRBRequest_trbLeadInfo(ctx, field)
			case "requesterInfo":
				return ec.fieldContext_TRBRequest_requesterInfo(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_TRBRequest_requesterComponent(ctx, field)
			case "adminNotes":
				return ec.fieldContext_TRBRequest_adminNotes(ctx, field)
			case "isRecent":
				return ec.fieldContext_TRBRequest_isRecent(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequest_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequest_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequest_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequest_modifiedAt(ctx, field)
			case "contractName":
				return ec.fieldContext_TRBRequest_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_TRBRequest_relationType(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_TRBRequest_contractNumbers(ctx, field)
			case "systems":
				return ec.fieldContext_TRBRequest_systems(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_TRBRequest_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_TRBRequest_relatedTRBRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_reopenTrbRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTrbLeadOption(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createTrbLeadOption(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateTrbLeadOption(rctx, fc.Args["eua"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal *models.UserInfo
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.UserInfo
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.UserInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.UserInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.UserInfo)
	fc.Result = res
	return ec.marshalNUserInfo2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUserInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createTrbLeadOption(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstName":
				return ec.fieldContext_UserInfo_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_UserInfo_lastName(ctx, field)
			case "commonName":
				return ec.fieldContext_UserInfo_commonName(ctx, field)
			case "email":
				return ec.fieldContext_UserInfo_email(ctx, field)
			case "euaUserId":
				return ec.fieldContext_UserInfo_euaUserId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTrbLeadOption_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTrbLeadOption(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteTrbLeadOption(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteTrbLeadOption(rctx, fc.Args["eua"].(string))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal bool
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal bool
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteTrbLeadOption(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTrbLeadOption_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_sendGRBReviewPresentationDeckReminderEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_sendGRBReviewPresentationDeckReminderEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SendGRBReviewPresentationDeckReminderEmail(rctx, fc.Args["systemIntakeID"].(uuid.UUID))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_GOVTEAM")
			if err != nil {
				var zeroVal bool
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal bool
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_sendGRBReviewPresentationDeckReminderEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_sendGRBReviewPresentationDeckReminderEmail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_systemIntake(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_systemIntake(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SystemIntake(rctx, fc.Args["id"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntake)
	fc.Result = res
	return ec.marshalOSystemIntake2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntake(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_systemIntake(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "actions":
				return ec.fieldContext_SystemIntake_actions(ctx, field)
			case "adminLead":
				return ec.fieldContext_SystemIntake_adminLead(ctx, field)
			case "archivedAt":
				return ec.fieldContext_SystemIntake_archivedAt(ctx, field)
			case "businessCase":
				return ec.fieldContext_SystemIntake_businessCase(ctx, field)
			case "businessNeed":
				return ec.fieldContext_SystemIntake_businessNeed(ctx, field)
			case "businessOwner":
				return ec.fieldContext_SystemIntake_businessOwner(ctx, field)
			case "businessSolution":
				return ec.fieldContext_SystemIntake_businessSolution(ctx, field)
			case "contract":
				return ec.fieldContext_SystemIntake_contract(ctx, field)
			case "costs":
				return ec.fieldContext_SystemIntake_costs(ctx, field)
			case "annualSpending":
				return ec.fieldContext_SystemIntake_annualSpending(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntake_createdAt(ctx, field)
			case "currentStage":
				return ec.fieldContext_SystemIntake_currentStage(ctx, field)
			case "decisionNextSteps":
				return ec.fieldContext_SystemIntake_decisionNextSteps(ctx, field)
			case "eaCollaborator":
				return ec.fieldContext_SystemIntake_eaCollaborator(ctx, field)
			case "eaCollaboratorName":
				return ec.fieldContext_SystemIntake_eaCollaboratorName(ctx, field)
			case "euaUserId":
				return ec.fieldContext_SystemIntake_euaUserId(ctx, field)
			case "existingFunding":
				return ec.fieldContext_SystemIntake_existingFunding(ctx, field)
			case "fundingSources":
				return ec.fieldContext_SystemIntake_fundingSources(ctx, field)
			case "governanceRequestFeedbacks":
				return ec.fieldContext_SystemIntake_governanceRequestFeedbacks(ctx, field)
			case "governanceTeams":
				return ec.fieldContext_SystemIntake_governanceTeams(ctx, field)
			case "grbDate":
				return ec.fieldContext_SystemIntake_grbDate(ctx, field)
			case "grtDate":
				return ec.fieldContext_SystemIntake_grtDate(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_SystemIntake_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_SystemIntake_nextMeetingDate(ctx, field)
			case "grbReviewStartedAt":
				return ec.fieldContext_SystemIntake_grbReviewStartedAt(ctx, field)
			case "grbReviewers":
				return ec.fieldContext_SystemIntake_grbReviewers(ctx, field)
			case "grbVotingInformation":
				return ec.fieldContext_SystemIntake_grbVotingInformation(ctx, field)
			case "id":
				return ec.fieldContext_SystemIntake_id(ctx, field)
			case "isso":
				return ec.fieldContext_SystemIntake_isso(ctx, field)
			case "lcid":
				return ec.fieldContext_SystemIntake_lcid(ctx, field)
			case "lcidIssuedAt":
				return ec.fieldContext_SystemIntake_lcidIssuedAt(ctx, field)
			case "lcidExpiresAt":
				return ec.fieldContext_SystemIntake_lcidExpiresAt(ctx, field)
			case "lcidScope":
				return ec.fieldContext_SystemIntake_lcidScope(ctx, field)
			case "lcidCostBaseline":
				return ec.fieldContext_SystemIntake_lcidCostBaseline(ctx, field)
			case "lcidRetiresAt":
				return ec.fieldContext_SystemIntake_lcidRetiresAt(ctx, field)
			case "needsEaSupport":
				return ec.fieldContext_SystemIntake_needsEaSupport(ctx, field)
			case "usingSoftware":
				return ec.fieldContext_SystemIntake_usingSoftware(ctx, field)
			case "acquisitionMethods":
				return ec.fieldContext_SystemIntake_acquisitionMethods(ctx, field)
			case "notes":
				return ec.fieldContext_SystemIntake_notes(ctx, field)
			case "oitSecurityCollaborator":
				return ec.fieldContext_SystemIntake_oitSecurityCollaborator(ctx, field)
			case "oitSecurityCollaboratorName":
				return ec.fieldContext_SystemIntake_oitSecurityCollaboratorName(ctx, field)
			case "productManager":
				return ec.fieldContext_SystemIntake_productManager(ctx, field)
			case "projectAcronym":
				return ec.fieldContext_SystemIntake_projectAcronym(ctx, field)
			case "rejectionReason":
				return ec.fieldContext_SystemIntake_rejectionReason(ctx, field)
			case "requestName":
				return ec.fieldContext_SystemIntake_requestName(ctx, field)
			case "requestType":
				return ec.fieldContext_SystemIntake_requestType(ctx, field)
			case "requester":
				return ec.fieldContext_SystemIntake_requester(ctx, field)
			case "requesterName":
				return ec.fieldContext_SystemIntake_requesterName(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_SystemIntake_requesterComponent(ctx, field)
			case "state":
				return ec.fieldContext_SystemIntake_state(ctx, field)
			case "step":
				return ec.fieldContext_SystemIntake_step(ctx, field)
			case "submittedAt":
				return ec.fieldContext_SystemIntake_submittedAt(ctx, field)
			case "trbCollaborator":
				return ec.fieldContext_SystemIntake_trbCollaborator(ctx, field)
			case "trbCollaboratorName":
				return ec.fieldContext_SystemIntake_trbCollaboratorName(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SystemIntake_updatedAt(ctx, field)
			case "grtReviewEmailBody":
				return ec.fieldContext_SystemIntake_grtReviewEmailBody(ctx, field)
			case "decidedAt":
				return ec.fieldContext_SystemIntake_decidedAt(ctx, field)
			case "businessCaseId":
				return ec.fieldContext_SystemIntake_businessCaseId(ctx, field)
			case "cedarSystemId":
				return ec.fieldContext_SystemIntake_cedarSystemId(ctx, field)
			case "documents":
				return ec.fieldContext_SystemIntake_documents(ctx, field)
			case "hasUiChanges":
				return ec.fieldContext_SystemIntake_hasUiChanges(ctx, field)
			case "usesAiTech":
				return ec.fieldContext_SystemIntake_usesAiTech(ctx, field)
			case "itGovTaskStatuses":
				return ec.fieldContext_SystemIntake_itGovTaskStatuses(ctx, field)
			case "requestFormState":
				return ec.fieldContext_SystemIntake_requestFormState(ctx, field)
			case "draftBusinessCaseState":
				return ec.fieldContext_SystemIntake_draftBusinessCaseState(ctx, field)
			case "grtMeetingState":
				return ec.fieldContext_SystemIntake_grtMeetingState(ctx, field)
			case "finalBusinessCaseState":
				return ec.fieldContext_SystemIntake_finalBusinessCaseState(ctx, field)
			case "grbMeetingState":
				return ec.fieldContext_SystemIntake_grbMeetingState(ctx, field)
			case "decisionState":
				return ec.fieldContext_SystemIntake_decisionState(ctx, field)
			case "statusRequester":
				return ec.fieldContext_SystemIntake_statusRequester(ctx, field)
			case "statusAdmin":
				return ec.fieldContext_SystemIntake_statusAdmin(ctx, field)
			case "lcidStatus":
				return ec.fieldContext_SystemIntake_lcidStatus(ctx, field)
			case "trbFollowUpRecommendation":
				return ec.fieldContext_SystemIntake_trbFollowUpRecommendation(ctx, field)
			case "contractName":
				return ec.fieldContext_SystemIntake_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_SystemIntake_relationType(ctx, field)
			case "systems":
				return ec.fieldContext_SystemIntake_systems(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_SystemIntake_contractNumbers(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_SystemIntake_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_SystemIntake_relatedTRBRequests(ctx, field)
			case "grbDiscussions":
				return ec.fieldContext_SystemIntake_grbDiscussions(ctx, field)
			case "grbPresentationLinks":
				return ec.fieldContext_SystemIntake_grbPresentationLinks(ctx, field)
			case "grbPresentationDeckRequesterReminderEmailSentTime":
				return ec.fieldContext_SystemIntake_grbPresentationDeckRequesterReminderEmailSentTime(ctx, field)
			case "grbReviewType":
				return ec.fieldContext_SystemIntake_grbReviewType(ctx, field)
			case "grbReviewAsyncRecordingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncRecordingTime(ctx, field)
			case "grbReviewAsyncEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncEndDate(ctx, field)
			case "grbReviewAsyncGRBMeetingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncGRBMeetingTime(ctx, field)
			case "grbReviewAsyncStatus":
				return ec.fieldContext_SystemIntake_grbReviewAsyncStatus(ctx, field)
			case "grbReviewAsyncManualEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncManualEndDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntake", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_systemIntake_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_systemIntakes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_systemIntakes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SystemIntakes(rctx, fc.Args["openRequests"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.SystemIntake)
	fc.Result = res
	return ec.marshalNSystemIntake2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_systemIntakes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "actions":
				return ec.fieldContext_SystemIntake_actions(ctx, field)
			case "adminLead":
				return ec.fieldContext_SystemIntake_adminLead(ctx, field)
			case "archivedAt":
				return ec.fieldContext_SystemIntake_archivedAt(ctx, field)
			case "businessCase":
				return ec.fieldContext_SystemIntake_businessCase(ctx, field)
			case "businessNeed":
				return ec.fieldContext_SystemIntake_businessNeed(ctx, field)
			case "businessOwner":
				return ec.fieldContext_SystemIntake_businessOwner(ctx, field)
			case "businessSolution":
				return ec.fieldContext_SystemIntake_businessSolution(ctx, field)
			case "contract":
				return ec.fieldContext_SystemIntake_contract(ctx, field)
			case "costs":
				return ec.fieldContext_SystemIntake_costs(ctx, field)
			case "annualSpending":
				return ec.fieldContext_SystemIntake_annualSpending(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntake_createdAt(ctx, field)
			case "currentStage":
				return ec.fieldContext_SystemIntake_currentStage(ctx, field)
			case "decisionNextSteps":
				return ec.fieldContext_SystemIntake_decisionNextSteps(ctx, field)
			case "eaCollaborator":
				return ec.fieldContext_SystemIntake_eaCollaborator(ctx, field)
			case "eaCollaboratorName":
				return ec.fieldContext_SystemIntake_eaCollaboratorName(ctx, field)
			case "euaUserId":
				return ec.fieldContext_SystemIntake_euaUserId(ctx, field)
			case "existingFunding":
				return ec.fieldContext_SystemIntake_existingFunding(ctx, field)
			case "fundingSources":
				return ec.fieldContext_SystemIntake_fundingSources(ctx, field)
			case "governanceRequestFeedbacks":
				return ec.fieldContext_SystemIntake_governanceRequestFeedbacks(ctx, field)
			case "governanceTeams":
				return ec.fieldContext_SystemIntake_governanceTeams(ctx, field)
			case "grbDate":
				return ec.fieldContext_SystemIntake_grbDate(ctx, field)
			case "grtDate":
				return ec.fieldContext_SystemIntake_grtDate(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_SystemIntake_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_SystemIntake_nextMeetingDate(ctx, field)
			case "grbReviewStartedAt":
				return ec.fieldContext_SystemIntake_grbReviewStartedAt(ctx, field)
			case "grbReviewers":
				return ec.fieldContext_SystemIntake_grbReviewers(ctx, field)
			case "grbVotingInformation":
				return ec.fieldContext_SystemIntake_grbVotingInformation(ctx, field)
			case "id":
				return ec.fieldContext_SystemIntake_id(ctx, field)
			case "isso":
				return ec.fieldContext_SystemIntake_isso(ctx, field)
			case "lcid":
				return ec.fieldContext_SystemIntake_lcid(ctx, field)
			case "lcidIssuedAt":
				return ec.fieldContext_SystemIntake_lcidIssuedAt(ctx, field)
			case "lcidExpiresAt":
				return ec.fieldContext_SystemIntake_lcidExpiresAt(ctx, field)
			case "lcidScope":
				return ec.fieldContext_SystemIntake_lcidScope(ctx, field)
			case "lcidCostBaseline":
				return ec.fieldContext_SystemIntake_lcidCostBaseline(ctx, field)
			case "lcidRetiresAt":
				return ec.fieldContext_SystemIntake_lcidRetiresAt(ctx, field)
			case "needsEaSupport":
				return ec.fieldContext_SystemIntake_needsEaSupport(ctx, field)
			case "usingSoftware":
				return ec.fieldContext_SystemIntake_usingSoftware(ctx, field)
			case "acquisitionMethods":
				return ec.fieldContext_SystemIntake_acquisitionMethods(ctx, field)
			case "notes":
				return ec.fieldContext_SystemIntake_notes(ctx, field)
			case "oitSecurityCollaborator":
				return ec.fieldContext_SystemIntake_oitSecurityCollaborator(ctx, field)
			case "oitSecurityCollaboratorName":
				return ec.fieldContext_SystemIntake_oitSecurityCollaboratorName(ctx, field)
			case "productManager":
				return ec.fieldContext_SystemIntake_productManager(ctx, field)
			case "projectAcronym":
				return ec.fieldContext_SystemIntake_projectAcronym(ctx, field)
			case "rejectionReason":
				return ec.fieldContext_SystemIntake_rejectionReason(ctx, field)
			case "requestName":
				return ec.fieldContext_SystemIntake_requestName(ctx, field)
			case "requestType":
				return ec.fieldContext_SystemIntake_requestType(ctx, field)
			case "requester":
				return ec.fieldContext_SystemIntake_requester(ctx, field)
			case "requesterName":
				return ec.fieldContext_SystemIntake_requesterName(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_SystemIntake_requesterComponent(ctx, field)
			case "state":
				return ec.fieldContext_SystemIntake_state(ctx, field)
			case "step":
				return ec.fieldContext_SystemIntake_step(ctx, field)
			case "submittedAt":
				return ec.fieldContext_SystemIntake_submittedAt(ctx, field)
			case "trbCollaborator":
				return ec.fieldContext_SystemIntake_trbCollaborator(ctx, field)
			case "trbCollaboratorName":
				return ec.fieldContext_SystemIntake_trbCollaboratorName(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SystemIntake_updatedAt(ctx, field)
			case "grtReviewEmailBody":
				return ec.fieldContext_SystemIntake_grtReviewEmailBody(ctx, field)
			case "decidedAt":
				return ec.fieldContext_SystemIntake_decidedAt(ctx, field)
			case "businessCaseId":
				return ec.fieldContext_SystemIntake_businessCaseId(ctx, field)
			case "cedarSystemId":
				return ec.fieldContext_SystemIntake_cedarSystemId(ctx, field)
			case "documents":
				return ec.fieldContext_SystemIntake_documents(ctx, field)
			case "hasUiChanges":
				return ec.fieldContext_SystemIntake_hasUiChanges(ctx, field)
			case "usesAiTech":
				return ec.fieldContext_SystemIntake_usesAiTech(ctx, field)
			case "itGovTaskStatuses":
				return ec.fieldContext_SystemIntake_itGovTaskStatuses(ctx, field)
			case "requestFormState":
				return ec.fieldContext_SystemIntake_requestFormState(ctx, field)
			case "draftBusinessCaseState":
				return ec.fieldContext_SystemIntake_draftBusinessCaseState(ctx, field)
			case "grtMeetingState":
				return ec.fieldContext_SystemIntake_grtMeetingState(ctx, field)
			case "finalBusinessCaseState":
				return ec.fieldContext_SystemIntake_finalBusinessCaseState(ctx, field)
			case "grbMeetingState":
				return ec.fieldContext_SystemIntake_grbMeetingState(ctx, field)
			case "decisionState":
				return ec.fieldContext_SystemIntake_decisionState(ctx, field)
			case "statusRequester":
				return ec.fieldContext_SystemIntake_statusRequester(ctx, field)
			case "statusAdmin":
				return ec.fieldContext_SystemIntake_statusAdmin(ctx, field)
			case "lcidStatus":
				return ec.fieldContext_SystemIntake_lcidStatus(ctx, field)
			case "trbFollowUpRecommendation":
				return ec.fieldContext_SystemIntake_trbFollowUpRecommendation(ctx, field)
			case "contractName":
				return ec.fieldContext_SystemIntake_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_SystemIntake_relationType(ctx, field)
			case "systems":
				return ec.fieldContext_SystemIntake_systems(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_SystemIntake_contractNumbers(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_SystemIntake_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_SystemIntake_relatedTRBRequests(ctx, field)
			case "grbDiscussions":
				return ec.fieldContext_SystemIntake_grbDiscussions(ctx, field)
			case "grbPresentationLinks":
				return ec.fieldContext_SystemIntake_grbPresentationLinks(ctx, field)
			case "grbPresentationDeckRequesterReminderEmailSentTime":
				return ec.fieldContext_SystemIntake_grbPresentationDeckRequesterReminderEmailSentTime(ctx, field)
			case "grbReviewType":
				return ec.fieldContext_SystemIntake_grbReviewType(ctx, field)
			case "grbReviewAsyncRecordingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncRecordingTime(ctx, field)
			case "grbReviewAsyncEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncEndDate(ctx, field)
			case "grbReviewAsyncGRBMeetingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncGRBMeetingTime(ctx, field)
			case "grbReviewAsyncStatus":
				return ec.fieldContext_SystemIntake_grbReviewAsyncStatus(ctx, field)
			case "grbReviewAsyncManualEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncManualEndDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntake", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_systemIntakes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_mySystemIntakes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_mySystemIntakes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MySystemIntakes(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.SystemIntake)
	fc.Result = res
	return ec.marshalNSystemIntake2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_mySystemIntakes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "actions":
				return ec.fieldContext_SystemIntake_actions(ctx, field)
			case "adminLead":
				return ec.fieldContext_SystemIntake_adminLead(ctx, field)
			case "archivedAt":
				return ec.fieldContext_SystemIntake_archivedAt(ctx, field)
			case "businessCase":
				return ec.fieldContext_SystemIntake_businessCase(ctx, field)
			case "businessNeed":
				return ec.fieldContext_SystemIntake_businessNeed(ctx, field)
			case "businessOwner":
				return ec.fieldContext_SystemIntake_businessOwner(ctx, field)
			case "businessSolution":
				return ec.fieldContext_SystemIntake_businessSolution(ctx, field)
			case "contract":
				return ec.fieldContext_SystemIntake_contract(ctx, field)
			case "costs":
				return ec.fieldContext_SystemIntake_costs(ctx, field)
			case "annualSpending":
				return ec.fieldContext_SystemIntake_annualSpending(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntake_createdAt(ctx, field)
			case "currentStage":
				return ec.fieldContext_SystemIntake_currentStage(ctx, field)
			case "decisionNextSteps":
				return ec.fieldContext_SystemIntake_decisionNextSteps(ctx, field)
			case "eaCollaborator":
				return ec.fieldContext_SystemIntake_eaCollaborator(ctx, field)
			case "eaCollaboratorName":
				return ec.fieldContext_SystemIntake_eaCollaboratorName(ctx, field)
			case "euaUserId":
				return ec.fieldContext_SystemIntake_euaUserId(ctx, field)
			case "existingFunding":
				return ec.fieldContext_SystemIntake_existingFunding(ctx, field)
			case "fundingSources":
				return ec.fieldContext_SystemIntake_fundingSources(ctx, field)
			case "governanceRequestFeedbacks":
				return ec.fieldContext_SystemIntake_governanceRequestFeedbacks(ctx, field)
			case "governanceTeams":
				return ec.fieldContext_SystemIntake_governanceTeams(ctx, field)
			case "grbDate":
				return ec.fieldContext_SystemIntake_grbDate(ctx, field)
			case "grtDate":
				return ec.fieldContext_SystemIntake_grtDate(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_SystemIntake_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_SystemIntake_nextMeetingDate(ctx, field)
			case "grbReviewStartedAt":
				return ec.fieldContext_SystemIntake_grbReviewStartedAt(ctx, field)
			case "grbReviewers":
				return ec.fieldContext_SystemIntake_grbReviewers(ctx, field)
			case "grbVotingInformation":
				return ec.fieldContext_SystemIntake_grbVotingInformation(ctx, field)
			case "id":
				return ec.fieldContext_SystemIntake_id(ctx, field)
			case "isso":
				return ec.fieldContext_SystemIntake_isso(ctx, field)
			case "lcid":
				return ec.fieldContext_SystemIntake_lcid(ctx, field)
			case "lcidIssuedAt":
				return ec.fieldContext_SystemIntake_lcidIssuedAt(ctx, field)
			case "lcidExpiresAt":
				return ec.fieldContext_SystemIntake_lcidExpiresAt(ctx, field)
			case "lcidScope":
				return ec.fieldContext_SystemIntake_lcidScope(ctx, field)
			case "lcidCostBaseline":
				return ec.fieldContext_SystemIntake_lcidCostBaseline(ctx, field)
			case "lcidRetiresAt":
				return ec.fieldContext_SystemIntake_lcidRetiresAt(ctx, field)
			case "needsEaSupport":
				return ec.fieldContext_SystemIntake_needsEaSupport(ctx, field)
			case "usingSoftware":
				return ec.fieldContext_SystemIntake_usingSoftware(ctx, field)
			case "acquisitionMethods":
				return ec.fieldContext_SystemIntake_acquisitionMethods(ctx, field)
			case "notes":
				return ec.fieldContext_SystemIntake_notes(ctx, field)
			case "oitSecurityCollaborator":
				return ec.fieldContext_SystemIntake_oitSecurityCollaborator(ctx, field)
			case "oitSecurityCollaboratorName":
				return ec.fieldContext_SystemIntake_oitSecurityCollaboratorName(ctx, field)
			case "productManager":
				return ec.fieldContext_SystemIntake_productManager(ctx, field)
			case "projectAcronym":
				return ec.fieldContext_SystemIntake_projectAcronym(ctx, field)
			case "rejectionReason":
				return ec.fieldContext_SystemIntake_rejectionReason(ctx, field)
			case "requestName":
				return ec.fieldContext_SystemIntake_requestName(ctx, field)
			case "requestType":
				return ec.fieldContext_SystemIntake_requestType(ctx, field)
			case "requester":
				return ec.fieldContext_SystemIntake_requester(ctx, field)
			case "requesterName":
				return ec.fieldContext_SystemIntake_requesterName(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_SystemIntake_requesterComponent(ctx, field)
			case "state":
				return ec.fieldContext_SystemIntake_state(ctx, field)
			case "step":
				return ec.fieldContext_SystemIntake_step(ctx, field)
			case "submittedAt":
				return ec.fieldContext_SystemIntake_submittedAt(ctx, field)
			case "trbCollaborator":
				return ec.fieldContext_SystemIntake_trbCollaborator(ctx, field)
			case "trbCollaboratorName":
				return ec.fieldContext_SystemIntake_trbCollaboratorName(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SystemIntake_updatedAt(ctx, field)
			case "grtReviewEmailBody":
				return ec.fieldContext_SystemIntake_grtReviewEmailBody(ctx, field)
			case "decidedAt":
				return ec.fieldContext_SystemIntake_decidedAt(ctx, field)
			case "businessCaseId":
				return ec.fieldContext_SystemIntake_businessCaseId(ctx, field)
			case "cedarSystemId":
				return ec.fieldContext_SystemIntake_cedarSystemId(ctx, field)
			case "documents":
				return ec.fieldContext_SystemIntake_documents(ctx, field)
			case "hasUiChanges":
				return ec.fieldContext_SystemIntake_hasUiChanges(ctx, field)
			case "usesAiTech":
				return ec.fieldContext_SystemIntake_usesAiTech(ctx, field)
			case "itGovTaskStatuses":
				return ec.fieldContext_SystemIntake_itGovTaskStatuses(ctx, field)
			case "requestFormState":
				return ec.fieldContext_SystemIntake_requestFormState(ctx, field)
			case "draftBusinessCaseState":
				return ec.fieldContext_SystemIntake_draftBusinessCaseState(ctx, field)
			case "grtMeetingState":
				return ec.fieldContext_SystemIntake_grtMeetingState(ctx, field)
			case "finalBusinessCaseState":
				return ec.fieldContext_SystemIntake_finalBusinessCaseState(ctx, field)
			case "grbMeetingState":
				return ec.fieldContext_SystemIntake_grbMeetingState(ctx, field)
			case "decisionState":
				return ec.fieldContext_SystemIntake_decisionState(ctx, field)
			case "statusRequester":
				return ec.fieldContext_SystemIntake_statusRequester(ctx, field)
			case "statusAdmin":
				return ec.fieldContext_SystemIntake_statusAdmin(ctx, field)
			case "lcidStatus":
				return ec.fieldContext_SystemIntake_lcidStatus(ctx, field)
			case "trbFollowUpRecommendation":
				return ec.fieldContext_SystemIntake_trbFollowUpRecommendation(ctx, field)
			case "contractName":
				return ec.fieldContext_SystemIntake_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_SystemIntake_relationType(ctx, field)
			case "systems":
				return ec.fieldContext_SystemIntake_systems(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_SystemIntake_contractNumbers(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_SystemIntake_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_SystemIntake_relatedTRBRequests(ctx, field)
			case "grbDiscussions":
				return ec.fieldContext_SystemIntake_grbDiscussions(ctx, field)
			case "grbPresentationLinks":
				return ec.fieldContext_SystemIntake_grbPresentationLinks(ctx, field)
			case "grbPresentationDeckRequesterReminderEmailSentTime":
				return ec.fieldContext_SystemIntake_grbPresentationDeckRequesterReminderEmailSentTime(ctx, field)
			case "grbReviewType":
				return ec.fieldContext_SystemIntake_grbReviewType(ctx, field)
			case "grbReviewAsyncRecordingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncRecordingTime(ctx, field)
			case "grbReviewAsyncEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncEndDate(ctx, field)
			case "grbReviewAsyncGRBMeetingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncGRBMeetingTime(ctx, field)
			case "grbReviewAsyncStatus":
				return ec.fieldContext_SystemIntake_grbReviewAsyncStatus(ctx, field)
			case "grbReviewAsyncManualEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncManualEndDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntake", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_systemIntakesWithReviewRequested(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_systemIntakesWithReviewRequested(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SystemIntakesWithReviewRequested(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.SystemIntake)
	fc.Result = res
	return ec.marshalNSystemIntake2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_systemIntakesWithReviewRequested(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "actions":
				return ec.fieldContext_SystemIntake_actions(ctx, field)
			case "adminLead":
				return ec.fieldContext_SystemIntake_adminLead(ctx, field)
			case "archivedAt":
				return ec.fieldContext_SystemIntake_archivedAt(ctx, field)
			case "businessCase":
				return ec.fieldContext_SystemIntake_businessCase(ctx, field)
			case "businessNeed":
				return ec.fieldContext_SystemIntake_businessNeed(ctx, field)
			case "businessOwner":
				return ec.fieldContext_SystemIntake_businessOwner(ctx, field)
			case "businessSolution":
				return ec.fieldContext_SystemIntake_businessSolution(ctx, field)
			case "contract":
				return ec.fieldContext_SystemIntake_contract(ctx, field)
			case "costs":
				return ec.fieldContext_SystemIntake_costs(ctx, field)
			case "annualSpending":
				return ec.fieldContext_SystemIntake_annualSpending(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntake_createdAt(ctx, field)
			case "currentStage":
				return ec.fieldContext_SystemIntake_currentStage(ctx, field)
			case "decisionNextSteps":
				return ec.fieldContext_SystemIntake_decisionNextSteps(ctx, field)
			case "eaCollaborator":
				return ec.fieldContext_SystemIntake_eaCollaborator(ctx, field)
			case "eaCollaboratorName":
				return ec.fieldContext_SystemIntake_eaCollaboratorName(ctx, field)
			case "euaUserId":
				return ec.fieldContext_SystemIntake_euaUserId(ctx, field)
			case "existingFunding":
				return ec.fieldContext_SystemIntake_existingFunding(ctx, field)
			case "fundingSources":
				return ec.fieldContext_SystemIntake_fundingSources(ctx, field)
			case "governanceRequestFeedbacks":
				return ec.fieldContext_SystemIntake_governanceRequestFeedbacks(ctx, field)
			case "governanceTeams":
				return ec.fieldContext_SystemIntake_governanceTeams(ctx, field)
			case "grbDate":
				return ec.fieldContext_SystemIntake_grbDate(ctx, field)
			case "grtDate":
				return ec.fieldContext_SystemIntake_grtDate(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_SystemIntake_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_SystemIntake_nextMeetingDate(ctx, field)
			case "grbReviewStartedAt":
				return ec.fieldContext_SystemIntake_grbReviewStartedAt(ctx, field)
			case "grbReviewers":
				return ec.fieldContext_SystemIntake_grbReviewers(ctx, field)
			case "grbVotingInformation":
				return ec.fieldContext_SystemIntake_grbVotingInformation(ctx, field)
			case "id":
				return ec.fieldContext_SystemIntake_id(ctx, field)
			case "isso":
				return ec.fieldContext_SystemIntake_isso(ctx, field)
			case "lcid":
				return ec.fieldContext_SystemIntake_lcid(ctx, field)
			case "lcidIssuedAt":
				return ec.fieldContext_SystemIntake_lcidIssuedAt(ctx, field)
			case "lcidExpiresAt":
				return ec.fieldContext_SystemIntake_lcidExpiresAt(ctx, field)
			case "lcidScope":
				return ec.fieldContext_SystemIntake_lcidScope(ctx, field)
			case "lcidCostBaseline":
				return ec.fieldContext_SystemIntake_lcidCostBaseline(ctx, field)
			case "lcidRetiresAt":
				return ec.fieldContext_SystemIntake_lcidRetiresAt(ctx, field)
			case "needsEaSupport":
				return ec.fieldContext_SystemIntake_needsEaSupport(ctx, field)
			case "usingSoftware":
				return ec.fieldContext_SystemIntake_usingSoftware(ctx, field)
			case "acquisitionMethods":
				return ec.fieldContext_SystemIntake_acquisitionMethods(ctx, field)
			case "notes":
				return ec.fieldContext_SystemIntake_notes(ctx, field)
			case "oitSecurityCollaborator":
				return ec.fieldContext_SystemIntake_oitSecurityCollaborator(ctx, field)
			case "oitSecurityCollaboratorName":
				return ec.fieldContext_SystemIntake_oitSecurityCollaboratorName(ctx, field)
			case "productManager":
				return ec.fieldContext_SystemIntake_productManager(ctx, field)
			case "projectAcronym":
				return ec.fieldContext_SystemIntake_projectAcronym(ctx, field)
			case "rejectionReason":
				return ec.fieldContext_SystemIntake_rejectionReason(ctx, field)
			case "requestName":
				return ec.fieldContext_SystemIntake_requestName(ctx, field)
			case "requestType":
				return ec.fieldContext_SystemIntake_requestType(ctx, field)
			case "requester":
				return ec.fieldContext_SystemIntake_requester(ctx, field)
			case "requesterName":
				return ec.fieldContext_SystemIntake_requesterName(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_SystemIntake_requesterComponent(ctx, field)
			case "state":
				return ec.fieldContext_SystemIntake_state(ctx, field)
			case "step":
				return ec.fieldContext_SystemIntake_step(ctx, field)
			case "submittedAt":
				return ec.fieldContext_SystemIntake_submittedAt(ctx, field)
			case "trbCollaborator":
				return ec.fieldContext_SystemIntake_trbCollaborator(ctx, field)
			case "trbCollaboratorName":
				return ec.fieldContext_SystemIntake_trbCollaboratorName(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SystemIntake_updatedAt(ctx, field)
			case "grtReviewEmailBody":
				return ec.fieldContext_SystemIntake_grtReviewEmailBody(ctx, field)
			case "decidedAt":
				return ec.fieldContext_SystemIntake_decidedAt(ctx, field)
			case "businessCaseId":
				return ec.fieldContext_SystemIntake_businessCaseId(ctx, field)
			case "cedarSystemId":
				return ec.fieldContext_SystemIntake_cedarSystemId(ctx, field)
			case "documents":
				return ec.fieldContext_SystemIntake_documents(ctx, field)
			case "hasUiChanges":
				return ec.fieldContext_SystemIntake_hasUiChanges(ctx, field)
			case "usesAiTech":
				return ec.fieldContext_SystemIntake_usesAiTech(ctx, field)
			case "itGovTaskStatuses":
				return ec.fieldContext_SystemIntake_itGovTaskStatuses(ctx, field)
			case "requestFormState":
				return ec.fieldContext_SystemIntake_requestFormState(ctx, field)
			case "draftBusinessCaseState":
				return ec.fieldContext_SystemIntake_draftBusinessCaseState(ctx, field)
			case "grtMeetingState":
				return ec.fieldContext_SystemIntake_grtMeetingState(ctx, field)
			case "finalBusinessCaseState":
				return ec.fieldContext_SystemIntake_finalBusinessCaseState(ctx, field)
			case "grbMeetingState":
				return ec.fieldContext_SystemIntake_grbMeetingState(ctx, field)
			case "decisionState":
				return ec.fieldContext_SystemIntake_decisionState(ctx, field)
			case "statusRequester":
				return ec.fieldContext_SystemIntake_statusRequester(ctx, field)
			case "statusAdmin":
				return ec.fieldContext_SystemIntake_statusAdmin(ctx, field)
			case "lcidStatus":
				return ec.fieldContext_SystemIntake_lcidStatus(ctx, field)
			case "trbFollowUpRecommendation":
				return ec.fieldContext_SystemIntake_trbFollowUpRecommendation(ctx, field)
			case "contractName":
				return ec.fieldContext_SystemIntake_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_SystemIntake_relationType(ctx, field)
			case "systems":
				return ec.fieldContext_SystemIntake_systems(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_SystemIntake_contractNumbers(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_SystemIntake_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_SystemIntake_relatedTRBRequests(ctx, field)
			case "grbDiscussions":
				return ec.fieldContext_SystemIntake_grbDiscussions(ctx, field)
			case "grbPresentationLinks":
				return ec.fieldContext_SystemIntake_grbPresentationLinks(ctx, field)
			case "grbPresentationDeckRequesterReminderEmailSentTime":
				return ec.fieldContext_SystemIntake_grbPresentationDeckRequesterReminderEmailSentTime(ctx, field)
			case "grbReviewType":
				return ec.fieldContext_SystemIntake_grbReviewType(ctx, field)
			case "grbReviewAsyncRecordingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncRecordingTime(ctx, field)
			case "grbReviewAsyncEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncEndDate(ctx, field)
			case "grbReviewAsyncGRBMeetingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncGRBMeetingTime(ctx, field)
			case "grbReviewAsyncStatus":
				return ec.fieldContext_SystemIntake_grbReviewAsyncStatus(ctx, field)
			case "grbReviewAsyncManualEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncManualEndDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntake", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_systemIntakesWithLcids(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_systemIntakesWithLcids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SystemIntakesWithLcids(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.SystemIntake)
	fc.Result = res
	return ec.marshalNSystemIntake2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_systemIntakesWithLcids(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "actions":
				return ec.fieldContext_SystemIntake_actions(ctx, field)
			case "adminLead":
				return ec.fieldContext_SystemIntake_adminLead(ctx, field)
			case "archivedAt":
				return ec.fieldContext_SystemIntake_archivedAt(ctx, field)
			case "businessCase":
				return ec.fieldContext_SystemIntake_businessCase(ctx, field)
			case "businessNeed":
				return ec.fieldContext_SystemIntake_businessNeed(ctx, field)
			case "businessOwner":
				return ec.fieldContext_SystemIntake_businessOwner(ctx, field)
			case "businessSolution":
				return ec.fieldContext_SystemIntake_businessSolution(ctx, field)
			case "contract":
				return ec.fieldContext_SystemIntake_contract(ctx, field)
			case "costs":
				return ec.fieldContext_SystemIntake_costs(ctx, field)
			case "annualSpending":
				return ec.fieldContext_SystemIntake_annualSpending(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntake_createdAt(ctx, field)
			case "currentStage":
				return ec.fieldContext_SystemIntake_currentStage(ctx, field)
			case "decisionNextSteps":
				return ec.fieldContext_SystemIntake_decisionNextSteps(ctx, field)
			case "eaCollaborator":
				return ec.fieldContext_SystemIntake_eaCollaborator(ctx, field)
			case "eaCollaboratorName":
				return ec.fieldContext_SystemIntake_eaCollaboratorName(ctx, field)
			case "euaUserId":
				return ec.fieldContext_SystemIntake_euaUserId(ctx, field)
			case "existingFunding":
				return ec.fieldContext_SystemIntake_existingFunding(ctx, field)
			case "fundingSources":
				return ec.fieldContext_SystemIntake_fundingSources(ctx, field)
			case "governanceRequestFeedbacks":
				return ec.fieldContext_SystemIntake_governanceRequestFeedbacks(ctx, field)
			case "governanceTeams":
				return ec.fieldContext_SystemIntake_governanceTeams(ctx, field)
			case "grbDate":
				return ec.fieldContext_SystemIntake_grbDate(ctx, field)
			case "grtDate":
				return ec.fieldContext_SystemIntake_grtDate(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_SystemIntake_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_SystemIntake_nextMeetingDate(ctx, field)
			case "grbReviewStartedAt":
				return ec.fieldContext_SystemIntake_grbReviewStartedAt(ctx, field)
			case "grbReviewers":
				return ec.fieldContext_SystemIntake_grbReviewers(ctx, field)
			case "grbVotingInformation":
				return ec.fieldContext_SystemIntake_grbVotingInformation(ctx, field)
			case "id":
				return ec.fieldContext_SystemIntake_id(ctx, field)
			case "isso":
				return ec.fieldContext_SystemIntake_isso(ctx, field)
			case "lcid":
				return ec.fieldContext_SystemIntake_lcid(ctx, field)
			case "lcidIssuedAt":
				return ec.fieldContext_SystemIntake_lcidIssuedAt(ctx, field)
			case "lcidExpiresAt":
				return ec.fieldContext_SystemIntake_lcidExpiresAt(ctx, field)
			case "lcidScope":
				return ec.fieldContext_SystemIntake_lcidScope(ctx, field)
			case "lcidCostBaseline":
				return ec.fieldContext_SystemIntake_lcidCostBaseline(ctx, field)
			case "lcidRetiresAt":
				return ec.fieldContext_SystemIntake_lcidRetiresAt(ctx, field)
			case "needsEaSupport":
				return ec.fieldContext_SystemIntake_needsEaSupport(ctx, field)
			case "usingSoftware":
				return ec.fieldContext_SystemIntake_usingSoftware(ctx, field)
			case "acquisitionMethods":
				return ec.fieldContext_SystemIntake_acquisitionMethods(ctx, field)
			case "notes":
				return ec.fieldContext_SystemIntake_notes(ctx, field)
			case "oitSecurityCollaborator":
				return ec.fieldContext_SystemIntake_oitSecurityCollaborator(ctx, field)
			case "oitSecurityCollaboratorName":
				return ec.fieldContext_SystemIntake_oitSecurityCollaboratorName(ctx, field)
			case "productManager":
				return ec.fieldContext_SystemIntake_productManager(ctx, field)
			case "projectAcronym":
				return ec.fieldContext_SystemIntake_projectAcronym(ctx, field)
			case "rejectionReason":
				return ec.fieldContext_SystemIntake_rejectionReason(ctx, field)
			case "requestName":
				return ec.fieldContext_SystemIntake_requestName(ctx, field)
			case "requestType":
				return ec.fieldContext_SystemIntake_requestType(ctx, field)
			case "requester":
				return ec.fieldContext_SystemIntake_requester(ctx, field)
			case "requesterName":
				return ec.fieldContext_SystemIntake_requesterName(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_SystemIntake_requesterComponent(ctx, field)
			case "state":
				return ec.fieldContext_SystemIntake_state(ctx, field)
			case "step":
				return ec.fieldContext_SystemIntake_step(ctx, field)
			case "submittedAt":
				return ec.fieldContext_SystemIntake_submittedAt(ctx, field)
			case "trbCollaborator":
				return ec.fieldContext_SystemIntake_trbCollaborator(ctx, field)
			case "trbCollaboratorName":
				return ec.fieldContext_SystemIntake_trbCollaboratorName(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SystemIntake_updatedAt(ctx, field)
			case "grtReviewEmailBody":
				return ec.fieldContext_SystemIntake_grtReviewEmailBody(ctx, field)
			case "decidedAt":
				return ec.fieldContext_SystemIntake_decidedAt(ctx, field)
			case "businessCaseId":
				return ec.fieldContext_SystemIntake_businessCaseId(ctx, field)
			case "cedarSystemId":
				return ec.fieldContext_SystemIntake_cedarSystemId(ctx, field)
			case "documents":
				return ec.fieldContext_SystemIntake_documents(ctx, field)
			case "hasUiChanges":
				return ec.fieldContext_SystemIntake_hasUiChanges(ctx, field)
			case "usesAiTech":
				return ec.fieldContext_SystemIntake_usesAiTech(ctx, field)
			case "itGovTaskStatuses":
				return ec.fieldContext_SystemIntake_itGovTaskStatuses(ctx, field)
			case "requestFormState":
				return ec.fieldContext_SystemIntake_requestFormState(ctx, field)
			case "draftBusinessCaseState":
				return ec.fieldContext_SystemIntake_draftBusinessCaseState(ctx, field)
			case "grtMeetingState":
				return ec.fieldContext_SystemIntake_grtMeetingState(ctx, field)
			case "finalBusinessCaseState":
				return ec.fieldContext_SystemIntake_finalBusinessCaseState(ctx, field)
			case "grbMeetingState":
				return ec.fieldContext_SystemIntake_grbMeetingState(ctx, field)
			case "decisionState":
				return ec.fieldContext_SystemIntake_decisionState(ctx, field)
			case "statusRequester":
				return ec.fieldContext_SystemIntake_statusRequester(ctx, field)
			case "statusAdmin":
				return ec.fieldContext_SystemIntake_statusAdmin(ctx, field)
			case "lcidStatus":
				return ec.fieldContext_SystemIntake_lcidStatus(ctx, field)
			case "trbFollowUpRecommendation":
				return ec.fieldContext_SystemIntake_trbFollowUpRecommendation(ctx, field)
			case "contractName":
				return ec.fieldContext_SystemIntake_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_SystemIntake_relationType(ctx, field)
			case "systems":
				return ec.fieldContext_SystemIntake_systems(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_SystemIntake_contractNumbers(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_SystemIntake_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_SystemIntake_relatedTRBRequests(ctx, field)
			case "grbDiscussions":
				return ec.fieldContext_SystemIntake_grbDiscussions(ctx, field)
			case "grbPresentationLinks":
				return ec.fieldContext_SystemIntake_grbPresentationLinks(ctx, field)
			case "grbPresentationDeckRequesterReminderEmailSentTime":
				return ec.fieldContext_SystemIntake_grbPresentationDeckRequesterReminderEmailSentTime(ctx, field)
			case "grbReviewType":
				return ec.fieldContext_SystemIntake_grbReviewType(ctx, field)
			case "grbReviewAsyncRecordingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncRecordingTime(ctx, field)
			case "grbReviewAsyncEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncEndDate(ctx, field)
			case "grbReviewAsyncGRBMeetingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncGRBMeetingTime(ctx, field)
			case "grbReviewAsyncStatus":
				return ec.fieldContext_SystemIntake_grbReviewAsyncStatus(ctx, field)
			case "grbReviewAsyncManualEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncManualEndDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntake", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_compareGRBReviewersByIntakeID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_compareGRBReviewersByIntakeID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CompareGRBReviewersByIntakeID(rctx, fc.Args["id"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.GRBReviewerComparisonIntake)
	fc.Result = res
	return ec.marshalNGRBReviewerComparisonIntake2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGRBReviewerComparisonIntakeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_compareGRBReviewersByIntakeID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GRBReviewerComparisonIntake_id(ctx, field)
			case "requestName":
				return ec.fieldContext_GRBReviewerComparisonIntake_requestName(ctx, field)
			case "reviewers":
				return ec.fieldContext_GRBReviewerComparisonIntake_reviewers(ctx, field)
			case "intakeCreatedAt":
				return ec.fieldContext_GRBReviewerComparisonIntake_intakeCreatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GRBReviewerComparisonIntake", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_compareGRBReviewersByIntakeID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_currentUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_currentUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CurrentUser(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CurrentUser)
	fc.Result = res
	return ec.marshalOCurrentUser2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCurrentUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_currentUser(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "launchDarkly":
				return ec.fieldContext_CurrentUser_launchDarkly(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CurrentUser", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_cedarAuthorityToOperate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cedarAuthorityToOperate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CedarAuthorityToOperate(rctx, fc.Args["cedarSystemID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CedarAuthorityToOperate)
	fc.Result = res
	return ec.marshalNCedarAuthorityToOperate2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarAuthorityToOperateᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cedarAuthorityToOperate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cedarId":
				return ec.fieldContext_CedarAuthorityToOperate_cedarId(ctx, field)
			case "uuid":
				return ec.fieldContext_CedarAuthorityToOperate_uuid(ctx, field)
			case "actualDispositionDate":
				return ec.fieldContext_CedarAuthorityToOperate_actualDispositionDate(ctx, field)
			case "containsPersonallyIdentifiableInformation":
				return ec.fieldContext_CedarAuthorityToOperate_containsPersonallyIdentifiableInformation(ctx, field)
			case "countOfTotalNonPrivilegedUserPopulation":
				return ec.fieldContext_CedarAuthorityToOperate_countOfTotalNonPrivilegedUserPopulation(ctx, field)
			case "countOfOpenPoams":
				return ec.fieldContext_CedarAuthorityToOperate_countOfOpenPoams(ctx, field)
			case "countOfTotalPrivilegedUserPopulation":
				return ec.fieldContext_CedarAuthorityToOperate_countOfTotalPrivilegedUserPopulation(ctx, field)
			case "dateAuthorizationMemoExpires":
				return ec.fieldContext_CedarAuthorityToOperate_dateAuthorizationMemoExpires(ctx, field)
			case "dateAuthorizationMemoSigned":
				return ec.fieldContext_CedarAuthorityToOperate_dateAuthorizationMemoSigned(ctx, field)
			case "eAuthenticationLevel":
				return ec.fieldContext_CedarAuthorityToOperate_eAuthenticationLevel(ctx, field)
			case "fips199OverallImpactRating":
				return ec.fieldContext_CedarAuthorityToOperate_fips199OverallImpactRating(ctx, field)
			case "fismaSystemAcronym":
				return ec.fieldContext_CedarAuthorityToOperate_fismaSystemAcronym(ctx, field)
			case "fismaSystemName":
				return ec.fieldContext_CedarAuthorityToOperate_fismaSystemName(ctx, field)
			case "isAccessedByNonOrganizationalUsers":
				return ec.fieldContext_CedarAuthorityToOperate_isAccessedByNonOrganizationalUsers(ctx, field)
			case "isPiiLimitedToUserNameAndPass":
				return ec.fieldContext_CedarAuthorityToOperate_isPiiLimitedToUserNameAndPass(ctx, field)
			case "isProtectedHealthInformation":
				return ec.fieldContext_CedarAuthorityToOperate_isProtectedHealthInformation(ctx, field)
			case "lastActScaDate":
				return ec.fieldContext_CedarAuthorityToOperate_lastActScaDate(ctx, field)
			case "lastAssessmentDate":
				return ec.fieldContext_CedarAuthorityToOperate_lastAssessmentDate(ctx, field)
			case "lastContingencyPlanCompletionDate":
				return ec.fieldContext_CedarAuthorityToOperate_lastContingencyPlanCompletionDate(ctx, field)
			case "lastPenTestDate":
				return ec.fieldContext_CedarAuthorityToOperate_lastPenTestDate(ctx, field)
			case "piaCompletionDate":
				return ec.fieldContext_CedarAuthorityToOperate_piaCompletionDate(ctx, field)
			case "primaryCyberRiskAdvisor":
				return ec.fieldContext_CedarAuthorityToOperate_primaryCyberRiskAdvisor(ctx, field)
			case "privacySubjectMatterExpert":
				return ec.fieldContext_CedarAuthorityToOperate_privacySubjectMatterExpert(ctx, field)
			case "recoveryPointObjective":
				return ec.fieldContext_CedarAuthorityToOperate_recoveryPointObjective(ctx, field)
			case "recoveryTimeObjective":
				return ec.fieldContext_CedarAuthorityToOperate_recoveryTimeObjective(ctx, field)
			case "systemOfRecordsNotice":
				return ec.fieldContext_CedarAuthorityToOperate_systemOfRecordsNotice(ctx, field)
			case "tlcPhase":
				return ec.fieldContext_CedarAuthorityToOperate_tlcPhase(ctx, field)
			case "xlcPhase":
				return ec.fieldContext_CedarAuthorityToOperate_xlcPhase(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarAuthorityToOperate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_cedarAuthorityToOperate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_cedarBudget(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cedarBudget(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CedarBudget(rctx, fc.Args["cedarSystemID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.CedarBudget)
	fc.Result = res
	return ec.marshalOCedarBudget2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarBudgetᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cedarBudget(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "fiscalYear":
				return ec.fieldContext_CedarBudget_fiscalYear(ctx, field)
			case "funding":
				return ec.fieldContext_CedarBudget_funding(ctx, field)
			case "fundingId":
				return ec.fieldContext_CedarBudget_fundingId(ctx, field)
			case "fundingSource":
				return ec.fieldContext_CedarBudget_fundingSource(ctx, field)
			case "id":
				return ec.fieldContext_CedarBudget_id(ctx, field)
			case "name":
				return ec.fieldContext_CedarBudget_name(ctx, field)
			case "projectId":
				return ec.fieldContext_CedarBudget_projectId(ctx, field)
			case "projectTitle":
				return ec.fieldContext_CedarBudget_projectTitle(ctx, field)
			case "systemId":
				return ec.fieldContext_CedarBudget_systemId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarBudget", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_cedarBudget_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_cedarBudgetSystemCost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cedarBudgetSystemCost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CedarBudgetSystemCost(rctx, fc.Args["cedarSystemID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CedarBudgetSystemCost)
	fc.Result = res
	return ec.marshalOCedarBudgetSystemCost2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarBudgetSystemCost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cedarBudgetSystemCost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "budgetActualCost":
				return ec.fieldContext_CedarBudgetSystemCost_budgetActualCost(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarBudgetSystemCost", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_cedarBudgetSystemCost_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_cedarPersonsByCommonName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cedarPersonsByCommonName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CedarPersonsByCommonName(rctx, fc.Args["commonName"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.UserInfo)
	fc.Result = res
	return ec.marshalNUserInfo2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUserInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cedarPersonsByCommonName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstName":
				return ec.fieldContext_UserInfo_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_UserInfo_lastName(ctx, field)
			case "commonName":
				return ec.fieldContext_UserInfo_commonName(ctx, field)
			case "email":
				return ec.fieldContext_UserInfo_email(ctx, field)
			case "euaUserId":
				return ec.fieldContext_UserInfo_euaUserId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_cedarPersonsByCommonName_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_cedarSoftwareProducts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cedarSoftwareProducts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CedarSoftwareProducts(rctx, fc.Args["cedarSystemId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CedarSoftwareProducts)
	fc.Result = res
	return ec.marshalOCedarSoftwareProducts2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSoftwareProducts(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cedarSoftwareProducts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "aiSolnCatg":
				return ec.fieldContext_CedarSoftwareProducts_aiSolnCatg(ctx, field)
			case "aiSolnCatgOther":
				return ec.fieldContext_CedarSoftwareProducts_aiSolnCatgOther(ctx, field)
			case "apiDataArea":
				return ec.fieldContext_CedarSoftwareProducts_apiDataArea(ctx, field)
			case "apiDescPubLocation":
				return ec.fieldContext_CedarSoftwareProducts_apiDescPubLocation(ctx, field)
			case "apiDescPublished":
				return ec.fieldContext_CedarSoftwareProducts_apiDescPublished(ctx, field)
			case "apiFHIRUse":
				return ec.fieldContext_CedarSoftwareProducts_apiFHIRUse(ctx, field)
			case "apiFHIRUseOther":
				return ec.fieldContext_CedarSoftwareProducts_apiFHIRUseOther(ctx, field)
			case "apiHasPortal":
				return ec.fieldContext_CedarSoftwareProducts_apiHasPortal(ctx, field)
			case "apisAccessibility":
				return ec.fieldContext_CedarSoftwareProducts_apisAccessibility(ctx, field)
			case "apisDeveloped":
				return ec.fieldContext_CedarSoftwareProducts_apisDeveloped(ctx, field)
			case "developmentStage":
				return ec.fieldContext_CedarSoftwareProducts_developmentStage(ctx, field)
			case "softwareProducts":
				return ec.fieldContext_CedarSoftwareProducts_softwareProducts(ctx, field)
			case "systemHasAPIGateway":
				return ec.fieldContext_CedarSoftwareProducts_systemHasAPIGateway(ctx, field)
			case "usesAiTech":
				return ec.fieldContext_CedarSoftwareProducts_usesAiTech(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarSoftwareProducts", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_cedarSoftwareProducts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_cedarSystem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cedarSystem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CedarSystem(rctx, fc.Args["cedarSystemId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CedarSystem)
	fc.Result = res
	return ec.marshalOCedarSystem2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSystem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cedarSystem(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CedarSystem_id(ctx, field)
			case "name":
				return ec.fieldContext_CedarSystem_name(ctx, field)
			case "description":
				return ec.fieldContext_CedarSystem_description(ctx, field)
			case "acronym":
				return ec.fieldContext_CedarSystem_acronym(ctx, field)
			case "atoEffectiveDate":
				return ec.fieldContext_CedarSystem_atoEffectiveDate(ctx, field)
			case "atoExpirationDate":
				return ec.fieldContext_CedarSystem_atoExpirationDate(ctx, field)
			case "status":
				return ec.fieldContext_CedarSystem_status(ctx, field)
			case "businessOwnerOrg":
				return ec.fieldContext_CedarSystem_businessOwnerOrg(ctx, field)
			case "businessOwnerOrgComp":
				return ec.fieldContext_CedarSystem_businessOwnerOrgComp(ctx, field)
			case "businessOwnerRoles":
				return ec.fieldContext_CedarSystem_businessOwnerRoles(ctx, field)
			case "systemMaintainerOrg":
				return ec.fieldContext_CedarSystem_systemMaintainerOrg(ctx, field)
			case "systemMaintainerOrgComp":
				return ec.fieldContext_CedarSystem_systemMaintainerOrgComp(ctx, field)
			case "versionId":
				return ec.fieldContext_CedarSystem_versionId(ctx, field)
			case "isBookmarked":
				return ec.fieldContext_CedarSystem_isBookmarked(ctx, field)
			case "linkedTrbRequests":
				return ec.fieldContext_CedarSystem_linkedTrbRequests(ctx, field)
			case "linkedSystemIntakes":
				return ec.fieldContext_CedarSystem_linkedSystemIntakes(ctx, field)
			case "uuid":
				return ec.fieldContext_CedarSystem_uuid(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarSystem", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_cedarSystem_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_cedarSystems(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cedarSystems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CedarSystems(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CedarSystem)
	fc.Result = res
	return ec.marshalNCedarSystem2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSystemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cedarSystems(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CedarSystem_id(ctx, field)
			case "name":
				return ec.fieldContext_CedarSystem_name(ctx, field)
			case "description":
				return ec.fieldContext_CedarSystem_description(ctx, field)
			case "acronym":
				return ec.fieldContext_CedarSystem_acronym(ctx, field)
			case "atoEffectiveDate":
				return ec.fieldContext_CedarSystem_atoEffectiveDate(ctx, field)
			case "atoExpirationDate":
				return ec.fieldContext_CedarSystem_atoExpirationDate(ctx, field)
			case "status":
				return ec.fieldContext_CedarSystem_status(ctx, field)
			case "businessOwnerOrg":
				return ec.fieldContext_CedarSystem_businessOwnerOrg(ctx, field)
			case "businessOwnerOrgComp":
				return ec.fieldContext_CedarSystem_businessOwnerOrgComp(ctx, field)
			case "businessOwnerRoles":
				return ec.fieldContext_CedarSystem_businessOwnerRoles(ctx, field)
			case "systemMaintainerOrg":
				return ec.fieldContext_CedarSystem_systemMaintainerOrg(ctx, field)
			case "systemMaintainerOrgComp":
				return ec.fieldContext_CedarSystem_systemMaintainerOrgComp(ctx, field)
			case "versionId":
				return ec.fieldContext_CedarSystem_versionId(ctx, field)
			case "isBookmarked":
				return ec.fieldContext_CedarSystem_isBookmarked(ctx, field)
			case "linkedTrbRequests":
				return ec.fieldContext_CedarSystem_linkedTrbRequests(ctx, field)
			case "linkedSystemIntakes":
				return ec.fieldContext_CedarSystem_linkedSystemIntakes(ctx, field)
			case "uuid":
				return ec.fieldContext_CedarSystem_uuid(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarSystem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_cedarSubSystems(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cedarSubSystems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CedarSubSystems(rctx, fc.Args["cedarSystemId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CedarSubSystem)
	fc.Result = res
	return ec.marshalNCedarSubSystem2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSubSystemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cedarSubSystems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CedarSubSystem_id(ctx, field)
			case "name":
				return ec.fieldContext_CedarSubSystem_name(ctx, field)
			case "acronym":
				return ec.fieldContext_CedarSubSystem_acronym(ctx, field)
			case "description":
				return ec.fieldContext_CedarSubSystem_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarSubSystem", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_cedarSubSystems_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_cedarContractsBySystem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cedarContractsBySystem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CedarContractsBySystem(rctx, fc.Args["cedarSystemId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CedarContract)
	fc.Result = res
	return ec.marshalNCedarContract2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarContractᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cedarContractsBySystem(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startDate":
				return ec.fieldContext_CedarContract_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_CedarContract_endDate(ctx, field)
			case "contractNumber":
				return ec.fieldContext_CedarContract_contractNumber(ctx, field)
			case "contractName":
				return ec.fieldContext_CedarContract_contractName(ctx, field)
			case "description":
				return ec.fieldContext_CedarContract_description(ctx, field)
			case "orderNumber":
				return ec.fieldContext_CedarContract_orderNumber(ctx, field)
			case "serviceProvided":
				return ec.fieldContext_CedarContract_serviceProvided(ctx, field)
			case "isDeliveryOrg":
				return ec.fieldContext_CedarContract_isDeliveryOrg(ctx, field)
			case "systemID":
				return ec.fieldContext_CedarContract_systemID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarContract", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_cedarContractsBySystem_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_myCedarSystems(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_myCedarSystems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MyCedarSystems(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CedarSystem)
	fc.Result = res
	return ec.marshalNCedarSystem2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSystemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_myCedarSystems(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CedarSystem_id(ctx, field)
			case "name":
				return ec.fieldContext_CedarSystem_name(ctx, field)
			case "description":
				return ec.fieldContext_CedarSystem_description(ctx, field)
			case "acronym":
				return ec.fieldContext_CedarSystem_acronym(ctx, field)
			case "atoEffectiveDate":
				return ec.fieldContext_CedarSystem_atoEffectiveDate(ctx, field)
			case "atoExpirationDate":
				return ec.fieldContext_CedarSystem_atoExpirationDate(ctx, field)
			case "status":
				return ec.fieldContext_CedarSystem_status(ctx, field)
			case "businessOwnerOrg":
				return ec.fieldContext_CedarSystem_businessOwnerOrg(ctx, field)
			case "businessOwnerOrgComp":
				return ec.fieldContext_CedarSystem_businessOwnerOrgComp(ctx, field)
			case "businessOwnerRoles":
				return ec.fieldContext_CedarSystem_businessOwnerRoles(ctx, field)
			case "systemMaintainerOrg":
				return ec.fieldContext_CedarSystem_systemMaintainerOrg(ctx, field)
			case "systemMaintainerOrgComp":
				return ec.fieldContext_CedarSystem_systemMaintainerOrgComp(ctx, field)
			case "versionId":
				return ec.fieldContext_CedarSystem_versionId(ctx, field)
			case "isBookmarked":
				return ec.fieldContext_CedarSystem_isBookmarked(ctx, field)
			case "linkedTrbRequests":
				return ec.fieldContext_CedarSystem_linkedTrbRequests(ctx, field)
			case "linkedSystemIntakes":
				return ec.fieldContext_CedarSystem_linkedSystemIntakes(ctx, field)
			case "uuid":
				return ec.fieldContext_CedarSystem_uuid(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarSystem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_cedarSystemBookmarks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cedarSystemBookmarks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CedarSystemBookmarks(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CedarSystemBookmark)
	fc.Result = res
	return ec.marshalNCedarSystemBookmark2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSystemBookmarkᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cedarSystemBookmarks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "euaUserId":
				return ec.fieldContext_CedarSystemBookmark_euaUserId(ctx, field)
			case "cedarSystemId":
				return ec.fieldContext_CedarSystemBookmark_cedarSystemId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarSystemBookmark", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_cedarThreat(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cedarThreat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CedarThreat(rctx, fc.Args["cedarSystemId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CedarThreat)
	fc.Result = res
	return ec.marshalNCedarThreat2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarThreatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cedarThreat(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "alternativeId":
				return ec.fieldContext_CedarThreat_alternativeId(ctx, field)
			case "controlFamily":
				return ec.fieldContext_CedarThreat_controlFamily(ctx, field)
			case "daysOpen":
				return ec.fieldContext_CedarThreat_daysOpen(ctx, field)
			case "id":
				return ec.fieldContext_CedarThreat_id(ctx, field)
			case "parentId":
				return ec.fieldContext_CedarThreat_parentId(ctx, field)
			case "type":
				return ec.fieldContext_CedarThreat_type(ctx, field)
			case "weaknessRiskLevel":
				return ec.fieldContext_CedarThreat_weaknessRiskLevel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarThreat", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_cedarThreat_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_deployments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deployments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Deployments(rctx, fc.Args["cedarSystemId"].(string), fc.Args["deploymentType"].(*string), fc.Args["state"].(*string), fc.Args["status"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CedarDeployment)
	fc.Result = res
	return ec.marshalNCedarDeployment2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarDeploymentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deployments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CedarDeployment_id(ctx, field)
			case "name":
				return ec.fieldContext_CedarDeployment_name(ctx, field)
			case "systemID":
				return ec.fieldContext_CedarDeployment_systemID(ctx, field)
			case "startDate":
				return ec.fieldContext_CedarDeployment_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_CedarDeployment_endDate(ctx, field)
			case "isHotSite":
				return ec.fieldContext_CedarDeployment_isHotSite(ctx, field)
			case "description":
				return ec.fieldContext_CedarDeployment_description(ctx, field)
			case "contractorName":
				return ec.fieldContext_CedarDeployment_contractorName(ctx, field)
			case "systemVersion":
				return ec.fieldContext_CedarDeployment_systemVersion(ctx, field)
			case "hasProductionData":
				return ec.fieldContext_CedarDeployment_hasProductionData(ctx, field)
			case "replicatedSystemElements":
				return ec.fieldContext_CedarDeployment_replicatedSystemElements(ctx, field)
			case "deploymentType":
				return ec.fieldContext_CedarDeployment_deploymentType(ctx, field)
			case "systemName":
				return ec.fieldContext_CedarDeployment_systemName(ctx, field)
			case "deploymentElementID":
				return ec.fieldContext_CedarDeployment_deploymentElementID(ctx, field)
			case "state":
				return ec.fieldContext_CedarDeployment_state(ctx, field)
			case "status":
				return ec.fieldContext_CedarDeployment_status(ctx, field)
			case "wanType":
				return ec.fieldContext_CedarDeployment_wanType(ctx, field)
			case "dataCenter":
				return ec.fieldContext_CedarDeployment_dataCenter(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarDeployment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_deployments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_roleTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_roleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RoleTypes(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CedarRoleType)
	fc.Result = res
	return ec.marshalNCedarRoleType2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarRoleTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_roleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CedarRoleType_id(ctx, field)
			case "application":
				return ec.fieldContext_CedarRoleType_application(ctx, field)
			case "name":
				return ec.fieldContext_CedarRoleType_name(ctx, field)
			case "description":
				return ec.fieldContext_CedarRoleType_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarRoleType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_roles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_roles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Roles(rctx, fc.Args["cedarSystemId"].(string), fc.Args["roleTypeID"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CedarRole)
	fc.Result = res
	return ec.marshalNCedarRole2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_roles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "application":
				return ec.fieldContext_CedarRole_application(ctx, field)
			case "objectID":
				return ec.fieldContext_CedarRole_objectID(ctx, field)
			case "roleTypeID":
				return ec.fieldContext_CedarRole_roleTypeID(ctx, field)
			case "assigneeType":
				return ec.fieldContext_CedarRole_assigneeType(ctx, field)
			case "assigneeUsername":
				return ec.fieldContext_CedarRole_assigneeUsername(ctx, field)
			case "assigneeEmail":
				return ec.fieldContext_CedarRole_assigneeEmail(ctx, field)
			case "assigneeOrgID":
				return ec.fieldContext_CedarRole_assigneeOrgID(ctx, field)
			case "assigneeOrgName":
				return ec.fieldContext_CedarRole_assigneeOrgName(ctx, field)
			case "assigneeFirstName":
				return ec.fieldContext_CedarRole_assigneeFirstName(ctx, field)
			case "assigneeLastName":
				return ec.fieldContext_CedarRole_assigneeLastName(ctx, field)
			case "assigneePhone":
				return ec.fieldContext_CedarRole_assigneePhone(ctx, field)
			case "assigneeDesc":
				return ec.fieldContext_CedarRole_assigneeDesc(ctx, field)
			case "roleTypeName":
				return ec.fieldContext_CedarRole_roleTypeName(ctx, field)
			case "roleTypeDesc":
				return ec.fieldContext_CedarRole_roleTypeDesc(ctx, field)
			case "roleID":
				return ec.fieldContext_CedarRole_roleID(ctx, field)
			case "objectType":
				return ec.fieldContext_CedarRole_objectType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarRole", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_roles_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_exchanges(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_exchanges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Exchanges(rctx, fc.Args["cedarSystemId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CedarExchange)
	fc.Result = res
	return ec.marshalNCedarExchange2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarExchangeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_exchanges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "connectionFrequency":
				return ec.fieldContext_CedarExchange_connectionFrequency(ctx, field)
			case "containsBankingData":
				return ec.fieldContext_CedarExchange_containsBankingData(ctx, field)
			case "containsBeneficiaryAddress":
				return ec.fieldContext_CedarExchange_containsBeneficiaryAddress(ctx, field)
			case "containsPhi":
				return ec.fieldContext_CedarExchange_containsPhi(ctx, field)
			case "containsPii":
				return ec.fieldContext_CedarExchange_containsPii(ctx, field)
			case "containsHealthDisparityData":
				return ec.fieldContext_CedarExchange_containsHealthDisparityData(ctx, field)
			case "dataExchangeAgreement":
				return ec.fieldContext_CedarExchange_dataExchangeAgreement(ctx, field)
			case "dataFormat":
				return ec.fieldContext_CedarExchange_dataFormat(ctx, field)
			case "dataFormatOther":
				return ec.fieldContext_CedarExchange_dataFormatOther(ctx, field)
			case "exchangeDescription":
				return ec.fieldContext_CedarExchange_exchangeDescription(ctx, field)
			case "exchangeEndDate":
				return ec.fieldContext_CedarExchange_exchangeEndDate(ctx, field)
			case "exchangeId":
				return ec.fieldContext_CedarExchange_exchangeId(ctx, field)
			case "exchangeName":
				return ec.fieldContext_CedarExchange_exchangeName(ctx, field)
			case "exchangeRetiredDate":
				return ec.fieldContext_CedarExchange_exchangeRetiredDate(ctx, field)
			case "exchangeStartDate":
				return ec.fieldContext_CedarExchange_exchangeStartDate(ctx, field)
			case "exchangeState":
				return ec.fieldContext_CedarExchange_exchangeState(ctx, field)
			case "exchangeVersion":
				return ec.fieldContext_CedarExchange_exchangeVersion(ctx, field)
			case "exchangeDirection":
				return ec.fieldContext_CedarExchange_exchangeDirection(ctx, field)
			case "fromOwnerId":
				return ec.fieldContext_CedarExchange_fromOwnerId(ctx, field)
			case "fromOwnerName":
				return ec.fieldContext_CedarExchange_fromOwnerName(ctx, field)
			case "fromOwnerType":
				return ec.fieldContext_CedarExchange_fromOwnerType(ctx, field)
			case "isBeneficiaryMailingFile":
				return ec.fieldContext_CedarExchange_isBeneficiaryMailingFile(ctx, field)
			case "numOfRecords":
				return ec.fieldContext_CedarExchange_numOfRecords(ctx, field)
			case "sharedViaApi":
				return ec.fieldContext_CedarExchange_sharedViaApi(ctx, field)
			case "toOwnerId":
				return ec.fieldContext_CedarExchange_toOwnerId(ctx, field)
			case "toOwnerName":
				return ec.fieldContext_CedarExchange_toOwnerName(ctx, field)
			case "toOwnerType":
				return ec.fieldContext_CedarExchange_toOwnerType(ctx, field)
			case "typeOfData":
				return ec.fieldContext_CedarExchange_typeOfData(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarExchange", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_exchanges_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_urls(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_urls(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Urls(rctx, fc.Args["cedarSystemId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CedarURL)
	fc.Result = res
	return ec.marshalNCedarURL2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarURLᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_urls(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CedarURL_id(ctx, field)
			case "address":
				return ec.fieldContext_CedarURL_address(ctx, field)
			case "isBehindWebApplicationFirewall":
				return ec.fieldContext_CedarURL_isBehindWebApplicationFirewall(ctx, field)
			case "isAPIEndpoint":
				return ec.fieldContext_CedarURL_isAPIEndpoint(ctx, field)
			case "isVersionCodeRepository":
				return ec.fieldContext_CedarURL_isVersionCodeRepository(ctx, field)
			case "urlHostingEnv":
				return ec.fieldContext_CedarURL_urlHostingEnv(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarURL", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_urls_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_cedarSystemDetails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cedarSystemDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CedarSystemDetails(rctx, fc.Args["cedarSystemId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.CedarSystemDetails)
	fc.Result = res
	return ec.marshalOCedarSystemDetails2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSystemDetails(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cedarSystemDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cedarSystem":
				return ec.fieldContext_CedarSystemDetails_cedarSystem(ctx, field)
			case "systemMaintainerInformation":
				return ec.fieldContext_CedarSystemDetails_systemMaintainerInformation(ctx, field)
			case "businessOwnerInformation":
				return ec.fieldContext_CedarSystemDetails_businessOwnerInformation(ctx, field)
			case "roles":
				return ec.fieldContext_CedarSystemDetails_roles(ctx, field)
			case "deployments":
				return ec.fieldContext_CedarSystemDetails_deployments(ctx, field)
			case "threats":
				return ec.fieldContext_CedarSystemDetails_threats(ctx, field)
			case "urls":
				return ec.fieldContext_CedarSystemDetails_urls(ctx, field)
			case "isMySystem":
				return ec.fieldContext_CedarSystemDetails_isMySystem(ctx, field)
			case "atoEffectiveDate":
				return ec.fieldContext_CedarSystemDetails_atoEffectiveDate(ctx, field)
			case "atoExpirationDate":
				return ec.fieldContext_CedarSystemDetails_atoExpirationDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarSystemDetails", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_cedarSystemDetails_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_systemIntakeContacts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_systemIntakeContacts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SystemIntakeContacts(rctx, fc.Args["id"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeContactsPayload)
	fc.Result = res
	return ec.marshalNSystemIntakeContactsPayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeContactsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_systemIntakeContacts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntakeContacts":
				return ec.fieldContext_SystemIntakeContactsPayload_systemIntakeContacts(ctx, field)
			case "invalidEUAIDs":
				return ec.fieldContext_SystemIntakeContactsPayload_invalidEUAIDs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeContactsPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_systemIntakeContacts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_trbRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_trbRequest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TrbRequest(rctx, fc.Args["id"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBRequest)
	fc.Result = res
	return ec.marshalNTRBRequest2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_trbRequest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequest_id(ctx, field)
			case "name":
				return ec.fieldContext_TRBRequest_name(ctx, field)
			case "archived":
				return ec.fieldContext_TRBRequest_archived(ctx, field)
			case "type":
				return ec.fieldContext_TRBRequest_type(ctx, field)
			case "state":
				return ec.fieldContext_TRBRequest_state(ctx, field)
			case "status":
				return ec.fieldContext_TRBRequest_status(ctx, field)
			case "attendees":
				return ec.fieldContext_TRBRequest_attendees(ctx, field)
			case "feedback":
				return ec.fieldContext_TRBRequest_feedback(ctx, field)
			case "documents":
				return ec.fieldContext_TRBRequest_documents(ctx, field)
			case "form":
				return ec.fieldContext_TRBRequest_form(ctx, field)
			case "guidanceLetter":
				return ec.fieldContext_TRBRequest_guidanceLetter(ctx, field)
			case "taskStatuses":
				return ec.fieldContext_TRBRequest_taskStatuses(ctx, field)
			case "consultMeetingTime":
				return ec.fieldContext_TRBRequest_consultMeetingTime(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_TRBRequest_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_TRBRequest_nextMeetingDate(ctx, field)
			case "trbLead":
				return ec.fieldContext_TRBRequest_trbLead(ctx, field)
			case "trbLeadInfo":
				return ec.fieldContext_TRBRequest_trbLeadInfo(ctx, field)
			case "requesterInfo":
				return ec.fieldContext_TRBRequest_requesterInfo(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_TRBRequest_requesterComponent(ctx, field)
			case "adminNotes":
				return ec.fieldContext_TRBRequest_adminNotes(ctx, field)
			case "isRecent":
				return ec.fieldContext_TRBRequest_isRecent(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequest_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequest_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequest_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequest_modifiedAt(ctx, field)
			case "contractName":
				return ec.fieldContext_TRBRequest_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_TRBRequest_relationType(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_TRBRequest_contractNumbers(ctx, field)
			case "systems":
				return ec.fieldContext_TRBRequest_systems(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_TRBRequest_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_TRBRequest_relatedTRBRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_trbRequest_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_trbRequests(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_trbRequests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().TrbRequests(rctx, fc.Args["archived"].(bool))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal []*models.TRBRequest
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal []*models.TRBRequest
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.TRBRequest); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cms-enterprise/easi-app/pkg/models.TRBRequest`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TRBRequest)
	fc.Result = res
	return ec.marshalNTRBRequest2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_trbRequests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequest_id(ctx, field)
			case "name":
				return ec.fieldContext_TRBRequest_name(ctx, field)
			case "archived":
				return ec.fieldContext_TRBRequest_archived(ctx, field)
			case "type":
				return ec.fieldContext_TRBRequest_type(ctx, field)
			case "state":
				return ec.fieldContext_TRBRequest_state(ctx, field)
			case "status":
				return ec.fieldContext_TRBRequest_status(ctx, field)
			case "attendees":
				return ec.fieldContext_TRBRequest_attendees(ctx, field)
			case "feedback":
				return ec.fieldContext_TRBRequest_feedback(ctx, field)
			case "documents":
				return ec.fieldContext_TRBRequest_documents(ctx, field)
			case "form":
				return ec.fieldContext_TRBRequest_form(ctx, field)
			case "guidanceLetter":
				return ec.fieldContext_TRBRequest_guidanceLetter(ctx, field)
			case "taskStatuses":
				return ec.fieldContext_TRBRequest_taskStatuses(ctx, field)
			case "consultMeetingTime":
				return ec.fieldContext_TRBRequest_consultMeetingTime(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_TRBRequest_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_TRBRequest_nextMeetingDate(ctx, field)
			case "trbLead":
				return ec.fieldContext_TRBRequest_trbLead(ctx, field)
			case "trbLeadInfo":
				return ec.fieldContext_TRBRequest_trbLeadInfo(ctx, field)
			case "requesterInfo":
				return ec.fieldContext_TRBRequest_requesterInfo(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_TRBRequest_requesterComponent(ctx, field)
			case "adminNotes":
				return ec.fieldContext_TRBRequest_adminNotes(ctx, field)
			case "isRecent":
				return ec.fieldContext_TRBRequest_isRecent(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequest_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequest_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequest_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequest_modifiedAt(ctx, field)
			case "contractName":
				return ec.fieldContext_TRBRequest_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_TRBRequest_relationType(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_TRBRequest_contractNumbers(ctx, field)
			case "systems":
				return ec.fieldContext_TRBRequest_systems(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_TRBRequest_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_TRBRequest_relatedTRBRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_trbRequests_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_myTrbRequests(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_myTrbRequests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MyTrbRequests(rctx, fc.Args["archived"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TRBRequest)
	fc.Result = res
	return ec.marshalNTRBRequest2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_myTrbRequests(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequest_id(ctx, field)
			case "name":
				return ec.fieldContext_TRBRequest_name(ctx, field)
			case "archived":
				return ec.fieldContext_TRBRequest_archived(ctx, field)
			case "type":
				return ec.fieldContext_TRBRequest_type(ctx, field)
			case "state":
				return ec.fieldContext_TRBRequest_state(ctx, field)
			case "status":
				return ec.fieldContext_TRBRequest_status(ctx, field)
			case "attendees":
				return ec.fieldContext_TRBRequest_attendees(ctx, field)
			case "feedback":
				return ec.fieldContext_TRBRequest_feedback(ctx, field)
			case "documents":
				return ec.fieldContext_TRBRequest_documents(ctx, field)
			case "form":
				return ec.fieldContext_TRBRequest_form(ctx, field)
			case "guidanceLetter":
				return ec.fieldContext_TRBRequest_guidanceLetter(ctx, field)
			case "taskStatuses":
				return ec.fieldContext_TRBRequest_taskStatuses(ctx, field)
			case "consultMeetingTime":
				return ec.fieldContext_TRBRequest_consultMeetingTime(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_TRBRequest_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_TRBRequest_nextMeetingDate(ctx, field)
			case "trbLead":
				return ec.fieldContext_TRBRequest_trbLead(ctx, field)
			case "trbLeadInfo":
				return ec.fieldContext_TRBRequest_trbLeadInfo(ctx, field)
			case "requesterInfo":
				return ec.fieldContext_TRBRequest_requesterInfo(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_TRBRequest_requesterComponent(ctx, field)
			case "adminNotes":
				return ec.fieldContext_TRBRequest_adminNotes(ctx, field)
			case "isRecent":
				return ec.fieldContext_TRBRequest_isRecent(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequest_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequest_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequest_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequest_modifiedAt(ctx, field)
			case "contractName":
				return ec.fieldContext_TRBRequest_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_TRBRequest_relationType(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_TRBRequest_contractNumbers(ctx, field)
			case "systems":
				return ec.fieldContext_TRBRequest_systems(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_TRBRequest_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_TRBRequest_relatedTRBRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_myTrbRequests_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_trbLeadOptions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_trbLeadOptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TrbLeadOptions(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.UserInfo)
	fc.Result = res
	return ec.marshalNUserInfo2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUserInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_trbLeadOptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstName":
				return ec.fieldContext_UserInfo_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_UserInfo_lastName(ctx, field)
			case "commonName":
				return ec.fieldContext_UserInfo_commonName(ctx, field)
			case "email":
				return ec.fieldContext_UserInfo_email(ctx, field)
			case "euaUserId":
				return ec.fieldContext_UserInfo_euaUserId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_trbAdminNote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_trbAdminNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().TrbAdminNote(rctx, fc.Args["id"].(uuid.UUID))
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal *models.TRBAdminNote
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal *models.TRBAdminNote
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.TRBAdminNote); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/cms-enterprise/easi-app/pkg/models.TRBAdminNote`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBAdminNote)
	fc.Result = res
	return ec.marshalNTRBAdminNote2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBAdminNote(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_trbAdminNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBAdminNote_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBAdminNote_trbRequestId(ctx, field)
			case "category":
				return ec.fieldContext_TRBAdminNote_category(ctx, field)
			case "noteText":
				return ec.fieldContext_TRBAdminNote_noteText(ctx, field)
			case "author":
				return ec.fieldContext_TRBAdminNote_author(ctx, field)
			case "isArchived":
				return ec.fieldContext_TRBAdminNote_isArchived(ctx, field)
			case "categorySpecificData":
				return ec.fieldContext_TRBAdminNote_categorySpecificData(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBAdminNote_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBAdminNote_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBAdminNote_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBAdminNote_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBAdminNote", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_trbAdminNote_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_userAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_userAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserAccount(rctx, fc.Args["username"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_userAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_userAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_actions(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_actions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().Actions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.SystemIntakeAction)
	fc.Result = res
	return ec.marshalNSystemIntakeAction2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeActionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_actions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SystemIntakeAction_id(ctx, field)
			case "systemIntake":
				return ec.fieldContext_SystemIntakeAction_systemIntake(ctx, field)
			case "type":
				return ec.fieldContext_SystemIntakeAction_type(ctx, field)
			case "actor":
				return ec.fieldContext_SystemIntakeAction_actor(ctx, field)
			case "step":
				return ec.fieldContext_SystemIntakeAction_step(ctx, field)
			case "feedback":
				return ec.fieldContext_SystemIntakeAction_feedback(ctx, field)
			case "lcidExpirationChange":
				return ec.fieldContext_SystemIntakeAction_lcidExpirationChange(ctx, field)
			case "previousRetirementDate":
				return ec.fieldContext_SystemIntakeAction_previousRetirementDate(ctx, field)
			case "newRetirementDate":
				return ec.fieldContext_SystemIntakeAction_newRetirementDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntakeAction_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeAction", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_adminLead(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_adminLead(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdminLead, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_adminLead(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_archivedAt(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_archivedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArchivedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_archivedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_businessCase(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_businessCase(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().BusinessCase(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.BusinessCase)
	fc.Result = res
	return ec.marshalOBusinessCase2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐBusinessCase(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_businessCase(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "alternativeASolution":
				return ec.fieldContext_BusinessCase_alternativeASolution(ctx, field)
			case "alternativeBSolution":
				return ec.fieldContext_BusinessCase_alternativeBSolution(ctx, field)
			case "businessNeed":
				return ec.fieldContext_BusinessCase_businessNeed(ctx, field)
			case "businessOwner":
				return ec.fieldContext_BusinessCase_businessOwner(ctx, field)
			case "cmsBenefit":
				return ec.fieldContext_BusinessCase_cmsBenefit(ctx, field)
			case "createdAt":
				return ec.fieldContext_BusinessCase_createdAt(ctx, field)
			case "currentSolutionSummary":
				return ec.fieldContext_BusinessCase_currentSolutionSummary(ctx, field)
			case "euaUserId":
				return ec.fieldContext_BusinessCase_euaUserId(ctx, field)
			case "id":
				return ec.fieldContext_BusinessCase_id(ctx, field)
			case "lifecycleCostLines":
				return ec.fieldContext_BusinessCase_lifecycleCostLines(ctx, field)
			case "preferredSolution":
				return ec.fieldContext_BusinessCase_preferredSolution(ctx, field)
			case "priorityAlignment":
				return ec.fieldContext_BusinessCase_priorityAlignment(ctx, field)
			case "projectName":
				return ec.fieldContext_BusinessCase_projectName(ctx, field)
			case "requester":
				return ec.fieldContext_BusinessCase_requester(ctx, field)
			case "requesterPhoneNumber":
				return ec.fieldContext_BusinessCase_requesterPhoneNumber(ctx, field)
			case "status":
				return ec.fieldContext_BusinessCase_status(ctx, field)
			case "successIndicators":
				return ec.fieldContext_BusinessCase_successIndicators(ctx, field)
			case "systemIntake":
				return ec.fieldContext_BusinessCase_systemIntake(ctx, field)
			case "updatedAt":
				return ec.fieldContext_BusinessCase_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BusinessCase", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_businessNeed(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_businessNeed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessNeed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_businessNeed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_businessOwner(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_businessOwner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().BusinessOwner(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeBusinessOwner)
	fc.Result = res
	return ec.marshalNSystemIntakeBusinessOwner2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeBusinessOwner(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_businessOwner(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "component":
				return ec.fieldContext_SystemIntakeBusinessOwner_component(ctx, field)
			case "name":
				return ec.fieldContext_SystemIntakeBusinessOwner_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeBusinessOwner", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_businessSolution(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_businessSolution(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().BusinessSolution(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_businessSolution(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_contract(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_contract(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().Contract(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeContract)
	fc.Result = res
	return ec.marshalNSystemIntakeContract2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeContract(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_contract(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "contractor":
				return ec.fieldContext_SystemIntakeContract_contractor(ctx, field)
			case "endDate":
				return ec.fieldContext_SystemIntakeContract_endDate(ctx, field)
			case "hasContract":
				return ec.fieldContext_SystemIntakeContract_hasContract(ctx, field)
			case "startDate":
				return ec.fieldContext_SystemIntakeContract_startDate(ctx, field)
			case "vehicle":
				return ec.fieldContext_SystemIntakeContract_vehicle(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeContract", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_costs(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_costs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().Costs(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeCosts)
	fc.Result = res
	return ec.marshalOSystemIntakeCosts2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeCosts(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_costs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "expectedIncreaseAmount":
				return ec.fieldContext_SystemIntakeCosts_expectedIncreaseAmount(ctx, field)
			case "isExpectingIncrease":
				return ec.fieldContext_SystemIntakeCosts_isExpectingIncrease(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeCosts", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_annualSpending(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_annualSpending(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().AnnualSpending(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeAnnualSpending)
	fc.Result = res
	return ec.marshalOSystemIntakeAnnualSpending2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeAnnualSpending(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_annualSpending(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "currentAnnualSpending":
				return ec.fieldContext_SystemIntakeAnnualSpending_currentAnnualSpending(ctx, field)
			case "currentAnnualSpendingITPortion":
				return ec.fieldContext_SystemIntakeAnnualSpending_currentAnnualSpendingITPortion(ctx, field)
			case "plannedYearOneSpending":
				return ec.fieldContext_SystemIntakeAnnualSpending_plannedYearOneSpending(ctx, field)
			case "plannedYearOneSpendingITPortion":
				return ec.fieldContext_SystemIntakeAnnualSpending_plannedYearOneSpendingITPortion(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeAnnualSpending", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_currentStage(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_currentStage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().CurrentStage(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_currentStage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_decisionNextSteps(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_decisionNextSteps(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DecisionNextSteps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.HTML)
	fc.Result = res
	return ec.marshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_decisionNextSteps(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_eaCollaborator(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_eaCollaborator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EACollaborator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_eaCollaborator(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_eaCollaboratorName(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_eaCollaboratorName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EACollaboratorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_eaCollaboratorName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_euaUserId(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_euaUserId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EUAUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_euaUserId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_existingFunding(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_existingFunding(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExistingFunding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.Bool)
	fc.Result = res
	return ec.marshalOBoolean2githubᚗcomᚋgureguᚋnullᚐBool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_existingFunding(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_fundingSources(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_fundingSources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().FundingSources(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.SystemIntakeFundingSource)
	fc.Result = res
	return ec.marshalNSystemIntakeFundingSource2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeFundingSourceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_fundingSources(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SystemIntakeFundingSource_id(ctx, field)
			case "fundingNumber":
				return ec.fieldContext_SystemIntakeFundingSource_fundingNumber(ctx, field)
			case "source":
				return ec.fieldContext_SystemIntakeFundingSource_source(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeFundingSource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_governanceRequestFeedbacks(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_governanceRequestFeedbacks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().GovernanceRequestFeedbacks(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.GovernanceRequestFeedback)
	fc.Result = res
	return ec.marshalNGovernanceRequestFeedback2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGovernanceRequestFeedbackᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_governanceRequestFeedbacks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GovernanceRequestFeedback_id(ctx, field)
			case "intakeId":
				return ec.fieldContext_GovernanceRequestFeedback_intakeId(ctx, field)
			case "feedback":
				return ec.fieldContext_GovernanceRequestFeedback_feedback(ctx, field)
			case "sourceAction":
				return ec.fieldContext_GovernanceRequestFeedback_sourceAction(ctx, field)
			case "targetForm":
				return ec.fieldContext_GovernanceRequestFeedback_targetForm(ctx, field)
			case "type":
				return ec.fieldContext_GovernanceRequestFeedback_type(ctx, field)
			case "author":
				return ec.fieldContext_GovernanceRequestFeedback_author(ctx, field)
			case "createdBy":
				return ec.fieldContext_GovernanceRequestFeedback_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_GovernanceRequestFeedback_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_GovernanceRequestFeedback_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_GovernanceRequestFeedback_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GovernanceRequestFeedback", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_governanceTeams(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_governanceTeams(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().GovernanceTeams(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeGovernanceTeam)
	fc.Result = res
	return ec.marshalNSystemIntakeGovernanceTeam2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGovernanceTeam(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_governanceTeams(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "isPresent":
				return ec.fieldContext_SystemIntakeGovernanceTeam_isPresent(ctx, field)
			case "teams":
				return ec.fieldContext_SystemIntakeGovernanceTeam_teams(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeGovernanceTeam", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_grbDate(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_grbDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GRBDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_grbDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_grtDate(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_grtDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GRTDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_grtDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_lastMeetingDate(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_lastMeetingDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().LastMeetingDate(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_lastMeetingDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_nextMeetingDate(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_nextMeetingDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().NextMeetingDate(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_nextMeetingDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_grbReviewStartedAt(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_grbReviewStartedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GRBReviewStartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_grbReviewStartedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_grbReviewers(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_grbReviewers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().GrbReviewers(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.SystemIntakeGRBReviewer)
	fc.Result = res
	return ec.marshalNSystemIntakeGRBReviewer2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_grbReviewers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SystemIntakeGRBReviewer_id(ctx, field)
			case "userAccount":
				return ec.fieldContext_SystemIntakeGRBReviewer_userAccount(ctx, field)
			case "systemIntakeID":
				return ec.fieldContext_SystemIntakeGRBReviewer_systemIntakeID(ctx, field)
			case "votingRole":
				return ec.fieldContext_SystemIntakeGRBReviewer_votingRole(ctx, field)
			case "vote":
				return ec.fieldContext_SystemIntakeGRBReviewer_vote(ctx, field)
			case "voteComment":
				return ec.fieldContext_SystemIntakeGRBReviewer_voteComment(ctx, field)
			case "dateVoted":
				return ec.fieldContext_SystemIntakeGRBReviewer_dateVoted(ctx, field)
			case "grbRole":
				return ec.fieldContext_SystemIntakeGRBReviewer_grbRole(ctx, field)
			case "createdBy":
				return ec.fieldContext_SystemIntakeGRBReviewer_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntakeGRBReviewer_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_SystemIntakeGRBReviewer_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_SystemIntakeGRBReviewer_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeGRBReviewer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_grbVotingInformation(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_grbVotingInformation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().GrbVotingInformation(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.GRBVotingInformation)
	fc.Result = res
	return ec.marshalNGRBVotingInformation2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGRBVotingInformation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_grbVotingInformation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "grbReviewers":
				return ec.fieldContext_GRBVotingInformation_grbReviewers(ctx, field)
			case "votingStatus":
				return ec.fieldContext_GRBVotingInformation_votingStatus(ctx, field)
			case "numberOfNoObjection":
				return ec.fieldContext_GRBVotingInformation_numberOfNoObjection(ctx, field)
			case "numberOfObjection":
				return ec.fieldContext_GRBVotingInformation_numberOfObjection(ctx, field)
			case "numberOfNotVoted":
				return ec.fieldContext_GRBVotingInformation_numberOfNotVoted(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GRBVotingInformation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_id(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_isso(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_isso(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().Isso(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeIsso)
	fc.Result = res
	return ec.marshalNSystemIntakeISSO2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeIsso(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_isso(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "isPresent":
				return ec.fieldContext_SystemIntakeISSO_isPresent(ctx, field)
			case "name":
				return ec.fieldContext_SystemIntakeISSO_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeISSO", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_lcid(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_lcid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().Lcid(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_lcid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_lcidIssuedAt(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_lcidIssuedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LifecycleIssuedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_lcidIssuedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_lcidExpiresAt(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_lcidExpiresAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LifecycleExpiresAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_lcidExpiresAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_lcidScope(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_lcidScope(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().LcidScope(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.HTML)
	fc.Result = res
	return ec.marshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_lcidScope(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_lcidCostBaseline(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_lcidCostBaseline(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().LcidCostBaseline(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_lcidCostBaseline(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_lcidRetiresAt(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_lcidRetiresAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LifecycleRetiresAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_lcidRetiresAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_needsEaSupport(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_needsEaSupport(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().NeedsEaSupport(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_needsEaSupport(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_usingSoftware(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_usingSoftware(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsingSoftware, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_usingSoftware(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_acquisitionMethods(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_acquisitionMethods(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().AcquisitionMethods(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.SystemIntakeSoftwareAcquisitionMethods)
	fc.Result = res
	return ec.marshalNSystemIntakeSoftwareAcquisitionMethods2ᚕgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeSoftwareAcquisitionMethodsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_acquisitionMethods(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeSoftwareAcquisitionMethods does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_notes(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_notes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().Notes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.SystemIntakeNote)
	fc.Result = res
	return ec.marshalNSystemIntakeNote2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeNoteᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_notes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "author":
				return ec.fieldContext_SystemIntakeNote_author(ctx, field)
			case "content":
				return ec.fieldContext_SystemIntakeNote_content(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntakeNote_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_SystemIntakeNote_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_SystemIntakeNote_modifiedAt(ctx, field)
			case "isArchived":
				return ec.fieldContext_SystemIntakeNote_isArchived(ctx, field)
			case "editor":
				return ec.fieldContext_SystemIntakeNote_editor(ctx, field)
			case "id":
				return ec.fieldContext_SystemIntakeNote_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeNote", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_oitSecurityCollaborator(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_oitSecurityCollaborator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OITSecurityCollaborator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_oitSecurityCollaborator(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_oitSecurityCollaboratorName(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_oitSecurityCollaboratorName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OITSecurityCollaboratorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_oitSecurityCollaboratorName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_productManager(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_productManager(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().ProductManager(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeProductManager)
	fc.Result = res
	return ec.marshalNSystemIntakeProductManager2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeProductManager(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_productManager(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "component":
				return ec.fieldContext_SystemIntakeProductManager_component(ctx, field)
			case "name":
				return ec.fieldContext_SystemIntakeProductManager_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeProductManager", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_projectAcronym(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_projectAcronym(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectAcronym, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_projectAcronym(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_rejectionReason(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_rejectionReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RejectionReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.HTML)
	fc.Result = res
	return ec.marshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_rejectionReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_requestName(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_requestName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().RequestName(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_requestName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_requestType(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_requestType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequestType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SystemIntakeRequestType)
	fc.Result = res
	return ec.marshalNSystemIntakeRequestType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeRequestType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_requestType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeRequestType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_requester(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_requester(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().Requester(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeRequester)
	fc.Result = res
	return ec.marshalNSystemIntakeRequester2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeRequester(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_requester(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "component":
				return ec.fieldContext_SystemIntakeRequester_component(ctx, field)
			case "email":
				return ec.fieldContext_SystemIntakeRequester_email(ctx, field)
			case "name":
				return ec.fieldContext_SystemIntakeRequester_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeRequester", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_requesterName(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_requesterName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().RequesterName(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_requesterName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_requesterComponent(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_requesterComponent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().RequesterComponent(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_requesterComponent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_state(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SystemIntakeState)
	fc.Result = res
	return ec.marshalNSystemIntakeState2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_state(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_step(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_step(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SystemIntakeStep)
	fc.Result = res
	return ec.marshalNSystemIntakeStep2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeStep(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_step(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeStep does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_submittedAt(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_submittedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmittedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_submittedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_trbCollaborator(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_trbCollaborator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TRBCollaborator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_trbCollaborator(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_trbCollaboratorName(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_trbCollaboratorName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TRBCollaboratorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_trbCollaboratorName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_grtReviewEmailBody(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_grtReviewEmailBody(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrtReviewEmailBody, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_grtReviewEmailBody(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_decidedAt(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_decidedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DecidedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_decidedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_businessCaseId(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_businessCaseId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessCaseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_businessCaseId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_cedarSystemId(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_cedarSystemId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CedarSystemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_cedarSystemId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_documents(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_documents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().Documents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.SystemIntakeDocument)
	fc.Result = res
	return ec.marshalNSystemIntakeDocument2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_documents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "documentType":
				return ec.fieldContext_SystemIntakeDocument_documentType(ctx, field)
			case "id":
				return ec.fieldContext_SystemIntakeDocument_id(ctx, field)
			case "fileName":
				return ec.fieldContext_SystemIntakeDocument_fileName(ctx, field)
			case "status":
				return ec.fieldContext_SystemIntakeDocument_status(ctx, field)
			case "version":
				return ec.fieldContext_SystemIntakeDocument_version(ctx, field)
			case "uploadedAt":
				return ec.fieldContext_SystemIntakeDocument_uploadedAt(ctx, field)
			case "url":
				return ec.fieldContext_SystemIntakeDocument_url(ctx, field)
			case "canDelete":
				return ec.fieldContext_SystemIntakeDocument_canDelete(ctx, field)
			case "canView":
				return ec.fieldContext_SystemIntakeDocument_canView(ctx, field)
			case "systemIntakeId":
				return ec.fieldContext_SystemIntakeDocument_systemIntakeId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeDocument", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_hasUiChanges(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_hasUiChanges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasUIChanges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.Bool)
	fc.Result = res
	return ec.marshalOBoolean2githubᚗcomᚋgureguᚋnullᚐBool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_hasUiChanges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_usesAiTech(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_usesAiTech(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UsesAITech, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.Bool)
	fc.Result = res
	return ec.marshalOBoolean2githubᚗcomᚋgureguᚋnullᚐBool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_usesAiTech(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_itGovTaskStatuses(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_itGovTaskStatuses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().ItGovTaskStatuses(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ITGovTaskStatuses)
	fc.Result = res
	return ec.marshalNITGovTaskStatuses2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovTaskStatuses(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_itGovTaskStatuses(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "intakeFormStatus":
				return ec.fieldContext_ITGovTaskStatuses_intakeFormStatus(ctx, field)
			case "feedbackFromInitialReviewStatus":
				return ec.fieldContext_ITGovTaskStatuses_feedbackFromInitialReviewStatus(ctx, field)
			case "bizCaseDraftStatus":
				return ec.fieldContext_ITGovTaskStatuses_bizCaseDraftStatus(ctx, field)
			case "grtMeetingStatus":
				return ec.fieldContext_ITGovTaskStatuses_grtMeetingStatus(ctx, field)
			case "bizCaseFinalStatus":
				return ec.fieldContext_ITGovTaskStatuses_bizCaseFinalStatus(ctx, field)
			case "grbMeetingStatus":
				return ec.fieldContext_ITGovTaskStatuses_grbMeetingStatus(ctx, field)
			case "decisionAndNextStepsStatus":
				return ec.fieldContext_ITGovTaskStatuses_decisionAndNextStepsStatus(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ITGovTaskStatuses", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_requestFormState(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_requestFormState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequestFormState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SystemIntakeFormState)
	fc.Result = res
	return ec.marshalNSystemIntakeFormState2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeFormState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_requestFormState(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeFormState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_draftBusinessCaseState(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_draftBusinessCaseState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DraftBusinessCaseState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SystemIntakeFormState)
	fc.Result = res
	return ec.marshalNSystemIntakeFormState2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeFormState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_draftBusinessCaseState(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeFormState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_grtMeetingState(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_grtMeetingState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GRTMeetingState(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SystemIntakeMeetingState)
	fc.Result = res
	return ec.marshalNSystemIntakeMeetingState2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeMeetingState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_grtMeetingState(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeMeetingState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_finalBusinessCaseState(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_finalBusinessCaseState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinalBusinessCaseState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SystemIntakeFormState)
	fc.Result = res
	return ec.marshalNSystemIntakeFormState2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeFormState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_finalBusinessCaseState(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeFormState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_grbMeetingState(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_grbMeetingState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GRBMeetingState(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SystemIntakeMeetingState)
	fc.Result = res
	return ec.marshalNSystemIntakeMeetingState2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeMeetingState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_grbMeetingState(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeMeetingState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_decisionState(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_decisionState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DecisionState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SystemIntakeDecisionState)
	fc.Result = res
	return ec.marshalNSystemIntakeDecisionState2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDecisionState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_decisionState(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeDecisionState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_statusRequester(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_statusRequester(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().StatusRequester(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SystemIntakeStatusRequester)
	fc.Result = res
	return ec.marshalNSystemIntakeStatusRequester2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeStatusRequester(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_statusRequester(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeStatusRequester does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_statusAdmin(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_statusAdmin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().StatusAdmin(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SystemIntakeStatusAdmin)
	fc.Result = res
	return ec.marshalNSystemIntakeStatusAdmin2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeStatusAdmin(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_statusAdmin(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeStatusAdmin does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_lcidStatus(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_lcidStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().LcidStatus(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeLCIDStatus)
	fc.Result = res
	return ec.marshalOSystemIntakeLCIDStatus2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeLCIDStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_lcidStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeLCIDStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_trbFollowUpRecommendation(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_trbFollowUpRecommendation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TRBFollowUpRecommendation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeTRBFollowUp)
	fc.Result = res
	return ec.marshalOSystemIntakeTRBFollowUp2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeTRBFollowUp(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_trbFollowUpRecommendation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeTRBFollowUp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_contractName(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_contractName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_contractName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_relationType(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_relationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().RelationType(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RequestRelationType)
	fc.Result = res
	return ec.marshalORequestRelationType2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRequestRelationType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_relationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RequestRelationType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_systems(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_systems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().Systems(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CedarSystem)
	fc.Result = res
	return ec.marshalNCedarSystem2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSystemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_systems(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CedarSystem_id(ctx, field)
			case "name":
				return ec.fieldContext_CedarSystem_name(ctx, field)
			case "description":
				return ec.fieldContext_CedarSystem_description(ctx, field)
			case "acronym":
				return ec.fieldContext_CedarSystem_acronym(ctx, field)
			case "atoEffectiveDate":
				return ec.fieldContext_CedarSystem_atoEffectiveDate(ctx, field)
			case "atoExpirationDate":
				return ec.fieldContext_CedarSystem_atoExpirationDate(ctx, field)
			case "status":
				return ec.fieldContext_CedarSystem_status(ctx, field)
			case "businessOwnerOrg":
				return ec.fieldContext_CedarSystem_businessOwnerOrg(ctx, field)
			case "businessOwnerOrgComp":
				return ec.fieldContext_CedarSystem_businessOwnerOrgComp(ctx, field)
			case "businessOwnerRoles":
				return ec.fieldContext_CedarSystem_businessOwnerRoles(ctx, field)
			case "systemMaintainerOrg":
				return ec.fieldContext_CedarSystem_systemMaintainerOrg(ctx, field)
			case "systemMaintainerOrgComp":
				return ec.fieldContext_CedarSystem_systemMaintainerOrgComp(ctx, field)
			case "versionId":
				return ec.fieldContext_CedarSystem_versionId(ctx, field)
			case "isBookmarked":
				return ec.fieldContext_CedarSystem_isBookmarked(ctx, field)
			case "linkedTrbRequests":
				return ec.fieldContext_CedarSystem_linkedTrbRequests(ctx, field)
			case "linkedSystemIntakes":
				return ec.fieldContext_CedarSystem_linkedSystemIntakes(ctx, field)
			case "uuid":
				return ec.fieldContext_CedarSystem_uuid(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarSystem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_contractNumbers(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_contractNumbers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().ContractNumbers(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.SystemIntakeContractNumber)
	fc.Result = res
	return ec.marshalNSystemIntakeContractNumber2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeContractNumberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_contractNumbers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SystemIntakeContractNumber_id(ctx, field)
			case "systemIntakeID":
				return ec.fieldContext_SystemIntakeContractNumber_systemIntakeID(ctx, field)
			case "contractNumber":
				return ec.fieldContext_SystemIntakeContractNumber_contractNumber(ctx, field)
			case "createdBy":
				return ec.fieldContext_SystemIntakeContractNumber_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntakeContractNumber_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_SystemIntakeContractNumber_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_SystemIntakeContractNumber_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeContractNumber", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_relatedIntakes(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_relatedIntakes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().RelatedIntakes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.SystemIntake)
	fc.Result = res
	return ec.marshalNSystemIntake2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_relatedIntakes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "actions":
				return ec.fieldContext_SystemIntake_actions(ctx, field)
			case "adminLead":
				return ec.fieldContext_SystemIntake_adminLead(ctx, field)
			case "archivedAt":
				return ec.fieldContext_SystemIntake_archivedAt(ctx, field)
			case "businessCase":
				return ec.fieldContext_SystemIntake_businessCase(ctx, field)
			case "businessNeed":
				return ec.fieldContext_SystemIntake_businessNeed(ctx, field)
			case "businessOwner":
				return ec.fieldContext_SystemIntake_businessOwner(ctx, field)
			case "businessSolution":
				return ec.fieldContext_SystemIntake_businessSolution(ctx, field)
			case "contract":
				return ec.fieldContext_SystemIntake_contract(ctx, field)
			case "costs":
				return ec.fieldContext_SystemIntake_costs(ctx, field)
			case "annualSpending":
				return ec.fieldContext_SystemIntake_annualSpending(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntake_createdAt(ctx, field)
			case "currentStage":
				return ec.fieldContext_SystemIntake_currentStage(ctx, field)
			case "decisionNextSteps":
				return ec.fieldContext_SystemIntake_decisionNextSteps(ctx, field)
			case "eaCollaborator":
				return ec.fieldContext_SystemIntake_eaCollaborator(ctx, field)
			case "eaCollaboratorName":
				return ec.fieldContext_SystemIntake_eaCollaboratorName(ctx, field)
			case "euaUserId":
				return ec.fieldContext_SystemIntake_euaUserId(ctx, field)
			case "existingFunding":
				return ec.fieldContext_SystemIntake_existingFunding(ctx, field)
			case "fundingSources":
				return ec.fieldContext_SystemIntake_fundingSources(ctx, field)
			case "governanceRequestFeedbacks":
				return ec.fieldContext_SystemIntake_governanceRequestFeedbacks(ctx, field)
			case "governanceTeams":
				return ec.fieldContext_SystemIntake_governanceTeams(ctx, field)
			case "grbDate":
				return ec.fieldContext_SystemIntake_grbDate(ctx, field)
			case "grtDate":
				return ec.fieldContext_SystemIntake_grtDate(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_SystemIntake_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_SystemIntake_nextMeetingDate(ctx, field)
			case "grbReviewStartedAt":
				return ec.fieldContext_SystemIntake_grbReviewStartedAt(ctx, field)
			case "grbReviewers":
				return ec.fieldContext_SystemIntake_grbReviewers(ctx, field)
			case "grbVotingInformation":
				return ec.fieldContext_SystemIntake_grbVotingInformation(ctx, field)
			case "id":
				return ec.fieldContext_SystemIntake_id(ctx, field)
			case "isso":
				return ec.fieldContext_SystemIntake_isso(ctx, field)
			case "lcid":
				return ec.fieldContext_SystemIntake_lcid(ctx, field)
			case "lcidIssuedAt":
				return ec.fieldContext_SystemIntake_lcidIssuedAt(ctx, field)
			case "lcidExpiresAt":
				return ec.fieldContext_SystemIntake_lcidExpiresAt(ctx, field)
			case "lcidScope":
				return ec.fieldContext_SystemIntake_lcidScope(ctx, field)
			case "lcidCostBaseline":
				return ec.fieldContext_SystemIntake_lcidCostBaseline(ctx, field)
			case "lcidRetiresAt":
				return ec.fieldContext_SystemIntake_lcidRetiresAt(ctx, field)
			case "needsEaSupport":
				return ec.fieldContext_SystemIntake_needsEaSupport(ctx, field)
			case "usingSoftware":
				return ec.fieldContext_SystemIntake_usingSoftware(ctx, field)
			case "acquisitionMethods":
				return ec.fieldContext_SystemIntake_acquisitionMethods(ctx, field)
			case "notes":
				return ec.fieldContext_SystemIntake_notes(ctx, field)
			case "oitSecurityCollaborator":
				return ec.fieldContext_SystemIntake_oitSecurityCollaborator(ctx, field)
			case "oitSecurityCollaboratorName":
				return ec.fieldContext_SystemIntake_oitSecurityCollaboratorName(ctx, field)
			case "productManager":
				return ec.fieldContext_SystemIntake_productManager(ctx, field)
			case "projectAcronym":
				return ec.fieldContext_SystemIntake_projectAcronym(ctx, field)
			case "rejectionReason":
				return ec.fieldContext_SystemIntake_rejectionReason(ctx, field)
			case "requestName":
				return ec.fieldContext_SystemIntake_requestName(ctx, field)
			case "requestType":
				return ec.fieldContext_SystemIntake_requestType(ctx, field)
			case "requester":
				return ec.fieldContext_SystemIntake_requester(ctx, field)
			case "requesterName":
				return ec.fieldContext_SystemIntake_requesterName(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_SystemIntake_requesterComponent(ctx, field)
			case "state":
				return ec.fieldContext_SystemIntake_state(ctx, field)
			case "step":
				return ec.fieldContext_SystemIntake_step(ctx, field)
			case "submittedAt":
				return ec.fieldContext_SystemIntake_submittedAt(ctx, field)
			case "trbCollaborator":
				return ec.fieldContext_SystemIntake_trbCollaborator(ctx, field)
			case "trbCollaboratorName":
				return ec.fieldContext_SystemIntake_trbCollaboratorName(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SystemIntake_updatedAt(ctx, field)
			case "grtReviewEmailBody":
				return ec.fieldContext_SystemIntake_grtReviewEmailBody(ctx, field)
			case "decidedAt":
				return ec.fieldContext_SystemIntake_decidedAt(ctx, field)
			case "businessCaseId":
				return ec.fieldContext_SystemIntake_businessCaseId(ctx, field)
			case "cedarSystemId":
				return ec.fieldContext_SystemIntake_cedarSystemId(ctx, field)
			case "documents":
				return ec.fieldContext_SystemIntake_documents(ctx, field)
			case "hasUiChanges":
				return ec.fieldContext_SystemIntake_hasUiChanges(ctx, field)
			case "usesAiTech":
				return ec.fieldContext_SystemIntake_usesAiTech(ctx, field)
			case "itGovTaskStatuses":
				return ec.fieldContext_SystemIntake_itGovTaskStatuses(ctx, field)
			case "requestFormState":
				return ec.fieldContext_SystemIntake_requestFormState(ctx, field)
			case "draftBusinessCaseState":
				return ec.fieldContext_SystemIntake_draftBusinessCaseState(ctx, field)
			case "grtMeetingState":
				return ec.fieldContext_SystemIntake_grtMeetingState(ctx, field)
			case "finalBusinessCaseState":
				return ec.fieldContext_SystemIntake_finalBusinessCaseState(ctx, field)
			case "grbMeetingState":
				return ec.fieldContext_SystemIntake_grbMeetingState(ctx, field)
			case "decisionState":
				return ec.fieldContext_SystemIntake_decisionState(ctx, field)
			case "statusRequester":
				return ec.fieldContext_SystemIntake_statusRequester(ctx, field)
			case "statusAdmin":
				return ec.fieldContext_SystemIntake_statusAdmin(ctx, field)
			case "lcidStatus":
				return ec.fieldContext_SystemIntake_lcidStatus(ctx, field)
			case "trbFollowUpRecommendation":
				return ec.fieldContext_SystemIntake_trbFollowUpRecommendation(ctx, field)
			case "contractName":
				return ec.fieldContext_SystemIntake_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_SystemIntake_relationType(ctx, field)
			case "systems":
				return ec.fieldContext_SystemIntake_systems(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_SystemIntake_contractNumbers(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_SystemIntake_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_SystemIntake_relatedTRBRequests(ctx, field)
			case "grbDiscussions":
				return ec.fieldContext_SystemIntake_grbDiscussions(ctx, field)
			case "grbPresentationLinks":
				return ec.fieldContext_SystemIntake_grbPresentationLinks(ctx, field)
			case "grbPresentationDeckRequesterReminderEmailSentTime":
				return ec.fieldContext_SystemIntake_grbPresentationDeckRequesterReminderEmailSentTime(ctx, field)
			case "grbReviewType":
				return ec.fieldContext_SystemIntake_grbReviewType(ctx, field)
			case "grbReviewAsyncRecordingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncRecordingTime(ctx, field)
			case "grbReviewAsyncEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncEndDate(ctx, field)
			case "grbReviewAsyncGRBMeetingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncGRBMeetingTime(ctx, field)
			case "grbReviewAsyncStatus":
				return ec.fieldContext_SystemIntake_grbReviewAsyncStatus(ctx, field)
			case "grbReviewAsyncManualEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncManualEndDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntake", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_relatedTRBRequests(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_relatedTRBRequests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().RelatedTRBRequests(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TRBRequest)
	fc.Result = res
	return ec.marshalNTRBRequest2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_relatedTRBRequests(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequest_id(ctx, field)
			case "name":
				return ec.fieldContext_TRBRequest_name(ctx, field)
			case "archived":
				return ec.fieldContext_TRBRequest_archived(ctx, field)
			case "type":
				return ec.fieldContext_TRBRequest_type(ctx, field)
			case "state":
				return ec.fieldContext_TRBRequest_state(ctx, field)
			case "status":
				return ec.fieldContext_TRBRequest_status(ctx, field)
			case "attendees":
				return ec.fieldContext_TRBRequest_attendees(ctx, field)
			case "feedback":
				return ec.fieldContext_TRBRequest_feedback(ctx, field)
			case "documents":
				return ec.fieldContext_TRBRequest_documents(ctx, field)
			case "form":
				return ec.fieldContext_TRBRequest_form(ctx, field)
			case "guidanceLetter":
				return ec.fieldContext_TRBRequest_guidanceLetter(ctx, field)
			case "taskStatuses":
				return ec.fieldContext_TRBRequest_taskStatuses(ctx, field)
			case "consultMeetingTime":
				return ec.fieldContext_TRBRequest_consultMeetingTime(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_TRBRequest_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_TRBRequest_nextMeetingDate(ctx, field)
			case "trbLead":
				return ec.fieldContext_TRBRequest_trbLead(ctx, field)
			case "trbLeadInfo":
				return ec.fieldContext_TRBRequest_trbLeadInfo(ctx, field)
			case "requesterInfo":
				return ec.fieldContext_TRBRequest_requesterInfo(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_TRBRequest_requesterComponent(ctx, field)
			case "adminNotes":
				return ec.fieldContext_TRBRequest_adminNotes(ctx, field)
			case "isRecent":
				return ec.fieldContext_TRBRequest_isRecent(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequest_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequest_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequest_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequest_modifiedAt(ctx, field)
			case "contractName":
				return ec.fieldContext_TRBRequest_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_TRBRequest_relationType(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_TRBRequest_contractNumbers(ctx, field)
			case "systems":
				return ec.fieldContext_TRBRequest_systems(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_TRBRequest_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_TRBRequest_relatedTRBRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequest", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_grbDiscussions(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_grbDiscussions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().GrbDiscussions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.SystemIntakeGRBReviewDiscussion)
	fc.Result = res
	return ec.marshalNSystemIntakeGRBReviewDiscussion2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewDiscussionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_grbDiscussions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "initialPost":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussion_initialPost(ctx, field)
			case "replies":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussion_replies(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeGRBReviewDiscussion", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_grbPresentationLinks(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_grbPresentationLinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().GrbPresentationLinks(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeGRBPresentationLinks)
	fc.Result = res
	return ec.marshalOSystemIntakeGRBPresentationLinks2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBPresentationLinks(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_grbPresentationLinks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "systemIntakeID":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_systemIntakeID(ctx, field)
			case "createdBy":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_modifiedAt(ctx, field)
			case "recordingLink":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_recordingLink(ctx, field)
			case "recordingPasscode":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_recordingPasscode(ctx, field)
			case "transcriptLink":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_transcriptLink(ctx, field)
			case "transcriptFileName":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_transcriptFileName(ctx, field)
			case "transcriptFileURL":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_transcriptFileURL(ctx, field)
			case "transcriptFileStatus":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_transcriptFileStatus(ctx, field)
			case "presentationDeckFileName":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_presentationDeckFileName(ctx, field)
			case "presentationDeckFileURL":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_presentationDeckFileURL(ctx, field)
			case "presentationDeckFileStatus":
				return ec.fieldContext_SystemIntakeGRBPresentationLinks_presentationDeckFileStatus(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeGRBPresentationLinks", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_grbPresentationDeckRequesterReminderEmailSentTime(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_grbPresentationDeckRequesterReminderEmailSentTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrbPresentationDeckRequesterReminderEmailSentTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_grbPresentationDeckRequesterReminderEmailSentTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_grbReviewType(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_grbReviewType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrbReviewType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SystemIntakeGRBReviewType)
	fc.Result = res
	return ec.marshalNSystemIntakeGRBReviewType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_grbReviewType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeGRBReviewType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_grbReviewAsyncRecordingTime(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_grbReviewAsyncRecordingTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrbReviewAsyncRecordingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_grbReviewAsyncRecordingTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_grbReviewAsyncEndDate(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_grbReviewAsyncEndDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrbReviewAsyncEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_grbReviewAsyncEndDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_grbReviewAsyncGRBMeetingTime(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_grbReviewAsyncGRBMeetingTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrbReviewAsyncGRBMeetingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_grbReviewAsyncGRBMeetingTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_grbReviewAsyncStatus(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_grbReviewAsyncStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntake().GrbReviewAsyncStatus(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeGRBReviewAsyncStatusType)
	fc.Result = res
	return ec.marshalOSystemIntakeGRBReviewAsyncStatusType2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewAsyncStatusType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_grbReviewAsyncStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeGRBReviewAsyncStatusType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntake_grbReviewAsyncManualEndDate(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntake) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntake_grbReviewAsyncManualEndDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrbReviewAsyncManualEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntake_grbReviewAsyncManualEndDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntake",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeAction_id(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeAction_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeAction_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeAction_systemIntake(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeAction_systemIntake(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemIntake, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntake)
	fc.Result = res
	return ec.marshalNSystemIntake2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntake(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeAction_systemIntake(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "actions":
				return ec.fieldContext_SystemIntake_actions(ctx, field)
			case "adminLead":
				return ec.fieldContext_SystemIntake_adminLead(ctx, field)
			case "archivedAt":
				return ec.fieldContext_SystemIntake_archivedAt(ctx, field)
			case "businessCase":
				return ec.fieldContext_SystemIntake_businessCase(ctx, field)
			case "businessNeed":
				return ec.fieldContext_SystemIntake_businessNeed(ctx, field)
			case "businessOwner":
				return ec.fieldContext_SystemIntake_businessOwner(ctx, field)
			case "businessSolution":
				return ec.fieldContext_SystemIntake_businessSolution(ctx, field)
			case "contract":
				return ec.fieldContext_SystemIntake_contract(ctx, field)
			case "costs":
				return ec.fieldContext_SystemIntake_costs(ctx, field)
			case "annualSpending":
				return ec.fieldContext_SystemIntake_annualSpending(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntake_createdAt(ctx, field)
			case "currentStage":
				return ec.fieldContext_SystemIntake_currentStage(ctx, field)
			case "decisionNextSteps":
				return ec.fieldContext_SystemIntake_decisionNextSteps(ctx, field)
			case "eaCollaborator":
				return ec.fieldContext_SystemIntake_eaCollaborator(ctx, field)
			case "eaCollaboratorName":
				return ec.fieldContext_SystemIntake_eaCollaboratorName(ctx, field)
			case "euaUserId":
				return ec.fieldContext_SystemIntake_euaUserId(ctx, field)
			case "existingFunding":
				return ec.fieldContext_SystemIntake_existingFunding(ctx, field)
			case "fundingSources":
				return ec.fieldContext_SystemIntake_fundingSources(ctx, field)
			case "governanceRequestFeedbacks":
				return ec.fieldContext_SystemIntake_governanceRequestFeedbacks(ctx, field)
			case "governanceTeams":
				return ec.fieldContext_SystemIntake_governanceTeams(ctx, field)
			case "grbDate":
				return ec.fieldContext_SystemIntake_grbDate(ctx, field)
			case "grtDate":
				return ec.fieldContext_SystemIntake_grtDate(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_SystemIntake_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_SystemIntake_nextMeetingDate(ctx, field)
			case "grbReviewStartedAt":
				return ec.fieldContext_SystemIntake_grbReviewStartedAt(ctx, field)
			case "grbReviewers":
				return ec.fieldContext_SystemIntake_grbReviewers(ctx, field)
			case "grbVotingInformation":
				return ec.fieldContext_SystemIntake_grbVotingInformation(ctx, field)
			case "id":
				return ec.fieldContext_SystemIntake_id(ctx, field)
			case "isso":
				return ec.fieldContext_SystemIntake_isso(ctx, field)
			case "lcid":
				return ec.fieldContext_SystemIntake_lcid(ctx, field)
			case "lcidIssuedAt":
				return ec.fieldContext_SystemIntake_lcidIssuedAt(ctx, field)
			case "lcidExpiresAt":
				return ec.fieldContext_SystemIntake_lcidExpiresAt(ctx, field)
			case "lcidScope":
				return ec.fieldContext_SystemIntake_lcidScope(ctx, field)
			case "lcidCostBaseline":
				return ec.fieldContext_SystemIntake_lcidCostBaseline(ctx, field)
			case "lcidRetiresAt":
				return ec.fieldContext_SystemIntake_lcidRetiresAt(ctx, field)
			case "needsEaSupport":
				return ec.fieldContext_SystemIntake_needsEaSupport(ctx, field)
			case "usingSoftware":
				return ec.fieldContext_SystemIntake_usingSoftware(ctx, field)
			case "acquisitionMethods":
				return ec.fieldContext_SystemIntake_acquisitionMethods(ctx, field)
			case "notes":
				return ec.fieldContext_SystemIntake_notes(ctx, field)
			case "oitSecurityCollaborator":
				return ec.fieldContext_SystemIntake_oitSecurityCollaborator(ctx, field)
			case "oitSecurityCollaboratorName":
				return ec.fieldContext_SystemIntake_oitSecurityCollaboratorName(ctx, field)
			case "productManager":
				return ec.fieldContext_SystemIntake_productManager(ctx, field)
			case "projectAcronym":
				return ec.fieldContext_SystemIntake_projectAcronym(ctx, field)
			case "rejectionReason":
				return ec.fieldContext_SystemIntake_rejectionReason(ctx, field)
			case "requestName":
				return ec.fieldContext_SystemIntake_requestName(ctx, field)
			case "requestType":
				return ec.fieldContext_SystemIntake_requestType(ctx, field)
			case "requester":
				return ec.fieldContext_SystemIntake_requester(ctx, field)
			case "requesterName":
				return ec.fieldContext_SystemIntake_requesterName(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_SystemIntake_requesterComponent(ctx, field)
			case "state":
				return ec.fieldContext_SystemIntake_state(ctx, field)
			case "step":
				return ec.fieldContext_SystemIntake_step(ctx, field)
			case "submittedAt":
				return ec.fieldContext_SystemIntake_submittedAt(ctx, field)
			case "trbCollaborator":
				return ec.fieldContext_SystemIntake_trbCollaborator(ctx, field)
			case "trbCollaboratorName":
				return ec.fieldContext_SystemIntake_trbCollaboratorName(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SystemIntake_updatedAt(ctx, field)
			case "grtReviewEmailBody":
				return ec.fieldContext_SystemIntake_grtReviewEmailBody(ctx, field)
			case "decidedAt":
				return ec.fieldContext_SystemIntake_decidedAt(ctx, field)
			case "businessCaseId":
				return ec.fieldContext_SystemIntake_businessCaseId(ctx, field)
			case "cedarSystemId":
				return ec.fieldContext_SystemIntake_cedarSystemId(ctx, field)
			case "documents":
				return ec.fieldContext_SystemIntake_documents(ctx, field)
			case "hasUiChanges":
				return ec.fieldContext_SystemIntake_hasUiChanges(ctx, field)
			case "usesAiTech":
				return ec.fieldContext_SystemIntake_usesAiTech(ctx, field)
			case "itGovTaskStatuses":
				return ec.fieldContext_SystemIntake_itGovTaskStatuses(ctx, field)
			case "requestFormState":
				return ec.fieldContext_SystemIntake_requestFormState(ctx, field)
			case "draftBusinessCaseState":
				return ec.fieldContext_SystemIntake_draftBusinessCaseState(ctx, field)
			case "grtMeetingState":
				return ec.fieldContext_SystemIntake_grtMeetingState(ctx, field)
			case "finalBusinessCaseState":
				return ec.fieldContext_SystemIntake_finalBusinessCaseState(ctx, field)
			case "grbMeetingState":
				return ec.fieldContext_SystemIntake_grbMeetingState(ctx, field)
			case "decisionState":
				return ec.fieldContext_SystemIntake_decisionState(ctx, field)
			case "statusRequester":
				return ec.fieldContext_SystemIntake_statusRequester(ctx, field)
			case "statusAdmin":
				return ec.fieldContext_SystemIntake_statusAdmin(ctx, field)
			case "lcidStatus":
				return ec.fieldContext_SystemIntake_lcidStatus(ctx, field)
			case "trbFollowUpRecommendation":
				return ec.fieldContext_SystemIntake_trbFollowUpRecommendation(ctx, field)
			case "contractName":
				return ec.fieldContext_SystemIntake_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_SystemIntake_relationType(ctx, field)
			case "systems":
				return ec.fieldContext_SystemIntake_systems(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_SystemIntake_contractNumbers(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_SystemIntake_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_SystemIntake_relatedTRBRequests(ctx, field)
			case "grbDiscussions":
				return ec.fieldContext_SystemIntake_grbDiscussions(ctx, field)
			case "grbPresentationLinks":
				return ec.fieldContext_SystemIntake_grbPresentationLinks(ctx, field)
			case "grbPresentationDeckRequesterReminderEmailSentTime":
				return ec.fieldContext_SystemIntake_grbPresentationDeckRequesterReminderEmailSentTime(ctx, field)
			case "grbReviewType":
				return ec.fieldContext_SystemIntake_grbReviewType(ctx, field)
			case "grbReviewAsyncRecordingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncRecordingTime(ctx, field)
			case "grbReviewAsyncEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncEndDate(ctx, field)
			case "grbReviewAsyncGRBMeetingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncGRBMeetingTime(ctx, field)
			case "grbReviewAsyncStatus":
				return ec.fieldContext_SystemIntake_grbReviewAsyncStatus(ctx, field)
			case "grbReviewAsyncManualEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncManualEndDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntake", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeAction_type(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeAction_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SystemIntakeActionType)
	fc.Result = res
	return ec.marshalNSystemIntakeActionType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeActionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeAction_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeActionType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeAction_actor(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeAction_actor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Actor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeActionActor)
	fc.Result = res
	return ec.marshalNSystemIntakeActionActor2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeActionActor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeAction_actor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_SystemIntakeActionActor_name(ctx, field)
			case "email":
				return ec.fieldContext_SystemIntakeActionActor_email(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeActionActor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeAction_step(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeAction_step(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeStep)
	fc.Result = res
	return ec.marshalOSystemIntakeStep2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeStep(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeAction_step(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeStep does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeAction_feedback(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeAction_feedback(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Feedback, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.HTML)
	fc.Result = res
	return ec.marshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeAction_feedback(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeAction_lcidExpirationChange(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeAction_lcidExpirationChange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LcidExpirationChange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeLCIDExpirationChange)
	fc.Result = res
	return ec.marshalOSystemIntakeLCIDExpirationChange2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeLCIDExpirationChange(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeAction_lcidExpirationChange(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "previousDate":
				return ec.fieldContext_SystemIntakeLCIDExpirationChange_previousDate(ctx, field)
			case "newDate":
				return ec.fieldContext_SystemIntakeLCIDExpirationChange_newDate(ctx, field)
			case "previousScope":
				return ec.fieldContext_SystemIntakeLCIDExpirationChange_previousScope(ctx, field)
			case "newScope":
				return ec.fieldContext_SystemIntakeLCIDExpirationChange_newScope(ctx, field)
			case "previousNextSteps":
				return ec.fieldContext_SystemIntakeLCIDExpirationChange_previousNextSteps(ctx, field)
			case "newNextSteps":
				return ec.fieldContext_SystemIntakeLCIDExpirationChange_newNextSteps(ctx, field)
			case "previousCostBaseline":
				return ec.fieldContext_SystemIntakeLCIDExpirationChange_previousCostBaseline(ctx, field)
			case "newCostBaseline":
				return ec.fieldContext_SystemIntakeLCIDExpirationChange_newCostBaseline(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeLCIDExpirationChange", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeAction_previousRetirementDate(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeAction_previousRetirementDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviousRetirementDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeAction_previousRetirementDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeAction_newRetirementDate(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeAction_newRetirementDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewRetirementDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeAction_newRetirementDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeAction_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeAction_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeAction_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeActionActor_name(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeActionActor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeActionActor_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeActionActor_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeActionActor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeActionActor_email(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeActionActor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeActionActor_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeActionActor_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeActionActor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeAnnualSpending_currentAnnualSpending(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeAnnualSpending) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeAnnualSpending_currentAnnualSpending(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentAnnualSpending, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeAnnualSpending_currentAnnualSpending(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeAnnualSpending",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeAnnualSpending_currentAnnualSpendingITPortion(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeAnnualSpending) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeAnnualSpending_currentAnnualSpendingITPortion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentAnnualSpendingITPortion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeAnnualSpending_currentAnnualSpendingITPortion(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeAnnualSpending",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeAnnualSpending_plannedYearOneSpending(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeAnnualSpending) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeAnnualSpending_plannedYearOneSpending(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlannedYearOneSpending, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeAnnualSpending_plannedYearOneSpending(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeAnnualSpending",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeAnnualSpending_plannedYearOneSpendingITPortion(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeAnnualSpending) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeAnnualSpending_plannedYearOneSpendingITPortion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlannedYearOneSpendingITPortion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeAnnualSpending_plannedYearOneSpendingITPortion(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeAnnualSpending",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeBusinessOwner_component(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeBusinessOwner) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeBusinessOwner_component(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Component, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeBusinessOwner_component(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeBusinessOwner",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeBusinessOwner_name(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeBusinessOwner) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeBusinessOwner_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeBusinessOwner_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeBusinessOwner",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeCollaborator_acronym(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeCollaborator_acronym(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Acronym, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeCollaborator_acronym(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeCollaborator_collaborator(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeCollaborator_collaborator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Collaborator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeCollaborator_collaborator(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeCollaborator_key(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeCollaborator_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeCollaborator_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeCollaborator_label(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeCollaborator_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeCollaborator_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeCollaborator_name(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeCollaborator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeCollaborator_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeCollaborator_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeContact_id(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeContact_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeContact_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeContact_euaUserId(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeContact_euaUserId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EUAUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeContact_euaUserId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeContact_systemIntakeId(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeContact_systemIntakeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemIntakeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeContact_systemIntakeId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeContact_component(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeContact_component(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Component, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeContact_component(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeContact_role(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeContact_role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeContact_role(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeContactsPayload_systemIntakeContacts(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeContactsPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeContactsPayload_systemIntakeContacts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemIntakeContacts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.AugmentedSystemIntakeContact)
	fc.Result = res
	return ec.marshalNAugmentedSystemIntakeContact2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐAugmentedSystemIntakeContactᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeContactsPayload_systemIntakeContacts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeContactsPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AugmentedSystemIntakeContact_id(ctx, field)
			case "euaUserId":
				return ec.fieldContext_AugmentedSystemIntakeContact_euaUserId(ctx, field)
			case "systemIntakeId":
				return ec.fieldContext_AugmentedSystemIntakeContact_systemIntakeId(ctx, field)
			case "component":
				return ec.fieldContext_AugmentedSystemIntakeContact_component(ctx, field)
			case "role":
				return ec.fieldContext_AugmentedSystemIntakeContact_role(ctx, field)
			case "commonName":
				return ec.fieldContext_AugmentedSystemIntakeContact_commonName(ctx, field)
			case "email":
				return ec.fieldContext_AugmentedSystemIntakeContact_email(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AugmentedSystemIntakeContact", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeContactsPayload_invalidEUAIDs(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeContactsPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeContactsPayload_invalidEUAIDs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvalidEUAIDs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeContactsPayload_invalidEUAIDs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeContactsPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeContract_contractor(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeContract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeContract_contractor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contractor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeContract_contractor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeContract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeContract_endDate(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeContract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeContract_endDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ContractDate)
	fc.Result = res
	return ec.marshalNContractDate2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐContractDate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeContract_endDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeContract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "day":
				return ec.fieldContext_ContractDate_day(ctx, field)
			case "month":
				return ec.fieldContext_ContractDate_month(ctx, field)
			case "year":
				return ec.fieldContext_ContractDate_year(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContractDate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeContract_hasContract(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeContract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeContract_hasContract(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasContract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeContract_hasContract(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeContract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeContract_startDate(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeContract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeContract_startDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.ContractDate)
	fc.Result = res
	return ec.marshalNContractDate2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐContractDate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeContract_startDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeContract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "day":
				return ec.fieldContext_ContractDate_day(ctx, field)
			case "month":
				return ec.fieldContext_ContractDate_month(ctx, field)
			case "year":
				return ec.fieldContext_ContractDate_year(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContractDate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeContract_vehicle(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeContract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeContract_vehicle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vehicle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeContract_vehicle(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeContract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeContractNumber_id(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeContractNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeContractNumber_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeContractNumber_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeContractNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeContractNumber_systemIntakeID(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeContractNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeContractNumber_systemIntakeID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemIntakeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeContractNumber_systemIntakeID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeContractNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeContractNumber_contractNumber(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeContractNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeContractNumber_contractNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeContractNumber_contractNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeContractNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeContractNumber_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeContractNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeContractNumber_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeContractNumber_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeContractNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeContractNumber_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeContractNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeContractNumber_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeContractNumber_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeContractNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeContractNumber_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeContractNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeContractNumber_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeContractNumber_modifiedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeContractNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeContractNumber_modifiedAt(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeContractNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeContractNumber_modifiedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeContractNumber_modifiedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeContractNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeCosts_expectedIncreaseAmount(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeCosts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeCosts_expectedIncreaseAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpectedIncreaseAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeCosts_expectedIncreaseAmount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeCosts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeCosts_isExpectingIncrease(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeCosts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeCosts_isExpectingIncrease(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsExpectingIncrease, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeCosts_isExpectingIncrease(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeCosts",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeDocument_documentType(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeDocument_documentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntakeDocument().DocumentType(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeDocumentType)
	fc.Result = res
	return ec.marshalNSystemIntakeDocumentType2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocumentType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeDocument_documentType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeDocument",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "commonType":
				return ec.fieldContext_SystemIntakeDocumentType_commonType(ctx, field)
			case "otherTypeDescription":
				return ec.fieldContext_SystemIntakeDocumentType_otherTypeDescription(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeDocumentType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeDocument_id(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeDocument_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeDocument_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeDocument_fileName(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeDocument_fileName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeDocument_fileName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeDocument_status(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeDocument_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntakeDocument().Status(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SystemIntakeDocumentStatus)
	fc.Result = res
	return ec.marshalNSystemIntakeDocumentStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocumentStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeDocument_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeDocument",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeDocumentStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeDocument_version(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeDocument_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SystemIntakeDocumentVersion)
	fc.Result = res
	return ec.marshalNSystemIntakeDocumentVersion2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocumentVersion(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeDocument_version(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeDocumentVersion does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeDocument_uploadedAt(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeDocument_uploadedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntakeDocument().UploadedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeDocument_uploadedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeDocument",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeDocument_url(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeDocument_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntakeDocument().URL(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeDocument_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeDocument",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeDocument_canDelete(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeDocument_canDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntakeDocument().CanDelete(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeDocument_canDelete(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeDocument",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeDocument_canView(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeDocument_canView(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntakeDocument().CanView(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeDocument_canView(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeDocument",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeDocument_systemIntakeId(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeDocument_systemIntakeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemIntakeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeDocument_systemIntakeId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeDocumentType_commonType(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeDocumentType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeDocumentType_commonType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommonType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SystemIntakeDocumentCommonType)
	fc.Result = res
	return ec.marshalNSystemIntakeDocumentCommonType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocumentCommonType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeDocumentType_commonType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeDocumentType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeDocumentCommonType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeDocumentType_otherTypeDescription(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeDocumentType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeDocumentType_otherTypeDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherTypeDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeDocumentType_otherTypeDescription(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeDocumentType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeFundingSource_id(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeFundingSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeFundingSource_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeFundingSource_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeFundingSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeFundingSource_fundingNumber(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeFundingSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeFundingSource_fundingNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundingNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeFundingSource_fundingNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeFundingSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeFundingSource_source(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeFundingSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeFundingSource_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(null.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeFundingSource_source(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeFundingSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBPresentationLinks_systemIntakeID(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBPresentationLinks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBPresentationLinks_systemIntakeID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemIntakeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBPresentationLinks_systemIntakeID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBPresentationLinks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBPresentationLinks_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBPresentationLinks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBPresentationLinks_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBPresentationLinks_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBPresentationLinks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBPresentationLinks_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBPresentationLinks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBPresentationLinks_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBPresentationLinks_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBPresentationLinks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBPresentationLinks_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBPresentationLinks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBPresentationLinks_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBPresentationLinks_modifiedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBPresentationLinks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBPresentationLinks_modifiedAt(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBPresentationLinks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBPresentationLinks_modifiedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBPresentationLinks_modifiedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBPresentationLinks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBPresentationLinks_recordingLink(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBPresentationLinks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBPresentationLinks_recordingLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordingLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBPresentationLinks_recordingLink(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBPresentationLinks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBPresentationLinks_recordingPasscode(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBPresentationLinks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBPresentationLinks_recordingPasscode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordingPasscode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBPresentationLinks_recordingPasscode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBPresentationLinks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBPresentationLinks_transcriptLink(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBPresentationLinks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBPresentationLinks_transcriptLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TranscriptLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBPresentationLinks_transcriptLink(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBPresentationLinks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBPresentationLinks_transcriptFileName(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBPresentationLinks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBPresentationLinks_transcriptFileName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TranscriptFileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBPresentationLinks_transcriptFileName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBPresentationLinks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBPresentationLinks_transcriptFileURL(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBPresentationLinks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBPresentationLinks_transcriptFileURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntakeGRBPresentationLinks().TranscriptFileURL(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBPresentationLinks_transcriptFileURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBPresentationLinks",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBPresentationLinks_transcriptFileStatus(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBPresentationLinks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBPresentationLinks_transcriptFileStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntakeGRBPresentationLinks().TranscriptFileStatus(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeDocumentStatus)
	fc.Result = res
	return ec.marshalOSystemIntakeDocumentStatus2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocumentStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBPresentationLinks_transcriptFileStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBPresentationLinks",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeDocumentStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBPresentationLinks_presentationDeckFileName(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBPresentationLinks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBPresentationLinks_presentationDeckFileName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PresentationDeckFileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBPresentationLinks_presentationDeckFileName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBPresentationLinks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBPresentationLinks_presentationDeckFileURL(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBPresentationLinks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBPresentationLinks_presentationDeckFileURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntakeGRBPresentationLinks().PresentationDeckFileURL(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBPresentationLinks_presentationDeckFileURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBPresentationLinks",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBPresentationLinks_presentationDeckFileStatus(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBPresentationLinks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBPresentationLinks_presentationDeckFileStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntakeGRBPresentationLinks().PresentationDeckFileStatus(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeDocumentStatus)
	fc.Result = res
	return ec.marshalOSystemIntakeDocumentStatus2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocumentStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBPresentationLinks_presentationDeckFileStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBPresentationLinks",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeDocumentStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBReviewDiscussion_initialPost(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBReviewDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBReviewDiscussion_initialPost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InitialPost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeGRBReviewDiscussionPost)
	fc.Result = res
	return ec.marshalNSystemIntakeGRBReviewDiscussionPost2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewDiscussionPost(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBReviewDiscussion_initialPost(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBReviewDiscussion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_id(ctx, field)
			case "content":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_content(ctx, field)
			case "votingRole":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_votingRole(ctx, field)
			case "grbRole":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_grbRole(ctx, field)
			case "systemIntakeID":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_systemIntakeID(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_createdByUserAccount(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_createdAt(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_modifiedByUserAccount(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeGRBReviewDiscussionPost", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBReviewDiscussion_replies(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBReviewDiscussion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBReviewDiscussion_replies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Replies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.SystemIntakeGRBReviewDiscussionPost)
	fc.Result = res
	return ec.marshalNSystemIntakeGRBReviewDiscussionPost2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewDiscussionPostᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBReviewDiscussion_replies(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBReviewDiscussion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_id(ctx, field)
			case "content":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_content(ctx, field)
			case "votingRole":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_votingRole(ctx, field)
			case "grbRole":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_grbRole(ctx, field)
			case "systemIntakeID":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_systemIntakeID(ctx, field)
			case "createdByUserAccount":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_createdByUserAccount(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_createdAt(ctx, field)
			case "modifiedByUserAccount":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_modifiedByUserAccount(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeGRBReviewDiscussionPost", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBReviewDiscussionPost_id(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBReviewDiscussionPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBReviewDiscussionPost_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBReviewDiscussionPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBReviewDiscussionPost_content(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBReviewDiscussionPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.HTML)
	fc.Result = res
	return ec.marshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBReviewDiscussionPost_content(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBReviewDiscussionPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBReviewDiscussionPost_votingRole(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBReviewDiscussionPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_votingRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VotingRole, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeGRBReviewerVotingRole)
	fc.Result = res
	return ec.marshalOSystemIntakeGRBReviewerVotingRole2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewerVotingRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBReviewDiscussionPost_votingRole(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBReviewDiscussionPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeGRBReviewerVotingRole does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBReviewDiscussionPost_grbRole(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBReviewDiscussionPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_grbRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GRBRole, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeGRBReviewerRole)
	fc.Result = res
	return ec.marshalOSystemIntakeGRBReviewerRole2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewerRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBReviewDiscussionPost_grbRole(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBReviewDiscussionPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeGRBReviewerRole does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBReviewDiscussionPost_systemIntakeID(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBReviewDiscussionPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_systemIntakeID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemIntakeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBReviewDiscussionPost_systemIntakeID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBReviewDiscussionPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBReviewDiscussionPost_createdByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBReviewDiscussionPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_createdByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedByUserAccount(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBReviewDiscussionPost_createdByUserAccount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBReviewDiscussionPost",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBReviewDiscussionPost_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBReviewDiscussionPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBReviewDiscussionPost_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBReviewDiscussionPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBReviewDiscussionPost_modifiedByUserAccount(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBReviewDiscussionPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_modifiedByUserAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedByUserAccount(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalOUserAccount2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBReviewDiscussionPost_modifiedByUserAccount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBReviewDiscussionPost",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBReviewDiscussionPost_modifiedAt(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBReviewDiscussionPost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBReviewDiscussionPost_modifiedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBReviewDiscussionPost_modifiedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBReviewDiscussionPost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBReviewer_id(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBReviewer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBReviewer_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBReviewer_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBReviewer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBReviewer_userAccount(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBReviewer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBReviewer_userAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserAccount(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*authentication.UserAccount)
	fc.Result = res
	return ec.marshalNUserAccount2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBReviewer_userAccount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBReviewer",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAccount_id(ctx, field)
			case "username":
				return ec.fieldContext_UserAccount_username(ctx, field)
			case "commonName":
				return ec.fieldContext_UserAccount_commonName(ctx, field)
			case "locale":
				return ec.fieldContext_UserAccount_locale(ctx, field)
			case "email":
				return ec.fieldContext_UserAccount_email(ctx, field)
			case "givenName":
				return ec.fieldContext_UserAccount_givenName(ctx, field)
			case "familyName":
				return ec.fieldContext_UserAccount_familyName(ctx, field)
			case "zoneInfo":
				return ec.fieldContext_UserAccount_zoneInfo(ctx, field)
			case "hasLoggedIn":
				return ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBReviewer_systemIntakeID(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBReviewer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBReviewer_systemIntakeID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemIntakeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBReviewer_systemIntakeID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBReviewer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBReviewer_votingRole(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBReviewer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBReviewer_votingRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntakeGRBReviewer().VotingRole(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SystemIntakeGRBReviewerVotingRole)
	fc.Result = res
	return ec.marshalNSystemIntakeGRBReviewerVotingRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewerVotingRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBReviewer_votingRole(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBReviewer",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeGRBReviewerVotingRole does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBReviewer_vote(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBReviewer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBReviewer_vote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeAsyncGRBVotingOption)
	fc.Result = res
	return ec.marshalOSystemIntakeAsyncGRBVotingOption2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeAsyncGRBVotingOption(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBReviewer_vote(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBReviewer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeAsyncGRBVotingOption does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBReviewer_voteComment(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBReviewer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBReviewer_voteComment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteComment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBReviewer_voteComment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBReviewer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBReviewer_dateVoted(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBReviewer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBReviewer_dateVoted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateVoted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.Time)
	fc.Result = res
	return ec.marshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBReviewer_dateVoted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBReviewer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBReviewer_grbRole(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBReviewer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBReviewer_grbRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntakeGRBReviewer().GrbRole(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.SystemIntakeGRBReviewerRole)
	fc.Result = res
	return ec.marshalNSystemIntakeGRBReviewerRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewerRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBReviewer_grbRole(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBReviewer",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SystemIntakeGRBReviewerRole does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBReviewer_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBReviewer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBReviewer_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBReviewer_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBReviewer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBReviewer_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBReviewer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBReviewer_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBReviewer_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBReviewer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBReviewer_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBReviewer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBReviewer_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBReviewer_modifiedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBReviewer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGRBReviewer_modifiedAt(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGRBReviewer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGRBReviewer_modifiedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGRBReviewer_modifiedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGRBReviewer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGovernanceTeam_isPresent(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGovernanceTeam) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGovernanceTeam_isPresent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPresent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGovernanceTeam_isPresent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGovernanceTeam",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeGovernanceTeam_teams(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeGovernanceTeam) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeGovernanceTeam_teams(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Teams, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.SystemIntakeCollaborator)
	fc.Result = res
	return ec.marshalOSystemIntakeCollaborator2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeCollaboratorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeGovernanceTeam_teams(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeGovernanceTeam",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "acronym":
				return ec.fieldContext_SystemIntakeCollaborator_acronym(ctx, field)
			case "collaborator":
				return ec.fieldContext_SystemIntakeCollaborator_collaborator(ctx, field)
			case "key":
				return ec.fieldContext_SystemIntakeCollaborator_key(ctx, field)
			case "label":
				return ec.fieldContext_SystemIntakeCollaborator_label(ctx, field)
			case "name":
				return ec.fieldContext_SystemIntakeCollaborator_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeCollaborator", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeISSO_isPresent(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeIsso) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeISSO_isPresent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPresent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeISSO_isPresent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeISSO",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeISSO_name(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeIsso) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeISSO_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeISSO_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeISSO",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeLCIDExpirationChange_previousDate(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeLCIDExpirationChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeLCIDExpirationChange_previousDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviousDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeLCIDExpirationChange_previousDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeLCIDExpirationChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeLCIDExpirationChange_newDate(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeLCIDExpirationChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeLCIDExpirationChange_newDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeLCIDExpirationChange_newDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeLCIDExpirationChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeLCIDExpirationChange_previousScope(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeLCIDExpirationChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeLCIDExpirationChange_previousScope(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviousScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.HTML)
	fc.Result = res
	return ec.marshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeLCIDExpirationChange_previousScope(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeLCIDExpirationChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeLCIDExpirationChange_newScope(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeLCIDExpirationChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeLCIDExpirationChange_newScope(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewScope, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.HTML)
	fc.Result = res
	return ec.marshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeLCIDExpirationChange_newScope(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeLCIDExpirationChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeLCIDExpirationChange_previousNextSteps(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeLCIDExpirationChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeLCIDExpirationChange_previousNextSteps(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviousNextSteps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.HTML)
	fc.Result = res
	return ec.marshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeLCIDExpirationChange_previousNextSteps(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeLCIDExpirationChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeLCIDExpirationChange_newNextSteps(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeLCIDExpirationChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeLCIDExpirationChange_newNextSteps(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewNextSteps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.HTML)
	fc.Result = res
	return ec.marshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeLCIDExpirationChange_newNextSteps(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeLCIDExpirationChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeLCIDExpirationChange_previousCostBaseline(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeLCIDExpirationChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeLCIDExpirationChange_previousCostBaseline(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreviousCostBaseline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeLCIDExpirationChange_previousCostBaseline(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeLCIDExpirationChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeLCIDExpirationChange_newCostBaseline(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeLCIDExpirationChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeLCIDExpirationChange_newCostBaseline(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewCostBaseline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeLCIDExpirationChange_newCostBaseline(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeLCIDExpirationChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeNote_author(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeNote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeNote_author(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntakeNote().Author(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntakeNoteAuthor)
	fc.Result = res
	return ec.marshalNSystemIntakeNoteAuthor2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeNoteAuthor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeNote_author(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeNote",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "eua":
				return ec.fieldContext_SystemIntakeNoteAuthor_eua(ctx, field)
			case "name":
				return ec.fieldContext_SystemIntakeNoteAuthor_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntakeNoteAuthor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeNote_content(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeNote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeNote_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.HTML)
	fc.Result = res
	return ec.marshalNHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeNote_content(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeNote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeNote_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeNote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeNote_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeNote_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeNote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeNote_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeNote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeNote_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeNote_modifiedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeNote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeNote_modifiedAt(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeNote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeNote_modifiedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeNote_modifiedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeNote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeNote_isArchived(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeNote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeNote_isArchived(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsArchived, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeNote_isArchived(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeNote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeNote_editor(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeNote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeNote_editor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SystemIntakeNote().Editor(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UserInfo)
	fc.Result = res
	return ec.marshalOUserInfo2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUserInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeNote_editor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeNote",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstName":
				return ec.fieldContext_UserInfo_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_UserInfo_lastName(ctx, field)
			case "commonName":
				return ec.fieldContext_UserInfo_commonName(ctx, field)
			case "email":
				return ec.fieldContext_UserInfo_email(ctx, field)
			case "euaUserId":
				return ec.fieldContext_UserInfo_euaUserId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeNote_id(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeNote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeNote_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeNote_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeNote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeNoteAuthor_eua(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeNoteAuthor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeNoteAuthor_eua(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Eua, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeNoteAuthor_eua(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeNoteAuthor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeNoteAuthor_name(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeNoteAuthor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeNoteAuthor_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeNoteAuthor_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeNoteAuthor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeProductManager_component(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeProductManager) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeProductManager_component(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Component, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeProductManager_component(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeProductManager",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeProductManager_name(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeProductManager) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeProductManager_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeProductManager_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeProductManager",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeRequester_component(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeRequester) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeRequester_component(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Component, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeRequester_component(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeRequester",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeRequester_email(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeRequester) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeRequester_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeRequester_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeRequester",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SystemIntakeRequester_name(ctx context.Context, field graphql.CollectedField, obj *models.SystemIntakeRequester) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SystemIntakeRequester_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SystemIntakeRequester_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SystemIntakeRequester",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBAdminNote_id(ctx context.Context, field graphql.CollectedField, obj *models.TRBAdminNote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBAdminNote_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBAdminNote_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBAdminNote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBAdminNote_trbRequestId(ctx context.Context, field graphql.CollectedField, obj *models.TRBAdminNote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBAdminNote_trbRequestId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TRBRequestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBAdminNote_trbRequestId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBAdminNote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBAdminNote_category(ctx context.Context, field graphql.CollectedField, obj *models.TRBAdminNote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBAdminNote_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TRBAdminNoteCategory)
	fc.Result = res
	return ec.marshalNTRBAdminNoteCategory2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBAdminNoteCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBAdminNote_category(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBAdminNote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TRBAdminNoteCategory does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBAdminNote_noteText(ctx context.Context, field graphql.CollectedField, obj *models.TRBAdminNote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBAdminNote_noteText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NoteText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.HTML)
	fc.Result = res
	return ec.marshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBAdminNote_noteText(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBAdminNote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBAdminNote_author(ctx context.Context, field graphql.CollectedField, obj *models.TRBAdminNote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBAdminNote_author(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBAdminNote().Author(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.UserInfo)
	fc.Result = res
	return ec.marshalNUserInfo2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUserInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBAdminNote_author(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBAdminNote",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstName":
				return ec.fieldContext_UserInfo_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_UserInfo_lastName(ctx, field)
			case "commonName":
				return ec.fieldContext_UserInfo_commonName(ctx, field)
			case "email":
				return ec.fieldContext_UserInfo_email(ctx, field)
			case "euaUserId":
				return ec.fieldContext_UserInfo_euaUserId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBAdminNote_isArchived(ctx context.Context, field graphql.CollectedField, obj *models.TRBAdminNote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBAdminNote_isArchived(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsArchived, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBAdminNote_isArchived(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBAdminNote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBAdminNote_categorySpecificData(ctx context.Context, field graphql.CollectedField, obj *models.TRBAdminNote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBAdminNote_categorySpecificData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBAdminNote().CategorySpecificData(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TRBAdminNoteCategorySpecificData)
	fc.Result = res
	return ec.marshalNTRBAdminNoteCategorySpecificData2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBAdminNoteCategorySpecificData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBAdminNote_categorySpecificData(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBAdminNote",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TRBAdminNoteCategorySpecificData does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBAdminNote_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.TRBAdminNote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBAdminNote_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBAdminNote_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBAdminNote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBAdminNote_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.TRBAdminNote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBAdminNote_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBAdminNote_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBAdminNote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBAdminNote_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.TRBAdminNote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBAdminNote_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBAdminNote_modifiedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBAdminNote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBAdminNote_modifiedAt(ctx context.Context, field graphql.CollectedField, obj *models.TRBAdminNote) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBAdminNote_modifiedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBAdminNote_modifiedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBAdminNote",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBAdminNoteConsultSessionCategoryData_placeholderField(ctx context.Context, field graphql.CollectedField, obj *models.TRBAdminNoteConsultSessionCategoryData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBAdminNoteConsultSessionCategoryData_placeholderField(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlaceholderField, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBAdminNoteConsultSessionCategoryData_placeholderField(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBAdminNoteConsultSessionCategoryData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBAdminNoteGeneralRequestCategoryData_placeholderField(ctx context.Context, field graphql.CollectedField, obj *models.TRBAdminNoteGeneralRequestCategoryData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBAdminNoteGeneralRequestCategoryData_placeholderField(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlaceholderField, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBAdminNoteGeneralRequestCategoryData_placeholderField(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBAdminNoteGeneralRequestCategoryData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBAdminNoteGuidanceLetterCategoryData_appliesToMeetingSummary(ctx context.Context, field graphql.CollectedField, obj *models.TRBAdminNoteGuidanceLetterCategoryData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBAdminNoteGuidanceLetterCategoryData_appliesToMeetingSummary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppliesToMeetingSummary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBAdminNoteGuidanceLetterCategoryData_appliesToMeetingSummary(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBAdminNoteGuidanceLetterCategoryData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBAdminNoteGuidanceLetterCategoryData_appliesToNextSteps(ctx context.Context, field graphql.CollectedField, obj *models.TRBAdminNoteGuidanceLetterCategoryData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBAdminNoteGuidanceLetterCategoryData_appliesToNextSteps(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppliesToNextSteps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBAdminNoteGuidanceLetterCategoryData_appliesToNextSteps(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBAdminNoteGuidanceLetterCategoryData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBAdminNoteGuidanceLetterCategoryData_insights(ctx context.Context, field graphql.CollectedField, obj *models.TRBAdminNoteGuidanceLetterCategoryData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBAdminNoteGuidanceLetterCategoryData_insights(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Insights, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TRBGuidanceLetterInsight)
	fc.Result = res
	return ec.marshalNTRBGuidanceLetterInsight2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterInsightᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBAdminNoteGuidanceLetterCategoryData_insights(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBAdminNoteGuidanceLetterCategoryData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBGuidanceLetterInsight_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBGuidanceLetterInsight_trbRequestId(ctx, field)
			case "title":
				return ec.fieldContext_TRBGuidanceLetterInsight_title(ctx, field)
			case "insight":
				return ec.fieldContext_TRBGuidanceLetterInsight_insight(ctx, field)
			case "links":
				return ec.fieldContext_TRBGuidanceLetterInsight_links(ctx, field)
			case "author":
				return ec.fieldContext_TRBGuidanceLetterInsight_author(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBGuidanceLetterInsight_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBGuidanceLetterInsight_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBGuidanceLetterInsight_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBGuidanceLetterInsight_modifiedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_TRBGuidanceLetterInsight_deletedAt(ctx, field)
			case "category":
				return ec.fieldContext_TRBGuidanceLetterInsight_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBGuidanceLetterInsight", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBAdminNoteInitialRequestFormCategoryData_appliesToBasicRequestDetails(ctx context.Context, field graphql.CollectedField, obj *models.TRBAdminNoteInitialRequestFormCategoryData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBAdminNoteInitialRequestFormCategoryData_appliesToBasicRequestDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppliesToBasicRequestDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBAdminNoteInitialRequestFormCategoryData_appliesToBasicRequestDetails(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBAdminNoteInitialRequestFormCategoryData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBAdminNoteInitialRequestFormCategoryData_appliesToSubjectAreas(ctx context.Context, field graphql.CollectedField, obj *models.TRBAdminNoteInitialRequestFormCategoryData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBAdminNoteInitialRequestFormCategoryData_appliesToSubjectAreas(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppliesToSubjectAreas, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBAdminNoteInitialRequestFormCategoryData_appliesToSubjectAreas(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBAdminNoteInitialRequestFormCategoryData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBAdminNoteInitialRequestFormCategoryData_appliesToAttendees(ctx context.Context, field graphql.CollectedField, obj *models.TRBAdminNoteInitialRequestFormCategoryData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBAdminNoteInitialRequestFormCategoryData_appliesToAttendees(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppliesToAttendees, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBAdminNoteInitialRequestFormCategoryData_appliesToAttendees(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBAdminNoteInitialRequestFormCategoryData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBAdminNoteSupportingDocumentsCategoryData_documents(ctx context.Context, field graphql.CollectedField, obj *models.TRBAdminNoteSupportingDocumentsCategoryData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBAdminNoteSupportingDocumentsCategoryData_documents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Documents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TRBRequestDocument)
	fc.Result = res
	return ec.marshalNTRBRequestDocument2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBAdminNoteSupportingDocumentsCategoryData_documents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBAdminNoteSupportingDocumentsCategoryData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "documentType":
				return ec.fieldContext_TRBRequestDocument_documentType(ctx, field)
			case "id":
				return ec.fieldContext_TRBRequestDocument_id(ctx, field)
			case "fileName":
				return ec.fieldContext_TRBRequestDocument_fileName(ctx, field)
			case "status":
				return ec.fieldContext_TRBRequestDocument_status(ctx, field)
			case "uploadedAt":
				return ec.fieldContext_TRBRequestDocument_uploadedAt(ctx, field)
			case "url":
				return ec.fieldContext_TRBRequestDocument_url(ctx, field)
			case "deletedAt":
				return ec.fieldContext_TRBRequestDocument_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequestDocument", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBFundingSource_id(ctx context.Context, field graphql.CollectedField, obj *models.TRBFundingSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBFundingSource_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBFundingSource_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBFundingSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBFundingSource_trbRequestId(ctx context.Context, field graphql.CollectedField, obj *models.TRBFundingSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBFundingSource_trbRequestId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TRBRequestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBFundingSource_trbRequestId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBFundingSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBFundingSource_fundingNumber(ctx context.Context, field graphql.CollectedField, obj *models.TRBFundingSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBFundingSource_fundingNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FundingNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBFundingSource_fundingNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBFundingSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBFundingSource_source(ctx context.Context, field graphql.CollectedField, obj *models.TRBFundingSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBFundingSource_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBFundingSource_source(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBFundingSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBFundingSource_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.TRBFundingSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBFundingSource_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBFundingSource_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBFundingSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBFundingSource_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.TRBFundingSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBFundingSource_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBFundingSource_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBFundingSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBFundingSource_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.TRBFundingSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBFundingSource_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBFundingSource_modifiedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBFundingSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBFundingSource_modifiedAt(ctx context.Context, field graphql.CollectedField, obj *models.TRBFundingSource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBFundingSource_modifiedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBFundingSource_modifiedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBFundingSource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetter_id(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetter_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetter_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetter_trbRequestId(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetter_trbRequestId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TRBRequestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetter_trbRequestId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetter_author(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetter_author(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBGuidanceLetter().Author(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.UserInfo)
	fc.Result = res
	return ec.marshalNUserInfo2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUserInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetter_author(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetter",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstName":
				return ec.fieldContext_UserInfo_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_UserInfo_lastName(ctx, field)
			case "commonName":
				return ec.fieldContext_UserInfo_commonName(ctx, field)
			case "email":
				return ec.fieldContext_UserInfo_email(ctx, field)
			case "euaUserId":
				return ec.fieldContext_UserInfo_euaUserId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetter_meetingSummary(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetter_meetingSummary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MeetingSummary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.HTML)
	fc.Result = res
	return ec.marshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetter_meetingSummary(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetter_nextSteps(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetter_nextSteps(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextSteps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.HTML)
	fc.Result = res
	return ec.marshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetter_nextSteps(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetter_isFollowupRecommended(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetter_isFollowupRecommended(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFollowupRecommended, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetter_isFollowupRecommended(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetter_dateSent(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetter_dateSent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateSent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetter_dateSent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetter_followupPoint(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetter_followupPoint(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FollowupPoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetter_followupPoint(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetter_insights(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetter_insights(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBGuidanceLetter().Insights(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TRBGuidanceLetterInsight)
	fc.Result = res
	return ec.marshalNTRBGuidanceLetterInsight2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterInsightᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetter_insights(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetter",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBGuidanceLetterInsight_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBGuidanceLetterInsight_trbRequestId(ctx, field)
			case "title":
				return ec.fieldContext_TRBGuidanceLetterInsight_title(ctx, field)
			case "insight":
				return ec.fieldContext_TRBGuidanceLetterInsight_insight(ctx, field)
			case "links":
				return ec.fieldContext_TRBGuidanceLetterInsight_links(ctx, field)
			case "author":
				return ec.fieldContext_TRBGuidanceLetterInsight_author(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBGuidanceLetterInsight_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBGuidanceLetterInsight_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBGuidanceLetterInsight_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBGuidanceLetterInsight_modifiedAt(ctx, field)
			case "deletedAt":
				return ec.fieldContext_TRBGuidanceLetterInsight_deletedAt(ctx, field)
			case "category":
				return ec.fieldContext_TRBGuidanceLetterInsight_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBGuidanceLetterInsight", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetter_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetter_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetter_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetter_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetter_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetter_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetter_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetter_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetter_modifiedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetter_modifiedAt(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetter_modifiedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetter_modifiedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetterInsight_id(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetterInsight) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetterInsight_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetterInsight_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetterInsight",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetterInsight_trbRequestId(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetterInsight) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetterInsight_trbRequestId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TRBRequestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetterInsight_trbRequestId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetterInsight",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetterInsight_title(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetterInsight) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetterInsight_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetterInsight_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetterInsight",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetterInsight_insight(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetterInsight) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetterInsight_insight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Insight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.HTML)
	fc.Result = res
	return ec.marshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetterInsight_insight(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetterInsight",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetterInsight_links(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetterInsight) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetterInsight_links(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBGuidanceLetterInsight().Links(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetterInsight_links(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetterInsight",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetterInsight_author(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetterInsight) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetterInsight_author(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBGuidanceLetterInsight().Author(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.UserInfo)
	fc.Result = res
	return ec.marshalNUserInfo2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUserInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetterInsight_author(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetterInsight",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstName":
				return ec.fieldContext_UserInfo_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_UserInfo_lastName(ctx, field)
			case "commonName":
				return ec.fieldContext_UserInfo_commonName(ctx, field)
			case "email":
				return ec.fieldContext_UserInfo_email(ctx, field)
			case "euaUserId":
				return ec.fieldContext_UserInfo_euaUserId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetterInsight_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetterInsight) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetterInsight_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetterInsight_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetterInsight",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetterInsight_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetterInsight) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetterInsight_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetterInsight_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetterInsight",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetterInsight_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetterInsight) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetterInsight_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetterInsight_modifiedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetterInsight",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetterInsight_modifiedAt(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetterInsight) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetterInsight_modifiedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetterInsight_modifiedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetterInsight",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetterInsight_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetterInsight) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetterInsight_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetterInsight_deletedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetterInsight",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBGuidanceLetterInsight_category(ctx context.Context, field graphql.CollectedField, obj *models.TRBGuidanceLetterInsight) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBGuidanceLetterInsight_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.TRBGuidanceLetterInsightCategory)
	fc.Result = res
	return ec.marshalOTRBGuidanceLetterInsightCategory2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterInsightCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBGuidanceLetterInsight_category(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBGuidanceLetterInsight",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TRBGuidanceLetterInsightCategory does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_id(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_name(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_archived(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_archived(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Archived, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_archived(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_type(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TRBRequestType)
	fc.Result = res
	return ec.marshalNTRBRequestType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TRBRequestType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_state(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TRBRequestState)
	fc.Result = res
	return ec.marshalNTRBRequestState2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_state(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TRBRequestState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_status(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequest().Status(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TRBRequestStatus)
	fc.Result = res
	return ec.marshalNTRBRequestStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TRBRequestStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_attendees(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_attendees(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequest().Attendees(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TRBRequestAttendee)
	fc.Result = res
	return ec.marshalNTRBRequestAttendee2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestAttendeeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_attendees(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequestAttendee_id(ctx, field)
			case "euaUserId":
				return ec.fieldContext_TRBRequestAttendee_euaUserId(ctx, field)
			case "userInfo":
				return ec.fieldContext_TRBRequestAttendee_userInfo(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBRequestAttendee_trbRequestId(ctx, field)
			case "component":
				return ec.fieldContext_TRBRequestAttendee_component(ctx, field)
			case "role":
				return ec.fieldContext_TRBRequestAttendee_role(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequestAttendee_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequestAttendee_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequestAttendee_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequestAttendee_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequestAttendee", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_feedback(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_feedback(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequest().Feedback(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TRBRequestFeedback)
	fc.Result = res
	return ec.marshalNTRBRequestFeedback2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestFeedbackᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_feedback(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequestFeedback_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBRequestFeedback_trbRequestId(ctx, field)
			case "feedbackMessage":
				return ec.fieldContext_TRBRequestFeedback_feedbackMessage(ctx, field)
			case "copyTrbMailbox":
				return ec.fieldContext_TRBRequestFeedback_copyTrbMailbox(ctx, field)
			case "notifyEuaIds":
				return ec.fieldContext_TRBRequestFeedback_notifyEuaIds(ctx, field)
			case "action":
				return ec.fieldContext_TRBRequestFeedback_action(ctx, field)
			case "author":
				return ec.fieldContext_TRBRequestFeedback_author(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequestFeedback_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequestFeedback_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequestFeedback_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequestFeedback_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequestFeedback", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_documents(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_documents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequest().Documents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TRBRequestDocument)
	fc.Result = res
	return ec.marshalNTRBRequestDocument2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestDocumentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_documents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "documentType":
				return ec.fieldContext_TRBRequestDocument_documentType(ctx, field)
			case "id":
				return ec.fieldContext_TRBRequestDocument_id(ctx, field)
			case "fileName":
				return ec.fieldContext_TRBRequestDocument_fileName(ctx, field)
			case "status":
				return ec.fieldContext_TRBRequestDocument_status(ctx, field)
			case "uploadedAt":
				return ec.fieldContext_TRBRequestDocument_uploadedAt(ctx, field)
			case "url":
				return ec.fieldContext_TRBRequestDocument_url(ctx, field)
			case "deletedAt":
				return ec.fieldContext_TRBRequestDocument_deletedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequestDocument", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_form(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_form(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequest().Form(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBRequestForm)
	fc.Result = res
	return ec.marshalNTRBRequestForm2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestForm(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_form(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequestForm_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBRequestForm_trbRequestId(ctx, field)
			case "status":
				return ec.fieldContext_TRBRequestForm_status(ctx, field)
			case "component":
				return ec.fieldContext_TRBRequestForm_component(ctx, field)
			case "needsAssistanceWith":
				return ec.fieldContext_TRBRequestForm_needsAssistanceWith(ctx, field)
			case "hasSolutionInMind":
				return ec.fieldContext_TRBRequestForm_hasSolutionInMind(ctx, field)
			case "proposedSolution":
				return ec.fieldContext_TRBRequestForm_proposedSolution(ctx, field)
			case "whereInProcess":
				return ec.fieldContext_TRBRequestForm_whereInProcess(ctx, field)
			case "whereInProcessOther":
				return ec.fieldContext_TRBRequestForm_whereInProcessOther(ctx, field)
			case "hasExpectedStartEndDates":
				return ec.fieldContext_TRBRequestForm_hasExpectedStartEndDates(ctx, field)
			case "expectedStartDate":
				return ec.fieldContext_TRBRequestForm_expectedStartDate(ctx, field)
			case "expectedEndDate":
				return ec.fieldContext_TRBRequestForm_expectedEndDate(ctx, field)
			case "collabGroups":
				return ec.fieldContext_TRBRequestForm_collabGroups(ctx, field)
			case "collabDateSecurity":
				return ec.fieldContext_TRBRequestForm_collabDateSecurity(ctx, field)
			case "collabDateEnterpriseArchitecture":
				return ec.fieldContext_TRBRequestForm_collabDateEnterpriseArchitecture(ctx, field)
			case "collabDateCloud":
				return ec.fieldContext_TRBRequestForm_collabDateCloud(ctx, field)
			case "collabDatePrivacyAdvisor":
				return ec.fieldContext_TRBRequestForm_collabDatePrivacyAdvisor(ctx, field)
			case "collabDateGovernanceReviewBoard":
				return ec.fieldContext_TRBRequestForm_collabDateGovernanceReviewBoard(ctx, field)
			case "collabDateOther":
				return ec.fieldContext_TRBRequestForm_collabDateOther(ctx, field)
			case "collabGroupOther":
				return ec.fieldContext_TRBRequestForm_collabGroupOther(ctx, field)
			case "collabGRBConsultRequested":
				return ec.fieldContext_TRBRequestForm_collabGRBConsultRequested(ctx, field)
			case "fundingSources":
				return ec.fieldContext_TRBRequestForm_fundingSources(ctx, field)
			case "systemIntakes":
				return ec.fieldContext_TRBRequestForm_systemIntakes(ctx, field)
			case "subjectAreaOptions":
				return ec.fieldContext_TRBRequestForm_subjectAreaOptions(ctx, field)
			case "subjectAreaOptionOther":
				return ec.fieldContext_TRBRequestForm_subjectAreaOptionOther(ctx, field)
			case "submittedAt":
				return ec.fieldContext_TRBRequestForm_submittedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequestForm_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequestForm_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequestForm_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequestForm_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequestForm", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_guidanceLetter(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_guidanceLetter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequest().GuidanceLetter(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TRBGuidanceLetter)
	fc.Result = res
	return ec.marshalOTRBGuidanceLetter2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_guidanceLetter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBGuidanceLetter_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBGuidanceLetter_trbRequestId(ctx, field)
			case "author":
				return ec.fieldContext_TRBGuidanceLetter_author(ctx, field)
			case "meetingSummary":
				return ec.fieldContext_TRBGuidanceLetter_meetingSummary(ctx, field)
			case "nextSteps":
				return ec.fieldContext_TRBGuidanceLetter_nextSteps(ctx, field)
			case "isFollowupRecommended":
				return ec.fieldContext_TRBGuidanceLetter_isFollowupRecommended(ctx, field)
			case "dateSent":
				return ec.fieldContext_TRBGuidanceLetter_dateSent(ctx, field)
			case "followupPoint":
				return ec.fieldContext_TRBGuidanceLetter_followupPoint(ctx, field)
			case "insights":
				return ec.fieldContext_TRBGuidanceLetter_insights(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBGuidanceLetter_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBGuidanceLetter_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBGuidanceLetter_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBGuidanceLetter_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBGuidanceLetter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_taskStatuses(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_taskStatuses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequest().TaskStatuses(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBTaskStatuses)
	fc.Result = res
	return ec.marshalNTRBTaskStatuses2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBTaskStatuses(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_taskStatuses(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "formStatus":
				return ec.fieldContext_TRBTaskStatuses_formStatus(ctx, field)
			case "feedbackStatus":
				return ec.fieldContext_TRBTaskStatuses_feedbackStatus(ctx, field)
			case "consultPrepStatus":
				return ec.fieldContext_TRBTaskStatuses_consultPrepStatus(ctx, field)
			case "attendConsultStatus":
				return ec.fieldContext_TRBTaskStatuses_attendConsultStatus(ctx, field)
			case "guidanceLetterStatus":
				return ec.fieldContext_TRBTaskStatuses_guidanceLetterStatus(ctx, field)
			case "guidanceLetterStatusTaskList":
				return ec.fieldContext_TRBTaskStatuses_guidanceLetterStatusTaskList(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBTaskStatuses", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_consultMeetingTime(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_consultMeetingTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConsultMeetingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_consultMeetingTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_lastMeetingDate(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_lastMeetingDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequest().LastMeetingDate(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_lastMeetingDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_nextMeetingDate(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_nextMeetingDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequest().NextMeetingDate(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_nextMeetingDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_trbLead(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_trbLead(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TRBLead, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_trbLead(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_trbLeadInfo(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_trbLeadInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequest().TrbLeadInfo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.UserInfo)
	fc.Result = res
	return ec.marshalNUserInfo2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUserInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_trbLeadInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstName":
				return ec.fieldContext_UserInfo_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_UserInfo_lastName(ctx, field)
			case "commonName":
				return ec.fieldContext_UserInfo_commonName(ctx, field)
			case "email":
				return ec.fieldContext_UserInfo_email(ctx, field)
			case "euaUserId":
				return ec.fieldContext_UserInfo_euaUserId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_requesterInfo(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_requesterInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequest().RequesterInfo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.UserInfo)
	fc.Result = res
	return ec.marshalNUserInfo2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUserInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_requesterInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstName":
				return ec.fieldContext_UserInfo_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_UserInfo_lastName(ctx, field)
			case "commonName":
				return ec.fieldContext_UserInfo_commonName(ctx, field)
			case "email":
				return ec.fieldContext_UserInfo_email(ctx, field)
			case "euaUserId":
				return ec.fieldContext_UserInfo_euaUserId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_requesterComponent(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_requesterComponent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequest().RequesterComponent(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_requesterComponent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_adminNotes(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_adminNotes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		directive0 := func(rctx context.Context) (any, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.TRBRequest().AdminNotes(rctx, obj)
		}

		directive1 := func(ctx context.Context) (any, error) {
			role, err := ec.unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx, "EASI_TRB_ADMIN")
			if err != nil {
				var zeroVal []*models.TRBAdminNote
				return zeroVal, err
			}
			if ec.directives.HasRole == nil {
				var zeroVal []*models.TRBAdminNote
				return zeroVal, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.TRBAdminNote); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/cms-enterprise/easi-app/pkg/models.TRBAdminNote`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TRBAdminNote)
	fc.Result = res
	return ec.marshalNTRBAdminNote2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBAdminNoteᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_adminNotes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBAdminNote_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBAdminNote_trbRequestId(ctx, field)
			case "category":
				return ec.fieldContext_TRBAdminNote_category(ctx, field)
			case "noteText":
				return ec.fieldContext_TRBAdminNote_noteText(ctx, field)
			case "author":
				return ec.fieldContext_TRBAdminNote_author(ctx, field)
			case "isArchived":
				return ec.fieldContext_TRBAdminNote_isArchived(ctx, field)
			case "categorySpecificData":
				return ec.fieldContext_TRBAdminNote_categorySpecificData(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBAdminNote_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBAdminNote_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBAdminNote_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBAdminNote_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBAdminNote", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_isRecent(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_isRecent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequest().IsRecent(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_isRecent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_modifiedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_modifiedAt(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_modifiedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_modifiedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_contractName(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_contractName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(zero.String)
	fc.Result = res
	return ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_contractName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_relationType(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_relationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequest().RelationType(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.RequestRelationType)
	fc.Result = res
	return ec.marshalORequestRelationType2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRequestRelationType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_relationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RequestRelationType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_contractNumbers(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_contractNumbers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequest().ContractNumbers(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TRBRequestContractNumber)
	fc.Result = res
	return ec.marshalNTRBRequestContractNumber2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestContractNumberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_contractNumbers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequestContractNumber_id(ctx, field)
			case "trbRequestID":
				return ec.fieldContext_TRBRequestContractNumber_trbRequestID(ctx, field)
			case "contractNumber":
				return ec.fieldContext_TRBRequestContractNumber_contractNumber(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequestContractNumber_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequestContractNumber_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequestContractNumber_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequestContractNumber_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequestContractNumber", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_systems(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_systems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequest().Systems(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.CedarSystem)
	fc.Result = res
	return ec.marshalNCedarSystem2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSystemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_systems(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CedarSystem_id(ctx, field)
			case "name":
				return ec.fieldContext_CedarSystem_name(ctx, field)
			case "description":
				return ec.fieldContext_CedarSystem_description(ctx, field)
			case "acronym":
				return ec.fieldContext_CedarSystem_acronym(ctx, field)
			case "atoEffectiveDate":
				return ec.fieldContext_CedarSystem_atoEffectiveDate(ctx, field)
			case "atoExpirationDate":
				return ec.fieldContext_CedarSystem_atoExpirationDate(ctx, field)
			case "status":
				return ec.fieldContext_CedarSystem_status(ctx, field)
			case "businessOwnerOrg":
				return ec.fieldContext_CedarSystem_businessOwnerOrg(ctx, field)
			case "businessOwnerOrgComp":
				return ec.fieldContext_CedarSystem_businessOwnerOrgComp(ctx, field)
			case "businessOwnerRoles":
				return ec.fieldContext_CedarSystem_businessOwnerRoles(ctx, field)
			case "systemMaintainerOrg":
				return ec.fieldContext_CedarSystem_systemMaintainerOrg(ctx, field)
			case "systemMaintainerOrgComp":
				return ec.fieldContext_CedarSystem_systemMaintainerOrgComp(ctx, field)
			case "versionId":
				return ec.fieldContext_CedarSystem_versionId(ctx, field)
			case "isBookmarked":
				return ec.fieldContext_CedarSystem_isBookmarked(ctx, field)
			case "linkedTrbRequests":
				return ec.fieldContext_CedarSystem_linkedTrbRequests(ctx, field)
			case "linkedSystemIntakes":
				return ec.fieldContext_CedarSystem_linkedSystemIntakes(ctx, field)
			case "uuid":
				return ec.fieldContext_CedarSystem_uuid(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CedarSystem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_relatedIntakes(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_relatedIntakes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequest().RelatedIntakes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.SystemIntake)
	fc.Result = res
	return ec.marshalNSystemIntake2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_relatedIntakes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "actions":
				return ec.fieldContext_SystemIntake_actions(ctx, field)
			case "adminLead":
				return ec.fieldContext_SystemIntake_adminLead(ctx, field)
			case "archivedAt":
				return ec.fieldContext_SystemIntake_archivedAt(ctx, field)
			case "businessCase":
				return ec.fieldContext_SystemIntake_businessCase(ctx, field)
			case "businessNeed":
				return ec.fieldContext_SystemIntake_businessNeed(ctx, field)
			case "businessOwner":
				return ec.fieldContext_SystemIntake_businessOwner(ctx, field)
			case "businessSolution":
				return ec.fieldContext_SystemIntake_businessSolution(ctx, field)
			case "contract":
				return ec.fieldContext_SystemIntake_contract(ctx, field)
			case "costs":
				return ec.fieldContext_SystemIntake_costs(ctx, field)
			case "annualSpending":
				return ec.fieldContext_SystemIntake_annualSpending(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntake_createdAt(ctx, field)
			case "currentStage":
				return ec.fieldContext_SystemIntake_currentStage(ctx, field)
			case "decisionNextSteps":
				return ec.fieldContext_SystemIntake_decisionNextSteps(ctx, field)
			case "eaCollaborator":
				return ec.fieldContext_SystemIntake_eaCollaborator(ctx, field)
			case "eaCollaboratorName":
				return ec.fieldContext_SystemIntake_eaCollaboratorName(ctx, field)
			case "euaUserId":
				return ec.fieldContext_SystemIntake_euaUserId(ctx, field)
			case "existingFunding":
				return ec.fieldContext_SystemIntake_existingFunding(ctx, field)
			case "fundingSources":
				return ec.fieldContext_SystemIntake_fundingSources(ctx, field)
			case "governanceRequestFeedbacks":
				return ec.fieldContext_SystemIntake_governanceRequestFeedbacks(ctx, field)
			case "governanceTeams":
				return ec.fieldContext_SystemIntake_governanceTeams(ctx, field)
			case "grbDate":
				return ec.fieldContext_SystemIntake_grbDate(ctx, field)
			case "grtDate":
				return ec.fieldContext_SystemIntake_grtDate(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_SystemIntake_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_SystemIntake_nextMeetingDate(ctx, field)
			case "grbReviewStartedAt":
				return ec.fieldContext_SystemIntake_grbReviewStartedAt(ctx, field)
			case "grbReviewers":
				return ec.fieldContext_SystemIntake_grbReviewers(ctx, field)
			case "grbVotingInformation":
				return ec.fieldContext_SystemIntake_grbVotingInformation(ctx, field)
			case "id":
				return ec.fieldContext_SystemIntake_id(ctx, field)
			case "isso":
				return ec.fieldContext_SystemIntake_isso(ctx, field)
			case "lcid":
				return ec.fieldContext_SystemIntake_lcid(ctx, field)
			case "lcidIssuedAt":
				return ec.fieldContext_SystemIntake_lcidIssuedAt(ctx, field)
			case "lcidExpiresAt":
				return ec.fieldContext_SystemIntake_lcidExpiresAt(ctx, field)
			case "lcidScope":
				return ec.fieldContext_SystemIntake_lcidScope(ctx, field)
			case "lcidCostBaseline":
				return ec.fieldContext_SystemIntake_lcidCostBaseline(ctx, field)
			case "lcidRetiresAt":
				return ec.fieldContext_SystemIntake_lcidRetiresAt(ctx, field)
			case "needsEaSupport":
				return ec.fieldContext_SystemIntake_needsEaSupport(ctx, field)
			case "usingSoftware":
				return ec.fieldContext_SystemIntake_usingSoftware(ctx, field)
			case "acquisitionMethods":
				return ec.fieldContext_SystemIntake_acquisitionMethods(ctx, field)
			case "notes":
				return ec.fieldContext_SystemIntake_notes(ctx, field)
			case "oitSecurityCollaborator":
				return ec.fieldContext_SystemIntake_oitSecurityCollaborator(ctx, field)
			case "oitSecurityCollaboratorName":
				return ec.fieldContext_SystemIntake_oitSecurityCollaboratorName(ctx, field)
			case "productManager":
				return ec.fieldContext_SystemIntake_productManager(ctx, field)
			case "projectAcronym":
				return ec.fieldContext_SystemIntake_projectAcronym(ctx, field)
			case "rejectionReason":
				return ec.fieldContext_SystemIntake_rejectionReason(ctx, field)
			case "requestName":
				return ec.fieldContext_SystemIntake_requestName(ctx, field)
			case "requestType":
				return ec.fieldContext_SystemIntake_requestType(ctx, field)
			case "requester":
				return ec.fieldContext_SystemIntake_requester(ctx, field)
			case "requesterName":
				return ec.fieldContext_SystemIntake_requesterName(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_SystemIntake_requesterComponent(ctx, field)
			case "state":
				return ec.fieldContext_SystemIntake_state(ctx, field)
			case "step":
				return ec.fieldContext_SystemIntake_step(ctx, field)
			case "submittedAt":
				return ec.fieldContext_SystemIntake_submittedAt(ctx, field)
			case "trbCollaborator":
				return ec.fieldContext_SystemIntake_trbCollaborator(ctx, field)
			case "trbCollaboratorName":
				return ec.fieldContext_SystemIntake_trbCollaboratorName(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SystemIntake_updatedAt(ctx, field)
			case "grtReviewEmailBody":
				return ec.fieldContext_SystemIntake_grtReviewEmailBody(ctx, field)
			case "decidedAt":
				return ec.fieldContext_SystemIntake_decidedAt(ctx, field)
			case "businessCaseId":
				return ec.fieldContext_SystemIntake_businessCaseId(ctx, field)
			case "cedarSystemId":
				return ec.fieldContext_SystemIntake_cedarSystemId(ctx, field)
			case "documents":
				return ec.fieldContext_SystemIntake_documents(ctx, field)
			case "hasUiChanges":
				return ec.fieldContext_SystemIntake_hasUiChanges(ctx, field)
			case "usesAiTech":
				return ec.fieldContext_SystemIntake_usesAiTech(ctx, field)
			case "itGovTaskStatuses":
				return ec.fieldContext_SystemIntake_itGovTaskStatuses(ctx, field)
			case "requestFormState":
				return ec.fieldContext_SystemIntake_requestFormState(ctx, field)
			case "draftBusinessCaseState":
				return ec.fieldContext_SystemIntake_draftBusinessCaseState(ctx, field)
			case "grtMeetingState":
				return ec.fieldContext_SystemIntake_grtMeetingState(ctx, field)
			case "finalBusinessCaseState":
				return ec.fieldContext_SystemIntake_finalBusinessCaseState(ctx, field)
			case "grbMeetingState":
				return ec.fieldContext_SystemIntake_grbMeetingState(ctx, field)
			case "decisionState":
				return ec.fieldContext_SystemIntake_decisionState(ctx, field)
			case "statusRequester":
				return ec.fieldContext_SystemIntake_statusRequester(ctx, field)
			case "statusAdmin":
				return ec.fieldContext_SystemIntake_statusAdmin(ctx, field)
			case "lcidStatus":
				return ec.fieldContext_SystemIntake_lcidStatus(ctx, field)
			case "trbFollowUpRecommendation":
				return ec.fieldContext_SystemIntake_trbFollowUpRecommendation(ctx, field)
			case "contractName":
				return ec.fieldContext_SystemIntake_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_SystemIntake_relationType(ctx, field)
			case "systems":
				return ec.fieldContext_SystemIntake_systems(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_SystemIntake_contractNumbers(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_SystemIntake_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_SystemIntake_relatedTRBRequests(ctx, field)
			case "grbDiscussions":
				return ec.fieldContext_SystemIntake_grbDiscussions(ctx, field)
			case "grbPresentationLinks":
				return ec.fieldContext_SystemIntake_grbPresentationLinks(ctx, field)
			case "grbPresentationDeckRequesterReminderEmailSentTime":
				return ec.fieldContext_SystemIntake_grbPresentationDeckRequesterReminderEmailSentTime(ctx, field)
			case "grbReviewType":
				return ec.fieldContext_SystemIntake_grbReviewType(ctx, field)
			case "grbReviewAsyncRecordingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncRecordingTime(ctx, field)
			case "grbReviewAsyncEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncEndDate(ctx, field)
			case "grbReviewAsyncGRBMeetingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncGRBMeetingTime(ctx, field)
			case "grbReviewAsyncStatus":
				return ec.fieldContext_SystemIntake_grbReviewAsyncStatus(ctx, field)
			case "grbReviewAsyncManualEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncManualEndDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntake", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequest_relatedTRBRequests(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequest_relatedTRBRequests(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequest().RelatedTRBRequests(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.TRBRequest)
	fc.Result = res
	return ec.marshalNTRBRequest2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequest_relatedTRBRequests(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBRequest_id(ctx, field)
			case "name":
				return ec.fieldContext_TRBRequest_name(ctx, field)
			case "archived":
				return ec.fieldContext_TRBRequest_archived(ctx, field)
			case "type":
				return ec.fieldContext_TRBRequest_type(ctx, field)
			case "state":
				return ec.fieldContext_TRBRequest_state(ctx, field)
			case "status":
				return ec.fieldContext_TRBRequest_status(ctx, field)
			case "attendees":
				return ec.fieldContext_TRBRequest_attendees(ctx, field)
			case "feedback":
				return ec.fieldContext_TRBRequest_feedback(ctx, field)
			case "documents":
				return ec.fieldContext_TRBRequest_documents(ctx, field)
			case "form":
				return ec.fieldContext_TRBRequest_form(ctx, field)
			case "guidanceLetter":
				return ec.fieldContext_TRBRequest_guidanceLetter(ctx, field)
			case "taskStatuses":
				return ec.fieldContext_TRBRequest_taskStatuses(ctx, field)
			case "consultMeetingTime":
				return ec.fieldContext_TRBRequest_consultMeetingTime(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_TRBRequest_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_TRBRequest_nextMeetingDate(ctx, field)
			case "trbLead":
				return ec.fieldContext_TRBRequest_trbLead(ctx, field)
			case "trbLeadInfo":
				return ec.fieldContext_TRBRequest_trbLeadInfo(ctx, field)
			case "requesterInfo":
				return ec.fieldContext_TRBRequest_requesterInfo(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_TRBRequest_requesterComponent(ctx, field)
			case "adminNotes":
				return ec.fieldContext_TRBRequest_adminNotes(ctx, field)
			case "isRecent":
				return ec.fieldContext_TRBRequest_isRecent(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBRequest_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBRequest_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBRequest_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBRequest_modifiedAt(ctx, field)
			case "contractName":
				return ec.fieldContext_TRBRequest_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_TRBRequest_relationType(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_TRBRequest_contractNumbers(ctx, field)
			case "systems":
				return ec.fieldContext_TRBRequest_systems(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_TRBRequest_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_TRBRequest_relatedTRBRequests(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequest", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestAttendee_id(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestAttendee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestAttendee_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestAttendee_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestAttendee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestAttendee_euaUserId(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestAttendee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestAttendee_euaUserId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EUAUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestAttendee_euaUserId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestAttendee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestAttendee_userInfo(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestAttendee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestAttendee_userInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequestAttendee().UserInfo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.UserInfo)
	fc.Result = res
	return ec.marshalOUserInfo2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUserInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestAttendee_userInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestAttendee",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstName":
				return ec.fieldContext_UserInfo_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_UserInfo_lastName(ctx, field)
			case "commonName":
				return ec.fieldContext_UserInfo_commonName(ctx, field)
			case "email":
				return ec.fieldContext_UserInfo_email(ctx, field)
			case "euaUserId":
				return ec.fieldContext_UserInfo_euaUserId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestAttendee_trbRequestId(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestAttendee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestAttendee_trbRequestId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TRBRequestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestAttendee_trbRequestId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestAttendee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestAttendee_component(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestAttendee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestAttendee_component(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Component, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestAttendee_component(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestAttendee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestAttendee_role(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestAttendee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestAttendee_role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.PersonRole)
	fc.Result = res
	return ec.marshalOPersonRole2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐPersonRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestAttendee_role(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestAttendee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PersonRole does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestAttendee_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestAttendee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestAttendee_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestAttendee_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestAttendee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestAttendee_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestAttendee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestAttendee_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestAttendee_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestAttendee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestAttendee_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestAttendee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestAttendee_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestAttendee_modifiedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestAttendee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestAttendee_modifiedAt(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestAttendee) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestAttendee_modifiedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestAttendee_modifiedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestAttendee",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestContractNumber_id(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestContractNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestContractNumber_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestContractNumber_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestContractNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestContractNumber_trbRequestID(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestContractNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestContractNumber_trbRequestID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TRBRequestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestContractNumber_trbRequestID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestContractNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestContractNumber_contractNumber(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestContractNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestContractNumber_contractNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestContractNumber_contractNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestContractNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestContractNumber_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestContractNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestContractNumber_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestContractNumber_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestContractNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestContractNumber_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestContractNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestContractNumber_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestContractNumber_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestContractNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestContractNumber_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestContractNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestContractNumber_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestContractNumber_modifiedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestContractNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestContractNumber_modifiedAt(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestContractNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestContractNumber_modifiedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestContractNumber_modifiedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestContractNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestDocument_documentType(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestDocument_documentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequestDocument().DocumentType(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.TRBRequestDocumentType)
	fc.Result = res
	return ec.marshalNTRBRequestDocumentType2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestDocumentType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestDocument_documentType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestDocument",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "commonType":
				return ec.fieldContext_TRBRequestDocumentType_commonType(ctx, field)
			case "otherTypeDescription":
				return ec.fieldContext_TRBRequestDocumentType_otherTypeDescription(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBRequestDocumentType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestDocument_id(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestDocument_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestDocument_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestDocument_fileName(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestDocument_fileName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestDocument_fileName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestDocument_status(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestDocument_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequestDocument().Status(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TRBRequestDocumentStatus)
	fc.Result = res
	return ec.marshalNTRBRequestDocumentStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestDocumentStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestDocument_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestDocument",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TRBRequestDocumentStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestDocument_uploadedAt(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestDocument_uploadedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequestDocument().UploadedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestDocument_uploadedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestDocument",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestDocument_url(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestDocument_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequestDocument().URL(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestDocument_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestDocument",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestDocument_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestDocument_deletedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestDocument_deletedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestDocumentType_commonType(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestDocumentType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestDocumentType_commonType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommonType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TRBDocumentCommonType)
	fc.Result = res
	return ec.marshalNTRBDocumentCommonType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBDocumentCommonType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestDocumentType_commonType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestDocumentType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TRBDocumentCommonType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestDocumentType_otherTypeDescription(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestDocumentType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestDocumentType_otherTypeDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherTypeDescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestDocumentType_otherTypeDescription(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestDocumentType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestFeedback_id(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestFeedback_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestFeedback_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestFeedback_trbRequestId(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestFeedback_trbRequestId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TRBRequestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestFeedback_trbRequestId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestFeedback_feedbackMessage(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestFeedback_feedbackMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeedbackMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.HTML)
	fc.Result = res
	return ec.marshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestFeedback_feedbackMessage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestFeedback_copyTrbMailbox(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestFeedback_copyTrbMailbox(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CopyTRBMailbox, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestFeedback_copyTrbMailbox(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestFeedback_notifyEuaIds(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestFeedback_notifyEuaIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequestFeedback().NotifyEuaIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestFeedback_notifyEuaIds(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestFeedback",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestFeedback_action(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestFeedback_action(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Action, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TRBFeedbackAction)
	fc.Result = res
	return ec.marshalNTRBFeedbackAction2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBFeedbackAction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestFeedback_action(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TRBFeedbackAction does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestFeedback_author(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestFeedback_author(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequestFeedback().Author(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.UserInfo)
	fc.Result = res
	return ec.marshalNUserInfo2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUserInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestFeedback_author(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestFeedback",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "firstName":
				return ec.fieldContext_UserInfo_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_UserInfo_lastName(ctx, field)
			case "commonName":
				return ec.fieldContext_UserInfo_commonName(ctx, field)
			case "email":
				return ec.fieldContext_UserInfo_email(ctx, field)
			case "euaUserId":
				return ec.fieldContext_UserInfo_euaUserId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestFeedback_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestFeedback_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestFeedback_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestFeedback_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestFeedback_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestFeedback_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestFeedback_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestFeedback_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestFeedback_modifiedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestFeedback_modifiedAt(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestFeedback) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestFeedback_modifiedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestFeedback_modifiedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestFeedback",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_id(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_trbRequestId(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_trbRequestId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TRBRequestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_trbRequestId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_status(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TRBFormStatus)
	fc.Result = res
	return ec.marshalNTRBFormStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBFormStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TRBFormStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_component(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_component(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Component, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_component(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_needsAssistanceWith(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_needsAssistanceWith(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NeedsAssistanceWith, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_needsAssistanceWith(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_hasSolutionInMind(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_hasSolutionInMind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasSolutionInMind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_hasSolutionInMind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_proposedSolution(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_proposedSolution(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProposedSolution, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_proposedSolution(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_whereInProcess(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_whereInProcess(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WhereInProcess, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.TRBWhereInProcessOption)
	fc.Result = res
	return ec.marshalOTRBWhereInProcessOption2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBWhereInProcessOption(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_whereInProcess(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TRBWhereInProcessOption does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_whereInProcessOther(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_whereInProcessOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WhereInProcessOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_whereInProcessOther(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_hasExpectedStartEndDates(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_hasExpectedStartEndDates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasExpectedStartEndDates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_hasExpectedStartEndDates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_expectedStartDate(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_expectedStartDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpectedStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_expectedStartDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_expectedEndDate(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_expectedEndDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpectedEndDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_expectedEndDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_collabGroups(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_collabGroups(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequestForm().CollabGroups(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]models.TRBCollabGroupOption)
	fc.Result = res
	return ec.marshalNTRBCollabGroupOption2ᚕgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBCollabGroupOptionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_collabGroups(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TRBCollabGroupOption does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_collabDateSecurity(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_collabDateSecurity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollabDateSecurity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_collabDateSecurity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_collabDateEnterpriseArchitecture(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_collabDateEnterpriseArchitecture(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollabDateEnterpriseArchitecture, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_collabDateEnterpriseArchitecture(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_collabDateCloud(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_collabDateCloud(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollabDateCloud, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_collabDateCloud(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_collabDatePrivacyAdvisor(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_collabDatePrivacyAdvisor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollabDatePrivacyAdvisor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_collabDatePrivacyAdvisor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_collabDateGovernanceReviewBoard(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_collabDateGovernanceReviewBoard(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollabDateGovernanceReviewBoard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_collabDateGovernanceReviewBoard(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_collabDateOther(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_collabDateOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollabDateOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_collabDateOther(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_collabGroupOther(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_collabGroupOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollabGroupOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_collabGroupOther(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_collabGRBConsultRequested(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_collabGRBConsultRequested(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollabGRBConsultRequested, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_collabGRBConsultRequested(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_fundingSources(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_fundingSources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequestForm().FundingSources(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.TRBFundingSource)
	fc.Result = res
	return ec.marshalOTRBFundingSource2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBFundingSourceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_fundingSources(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TRBFundingSource_id(ctx, field)
			case "trbRequestId":
				return ec.fieldContext_TRBFundingSource_trbRequestId(ctx, field)
			case "fundingNumber":
				return ec.fieldContext_TRBFundingSource_fundingNumber(ctx, field)
			case "source":
				return ec.fieldContext_TRBFundingSource_source(ctx, field)
			case "createdBy":
				return ec.fieldContext_TRBFundingSource_createdBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TRBFundingSource_createdAt(ctx, field)
			case "modifiedBy":
				return ec.fieldContext_TRBFundingSource_modifiedBy(ctx, field)
			case "modifiedAt":
				return ec.fieldContext_TRBFundingSource_modifiedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TRBFundingSource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_systemIntakes(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_systemIntakes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequestForm().SystemIntakes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.SystemIntake)
	fc.Result = res
	return ec.marshalNSystemIntake2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_systemIntakes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "actions":
				return ec.fieldContext_SystemIntake_actions(ctx, field)
			case "adminLead":
				return ec.fieldContext_SystemIntake_adminLead(ctx, field)
			case "archivedAt":
				return ec.fieldContext_SystemIntake_archivedAt(ctx, field)
			case "businessCase":
				return ec.fieldContext_SystemIntake_businessCase(ctx, field)
			case "businessNeed":
				return ec.fieldContext_SystemIntake_businessNeed(ctx, field)
			case "businessOwner":
				return ec.fieldContext_SystemIntake_businessOwner(ctx, field)
			case "businessSolution":
				return ec.fieldContext_SystemIntake_businessSolution(ctx, field)
			case "contract":
				return ec.fieldContext_SystemIntake_contract(ctx, field)
			case "costs":
				return ec.fieldContext_SystemIntake_costs(ctx, field)
			case "annualSpending":
				return ec.fieldContext_SystemIntake_annualSpending(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntake_createdAt(ctx, field)
			case "currentStage":
				return ec.fieldContext_SystemIntake_currentStage(ctx, field)
			case "decisionNextSteps":
				return ec.fieldContext_SystemIntake_decisionNextSteps(ctx, field)
			case "eaCollaborator":
				return ec.fieldContext_SystemIntake_eaCollaborator(ctx, field)
			case "eaCollaboratorName":
				return ec.fieldContext_SystemIntake_eaCollaboratorName(ctx, field)
			case "euaUserId":
				return ec.fieldContext_SystemIntake_euaUserId(ctx, field)
			case "existingFunding":
				return ec.fieldContext_SystemIntake_existingFunding(ctx, field)
			case "fundingSources":
				return ec.fieldContext_SystemIntake_fundingSources(ctx, field)
			case "governanceRequestFeedbacks":
				return ec.fieldContext_SystemIntake_governanceRequestFeedbacks(ctx, field)
			case "governanceTeams":
				return ec.fieldContext_SystemIntake_governanceTeams(ctx, field)
			case "grbDate":
				return ec.fieldContext_SystemIntake_grbDate(ctx, field)
			case "grtDate":
				return ec.fieldContext_SystemIntake_grtDate(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_SystemIntake_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_SystemIntake_nextMeetingDate(ctx, field)
			case "grbReviewStartedAt":
				return ec.fieldContext_SystemIntake_grbReviewStartedAt(ctx, field)
			case "grbReviewers":
				return ec.fieldContext_SystemIntake_grbReviewers(ctx, field)
			case "grbVotingInformation":
				return ec.fieldContext_SystemIntake_grbVotingInformation(ctx, field)
			case "id":
				return ec.fieldContext_SystemIntake_id(ctx, field)
			case "isso":
				return ec.fieldContext_SystemIntake_isso(ctx, field)
			case "lcid":
				return ec.fieldContext_SystemIntake_lcid(ctx, field)
			case "lcidIssuedAt":
				return ec.fieldContext_SystemIntake_lcidIssuedAt(ctx, field)
			case "lcidExpiresAt":
				return ec.fieldContext_SystemIntake_lcidExpiresAt(ctx, field)
			case "lcidScope":
				return ec.fieldContext_SystemIntake_lcidScope(ctx, field)
			case "lcidCostBaseline":
				return ec.fieldContext_SystemIntake_lcidCostBaseline(ctx, field)
			case "lcidRetiresAt":
				return ec.fieldContext_SystemIntake_lcidRetiresAt(ctx, field)
			case "needsEaSupport":
				return ec.fieldContext_SystemIntake_needsEaSupport(ctx, field)
			case "usingSoftware":
				return ec.fieldContext_SystemIntake_usingSoftware(ctx, field)
			case "acquisitionMethods":
				return ec.fieldContext_SystemIntake_acquisitionMethods(ctx, field)
			case "notes":
				return ec.fieldContext_SystemIntake_notes(ctx, field)
			case "oitSecurityCollaborator":
				return ec.fieldContext_SystemIntake_oitSecurityCollaborator(ctx, field)
			case "oitSecurityCollaboratorName":
				return ec.fieldContext_SystemIntake_oitSecurityCollaboratorName(ctx, field)
			case "productManager":
				return ec.fieldContext_SystemIntake_productManager(ctx, field)
			case "projectAcronym":
				return ec.fieldContext_SystemIntake_projectAcronym(ctx, field)
			case "rejectionReason":
				return ec.fieldContext_SystemIntake_rejectionReason(ctx, field)
			case "requestName":
				return ec.fieldContext_SystemIntake_requestName(ctx, field)
			case "requestType":
				return ec.fieldContext_SystemIntake_requestType(ctx, field)
			case "requester":
				return ec.fieldContext_SystemIntake_requester(ctx, field)
			case "requesterName":
				return ec.fieldContext_SystemIntake_requesterName(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_SystemIntake_requesterComponent(ctx, field)
			case "state":
				return ec.fieldContext_SystemIntake_state(ctx, field)
			case "step":
				return ec.fieldContext_SystemIntake_step(ctx, field)
			case "submittedAt":
				return ec.fieldContext_SystemIntake_submittedAt(ctx, field)
			case "trbCollaborator":
				return ec.fieldContext_SystemIntake_trbCollaborator(ctx, field)
			case "trbCollaboratorName":
				return ec.fieldContext_SystemIntake_trbCollaboratorName(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SystemIntake_updatedAt(ctx, field)
			case "grtReviewEmailBody":
				return ec.fieldContext_SystemIntake_grtReviewEmailBody(ctx, field)
			case "decidedAt":
				return ec.fieldContext_SystemIntake_decidedAt(ctx, field)
			case "businessCaseId":
				return ec.fieldContext_SystemIntake_businessCaseId(ctx, field)
			case "cedarSystemId":
				return ec.fieldContext_SystemIntake_cedarSystemId(ctx, field)
			case "documents":
				return ec.fieldContext_SystemIntake_documents(ctx, field)
			case "hasUiChanges":
				return ec.fieldContext_SystemIntake_hasUiChanges(ctx, field)
			case "usesAiTech":
				return ec.fieldContext_SystemIntake_usesAiTech(ctx, field)
			case "itGovTaskStatuses":
				return ec.fieldContext_SystemIntake_itGovTaskStatuses(ctx, field)
			case "requestFormState":
				return ec.fieldContext_SystemIntake_requestFormState(ctx, field)
			case "draftBusinessCaseState":
				return ec.fieldContext_SystemIntake_draftBusinessCaseState(ctx, field)
			case "grtMeetingState":
				return ec.fieldContext_SystemIntake_grtMeetingState(ctx, field)
			case "finalBusinessCaseState":
				return ec.fieldContext_SystemIntake_finalBusinessCaseState(ctx, field)
			case "grbMeetingState":
				return ec.fieldContext_SystemIntake_grbMeetingState(ctx, field)
			case "decisionState":
				return ec.fieldContext_SystemIntake_decisionState(ctx, field)
			case "statusRequester":
				return ec.fieldContext_SystemIntake_statusRequester(ctx, field)
			case "statusAdmin":
				return ec.fieldContext_SystemIntake_statusAdmin(ctx, field)
			case "lcidStatus":
				return ec.fieldContext_SystemIntake_lcidStatus(ctx, field)
			case "trbFollowUpRecommendation":
				return ec.fieldContext_SystemIntake_trbFollowUpRecommendation(ctx, field)
			case "contractName":
				return ec.fieldContext_SystemIntake_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_SystemIntake_relationType(ctx, field)
			case "systems":
				return ec.fieldContext_SystemIntake_systems(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_SystemIntake_contractNumbers(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_SystemIntake_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_SystemIntake_relatedTRBRequests(ctx, field)
			case "grbDiscussions":
				return ec.fieldContext_SystemIntake_grbDiscussions(ctx, field)
			case "grbPresentationLinks":
				return ec.fieldContext_SystemIntake_grbPresentationLinks(ctx, field)
			case "grbPresentationDeckRequesterReminderEmailSentTime":
				return ec.fieldContext_SystemIntake_grbPresentationDeckRequesterReminderEmailSentTime(ctx, field)
			case "grbReviewType":
				return ec.fieldContext_SystemIntake_grbReviewType(ctx, field)
			case "grbReviewAsyncRecordingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncRecordingTime(ctx, field)
			case "grbReviewAsyncEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncEndDate(ctx, field)
			case "grbReviewAsyncGRBMeetingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncGRBMeetingTime(ctx, field)
			case "grbReviewAsyncStatus":
				return ec.fieldContext_SystemIntake_grbReviewAsyncStatus(ctx, field)
			case "grbReviewAsyncManualEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncManualEndDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntake", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_subjectAreaOptions(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_subjectAreaOptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TRBRequestForm().SubjectAreaOptions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]models.TRBSubjectAreaOption)
	fc.Result = res
	return ec.marshalOTRBSubjectAreaOption2ᚕgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBSubjectAreaOptionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_subjectAreaOptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TRBSubjectAreaOption does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_subjectAreaOptionOther(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_subjectAreaOptionOther(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubjectAreaOptionOther, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_subjectAreaOptionOther(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_submittedAt(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_submittedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubmittedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_submittedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_createdBy(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_modifiedBy(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_modifiedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_modifiedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBRequestForm_modifiedAt(ctx context.Context, field graphql.CollectedField, obj *models.TRBRequestForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBRequestForm_modifiedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifiedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBRequestForm_modifiedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBRequestForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBTaskStatuses_formStatus(ctx context.Context, field graphql.CollectedField, obj *models.TRBTaskStatuses) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBTaskStatuses_formStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FormStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TRBFormStatus)
	fc.Result = res
	return ec.marshalNTRBFormStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBFormStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBTaskStatuses_formStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBTaskStatuses",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TRBFormStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBTaskStatuses_feedbackStatus(ctx context.Context, field graphql.CollectedField, obj *models.TRBTaskStatuses) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBTaskStatuses_feedbackStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeedbackStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TRBFeedbackStatus)
	fc.Result = res
	return ec.marshalNTRBFeedbackStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBFeedbackStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBTaskStatuses_feedbackStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBTaskStatuses",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TRBFeedbackStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBTaskStatuses_consultPrepStatus(ctx context.Context, field graphql.CollectedField, obj *models.TRBTaskStatuses) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBTaskStatuses_consultPrepStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConsultPrepStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TRBConsultPrepStatus)
	fc.Result = res
	return ec.marshalNTRBConsultPrepStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBConsultPrepStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBTaskStatuses_consultPrepStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBTaskStatuses",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TRBConsultPrepStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBTaskStatuses_attendConsultStatus(ctx context.Context, field graphql.CollectedField, obj *models.TRBTaskStatuses) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBTaskStatuses_attendConsultStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttendConsultStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TRBAttendConsultStatus)
	fc.Result = res
	return ec.marshalNTRBAttendConsultStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBAttendConsultStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBTaskStatuses_attendConsultStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBTaskStatuses",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TRBAttendConsultStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBTaskStatuses_guidanceLetterStatus(ctx context.Context, field graphql.CollectedField, obj *models.TRBTaskStatuses) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBTaskStatuses_guidanceLetterStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GuidanceLetterStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TRBGuidanceLetterStatus)
	fc.Result = res
	return ec.marshalNTRBGuidanceLetterStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBTaskStatuses_guidanceLetterStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBTaskStatuses",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TRBGuidanceLetterStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TRBTaskStatuses_guidanceLetterStatusTaskList(ctx context.Context, field graphql.CollectedField, obj *models.TRBTaskStatuses) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TRBTaskStatuses_guidanceLetterStatusTaskList(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GuidanceLetterStatusTaskList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.TRBGuidanceLetterStatusTaskList)
	fc.Result = res
	return ec.marshalNTRBGuidanceLetterStatusTaskList2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterStatusTaskList(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TRBTaskStatuses_guidanceLetterStatusTaskList(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TRBTaskStatuses",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TRBGuidanceLetterStatusTaskList does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateSystemIntakePayload_systemIntake(ctx context.Context, field graphql.CollectedField, obj *models.UpdateSystemIntakePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateSystemIntakePayload_systemIntake(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SystemIntake, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.SystemIntake)
	fc.Result = res
	return ec.marshalOSystemIntake2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntake(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateSystemIntakePayload_systemIntake(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateSystemIntakePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "actions":
				return ec.fieldContext_SystemIntake_actions(ctx, field)
			case "adminLead":
				return ec.fieldContext_SystemIntake_adminLead(ctx, field)
			case "archivedAt":
				return ec.fieldContext_SystemIntake_archivedAt(ctx, field)
			case "businessCase":
				return ec.fieldContext_SystemIntake_businessCase(ctx, field)
			case "businessNeed":
				return ec.fieldContext_SystemIntake_businessNeed(ctx, field)
			case "businessOwner":
				return ec.fieldContext_SystemIntake_businessOwner(ctx, field)
			case "businessSolution":
				return ec.fieldContext_SystemIntake_businessSolution(ctx, field)
			case "contract":
				return ec.fieldContext_SystemIntake_contract(ctx, field)
			case "costs":
				return ec.fieldContext_SystemIntake_costs(ctx, field)
			case "annualSpending":
				return ec.fieldContext_SystemIntake_annualSpending(ctx, field)
			case "createdAt":
				return ec.fieldContext_SystemIntake_createdAt(ctx, field)
			case "currentStage":
				return ec.fieldContext_SystemIntake_currentStage(ctx, field)
			case "decisionNextSteps":
				return ec.fieldContext_SystemIntake_decisionNextSteps(ctx, field)
			case "eaCollaborator":
				return ec.fieldContext_SystemIntake_eaCollaborator(ctx, field)
			case "eaCollaboratorName":
				return ec.fieldContext_SystemIntake_eaCollaboratorName(ctx, field)
			case "euaUserId":
				return ec.fieldContext_SystemIntake_euaUserId(ctx, field)
			case "existingFunding":
				return ec.fieldContext_SystemIntake_existingFunding(ctx, field)
			case "fundingSources":
				return ec.fieldContext_SystemIntake_fundingSources(ctx, field)
			case "governanceRequestFeedbacks":
				return ec.fieldContext_SystemIntake_governanceRequestFeedbacks(ctx, field)
			case "governanceTeams":
				return ec.fieldContext_SystemIntake_governanceTeams(ctx, field)
			case "grbDate":
				return ec.fieldContext_SystemIntake_grbDate(ctx, field)
			case "grtDate":
				return ec.fieldContext_SystemIntake_grtDate(ctx, field)
			case "lastMeetingDate":
				return ec.fieldContext_SystemIntake_lastMeetingDate(ctx, field)
			case "nextMeetingDate":
				return ec.fieldContext_SystemIntake_nextMeetingDate(ctx, field)
			case "grbReviewStartedAt":
				return ec.fieldContext_SystemIntake_grbReviewStartedAt(ctx, field)
			case "grbReviewers":
				return ec.fieldContext_SystemIntake_grbReviewers(ctx, field)
			case "grbVotingInformation":
				return ec.fieldContext_SystemIntake_grbVotingInformation(ctx, field)
			case "id":
				return ec.fieldContext_SystemIntake_id(ctx, field)
			case "isso":
				return ec.fieldContext_SystemIntake_isso(ctx, field)
			case "lcid":
				return ec.fieldContext_SystemIntake_lcid(ctx, field)
			case "lcidIssuedAt":
				return ec.fieldContext_SystemIntake_lcidIssuedAt(ctx, field)
			case "lcidExpiresAt":
				return ec.fieldContext_SystemIntake_lcidExpiresAt(ctx, field)
			case "lcidScope":
				return ec.fieldContext_SystemIntake_lcidScope(ctx, field)
			case "lcidCostBaseline":
				return ec.fieldContext_SystemIntake_lcidCostBaseline(ctx, field)
			case "lcidRetiresAt":
				return ec.fieldContext_SystemIntake_lcidRetiresAt(ctx, field)
			case "needsEaSupport":
				return ec.fieldContext_SystemIntake_needsEaSupport(ctx, field)
			case "usingSoftware":
				return ec.fieldContext_SystemIntake_usingSoftware(ctx, field)
			case "acquisitionMethods":
				return ec.fieldContext_SystemIntake_acquisitionMethods(ctx, field)
			case "notes":
				return ec.fieldContext_SystemIntake_notes(ctx, field)
			case "oitSecurityCollaborator":
				return ec.fieldContext_SystemIntake_oitSecurityCollaborator(ctx, field)
			case "oitSecurityCollaboratorName":
				return ec.fieldContext_SystemIntake_oitSecurityCollaboratorName(ctx, field)
			case "productManager":
				return ec.fieldContext_SystemIntake_productManager(ctx, field)
			case "projectAcronym":
				return ec.fieldContext_SystemIntake_projectAcronym(ctx, field)
			case "rejectionReason":
				return ec.fieldContext_SystemIntake_rejectionReason(ctx, field)
			case "requestName":
				return ec.fieldContext_SystemIntake_requestName(ctx, field)
			case "requestType":
				return ec.fieldContext_SystemIntake_requestType(ctx, field)
			case "requester":
				return ec.fieldContext_SystemIntake_requester(ctx, field)
			case "requesterName":
				return ec.fieldContext_SystemIntake_requesterName(ctx, field)
			case "requesterComponent":
				return ec.fieldContext_SystemIntake_requesterComponent(ctx, field)
			case "state":
				return ec.fieldContext_SystemIntake_state(ctx, field)
			case "step":
				return ec.fieldContext_SystemIntake_step(ctx, field)
			case "submittedAt":
				return ec.fieldContext_SystemIntake_submittedAt(ctx, field)
			case "trbCollaborator":
				return ec.fieldContext_SystemIntake_trbCollaborator(ctx, field)
			case "trbCollaboratorName":
				return ec.fieldContext_SystemIntake_trbCollaboratorName(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SystemIntake_updatedAt(ctx, field)
			case "grtReviewEmailBody":
				return ec.fieldContext_SystemIntake_grtReviewEmailBody(ctx, field)
			case "decidedAt":
				return ec.fieldContext_SystemIntake_decidedAt(ctx, field)
			case "businessCaseId":
				return ec.fieldContext_SystemIntake_businessCaseId(ctx, field)
			case "cedarSystemId":
				return ec.fieldContext_SystemIntake_cedarSystemId(ctx, field)
			case "documents":
				return ec.fieldContext_SystemIntake_documents(ctx, field)
			case "hasUiChanges":
				return ec.fieldContext_SystemIntake_hasUiChanges(ctx, field)
			case "usesAiTech":
				return ec.fieldContext_SystemIntake_usesAiTech(ctx, field)
			case "itGovTaskStatuses":
				return ec.fieldContext_SystemIntake_itGovTaskStatuses(ctx, field)
			case "requestFormState":
				return ec.fieldContext_SystemIntake_requestFormState(ctx, field)
			case "draftBusinessCaseState":
				return ec.fieldContext_SystemIntake_draftBusinessCaseState(ctx, field)
			case "grtMeetingState":
				return ec.fieldContext_SystemIntake_grtMeetingState(ctx, field)
			case "finalBusinessCaseState":
				return ec.fieldContext_SystemIntake_finalBusinessCaseState(ctx, field)
			case "grbMeetingState":
				return ec.fieldContext_SystemIntake_grbMeetingState(ctx, field)
			case "decisionState":
				return ec.fieldContext_SystemIntake_decisionState(ctx, field)
			case "statusRequester":
				return ec.fieldContext_SystemIntake_statusRequester(ctx, field)
			case "statusAdmin":
				return ec.fieldContext_SystemIntake_statusAdmin(ctx, field)
			case "lcidStatus":
				return ec.fieldContext_SystemIntake_lcidStatus(ctx, field)
			case "trbFollowUpRecommendation":
				return ec.fieldContext_SystemIntake_trbFollowUpRecommendation(ctx, field)
			case "contractName":
				return ec.fieldContext_SystemIntake_contractName(ctx, field)
			case "relationType":
				return ec.fieldContext_SystemIntake_relationType(ctx, field)
			case "systems":
				return ec.fieldContext_SystemIntake_systems(ctx, field)
			case "contractNumbers":
				return ec.fieldContext_SystemIntake_contractNumbers(ctx, field)
			case "relatedIntakes":
				return ec.fieldContext_SystemIntake_relatedIntakes(ctx, field)
			case "relatedTRBRequests":
				return ec.fieldContext_SystemIntake_relatedTRBRequests(ctx, field)
			case "grbDiscussions":
				return ec.fieldContext_SystemIntake_grbDiscussions(ctx, field)
			case "grbPresentationLinks":
				return ec.fieldContext_SystemIntake_grbPresentationLinks(ctx, field)
			case "grbPresentationDeckRequesterReminderEmailSentTime":
				return ec.fieldContext_SystemIntake_grbPresentationDeckRequesterReminderEmailSentTime(ctx, field)
			case "grbReviewType":
				return ec.fieldContext_SystemIntake_grbReviewType(ctx, field)
			case "grbReviewAsyncRecordingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncRecordingTime(ctx, field)
			case "grbReviewAsyncEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncEndDate(ctx, field)
			case "grbReviewAsyncGRBMeetingTime":
				return ec.fieldContext_SystemIntake_grbReviewAsyncGRBMeetingTime(ctx, field)
			case "grbReviewAsyncStatus":
				return ec.fieldContext_SystemIntake_grbReviewAsyncStatus(ctx, field)
			case "grbReviewAsyncManualEndDate":
				return ec.fieldContext_SystemIntake_grbReviewAsyncManualEndDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SystemIntake", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateSystemIntakePayload_userErrors(ctx context.Context, field graphql.CollectedField, obj *models.UpdateSystemIntakePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateSystemIntakePayload_userErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.UserError)
	fc.Result = res
	return ec.marshalOUserError2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUserErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateSystemIntakePayload_userErrors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateSystemIntakePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_UserError_message(ctx, field)
			case "path":
				return ec.fieldContext_UserError_path(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAccount_id(ctx context.Context, field graphql.CollectedField, obj *authentication.UserAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAccount_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAccount_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAccount_username(ctx context.Context, field graphql.CollectedField, obj *authentication.UserAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAccount_username(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAccount_username(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAccount_commonName(ctx context.Context, field graphql.CollectedField, obj *authentication.UserAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAccount_commonName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommonName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAccount_commonName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAccount_locale(ctx context.Context, field graphql.CollectedField, obj *authentication.UserAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAccount_locale(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAccount_locale(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAccount_email(ctx context.Context, field graphql.CollectedField, obj *authentication.UserAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAccount_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAccount_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAccount_givenName(ctx context.Context, field graphql.CollectedField, obj *authentication.UserAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAccount_givenName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GivenName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAccount_givenName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAccount_familyName(ctx context.Context, field graphql.CollectedField, obj *authentication.UserAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAccount_familyName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FamilyName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAccount_familyName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAccount_zoneInfo(ctx context.Context, field graphql.CollectedField, obj *authentication.UserAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAccount_zoneInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZoneInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAccount_zoneInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAccount_hasLoggedIn(ctx context.Context, field graphql.CollectedField, obj *authentication.UserAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAccount_hasLoggedIn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasLoggedIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAccount_hasLoggedIn(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserError_message(ctx context.Context, field graphql.CollectedField, obj *models.UserError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserError_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserError_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserError_path(ctx context.Context, field graphql.CollectedField, obj *models.UserError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserError_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserError_path(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserInfo_firstName(ctx context.Context, field graphql.CollectedField, obj *models.UserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserInfo_firstName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserInfo_firstName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserInfo_lastName(ctx context.Context, field graphql.CollectedField, obj *models.UserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserInfo_lastName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserInfo_lastName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserInfo_commonName(ctx context.Context, field graphql.CollectedField, obj *models.UserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserInfo_commonName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserInfo().CommonName(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserInfo_commonName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserInfo_email(ctx context.Context, field graphql.CollectedField, obj *models.UserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserInfo_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.EmailAddress)
	fc.Result = res
	return ec.marshalNEmailAddress2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserInfo_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EmailAddress does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserInfo_euaUserId(ctx context.Context, field graphql.CollectedField, obj *models.UserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserInfo_euaUserId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.UserInfo().EuaUserID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserInfo_euaUserId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Directive_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Field_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_isOneOf(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_isOneOf(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOneOf(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_isOneOf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCastSystemIntakeGRBReviewerVoteInput(ctx context.Context, obj any) (models.CastSystemIntakeGRBReviewerVoteInput, error) {
	var it models.CastSystemIntakeGRBReviewerVoteInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "vote", "voteComment"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "vote":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vote"))
			data, err := ec.unmarshalNSystemIntakeAsyncGRBVotingOption2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeAsyncGRBVotingOption(ctx, v)
			if err != nil {
				return it, err
			}
			it.Vote = data
		case "voteComment":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("voteComment"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.VoteComment = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCloseTRBRequestInput(ctx context.Context, obj any) (models.CloseTRBRequestInput, error) {
	var it models.CloseTRBRequestInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "reasonClosed", "copyTrbMailbox", "notifyEuaIds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "reasonClosed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonClosed"))
			data, err := ec.unmarshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonClosed = data
		case "copyTrbMailbox":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("copyTrbMailbox"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CopyTrbMailbox = data
		case "notifyEuaIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notifyEuaIds"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotifyEuaIds = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCedarSystemBookmarkInput(ctx context.Context, obj any) (models.CreateCedarSystemBookmarkInput, error) {
	var it models.CreateCedarSystemBookmarkInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"cedarSystemId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "cedarSystemId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cedarSystemId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CedarSystemID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateGRBReviewerInput(ctx context.Context, obj any) (models.CreateGRBReviewerInput, error) {
	var it models.CreateGRBReviewerInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"euaUserId", "votingRole", "grbRole"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "euaUserId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("euaUserId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.EuaUserID = data
		case "votingRole":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("votingRole"))
			data, err := ec.unmarshalNSystemIntakeGRBReviewerVotingRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewerVotingRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.VotingRole = data
		case "grbRole":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grbRole"))
			data, err := ec.unmarshalNSystemIntakeGRBReviewerRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewerRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.GrbRole = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateSystemIntakeContactInput(ctx context.Context, obj any) (models.CreateSystemIntakeContactInput, error) {
	var it models.CreateSystemIntakeContactInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"euaUserId", "systemIntakeId", "component", "role"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "euaUserId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("euaUserId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.EuaUserID = data
		case "systemIntakeId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeId"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "component":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("component"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Component = data
		case "role":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Role = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateSystemIntakeDocumentInput(ctx context.Context, obj any) (models.CreateSystemIntakeDocumentInput, error) {
	var it models.CreateSystemIntakeDocumentInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"requestID", "fileData", "documentType", "version", "otherTypeDescription", "sendNotification"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "requestID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requestID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequestID = data
		case "fileData":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileData"))
			data, err := ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileData = data
		case "documentType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentType"))
			data, err := ec.unmarshalNSystemIntakeDocumentCommonType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocumentCommonType(ctx, v)
			if err != nil {
				return it, err
			}
			it.DocumentType = data
		case "version":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			data, err := ec.unmarshalNSystemIntakeDocumentVersion2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocumentVersion(ctx, v)
			if err != nil {
				return it, err
			}
			it.Version = data
		case "otherTypeDescription":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherTypeDescription"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OtherTypeDescription = data
		case "sendNotification":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sendNotification"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SendNotification = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateSystemIntakeGRBReviewersInput(ctx context.Context, obj any) (models.CreateSystemIntakeGRBReviewersInput, error) {
	var it models.CreateSystemIntakeGRBReviewersInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "reviewers"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "reviewers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewers"))
			data, err := ec.unmarshalNCreateGRBReviewerInput2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateGRBReviewerInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reviewers = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateSystemIntakeInput(ctx context.Context, obj any) (models.CreateSystemIntakeInput, error) {
	var it models.CreateSystemIntakeInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"requestType", "requester"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "requestType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requestType"))
			data, err := ec.unmarshalNSystemIntakeRequestType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeRequestType(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequestType = data
		case "requester":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requester"))
			data, err := ec.unmarshalNSystemIntakeRequesterInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeRequesterInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Requester = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateSystemIntakeNoteInput(ctx context.Context, obj any) (models.CreateSystemIntakeNoteInput, error) {
	var it models.CreateSystemIntakeNoteInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"content", "authorName", "intakeId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "content":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			data, err := ec.unmarshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.Content = data
		case "authorName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authorName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AuthorName = data
		case "intakeId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("intakeId"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.IntakeID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTRBAdminNoteConsultSessionInput(ctx context.Context, obj any) (models.CreateTRBAdminNoteConsultSessionInput, error) {
	var it models.CreateTRBAdminNoteConsultSessionInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"trbRequestId", "noteText"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "trbRequestId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trbRequestId"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrbRequestID = data
		case "noteText":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteText"))
			data, err := ec.unmarshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteText = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTRBAdminNoteGeneralRequestInput(ctx context.Context, obj any) (models.CreateTRBAdminNoteGeneralRequestInput, error) {
	var it models.CreateTRBAdminNoteGeneralRequestInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"trbRequestId", "noteText"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "trbRequestId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trbRequestId"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrbRequestID = data
		case "noteText":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteText"))
			data, err := ec.unmarshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteText = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTRBAdminNoteGuidanceLetterInput(ctx context.Context, obj any) (models.CreateTRBAdminNoteGuidanceLetterInput, error) {
	var it models.CreateTRBAdminNoteGuidanceLetterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"trbRequestId", "noteText", "appliesToMeetingSummary", "appliesToNextSteps", "insightIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "trbRequestId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trbRequestId"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrbRequestID = data
		case "noteText":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteText"))
			data, err := ec.unmarshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteText = data
		case "appliesToMeetingSummary":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appliesToMeetingSummary"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppliesToMeetingSummary = data
		case "appliesToNextSteps":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appliesToNextSteps"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppliesToNextSteps = data
		case "insightIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insightIDs"))
			data, err := ec.unmarshalNUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InsightIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTRBAdminNoteInitialRequestFormInput(ctx context.Context, obj any) (models.CreateTRBAdminNoteInitialRequestFormInput, error) {
	var it models.CreateTRBAdminNoteInitialRequestFormInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"trbRequestId", "noteText", "appliesToBasicRequestDetails", "appliesToSubjectAreas", "appliesToAttendees"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "trbRequestId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trbRequestId"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrbRequestID = data
		case "noteText":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteText"))
			data, err := ec.unmarshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteText = data
		case "appliesToBasicRequestDetails":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appliesToBasicRequestDetails"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppliesToBasicRequestDetails = data
		case "appliesToSubjectAreas":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appliesToSubjectAreas"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppliesToSubjectAreas = data
		case "appliesToAttendees":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appliesToAttendees"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppliesToAttendees = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTRBAdminNoteSupportingDocumentsInput(ctx context.Context, obj any) (models.CreateTRBAdminNoteSupportingDocumentsInput, error) {
	var it models.CreateTRBAdminNoteSupportingDocumentsInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"trbRequestId", "noteText", "documentIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "trbRequestId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trbRequestId"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrbRequestID = data
		case "noteText":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteText"))
			data, err := ec.unmarshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.NoteText = data
		case "documentIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentIDs"))
			data, err := ec.unmarshalNUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DocumentIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTRBGuidanceLetterInsightInput(ctx context.Context, obj any) (models.CreateTRBGuidanceLetterInsightInput, error) {
	var it models.CreateTRBGuidanceLetterInsightInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"trbRequestId", "title", "insight", "links", "category"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "trbRequestId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trbRequestId"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrbRequestID = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "insight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insight"))
			data, err := ec.unmarshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.Insight = data
		case "links":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("links"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Links = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalNTRBGuidanceLetterInsightCategory2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterInsightCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTRBRequestAttendeeInput(ctx context.Context, obj any) (models.CreateTRBRequestAttendeeInput, error) {
	var it models.CreateTRBRequestAttendeeInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"euaUserId", "trbRequestId", "component", "role"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "euaUserId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("euaUserId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.EuaUserID = data
		case "trbRequestId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trbRequestId"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrbRequestID = data
		case "component":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("component"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Component = data
		case "role":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			data, err := ec.unmarshalNPersonRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐPersonRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.Role = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTRBRequestDocumentInput(ctx context.Context, obj any) (models.CreateTRBRequestDocumentInput, error) {
	var it models.CreateTRBRequestDocumentInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"requestID", "fileData", "documentType", "otherTypeDescription"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "requestID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requestID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequestID = data
		case "fileData":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileData"))
			data, err := ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileData = data
		case "documentType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentType"))
			data, err := ec.unmarshalNTRBDocumentCommonType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBDocumentCommonType(ctx, v)
			if err != nil {
				return it, err
			}
			it.DocumentType = data
		case "otherTypeDescription":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherTypeDescription"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OtherTypeDescription = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTRBRequestFeedbackInput(ctx context.Context, obj any) (models.CreateTRBRequestFeedbackInput, error) {
	var it models.CreateTRBRequestFeedbackInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"trbRequestId", "feedbackMessage", "copyTrbMailbox", "notifyEuaIds", "action"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "trbRequestId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trbRequestId"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrbRequestID = data
		case "feedbackMessage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedbackMessage"))
			data, err := ec.unmarshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.FeedbackMessage = data
		case "copyTrbMailbox":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("copyTrbMailbox"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CopyTrbMailbox = data
		case "notifyEuaIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notifyEuaIds"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotifyEuaIds = data
		case "action":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("action"))
			data, err := ec.unmarshalNTRBFeedbackAction2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBFeedbackAction(ctx, v)
			if err != nil {
				return it, err
			}
			it.Action = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteSystemIntakeContactInput(ctx context.Context, obj any) (models.DeleteSystemIntakeContactInput, error) {
	var it models.DeleteSystemIntakeContactInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteSystemIntakeGRBPresentationLinksInput(ctx context.Context, obj any) (models.DeleteSystemIntakeGRBPresentationLinksInput, error) {
	var it models.DeleteSystemIntakeGRBPresentationLinksInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteSystemIntakeGRBReviewerInput(ctx context.Context, obj any) (models.DeleteSystemIntakeGRBReviewerInput, error) {
	var it models.DeleteSystemIntakeGRBReviewerInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"reviewerID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "reviewerID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewerID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReviewerID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteTRBRequestFundingSourcesInput(ctx context.Context, obj any) (models.DeleteTRBRequestFundingSourcesInput, error) {
	var it models.DeleteTRBRequestFundingSourcesInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"trbRequestId", "fundingNumber"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "trbRequestId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trbRequestId"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrbRequestID = data
		case "fundingNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fundingNumber"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FundingNumber = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmailNotificationRecipients(ctx context.Context, obj any) (models.EmailNotificationRecipients, error) {
	var it models.EmailNotificationRecipients
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"regularRecipientEmails", "shouldNotifyITGovernance", "shouldNotifyITInvestment"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "regularRecipientEmails":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regularRecipientEmails"))
			data, err := ec.unmarshalNEmailAddress2ᚕgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailAddressᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RegularRecipientEmails = data
		case "shouldNotifyITGovernance":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shouldNotifyITGovernance"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShouldNotifyITGovernance = data
		case "shouldNotifyITInvestment":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shouldNotifyITInvestment"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShouldNotifyITInvestment = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReopenTRBRequestInput(ctx context.Context, obj any) (models.ReopenTRBRequestInput, error) {
	var it models.ReopenTRBRequestInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"trbRequestId", "reasonReopened", "copyTrbMailbox", "notifyEuaIds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "trbRequestId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trbRequestId"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrbRequestID = data
		case "reasonReopened":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reasonReopened"))
			data, err := ec.unmarshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReasonReopened = data
		case "copyTrbMailbox":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("copyTrbMailbox"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CopyTrbMailbox = data
		case "notifyEuaIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notifyEuaIds"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotifyEuaIds = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSendCantFindSomethingEmailInput(ctx context.Context, obj any) (models.SendCantFindSomethingEmailInput, error) {
	var it models.SendCantFindSomethingEmailInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"body"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "body":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("body"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Body = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSendFeedbackEmailInput(ctx context.Context, obj any) (models.SendFeedbackEmailInput, error) {
	var it models.SendFeedbackEmailInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"isAnonymous", "canBeContacted", "easiServicesUsed", "cmsRole", "systemEasyToUse", "didntNeedHelpAnswering", "questionsWereRelevant", "hadAccessToInformation", "howSatisfied", "howCanWeImprove"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "isAnonymous":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAnonymous"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsAnonymous = data
		case "canBeContacted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canBeContacted"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanBeContacted = data
		case "easiServicesUsed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("easiServicesUsed"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.EasiServicesUsed = data
		case "cmsRole":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cmsRole"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CmsRole = data
		case "systemEasyToUse":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemEasyToUse"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemEasyToUse = data
		case "didntNeedHelpAnswering":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("didntNeedHelpAnswering"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.DidntNeedHelpAnswering = data
		case "questionsWereRelevant":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("questionsWereRelevant"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.QuestionsWereRelevant = data
		case "hadAccessToInformation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hadAccessToInformation"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.HadAccessToInformation = data
		case "howSatisfied":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("howSatisfied"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.HowSatisfied = data
		case "howCanWeImprove":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("howCanWeImprove"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.HowCanWeImprove = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSendReportAProblemEmailInput(ctx context.Context, obj any) (models.SendReportAProblemEmailInput, error) {
	var it models.SendReportAProblemEmailInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"isAnonymous", "canBeContacted", "easiService", "whatWereYouDoing", "whatWentWrong", "howSevereWasTheProblem"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "isAnonymous":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAnonymous"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsAnonymous = data
		case "canBeContacted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canBeContacted"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanBeContacted = data
		case "easiService":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("easiService"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.EasiService = data
		case "whatWereYouDoing":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("whatWereYouDoing"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.WhatWereYouDoing = data
		case "whatWentWrong":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("whatWentWrong"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.WhatWentWrong = data
		case "howSevereWasTheProblem":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("howSevereWasTheProblem"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.HowSevereWasTheProblem = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSendTRBGuidanceLetterInput(ctx context.Context, obj any) (models.SendTRBGuidanceLetterInput, error) {
	var it models.SendTRBGuidanceLetterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "copyITGovMailbox", "copyTrbMailbox", "notifyEuaIds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "copyITGovMailbox":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("copyITGovMailbox"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CopyITGovMailbox = data
		case "copyTrbMailbox":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("copyTrbMailbox"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CopyTrbMailbox = data
		case "notifyEuaIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notifyEuaIds"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotifyEuaIds = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetRolesForUserOnSystemInput(ctx context.Context, obj any) (models.SetRolesForUserOnSystemInput, error) {
	var it models.SetRolesForUserOnSystemInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"cedarSystemID", "euaUserId", "desiredRoleTypeIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "cedarSystemID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cedarSystemID"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CedarSystemID = data
		case "euaUserId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("euaUserId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.EuaUserID = data
		case "desiredRoleTypeIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desiredRoleTypeIDs"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesiredRoleTypeIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetSystemIntakeRelationExistingServiceInput(ctx context.Context, obj any) (models.SetSystemIntakeRelationExistingServiceInput, error) {
	var it models.SetSystemIntakeRelationExistingServiceInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "contractName", "contractNumbers"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "contractName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractName = data
		case "contractNumbers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractNumbers"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractNumbers = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetSystemIntakeRelationExistingSystemInput(ctx context.Context, obj any) (models.SetSystemIntakeRelationExistingSystemInput, error) {
	var it models.SetSystemIntakeRelationExistingSystemInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "cedarSystemIDs", "contractNumbers"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "cedarSystemIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cedarSystemIDs"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CedarSystemIDs = data
		case "contractNumbers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractNumbers"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractNumbers = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetSystemIntakeRelationNewSystemInput(ctx context.Context, obj any) (models.SetSystemIntakeRelationNewSystemInput, error) {
	var it models.SetSystemIntakeRelationNewSystemInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "contractNumbers"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "contractNumbers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractNumbers"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractNumbers = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetTRBRequestRelationExistingServiceInput(ctx context.Context, obj any) (models.SetTRBRequestRelationExistingServiceInput, error) {
	var it models.SetTRBRequestRelationExistingServiceInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"trbRequestID", "contractName", "contractNumbers"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "trbRequestID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trbRequestID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrbRequestID = data
		case "contractName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractName = data
		case "contractNumbers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractNumbers"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractNumbers = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetTRBRequestRelationExistingSystemInput(ctx context.Context, obj any) (models.SetTRBRequestRelationExistingSystemInput, error) {
	var it models.SetTRBRequestRelationExistingSystemInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"trbRequestID", "cedarSystemIDs", "contractNumbers"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "trbRequestID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trbRequestID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrbRequestID = data
		case "cedarSystemIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cedarSystemIDs"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CedarSystemIDs = data
		case "contractNumbers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractNumbers"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractNumbers = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetTRBRequestRelationNewSystemInput(ctx context.Context, obj any) (models.SetTRBRequestRelationNewSystemInput, error) {
	var it models.SetTRBRequestRelationNewSystemInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"trbRequestID", "contractNumbers"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "trbRequestID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trbRequestID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrbRequestID = data
		case "contractNumbers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractNumbers"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractNumbers = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStartGRBReviewInput(ctx context.Context, obj any) (models.StartGRBReviewInput, error) {
	var it models.StartGRBReviewInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSubmitIntakeInput(ctx context.Context, obj any) (models.SubmitIntakeInput, error) {
	var it models.SubmitIntakeInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeAnnualSpendingInput(ctx context.Context, obj any) (models.SystemIntakeAnnualSpendingInput, error) {
	var it models.SystemIntakeAnnualSpendingInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"currentAnnualSpending", "currentAnnualSpendingITPortion", "plannedYearOneSpending", "plannedYearOneSpendingITPortion"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "currentAnnualSpending":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentAnnualSpending"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentAnnualSpending = data
		case "currentAnnualSpendingITPortion":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentAnnualSpendingITPortion"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentAnnualSpendingITPortion = data
		case "plannedYearOneSpending":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plannedYearOneSpending"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlannedYearOneSpending = data
		case "plannedYearOneSpendingITPortion":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plannedYearOneSpendingITPortion"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlannedYearOneSpendingITPortion = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeBusinessOwnerInput(ctx context.Context, obj any) (models.SystemIntakeBusinessOwnerInput, error) {
	var it models.SystemIntakeBusinessOwnerInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "component"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "component":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("component"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Component = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeChangeLCIDRetirementDateInput(ctx context.Context, obj any) (models.SystemIntakeChangeLCIDRetirementDateInput, error) {
	var it models.SystemIntakeChangeLCIDRetirementDateInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "retiresAt", "additionalInfo", "notificationRecipients", "adminNote"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "retiresAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retiresAt"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.RetiresAt = data
		case "additionalInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additionalInfo"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdditionalInfo = data
		case "notificationRecipients":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notificationRecipients"))
			data, err := ec.unmarshalOEmailNotificationRecipients2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailNotificationRecipients(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotificationRecipients = data
		case "adminNote":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminNote"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdminNote = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeCloseRequestInput(ctx context.Context, obj any) (models.SystemIntakeCloseRequestInput, error) {
	var it models.SystemIntakeCloseRequestInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "notificationRecipients", "reason", "additionalInfo", "adminNote"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "notificationRecipients":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notificationRecipients"))
			data, err := ec.unmarshalOEmailNotificationRecipients2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailNotificationRecipients(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotificationRecipients = data
		case "reason":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reason = data
		case "additionalInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additionalInfo"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdditionalInfo = data
		case "adminNote":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminNote"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdminNote = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeCollaboratorInput(ctx context.Context, obj any) (models.SystemIntakeCollaboratorInput, error) {
	var it models.SystemIntakeCollaboratorInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"collaborator", "name", "key"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "collaborator":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collaborator"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Collaborator = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "key":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Key = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeConfirmLCIDInput(ctx context.Context, obj any) (models.SystemIntakeConfirmLCIDInput, error) {
	var it models.SystemIntakeConfirmLCIDInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "expiresAt", "scope", "nextSteps", "trbFollowUp", "costBaseline", "additionalInfo", "notificationRecipients", "adminNote"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "expiresAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAt"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAt = data
		case "scope":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scope"))
			data, err := ec.unmarshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.Scope = data
		case "nextSteps":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextSteps"))
			data, err := ec.unmarshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextSteps = data
		case "trbFollowUp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trbFollowUp"))
			data, err := ec.unmarshalNSystemIntakeTRBFollowUp2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeTRBFollowUp(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrbFollowUp = data
		case "costBaseline":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costBaseline"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostBaseline = data
		case "additionalInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additionalInfo"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdditionalInfo = data
		case "notificationRecipients":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notificationRecipients"))
			data, err := ec.unmarshalOEmailNotificationRecipients2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailNotificationRecipients(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotificationRecipients = data
		case "adminNote":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminNote"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdminNote = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeContractInput(ctx context.Context, obj any) (models.SystemIntakeContractInput, error) {
	var it models.SystemIntakeContractInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"contractor", "endDate", "hasContract", "startDate", "numbers"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "contractor":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractor"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Contractor = data
		case "endDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDate = data
		case "hasContract":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasContract"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasContract = data
		case "startDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDate = data
		case "numbers":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("numbers"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Numbers = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeCostsInput(ctx context.Context, obj any) (models.SystemIntakeCostsInput, error) {
	var it models.SystemIntakeCostsInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"expectedIncreaseAmount", "isExpectingIncrease"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "expectedIncreaseAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedIncreaseAmount"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpectedIncreaseAmount = data
		case "isExpectingIncrease":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isExpectingIncrease"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsExpectingIncrease = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeExpireLCIDInput(ctx context.Context, obj any) (models.SystemIntakeExpireLCIDInput, error) {
	var it models.SystemIntakeExpireLCIDInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "reason", "nextSteps", "notificationRecipients", "additionalInfo", "adminNote"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "reason":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			data, err := ec.unmarshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reason = data
		case "nextSteps":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextSteps"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextSteps = data
		case "notificationRecipients":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notificationRecipients"))
			data, err := ec.unmarshalOEmailNotificationRecipients2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailNotificationRecipients(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotificationRecipients = data
		case "additionalInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additionalInfo"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdditionalInfo = data
		case "adminNote":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminNote"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdminNote = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeFundingSourceInput(ctx context.Context, obj any) (models.SystemIntakeFundingSourceInput, error) {
	var it models.SystemIntakeFundingSourceInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"fundingNumber", "source"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "fundingNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fundingNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FundingNumber = data
		case "source":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Source = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeFundingSourcesInput(ctx context.Context, obj any) (models.SystemIntakeFundingSourcesInput, error) {
	var it models.SystemIntakeFundingSourcesInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"existingFunding", "fundingSources"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "existingFunding":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("existingFunding"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExistingFunding = data
		case "fundingSources":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fundingSources"))
			data, err := ec.unmarshalNSystemIntakeFundingSourceInput2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeFundingSourceInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FundingSources = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeGRBPresentationLinksInput(ctx context.Context, obj any) (models.SystemIntakeGRBPresentationLinksInput, error) {
	var it models.SystemIntakeGRBPresentationLinksInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "recordingLink", "recordingPasscode", "transcriptLink", "transcriptFileData", "presentationDeckFileData"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "recordingLink":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recordingLink"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RecordingLink = graphql.OmittableOf(data)
		case "recordingPasscode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recordingPasscode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RecordingPasscode = graphql.OmittableOf(data)
		case "transcriptLink":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transcriptLink"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TranscriptLink = graphql.OmittableOf(data)
		case "transcriptFileData":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("transcriptFileData"))
			data, err := ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
			it.TranscriptFileData = graphql.OmittableOf(data)
		case "presentationDeckFileData":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("presentationDeckFileData"))
			data, err := ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
			it.PresentationDeckFileData = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeGovernanceTeamInput(ctx context.Context, obj any) (models.SystemIntakeGovernanceTeamInput, error) {
	var it models.SystemIntakeGovernanceTeamInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"isPresent", "teams"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "isPresent":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isPresent"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsPresent = data
		case "teams":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("teams"))
			data, err := ec.unmarshalOSystemIntakeCollaboratorInput2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeCollaboratorInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Teams = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeISSOInput(ctx context.Context, obj any) (models.SystemIntakeISSOInput, error) {
	var it models.SystemIntakeISSOInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"isPresent", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "isPresent":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isPresent"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsPresent = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeIssueLCIDInput(ctx context.Context, obj any) (models.SystemIntakeIssueLCIDInput, error) {
	var it models.SystemIntakeIssueLCIDInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "lcid", "expiresAt", "scope", "nextSteps", "trbFollowUp", "costBaseline", "additionalInfo", "notificationRecipients", "adminNote"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "lcid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lcid"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Lcid = data
		case "expiresAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAt"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAt = data
		case "scope":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scope"))
			data, err := ec.unmarshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.Scope = data
		case "nextSteps":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextSteps"))
			data, err := ec.unmarshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextSteps = data
		case "trbFollowUp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trbFollowUp"))
			data, err := ec.unmarshalNSystemIntakeTRBFollowUp2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeTRBFollowUp(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrbFollowUp = data
		case "costBaseline":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costBaseline"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostBaseline = data
		case "additionalInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additionalInfo"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdditionalInfo = data
		case "notificationRecipients":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notificationRecipients"))
			data, err := ec.unmarshalOEmailNotificationRecipients2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailNotificationRecipients(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotificationRecipients = data
		case "adminNote":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminNote"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdminNote = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeNotITGovReqInput(ctx context.Context, obj any) (models.SystemIntakeNotITGovReqInput, error) {
	var it models.SystemIntakeNotITGovReqInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "notificationRecipients", "reason", "additionalInfo", "adminNote"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "notificationRecipients":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notificationRecipients"))
			data, err := ec.unmarshalOEmailNotificationRecipients2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailNotificationRecipients(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotificationRecipients = data
		case "reason":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reason = data
		case "additionalInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additionalInfo"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdditionalInfo = data
		case "adminNote":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminNote"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdminNote = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeProductManagerInput(ctx context.Context, obj any) (models.SystemIntakeProductManagerInput, error) {
	var it models.SystemIntakeProductManagerInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "component"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "component":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("component"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Component = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeProgressToNewStepsInput(ctx context.Context, obj any) (models.SystemIntakeProgressToNewStepsInput, error) {
	var it models.SystemIntakeProgressToNewStepsInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "newStep", "meetingDate", "notificationRecipients", "feedback", "grbRecommendations", "additionalInfo", "adminNote", "grbReviewType"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "newStep":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newStep"))
			data, err := ec.unmarshalNSystemIntakeStepToProgressTo2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeStepToProgressTo(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewStep = data
		case "meetingDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("meetingDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.MeetingDate = data
		case "notificationRecipients":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notificationRecipients"))
			data, err := ec.unmarshalOEmailNotificationRecipients2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailNotificationRecipients(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotificationRecipients = data
		case "feedback":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.Feedback = data
		case "grbRecommendations":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grbRecommendations"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.GrbRecommendations = data
		case "additionalInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additionalInfo"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdditionalInfo = data
		case "adminNote":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminNote"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdminNote = data
		case "grbReviewType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grbReviewType"))
			data, err := ec.unmarshalOSystemIntakeGRBReviewType2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewType(ctx, v)
			if err != nil {
				return it, err
			}
			it.GrbReviewType = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeRejectIntakeInput(ctx context.Context, obj any) (models.SystemIntakeRejectIntakeInput, error) {
	var it models.SystemIntakeRejectIntakeInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "reason", "nextSteps", "trbFollowUp", "additionalInfo", "notificationRecipients", "adminNote"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "reason":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			data, err := ec.unmarshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reason = data
		case "nextSteps":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextSteps"))
			data, err := ec.unmarshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextSteps = data
		case "trbFollowUp":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trbFollowUp"))
			data, err := ec.unmarshalNSystemIntakeTRBFollowUp2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeTRBFollowUp(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrbFollowUp = data
		case "additionalInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additionalInfo"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdditionalInfo = data
		case "notificationRecipients":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notificationRecipients"))
			data, err := ec.unmarshalOEmailNotificationRecipients2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailNotificationRecipients(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotificationRecipients = data
		case "adminNote":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminNote"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdminNote = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeReopenRequestInput(ctx context.Context, obj any) (models.SystemIntakeReopenRequestInput, error) {
	var it models.SystemIntakeReopenRequestInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "notificationRecipients", "reason", "additionalInfo", "adminNote"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "notificationRecipients":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notificationRecipients"))
			data, err := ec.unmarshalOEmailNotificationRecipients2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailNotificationRecipients(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotificationRecipients = data
		case "reason":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reason = data
		case "additionalInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additionalInfo"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdditionalInfo = data
		case "adminNote":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminNote"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdminNote = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeRequestEditsInput(ctx context.Context, obj any) (models.SystemIntakeRequestEditsInput, error) {
	var it models.SystemIntakeRequestEditsInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "intakeFormStep", "notificationRecipients", "emailFeedback", "additionalInfo", "adminNote"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "intakeFormStep":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("intakeFormStep"))
			data, err := ec.unmarshalNSystemIntakeFormStep2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeFormStep(ctx, v)
			if err != nil {
				return it, err
			}
			it.IntakeFormStep = data
		case "notificationRecipients":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notificationRecipients"))
			data, err := ec.unmarshalOEmailNotificationRecipients2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailNotificationRecipients(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotificationRecipients = data
		case "emailFeedback":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailFeedback"))
			data, err := ec.unmarshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailFeedback = data
		case "additionalInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additionalInfo"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdditionalInfo = data
		case "adminNote":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminNote"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdminNote = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeRequesterInput(ctx context.Context, obj any) (models.SystemIntakeRequesterInput, error) {
	var it models.SystemIntakeRequesterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeRequesterWithComponentInput(ctx context.Context, obj any) (models.SystemIntakeRequesterWithComponentInput, error) {
	var it models.SystemIntakeRequesterWithComponentInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "component"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "component":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("component"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Component = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeRetireLCIDInput(ctx context.Context, obj any) (models.SystemIntakeRetireLCIDInput, error) {
	var it models.SystemIntakeRetireLCIDInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "retiresAt", "reason", "additionalInfo", "notificationRecipients", "adminNote"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "retiresAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retiresAt"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.RetiresAt = data
		case "reason":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reason = data
		case "additionalInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additionalInfo"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdditionalInfo = data
		case "notificationRecipients":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notificationRecipients"))
			data, err := ec.unmarshalOEmailNotificationRecipients2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailNotificationRecipients(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotificationRecipients = data
		case "adminNote":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminNote"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdminNote = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeUnretireLCIDInput(ctx context.Context, obj any) (models.SystemIntakeUnretireLCIDInput, error) {
	var it models.SystemIntakeUnretireLCIDInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "additionalInfo", "notificationRecipients", "adminNote"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "additionalInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additionalInfo"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdditionalInfo = data
		case "notificationRecipients":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notificationRecipients"))
			data, err := ec.unmarshalOEmailNotificationRecipients2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailNotificationRecipients(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotificationRecipients = data
		case "adminNote":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminNote"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdminNote = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSystemIntakeUpdateLCIDInput(ctx context.Context, obj any) (models.SystemIntakeUpdateLCIDInput, error) {
	var it models.SystemIntakeUpdateLCIDInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "expiresAt", "scope", "nextSteps", "costBaseline", "reason", "additionalInfo", "notificationRecipients", "adminNote"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "expiresAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiresAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpiresAt = data
		case "scope":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scope"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.Scope = data
		case "nextSteps":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextSteps"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextSteps = data
		case "costBaseline":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costBaseline"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CostBaseline = data
		case "reason":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reason"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reason = data
		case "additionalInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additionalInfo"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdditionalInfo = data
		case "notificationRecipients":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notificationRecipients"))
			data, err := ec.unmarshalOEmailNotificationRecipients2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailNotificationRecipients(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotificationRecipients = data
		case "adminNote":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminNote"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdminNote = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTRBRequestChanges(ctx context.Context, obj any) (map[string]interface{}, error) {
	it := make(map[string]any, len(obj.(map[string]any)))
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "archived", "type"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it["name"] = data
		case "archived":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archived"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it["archived"] = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOTRBRequestType2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestType(ctx, v)
			if err != nil {
				return it, err
			}
			it["type"] = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSystemIntakeAdminLeadInput(ctx context.Context, obj any) (models.UpdateSystemIntakeAdminLeadInput, error) {
	var it models.UpdateSystemIntakeAdminLeadInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"adminLead", "id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "adminLead":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminLead"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdminLead = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSystemIntakeContactDetailsInput(ctx context.Context, obj any) (models.UpdateSystemIntakeContactDetailsInput, error) {
	var it models.UpdateSystemIntakeContactDetailsInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "requester", "businessOwner", "productManager", "isso", "governanceTeams"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "requester":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requester"))
			data, err := ec.unmarshalNSystemIntakeRequesterWithComponentInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeRequesterWithComponentInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Requester = data
		case "businessOwner":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("businessOwner"))
			data, err := ec.unmarshalNSystemIntakeBusinessOwnerInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeBusinessOwnerInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BusinessOwner = data
		case "productManager":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productManager"))
			data, err := ec.unmarshalNSystemIntakeProductManagerInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeProductManagerInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductManager = data
		case "isso":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isso"))
			data, err := ec.unmarshalNSystemIntakeISSOInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeISSOInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Isso = data
		case "governanceTeams":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("governanceTeams"))
			data, err := ec.unmarshalNSystemIntakeGovernanceTeamInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGovernanceTeamInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.GovernanceTeams = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSystemIntakeContactInput(ctx context.Context, obj any) (models.UpdateSystemIntakeContactInput, error) {
	var it models.UpdateSystemIntakeContactInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "euaUserId", "systemIntakeId", "component", "role"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "euaUserId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("euaUserId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.EuaUserID = data
		case "systemIntakeId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeId"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "component":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("component"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Component = data
		case "role":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Role = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSystemIntakeContractDetailsInput(ctx context.Context, obj any) (models.UpdateSystemIntakeContractDetailsInput, error) {
	var it models.UpdateSystemIntakeContractDetailsInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "fundingSources", "costs", "annualSpending", "contract"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "fundingSources":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fundingSources"))
			data, err := ec.unmarshalOSystemIntakeFundingSourcesInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeFundingSourcesInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.FundingSources = data
		case "costs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("costs"))
			data, err := ec.unmarshalOSystemIntakeCostsInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeCostsInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Costs = data
		case "annualSpending":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annualSpending"))
			data, err := ec.unmarshalOSystemIntakeAnnualSpendingInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeAnnualSpendingInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.AnnualSpending = data
		case "contract":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contract"))
			data, err := ec.unmarshalOSystemIntakeContractInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeContractInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Contract = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSystemIntakeGRBReviewerInput(ctx context.Context, obj any) (models.UpdateSystemIntakeGRBReviewerInput, error) {
	var it models.UpdateSystemIntakeGRBReviewerInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"reviewerID", "votingRole", "grbRole"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "reviewerID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewerID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReviewerID = data
		case "votingRole":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("votingRole"))
			data, err := ec.unmarshalNSystemIntakeGRBReviewerVotingRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewerVotingRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.VotingRole = data
		case "grbRole":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grbRole"))
			data, err := ec.unmarshalNSystemIntakeGRBReviewerRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewerRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.GrbRole = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSystemIntakeLinkedCedarSystemInput(ctx context.Context, obj any) (models.UpdateSystemIntakeLinkedCedarSystemInput, error) {
	var it models.UpdateSystemIntakeLinkedCedarSystemInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "cedarSystemId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "cedarSystemId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cedarSystemId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CedarSystemID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSystemIntakeNoteInput(ctx context.Context, obj any) (models.UpdateSystemIntakeNoteInput, error) {
	var it models.UpdateSystemIntakeNoteInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"content", "isArchived", "id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "content":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			data, err := ec.unmarshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.Content = data
		case "isArchived":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isArchived"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsArchived = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSystemIntakeRequestDetailsInput(ctx context.Context, obj any) (models.UpdateSystemIntakeRequestDetailsInput, error) {
	var it models.UpdateSystemIntakeRequestDetailsInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "requestName", "businessNeed", "businessSolution", "currentStage", "needsEaSupport", "hasUiChanges", "usesAiTech", "usingSoftware", "acquisitionMethods", "cedarSystemId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "requestName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requestName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RequestName = data
		case "businessNeed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("businessNeed"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BusinessNeed = data
		case "businessSolution":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("businessSolution"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BusinessSolution = data
		case "currentStage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentStage"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CurrentStage = data
		case "needsEaSupport":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("needsEaSupport"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.NeedsEaSupport = data
		case "hasUiChanges":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasUiChanges"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.HasUIChanges = data
		case "usesAiTech":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usesAiTech"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsesAiTech = data
		case "usingSoftware":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usingSoftware"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UsingSoftware = data
		case "acquisitionMethods":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("acquisitionMethods"))
			data, err := ec.unmarshalNSystemIntakeSoftwareAcquisitionMethods2ᚕgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeSoftwareAcquisitionMethodsᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AcquisitionMethods = data
		case "cedarSystemId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cedarSystemId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CedarSystemID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSystemIntakeReviewDatesInput(ctx context.Context, obj any) (models.UpdateSystemIntakeReviewDatesInput, error) {
	var it models.UpdateSystemIntakeReviewDatesInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"grbDate", "grtDate", "id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "grbDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grbDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.GrbDate = data
		case "grtDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grtDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.GrtDate = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTRBGuidanceLetterInput(ctx context.Context, obj any) (map[string]interface{}, error) {
	it := make(map[string]any, len(obj.(map[string]any)))
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"trbRequestId", "meetingSummary", "nextSteps", "isFollowupRecommended", "followupPoint"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "trbRequestId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trbRequestId"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it["trbRequestId"] = data
		case "meetingSummary":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("meetingSummary"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it["meetingSummary"] = data
		case "nextSteps":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextSteps"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it["nextSteps"] = data
		case "isFollowupRecommended":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isFollowupRecommended"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it["isFollowupRecommended"] = data
		case "followupPoint":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("followupPoint"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it["followupPoint"] = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTRBGuidanceLetterInsightInput(ctx context.Context, obj any) (map[string]interface{}, error) {
	it := make(map[string]any, len(obj.(map[string]any)))
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title", "insight", "links", "category"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it["id"] = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it["title"] = data
		case "insight":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("insight"))
			data, err := ec.unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it["insight"] = data
		case "links":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("links"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it["links"] = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalOTRBGuidanceLetterInsightCategory2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterInsightCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it["category"] = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTRBGuidanceLetterInsightOrderInput(ctx context.Context, obj any) (models.UpdateTRBGuidanceLetterInsightOrderInput, error) {
	var it models.UpdateTRBGuidanceLetterInsightOrderInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"trbRequestId", "newOrder", "category"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "trbRequestId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trbRequestId"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrbRequestID = data
		case "newOrder":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newOrder"))
			data, err := ec.unmarshalNUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NewOrder = data
		case "category":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalNTRBGuidanceLetterInsightCategory2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterInsightCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTRBRequestAttendeeInput(ctx context.Context, obj any) (models.UpdateTRBRequestAttendeeInput, error) {
	var it models.UpdateTRBRequestAttendeeInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "component", "role"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "component":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("component"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Component = data
		case "role":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			data, err := ec.unmarshalNPersonRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐPersonRole(ctx, v)
			if err != nil {
				return it, err
			}
			it.Role = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTRBRequestConsultMeetingTimeInput(ctx context.Context, obj any) (models.UpdateTRBRequestConsultMeetingTimeInput, error) {
	var it models.UpdateTRBRequestConsultMeetingTimeInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"trbRequestId", "consultMeetingTime", "copyTrbMailbox", "notifyEuaIds", "notes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "trbRequestId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trbRequestId"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrbRequestID = data
		case "consultMeetingTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("consultMeetingTime"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConsultMeetingTime = data
		case "copyTrbMailbox":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("copyTrbMailbox"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CopyTrbMailbox = data
		case "notifyEuaIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notifyEuaIds"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.NotifyEuaIds = data
		case "notes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notes"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Notes = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTRBRequestFormInput(ctx context.Context, obj any) (map[string]interface{}, error) {
	it := make(map[string]any, len(obj.(map[string]any)))
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"trbRequestId", "isSubmitted", "component", "needsAssistanceWith", "hasSolutionInMind", "proposedSolution", "whereInProcess", "whereInProcessOther", "hasExpectedStartEndDates", "expectedStartDate", "expectedEndDate", "collabGroups", "collabDateSecurity", "collabDateEnterpriseArchitecture", "collabDateCloud", "collabDatePrivacyAdvisor", "collabDateGovernanceReviewBoard", "collabDateOther", "collabGroupOther", "collabGRBConsultRequested", "systemIntakes", "subjectAreaOptions", "subjectAreaOptionOther"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "trbRequestId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trbRequestId"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it["trbRequestId"] = data
		case "isSubmitted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isSubmitted"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it["isSubmitted"] = data
		case "component":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("component"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it["component"] = data
		case "needsAssistanceWith":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("needsAssistanceWith"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it["needsAssistanceWith"] = data
		case "hasSolutionInMind":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSolutionInMind"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it["hasSolutionInMind"] = data
		case "proposedSolution":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("proposedSolution"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it["proposedSolution"] = data
		case "whereInProcess":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("whereInProcess"))
			data, err := ec.unmarshalOTRBWhereInProcessOption2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBWhereInProcessOption(ctx, v)
			if err != nil {
				return it, err
			}
			it["whereInProcess"] = data
		case "whereInProcessOther":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("whereInProcessOther"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it["whereInProcessOther"] = data
		case "hasExpectedStartEndDates":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasExpectedStartEndDates"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it["hasExpectedStartEndDates"] = data
		case "expectedStartDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedStartDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it["expectedStartDate"] = data
		case "expectedEndDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expectedEndDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it["expectedEndDate"] = data
		case "collabGroups":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collabGroups"))
			data, err := ec.unmarshalOTRBCollabGroupOption2ᚕgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBCollabGroupOptionᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it["collabGroups"] = data
		case "collabDateSecurity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collabDateSecurity"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it["collabDateSecurity"] = data
		case "collabDateEnterpriseArchitecture":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collabDateEnterpriseArchitecture"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it["collabDateEnterpriseArchitecture"] = data
		case "collabDateCloud":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collabDateCloud"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it["collabDateCloud"] = data
		case "collabDatePrivacyAdvisor":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collabDatePrivacyAdvisor"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it["collabDatePrivacyAdvisor"] = data
		case "collabDateGovernanceReviewBoard":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collabDateGovernanceReviewBoard"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it["collabDateGovernanceReviewBoard"] = data
		case "collabDateOther":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collabDateOther"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it["collabDateOther"] = data
		case "collabGroupOther":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collabGroupOther"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it["collabGroupOther"] = data
		case "collabGRBConsultRequested":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collabGRBConsultRequested"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it["collabGRBConsultRequested"] = data
		case "systemIntakes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakes"))
			data, err := ec.unmarshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it["systemIntakes"] = data
		case "subjectAreaOptions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subjectAreaOptions"))
			data, err := ec.unmarshalOTRBSubjectAreaOption2ᚕgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBSubjectAreaOptionᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it["subjectAreaOptions"] = data
		case "subjectAreaOptionOther":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subjectAreaOptionOther"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it["subjectAreaOptionOther"] = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTRBRequestFundingSourcesInput(ctx context.Context, obj any) (models.UpdateTRBRequestFundingSourcesInput, error) {
	var it models.UpdateTRBRequestFundingSourcesInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"trbRequestId", "fundingNumber", "sources"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "trbRequestId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trbRequestId"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrbRequestID = data
		case "fundingNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fundingNumber"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FundingNumber = data
		case "sources":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sources"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Sources = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTRBRequestTRBLeadInput(ctx context.Context, obj any) (models.UpdateTRBRequestTRBLeadInput, error) {
	var it models.UpdateTRBRequestTRBLeadInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"trbRequestId", "trbLead"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "trbRequestId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trbRequestId"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrbRequestID = data
		case "trbLead":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("trbLead"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TrbLead = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUploadSystemIntakeGRBPresentationDeckInput(ctx context.Context, obj any) (models.UploadSystemIntakeGRBPresentationDeckInput, error) {
	var it models.UploadSystemIntakeGRBPresentationDeckInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "presentationDeckFileData"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "presentationDeckFileData":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("presentationDeckFileData"))
			data, err := ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
			it.PresentationDeckFileData = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateSystemIntakeGRBDiscussionPostInput(ctx context.Context, obj any) (models.CreateSystemIntakeGRBDiscussionPostInput, error) {
	var it models.CreateSystemIntakeGRBDiscussionPostInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "content"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "content":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			data, err := ec.unmarshalNTaggedHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTaggedHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.Content = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputcreateSystemIntakeGRBDiscussionReplyInput(ctx context.Context, obj any) (models.CreateSystemIntakeGRBDiscussionReplyInput, error) {
	var it models.CreateSystemIntakeGRBDiscussionReplyInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"initialPostID", "content"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "initialPostID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("initialPostID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.InitialPostID = data
		case "content":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			data, err := ec.unmarshalNTaggedHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTaggedHTML(ctx, v)
			if err != nil {
				return it, err
			}
			it.Content = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateSystemIntakeGRBReviewFormInputPresentationAsync(ctx context.Context, obj any) (models.UpdateSystemIntakeGRBReviewFormInputPresentationAsync, error) {
	var it models.UpdateSystemIntakeGRBReviewFormInputPresentationAsync
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "grbReviewAsyncRecordingTime"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "grbReviewAsyncRecordingTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grbReviewAsyncRecordingTime"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.GrbReviewAsyncRecordingTime = graphql.OmittableOf(data)
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateSystemIntakeGRBReviewFormInputPresentationStandard(ctx context.Context, obj any) (models.UpdateSystemIntakeGRBReviewFormInputPresentationStandard, error) {
	var it models.UpdateSystemIntakeGRBReviewFormInputPresentationStandard
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "grbDate"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "grbDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grbDate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.GrbDate = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateSystemIntakeGRBReviewFormInputTimeframeAsync(ctx context.Context, obj any) (models.UpdateSystemIntakeGRBReviewFormInputTimeframeAsync, error) {
	var it models.UpdateSystemIntakeGRBReviewFormInputTimeframeAsync
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["startGRBReview"]; !present {
		asMap["startGRBReview"] = false
	}

	fieldsInOrder := [...]string{"systemIntakeID", "grbReviewAsyncEndDate", "startGRBReview"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "grbReviewAsyncEndDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grbReviewAsyncEndDate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.GrbReviewAsyncEndDate = data
		case "startGRBReview":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startGRBReview"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartGRBReview = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateSystemIntakeGRBReviewTypeInput(ctx context.Context, obj any) (models.UpdateSystemIntakeGRBReviewTypeInput, error) {
	var it models.UpdateSystemIntakeGRBReviewTypeInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"systemIntakeID", "grbReviewType"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "systemIntakeID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("systemIntakeID"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.SystemIntakeID = data
		case "grbReviewType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grbReviewType"))
			data, err := ec.unmarshalNSystemIntakeGRBReviewType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewType(ctx, v)
			if err != nil {
				return it, err
			}
			it.GrbReviewType = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _TRBAdminNoteCategorySpecificData(ctx context.Context, sel ast.SelectionSet, obj models.TRBAdminNoteCategorySpecificData) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case models.TRBAdminNoteSupportingDocumentsCategoryData:
		return ec._TRBAdminNoteSupportingDocumentsCategoryData(ctx, sel, &obj)
	case *models.TRBAdminNoteSupportingDocumentsCategoryData:
		if obj == nil {
			return graphql.Null
		}
		return ec._TRBAdminNoteSupportingDocumentsCategoryData(ctx, sel, obj)
	case models.TRBAdminNoteInitialRequestFormCategoryData:
		return ec._TRBAdminNoteInitialRequestFormCategoryData(ctx, sel, &obj)
	case *models.TRBAdminNoteInitialRequestFormCategoryData:
		if obj == nil {
			return graphql.Null
		}
		return ec._TRBAdminNoteInitialRequestFormCategoryData(ctx, sel, obj)
	case models.TRBAdminNoteGuidanceLetterCategoryData:
		return ec._TRBAdminNoteGuidanceLetterCategoryData(ctx, sel, &obj)
	case *models.TRBAdminNoteGuidanceLetterCategoryData:
		if obj == nil {
			return graphql.Null
		}
		return ec._TRBAdminNoteGuidanceLetterCategoryData(ctx, sel, obj)
	case models.TRBAdminNoteGeneralRequestCategoryData:
		return ec._TRBAdminNoteGeneralRequestCategoryData(ctx, sel, &obj)
	case *models.TRBAdminNoteGeneralRequestCategoryData:
		if obj == nil {
			return graphql.Null
		}
		return ec._TRBAdminNoteGeneralRequestCategoryData(ctx, sel, obj)
	case models.TRBAdminNoteConsultSessionCategoryData:
		return ec._TRBAdminNoteConsultSessionCategoryData(ctx, sel, &obj)
	case *models.TRBAdminNoteConsultSessionCategoryData:
		if obj == nil {
			return graphql.Null
		}
		return ec._TRBAdminNoteConsultSessionCategoryData(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var augmentedSystemIntakeContactImplementors = []string{"AugmentedSystemIntakeContact"}

func (ec *executionContext) _AugmentedSystemIntakeContact(ctx context.Context, sel ast.SelectionSet, obj *models.AugmentedSystemIntakeContact) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, augmentedSystemIntakeContactImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AugmentedSystemIntakeContact")
		case "id":
			out.Values[i] = ec._AugmentedSystemIntakeContact_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "euaUserId":
			out.Values[i] = ec._AugmentedSystemIntakeContact_euaUserId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "systemIntakeId":
			out.Values[i] = ec._AugmentedSystemIntakeContact_systemIntakeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "component":
			out.Values[i] = ec._AugmentedSystemIntakeContact_component(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "role":
			out.Values[i] = ec._AugmentedSystemIntakeContact_role(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "commonName":
			out.Values[i] = ec._AugmentedSystemIntakeContact_commonName(ctx, field, obj)
		case "email":
			out.Values[i] = ec._AugmentedSystemIntakeContact_email(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var businessCaseImplementors = []string{"BusinessCase"}

func (ec *executionContext) _BusinessCase(ctx context.Context, sel ast.SelectionSet, obj *models.BusinessCase) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessCaseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessCase")
		case "alternativeASolution":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BusinessCase_alternativeASolution(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "alternativeBSolution":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BusinessCase_alternativeBSolution(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "businessNeed":
			out.Values[i] = ec._BusinessCase_businessNeed(ctx, field, obj)
		case "businessOwner":
			out.Values[i] = ec._BusinessCase_businessOwner(ctx, field, obj)
		case "cmsBenefit":
			out.Values[i] = ec._BusinessCase_cmsBenefit(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._BusinessCase_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "currentSolutionSummary":
			out.Values[i] = ec._BusinessCase_currentSolutionSummary(ctx, field, obj)
		case "euaUserId":
			out.Values[i] = ec._BusinessCase_euaUserId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "id":
			out.Values[i] = ec._BusinessCase_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lifecycleCostLines":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BusinessCase_lifecycleCostLines(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "preferredSolution":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BusinessCase_preferredSolution(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "priorityAlignment":
			out.Values[i] = ec._BusinessCase_priorityAlignment(ctx, field, obj)
		case "projectName":
			out.Values[i] = ec._BusinessCase_projectName(ctx, field, obj)
		case "requester":
			out.Values[i] = ec._BusinessCase_requester(ctx, field, obj)
		case "requesterPhoneNumber":
			out.Values[i] = ec._BusinessCase_requesterPhoneNumber(ctx, field, obj)
		case "status":
			out.Values[i] = ec._BusinessCase_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "successIndicators":
			out.Values[i] = ec._BusinessCase_successIndicators(ctx, field, obj)
		case "systemIntake":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._BusinessCase_systemIntake(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "updatedAt":
			out.Values[i] = ec._BusinessCase_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var businessCaseSolutionImplementors = []string{"BusinessCaseSolution"}

func (ec *executionContext) _BusinessCaseSolution(ctx context.Context, sel ast.SelectionSet, obj *models.BusinessCaseSolution) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessCaseSolutionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessCaseSolution")
		case "acquisitionApproach":
			out.Values[i] = ec._BusinessCaseSolution_acquisitionApproach(ctx, field, obj)
		case "cons":
			out.Values[i] = ec._BusinessCaseSolution_cons(ctx, field, obj)
		case "costSavings":
			out.Values[i] = ec._BusinessCaseSolution_costSavings(ctx, field, obj)
		case "hasUi":
			out.Values[i] = ec._BusinessCaseSolution_hasUi(ctx, field, obj)
		case "hostingCloudServiceType":
			out.Values[i] = ec._BusinessCaseSolution_hostingCloudServiceType(ctx, field, obj)
		case "hostingLocation":
			out.Values[i] = ec._BusinessCaseSolution_hostingLocation(ctx, field, obj)
		case "hostingType":
			out.Values[i] = ec._BusinessCaseSolution_hostingType(ctx, field, obj)
		case "pros":
			out.Values[i] = ec._BusinessCaseSolution_pros(ctx, field, obj)
		case "securityIsApproved":
			out.Values[i] = ec._BusinessCaseSolution_securityIsApproved(ctx, field, obj)
		case "securityIsBeingReviewed":
			out.Values[i] = ec._BusinessCaseSolution_securityIsBeingReviewed(ctx, field, obj)
		case "summary":
			out.Values[i] = ec._BusinessCaseSolution_summary(ctx, field, obj)
		case "title":
			out.Values[i] = ec._BusinessCaseSolution_title(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cedarAuthorityToOperateImplementors = []string{"CedarAuthorityToOperate"}

func (ec *executionContext) _CedarAuthorityToOperate(ctx context.Context, sel ast.SelectionSet, obj *models.CedarAuthorityToOperate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cedarAuthorityToOperateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CedarAuthorityToOperate")
		case "cedarId":
			out.Values[i] = ec._CedarAuthorityToOperate_cedarId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uuid":
			out.Values[i] = ec._CedarAuthorityToOperate_uuid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "actualDispositionDate":
			out.Values[i] = ec._CedarAuthorityToOperate_actualDispositionDate(ctx, field, obj)
		case "containsPersonallyIdentifiableInformation":
			out.Values[i] = ec._CedarAuthorityToOperate_containsPersonallyIdentifiableInformation(ctx, field, obj)
		case "countOfTotalNonPrivilegedUserPopulation":
			out.Values[i] = ec._CedarAuthorityToOperate_countOfTotalNonPrivilegedUserPopulation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "countOfOpenPoams":
			out.Values[i] = ec._CedarAuthorityToOperate_countOfOpenPoams(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "countOfTotalPrivilegedUserPopulation":
			out.Values[i] = ec._CedarAuthorityToOperate_countOfTotalPrivilegedUserPopulation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dateAuthorizationMemoExpires":
			out.Values[i] = ec._CedarAuthorityToOperate_dateAuthorizationMemoExpires(ctx, field, obj)
		case "dateAuthorizationMemoSigned":
			out.Values[i] = ec._CedarAuthorityToOperate_dateAuthorizationMemoSigned(ctx, field, obj)
		case "eAuthenticationLevel":
			out.Values[i] = ec._CedarAuthorityToOperate_eAuthenticationLevel(ctx, field, obj)
		case "fips199OverallImpactRating":
			out.Values[i] = ec._CedarAuthorityToOperate_fips199OverallImpactRating(ctx, field, obj)
		case "fismaSystemAcronym":
			out.Values[i] = ec._CedarAuthorityToOperate_fismaSystemAcronym(ctx, field, obj)
		case "fismaSystemName":
			out.Values[i] = ec._CedarAuthorityToOperate_fismaSystemName(ctx, field, obj)
		case "isAccessedByNonOrganizationalUsers":
			out.Values[i] = ec._CedarAuthorityToOperate_isAccessedByNonOrganizationalUsers(ctx, field, obj)
		case "isPiiLimitedToUserNameAndPass":
			out.Values[i] = ec._CedarAuthorityToOperate_isPiiLimitedToUserNameAndPass(ctx, field, obj)
		case "isProtectedHealthInformation":
			out.Values[i] = ec._CedarAuthorityToOperate_isProtectedHealthInformation(ctx, field, obj)
		case "lastActScaDate":
			out.Values[i] = ec._CedarAuthorityToOperate_lastActScaDate(ctx, field, obj)
		case "lastAssessmentDate":
			out.Values[i] = ec._CedarAuthorityToOperate_lastAssessmentDate(ctx, field, obj)
		case "lastContingencyPlanCompletionDate":
			out.Values[i] = ec._CedarAuthorityToOperate_lastContingencyPlanCompletionDate(ctx, field, obj)
		case "lastPenTestDate":
			out.Values[i] = ec._CedarAuthorityToOperate_lastPenTestDate(ctx, field, obj)
		case "piaCompletionDate":
			out.Values[i] = ec._CedarAuthorityToOperate_piaCompletionDate(ctx, field, obj)
		case "primaryCyberRiskAdvisor":
			out.Values[i] = ec._CedarAuthorityToOperate_primaryCyberRiskAdvisor(ctx, field, obj)
		case "privacySubjectMatterExpert":
			out.Values[i] = ec._CedarAuthorityToOperate_privacySubjectMatterExpert(ctx, field, obj)
		case "recoveryPointObjective":
			out.Values[i] = ec._CedarAuthorityToOperate_recoveryPointObjective(ctx, field, obj)
		case "recoveryTimeObjective":
			out.Values[i] = ec._CedarAuthorityToOperate_recoveryTimeObjective(ctx, field, obj)
		case "systemOfRecordsNotice":
			out.Values[i] = ec._CedarAuthorityToOperate_systemOfRecordsNotice(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tlcPhase":
			out.Values[i] = ec._CedarAuthorityToOperate_tlcPhase(ctx, field, obj)
		case "xlcPhase":
			out.Values[i] = ec._CedarAuthorityToOperate_xlcPhase(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cedarBudgetImplementors = []string{"CedarBudget"}

func (ec *executionContext) _CedarBudget(ctx context.Context, sel ast.SelectionSet, obj *models.CedarBudget) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cedarBudgetImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CedarBudget")
		case "fiscalYear":
			out.Values[i] = ec._CedarBudget_fiscalYear(ctx, field, obj)
		case "funding":
			out.Values[i] = ec._CedarBudget_funding(ctx, field, obj)
		case "fundingId":
			out.Values[i] = ec._CedarBudget_fundingId(ctx, field, obj)
		case "fundingSource":
			out.Values[i] = ec._CedarBudget_fundingSource(ctx, field, obj)
		case "id":
			out.Values[i] = ec._CedarBudget_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._CedarBudget_name(ctx, field, obj)
		case "projectId":
			out.Values[i] = ec._CedarBudget_projectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "projectTitle":
			out.Values[i] = ec._CedarBudget_projectTitle(ctx, field, obj)
		case "systemId":
			out.Values[i] = ec._CedarBudget_systemId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cedarBudgetActualCostImplementors = []string{"CedarBudgetActualCost"}

func (ec *executionContext) _CedarBudgetActualCost(ctx context.Context, sel ast.SelectionSet, obj *models.CedarBudgetActualCost) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cedarBudgetActualCostImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CedarBudgetActualCost")
		case "actualSystemCost":
			out.Values[i] = ec._CedarBudgetActualCost_actualSystemCost(ctx, field, obj)
		case "fiscalYear":
			out.Values[i] = ec._CedarBudgetActualCost_fiscalYear(ctx, field, obj)
		case "systemId":
			out.Values[i] = ec._CedarBudgetActualCost_systemId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cedarBudgetSystemCostImplementors = []string{"CedarBudgetSystemCost"}

func (ec *executionContext) _CedarBudgetSystemCost(ctx context.Context, sel ast.SelectionSet, obj *models.CedarBudgetSystemCost) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cedarBudgetSystemCostImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CedarBudgetSystemCost")
		case "budgetActualCost":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CedarBudgetSystemCost_budgetActualCost(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cedarBusinessOwnerInformationImplementors = []string{"CedarBusinessOwnerInformation"}

func (ec *executionContext) _CedarBusinessOwnerInformation(ctx context.Context, sel ast.SelectionSet, obj *models.CedarBusinessOwnerInformation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cedarBusinessOwnerInformationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CedarBusinessOwnerInformation")
		case "beneficiaryAddressPurpose":
			out.Values[i] = ec._CedarBusinessOwnerInformation_beneficiaryAddressPurpose(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "beneficiaryAddressPurposeOther":
			out.Values[i] = ec._CedarBusinessOwnerInformation_beneficiaryAddressPurposeOther(ctx, field, obj)
		case "beneficiaryAddressSource":
			out.Values[i] = ec._CedarBusinessOwnerInformation_beneficiaryAddressSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "beneficiaryAddressSourceOther":
			out.Values[i] = ec._CedarBusinessOwnerInformation_beneficiaryAddressSourceOther(ctx, field, obj)
		case "beneficiaryInformation":
			out.Values[i] = ec._CedarBusinessOwnerInformation_beneficiaryInformation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "costPerYear":
			out.Values[i] = ec._CedarBusinessOwnerInformation_costPerYear(ctx, field, obj)
		case "editBeneficiaryInformation":
			out.Values[i] = ec._CedarBusinessOwnerInformation_editBeneficiaryInformation(ctx, field, obj)
		case "isCmsOwned":
			out.Values[i] = ec._CedarBusinessOwnerInformation_isCmsOwned(ctx, field, obj)
		case "nr508UserInterface":
			out.Values[i] = ec._CedarBusinessOwnerInformation_nr508UserInterface(ctx, field, obj)
		case "numberOfContractorFte":
			out.Values[i] = ec._CedarBusinessOwnerInformation_numberOfContractorFte(ctx, field, obj)
		case "numberOfFederalFte":
			out.Values[i] = ec._CedarBusinessOwnerInformation_numberOfFederalFte(ctx, field, obj)
		case "numberOfSupportedUsersPerMonth":
			out.Values[i] = ec._CedarBusinessOwnerInformation_numberOfSupportedUsersPerMonth(ctx, field, obj)
		case "storesBankingData":
			out.Values[i] = ec._CedarBusinessOwnerInformation_storesBankingData(ctx, field, obj)
		case "storesBeneficiaryAddress":
			out.Values[i] = ec._CedarBusinessOwnerInformation_storesBeneficiaryAddress(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cedarContractImplementors = []string{"CedarContract"}

func (ec *executionContext) _CedarContract(ctx context.Context, sel ast.SelectionSet, obj *models.CedarContract) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cedarContractImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CedarContract")
		case "startDate":
			out.Values[i] = ec._CedarContract_startDate(ctx, field, obj)
		case "endDate":
			out.Values[i] = ec._CedarContract_endDate(ctx, field, obj)
		case "contractNumber":
			out.Values[i] = ec._CedarContract_contractNumber(ctx, field, obj)
		case "contractName":
			out.Values[i] = ec._CedarContract_contractName(ctx, field, obj)
		case "description":
			out.Values[i] = ec._CedarContract_description(ctx, field, obj)
		case "orderNumber":
			out.Values[i] = ec._CedarContract_orderNumber(ctx, field, obj)
		case "serviceProvided":
			out.Values[i] = ec._CedarContract_serviceProvided(ctx, field, obj)
		case "isDeliveryOrg":
			out.Values[i] = ec._CedarContract_isDeliveryOrg(ctx, field, obj)
		case "systemID":
			out.Values[i] = ec._CedarContract_systemID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cedarDataCenterImplementors = []string{"CedarDataCenter"}

func (ec *executionContext) _CedarDataCenter(ctx context.Context, sel ast.SelectionSet, obj *models.CedarDataCenter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cedarDataCenterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CedarDataCenter")
		case "id":
			out.Values[i] = ec._CedarDataCenter_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._CedarDataCenter_name(ctx, field, obj)
		case "version":
			out.Values[i] = ec._CedarDataCenter_version(ctx, field, obj)
		case "description":
			out.Values[i] = ec._CedarDataCenter_description(ctx, field, obj)
		case "state":
			out.Values[i] = ec._CedarDataCenter_state(ctx, field, obj)
		case "status":
			out.Values[i] = ec._CedarDataCenter_status(ctx, field, obj)
		case "startDate":
			out.Values[i] = ec._CedarDataCenter_startDate(ctx, field, obj)
		case "endDate":
			out.Values[i] = ec._CedarDataCenter_endDate(ctx, field, obj)
		case "address1":
			out.Values[i] = ec._CedarDataCenter_address1(ctx, field, obj)
		case "address2":
			out.Values[i] = ec._CedarDataCenter_address2(ctx, field, obj)
		case "city":
			out.Values[i] = ec._CedarDataCenter_city(ctx, field, obj)
		case "addressState":
			out.Values[i] = ec._CedarDataCenter_addressState(ctx, field, obj)
		case "zip":
			out.Values[i] = ec._CedarDataCenter_zip(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cedarDeploymentImplementors = []string{"CedarDeployment"}

func (ec *executionContext) _CedarDeployment(ctx context.Context, sel ast.SelectionSet, obj *models.CedarDeployment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cedarDeploymentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CedarDeployment")
		case "id":
			out.Values[i] = ec._CedarDeployment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._CedarDeployment_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "systemID":
			out.Values[i] = ec._CedarDeployment_systemID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "startDate":
			out.Values[i] = ec._CedarDeployment_startDate(ctx, field, obj)
		case "endDate":
			out.Values[i] = ec._CedarDeployment_endDate(ctx, field, obj)
		case "isHotSite":
			out.Values[i] = ec._CedarDeployment_isHotSite(ctx, field, obj)
		case "description":
			out.Values[i] = ec._CedarDeployment_description(ctx, field, obj)
		case "contractorName":
			out.Values[i] = ec._CedarDeployment_contractorName(ctx, field, obj)
		case "systemVersion":
			out.Values[i] = ec._CedarDeployment_systemVersion(ctx, field, obj)
		case "hasProductionData":
			out.Values[i] = ec._CedarDeployment_hasProductionData(ctx, field, obj)
		case "replicatedSystemElements":
			out.Values[i] = ec._CedarDeployment_replicatedSystemElements(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deploymentType":
			out.Values[i] = ec._CedarDeployment_deploymentType(ctx, field, obj)
		case "systemName":
			out.Values[i] = ec._CedarDeployment_systemName(ctx, field, obj)
		case "deploymentElementID":
			out.Values[i] = ec._CedarDeployment_deploymentElementID(ctx, field, obj)
		case "state":
			out.Values[i] = ec._CedarDeployment_state(ctx, field, obj)
		case "status":
			out.Values[i] = ec._CedarDeployment_status(ctx, field, obj)
		case "wanType":
			out.Values[i] = ec._CedarDeployment_wanType(ctx, field, obj)
		case "dataCenter":
			out.Values[i] = ec._CedarDeployment_dataCenter(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cedarExchangeImplementors = []string{"CedarExchange"}

func (ec *executionContext) _CedarExchange(ctx context.Context, sel ast.SelectionSet, obj *models.CedarExchange) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cedarExchangeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CedarExchange")
		case "connectionFrequency":
			out.Values[i] = ec._CedarExchange_connectionFrequency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "containsBankingData":
			out.Values[i] = ec._CedarExchange_containsBankingData(ctx, field, obj)
		case "containsBeneficiaryAddress":
			out.Values[i] = ec._CedarExchange_containsBeneficiaryAddress(ctx, field, obj)
		case "containsPhi":
			out.Values[i] = ec._CedarExchange_containsPhi(ctx, field, obj)
		case "containsPii":
			out.Values[i] = ec._CedarExchange_containsPii(ctx, field, obj)
		case "containsHealthDisparityData":
			out.Values[i] = ec._CedarExchange_containsHealthDisparityData(ctx, field, obj)
		case "dataExchangeAgreement":
			out.Values[i] = ec._CedarExchange_dataExchangeAgreement(ctx, field, obj)
		case "dataFormat":
			out.Values[i] = ec._CedarExchange_dataFormat(ctx, field, obj)
		case "dataFormatOther":
			out.Values[i] = ec._CedarExchange_dataFormatOther(ctx, field, obj)
		case "exchangeDescription":
			out.Values[i] = ec._CedarExchange_exchangeDescription(ctx, field, obj)
		case "exchangeEndDate":
			out.Values[i] = ec._CedarExchange_exchangeEndDate(ctx, field, obj)
		case "exchangeId":
			out.Values[i] = ec._CedarExchange_exchangeId(ctx, field, obj)
		case "exchangeName":
			out.Values[i] = ec._CedarExchange_exchangeName(ctx, field, obj)
		case "exchangeRetiredDate":
			out.Values[i] = ec._CedarExchange_exchangeRetiredDate(ctx, field, obj)
		case "exchangeStartDate":
			out.Values[i] = ec._CedarExchange_exchangeStartDate(ctx, field, obj)
		case "exchangeState":
			out.Values[i] = ec._CedarExchange_exchangeState(ctx, field, obj)
		case "exchangeVersion":
			out.Values[i] = ec._CedarExchange_exchangeVersion(ctx, field, obj)
		case "exchangeDirection":
			out.Values[i] = ec._CedarExchange_exchangeDirection(ctx, field, obj)
		case "fromOwnerId":
			out.Values[i] = ec._CedarExchange_fromOwnerId(ctx, field, obj)
		case "fromOwnerName":
			out.Values[i] = ec._CedarExchange_fromOwnerName(ctx, field, obj)
		case "fromOwnerType":
			out.Values[i] = ec._CedarExchange_fromOwnerType(ctx, field, obj)
		case "isBeneficiaryMailingFile":
			out.Values[i] = ec._CedarExchange_isBeneficiaryMailingFile(ctx, field, obj)
		case "numOfRecords":
			out.Values[i] = ec._CedarExchange_numOfRecords(ctx, field, obj)
		case "sharedViaApi":
			out.Values[i] = ec._CedarExchange_sharedViaApi(ctx, field, obj)
		case "toOwnerId":
			out.Values[i] = ec._CedarExchange_toOwnerId(ctx, field, obj)
		case "toOwnerName":
			out.Values[i] = ec._CedarExchange_toOwnerName(ctx, field, obj)
		case "toOwnerType":
			out.Values[i] = ec._CedarExchange_toOwnerType(ctx, field, obj)
		case "typeOfData":
			out.Values[i] = ec._CedarExchange_typeOfData(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cedarExchangeTypeOfDataItemImplementors = []string{"CedarExchangeTypeOfDataItem"}

func (ec *executionContext) _CedarExchangeTypeOfDataItem(ctx context.Context, sel ast.SelectionSet, obj *models.CedarExchangeTypeOfDataItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cedarExchangeTypeOfDataItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CedarExchangeTypeOfDataItem")
		case "id":
			out.Values[i] = ec._CedarExchangeTypeOfDataItem_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._CedarExchangeTypeOfDataItem_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cedarRoleImplementors = []string{"CedarRole"}

func (ec *executionContext) _CedarRole(ctx context.Context, sel ast.SelectionSet, obj *models.CedarRole) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cedarRoleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CedarRole")
		case "application":
			out.Values[i] = ec._CedarRole_application(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "objectID":
			out.Values[i] = ec._CedarRole_objectID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "roleTypeID":
			out.Values[i] = ec._CedarRole_roleTypeID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "assigneeType":
			out.Values[i] = ec._CedarRole_assigneeType(ctx, field, obj)
		case "assigneeUsername":
			out.Values[i] = ec._CedarRole_assigneeUsername(ctx, field, obj)
		case "assigneeEmail":
			out.Values[i] = ec._CedarRole_assigneeEmail(ctx, field, obj)
		case "assigneeOrgID":
			out.Values[i] = ec._CedarRole_assigneeOrgID(ctx, field, obj)
		case "assigneeOrgName":
			out.Values[i] = ec._CedarRole_assigneeOrgName(ctx, field, obj)
		case "assigneeFirstName":
			out.Values[i] = ec._CedarRole_assigneeFirstName(ctx, field, obj)
		case "assigneeLastName":
			out.Values[i] = ec._CedarRole_assigneeLastName(ctx, field, obj)
		case "assigneePhone":
			out.Values[i] = ec._CedarRole_assigneePhone(ctx, field, obj)
		case "assigneeDesc":
			out.Values[i] = ec._CedarRole_assigneeDesc(ctx, field, obj)
		case "roleTypeName":
			out.Values[i] = ec._CedarRole_roleTypeName(ctx, field, obj)
		case "roleTypeDesc":
			out.Values[i] = ec._CedarRole_roleTypeDesc(ctx, field, obj)
		case "roleID":
			out.Values[i] = ec._CedarRole_roleID(ctx, field, obj)
		case "objectType":
			out.Values[i] = ec._CedarRole_objectType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cedarRoleTypeImplementors = []string{"CedarRoleType"}

func (ec *executionContext) _CedarRoleType(ctx context.Context, sel ast.SelectionSet, obj *models.CedarRoleType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cedarRoleTypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CedarRoleType")
		case "id":
			out.Values[i] = ec._CedarRoleType_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "application":
			out.Values[i] = ec._CedarRoleType_application(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._CedarRoleType_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._CedarRoleType_description(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cedarSoftwareProductItemImplementors = []string{"CedarSoftwareProductItem"}

func (ec *executionContext) _CedarSoftwareProductItem(ctx context.Context, sel ast.SelectionSet, obj *models.CedarSoftwareProductItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cedarSoftwareProductItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CedarSoftwareProductItem")
		case "apiGatewayUse":
			out.Values[i] = ec._CedarSoftwareProductItem_apiGatewayUse(ctx, field, obj)
		case "elaPurchase":
			out.Values[i] = ec._CedarSoftwareProductItem_elaPurchase(ctx, field, obj)
		case "elaVendorId":
			out.Values[i] = ec._CedarSoftwareProductItem_elaVendorId(ctx, field, obj)
		case "providesAiCapability":
			out.Values[i] = ec._CedarSoftwareProductItem_providesAiCapability(ctx, field, obj)
		case "refstr":
			out.Values[i] = ec._CedarSoftwareProductItem_refstr(ctx, field, obj)
		case "softwareCatagoryConnectionGuid":
			out.Values[i] = ec._CedarSoftwareProductItem_softwareCatagoryConnectionGuid(ctx, field, obj)
		case "softwareVendorConnectionGuid":
			out.Values[i] = ec._CedarSoftwareProductItem_softwareVendorConnectionGuid(ctx, field, obj)
		case "softwareCost":
			out.Values[i] = ec._CedarSoftwareProductItem_softwareCost(ctx, field, obj)
		case "softwareElaOrganization":
			out.Values[i] = ec._CedarSoftwareProductItem_softwareElaOrganization(ctx, field, obj)
		case "softwareName":
			out.Values[i] = ec._CedarSoftwareProductItem_softwareName(ctx, field, obj)
		case "systemSoftwareConnectionGuid":
			out.Values[i] = ec._CedarSoftwareProductItem_systemSoftwareConnectionGuid(ctx, field, obj)
		case "technopediaCategory":
			out.Values[i] = ec._CedarSoftwareProductItem_technopediaCategory(ctx, field, obj)
		case "technopediaID":
			out.Values[i] = ec._CedarSoftwareProductItem_technopediaID(ctx, field, obj)
		case "vendorName":
			out.Values[i] = ec._CedarSoftwareProductItem_vendorName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cedarSoftwareProductsImplementors = []string{"CedarSoftwareProducts"}

func (ec *executionContext) _CedarSoftwareProducts(ctx context.Context, sel ast.SelectionSet, obj *models.CedarSoftwareProducts) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cedarSoftwareProductsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CedarSoftwareProducts")
		case "aiSolnCatg":
			out.Values[i] = ec._CedarSoftwareProducts_aiSolnCatg(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "aiSolnCatgOther":
			out.Values[i] = ec._CedarSoftwareProducts_aiSolnCatgOther(ctx, field, obj)
		case "apiDataArea":
			out.Values[i] = ec._CedarSoftwareProducts_apiDataArea(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "apiDescPubLocation":
			out.Values[i] = ec._CedarSoftwareProducts_apiDescPubLocation(ctx, field, obj)
		case "apiDescPublished":
			out.Values[i] = ec._CedarSoftwareProducts_apiDescPublished(ctx, field, obj)
		case "apiFHIRUse":
			out.Values[i] = ec._CedarSoftwareProducts_apiFHIRUse(ctx, field, obj)
		case "apiFHIRUseOther":
			out.Values[i] = ec._CedarSoftwareProducts_apiFHIRUseOther(ctx, field, obj)
		case "apiHasPortal":
			out.Values[i] = ec._CedarSoftwareProducts_apiHasPortal(ctx, field, obj)
		case "apisAccessibility":
			out.Values[i] = ec._CedarSoftwareProducts_apisAccessibility(ctx, field, obj)
		case "apisDeveloped":
			out.Values[i] = ec._CedarSoftwareProducts_apisDeveloped(ctx, field, obj)
		case "developmentStage":
			out.Values[i] = ec._CedarSoftwareProducts_developmentStage(ctx, field, obj)
		case "softwareProducts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CedarSoftwareProducts_softwareProducts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "systemHasAPIGateway":
			out.Values[i] = ec._CedarSoftwareProducts_systemHasAPIGateway(ctx, field, obj)
		case "usesAiTech":
			out.Values[i] = ec._CedarSoftwareProducts_usesAiTech(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cedarSubSystemImplementors = []string{"CedarSubSystem"}

func (ec *executionContext) _CedarSubSystem(ctx context.Context, sel ast.SelectionSet, obj *models.CedarSubSystem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cedarSubSystemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CedarSubSystem")
		case "id":
			out.Values[i] = ec._CedarSubSystem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._CedarSubSystem_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "acronym":
			out.Values[i] = ec._CedarSubSystem_acronym(ctx, field, obj)
		case "description":
			out.Values[i] = ec._CedarSubSystem_description(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cedarSystemImplementors = []string{"CedarSystem"}

func (ec *executionContext) _CedarSystem(ctx context.Context, sel ast.SelectionSet, obj *models.CedarSystem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cedarSystemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CedarSystem")
		case "id":
			out.Values[i] = ec._CedarSystem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._CedarSystem_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._CedarSystem_description(ctx, field, obj)
		case "acronym":
			out.Values[i] = ec._CedarSystem_acronym(ctx, field, obj)
		case "atoEffectiveDate":
			out.Values[i] = ec._CedarSystem_atoEffectiveDate(ctx, field, obj)
		case "atoExpirationDate":
			out.Values[i] = ec._CedarSystem_atoExpirationDate(ctx, field, obj)
		case "status":
			out.Values[i] = ec._CedarSystem_status(ctx, field, obj)
		case "businessOwnerOrg":
			out.Values[i] = ec._CedarSystem_businessOwnerOrg(ctx, field, obj)
		case "businessOwnerOrgComp":
			out.Values[i] = ec._CedarSystem_businessOwnerOrgComp(ctx, field, obj)
		case "businessOwnerRoles":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CedarSystem_businessOwnerRoles(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "systemMaintainerOrg":
			out.Values[i] = ec._CedarSystem_systemMaintainerOrg(ctx, field, obj)
		case "systemMaintainerOrgComp":
			out.Values[i] = ec._CedarSystem_systemMaintainerOrgComp(ctx, field, obj)
		case "versionId":
			out.Values[i] = ec._CedarSystem_versionId(ctx, field, obj)
		case "isBookmarked":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CedarSystem_isBookmarked(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "linkedTrbRequests":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CedarSystem_linkedTrbRequests(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "linkedSystemIntakes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CedarSystem_linkedSystemIntakes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "uuid":
			out.Values[i] = ec._CedarSystem_uuid(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cedarSystemBookmarkImplementors = []string{"CedarSystemBookmark"}

func (ec *executionContext) _CedarSystemBookmark(ctx context.Context, sel ast.SelectionSet, obj *models.CedarSystemBookmark) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cedarSystemBookmarkImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CedarSystemBookmark")
		case "euaUserId":
			out.Values[i] = ec._CedarSystemBookmark_euaUserId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cedarSystemId":
			out.Values[i] = ec._CedarSystemBookmark_cedarSystemId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cedarSystemDetailsImplementors = []string{"CedarSystemDetails"}

func (ec *executionContext) _CedarSystemDetails(ctx context.Context, sel ast.SelectionSet, obj *models.CedarSystemDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cedarSystemDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CedarSystemDetails")
		case "cedarSystem":
			out.Values[i] = ec._CedarSystemDetails_cedarSystem(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "systemMaintainerInformation":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CedarSystemDetails_systemMaintainerInformation(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "businessOwnerInformation":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CedarSystemDetails_businessOwnerInformation(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "roles":
			out.Values[i] = ec._CedarSystemDetails_roles(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deployments":
			out.Values[i] = ec._CedarSystemDetails_deployments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "threats":
			out.Values[i] = ec._CedarSystemDetails_threats(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "urls":
			out.Values[i] = ec._CedarSystemDetails_urls(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isMySystem":
			out.Values[i] = ec._CedarSystemDetails_isMySystem(ctx, field, obj)
		case "atoEffectiveDate":
			out.Values[i] = ec._CedarSystemDetails_atoEffectiveDate(ctx, field, obj)
		case "atoExpirationDate":
			out.Values[i] = ec._CedarSystemDetails_atoExpirationDate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cedarSystemMaintainerInformationImplementors = []string{"CedarSystemMaintainerInformation"}

func (ec *executionContext) _CedarSystemMaintainerInformation(ctx context.Context, sel ast.SelectionSet, obj *models.CedarSystemMaintainerInformation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cedarSystemMaintainerInformationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CedarSystemMaintainerInformation")
		case "agileUsed":
			out.Values[i] = ec._CedarSystemMaintainerInformation_agileUsed(ctx, field, obj)
		case "adHocAgileDeploymentFrequency":
			out.Values[i] = ec._CedarSystemMaintainerInformation_adHocAgileDeploymentFrequency(ctx, field, obj)
		case "authoritativeDatasource":
			out.Values[i] = ec._CedarSystemMaintainerInformation_authoritativeDatasource(ctx, field, obj)
		case "businessArtifactsOnDemand":
			out.Values[i] = ec._CedarSystemMaintainerInformation_businessArtifactsOnDemand(ctx, field, obj)
		case "dataAtRestEncryptionKeyManagement":
			out.Values[i] = ec._CedarSystemMaintainerInformation_dataAtRestEncryptionKeyManagement(ctx, field, obj)
		case "deploymentFrequency":
			out.Values[i] = ec._CedarSystemMaintainerInformation_deploymentFrequency(ctx, field, obj)
		case "devCompletionPercent":
			out.Values[i] = ec._CedarSystemMaintainerInformation_devCompletionPercent(ctx, field, obj)
		case "devWorkDescription":
			out.Values[i] = ec._CedarSystemMaintainerInformation_devWorkDescription(ctx, field, obj)
		case "ecapParticipation":
			out.Values[i] = ec._CedarSystemMaintainerInformation_ecapParticipation(ctx, field, obj)
		case "frontendAccessType":
			out.Values[i] = ec._CedarSystemMaintainerInformation_frontendAccessType(ctx, field, obj)
		case "hardCodedIPAddress":
			out.Values[i] = ec._CedarSystemMaintainerInformation_hardCodedIPAddress(ctx, field, obj)
		case "ip6EnabledAssetPercent":
			out.Values[i] = ec._CedarSystemMaintainerInformation_ip6EnabledAssetPercent(ctx, field, obj)
		case "ip6TransitionPlan":
			out.Values[i] = ec._CedarSystemMaintainerInformation_ip6TransitionPlan(ctx, field, obj)
		case "ipEnabledAssetCount":
			out.Values[i] = ec._CedarSystemMaintainerInformation_ipEnabledAssetCount(ctx, field, obj)
		case "legalHoldCaseName":
			out.Values[i] = ec._CedarSystemMaintainerInformation_legalHoldCaseName(ctx, field, obj)
		case "locallyStoredUserInformation":
			out.Values[i] = ec._CedarSystemMaintainerInformation_locallyStoredUserInformation(ctx, field, obj)
		case "majorRefreshDate":
			out.Values[i] = ec._CedarSystemMaintainerInformation_majorRefreshDate(ctx, field, obj)
		case "multifactorAuthenticationMethod":
			out.Values[i] = ec._CedarSystemMaintainerInformation_multifactorAuthenticationMethod(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "multifactorAuthenticationMethodOther":
			out.Values[i] = ec._CedarSystemMaintainerInformation_multifactorAuthenticationMethodOther(ctx, field, obj)
		case "netAccessibility":
			out.Values[i] = ec._CedarSystemMaintainerInformation_netAccessibility(ctx, field, obj)
		case "networkTrafficEncryptionKeyManagement":
			out.Values[i] = ec._CedarSystemMaintainerInformation_networkTrafficEncryptionKeyManagement(ctx, field, obj)
		case "noMajorRefresh":
			out.Values[i] = ec._CedarSystemMaintainerInformation_noMajorRefresh(ctx, field, obj)
		case "noPersistentRecordsFlag":
			out.Values[i] = ec._CedarSystemMaintainerInformation_noPersistentRecordsFlag(ctx, field, obj)
		case "noPlannedMajorRefresh":
			out.Values[i] = ec._CedarSystemMaintainerInformation_noPlannedMajorRefresh(ctx, field, obj)
		case "omDocumentationOnDemand":
			out.Values[i] = ec._CedarSystemMaintainerInformation_omDocumentationOnDemand(ctx, field, obj)
		case "plansToRetireReplace":
			out.Values[i] = ec._CedarSystemMaintainerInformation_plansToRetireReplace(ctx, field, obj)
		case "quarterToRetireReplace":
			out.Values[i] = ec._CedarSystemMaintainerInformation_quarterToRetireReplace(ctx, field, obj)
		case "recordsManagementBucket":
			out.Values[i] = ec._CedarSystemMaintainerInformation_recordsManagementBucket(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordsManagementDisposalLocation":
			out.Values[i] = ec._CedarSystemMaintainerInformation_recordsManagementDisposalLocation(ctx, field, obj)
		case "recordsManagementDisposalPlan":
			out.Values[i] = ec._CedarSystemMaintainerInformation_recordsManagementDisposalPlan(ctx, field, obj)
		case "recordsUnderLegalHold":
			out.Values[i] = ec._CedarSystemMaintainerInformation_recordsUnderLegalHold(ctx, field, obj)
		case "sourceCodeOnDemand":
			out.Values[i] = ec._CedarSystemMaintainerInformation_sourceCodeOnDemand(ctx, field, obj)
		case "systemCustomization":
			out.Values[i] = ec._CedarSystemMaintainerInformation_systemCustomization(ctx, field, obj)
		case "systemDataLocation":
			out.Values[i] = ec._CedarSystemMaintainerInformation_systemDataLocation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "systemDataLocationNotes":
			out.Values[i] = ec._CedarSystemMaintainerInformation_systemDataLocationNotes(ctx, field, obj)
		case "systemDesignOnDemand":
			out.Values[i] = ec._CedarSystemMaintainerInformation_systemDesignOnDemand(ctx, field, obj)
		case "systemProductionDate":
			out.Values[i] = ec._CedarSystemMaintainerInformation_systemProductionDate(ctx, field, obj)
		case "systemRequirementsOnDemand":
			out.Values[i] = ec._CedarSystemMaintainerInformation_systemRequirementsOnDemand(ctx, field, obj)
		case "testPlanOnDemand":
			out.Values[i] = ec._CedarSystemMaintainerInformation_testPlanOnDemand(ctx, field, obj)
		case "testReportsOnDemand":
			out.Values[i] = ec._CedarSystemMaintainerInformation_testReportsOnDemand(ctx, field, obj)
		case "testScriptsOnDemand":
			out.Values[i] = ec._CedarSystemMaintainerInformation_testScriptsOnDemand(ctx, field, obj)
		case "yearToRetireReplace":
			out.Values[i] = ec._CedarSystemMaintainerInformation_yearToRetireReplace(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cedarThreatImplementors = []string{"CedarThreat"}

func (ec *executionContext) _CedarThreat(ctx context.Context, sel ast.SelectionSet, obj *models.CedarThreat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cedarThreatImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CedarThreat")
		case "alternativeId":
			out.Values[i] = ec._CedarThreat_alternativeId(ctx, field, obj)
		case "controlFamily":
			out.Values[i] = ec._CedarThreat_controlFamily(ctx, field, obj)
		case "daysOpen":
			out.Values[i] = ec._CedarThreat_daysOpen(ctx, field, obj)
		case "id":
			out.Values[i] = ec._CedarThreat_id(ctx, field, obj)
		case "parentId":
			out.Values[i] = ec._CedarThreat_parentId(ctx, field, obj)
		case "type":
			out.Values[i] = ec._CedarThreat_type(ctx, field, obj)
		case "weaknessRiskLevel":
			out.Values[i] = ec._CedarThreat_weaknessRiskLevel(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cedarURLImplementors = []string{"CedarURL"}

func (ec *executionContext) _CedarURL(ctx context.Context, sel ast.SelectionSet, obj *models.CedarURL) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cedarURLImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CedarURL")
		case "id":
			out.Values[i] = ec._CedarURL_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "address":
			out.Values[i] = ec._CedarURL_address(ctx, field, obj)
		case "isBehindWebApplicationFirewall":
			out.Values[i] = ec._CedarURL_isBehindWebApplicationFirewall(ctx, field, obj)
		case "isAPIEndpoint":
			out.Values[i] = ec._CedarURL_isAPIEndpoint(ctx, field, obj)
		case "isVersionCodeRepository":
			out.Values[i] = ec._CedarURL_isVersionCodeRepository(ctx, field, obj)
		case "urlHostingEnv":
			out.Values[i] = ec._CedarURL_urlHostingEnv(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var contractDateImplementors = []string{"ContractDate"}

func (ec *executionContext) _ContractDate(ctx context.Context, sel ast.SelectionSet, obj *models.ContractDate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contractDateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContractDate")
		case "day":
			out.Values[i] = ec._ContractDate_day(ctx, field, obj)
		case "month":
			out.Values[i] = ec._ContractDate_month(ctx, field, obj)
		case "year":
			out.Values[i] = ec._ContractDate_year(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createCedarSystemBookmarkPayloadImplementors = []string{"CreateCedarSystemBookmarkPayload"}

func (ec *executionContext) _CreateCedarSystemBookmarkPayload(ctx context.Context, sel ast.SelectionSet, obj *models.CreateCedarSystemBookmarkPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createCedarSystemBookmarkPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateCedarSystemBookmarkPayload")
		case "cedarSystemBookmark":
			out.Values[i] = ec._CreateCedarSystemBookmarkPayload_cedarSystemBookmark(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createSystemIntakeContactPayloadImplementors = []string{"CreateSystemIntakeContactPayload"}

func (ec *executionContext) _CreateSystemIntakeContactPayload(ctx context.Context, sel ast.SelectionSet, obj *models.CreateSystemIntakeContactPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createSystemIntakeContactPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateSystemIntakeContactPayload")
		case "systemIntakeContact":
			out.Values[i] = ec._CreateSystemIntakeContactPayload_systemIntakeContact(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createSystemIntakeDocumentPayloadImplementors = []string{"CreateSystemIntakeDocumentPayload"}

func (ec *executionContext) _CreateSystemIntakeDocumentPayload(ctx context.Context, sel ast.SelectionSet, obj *models.CreateSystemIntakeDocumentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createSystemIntakeDocumentPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateSystemIntakeDocumentPayload")
		case "document":
			out.Values[i] = ec._CreateSystemIntakeDocumentPayload_document(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createSystemIntakeGRBReviewersPayloadImplementors = []string{"CreateSystemIntakeGRBReviewersPayload"}

func (ec *executionContext) _CreateSystemIntakeGRBReviewersPayload(ctx context.Context, sel ast.SelectionSet, obj *models.CreateSystemIntakeGRBReviewersPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createSystemIntakeGRBReviewersPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateSystemIntakeGRBReviewersPayload")
		case "reviewers":
			out.Values[i] = ec._CreateSystemIntakeGRBReviewersPayload_reviewers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createTRBRequestDocumentPayloadImplementors = []string{"CreateTRBRequestDocumentPayload"}

func (ec *executionContext) _CreateTRBRequestDocumentPayload(ctx context.Context, sel ast.SelectionSet, obj *models.CreateTRBRequestDocumentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createTRBRequestDocumentPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateTRBRequestDocumentPayload")
		case "document":
			out.Values[i] = ec._CreateTRBRequestDocumentPayload_document(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var currentUserImplementors = []string{"CurrentUser"}

func (ec *executionContext) _CurrentUser(ctx context.Context, sel ast.SelectionSet, obj *models.CurrentUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, currentUserImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CurrentUser")
		case "launchDarkly":
			out.Values[i] = ec._CurrentUser_launchDarkly(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteCedarSystemBookmarkPayloadImplementors = []string{"DeleteCedarSystemBookmarkPayload"}

func (ec *executionContext) _DeleteCedarSystemBookmarkPayload(ctx context.Context, sel ast.SelectionSet, obj *models.DeleteCedarSystemBookmarkPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteCedarSystemBookmarkPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteCedarSystemBookmarkPayload")
		case "cedarSystemId":
			out.Values[i] = ec._DeleteCedarSystemBookmarkPayload_cedarSystemId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteSystemIntakeContactPayloadImplementors = []string{"DeleteSystemIntakeContactPayload"}

func (ec *executionContext) _DeleteSystemIntakeContactPayload(ctx context.Context, sel ast.SelectionSet, obj *models.DeleteSystemIntakeContactPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteSystemIntakeContactPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteSystemIntakeContactPayload")
		case "systemIntakeContact":
			out.Values[i] = ec._DeleteSystemIntakeContactPayload_systemIntakeContact(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteSystemIntakeDocumentPayloadImplementors = []string{"DeleteSystemIntakeDocumentPayload"}

func (ec *executionContext) _DeleteSystemIntakeDocumentPayload(ctx context.Context, sel ast.SelectionSet, obj *models.DeleteSystemIntakeDocumentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteSystemIntakeDocumentPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteSystemIntakeDocumentPayload")
		case "document":
			out.Values[i] = ec._DeleteSystemIntakeDocumentPayload_document(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteTRBRequestDocumentPayloadImplementors = []string{"DeleteTRBRequestDocumentPayload"}

func (ec *executionContext) _DeleteTRBRequestDocumentPayload(ctx context.Context, sel ast.SelectionSet, obj *models.DeleteTRBRequestDocumentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteTRBRequestDocumentPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteTRBRequestDocumentPayload")
		case "document":
			out.Values[i] = ec._DeleteTRBRequestDocumentPayload_document(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var estimatedLifecycleCostImplementors = []string{"EstimatedLifecycleCost"}

func (ec *executionContext) _EstimatedLifecycleCost(ctx context.Context, sel ast.SelectionSet, obj *models.EstimatedLifecycleCost) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, estimatedLifecycleCostImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EstimatedLifecycleCost")
		case "businessCaseId":
			out.Values[i] = ec._EstimatedLifecycleCost_businessCaseId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cost":
			out.Values[i] = ec._EstimatedLifecycleCost_cost(ctx, field, obj)
		case "id":
			out.Values[i] = ec._EstimatedLifecycleCost_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "phase":
			out.Values[i] = ec._EstimatedLifecycleCost_phase(ctx, field, obj)
		case "solution":
			out.Values[i] = ec._EstimatedLifecycleCost_solution(ctx, field, obj)
		case "year":
			out.Values[i] = ec._EstimatedLifecycleCost_year(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gRBReviewerComparisonImplementors = []string{"GRBReviewerComparison"}

func (ec *executionContext) _GRBReviewerComparison(ctx context.Context, sel ast.SelectionSet, obj *models.GRBReviewerComparison) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gRBReviewerComparisonImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GRBReviewerComparison")
		case "id":
			out.Values[i] = ec._GRBReviewerComparison_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userAccount":
			out.Values[i] = ec._GRBReviewerComparison_userAccount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "euaUserId":
			out.Values[i] = ec._GRBReviewerComparison_euaUserId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "votingRole":
			out.Values[i] = ec._GRBReviewerComparison_votingRole(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "grbRole":
			out.Values[i] = ec._GRBReviewerComparison_grbRole(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isCurrentReviewer":
			out.Values[i] = ec._GRBReviewerComparison_isCurrentReviewer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gRBReviewerComparisonIntakeImplementors = []string{"GRBReviewerComparisonIntake"}

func (ec *executionContext) _GRBReviewerComparisonIntake(ctx context.Context, sel ast.SelectionSet, obj *models.GRBReviewerComparisonIntake) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gRBReviewerComparisonIntakeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GRBReviewerComparisonIntake")
		case "id":
			out.Values[i] = ec._GRBReviewerComparisonIntake_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "requestName":
			out.Values[i] = ec._GRBReviewerComparisonIntake_requestName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "reviewers":
			out.Values[i] = ec._GRBReviewerComparisonIntake_reviewers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "intakeCreatedAt":
			out.Values[i] = ec._GRBReviewerComparisonIntake_intakeCreatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gRBVotingInformationImplementors = []string{"GRBVotingInformation"}

func (ec *executionContext) _GRBVotingInformation(ctx context.Context, sel ast.SelectionSet, obj *models.GRBVotingInformation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gRBVotingInformationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GRBVotingInformation")
		case "grbReviewers":
			out.Values[i] = ec._GRBVotingInformation_grbReviewers(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "votingStatus":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GRBVotingInformation_votingStatus(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "numberOfNoObjection":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GRBVotingInformation_numberOfNoObjection(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "numberOfObjection":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GRBVotingInformation_numberOfObjection(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "numberOfNotVoted":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GRBVotingInformation_numberOfNotVoted(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var governanceRequestFeedbackImplementors = []string{"GovernanceRequestFeedback"}

func (ec *executionContext) _GovernanceRequestFeedback(ctx context.Context, sel ast.SelectionSet, obj *models.GovernanceRequestFeedback) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, governanceRequestFeedbackImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GovernanceRequestFeedback")
		case "id":
			out.Values[i] = ec._GovernanceRequestFeedback_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "intakeId":
			out.Values[i] = ec._GovernanceRequestFeedback_intakeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "feedback":
			out.Values[i] = ec._GovernanceRequestFeedback_feedback(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sourceAction":
			out.Values[i] = ec._GovernanceRequestFeedback_sourceAction(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "targetForm":
			out.Values[i] = ec._GovernanceRequestFeedback_targetForm(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			out.Values[i] = ec._GovernanceRequestFeedback_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "author":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GovernanceRequestFeedback_author(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdBy":
			out.Values[i] = ec._GovernanceRequestFeedback_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._GovernanceRequestFeedback_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "modifiedBy":
			out.Values[i] = ec._GovernanceRequestFeedback_modifiedBy(ctx, field, obj)
		case "modifiedAt":
			out.Values[i] = ec._GovernanceRequestFeedback_modifiedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var iTGovTaskStatusesImplementors = []string{"ITGovTaskStatuses"}

func (ec *executionContext) _ITGovTaskStatuses(ctx context.Context, sel ast.SelectionSet, obj *models.ITGovTaskStatuses) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, iTGovTaskStatusesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ITGovTaskStatuses")
		case "intakeFormStatus":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ITGovTaskStatuses_intakeFormStatus(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "feedbackFromInitialReviewStatus":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ITGovTaskStatuses_feedbackFromInitialReviewStatus(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "bizCaseDraftStatus":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ITGovTaskStatuses_bizCaseDraftStatus(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "grtMeetingStatus":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ITGovTaskStatuses_grtMeetingStatus(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "bizCaseFinalStatus":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ITGovTaskStatuses_bizCaseFinalStatus(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "grbMeetingStatus":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ITGovTaskStatuses_grbMeetingStatus(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "decisionAndNextStepsStatus":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ITGovTaskStatuses_decisionAndNextStepsStatus(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var launchDarklySettingsImplementors = []string{"LaunchDarklySettings"}

func (ec *executionContext) _LaunchDarklySettings(ctx context.Context, sel ast.SelectionSet, obj *models.LaunchDarklySettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, launchDarklySettingsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LaunchDarklySettings")
		case "userKey":
			out.Values[i] = ec._LaunchDarklySettings_userKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "signedHash":
			out.Values[i] = ec._LaunchDarklySettings_signedHash(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createSystemIntakeActionProgressToNewStep":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSystemIntakeActionProgressToNewStep(ctx, field)
			})
		case "createSystemIntakeActionRequestEdits":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSystemIntakeActionRequestEdits(ctx, field)
			})
		case "createSystemIntakeActionExpireLCID":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSystemIntakeActionExpireLCID(ctx, field)
			})
		case "createSystemIntakeActionUpdateLCID":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSystemIntakeActionUpdateLCID(ctx, field)
			})
		case "createSystemIntakeActionRetireLCID":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSystemIntakeActionRetireLCID(ctx, field)
			})
		case "createSystemIntakeActionUnretireLCID":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSystemIntakeActionUnretireLCID(ctx, field)
			})
		case "createSystemIntakeActionChangeLCIDRetirementDate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSystemIntakeActionChangeLCIDRetirementDate(ctx, field)
			})
		case "createSystemIntakeActionConfirmLCID":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSystemIntakeActionConfirmLCID(ctx, field)
			})
		case "createSystemIntakeActionIssueLCID":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSystemIntakeActionIssueLCID(ctx, field)
			})
		case "createSystemIntakeActionRejectIntake":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSystemIntakeActionRejectIntake(ctx, field)
			})
		case "createSystemIntakeActionReopenRequest":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSystemIntakeActionReopenRequest(ctx, field)
			})
		case "createSystemIntakeActionCloseRequest":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSystemIntakeActionCloseRequest(ctx, field)
			})
		case "createSystemIntakeActionNotITGovRequest":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSystemIntakeActionNotITGovRequest(ctx, field)
			})
		case "createSystemIntakeNote":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSystemIntakeNote(ctx, field)
			})
		case "updateSystemIntakeNote":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSystemIntakeNote(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createSystemIntake":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSystemIntake(ctx, field)
			})
		case "updateSystemIntakeRequestType":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSystemIntakeRequestType(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "submitIntake":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_submitIntake(ctx, field)
			})
		case "updateSystemIntakeAdminLead":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSystemIntakeAdminLead(ctx, field)
			})
		case "updateSystemIntakeReviewDates":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSystemIntakeReviewDates(ctx, field)
			})
		case "updateSystemIntakeContactDetails":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSystemIntakeContactDetails(ctx, field)
			})
		case "updateSystemIntakeRequestDetails":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSystemIntakeRequestDetails(ctx, field)
			})
		case "updateSystemIntakeContractDetails":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSystemIntakeContractDetails(ctx, field)
			})
		case "createCedarSystemBookmark":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCedarSystemBookmark(ctx, field)
			})
		case "deleteCedarSystemBookmark":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteCedarSystemBookmark(ctx, field)
			})
		case "setSystemIntakeRelationNewSystem":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setSystemIntakeRelationNewSystem(ctx, field)
			})
		case "setSystemIntakeRelationExistingSystem":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setSystemIntakeRelationExistingSystem(ctx, field)
			})
		case "setSystemIntakeRelationExistingService":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setSystemIntakeRelationExistingService(ctx, field)
			})
		case "unlinkSystemIntakeRelation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_unlinkSystemIntakeRelation(ctx, field)
			})
		case "createSystemIntakeContact":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSystemIntakeContact(ctx, field)
			})
		case "updateSystemIntakeContact":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSystemIntakeContact(ctx, field)
			})
		case "deleteSystemIntakeContact":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteSystemIntakeContact(ctx, field)
			})
		case "startGRBReview":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_startGRBReview(ctx, field)
			})
		case "createSystemIntakeGRBReviewers":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSystemIntakeGRBReviewers(ctx, field)
			})
		case "updateSystemIntakeGRBReviewer":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSystemIntakeGRBReviewer(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteSystemIntakeGRBReviewer":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteSystemIntakeGRBReviewer(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "castSystemIntakeGRBReviewerVote":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_castSystemIntakeGRBReviewerVote(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createSystemIntakeGRBDiscussionPost":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSystemIntakeGRBDiscussionPost(ctx, field)
			})
		case "createSystemIntakeGRBDiscussionReply":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSystemIntakeGRBDiscussionReply(ctx, field)
			})
		case "updateSystemIntakeGRBReviewType":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSystemIntakeGRBReviewType(ctx, field)
			})
		case "updateSystemIntakeGRBReviewFormPresentationStandard":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSystemIntakeGRBReviewFormPresentationStandard(ctx, field)
			})
		case "updateSystemIntakeGRBReviewFormPresentationAsync":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSystemIntakeGRBReviewFormPresentationAsync(ctx, field)
			})
		case "updateSystemIntakeGRBReviewFormTimeframeAsync":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSystemIntakeGRBReviewFormTimeframeAsync(ctx, field)
			})
		case "updateSystemIntakeLinkedCedarSystem":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSystemIntakeLinkedCedarSystem(ctx, field)
			})
		case "setSystemIntakeGRBPresentationLinks":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setSystemIntakeGRBPresentationLinks(ctx, field)
			})
		case "uploadSystemIntakeGRBPresentationDeck":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_uploadSystemIntakeGRBPresentationDeck(ctx, field)
			})
		case "deleteSystemIntakeGRBPresentationLinks":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteSystemIntakeGRBPresentationLinks(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "manuallyEndSystemIntakeGRBReviewAsyncVoting":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_manuallyEndSystemIntakeGRBReviewAsyncVoting(ctx, field)
			})
		case "archiveSystemIntake":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_archiveSystemIntake(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sendFeedbackEmail":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_sendFeedbackEmail(ctx, field)
			})
		case "sendCantFindSomethingEmail":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_sendCantFindSomethingEmail(ctx, field)
			})
		case "sendReportAProblemEmail":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_sendReportAProblemEmail(ctx, field)
			})
		case "createTRBRequest":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTRBRequest(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateTRBRequest":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTRBRequest(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createTRBRequestAttendee":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTRBRequestAttendee(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateTRBRequestAttendee":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTRBRequestAttendee(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteTRBRequestAttendee":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTRBRequestAttendee(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createTRBRequestDocument":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTRBRequestDocument(ctx, field)
			})
		case "deleteTRBRequestDocument":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTRBRequestDocument(ctx, field)
			})
		case "createSystemIntakeDocument":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSystemIntakeDocument(ctx, field)
			})
		case "deleteSystemIntakeDocument":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteSystemIntakeDocument(ctx, field)
			})
		case "updateTRBRequestForm":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTRBRequestForm(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateTRBRequestFundingSources":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTRBRequestFundingSources(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteTRBRequestFundingSources":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTRBRequestFundingSources(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "setRolesForUserOnSystem":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setRolesForUserOnSystem(ctx, field)
			})
		case "createTRBRequestFeedback":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTRBRequestFeedback(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateTRBRequestConsultMeetingTime":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTRBRequestConsultMeetingTime(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateTRBRequestTRBLead":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTRBRequestTRBLead(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "setTRBRequestRelationNewSystem":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setTRBRequestRelationNewSystem(ctx, field)
			})
		case "setTRBRequestRelationExistingSystem":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setTRBRequestRelationExistingSystem(ctx, field)
			})
		case "setTRBRequestRelationExistingService":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setTRBRequestRelationExistingService(ctx, field)
			})
		case "unlinkTRBRequestRelation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_unlinkTRBRequestRelation(ctx, field)
			})
		case "createTRBAdminNoteGeneralRequest":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTRBAdminNoteGeneralRequest(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createTRBAdminNoteInitialRequestForm":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTRBAdminNoteInitialRequestForm(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createTRBAdminNoteSupportingDocuments":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTRBAdminNoteSupportingDocuments(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createTRBAdminNoteConsultSession":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTRBAdminNoteConsultSession(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createTRBAdminNoteGuidanceLetter":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTRBAdminNoteGuidanceLetter(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "setTRBAdminNoteArchived":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setTRBAdminNoteArchived(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createTRBGuidanceLetter":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTRBGuidanceLetter(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateTRBGuidanceLetter":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTRBGuidanceLetter(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "requestReviewForTRBGuidanceLetter":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_requestReviewForTRBGuidanceLetter(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sendTRBGuidanceLetter":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_sendTRBGuidanceLetter(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createTRBGuidanceLetterInsight":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTRBGuidanceLetterInsight(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateTRBGuidanceLetterInsight":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTRBGuidanceLetterInsight(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateTRBGuidanceLetterInsightOrder":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTRBGuidanceLetterInsightOrder(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteTRBGuidanceLetterInsight":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTRBGuidanceLetterInsight(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "closeTRBRequest":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_closeTRBRequest(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "reopenTrbRequest":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_reopenTrbRequest(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createTrbLeadOption":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTrbLeadOption(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteTrbLeadOption":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTrbLeadOption(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sendGRBReviewPresentationDeckReminderEmail":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_sendGRBReviewPresentationDeckReminderEmail(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "systemIntake":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_systemIntake(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "systemIntakes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_systemIntakes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "mySystemIntakes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_mySystemIntakes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "systemIntakesWithReviewRequested":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_systemIntakesWithReviewRequested(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "systemIntakesWithLcids":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_systemIntakesWithLcids(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "compareGRBReviewersByIntakeID":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_compareGRBReviewersByIntakeID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "currentUser":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_currentUser(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "cedarAuthorityToOperate":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cedarAuthorityToOperate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "cedarBudget":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cedarBudget(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "cedarBudgetSystemCost":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cedarBudgetSystemCost(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "cedarPersonsByCommonName":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cedarPersonsByCommonName(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "cedarSoftwareProducts":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cedarSoftwareProducts(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "cedarSystem":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cedarSystem(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "cedarSystems":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cedarSystems(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "cedarSubSystems":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cedarSubSystems(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "cedarContractsBySystem":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cedarContractsBySystem(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "myCedarSystems":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_myCedarSystems(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "cedarSystemBookmarks":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cedarSystemBookmarks(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "cedarThreat":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cedarThreat(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "deployments":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deployments(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "roleTypes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_roleTypes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "roles":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_roles(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "exchanges":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_exchanges(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "urls":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_urls(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "cedarSystemDetails":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cedarSystemDetails(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "systemIntakeContacts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_systemIntakeContacts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "trbRequest":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_trbRequest(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "trbRequests":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_trbRequests(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "myTrbRequests":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_myTrbRequests(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "trbLeadOptions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_trbLeadOptions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "trbAdminNote":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_trbAdminNote(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "userAccount":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userAccount(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeImplementors = []string{"SystemIntake"}

func (ec *executionContext) _SystemIntake(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntake) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntake")
		case "actions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_actions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "adminLead":
			out.Values[i] = ec._SystemIntake_adminLead(ctx, field, obj)
		case "archivedAt":
			out.Values[i] = ec._SystemIntake_archivedAt(ctx, field, obj)
		case "businessCase":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_businessCase(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "businessNeed":
			out.Values[i] = ec._SystemIntake_businessNeed(ctx, field, obj)
		case "businessOwner":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_businessOwner(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "businessSolution":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_businessSolution(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "contract":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_contract(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "costs":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_costs(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "annualSpending":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_annualSpending(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			out.Values[i] = ec._SystemIntake_createdAt(ctx, field, obj)
		case "currentStage":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_currentStage(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "decisionNextSteps":
			out.Values[i] = ec._SystemIntake_decisionNextSteps(ctx, field, obj)
		case "eaCollaborator":
			out.Values[i] = ec._SystemIntake_eaCollaborator(ctx, field, obj)
		case "eaCollaboratorName":
			out.Values[i] = ec._SystemIntake_eaCollaboratorName(ctx, field, obj)
		case "euaUserId":
			out.Values[i] = ec._SystemIntake_euaUserId(ctx, field, obj)
		case "existingFunding":
			out.Values[i] = ec._SystemIntake_existingFunding(ctx, field, obj)
		case "fundingSources":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_fundingSources(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "governanceRequestFeedbacks":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_governanceRequestFeedbacks(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "governanceTeams":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_governanceTeams(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "grbDate":
			out.Values[i] = ec._SystemIntake_grbDate(ctx, field, obj)
		case "grtDate":
			out.Values[i] = ec._SystemIntake_grtDate(ctx, field, obj)
		case "lastMeetingDate":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_lastMeetingDate(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "nextMeetingDate":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_nextMeetingDate(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "grbReviewStartedAt":
			out.Values[i] = ec._SystemIntake_grbReviewStartedAt(ctx, field, obj)
		case "grbReviewers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_grbReviewers(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "grbVotingInformation":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_grbVotingInformation(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "id":
			out.Values[i] = ec._SystemIntake_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isso":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_isso(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "lcid":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_lcid(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "lcidIssuedAt":
			out.Values[i] = ec._SystemIntake_lcidIssuedAt(ctx, field, obj)
		case "lcidExpiresAt":
			out.Values[i] = ec._SystemIntake_lcidExpiresAt(ctx, field, obj)
		case "lcidScope":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_lcidScope(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "lcidCostBaseline":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_lcidCostBaseline(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "lcidRetiresAt":
			out.Values[i] = ec._SystemIntake_lcidRetiresAt(ctx, field, obj)
		case "needsEaSupport":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_needsEaSupport(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "usingSoftware":
			out.Values[i] = ec._SystemIntake_usingSoftware(ctx, field, obj)
		case "acquisitionMethods":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_acquisitionMethods(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "notes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_notes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "oitSecurityCollaborator":
			out.Values[i] = ec._SystemIntake_oitSecurityCollaborator(ctx, field, obj)
		case "oitSecurityCollaboratorName":
			out.Values[i] = ec._SystemIntake_oitSecurityCollaboratorName(ctx, field, obj)
		case "productManager":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_productManager(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "projectAcronym":
			out.Values[i] = ec._SystemIntake_projectAcronym(ctx, field, obj)
		case "rejectionReason":
			out.Values[i] = ec._SystemIntake_rejectionReason(ctx, field, obj)
		case "requestName":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_requestName(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "requestType":
			out.Values[i] = ec._SystemIntake_requestType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "requester":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_requester(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "requesterName":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_requesterName(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "requesterComponent":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_requesterComponent(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "state":
			out.Values[i] = ec._SystemIntake_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "step":
			out.Values[i] = ec._SystemIntake_step(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "submittedAt":
			out.Values[i] = ec._SystemIntake_submittedAt(ctx, field, obj)
		case "trbCollaborator":
			out.Values[i] = ec._SystemIntake_trbCollaborator(ctx, field, obj)
		case "trbCollaboratorName":
			out.Values[i] = ec._SystemIntake_trbCollaboratorName(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._SystemIntake_updatedAt(ctx, field, obj)
		case "grtReviewEmailBody":
			out.Values[i] = ec._SystemIntake_grtReviewEmailBody(ctx, field, obj)
		case "decidedAt":
			out.Values[i] = ec._SystemIntake_decidedAt(ctx, field, obj)
		case "businessCaseId":
			out.Values[i] = ec._SystemIntake_businessCaseId(ctx, field, obj)
		case "cedarSystemId":
			out.Values[i] = ec._SystemIntake_cedarSystemId(ctx, field, obj)
		case "documents":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_documents(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "hasUiChanges":
			out.Values[i] = ec._SystemIntake_hasUiChanges(ctx, field, obj)
		case "usesAiTech":
			out.Values[i] = ec._SystemIntake_usesAiTech(ctx, field, obj)
		case "itGovTaskStatuses":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_itGovTaskStatuses(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "requestFormState":
			out.Values[i] = ec._SystemIntake_requestFormState(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "draftBusinessCaseState":
			out.Values[i] = ec._SystemIntake_draftBusinessCaseState(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "grtMeetingState":
			out.Values[i] = ec._SystemIntake_grtMeetingState(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "finalBusinessCaseState":
			out.Values[i] = ec._SystemIntake_finalBusinessCaseState(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "grbMeetingState":
			out.Values[i] = ec._SystemIntake_grbMeetingState(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "decisionState":
			out.Values[i] = ec._SystemIntake_decisionState(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "statusRequester":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_statusRequester(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "statusAdmin":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_statusAdmin(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "lcidStatus":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_lcidStatus(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "trbFollowUpRecommendation":
			out.Values[i] = ec._SystemIntake_trbFollowUpRecommendation(ctx, field, obj)
		case "contractName":
			out.Values[i] = ec._SystemIntake_contractName(ctx, field, obj)
		case "relationType":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_relationType(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "systems":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_systems(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "contractNumbers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_contractNumbers(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "relatedIntakes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_relatedIntakes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "relatedTRBRequests":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_relatedTRBRequests(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "grbDiscussions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_grbDiscussions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "grbPresentationLinks":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_grbPresentationLinks(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "grbPresentationDeckRequesterReminderEmailSentTime":
			out.Values[i] = ec._SystemIntake_grbPresentationDeckRequesterReminderEmailSentTime(ctx, field, obj)
		case "grbReviewType":
			out.Values[i] = ec._SystemIntake_grbReviewType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "grbReviewAsyncRecordingTime":
			out.Values[i] = ec._SystemIntake_grbReviewAsyncRecordingTime(ctx, field, obj)
		case "grbReviewAsyncEndDate":
			out.Values[i] = ec._SystemIntake_grbReviewAsyncEndDate(ctx, field, obj)
		case "grbReviewAsyncGRBMeetingTime":
			out.Values[i] = ec._SystemIntake_grbReviewAsyncGRBMeetingTime(ctx, field, obj)
		case "grbReviewAsyncStatus":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntake_grbReviewAsyncStatus(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "grbReviewAsyncManualEndDate":
			out.Values[i] = ec._SystemIntake_grbReviewAsyncManualEndDate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeActionImplementors = []string{"SystemIntakeAction"}

func (ec *executionContext) _SystemIntakeAction(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeAction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeActionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeAction")
		case "id":
			out.Values[i] = ec._SystemIntakeAction_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "systemIntake":
			out.Values[i] = ec._SystemIntakeAction_systemIntake(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._SystemIntakeAction_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "actor":
			out.Values[i] = ec._SystemIntakeAction_actor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "step":
			out.Values[i] = ec._SystemIntakeAction_step(ctx, field, obj)
		case "feedback":
			out.Values[i] = ec._SystemIntakeAction_feedback(ctx, field, obj)
		case "lcidExpirationChange":
			out.Values[i] = ec._SystemIntakeAction_lcidExpirationChange(ctx, field, obj)
		case "previousRetirementDate":
			out.Values[i] = ec._SystemIntakeAction_previousRetirementDate(ctx, field, obj)
		case "newRetirementDate":
			out.Values[i] = ec._SystemIntakeAction_newRetirementDate(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._SystemIntakeAction_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeActionActorImplementors = []string{"SystemIntakeActionActor"}

func (ec *executionContext) _SystemIntakeActionActor(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeActionActor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeActionActorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeActionActor")
		case "name":
			out.Values[i] = ec._SystemIntakeActionActor_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._SystemIntakeActionActor_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeAnnualSpendingImplementors = []string{"SystemIntakeAnnualSpending"}

func (ec *executionContext) _SystemIntakeAnnualSpending(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeAnnualSpending) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeAnnualSpendingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeAnnualSpending")
		case "currentAnnualSpending":
			out.Values[i] = ec._SystemIntakeAnnualSpending_currentAnnualSpending(ctx, field, obj)
		case "currentAnnualSpendingITPortion":
			out.Values[i] = ec._SystemIntakeAnnualSpending_currentAnnualSpendingITPortion(ctx, field, obj)
		case "plannedYearOneSpending":
			out.Values[i] = ec._SystemIntakeAnnualSpending_plannedYearOneSpending(ctx, field, obj)
		case "plannedYearOneSpendingITPortion":
			out.Values[i] = ec._SystemIntakeAnnualSpending_plannedYearOneSpendingITPortion(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeBusinessOwnerImplementors = []string{"SystemIntakeBusinessOwner"}

func (ec *executionContext) _SystemIntakeBusinessOwner(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeBusinessOwner) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeBusinessOwnerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeBusinessOwner")
		case "component":
			out.Values[i] = ec._SystemIntakeBusinessOwner_component(ctx, field, obj)
		case "name":
			out.Values[i] = ec._SystemIntakeBusinessOwner_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeCollaboratorImplementors = []string{"SystemIntakeCollaborator"}

func (ec *executionContext) _SystemIntakeCollaborator(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeCollaborator) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeCollaboratorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeCollaborator")
		case "acronym":
			out.Values[i] = ec._SystemIntakeCollaborator_acronym(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "collaborator":
			out.Values[i] = ec._SystemIntakeCollaborator_collaborator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "key":
			out.Values[i] = ec._SystemIntakeCollaborator_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._SystemIntakeCollaborator_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._SystemIntakeCollaborator_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeContactImplementors = []string{"SystemIntakeContact"}

func (ec *executionContext) _SystemIntakeContact(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeContact) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeContactImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeContact")
		case "id":
			out.Values[i] = ec._SystemIntakeContact_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "euaUserId":
			out.Values[i] = ec._SystemIntakeContact_euaUserId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "systemIntakeId":
			out.Values[i] = ec._SystemIntakeContact_systemIntakeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "component":
			out.Values[i] = ec._SystemIntakeContact_component(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "role":
			out.Values[i] = ec._SystemIntakeContact_role(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeContactsPayloadImplementors = []string{"SystemIntakeContactsPayload"}

func (ec *executionContext) _SystemIntakeContactsPayload(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeContactsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeContactsPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeContactsPayload")
		case "systemIntakeContacts":
			out.Values[i] = ec._SystemIntakeContactsPayload_systemIntakeContacts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "invalidEUAIDs":
			out.Values[i] = ec._SystemIntakeContactsPayload_invalidEUAIDs(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeContractImplementors = []string{"SystemIntakeContract"}

func (ec *executionContext) _SystemIntakeContract(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeContract) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeContractImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeContract")
		case "contractor":
			out.Values[i] = ec._SystemIntakeContract_contractor(ctx, field, obj)
		case "endDate":
			out.Values[i] = ec._SystemIntakeContract_endDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasContract":
			out.Values[i] = ec._SystemIntakeContract_hasContract(ctx, field, obj)
		case "startDate":
			out.Values[i] = ec._SystemIntakeContract_startDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vehicle":
			out.Values[i] = ec._SystemIntakeContract_vehicle(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeContractNumberImplementors = []string{"SystemIntakeContractNumber"}

func (ec *executionContext) _SystemIntakeContractNumber(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeContractNumber) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeContractNumberImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeContractNumber")
		case "id":
			out.Values[i] = ec._SystemIntakeContractNumber_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "systemIntakeID":
			out.Values[i] = ec._SystemIntakeContractNumber_systemIntakeID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contractNumber":
			out.Values[i] = ec._SystemIntakeContractNumber_contractNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdBy":
			out.Values[i] = ec._SystemIntakeContractNumber_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._SystemIntakeContractNumber_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "modifiedBy":
			out.Values[i] = ec._SystemIntakeContractNumber_modifiedBy(ctx, field, obj)
		case "modifiedAt":
			out.Values[i] = ec._SystemIntakeContractNumber_modifiedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeCostsImplementors = []string{"SystemIntakeCosts"}

func (ec *executionContext) _SystemIntakeCosts(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeCosts) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeCostsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeCosts")
		case "expectedIncreaseAmount":
			out.Values[i] = ec._SystemIntakeCosts_expectedIncreaseAmount(ctx, field, obj)
		case "isExpectingIncrease":
			out.Values[i] = ec._SystemIntakeCosts_isExpectingIncrease(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeDocumentImplementors = []string{"SystemIntakeDocument"}

func (ec *executionContext) _SystemIntakeDocument(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeDocument) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeDocumentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeDocument")
		case "documentType":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntakeDocument_documentType(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "id":
			out.Values[i] = ec._SystemIntakeDocument_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "fileName":
			out.Values[i] = ec._SystemIntakeDocument_fileName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntakeDocument_status(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "version":
			out.Values[i] = ec._SystemIntakeDocument_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "uploadedAt":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntakeDocument_uploadedAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "url":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntakeDocument_url(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "canDelete":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntakeDocument_canDelete(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "canView":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntakeDocument_canView(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "systemIntakeId":
			out.Values[i] = ec._SystemIntakeDocument_systemIntakeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeDocumentTypeImplementors = []string{"SystemIntakeDocumentType"}

func (ec *executionContext) _SystemIntakeDocumentType(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeDocumentType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeDocumentTypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeDocumentType")
		case "commonType":
			out.Values[i] = ec._SystemIntakeDocumentType_commonType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "otherTypeDescription":
			out.Values[i] = ec._SystemIntakeDocumentType_otherTypeDescription(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeFundingSourceImplementors = []string{"SystemIntakeFundingSource"}

func (ec *executionContext) _SystemIntakeFundingSource(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeFundingSource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeFundingSourceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeFundingSource")
		case "id":
			out.Values[i] = ec._SystemIntakeFundingSource_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fundingNumber":
			out.Values[i] = ec._SystemIntakeFundingSource_fundingNumber(ctx, field, obj)
		case "source":
			out.Values[i] = ec._SystemIntakeFundingSource_source(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeGRBPresentationLinksImplementors = []string{"SystemIntakeGRBPresentationLinks"}

func (ec *executionContext) _SystemIntakeGRBPresentationLinks(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeGRBPresentationLinks) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeGRBPresentationLinksImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeGRBPresentationLinks")
		case "systemIntakeID":
			out.Values[i] = ec._SystemIntakeGRBPresentationLinks_systemIntakeID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdBy":
			out.Values[i] = ec._SystemIntakeGRBPresentationLinks_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._SystemIntakeGRBPresentationLinks_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "modifiedBy":
			out.Values[i] = ec._SystemIntakeGRBPresentationLinks_modifiedBy(ctx, field, obj)
		case "modifiedAt":
			out.Values[i] = ec._SystemIntakeGRBPresentationLinks_modifiedAt(ctx, field, obj)
		case "recordingLink":
			out.Values[i] = ec._SystemIntakeGRBPresentationLinks_recordingLink(ctx, field, obj)
		case "recordingPasscode":
			out.Values[i] = ec._SystemIntakeGRBPresentationLinks_recordingPasscode(ctx, field, obj)
		case "transcriptLink":
			out.Values[i] = ec._SystemIntakeGRBPresentationLinks_transcriptLink(ctx, field, obj)
		case "transcriptFileName":
			out.Values[i] = ec._SystemIntakeGRBPresentationLinks_transcriptFileName(ctx, field, obj)
		case "transcriptFileURL":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntakeGRBPresentationLinks_transcriptFileURL(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "transcriptFileStatus":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntakeGRBPresentationLinks_transcriptFileStatus(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "presentationDeckFileName":
			out.Values[i] = ec._SystemIntakeGRBPresentationLinks_presentationDeckFileName(ctx, field, obj)
		case "presentationDeckFileURL":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntakeGRBPresentationLinks_presentationDeckFileURL(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "presentationDeckFileStatus":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntakeGRBPresentationLinks_presentationDeckFileStatus(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeGRBReviewDiscussionImplementors = []string{"SystemIntakeGRBReviewDiscussion"}

func (ec *executionContext) _SystemIntakeGRBReviewDiscussion(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeGRBReviewDiscussion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeGRBReviewDiscussionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeGRBReviewDiscussion")
		case "initialPost":
			out.Values[i] = ec._SystemIntakeGRBReviewDiscussion_initialPost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "replies":
			out.Values[i] = ec._SystemIntakeGRBReviewDiscussion_replies(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeGRBReviewDiscussionPostImplementors = []string{"SystemIntakeGRBReviewDiscussionPost"}

func (ec *executionContext) _SystemIntakeGRBReviewDiscussionPost(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeGRBReviewDiscussionPost) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeGRBReviewDiscussionPostImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeGRBReviewDiscussionPost")
		case "id":
			out.Values[i] = ec._SystemIntakeGRBReviewDiscussionPost_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "content":
			out.Values[i] = ec._SystemIntakeGRBReviewDiscussionPost_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "votingRole":
			out.Values[i] = ec._SystemIntakeGRBReviewDiscussionPost_votingRole(ctx, field, obj)
		case "grbRole":
			out.Values[i] = ec._SystemIntakeGRBReviewDiscussionPost_grbRole(ctx, field, obj)
		case "systemIntakeID":
			out.Values[i] = ec._SystemIntakeGRBReviewDiscussionPost_systemIntakeID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdByUserAccount":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntakeGRBReviewDiscussionPost_createdByUserAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			out.Values[i] = ec._SystemIntakeGRBReviewDiscussionPost_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "modifiedByUserAccount":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntakeGRBReviewDiscussionPost_modifiedByUserAccount(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "modifiedAt":
			out.Values[i] = ec._SystemIntakeGRBReviewDiscussionPost_modifiedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeGRBReviewerImplementors = []string{"SystemIntakeGRBReviewer"}

func (ec *executionContext) _SystemIntakeGRBReviewer(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeGRBReviewer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeGRBReviewerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeGRBReviewer")
		case "id":
			out.Values[i] = ec._SystemIntakeGRBReviewer_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "userAccount":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntakeGRBReviewer_userAccount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "systemIntakeID":
			out.Values[i] = ec._SystemIntakeGRBReviewer_systemIntakeID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "votingRole":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntakeGRBReviewer_votingRole(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "vote":
			out.Values[i] = ec._SystemIntakeGRBReviewer_vote(ctx, field, obj)
		case "voteComment":
			out.Values[i] = ec._SystemIntakeGRBReviewer_voteComment(ctx, field, obj)
		case "dateVoted":
			out.Values[i] = ec._SystemIntakeGRBReviewer_dateVoted(ctx, field, obj)
		case "grbRole":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntakeGRBReviewer_grbRole(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdBy":
			out.Values[i] = ec._SystemIntakeGRBReviewer_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._SystemIntakeGRBReviewer_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "modifiedBy":
			out.Values[i] = ec._SystemIntakeGRBReviewer_modifiedBy(ctx, field, obj)
		case "modifiedAt":
			out.Values[i] = ec._SystemIntakeGRBReviewer_modifiedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeGovernanceTeamImplementors = []string{"SystemIntakeGovernanceTeam"}

func (ec *executionContext) _SystemIntakeGovernanceTeam(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeGovernanceTeam) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeGovernanceTeamImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeGovernanceTeam")
		case "isPresent":
			out.Values[i] = ec._SystemIntakeGovernanceTeam_isPresent(ctx, field, obj)
		case "teams":
			out.Values[i] = ec._SystemIntakeGovernanceTeam_teams(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeISSOImplementors = []string{"SystemIntakeISSO"}

func (ec *executionContext) _SystemIntakeISSO(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeIsso) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeISSOImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeISSO")
		case "isPresent":
			out.Values[i] = ec._SystemIntakeISSO_isPresent(ctx, field, obj)
		case "name":
			out.Values[i] = ec._SystemIntakeISSO_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeLCIDExpirationChangeImplementors = []string{"SystemIntakeLCIDExpirationChange"}

func (ec *executionContext) _SystemIntakeLCIDExpirationChange(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeLCIDExpirationChange) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeLCIDExpirationChangeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeLCIDExpirationChange")
		case "previousDate":
			out.Values[i] = ec._SystemIntakeLCIDExpirationChange_previousDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "newDate":
			out.Values[i] = ec._SystemIntakeLCIDExpirationChange_newDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "previousScope":
			out.Values[i] = ec._SystemIntakeLCIDExpirationChange_previousScope(ctx, field, obj)
		case "newScope":
			out.Values[i] = ec._SystemIntakeLCIDExpirationChange_newScope(ctx, field, obj)
		case "previousNextSteps":
			out.Values[i] = ec._SystemIntakeLCIDExpirationChange_previousNextSteps(ctx, field, obj)
		case "newNextSteps":
			out.Values[i] = ec._SystemIntakeLCIDExpirationChange_newNextSteps(ctx, field, obj)
		case "previousCostBaseline":
			out.Values[i] = ec._SystemIntakeLCIDExpirationChange_previousCostBaseline(ctx, field, obj)
		case "newCostBaseline":
			out.Values[i] = ec._SystemIntakeLCIDExpirationChange_newCostBaseline(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeNoteImplementors = []string{"SystemIntakeNote"}

func (ec *executionContext) _SystemIntakeNote(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeNote) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeNoteImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeNote")
		case "author":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntakeNote_author(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "content":
			out.Values[i] = ec._SystemIntakeNote_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._SystemIntakeNote_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "modifiedBy":
			out.Values[i] = ec._SystemIntakeNote_modifiedBy(ctx, field, obj)
		case "modifiedAt":
			out.Values[i] = ec._SystemIntakeNote_modifiedAt(ctx, field, obj)
		case "isArchived":
			out.Values[i] = ec._SystemIntakeNote_isArchived(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "editor":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SystemIntakeNote_editor(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "id":
			out.Values[i] = ec._SystemIntakeNote_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeNoteAuthorImplementors = []string{"SystemIntakeNoteAuthor"}

func (ec *executionContext) _SystemIntakeNoteAuthor(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeNoteAuthor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeNoteAuthorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeNoteAuthor")
		case "eua":
			out.Values[i] = ec._SystemIntakeNoteAuthor_eua(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._SystemIntakeNoteAuthor_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeProductManagerImplementors = []string{"SystemIntakeProductManager"}

func (ec *executionContext) _SystemIntakeProductManager(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeProductManager) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeProductManagerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeProductManager")
		case "component":
			out.Values[i] = ec._SystemIntakeProductManager_component(ctx, field, obj)
		case "name":
			out.Values[i] = ec._SystemIntakeProductManager_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var systemIntakeRequesterImplementors = []string{"SystemIntakeRequester"}

func (ec *executionContext) _SystemIntakeRequester(ctx context.Context, sel ast.SelectionSet, obj *models.SystemIntakeRequester) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, systemIntakeRequesterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SystemIntakeRequester")
		case "component":
			out.Values[i] = ec._SystemIntakeRequester_component(ctx, field, obj)
		case "email":
			out.Values[i] = ec._SystemIntakeRequester_email(ctx, field, obj)
		case "name":
			out.Values[i] = ec._SystemIntakeRequester_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tRBAdminNoteImplementors = []string{"TRBAdminNote"}

func (ec *executionContext) _TRBAdminNote(ctx context.Context, sel ast.SelectionSet, obj *models.TRBAdminNote) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tRBAdminNoteImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TRBAdminNote")
		case "id":
			out.Values[i] = ec._TRBAdminNote_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "trbRequestId":
			out.Values[i] = ec._TRBAdminNote_trbRequestId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "category":
			out.Values[i] = ec._TRBAdminNote_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "noteText":
			out.Values[i] = ec._TRBAdminNote_noteText(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "author":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBAdminNote_author(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "isArchived":
			out.Values[i] = ec._TRBAdminNote_isArchived(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "categorySpecificData":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBAdminNote_categorySpecificData(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdBy":
			out.Values[i] = ec._TRBAdminNote_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._TRBAdminNote_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "modifiedBy":
			out.Values[i] = ec._TRBAdminNote_modifiedBy(ctx, field, obj)
		case "modifiedAt":
			out.Values[i] = ec._TRBAdminNote_modifiedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tRBAdminNoteConsultSessionCategoryDataImplementors = []string{"TRBAdminNoteConsultSessionCategoryData", "TRBAdminNoteCategorySpecificData"}

func (ec *executionContext) _TRBAdminNoteConsultSessionCategoryData(ctx context.Context, sel ast.SelectionSet, obj *models.TRBAdminNoteConsultSessionCategoryData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tRBAdminNoteConsultSessionCategoryDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TRBAdminNoteConsultSessionCategoryData")
		case "placeholderField":
			out.Values[i] = ec._TRBAdminNoteConsultSessionCategoryData_placeholderField(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tRBAdminNoteGeneralRequestCategoryDataImplementors = []string{"TRBAdminNoteGeneralRequestCategoryData", "TRBAdminNoteCategorySpecificData"}

func (ec *executionContext) _TRBAdminNoteGeneralRequestCategoryData(ctx context.Context, sel ast.SelectionSet, obj *models.TRBAdminNoteGeneralRequestCategoryData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tRBAdminNoteGeneralRequestCategoryDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TRBAdminNoteGeneralRequestCategoryData")
		case "placeholderField":
			out.Values[i] = ec._TRBAdminNoteGeneralRequestCategoryData_placeholderField(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tRBAdminNoteGuidanceLetterCategoryDataImplementors = []string{"TRBAdminNoteGuidanceLetterCategoryData", "TRBAdminNoteCategorySpecificData"}

func (ec *executionContext) _TRBAdminNoteGuidanceLetterCategoryData(ctx context.Context, sel ast.SelectionSet, obj *models.TRBAdminNoteGuidanceLetterCategoryData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tRBAdminNoteGuidanceLetterCategoryDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TRBAdminNoteGuidanceLetterCategoryData")
		case "appliesToMeetingSummary":
			out.Values[i] = ec._TRBAdminNoteGuidanceLetterCategoryData_appliesToMeetingSummary(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "appliesToNextSteps":
			out.Values[i] = ec._TRBAdminNoteGuidanceLetterCategoryData_appliesToNextSteps(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "insights":
			out.Values[i] = ec._TRBAdminNoteGuidanceLetterCategoryData_insights(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tRBAdminNoteInitialRequestFormCategoryDataImplementors = []string{"TRBAdminNoteInitialRequestFormCategoryData", "TRBAdminNoteCategorySpecificData"}

func (ec *executionContext) _TRBAdminNoteInitialRequestFormCategoryData(ctx context.Context, sel ast.SelectionSet, obj *models.TRBAdminNoteInitialRequestFormCategoryData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tRBAdminNoteInitialRequestFormCategoryDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TRBAdminNoteInitialRequestFormCategoryData")
		case "appliesToBasicRequestDetails":
			out.Values[i] = ec._TRBAdminNoteInitialRequestFormCategoryData_appliesToBasicRequestDetails(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "appliesToSubjectAreas":
			out.Values[i] = ec._TRBAdminNoteInitialRequestFormCategoryData_appliesToSubjectAreas(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "appliesToAttendees":
			out.Values[i] = ec._TRBAdminNoteInitialRequestFormCategoryData_appliesToAttendees(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tRBAdminNoteSupportingDocumentsCategoryDataImplementors = []string{"TRBAdminNoteSupportingDocumentsCategoryData", "TRBAdminNoteCategorySpecificData"}

func (ec *executionContext) _TRBAdminNoteSupportingDocumentsCategoryData(ctx context.Context, sel ast.SelectionSet, obj *models.TRBAdminNoteSupportingDocumentsCategoryData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tRBAdminNoteSupportingDocumentsCategoryDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TRBAdminNoteSupportingDocumentsCategoryData")
		case "documents":
			out.Values[i] = ec._TRBAdminNoteSupportingDocumentsCategoryData_documents(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tRBFundingSourceImplementors = []string{"TRBFundingSource"}

func (ec *executionContext) _TRBFundingSource(ctx context.Context, sel ast.SelectionSet, obj *models.TRBFundingSource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tRBFundingSourceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TRBFundingSource")
		case "id":
			out.Values[i] = ec._TRBFundingSource_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "trbRequestId":
			out.Values[i] = ec._TRBFundingSource_trbRequestId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fundingNumber":
			out.Values[i] = ec._TRBFundingSource_fundingNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "source":
			out.Values[i] = ec._TRBFundingSource_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdBy":
			out.Values[i] = ec._TRBFundingSource_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._TRBFundingSource_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "modifiedBy":
			out.Values[i] = ec._TRBFundingSource_modifiedBy(ctx, field, obj)
		case "modifiedAt":
			out.Values[i] = ec._TRBFundingSource_modifiedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tRBGuidanceLetterImplementors = []string{"TRBGuidanceLetter"}

func (ec *executionContext) _TRBGuidanceLetter(ctx context.Context, sel ast.SelectionSet, obj *models.TRBGuidanceLetter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tRBGuidanceLetterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TRBGuidanceLetter")
		case "id":
			out.Values[i] = ec._TRBGuidanceLetter_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "trbRequestId":
			out.Values[i] = ec._TRBGuidanceLetter_trbRequestId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "author":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBGuidanceLetter_author(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "meetingSummary":
			out.Values[i] = ec._TRBGuidanceLetter_meetingSummary(ctx, field, obj)
		case "nextSteps":
			out.Values[i] = ec._TRBGuidanceLetter_nextSteps(ctx, field, obj)
		case "isFollowupRecommended":
			out.Values[i] = ec._TRBGuidanceLetter_isFollowupRecommended(ctx, field, obj)
		case "dateSent":
			out.Values[i] = ec._TRBGuidanceLetter_dateSent(ctx, field, obj)
		case "followupPoint":
			out.Values[i] = ec._TRBGuidanceLetter_followupPoint(ctx, field, obj)
		case "insights":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBGuidanceLetter_insights(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdBy":
			out.Values[i] = ec._TRBGuidanceLetter_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._TRBGuidanceLetter_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "modifiedBy":
			out.Values[i] = ec._TRBGuidanceLetter_modifiedBy(ctx, field, obj)
		case "modifiedAt":
			out.Values[i] = ec._TRBGuidanceLetter_modifiedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tRBGuidanceLetterInsightImplementors = []string{"TRBGuidanceLetterInsight"}

func (ec *executionContext) _TRBGuidanceLetterInsight(ctx context.Context, sel ast.SelectionSet, obj *models.TRBGuidanceLetterInsight) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tRBGuidanceLetterInsightImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TRBGuidanceLetterInsight")
		case "id":
			out.Values[i] = ec._TRBGuidanceLetterInsight_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "trbRequestId":
			out.Values[i] = ec._TRBGuidanceLetterInsight_trbRequestId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._TRBGuidanceLetterInsight_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "insight":
			out.Values[i] = ec._TRBGuidanceLetterInsight_insight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "links":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBGuidanceLetterInsight_links(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "author":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBGuidanceLetterInsight_author(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdBy":
			out.Values[i] = ec._TRBGuidanceLetterInsight_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._TRBGuidanceLetterInsight_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "modifiedBy":
			out.Values[i] = ec._TRBGuidanceLetterInsight_modifiedBy(ctx, field, obj)
		case "modifiedAt":
			out.Values[i] = ec._TRBGuidanceLetterInsight_modifiedAt(ctx, field, obj)
		case "deletedAt":
			out.Values[i] = ec._TRBGuidanceLetterInsight_deletedAt(ctx, field, obj)
		case "category":
			out.Values[i] = ec._TRBGuidanceLetterInsight_category(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tRBRequestImplementors = []string{"TRBRequest"}

func (ec *executionContext) _TRBRequest(ctx context.Context, sel ast.SelectionSet, obj *models.TRBRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tRBRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TRBRequest")
		case "id":
			out.Values[i] = ec._TRBRequest_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._TRBRequest_name(ctx, field, obj)
		case "archived":
			out.Values[i] = ec._TRBRequest_archived(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			out.Values[i] = ec._TRBRequest_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "state":
			out.Values[i] = ec._TRBRequest_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequest_status(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "attendees":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequest_attendees(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "feedback":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequest_feedback(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "documents":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequest_documents(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "form":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequest_form(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "guidanceLetter":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequest_guidanceLetter(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "taskStatuses":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequest_taskStatuses(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "consultMeetingTime":
			out.Values[i] = ec._TRBRequest_consultMeetingTime(ctx, field, obj)
		case "lastMeetingDate":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequest_lastMeetingDate(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "nextMeetingDate":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequest_nextMeetingDate(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "trbLead":
			out.Values[i] = ec._TRBRequest_trbLead(ctx, field, obj)
		case "trbLeadInfo":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequest_trbLeadInfo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "requesterInfo":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequest_requesterInfo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "requesterComponent":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequest_requesterComponent(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "adminNotes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequest_adminNotes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "isRecent":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequest_isRecent(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdBy":
			out.Values[i] = ec._TRBRequest_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._TRBRequest_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "modifiedBy":
			out.Values[i] = ec._TRBRequest_modifiedBy(ctx, field, obj)
		case "modifiedAt":
			out.Values[i] = ec._TRBRequest_modifiedAt(ctx, field, obj)
		case "contractName":
			out.Values[i] = ec._TRBRequest_contractName(ctx, field, obj)
		case "relationType":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequest_relationType(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "contractNumbers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequest_contractNumbers(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "systems":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequest_systems(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "relatedIntakes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequest_relatedIntakes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "relatedTRBRequests":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequest_relatedTRBRequests(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tRBRequestAttendeeImplementors = []string{"TRBRequestAttendee"}

func (ec *executionContext) _TRBRequestAttendee(ctx context.Context, sel ast.SelectionSet, obj *models.TRBRequestAttendee) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tRBRequestAttendeeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TRBRequestAttendee")
		case "id":
			out.Values[i] = ec._TRBRequestAttendee_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "euaUserId":
			out.Values[i] = ec._TRBRequestAttendee_euaUserId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "userInfo":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequestAttendee_userInfo(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "trbRequestId":
			out.Values[i] = ec._TRBRequestAttendee_trbRequestId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "component":
			out.Values[i] = ec._TRBRequestAttendee_component(ctx, field, obj)
		case "role":
			out.Values[i] = ec._TRBRequestAttendee_role(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._TRBRequestAttendee_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._TRBRequestAttendee_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "modifiedBy":
			out.Values[i] = ec._TRBRequestAttendee_modifiedBy(ctx, field, obj)
		case "modifiedAt":
			out.Values[i] = ec._TRBRequestAttendee_modifiedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tRBRequestContractNumberImplementors = []string{"TRBRequestContractNumber"}

func (ec *executionContext) _TRBRequestContractNumber(ctx context.Context, sel ast.SelectionSet, obj *models.TRBRequestContractNumber) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tRBRequestContractNumberImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TRBRequestContractNumber")
		case "id":
			out.Values[i] = ec._TRBRequestContractNumber_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "trbRequestID":
			out.Values[i] = ec._TRBRequestContractNumber_trbRequestID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contractNumber":
			out.Values[i] = ec._TRBRequestContractNumber_contractNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdBy":
			out.Values[i] = ec._TRBRequestContractNumber_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._TRBRequestContractNumber_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "modifiedBy":
			out.Values[i] = ec._TRBRequestContractNumber_modifiedBy(ctx, field, obj)
		case "modifiedAt":
			out.Values[i] = ec._TRBRequestContractNumber_modifiedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tRBRequestDocumentImplementors = []string{"TRBRequestDocument"}

func (ec *executionContext) _TRBRequestDocument(ctx context.Context, sel ast.SelectionSet, obj *models.TRBRequestDocument) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tRBRequestDocumentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TRBRequestDocument")
		case "documentType":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequestDocument_documentType(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "id":
			out.Values[i] = ec._TRBRequestDocument_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "fileName":
			out.Values[i] = ec._TRBRequestDocument_fileName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequestDocument_status(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "uploadedAt":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequestDocument_uploadedAt(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "url":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequestDocument_url(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "deletedAt":
			out.Values[i] = ec._TRBRequestDocument_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tRBRequestDocumentTypeImplementors = []string{"TRBRequestDocumentType"}

func (ec *executionContext) _TRBRequestDocumentType(ctx context.Context, sel ast.SelectionSet, obj *models.TRBRequestDocumentType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tRBRequestDocumentTypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TRBRequestDocumentType")
		case "commonType":
			out.Values[i] = ec._TRBRequestDocumentType_commonType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "otherTypeDescription":
			out.Values[i] = ec._TRBRequestDocumentType_otherTypeDescription(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tRBRequestFeedbackImplementors = []string{"TRBRequestFeedback"}

func (ec *executionContext) _TRBRequestFeedback(ctx context.Context, sel ast.SelectionSet, obj *models.TRBRequestFeedback) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tRBRequestFeedbackImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TRBRequestFeedback")
		case "id":
			out.Values[i] = ec._TRBRequestFeedback_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "trbRequestId":
			out.Values[i] = ec._TRBRequestFeedback_trbRequestId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "feedbackMessage":
			out.Values[i] = ec._TRBRequestFeedback_feedbackMessage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "copyTrbMailbox":
			out.Values[i] = ec._TRBRequestFeedback_copyTrbMailbox(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "notifyEuaIds":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequestFeedback_notifyEuaIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "action":
			out.Values[i] = ec._TRBRequestFeedback_action(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "author":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequestFeedback_author(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdBy":
			out.Values[i] = ec._TRBRequestFeedback_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._TRBRequestFeedback_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "modifiedBy":
			out.Values[i] = ec._TRBRequestFeedback_modifiedBy(ctx, field, obj)
		case "modifiedAt":
			out.Values[i] = ec._TRBRequestFeedback_modifiedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tRBRequestFormImplementors = []string{"TRBRequestForm"}

func (ec *executionContext) _TRBRequestForm(ctx context.Context, sel ast.SelectionSet, obj *models.TRBRequestForm) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tRBRequestFormImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TRBRequestForm")
		case "id":
			out.Values[i] = ec._TRBRequestForm_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "trbRequestId":
			out.Values[i] = ec._TRBRequestForm_trbRequestId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._TRBRequestForm_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "component":
			out.Values[i] = ec._TRBRequestForm_component(ctx, field, obj)
		case "needsAssistanceWith":
			out.Values[i] = ec._TRBRequestForm_needsAssistanceWith(ctx, field, obj)
		case "hasSolutionInMind":
			out.Values[i] = ec._TRBRequestForm_hasSolutionInMind(ctx, field, obj)
		case "proposedSolution":
			out.Values[i] = ec._TRBRequestForm_proposedSolution(ctx, field, obj)
		case "whereInProcess":
			out.Values[i] = ec._TRBRequestForm_whereInProcess(ctx, field, obj)
		case "whereInProcessOther":
			out.Values[i] = ec._TRBRequestForm_whereInProcessOther(ctx, field, obj)
		case "hasExpectedStartEndDates":
			out.Values[i] = ec._TRBRequestForm_hasExpectedStartEndDates(ctx, field, obj)
		case "expectedStartDate":
			out.Values[i] = ec._TRBRequestForm_expectedStartDate(ctx, field, obj)
		case "expectedEndDate":
			out.Values[i] = ec._TRBRequestForm_expectedEndDate(ctx, field, obj)
		case "collabGroups":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequestForm_collabGroups(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "collabDateSecurity":
			out.Values[i] = ec._TRBRequestForm_collabDateSecurity(ctx, field, obj)
		case "collabDateEnterpriseArchitecture":
			out.Values[i] = ec._TRBRequestForm_collabDateEnterpriseArchitecture(ctx, field, obj)
		case "collabDateCloud":
			out.Values[i] = ec._TRBRequestForm_collabDateCloud(ctx, field, obj)
		case "collabDatePrivacyAdvisor":
			out.Values[i] = ec._TRBRequestForm_collabDatePrivacyAdvisor(ctx, field, obj)
		case "collabDateGovernanceReviewBoard":
			out.Values[i] = ec._TRBRequestForm_collabDateGovernanceReviewBoard(ctx, field, obj)
		case "collabDateOther":
			out.Values[i] = ec._TRBRequestForm_collabDateOther(ctx, field, obj)
		case "collabGroupOther":
			out.Values[i] = ec._TRBRequestForm_collabGroupOther(ctx, field, obj)
		case "collabGRBConsultRequested":
			out.Values[i] = ec._TRBRequestForm_collabGRBConsultRequested(ctx, field, obj)
		case "fundingSources":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequestForm_fundingSources(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "systemIntakes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequestForm_systemIntakes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "subjectAreaOptions":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TRBRequestForm_subjectAreaOptions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "subjectAreaOptionOther":
			out.Values[i] = ec._TRBRequestForm_subjectAreaOptionOther(ctx, field, obj)
		case "submittedAt":
			out.Values[i] = ec._TRBRequestForm_submittedAt(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._TRBRequestForm_createdBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._TRBRequestForm_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "modifiedBy":
			out.Values[i] = ec._TRBRequestForm_modifiedBy(ctx, field, obj)
		case "modifiedAt":
			out.Values[i] = ec._TRBRequestForm_modifiedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tRBTaskStatusesImplementors = []string{"TRBTaskStatuses"}

func (ec *executionContext) _TRBTaskStatuses(ctx context.Context, sel ast.SelectionSet, obj *models.TRBTaskStatuses) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tRBTaskStatusesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TRBTaskStatuses")
		case "formStatus":
			out.Values[i] = ec._TRBTaskStatuses_formStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "feedbackStatus":
			out.Values[i] = ec._TRBTaskStatuses_feedbackStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "consultPrepStatus":
			out.Values[i] = ec._TRBTaskStatuses_consultPrepStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "attendConsultStatus":
			out.Values[i] = ec._TRBTaskStatuses_attendConsultStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "guidanceLetterStatus":
			out.Values[i] = ec._TRBTaskStatuses_guidanceLetterStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "guidanceLetterStatusTaskList":
			out.Values[i] = ec._TRBTaskStatuses_guidanceLetterStatusTaskList(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateSystemIntakePayloadImplementors = []string{"UpdateSystemIntakePayload"}

func (ec *executionContext) _UpdateSystemIntakePayload(ctx context.Context, sel ast.SelectionSet, obj *models.UpdateSystemIntakePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateSystemIntakePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateSystemIntakePayload")
		case "systemIntake":
			out.Values[i] = ec._UpdateSystemIntakePayload_systemIntake(ctx, field, obj)
		case "userErrors":
			out.Values[i] = ec._UpdateSystemIntakePayload_userErrors(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userAccountImplementors = []string{"UserAccount"}

func (ec *executionContext) _UserAccount(ctx context.Context, sel ast.SelectionSet, obj *authentication.UserAccount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userAccountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserAccount")
		case "id":
			out.Values[i] = ec._UserAccount_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "username":
			out.Values[i] = ec._UserAccount_username(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "commonName":
			out.Values[i] = ec._UserAccount_commonName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locale":
			out.Values[i] = ec._UserAccount_locale(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._UserAccount_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "givenName":
			out.Values[i] = ec._UserAccount_givenName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "familyName":
			out.Values[i] = ec._UserAccount_familyName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zoneInfo":
			out.Values[i] = ec._UserAccount_zoneInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasLoggedIn":
			out.Values[i] = ec._UserAccount_hasLoggedIn(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userErrorImplementors = []string{"UserError"}

func (ec *executionContext) _UserError(ctx context.Context, sel ast.SelectionSet, obj *models.UserError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserError")
		case "message":
			out.Values[i] = ec._UserError_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "path":
			out.Values[i] = ec._UserError_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userInfoImplementors = []string{"UserInfo"}

func (ec *executionContext) _UserInfo(ctx context.Context, sel ast.SelectionSet, obj *models.UserInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserInfo")
		case "firstName":
			out.Values[i] = ec._UserInfo_firstName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastName":
			out.Values[i] = ec._UserInfo_lastName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "commonName":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserInfo_commonName(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "email":
			out.Values[i] = ec._UserInfo_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "euaUserId":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._UserInfo_euaUserId(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___InputValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___InputValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "isOneOf":
			out.Values[i] = ec.___Type_isOneOf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAugmentedSystemIntakeContact2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐAugmentedSystemIntakeContactᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.AugmentedSystemIntakeContact) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAugmentedSystemIntakeContact2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐAugmentedSystemIntakeContact(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAugmentedSystemIntakeContact2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐAugmentedSystemIntakeContact(ctx context.Context, sel ast.SelectionSet, v *models.AugmentedSystemIntakeContact) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AugmentedSystemIntakeContact(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBusinessCaseStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐBusinessCaseStatus(ctx context.Context, v any) (models.BusinessCaseStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.BusinessCaseStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBusinessCaseStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐBusinessCaseStatus(ctx context.Context, sel ast.SelectionSet, v models.BusinessCaseStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCastSystemIntakeGRBReviewerVoteInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCastSystemIntakeGRBReviewerVoteInput(ctx context.Context, v any) (models.CastSystemIntakeGRBReviewerVoteInput, error) {
	res, err := ec.unmarshalInputCastSystemIntakeGRBReviewerVoteInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCedarAuthorityToOperate2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarAuthorityToOperateᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CedarAuthorityToOperate) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCedarAuthorityToOperate2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarAuthorityToOperate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCedarAuthorityToOperate2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarAuthorityToOperate(ctx context.Context, sel ast.SelectionSet, v *models.CedarAuthorityToOperate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CedarAuthorityToOperate(ctx, sel, v)
}

func (ec *executionContext) marshalNCedarBudget2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarBudget(ctx context.Context, sel ast.SelectionSet, v *models.CedarBudget) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CedarBudget(ctx, sel, v)
}

func (ec *executionContext) marshalNCedarBudgetActualCost2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarBudgetActualCostᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CedarBudgetActualCost) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCedarBudgetActualCost2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarBudgetActualCost(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCedarBudgetActualCost2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarBudgetActualCost(ctx context.Context, sel ast.SelectionSet, v *models.CedarBudgetActualCost) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CedarBudgetActualCost(ctx, sel, v)
}

func (ec *executionContext) marshalNCedarBusinessOwnerInformation2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarBusinessOwnerInformation(ctx context.Context, sel ast.SelectionSet, v models.CedarBusinessOwnerInformation) graphql.Marshaler {
	return ec._CedarBusinessOwnerInformation(ctx, sel, &v)
}

func (ec *executionContext) marshalNCedarBusinessOwnerInformation2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarBusinessOwnerInformation(ctx context.Context, sel ast.SelectionSet, v *models.CedarBusinessOwnerInformation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CedarBusinessOwnerInformation(ctx, sel, v)
}

func (ec *executionContext) marshalNCedarContract2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarContractᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CedarContract) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCedarContract2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarContract(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCedarContract2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarContract(ctx context.Context, sel ast.SelectionSet, v *models.CedarContract) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CedarContract(ctx, sel, v)
}

func (ec *executionContext) marshalNCedarDeployment2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarDeploymentᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CedarDeployment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCedarDeployment2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarDeployment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCedarDeployment2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarDeployment(ctx context.Context, sel ast.SelectionSet, v *models.CedarDeployment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CedarDeployment(ctx, sel, v)
}

func (ec *executionContext) marshalNCedarExchange2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarExchangeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CedarExchange) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCedarExchange2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarExchange(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCedarExchange2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarExchange(ctx context.Context, sel ast.SelectionSet, v *models.CedarExchange) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CedarExchange(ctx, sel, v)
}

func (ec *executionContext) marshalNCedarExchangeTypeOfDataItem2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarExchangeTypeOfDataItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CedarExchangeTypeOfDataItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCedarExchangeTypeOfDataItem2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarExchangeTypeOfDataItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCedarExchangeTypeOfDataItem2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarExchangeTypeOfDataItem(ctx context.Context, sel ast.SelectionSet, v *models.CedarExchangeTypeOfDataItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CedarExchangeTypeOfDataItem(ctx, sel, v)
}

func (ec *executionContext) marshalNCedarRole2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CedarRole) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCedarRole2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCedarRole2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarRole(ctx context.Context, sel ast.SelectionSet, v *models.CedarRole) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CedarRole(ctx, sel, v)
}

func (ec *executionContext) marshalNCedarRoleType2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarRoleTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CedarRoleType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCedarRoleType2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarRoleType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCedarRoleType2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarRoleType(ctx context.Context, sel ast.SelectionSet, v *models.CedarRoleType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CedarRoleType(ctx, sel, v)
}

func (ec *executionContext) marshalNCedarSoftwareProductItem2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSoftwareProductItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CedarSoftwareProductItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCedarSoftwareProductItem2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSoftwareProductItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCedarSoftwareProductItem2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSoftwareProductItem(ctx context.Context, sel ast.SelectionSet, v *models.CedarSoftwareProductItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CedarSoftwareProductItem(ctx, sel, v)
}

func (ec *executionContext) marshalNCedarSubSystem2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSubSystemᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CedarSubSystem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCedarSubSystem2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSubSystem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCedarSubSystem2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSubSystem(ctx context.Context, sel ast.SelectionSet, v *models.CedarSubSystem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CedarSubSystem(ctx, sel, v)
}

func (ec *executionContext) marshalNCedarSystem2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSystemᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CedarSystem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCedarSystem2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSystem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCedarSystem2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSystem(ctx context.Context, sel ast.SelectionSet, v *models.CedarSystem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CedarSystem(ctx, sel, v)
}

func (ec *executionContext) marshalNCedarSystemBookmark2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSystemBookmarkᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CedarSystemBookmark) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCedarSystemBookmark2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSystemBookmark(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCedarSystemBookmark2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSystemBookmark(ctx context.Context, sel ast.SelectionSet, v *models.CedarSystemBookmark) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CedarSystemBookmark(ctx, sel, v)
}

func (ec *executionContext) marshalNCedarSystemMaintainerInformation2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSystemMaintainerInformation(ctx context.Context, sel ast.SelectionSet, v models.CedarSystemMaintainerInformation) graphql.Marshaler {
	return ec._CedarSystemMaintainerInformation(ctx, sel, &v)
}

func (ec *executionContext) marshalNCedarSystemMaintainerInformation2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSystemMaintainerInformation(ctx context.Context, sel ast.SelectionSet, v *models.CedarSystemMaintainerInformation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CedarSystemMaintainerInformation(ctx, sel, v)
}

func (ec *executionContext) marshalNCedarThreat2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarThreatᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CedarThreat) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCedarThreat2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarThreat(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCedarThreat2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarThreat(ctx context.Context, sel ast.SelectionSet, v *models.CedarThreat) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CedarThreat(ctx, sel, v)
}

func (ec *executionContext) marshalNCedarURL2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarURLᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CedarURL) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCedarURL2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarURL(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCedarURL2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarURL(ctx context.Context, sel ast.SelectionSet, v *models.CedarURL) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CedarURL(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCloseTRBRequestInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCloseTRBRequestInput(ctx context.Context, v any) (models.CloseTRBRequestInput, error) {
	res, err := ec.unmarshalInputCloseTRBRequestInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContractDate2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐContractDate(ctx context.Context, sel ast.SelectionSet, v *models.ContractDate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ContractDate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateCedarSystemBookmarkInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateCedarSystemBookmarkInput(ctx context.Context, v any) (models.CreateCedarSystemBookmarkInput, error) {
	res, err := ec.unmarshalInputCreateCedarSystemBookmarkInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateGRBReviewerInput2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateGRBReviewerInputᚄ(ctx context.Context, v any) ([]*models.CreateGRBReviewerInput, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*models.CreateGRBReviewerInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCreateGRBReviewerInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateGRBReviewerInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCreateGRBReviewerInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateGRBReviewerInput(ctx context.Context, v any) (*models.CreateGRBReviewerInput, error) {
	res, err := ec.unmarshalInputCreateGRBReviewerInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateSystemIntakeContactInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateSystemIntakeContactInput(ctx context.Context, v any) (models.CreateSystemIntakeContactInput, error) {
	res, err := ec.unmarshalInputCreateSystemIntakeContactInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateSystemIntakeDocumentInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateSystemIntakeDocumentInput(ctx context.Context, v any) (models.CreateSystemIntakeDocumentInput, error) {
	res, err := ec.unmarshalInputCreateSystemIntakeDocumentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateSystemIntakeGRBReviewersInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateSystemIntakeGRBReviewersInput(ctx context.Context, v any) (models.CreateSystemIntakeGRBReviewersInput, error) {
	res, err := ec.unmarshalInputCreateSystemIntakeGRBReviewersInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateSystemIntakeInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateSystemIntakeInput(ctx context.Context, v any) (models.CreateSystemIntakeInput, error) {
	res, err := ec.unmarshalInputCreateSystemIntakeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateSystemIntakeNoteInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateSystemIntakeNoteInput(ctx context.Context, v any) (models.CreateSystemIntakeNoteInput, error) {
	res, err := ec.unmarshalInputCreateSystemIntakeNoteInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTRBAdminNoteConsultSessionInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateTRBAdminNoteConsultSessionInput(ctx context.Context, v any) (models.CreateTRBAdminNoteConsultSessionInput, error) {
	res, err := ec.unmarshalInputCreateTRBAdminNoteConsultSessionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTRBAdminNoteGeneralRequestInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateTRBAdminNoteGeneralRequestInput(ctx context.Context, v any) (models.CreateTRBAdminNoteGeneralRequestInput, error) {
	res, err := ec.unmarshalInputCreateTRBAdminNoteGeneralRequestInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTRBAdminNoteGuidanceLetterInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateTRBAdminNoteGuidanceLetterInput(ctx context.Context, v any) (models.CreateTRBAdminNoteGuidanceLetterInput, error) {
	res, err := ec.unmarshalInputCreateTRBAdminNoteGuidanceLetterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTRBAdminNoteInitialRequestFormInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateTRBAdminNoteInitialRequestFormInput(ctx context.Context, v any) (models.CreateTRBAdminNoteInitialRequestFormInput, error) {
	res, err := ec.unmarshalInputCreateTRBAdminNoteInitialRequestFormInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTRBAdminNoteSupportingDocumentsInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateTRBAdminNoteSupportingDocumentsInput(ctx context.Context, v any) (models.CreateTRBAdminNoteSupportingDocumentsInput, error) {
	res, err := ec.unmarshalInputCreateTRBAdminNoteSupportingDocumentsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTRBGuidanceLetterInsightInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateTRBGuidanceLetterInsightInput(ctx context.Context, v any) (models.CreateTRBGuidanceLetterInsightInput, error) {
	res, err := ec.unmarshalInputCreateTRBGuidanceLetterInsightInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTRBRequestAttendeeInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateTRBRequestAttendeeInput(ctx context.Context, v any) (models.CreateTRBRequestAttendeeInput, error) {
	res, err := ec.unmarshalInputCreateTRBRequestAttendeeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTRBRequestDocumentInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateTRBRequestDocumentInput(ctx context.Context, v any) (models.CreateTRBRequestDocumentInput, error) {
	res, err := ec.unmarshalInputCreateTRBRequestDocumentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTRBRequestFeedbackInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateTRBRequestFeedbackInput(ctx context.Context, v any) (models.CreateTRBRequestFeedbackInput, error) {
	res, err := ec.unmarshalInputCreateTRBRequestFeedbackInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeleteSystemIntakeContactInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐDeleteSystemIntakeContactInput(ctx context.Context, v any) (models.DeleteSystemIntakeContactInput, error) {
	res, err := ec.unmarshalInputDeleteSystemIntakeContactInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeleteSystemIntakeGRBPresentationLinksInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐDeleteSystemIntakeGRBPresentationLinksInput(ctx context.Context, v any) (models.DeleteSystemIntakeGRBPresentationLinksInput, error) {
	res, err := ec.unmarshalInputDeleteSystemIntakeGRBPresentationLinksInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeleteSystemIntakeGRBReviewerInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐDeleteSystemIntakeGRBReviewerInput(ctx context.Context, v any) (models.DeleteSystemIntakeGRBReviewerInput, error) {
	res, err := ec.unmarshalInputDeleteSystemIntakeGRBReviewerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeleteTRBRequestFundingSourcesInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐDeleteTRBRequestFundingSourcesInput(ctx context.Context, v any) (models.DeleteTRBRequestFundingSourcesInput, error) {
	res, err := ec.unmarshalInputDeleteTRBRequestFundingSourcesInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEmailAddress2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailAddress(ctx context.Context, v any) (models.EmailAddress, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.EmailAddress(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEmailAddress2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailAddress(ctx context.Context, sel ast.SelectionSet, v models.EmailAddress) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNEmailAddress2ᚕgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailAddressᚄ(ctx context.Context, v any) ([]models.EmailAddress, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]models.EmailAddress, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEmailAddress2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailAddress(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNEmailAddress2ᚕgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailAddressᚄ(ctx context.Context, sel ast.SelectionSet, v []models.EmailAddress) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNEmailAddress2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailAddress(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEstimatedLifecycleCost2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEstimatedLifecycleCost(ctx context.Context, sel ast.SelectionSet, v *models.EstimatedLifecycleCost) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EstimatedLifecycleCost(ctx, sel, v)
}

func (ec *executionContext) marshalNGRBReviewerComparison2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGRBReviewerComparisonᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.GRBReviewerComparison) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGRBReviewerComparison2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGRBReviewerComparison(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGRBReviewerComparison2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGRBReviewerComparison(ctx context.Context, sel ast.SelectionSet, v *models.GRBReviewerComparison) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GRBReviewerComparison(ctx, sel, v)
}

func (ec *executionContext) marshalNGRBReviewerComparisonIntake2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGRBReviewerComparisonIntakeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.GRBReviewerComparisonIntake) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGRBReviewerComparisonIntake2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGRBReviewerComparisonIntake(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGRBReviewerComparisonIntake2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGRBReviewerComparisonIntake(ctx context.Context, sel ast.SelectionSet, v *models.GRBReviewerComparisonIntake) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GRBReviewerComparisonIntake(ctx, sel, v)
}

func (ec *executionContext) marshalNGRBVotingInformation2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGRBVotingInformation(ctx context.Context, sel ast.SelectionSet, v models.GRBVotingInformation) graphql.Marshaler {
	return ec._GRBVotingInformation(ctx, sel, &v)
}

func (ec *executionContext) marshalNGRBVotingInformation2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGRBVotingInformation(ctx context.Context, sel ast.SelectionSet, v *models.GRBVotingInformation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GRBVotingInformation(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGRBVotingInformationStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGRBVotingInformationStatus(ctx context.Context, v any) (models.GRBVotingInformationStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.GRBVotingInformationStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGRBVotingInformationStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGRBVotingInformationStatus(ctx context.Context, sel ast.SelectionSet, v models.GRBVotingInformationStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNGovernanceRequestFeedback2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGovernanceRequestFeedbackᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.GovernanceRequestFeedback) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGovernanceRequestFeedback2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGovernanceRequestFeedback(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGovernanceRequestFeedback2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGovernanceRequestFeedback(ctx context.Context, sel ast.SelectionSet, v *models.GovernanceRequestFeedback) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GovernanceRequestFeedback(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGovernanceRequestFeedbackSourceAction2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGovernanceRequestFeedbackSourceAction(ctx context.Context, v any) (models.GovernanceRequestFeedbackSourceAction, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.GovernanceRequestFeedbackSourceAction(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGovernanceRequestFeedbackSourceAction2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGovernanceRequestFeedbackSourceAction(ctx context.Context, sel ast.SelectionSet, v models.GovernanceRequestFeedbackSourceAction) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNGovernanceRequestFeedbackTargetForm2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGovernanceRequestFeedbackTargetForm(ctx context.Context, v any) (models.GovernanceRequestFeedbackTargetForm, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.GovernanceRequestFeedbackTargetForm(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGovernanceRequestFeedbackTargetForm2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGovernanceRequestFeedbackTargetForm(ctx context.Context, sel ast.SelectionSet, v models.GovernanceRequestFeedbackTargetForm) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNGovernanceRequestFeedbackType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGovernanceRequestFeedbackType(ctx context.Context, v any) (models.GovernanceRequestFeedbackType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.GovernanceRequestFeedbackType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGovernanceRequestFeedbackType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐGovernanceRequestFeedbackType(ctx context.Context, sel ast.SelectionSet, v models.GovernanceRequestFeedbackType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx context.Context, v any) (models.HTML, error) {
	var res models.HTML
	err := res.UnmarshalGQLContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx context.Context, sel ast.SelectionSet, v models.HTML) graphql.Marshaler {
	return graphql.WrapContextMarshaler(ctx, v)
}

func (ec *executionContext) unmarshalNHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx context.Context, v any) (*models.HTML, error) {
	var res = new(models.HTML)
	err := res.UnmarshalGQLContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx context.Context, sel ast.SelectionSet, v *models.HTML) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return graphql.WrapContextMarshaler(ctx, v)
}

func (ec *executionContext) unmarshalNITGovDecisionStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovDecisionStatus(ctx context.Context, v any) (models.ITGovDecisionStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.ITGovDecisionStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNITGovDecisionStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovDecisionStatus(ctx context.Context, sel ast.SelectionSet, v models.ITGovDecisionStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNITGovDraftBusinessCaseStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovDraftBusinessCaseStatus(ctx context.Context, v any) (models.ITGovDraftBusinessCaseStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.ITGovDraftBusinessCaseStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNITGovDraftBusinessCaseStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovDraftBusinessCaseStatus(ctx context.Context, sel ast.SelectionSet, v models.ITGovDraftBusinessCaseStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNITGovFeedbackStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovFeedbackStatus(ctx context.Context, v any) (models.ITGovFeedbackStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.ITGovFeedbackStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNITGovFeedbackStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovFeedbackStatus(ctx context.Context, sel ast.SelectionSet, v models.ITGovFeedbackStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNITGovFinalBusinessCaseStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovFinalBusinessCaseStatus(ctx context.Context, v any) (models.ITGovFinalBusinessCaseStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.ITGovFinalBusinessCaseStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNITGovFinalBusinessCaseStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovFinalBusinessCaseStatus(ctx context.Context, sel ast.SelectionSet, v models.ITGovFinalBusinessCaseStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNITGovGRBStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovGRBStatus(ctx context.Context, v any) (models.ITGovGRBStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.ITGovGRBStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNITGovGRBStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovGRBStatus(ctx context.Context, sel ast.SelectionSet, v models.ITGovGRBStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNITGovGRTStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovGRTStatus(ctx context.Context, v any) (models.ITGovGRTStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.ITGovGRTStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNITGovGRTStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovGRTStatus(ctx context.Context, sel ast.SelectionSet, v models.ITGovGRTStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNITGovIntakeFormStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovIntakeFormStatus(ctx context.Context, v any) (models.ITGovIntakeFormStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.ITGovIntakeFormStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNITGovIntakeFormStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovIntakeFormStatus(ctx context.Context, sel ast.SelectionSet, v models.ITGovIntakeFormStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNITGovTaskStatuses2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovTaskStatuses(ctx context.Context, sel ast.SelectionSet, v models.ITGovTaskStatuses) graphql.Marshaler {
	return ec._ITGovTaskStatuses(ctx, sel, &v)
}

func (ec *executionContext) marshalNITGovTaskStatuses2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐITGovTaskStatuses(ctx context.Context, sel ast.SelectionSet, v *models.ITGovTaskStatuses) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ITGovTaskStatuses(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v any) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNLaunchDarklySettings2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐLaunchDarklySettings(ctx context.Context, sel ast.SelectionSet, v *models.LaunchDarklySettings) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LaunchDarklySettings(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPersonRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐPersonRole(ctx context.Context, v any) (models.PersonRole, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.PersonRole(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPersonRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐPersonRole(ctx context.Context, sel ast.SelectionSet, v models.PersonRole) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNReopenTRBRequestInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐReopenTRBRequestInput(ctx context.Context, v any) (models.ReopenTRBRequestInput, error) {
	res, err := ec.unmarshalInputReopenTRBRequestInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx context.Context, v any) (models.Role, error) {
	var res models.Role
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRole(ctx context.Context, sel ast.SelectionSet, v models.Role) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSendCantFindSomethingEmailInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSendCantFindSomethingEmailInput(ctx context.Context, v any) (models.SendCantFindSomethingEmailInput, error) {
	res, err := ec.unmarshalInputSendCantFindSomethingEmailInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSendFeedbackEmailInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSendFeedbackEmailInput(ctx context.Context, v any) (models.SendFeedbackEmailInput, error) {
	res, err := ec.unmarshalInputSendFeedbackEmailInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSendReportAProblemEmailInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSendReportAProblemEmailInput(ctx context.Context, v any) (models.SendReportAProblemEmailInput, error) {
	res, err := ec.unmarshalInputSendReportAProblemEmailInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSendTRBGuidanceLetterInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSendTRBGuidanceLetterInput(ctx context.Context, v any) (models.SendTRBGuidanceLetterInput, error) {
	res, err := ec.unmarshalInputSendTRBGuidanceLetterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSetRolesForUserOnSystemInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSetRolesForUserOnSystemInput(ctx context.Context, v any) (models.SetRolesForUserOnSystemInput, error) {
	res, err := ec.unmarshalInputSetRolesForUserOnSystemInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSetTRBRequestRelationExistingServiceInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSetTRBRequestRelationExistingServiceInput(ctx context.Context, v any) (models.SetTRBRequestRelationExistingServiceInput, error) {
	res, err := ec.unmarshalInputSetTRBRequestRelationExistingServiceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSetTRBRequestRelationExistingSystemInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSetTRBRequestRelationExistingSystemInput(ctx context.Context, v any) (models.SetTRBRequestRelationExistingSystemInput, error) {
	res, err := ec.unmarshalInputSetTRBRequestRelationExistingSystemInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSetTRBRequestRelationNewSystemInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSetTRBRequestRelationNewSystemInput(ctx context.Context, v any) (models.SetTRBRequestRelationNewSystemInput, error) {
	res, err := ec.unmarshalInputSetTRBRequestRelationNewSystemInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNStartGRBReviewInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐStartGRBReviewInput(ctx context.Context, v any) (models.StartGRBReviewInput, error) {
	res, err := ec.unmarshalInputStartGRBReviewInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx context.Context, v any) (zero.String, error) {
	res, err := models.UnmarshalZeroString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx context.Context, sel ast.SelectionSet, v zero.String) graphql.Marshaler {
	res := models.MarshalZeroString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕgithubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx context.Context, v any) ([]zero.String, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]zero.String, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕgithubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx context.Context, sel ast.SelectionSet, v []zero.String) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚕgithubᚗcomᚋgureguᚋnullᚋzeroᚐStringᚄ(ctx context.Context, v any) ([]zero.String, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]zero.String, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕgithubᚗcomᚋgureguᚋnullᚋzeroᚐStringᚄ(ctx context.Context, sel ast.SelectionSet, v []zero.String) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚖstring(ctx context.Context, v any) (*string, error) {
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNSubmitIntakeInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSubmitIntakeInput(ctx context.Context, v any) (models.SubmitIntakeInput, error) {
	res, err := ec.unmarshalInputSubmitIntakeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntake2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntake(ctx context.Context, sel ast.SelectionSet, v models.SystemIntake) graphql.Marshaler {
	return ec._SystemIntake(ctx, sel, &v)
}

func (ec *executionContext) marshalNSystemIntake2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.SystemIntake) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSystemIntake2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntake(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSystemIntake2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntake(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntake) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SystemIntake(ctx, sel, v)
}

func (ec *executionContext) marshalNSystemIntakeAction2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeActionᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.SystemIntakeAction) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSystemIntakeAction2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeAction(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSystemIntakeAction2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeAction(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeAction) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SystemIntakeAction(ctx, sel, v)
}

func (ec *executionContext) marshalNSystemIntakeActionActor2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeActionActor(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeActionActor) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SystemIntakeActionActor(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSystemIntakeActionType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeActionType(ctx context.Context, v any) (models.SystemIntakeActionType, error) {
	var res models.SystemIntakeActionType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeActionType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeActionType(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeActionType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSystemIntakeAsyncGRBVotingOption2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeAsyncGRBVotingOption(ctx context.Context, v any) (models.SystemIntakeAsyncGRBVotingOption, error) {
	var res models.SystemIntakeAsyncGRBVotingOption
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeAsyncGRBVotingOption2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeAsyncGRBVotingOption(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeAsyncGRBVotingOption) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNSystemIntakeBusinessOwner2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeBusinessOwner(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeBusinessOwner) graphql.Marshaler {
	return ec._SystemIntakeBusinessOwner(ctx, sel, &v)
}

func (ec *executionContext) marshalNSystemIntakeBusinessOwner2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeBusinessOwner(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeBusinessOwner) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SystemIntakeBusinessOwner(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSystemIntakeBusinessOwnerInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeBusinessOwnerInput(ctx context.Context, v any) (*models.SystemIntakeBusinessOwnerInput, error) {
	res, err := ec.unmarshalInputSystemIntakeBusinessOwnerInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemIntakeChangeLCIDRetirementDateInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeChangeLCIDRetirementDateInput(ctx context.Context, v any) (models.SystemIntakeChangeLCIDRetirementDateInput, error) {
	res, err := ec.unmarshalInputSystemIntakeChangeLCIDRetirementDateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemIntakeCloseRequestInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeCloseRequestInput(ctx context.Context, v any) (models.SystemIntakeCloseRequestInput, error) {
	res, err := ec.unmarshalInputSystemIntakeCloseRequestInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeCollaborator2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeCollaborator(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeCollaborator) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SystemIntakeCollaborator(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSystemIntakeConfirmLCIDInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeConfirmLCIDInput(ctx context.Context, v any) (models.SystemIntakeConfirmLCIDInput, error) {
	res, err := ec.unmarshalInputSystemIntakeConfirmLCIDInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeContactsPayload2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeContactsPayload(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeContactsPayload) graphql.Marshaler {
	return ec._SystemIntakeContactsPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNSystemIntakeContactsPayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeContactsPayload(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeContactsPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SystemIntakeContactsPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNSystemIntakeContract2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeContract(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeContract) graphql.Marshaler {
	return ec._SystemIntakeContract(ctx, sel, &v)
}

func (ec *executionContext) marshalNSystemIntakeContract2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeContract(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeContract) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SystemIntakeContract(ctx, sel, v)
}

func (ec *executionContext) marshalNSystemIntakeContractNumber2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeContractNumberᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.SystemIntakeContractNumber) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSystemIntakeContractNumber2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeContractNumber(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSystemIntakeContractNumber2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeContractNumber(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeContractNumber) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SystemIntakeContractNumber(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSystemIntakeDecisionState2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDecisionState(ctx context.Context, v any) (models.SystemIntakeDecisionState, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.SystemIntakeDecisionState(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeDecisionState2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDecisionState(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeDecisionState) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNSystemIntakeDocument2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocumentᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.SystemIntakeDocument) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSystemIntakeDocument2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocument(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSystemIntakeDocument2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocument(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeDocument) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SystemIntakeDocument(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSystemIntakeDocumentCommonType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocumentCommonType(ctx context.Context, v any) (models.SystemIntakeDocumentCommonType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.SystemIntakeDocumentCommonType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeDocumentCommonType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocumentCommonType(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeDocumentCommonType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNSystemIntakeDocumentStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocumentStatus(ctx context.Context, v any) (models.SystemIntakeDocumentStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.SystemIntakeDocumentStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeDocumentStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocumentStatus(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeDocumentStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNSystemIntakeDocumentType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocumentType(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeDocumentType) graphql.Marshaler {
	return ec._SystemIntakeDocumentType(ctx, sel, &v)
}

func (ec *executionContext) marshalNSystemIntakeDocumentType2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocumentType(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeDocumentType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SystemIntakeDocumentType(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSystemIntakeDocumentVersion2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocumentVersion(ctx context.Context, v any) (models.SystemIntakeDocumentVersion, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.SystemIntakeDocumentVersion(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeDocumentVersion2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocumentVersion(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeDocumentVersion) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNSystemIntakeExpireLCIDInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeExpireLCIDInput(ctx context.Context, v any) (models.SystemIntakeExpireLCIDInput, error) {
	res, err := ec.unmarshalInputSystemIntakeExpireLCIDInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemIntakeFormState2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeFormState(ctx context.Context, v any) (models.SystemIntakeFormState, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.SystemIntakeFormState(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeFormState2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeFormState(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeFormState) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNSystemIntakeFormStep2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeFormStep(ctx context.Context, v any) (models.SystemIntakeFormStep, error) {
	var res models.SystemIntakeFormStep
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeFormStep2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeFormStep(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeFormStep) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNSystemIntakeFundingSource2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeFundingSourceᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.SystemIntakeFundingSource) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSystemIntakeFundingSource2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeFundingSource(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSystemIntakeFundingSource2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeFundingSource(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeFundingSource) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SystemIntakeFundingSource(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSystemIntakeFundingSourceInput2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeFundingSourceInputᚄ(ctx context.Context, v any) ([]*models.SystemIntakeFundingSourceInput, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*models.SystemIntakeFundingSourceInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSystemIntakeFundingSourceInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeFundingSourceInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNSystemIntakeFundingSourceInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeFundingSourceInput(ctx context.Context, v any) (*models.SystemIntakeFundingSourceInput, error) {
	res, err := ec.unmarshalInputSystemIntakeFundingSourceInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemIntakeGRBPresentationLinksInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBPresentationLinksInput(ctx context.Context, v any) (models.SystemIntakeGRBPresentationLinksInput, error) {
	res, err := ec.unmarshalInputSystemIntakeGRBPresentationLinksInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeGRBReviewDiscussion2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewDiscussionᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.SystemIntakeGRBReviewDiscussion) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSystemIntakeGRBReviewDiscussion2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewDiscussion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSystemIntakeGRBReviewDiscussion2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewDiscussion(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeGRBReviewDiscussion) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SystemIntakeGRBReviewDiscussion(ctx, sel, v)
}

func (ec *executionContext) marshalNSystemIntakeGRBReviewDiscussionPost2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewDiscussionPostᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.SystemIntakeGRBReviewDiscussionPost) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSystemIntakeGRBReviewDiscussionPost2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewDiscussionPost(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSystemIntakeGRBReviewDiscussionPost2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewDiscussionPost(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeGRBReviewDiscussionPost) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SystemIntakeGRBReviewDiscussionPost(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSystemIntakeGRBReviewType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewType(ctx context.Context, v any) (models.SystemIntakeGRBReviewType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.SystemIntakeGRBReviewType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeGRBReviewType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewType(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeGRBReviewType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNSystemIntakeGRBReviewer2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewer(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeGRBReviewer) graphql.Marshaler {
	return ec._SystemIntakeGRBReviewer(ctx, sel, &v)
}

func (ec *executionContext) marshalNSystemIntakeGRBReviewer2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewerᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.SystemIntakeGRBReviewer) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSystemIntakeGRBReviewer2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSystemIntakeGRBReviewer2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewer(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeGRBReviewer) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SystemIntakeGRBReviewer(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSystemIntakeGRBReviewerRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewerRole(ctx context.Context, v any) (models.SystemIntakeGRBReviewerRole, error) {
	var res models.SystemIntakeGRBReviewerRole
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeGRBReviewerRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewerRole(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeGRBReviewerRole) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSystemIntakeGRBReviewerVotingRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewerVotingRole(ctx context.Context, v any) (models.SystemIntakeGRBReviewerVotingRole, error) {
	var res models.SystemIntakeGRBReviewerVotingRole
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeGRBReviewerVotingRole2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewerVotingRole(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeGRBReviewerVotingRole) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNSystemIntakeGovernanceTeam2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGovernanceTeam(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeGovernanceTeam) graphql.Marshaler {
	return ec._SystemIntakeGovernanceTeam(ctx, sel, &v)
}

func (ec *executionContext) marshalNSystemIntakeGovernanceTeam2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGovernanceTeam(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeGovernanceTeam) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SystemIntakeGovernanceTeam(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSystemIntakeGovernanceTeamInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGovernanceTeamInput(ctx context.Context, v any) (*models.SystemIntakeGovernanceTeamInput, error) {
	res, err := ec.unmarshalInputSystemIntakeGovernanceTeamInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeISSO2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeIsso(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeIsso) graphql.Marshaler {
	return ec._SystemIntakeISSO(ctx, sel, &v)
}

func (ec *executionContext) marshalNSystemIntakeISSO2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeIsso(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeIsso) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SystemIntakeISSO(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSystemIntakeISSOInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeISSOInput(ctx context.Context, v any) (*models.SystemIntakeISSOInput, error) {
	res, err := ec.unmarshalInputSystemIntakeISSOInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemIntakeIssueLCIDInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeIssueLCIDInput(ctx context.Context, v any) (models.SystemIntakeIssueLCIDInput, error) {
	res, err := ec.unmarshalInputSystemIntakeIssueLCIDInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemIntakeMeetingState2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeMeetingState(ctx context.Context, v any) (models.SystemIntakeMeetingState, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.SystemIntakeMeetingState(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeMeetingState2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeMeetingState(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeMeetingState) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNSystemIntakeNotITGovReqInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeNotITGovReqInput(ctx context.Context, v any) (models.SystemIntakeNotITGovReqInput, error) {
	res, err := ec.unmarshalInputSystemIntakeNotITGovReqInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeNote2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeNote(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeNote) graphql.Marshaler {
	return ec._SystemIntakeNote(ctx, sel, &v)
}

func (ec *executionContext) marshalNSystemIntakeNote2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeNoteᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.SystemIntakeNote) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSystemIntakeNote2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeNote(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSystemIntakeNote2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeNote(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeNote) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SystemIntakeNote(ctx, sel, v)
}

func (ec *executionContext) marshalNSystemIntakeNoteAuthor2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeNoteAuthor(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeNoteAuthor) graphql.Marshaler {
	return ec._SystemIntakeNoteAuthor(ctx, sel, &v)
}

func (ec *executionContext) marshalNSystemIntakeNoteAuthor2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeNoteAuthor(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeNoteAuthor) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SystemIntakeNoteAuthor(ctx, sel, v)
}

func (ec *executionContext) marshalNSystemIntakeProductManager2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeProductManager(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeProductManager) graphql.Marshaler {
	return ec._SystemIntakeProductManager(ctx, sel, &v)
}

func (ec *executionContext) marshalNSystemIntakeProductManager2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeProductManager(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeProductManager) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SystemIntakeProductManager(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSystemIntakeProductManagerInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeProductManagerInput(ctx context.Context, v any) (*models.SystemIntakeProductManagerInput, error) {
	res, err := ec.unmarshalInputSystemIntakeProductManagerInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemIntakeProgressToNewStepsInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeProgressToNewStepsInput(ctx context.Context, v any) (models.SystemIntakeProgressToNewStepsInput, error) {
	res, err := ec.unmarshalInputSystemIntakeProgressToNewStepsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemIntakeRejectIntakeInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeRejectIntakeInput(ctx context.Context, v any) (models.SystemIntakeRejectIntakeInput, error) {
	res, err := ec.unmarshalInputSystemIntakeRejectIntakeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemIntakeReopenRequestInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeReopenRequestInput(ctx context.Context, v any) (models.SystemIntakeReopenRequestInput, error) {
	res, err := ec.unmarshalInputSystemIntakeReopenRequestInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemIntakeRequestEditsInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeRequestEditsInput(ctx context.Context, v any) (models.SystemIntakeRequestEditsInput, error) {
	res, err := ec.unmarshalInputSystemIntakeRequestEditsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemIntakeRequestType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeRequestType(ctx context.Context, v any) (models.SystemIntakeRequestType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.SystemIntakeRequestType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeRequestType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeRequestType(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeRequestType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNSystemIntakeRequester2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeRequester(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeRequester) graphql.Marshaler {
	return ec._SystemIntakeRequester(ctx, sel, &v)
}

func (ec *executionContext) marshalNSystemIntakeRequester2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeRequester(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeRequester) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SystemIntakeRequester(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSystemIntakeRequesterInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeRequesterInput(ctx context.Context, v any) (*models.SystemIntakeRequesterInput, error) {
	res, err := ec.unmarshalInputSystemIntakeRequesterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemIntakeRequesterWithComponentInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeRequesterWithComponentInput(ctx context.Context, v any) (*models.SystemIntakeRequesterWithComponentInput, error) {
	res, err := ec.unmarshalInputSystemIntakeRequesterWithComponentInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemIntakeRetireLCIDInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeRetireLCIDInput(ctx context.Context, v any) (models.SystemIntakeRetireLCIDInput, error) {
	res, err := ec.unmarshalInputSystemIntakeRetireLCIDInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemIntakeSoftwareAcquisitionMethods2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeSoftwareAcquisitionMethods(ctx context.Context, v any) (models.SystemIntakeSoftwareAcquisitionMethods, error) {
	var res models.SystemIntakeSoftwareAcquisitionMethods
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeSoftwareAcquisitionMethods2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeSoftwareAcquisitionMethods(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeSoftwareAcquisitionMethods) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSystemIntakeSoftwareAcquisitionMethods2ᚕgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeSoftwareAcquisitionMethodsᚄ(ctx context.Context, v any) ([]models.SystemIntakeSoftwareAcquisitionMethods, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]models.SystemIntakeSoftwareAcquisitionMethods, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSystemIntakeSoftwareAcquisitionMethods2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeSoftwareAcquisitionMethods(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNSystemIntakeSoftwareAcquisitionMethods2ᚕgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeSoftwareAcquisitionMethodsᚄ(ctx context.Context, sel ast.SelectionSet, v []models.SystemIntakeSoftwareAcquisitionMethods) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSystemIntakeSoftwareAcquisitionMethods2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeSoftwareAcquisitionMethods(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNSystemIntakeState2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeState(ctx context.Context, v any) (models.SystemIntakeState, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.SystemIntakeState(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeState2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeState(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeState) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNSystemIntakeStatusAdmin2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeStatusAdmin(ctx context.Context, v any) (models.SystemIntakeStatusAdmin, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.SystemIntakeStatusAdmin(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeStatusAdmin2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeStatusAdmin(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeStatusAdmin) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNSystemIntakeStatusRequester2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeStatusRequester(ctx context.Context, v any) (models.SystemIntakeStatusRequester, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.SystemIntakeStatusRequester(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeStatusRequester2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeStatusRequester(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeStatusRequester) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNSystemIntakeStep2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeStep(ctx context.Context, v any) (models.SystemIntakeStep, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.SystemIntakeStep(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeStep2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeStep(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeStep) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNSystemIntakeStepToProgressTo2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeStepToProgressTo(ctx context.Context, v any) (models.SystemIntakeStepToProgressTo, error) {
	var res models.SystemIntakeStepToProgressTo
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeStepToProgressTo2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeStepToProgressTo(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeStepToProgressTo) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSystemIntakeTRBFollowUp2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeTRBFollowUp(ctx context.Context, v any) (models.SystemIntakeTRBFollowUp, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.SystemIntakeTRBFollowUp(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSystemIntakeTRBFollowUp2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeTRBFollowUp(ctx context.Context, sel ast.SelectionSet, v models.SystemIntakeTRBFollowUp) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNSystemIntakeUnretireLCIDInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeUnretireLCIDInput(ctx context.Context, v any) (models.SystemIntakeUnretireLCIDInput, error) {
	res, err := ec.unmarshalInputSystemIntakeUnretireLCIDInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSystemIntakeUpdateLCIDInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeUpdateLCIDInput(ctx context.Context, v any) (models.SystemIntakeUpdateLCIDInput, error) {
	res, err := ec.unmarshalInputSystemIntakeUpdateLCIDInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTRBAdminNote2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBAdminNote(ctx context.Context, sel ast.SelectionSet, v models.TRBAdminNote) graphql.Marshaler {
	return ec._TRBAdminNote(ctx, sel, &v)
}

func (ec *executionContext) marshalNTRBAdminNote2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBAdminNoteᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.TRBAdminNote) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTRBAdminNote2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBAdminNote(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTRBAdminNote2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBAdminNote(ctx context.Context, sel ast.SelectionSet, v *models.TRBAdminNote) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TRBAdminNote(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTRBAdminNoteCategory2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBAdminNoteCategory(ctx context.Context, v any) (models.TRBAdminNoteCategory, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TRBAdminNoteCategory(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTRBAdminNoteCategory2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBAdminNoteCategory(ctx context.Context, sel ast.SelectionSet, v models.TRBAdminNoteCategory) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTRBAdminNoteCategorySpecificData2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBAdminNoteCategorySpecificData(ctx context.Context, sel ast.SelectionSet, v models.TRBAdminNoteCategorySpecificData) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TRBAdminNoteCategorySpecificData(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTRBAttendConsultStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBAttendConsultStatus(ctx context.Context, v any) (models.TRBAttendConsultStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TRBAttendConsultStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTRBAttendConsultStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBAttendConsultStatus(ctx context.Context, sel ast.SelectionSet, v models.TRBAttendConsultStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTRBCollabGroupOption2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBCollabGroupOption(ctx context.Context, v any) (models.TRBCollabGroupOption, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TRBCollabGroupOption(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTRBCollabGroupOption2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBCollabGroupOption(ctx context.Context, sel ast.SelectionSet, v models.TRBCollabGroupOption) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTRBCollabGroupOption2ᚕgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBCollabGroupOptionᚄ(ctx context.Context, v any) ([]models.TRBCollabGroupOption, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]models.TRBCollabGroupOption, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTRBCollabGroupOption2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBCollabGroupOption(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNTRBCollabGroupOption2ᚕgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBCollabGroupOptionᚄ(ctx context.Context, sel ast.SelectionSet, v []models.TRBCollabGroupOption) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTRBCollabGroupOption2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBCollabGroupOption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNTRBConsultPrepStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBConsultPrepStatus(ctx context.Context, v any) (models.TRBConsultPrepStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TRBConsultPrepStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTRBConsultPrepStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBConsultPrepStatus(ctx context.Context, sel ast.SelectionSet, v models.TRBConsultPrepStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTRBDocumentCommonType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBDocumentCommonType(ctx context.Context, v any) (models.TRBDocumentCommonType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TRBDocumentCommonType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTRBDocumentCommonType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBDocumentCommonType(ctx context.Context, sel ast.SelectionSet, v models.TRBDocumentCommonType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTRBFeedbackAction2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBFeedbackAction(ctx context.Context, v any) (models.TRBFeedbackAction, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TRBFeedbackAction(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTRBFeedbackAction2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBFeedbackAction(ctx context.Context, sel ast.SelectionSet, v models.TRBFeedbackAction) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTRBFeedbackStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBFeedbackStatus(ctx context.Context, v any) (models.TRBFeedbackStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TRBFeedbackStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTRBFeedbackStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBFeedbackStatus(ctx context.Context, sel ast.SelectionSet, v models.TRBFeedbackStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTRBFormStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBFormStatus(ctx context.Context, v any) (models.TRBFormStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TRBFormStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTRBFormStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBFormStatus(ctx context.Context, sel ast.SelectionSet, v models.TRBFormStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTRBFundingSource2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBFundingSourceᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.TRBFundingSource) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTRBFundingSource2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBFundingSource(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTRBFundingSource2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBFundingSource(ctx context.Context, sel ast.SelectionSet, v *models.TRBFundingSource) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TRBFundingSource(ctx, sel, v)
}

func (ec *executionContext) marshalNTRBGuidanceLetter2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetter(ctx context.Context, sel ast.SelectionSet, v models.TRBGuidanceLetter) graphql.Marshaler {
	return ec._TRBGuidanceLetter(ctx, sel, &v)
}

func (ec *executionContext) marshalNTRBGuidanceLetter2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetter(ctx context.Context, sel ast.SelectionSet, v *models.TRBGuidanceLetter) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TRBGuidanceLetter(ctx, sel, v)
}

func (ec *executionContext) marshalNTRBGuidanceLetterInsight2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterInsight(ctx context.Context, sel ast.SelectionSet, v models.TRBGuidanceLetterInsight) graphql.Marshaler {
	return ec._TRBGuidanceLetterInsight(ctx, sel, &v)
}

func (ec *executionContext) marshalNTRBGuidanceLetterInsight2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterInsightᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.TRBGuidanceLetterInsight) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTRBGuidanceLetterInsight2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterInsight(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTRBGuidanceLetterInsight2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterInsight(ctx context.Context, sel ast.SelectionSet, v *models.TRBGuidanceLetterInsight) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TRBGuidanceLetterInsight(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTRBGuidanceLetterInsightCategory2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterInsightCategory(ctx context.Context, v any) (models.TRBGuidanceLetterInsightCategory, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TRBGuidanceLetterInsightCategory(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTRBGuidanceLetterInsightCategory2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterInsightCategory(ctx context.Context, sel ast.SelectionSet, v models.TRBGuidanceLetterInsightCategory) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTRBGuidanceLetterStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterStatus(ctx context.Context, v any) (models.TRBGuidanceLetterStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TRBGuidanceLetterStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTRBGuidanceLetterStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterStatus(ctx context.Context, sel ast.SelectionSet, v models.TRBGuidanceLetterStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTRBGuidanceLetterStatusTaskList2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterStatusTaskList(ctx context.Context, v any) (models.TRBGuidanceLetterStatusTaskList, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TRBGuidanceLetterStatusTaskList(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTRBGuidanceLetterStatusTaskList2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterStatusTaskList(ctx context.Context, sel ast.SelectionSet, v models.TRBGuidanceLetterStatusTaskList) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTRBRequest2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequest(ctx context.Context, sel ast.SelectionSet, v models.TRBRequest) graphql.Marshaler {
	return ec._TRBRequest(ctx, sel, &v)
}

func (ec *executionContext) marshalNTRBRequest2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.TRBRequest) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTRBRequest2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTRBRequest2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequest(ctx context.Context, sel ast.SelectionSet, v *models.TRBRequest) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TRBRequest(ctx, sel, v)
}

func (ec *executionContext) marshalNTRBRequestAttendee2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestAttendee(ctx context.Context, sel ast.SelectionSet, v models.TRBRequestAttendee) graphql.Marshaler {
	return ec._TRBRequestAttendee(ctx, sel, &v)
}

func (ec *executionContext) marshalNTRBRequestAttendee2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestAttendeeᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.TRBRequestAttendee) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTRBRequestAttendee2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestAttendee(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTRBRequestAttendee2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestAttendee(ctx context.Context, sel ast.SelectionSet, v *models.TRBRequestAttendee) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TRBRequestAttendee(ctx, sel, v)
}

func (ec *executionContext) marshalNTRBRequestContractNumber2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestContractNumberᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.TRBRequestContractNumber) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTRBRequestContractNumber2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestContractNumber(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTRBRequestContractNumber2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestContractNumber(ctx context.Context, sel ast.SelectionSet, v *models.TRBRequestContractNumber) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TRBRequestContractNumber(ctx, sel, v)
}

func (ec *executionContext) marshalNTRBRequestDocument2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestDocumentᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.TRBRequestDocument) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTRBRequestDocument2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestDocument(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTRBRequestDocument2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestDocument(ctx context.Context, sel ast.SelectionSet, v *models.TRBRequestDocument) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TRBRequestDocument(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTRBRequestDocumentStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestDocumentStatus(ctx context.Context, v any) (models.TRBRequestDocumentStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TRBRequestDocumentStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTRBRequestDocumentStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestDocumentStatus(ctx context.Context, sel ast.SelectionSet, v models.TRBRequestDocumentStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTRBRequestDocumentType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestDocumentType(ctx context.Context, sel ast.SelectionSet, v models.TRBRequestDocumentType) graphql.Marshaler {
	return ec._TRBRequestDocumentType(ctx, sel, &v)
}

func (ec *executionContext) marshalNTRBRequestDocumentType2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestDocumentType(ctx context.Context, sel ast.SelectionSet, v *models.TRBRequestDocumentType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TRBRequestDocumentType(ctx, sel, v)
}

func (ec *executionContext) marshalNTRBRequestFeedback2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestFeedback(ctx context.Context, sel ast.SelectionSet, v models.TRBRequestFeedback) graphql.Marshaler {
	return ec._TRBRequestFeedback(ctx, sel, &v)
}

func (ec *executionContext) marshalNTRBRequestFeedback2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestFeedbackᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.TRBRequestFeedback) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTRBRequestFeedback2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestFeedback(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTRBRequestFeedback2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestFeedback(ctx context.Context, sel ast.SelectionSet, v *models.TRBRequestFeedback) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TRBRequestFeedback(ctx, sel, v)
}

func (ec *executionContext) marshalNTRBRequestForm2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestForm(ctx context.Context, sel ast.SelectionSet, v models.TRBRequestForm) graphql.Marshaler {
	return ec._TRBRequestForm(ctx, sel, &v)
}

func (ec *executionContext) marshalNTRBRequestForm2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestForm(ctx context.Context, sel ast.SelectionSet, v *models.TRBRequestForm) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TRBRequestForm(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTRBRequestState2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestState(ctx context.Context, v any) (models.TRBRequestState, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TRBRequestState(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTRBRequestState2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestState(ctx context.Context, sel ast.SelectionSet, v models.TRBRequestState) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTRBRequestStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestStatus(ctx context.Context, v any) (models.TRBRequestStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TRBRequestStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTRBRequestStatus2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestStatus(ctx context.Context, sel ast.SelectionSet, v models.TRBRequestStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTRBRequestType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestType(ctx context.Context, v any) (models.TRBRequestType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TRBRequestType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTRBRequestType2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestType(ctx context.Context, sel ast.SelectionSet, v models.TRBRequestType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTRBSubjectAreaOption2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBSubjectAreaOption(ctx context.Context, v any) (models.TRBSubjectAreaOption, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TRBSubjectAreaOption(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTRBSubjectAreaOption2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBSubjectAreaOption(ctx context.Context, sel ast.SelectionSet, v models.TRBSubjectAreaOption) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTRBTaskStatuses2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBTaskStatuses(ctx context.Context, sel ast.SelectionSet, v models.TRBTaskStatuses) graphql.Marshaler {
	return ec._TRBTaskStatuses(ctx, sel, &v)
}

func (ec *executionContext) marshalNTRBTaskStatuses2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBTaskStatuses(ctx context.Context, sel ast.SelectionSet, v *models.TRBTaskStatuses) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TRBTaskStatuses(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTaggedHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTaggedHTML(ctx context.Context, v any) (models.TaggedHTML, error) {
	var res models.TaggedHTML
	err := res.UnmarshalGQLContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTaggedHTML2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTaggedHTML(ctx context.Context, sel ast.SelectionSet, v models.TaggedHTML) graphql.Marshaler {
	return graphql.WrapContextMarshaler(ctx, v)
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v any) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2ᚖtimeᚐTime(ctx context.Context, v any) (*time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, v any) (uuid.UUID, error) {
	res, err := models.UnmarshalUUID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v uuid.UUID) graphql.Marshaler {
	res := models.MarshalUUID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx context.Context, v any) ([]uuid.UUID, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]uuid.UUID, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx context.Context, sel ast.SelectionSet, v []uuid.UUID) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNUpdateSystemIntakeAdminLeadInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeAdminLeadInput(ctx context.Context, v any) (models.UpdateSystemIntakeAdminLeadInput, error) {
	res, err := ec.unmarshalInputUpdateSystemIntakeAdminLeadInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateSystemIntakeContactDetailsInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeContactDetailsInput(ctx context.Context, v any) (models.UpdateSystemIntakeContactDetailsInput, error) {
	res, err := ec.unmarshalInputUpdateSystemIntakeContactDetailsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateSystemIntakeContactInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeContactInput(ctx context.Context, v any) (models.UpdateSystemIntakeContactInput, error) {
	res, err := ec.unmarshalInputUpdateSystemIntakeContactInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateSystemIntakeContractDetailsInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeContractDetailsInput(ctx context.Context, v any) (models.UpdateSystemIntakeContractDetailsInput, error) {
	res, err := ec.unmarshalInputUpdateSystemIntakeContractDetailsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateSystemIntakeGRBReviewerInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeGRBReviewerInput(ctx context.Context, v any) (models.UpdateSystemIntakeGRBReviewerInput, error) {
	res, err := ec.unmarshalInputUpdateSystemIntakeGRBReviewerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateSystemIntakeLinkedCedarSystemInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeLinkedCedarSystemInput(ctx context.Context, v any) (models.UpdateSystemIntakeLinkedCedarSystemInput, error) {
	res, err := ec.unmarshalInputUpdateSystemIntakeLinkedCedarSystemInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateSystemIntakeNoteInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeNoteInput(ctx context.Context, v any) (models.UpdateSystemIntakeNoteInput, error) {
	res, err := ec.unmarshalInputUpdateSystemIntakeNoteInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateSystemIntakeRequestDetailsInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeRequestDetailsInput(ctx context.Context, v any) (models.UpdateSystemIntakeRequestDetailsInput, error) {
	res, err := ec.unmarshalInputUpdateSystemIntakeRequestDetailsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateSystemIntakeReviewDatesInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeReviewDatesInput(ctx context.Context, v any) (models.UpdateSystemIntakeReviewDatesInput, error) {
	res, err := ec.unmarshalInputUpdateSystemIntakeReviewDatesInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTRBGuidanceLetterInput2map(ctx context.Context, v any) (map[string]interface{}, error) {
	res, err := ec.unmarshalInputUpdateTRBGuidanceLetterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTRBGuidanceLetterInsightInput2map(ctx context.Context, v any) (map[string]interface{}, error) {
	res, err := ec.unmarshalInputUpdateTRBGuidanceLetterInsightInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTRBGuidanceLetterInsightOrderInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateTRBGuidanceLetterInsightOrderInput(ctx context.Context, v any) (models.UpdateTRBGuidanceLetterInsightOrderInput, error) {
	res, err := ec.unmarshalInputUpdateTRBGuidanceLetterInsightOrderInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTRBRequestAttendeeInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateTRBRequestAttendeeInput(ctx context.Context, v any) (models.UpdateTRBRequestAttendeeInput, error) {
	res, err := ec.unmarshalInputUpdateTRBRequestAttendeeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTRBRequestConsultMeetingTimeInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateTRBRequestConsultMeetingTimeInput(ctx context.Context, v any) (models.UpdateTRBRequestConsultMeetingTimeInput, error) {
	res, err := ec.unmarshalInputUpdateTRBRequestConsultMeetingTimeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTRBRequestFormInput2map(ctx context.Context, v any) (map[string]interface{}, error) {
	res, err := ec.unmarshalInputUpdateTRBRequestFormInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTRBRequestFundingSourcesInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateTRBRequestFundingSourcesInput(ctx context.Context, v any) (models.UpdateTRBRequestFundingSourcesInput, error) {
	res, err := ec.unmarshalInputUpdateTRBRequestFundingSourcesInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTRBRequestTRBLeadInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateTRBRequestTRBLeadInput(ctx context.Context, v any) (models.UpdateTRBRequestTRBLeadInput, error) {
	res, err := ec.unmarshalInputUpdateTRBRequestTRBLeadInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v any) (graphql.Upload, error) {
	res, err := graphql.UnmarshalUpload(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v graphql.Upload) graphql.Marshaler {
	res := graphql.MarshalUpload(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUploadSystemIntakeGRBPresentationDeckInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUploadSystemIntakeGRBPresentationDeckInput(ctx context.Context, v any) (models.UploadSystemIntakeGRBPresentationDeckInput, error) {
	res, err := ec.unmarshalInputUploadSystemIntakeGRBPresentationDeckInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserAccount2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx context.Context, sel ast.SelectionSet, v *authentication.UserAccount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserAccount(ctx, sel, v)
}

func (ec *executionContext) marshalNUserError2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUserError(ctx context.Context, sel ast.SelectionSet, v *models.UserError) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserError(ctx, sel, v)
}

func (ec *executionContext) marshalNUserInfo2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUserInfo(ctx context.Context, sel ast.SelectionSet, v models.UserInfo) graphql.Marshaler {
	return ec._UserInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserInfo2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUserInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.UserInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserInfo2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUserInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserInfo2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUserInfo(ctx context.Context, sel ast.SelectionSet, v *models.UserInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserInfo(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNcreateSystemIntakeGRBDiscussionPostInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateSystemIntakeGRBDiscussionPostInput(ctx context.Context, v any) (models.CreateSystemIntakeGRBDiscussionPostInput, error) {
	res, err := ec.unmarshalInputcreateSystemIntakeGRBDiscussionPostInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNcreateSystemIntakeGRBDiscussionReplyInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateSystemIntakeGRBDiscussionReplyInput(ctx context.Context, v any) (models.CreateSystemIntakeGRBDiscussionReplyInput, error) {
	res, err := ec.unmarshalInputcreateSystemIntakeGRBDiscussionReplyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateSystemIntakeGRBReviewFormInputPresentationAsync2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeGRBReviewFormInputPresentationAsync(ctx context.Context, v any) (models.UpdateSystemIntakeGRBReviewFormInputPresentationAsync, error) {
	res, err := ec.unmarshalInputupdateSystemIntakeGRBReviewFormInputPresentationAsync(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateSystemIntakeGRBReviewFormInputPresentationStandard2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeGRBReviewFormInputPresentationStandard(ctx context.Context, v any) (models.UpdateSystemIntakeGRBReviewFormInputPresentationStandard, error) {
	res, err := ec.unmarshalInputupdateSystemIntakeGRBReviewFormInputPresentationStandard(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateSystemIntakeGRBReviewFormInputTimeframeAsync2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeGRBReviewFormInputTimeframeAsync(ctx context.Context, v any) (models.UpdateSystemIntakeGRBReviewFormInputTimeframeAsync, error) {
	res, err := ec.unmarshalInputupdateSystemIntakeGRBReviewFormInputTimeframeAsync(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateSystemIntakeGRBReviewTypeInput2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakeGRBReviewTypeInput(ctx context.Context, v any) (models.UpdateSystemIntakeGRBReviewTypeInput, error) {
	res, err := ec.unmarshalInputupdateSystemIntakeGRBReviewTypeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2githubᚗcomᚋgureguᚋnullᚐBool(ctx context.Context, v any) (null.Bool, error) {
	res, err := models.UnmarshalNullBool(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2githubᚗcomᚋgureguᚋnullᚐBool(ctx context.Context, sel ast.SelectionSet, v null.Bool) graphql.Marshaler {
	res := models.MarshalNullBool(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOBusinessCase2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐBusinessCase(ctx context.Context, sel ast.SelectionSet, v *models.BusinessCase) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BusinessCase(ctx, sel, v)
}

func (ec *executionContext) marshalOBusinessCaseSolution2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐBusinessCaseSolution(ctx context.Context, sel ast.SelectionSet, v *models.BusinessCaseSolution) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BusinessCaseSolution(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCedarAssigneeType2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarAssigneeType(ctx context.Context, v any) (*models.CedarAssigneeType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.CedarAssigneeType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCedarAssigneeType2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarAssigneeType(ctx context.Context, sel ast.SelectionSet, v *models.CedarAssigneeType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) marshalOCedarBudget2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarBudgetᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.CedarBudget) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCedarBudget2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarBudget(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCedarBudgetSystemCost2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarBudgetSystemCost(ctx context.Context, sel ast.SelectionSet, v *models.CedarBudgetSystemCost) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CedarBudgetSystemCost(ctx, sel, v)
}

func (ec *executionContext) marshalOCedarDataCenter2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarDataCenter(ctx context.Context, sel ast.SelectionSet, v *models.CedarDataCenter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CedarDataCenter(ctx, sel, v)
}

func (ec *executionContext) marshalOCedarSoftwareProducts2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSoftwareProducts(ctx context.Context, sel ast.SelectionSet, v *models.CedarSoftwareProducts) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CedarSoftwareProducts(ctx, sel, v)
}

func (ec *executionContext) marshalOCedarSystem2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSystem(ctx context.Context, sel ast.SelectionSet, v *models.CedarSystem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CedarSystem(ctx, sel, v)
}

func (ec *executionContext) marshalOCedarSystemBookmark2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSystemBookmark(ctx context.Context, sel ast.SelectionSet, v *models.CedarSystemBookmark) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CedarSystemBookmark(ctx, sel, v)
}

func (ec *executionContext) marshalOCedarSystemDetails2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCedarSystemDetails(ctx context.Context, sel ast.SelectionSet, v *models.CedarSystemDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CedarSystemDetails(ctx, sel, v)
}

func (ec *executionContext) marshalOCreateCedarSystemBookmarkPayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateCedarSystemBookmarkPayload(ctx context.Context, sel ast.SelectionSet, v *models.CreateCedarSystemBookmarkPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CreateCedarSystemBookmarkPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCreateSystemIntakeContactPayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateSystemIntakeContactPayload(ctx context.Context, sel ast.SelectionSet, v *models.CreateSystemIntakeContactPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CreateSystemIntakeContactPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCreateSystemIntakeDocumentPayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateSystemIntakeDocumentPayload(ctx context.Context, sel ast.SelectionSet, v *models.CreateSystemIntakeDocumentPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CreateSystemIntakeDocumentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCreateSystemIntakeGRBReviewersPayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateSystemIntakeGRBReviewersPayload(ctx context.Context, sel ast.SelectionSet, v *models.CreateSystemIntakeGRBReviewersPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CreateSystemIntakeGRBReviewersPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCreateTRBRequestDocumentPayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCreateTRBRequestDocumentPayload(ctx context.Context, sel ast.SelectionSet, v *models.CreateTRBRequestDocumentPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CreateTRBRequestDocumentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalOCurrentUser2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐCurrentUser(ctx context.Context, sel ast.SelectionSet, v *models.CurrentUser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CurrentUser(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteCedarSystemBookmarkPayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐDeleteCedarSystemBookmarkPayload(ctx context.Context, sel ast.SelectionSet, v *models.DeleteCedarSystemBookmarkPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteCedarSystemBookmarkPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteSystemIntakeContactPayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐDeleteSystemIntakeContactPayload(ctx context.Context, sel ast.SelectionSet, v *models.DeleteSystemIntakeContactPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteSystemIntakeContactPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteSystemIntakeDocumentPayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐDeleteSystemIntakeDocumentPayload(ctx context.Context, sel ast.SelectionSet, v *models.DeleteSystemIntakeDocumentPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteSystemIntakeDocumentPayload(ctx, sel, v)
}

func (ec *executionContext) marshalODeleteTRBRequestDocumentPayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐDeleteTRBRequestDocumentPayload(ctx context.Context, sel ast.SelectionSet, v *models.DeleteTRBRequestDocumentPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeleteTRBRequestDocumentPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEmailAddress2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailAddress(ctx context.Context, v any) (models.EmailAddress, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.EmailAddress(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEmailAddress2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailAddress(ctx context.Context, sel ast.SelectionSet, v models.EmailAddress) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) unmarshalOEmailNotificationRecipients2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEmailNotificationRecipients(ctx context.Context, v any) (*models.EmailNotificationRecipients, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEmailNotificationRecipients(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEstimatedLifecycleCost2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEstimatedLifecycleCostᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.EstimatedLifecycleCost) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEstimatedLifecycleCost2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐEstimatedLifecycleCost(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOExchangeDirection2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐExchangeDirection(ctx context.Context, v any) (models.ExchangeDirection, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.ExchangeDirection(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOExchangeDirection2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐExchangeDirection(ctx context.Context, sel ast.SelectionSet, v models.ExchangeDirection) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) unmarshalOFloat2float64(ctx context.Context, v any) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	return res
}

func (ec *executionContext) unmarshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx context.Context, v any) (*models.HTML, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.HTML)
	err := res.UnmarshalGQLContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOHTML2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐHTML(ctx context.Context, sel ast.SelectionSet, v *models.HTML) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.WrapContextMarshaler(ctx, v)
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v any) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v any) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint64(ctx context.Context, v any) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt64(*v)
	return res
}

func (ec *executionContext) unmarshalOLifecycleCostPhase2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐLifecycleCostPhase(ctx context.Context, v any) (*models.LifecycleCostPhase, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.LifecycleCostPhase(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLifecycleCostPhase2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐLifecycleCostPhase(ctx context.Context, sel ast.SelectionSet, v *models.LifecycleCostPhase) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOLifecycleCostSolution2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐLifecycleCostSolution(ctx context.Context, v any) (models.LifecycleCostSolution, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.LifecycleCostSolution(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLifecycleCostSolution2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐLifecycleCostSolution(ctx context.Context, sel ast.SelectionSet, v models.LifecycleCostSolution) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) unmarshalOLifecycleCostYear2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐLifecycleCostYear(ctx context.Context, v any) (models.LifecycleCostYear, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.LifecycleCostYear(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLifecycleCostYear2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐLifecycleCostYear(ctx context.Context, sel ast.SelectionSet, v models.LifecycleCostYear) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) unmarshalOPersonRole2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐPersonRole(ctx context.Context, v any) (*models.PersonRole, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.PersonRole(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPersonRole2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐPersonRole(ctx context.Context, sel ast.SelectionSet, v *models.PersonRole) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalORequestRelationType2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRequestRelationType(ctx context.Context, v any) (*models.RequestRelationType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.RequestRelationType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORequestRelationType2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐRequestRelationType(ctx context.Context, sel ast.SelectionSet, v *models.RequestRelationType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOSetSystemIntakeRelationExistingServiceInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSetSystemIntakeRelationExistingServiceInput(ctx context.Context, v any) (*models.SetSystemIntakeRelationExistingServiceInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSetSystemIntakeRelationExistingServiceInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSetSystemIntakeRelationExistingSystemInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSetSystemIntakeRelationExistingSystemInput(ctx context.Context, v any) (*models.SetSystemIntakeRelationExistingSystemInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSetSystemIntakeRelationExistingSystemInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSetSystemIntakeRelationNewSystemInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSetSystemIntakeRelationNewSystemInput(ctx context.Context, v any) (*models.SetSystemIntakeRelationNewSystemInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSetSystemIntakeRelationNewSystemInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx context.Context, v any) (zero.String, error) {
	res, err := models.UnmarshalZeroString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2githubᚗcomᚋgureguᚋnullᚋzeroᚐString(ctx context.Context, sel ast.SelectionSet, v zero.String) graphql.Marshaler {
	res := models.MarshalZeroString(v)
	return res
}

func (ec *executionContext) unmarshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx context.Context, v any) (null.String, error) {
	res, err := models.UnmarshalNullString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2githubᚗcomᚋgureguᚋnullᚐString(ctx context.Context, sel ast.SelectionSet, v null.String) graphql.Marshaler {
	res := models.MarshalNullString(v)
	return res
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOSystemIntake2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntake(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntake) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemIntake(ctx, sel, v)
}

func (ec *executionContext) marshalOSystemIntakeAnnualSpending2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeAnnualSpending(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeAnnualSpending) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemIntakeAnnualSpending(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSystemIntakeAnnualSpendingInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeAnnualSpendingInput(ctx context.Context, v any) (*models.SystemIntakeAnnualSpendingInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemIntakeAnnualSpendingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSystemIntakeAsyncGRBVotingOption2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeAsyncGRBVotingOption(ctx context.Context, v any) (*models.SystemIntakeAsyncGRBVotingOption, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.SystemIntakeAsyncGRBVotingOption)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemIntakeAsyncGRBVotingOption2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeAsyncGRBVotingOption(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeAsyncGRBVotingOption) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOSystemIntakeCollaborator2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeCollaboratorᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.SystemIntakeCollaborator) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSystemIntakeCollaborator2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeCollaborator(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOSystemIntakeCollaboratorInput2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeCollaboratorInput(ctx context.Context, v any) ([]*models.SystemIntakeCollaboratorInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*models.SystemIntakeCollaboratorInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOSystemIntakeCollaboratorInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeCollaboratorInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSystemIntakeCollaboratorInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeCollaboratorInput(ctx context.Context, v any) (*models.SystemIntakeCollaboratorInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemIntakeCollaboratorInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemIntakeContact2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeContact(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeContact) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemIntakeContact(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSystemIntakeContractInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeContractInput(ctx context.Context, v any) (*models.SystemIntakeContractInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemIntakeContractInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemIntakeCosts2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeCosts(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeCosts) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemIntakeCosts(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSystemIntakeCostsInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeCostsInput(ctx context.Context, v any) (*models.SystemIntakeCostsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemIntakeCostsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemIntakeDocument2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocument(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeDocument) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemIntakeDocument(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSystemIntakeDocumentStatus2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocumentStatus(ctx context.Context, v any) (*models.SystemIntakeDocumentStatus, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.SystemIntakeDocumentStatus(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemIntakeDocumentStatus2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeDocumentStatus(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeDocumentStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOSystemIntakeFundingSourcesInput2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeFundingSourcesInput(ctx context.Context, v any) (*models.SystemIntakeFundingSourcesInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSystemIntakeFundingSourcesInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemIntakeGRBPresentationLinks2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBPresentationLinks(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeGRBPresentationLinks) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemIntakeGRBPresentationLinks(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSystemIntakeGRBReviewAsyncStatusType2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewAsyncStatusType(ctx context.Context, v any) (*models.SystemIntakeGRBReviewAsyncStatusType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.SystemIntakeGRBReviewAsyncStatusType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemIntakeGRBReviewAsyncStatusType2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewAsyncStatusType(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeGRBReviewAsyncStatusType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOSystemIntakeGRBReviewDiscussionPost2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewDiscussionPost(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeGRBReviewDiscussionPost) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemIntakeGRBReviewDiscussionPost(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSystemIntakeGRBReviewType2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewType(ctx context.Context, v any) (*models.SystemIntakeGRBReviewType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.SystemIntakeGRBReviewType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemIntakeGRBReviewType2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewType(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeGRBReviewType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOSystemIntakeGRBReviewerRole2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewerRole(ctx context.Context, v any) (*models.SystemIntakeGRBReviewerRole, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.SystemIntakeGRBReviewerRole)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemIntakeGRBReviewerRole2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewerRole(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeGRBReviewerRole) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOSystemIntakeGRBReviewerVotingRole2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewerVotingRole(ctx context.Context, v any) (*models.SystemIntakeGRBReviewerVotingRole, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(models.SystemIntakeGRBReviewerVotingRole)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemIntakeGRBReviewerVotingRole2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeGRBReviewerVotingRole(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeGRBReviewerVotingRole) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOSystemIntakeLCIDExpirationChange2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeLCIDExpirationChange(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeLCIDExpirationChange) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemIntakeLCIDExpirationChange(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSystemIntakeLCIDStatus2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeLCIDStatus(ctx context.Context, v any) (*models.SystemIntakeLCIDStatus, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.SystemIntakeLCIDStatus(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemIntakeLCIDStatus2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeLCIDStatus(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeLCIDStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) marshalOSystemIntakeNote2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeNote(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeNote) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SystemIntakeNote(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSystemIntakeStep2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeStep(ctx context.Context, v any) (*models.SystemIntakeStep, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.SystemIntakeStep(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemIntakeStep2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeStep(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeStep) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOSystemIntakeTRBFollowUp2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeTRBFollowUp(ctx context.Context, v any) (*models.SystemIntakeTRBFollowUp, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.SystemIntakeTRBFollowUp(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSystemIntakeTRBFollowUp2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐSystemIntakeTRBFollowUp(ctx context.Context, sel ast.SelectionSet, v *models.SystemIntakeTRBFollowUp) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOTRBCollabGroupOption2ᚕgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBCollabGroupOptionᚄ(ctx context.Context, v any) ([]models.TRBCollabGroupOption, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]models.TRBCollabGroupOption, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTRBCollabGroupOption2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBCollabGroupOption(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTRBCollabGroupOption2ᚕgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBCollabGroupOptionᚄ(ctx context.Context, sel ast.SelectionSet, v []models.TRBCollabGroupOption) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTRBCollabGroupOption2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBCollabGroupOption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTRBFundingSource2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBFundingSourceᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.TRBFundingSource) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTRBFundingSource2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBFundingSource(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTRBGuidanceLetter2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetter(ctx context.Context, sel ast.SelectionSet, v *models.TRBGuidanceLetter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TRBGuidanceLetter(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTRBGuidanceLetterInsightCategory2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterInsightCategory(ctx context.Context, v any) (models.TRBGuidanceLetterInsightCategory, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := models.TRBGuidanceLetterInsightCategory(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTRBGuidanceLetterInsightCategory2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterInsightCategory(ctx context.Context, sel ast.SelectionSet, v models.TRBGuidanceLetterInsightCategory) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) unmarshalOTRBGuidanceLetterInsightCategory2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterInsightCategory(ctx context.Context, v any) (*models.TRBGuidanceLetterInsightCategory, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.TRBGuidanceLetterInsightCategory(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTRBGuidanceLetterInsightCategory2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBGuidanceLetterInsightCategory(ctx context.Context, sel ast.SelectionSet, v *models.TRBGuidanceLetterInsightCategory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) marshalOTRBRequest2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequest(ctx context.Context, sel ast.SelectionSet, v *models.TRBRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TRBRequest(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTRBRequestChanges2map(ctx context.Context, v any) (map[string]interface{}, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTRBRequestChanges(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTRBRequestDocument2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestDocument(ctx context.Context, sel ast.SelectionSet, v *models.TRBRequestDocument) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TRBRequestDocument(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTRBRequestType2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestType(ctx context.Context, v any) (*models.TRBRequestType, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.TRBRequestType(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTRBRequestType2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBRequestType(ctx context.Context, sel ast.SelectionSet, v *models.TRBRequestType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOTRBSubjectAreaOption2ᚕgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBSubjectAreaOptionᚄ(ctx context.Context, v any) ([]models.TRBSubjectAreaOption, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]models.TRBSubjectAreaOption, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTRBSubjectAreaOption2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBSubjectAreaOption(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTRBSubjectAreaOption2ᚕgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBSubjectAreaOptionᚄ(ctx context.Context, sel ast.SelectionSet, v []models.TRBSubjectAreaOption) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTRBSubjectAreaOption2githubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBSubjectAreaOption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOTRBWhereInProcessOption2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBWhereInProcessOption(ctx context.Context, v any) (*models.TRBWhereInProcessOption, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := models.TRBWhereInProcessOption(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTRBWhereInProcessOption2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐTRBWhereInProcessOption(ctx context.Context, sel ast.SelectionSet, v *models.TRBWhereInProcessOption) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx context.Context, v any) (zero.Time, error) {
	res, err := models.UnmarshalZeroTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2githubᚗcomᚋgureguᚋnullᚋzeroᚐTime(ctx context.Context, sel ast.SelectionSet, v zero.Time) graphql.Marshaler {
	res := models.MarshalZeroTime(v)
	return res
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v any) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) unmarshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx context.Context, v any) ([]uuid.UUID, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]uuid.UUID, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOUUID2ᚕgithubᚗcomᚋgoogleᚋuuidᚐUUIDᚄ(ctx context.Context, sel ast.SelectionSet, v []uuid.UUID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, v any) (*uuid.UUID, error) {
	if v == nil {
		return nil, nil
	}
	res, err := models.UnmarshalUUID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v *uuid.UUID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := models.MarshalUUID(*v)
	return res
}

func (ec *executionContext) marshalOUpdateSystemIntakePayload2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUpdateSystemIntakePayload(ctx context.Context, sel ast.SelectionSet, v *models.UpdateSystemIntakePayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateSystemIntakePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v any) (*graphql.Upload, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalUpload(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v *graphql.Upload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalUpload(*v)
	return res
}

func (ec *executionContext) marshalOUserAccount2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋauthenticationᚐUserAccount(ctx context.Context, sel ast.SelectionSet, v *authentication.UserAccount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserAccount(ctx, sel, v)
}

func (ec *executionContext) marshalOUserError2ᚕᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUserErrorᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.UserError) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserError2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUserError(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOUserInfo2ᚖgithubᚗcomᚋcmsᚑenterpriseᚋeasiᚑappᚋpkgᚋmodelsᚐUserInfo(ctx context.Context, sel ast.SelectionSet, v *models.UserInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserInfo(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
