"""
UserError represents application-level errors that are the result of
either user or application developer error.
"""
type UserError {
  message: String!
  path: [String!]!
}

"""
An accessibility request represents a system that needs to go through
the 508 process.
"""
type AccessibilityRequest {
  documents: [AccessibilityRequestDocument!]!
  id: UUID!
  submittedAt: Time!
  system: System!
}

"""
A business owner is the person at CMS responsible for a system
"""
type BusinessOwner {
  component: String!
  name: String!
}

"""
A system is derived from a system intake and represents a computer system managed by CMS
"""
type System {
  businessOwner: BusinessOwner!
  id: UUID!
  lcid: String!
  name: String!
}

"""
Represents the availability of a document
"""
enum AccessibilityRequestDocumentStatus {
  """
  Passed security screen
  """
  AVAILABLE

  """
  Just uploaded
  """
  PENDING

  """
  Failed security screen
  """
  UNAVAILABLE
}

"""
A document that belongs to an accessibility request
"""
type AccessibilityRequestDocument {
  id: UUID!
  mimetype: String!
  name: String!
  status: AccessibilityRequestDocumentStatus!
  uploadedAt: Time!
}

"""
A collection of Systems
"""
type SystemConnection {
  edges: [SystemEdge!]!
  totalCount: Int!
}

"""
An edge of an SystemConnection
"""
type SystemEdge {
  cursor: String!
  node: System!
}

"""
Parameters required to create an AccessibilityRequest
"""
input CreateAccessibilityRequestInput {
  name: String!
}

"""
Result of CreateAccessibilityRequest
"""
type CreateAccessibilityRequestPayload {
  accessibilityRequest: AccessibilityRequest
  userErrors: [UserError!]
}

"""
Parameters required to generate a presigned upload URL
"""
input GeneratePresignedUploadURLInput {
  mimeType: String!
}

"""
Result of CreateAccessibilityRequest
"""
type GeneratePresignedUploadURLPayload {
  url: String
  userErrors: [UserError!]
}

"""
A collection of AccessibilityRequests
"""
type AccessibilityRequestsConnection {
  edges: [AccessibilityRequestEdge!]!
  totalCount: Int!
}

"""
An edge of an AccessibilityRequestConnection
"""
type AccessibilityRequestEdge {
  cursor: String!
  node: AccessibilityRequest!
}

"""
A 508 test instance
"""
type TestDate {
  date: Time!
  id: UUID!
  score: Int
  testType: TestDateTestType!
}

"""
The variety of a 508 test
"""
enum TestDateTestType {
  """
  Represents an initial 508 test
  """
  INITIAL

  """
  Represents a remediation test
  """
  REMEDIATION
}

"""
Parameters for creating a test date
"""
input CreateTestDateInput {
  date: Time!
  requestID: UUID!
  score: Int
  testType: TestDateTestType!
}

"""
Result of createTestDate
"""
type CreateTestDatePayload {
  testDate: TestDate
  userErrors: [UserError!]
}

"""
The root mutation
"""
type Mutation {
  createAccessibilityRequest(
    input: CreateAccessibilityRequestInput
  ): CreateAccessibilityRequestPayload
  createTestDate(input: CreateTestDateInput): CreateTestDatePayload
    @hasRole(role: EASI_508_TESTER)
  generatePresignedUploadURL(
    input: GeneratePresignedUploadURLInput
  ): GeneratePresignedUploadURLPayload
}

"""
The root query
"""
type Query {
  accessibilityRequest(id: UUID!): AccessibilityRequest
  accessibilityRequests(
    after: String
    first: Int!
  ): AccessibilityRequestsConnection
  systems(after: String, first: Int!): SystemConnection
}

"""
UUIDs are represented using 36 ASCII characters, for example B0511859-ADE6-4A67-8969-16EC280C0E1A
"""
scalar UUID

"""
Time values are represented as strings using RFC3339 format, for example 2019-10-12T07:20:50.52Z
"""
scalar Time

directive @hasRole(role: Role!) on FIELD_DEFINITION

"""
A user role associated with a job code
"""
enum Role {
  """
  A 508 Tester
  """
  EASI_508_TESTER

  """
  A 508 request owner
  """
  EASI_508_USER

  """
  A member of the GRT
  """
  EASI_GOVTEAM

  """
  A generic EASi user
  """
  EASI_USER
}
