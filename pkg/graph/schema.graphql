"""
UserError represents application-level errors that are the result of
either user or application developer error.
"""
type UserError {
  message: String!
  path: [String!]!
}

"""
Indicates the type of a request being made with the EASi system
"""
enum RequestType {
  ACCESSIBILITY_REQUEST
  GOVERNANCE_REQUEST
}

"""
PersonRole is an enumeration of values for a person's role
"""
enum PersonRole {
  PRODUCT_OWNER
  SYSTEM_OWNER
  SYSTEM_MAINTAINER
  CONTRACT_OFFICE_RSREPRESENTATIVE
  CLOUD_NAVIGATOR
  PRIVACY_ADVISOR
  CRA
  OTHER
  UNKNOWN
}

"""
Represents a request being made with the EASi system
"""
type Request {
  id: UUID!
  name: String
  submittedAt: Time
  type: RequestType!
  status: String!
  statusCreatedAt: Time
  lcid: String
  nextMeetingDate: Time
}

type RequestsConnection {
  edges: [RequestEdge!]!
}

type RequestEdge {
  node: Request!
}

"""
CedarAuthorityToOperate represents the response from the /authorityToOperate endpoint from the CEDAR Core API.
"""
type CedarAuthorityToOperate {
  cedarId: String!
  uuid: String!
  actualDispositionDate: Time
  containsPersonallyIdentifiableInformation: Boolean
  countOfTotalNonPrivilegedUserPopulation: Int!
  countOfOpenPoams: Int!
  countOfTotalPrivilegedUserPopulation: Int!
  dateAuthorizationMemoExpires: Time
  dateAuthorizationMemoSigned: Time
  eAuthenticationLevel: String
  fips199OverallImpactRating: Int
  fismaSystemAcronym: String
  fismaSystemName: String
  isAccessedByNonOrganizationalUsers: Boolean
  isPiiLimitedToUserNameAndPass: Boolean
  isProtectedHealthInformation: Boolean
  lastActScaDate: Time
  lastAssessmentDate: Time
  lastContingencyPlanCompletionDate: Time
  lastPenTestDate: Time
  piaCompletionDate: Time
  primaryCyberRiskAdvisor: String
  privacySubjectMatterExpert: String
  recoveryPointObjective: Float
  recoveryTimeObjective: Float
  systemOfRecordsNotice: [String!]!
  tlcPhase: String
  xlcPhase: String
}

"""
CedarSystem represents the response from the /system/detail endpoint from the CEDAR Core API.
Right now, this does not tie in with any other types defined here, and is a root node until that changes.
"""
type CedarSystem {
  id: String!
  name: String!
  description: String
	acronym: String
	status: String
	businessOwnerOrg: String
	businessOwnerOrgComp: String
	systemMaintainerOrg: String
	systemMaintainerOrgComp: String
  versionId: String
}

"""
CedarThreat represents the response from the /threat endpoint from the CEDAR Core API.
"""
type CedarThreat {
  alternativeId: String
  controlFamily: String
  daysOpen: Int
  id: String
  parentId: String
  type: String
  weaknessRiskLevel: String
}

"""
BusinessOwnerInformation contains information about the business owner for a CEDAR system
"""
type CedarBusinessOwnerInformation {
	beneficiaryAddressPurpose: [String!]!
	beneficiaryAddressPurposeOther: String
	beneficiaryAddressSource: [String!]!
	beneficiaryAddressSourceOther: String
	costPerYear: String
	isCmsOwned: Boolean
	numberOfContractorFte: String
	numberOfFederalFte: String
	numberOfSupportedUsersPerMonth: String
	storesBankingData: Boolean
	storesBeneficiaryAddress: Boolean
}

"""
SystemMaintainerInformation contains information about the system maintainer of a CEDAR system
"""
type CedarSystemMaintainerInformation {
	agileUsed: Boolean
	businessArtifactsOnDemand: Boolean
	deploymentFrequency: String
	devCompletionPercent: String
	devWorkDescription: String
	ecapParticipation: Boolean
	frontendAccessType: String
	hardCodedIPAddress: Boolean
	ip6EnabledAssetPercent: String
	ip6TransitionPlan: String
	ipEnabledAssetCount: Int
	majorRefreshDate: String
	netAccessibility: String
	omDocumentationOnDemand: Boolean
	plansToRetireReplace: String
	quarterToRetireReplace: String
	recordsManagementBucket: [String!]!
	sourceCodeOnDemand: Boolean
	systemCustomization: String
	systemDesignOnDemand: Boolean
	systemProductionDate: String
	systemRequirementsOnDemand: Boolean
	testPlanOnDemand: Boolean
	testReportsOnDemand: Boolean
	testScriptsOnDemand: Boolean
	yearToRetireReplace: String
}

"""
This is the Representation of Cedar system with additional related information
"""
type CedarSystemDetails {
 cedarSystem: CedarSystem!
 systemMaintainerInformation: CedarSystemMaintainerInformation!
 businessOwnerInformation: CedarBusinessOwnerInformation!
 roles: [CedarRole!]!
 deployments: [CedarDeployment!]!
 threats: [CedarThreat!]!
 urls: [CedarURL!]!
}

"""
Represents a user's bookmark of a cedar system
"""
type CedarSystemBookmark {
  euaUserId: String!
  cedarSystemId: String!
}

"""
Represents a person response from CEDAR LDAP
"""
type UserInfo {
  commonName: String!
  email: String!
  euaUserId: String!
}

"""
The data needed to bookmark a cedar system
"""
input CreateCedarSystemBookmarkInput {
  cedarSystemId: String!
}

"""
The payload when bookmarking a cedar system
"""
type CreateCedarSystemBookmarkPayload {
  cedarSystemBookmark: CedarSystemBookmark
}

"""
The payload when deleting a bookmark for a cedar system
"""
type DeleteCedarSystemBookmarkPayload {
  cedarSystemId: String!
}

"""
CedarDeployment represents a deployment of a system; this information is returned from the CEDAR Core API
"""
type CedarDeployment {
  id: String!
  name: String!
  systemID: String!
  startDate: Time
  endDate: Time
  isHotSite: String
  description: String
  contractorName: String
  systemVersion: String
  hasProductionData: String
  replicatedSystemElements: [String!]!
  deploymentType: String
  systemName: String
  deploymentElementID: String
  state: String
  status: String
  wanType: String
  dataCenter: CedarDataCenter
}

"""
CedarDataCenter represents the data center used by a CedarDeployment
"""
type CedarDataCenter {
  id: String
  name: String
  version: String
  description: String
  state: String
  status: String
  startDate: Time
  endDate: Time
  address1: String
  address2: String
  city: String
  addressState: String
  zip: String
}

"""
The possible types of assignees for CedarRoles
"""
enum CedarAssigneeType {
  PERSON
  ORGANIZATION
}

"""
CedarRoleType represents a type of role that a user or organization can hold for some system, i.e. "Business Owner" or "Project Lead"
"""
type CedarRoleType {
  id: String!
  application: String!
  name: String!
  description: String
}

"""
CedarRole represents a role assigned to a person or organization for a system; this information is returned from the CEDAR Core API
"""
type CedarRole {
  application: String!
  objectID: String!
  roleTypeID: String!
  assigneeType: CedarAssigneeType
  assigneeUsername: String
  assigneeEmail: String
  assigneeOrgID: String
  assigneeOrgName: String
  assigneeFirstName: String
  assigneeLastName: String
  assigneePhone: String
  assigneeDesc: String
  roleTypeName: String
  roleTypeDesc: String
  roleID: String
  objectType: String
}

input SetRolesForUserOnSystemInput {
  cedarSystemID: String!
  euaUserId: String!
  desiredRoleTypeIDs: [String!]!
}

"""
CedarURL represents info about a URL associated with a CEDAR object (usually a system); this information is returned from the CEDAR Core API
"""
type CedarURL {
  id: String!
  address: String
  isBehindWebApplicationFirewall: Boolean
  isAPIEndpoint: Boolean
  isVersionCodeRepository: Boolean
  urlHostingEnv: String
}

"""
CedarExchangeTypeOfDataItem is one item of the TypeofData slice in a CedarExchange
"""
type CedarExchangeTypeOfDataItem {
  id: String
  name: String
}


enum ExchangeDirection {
  SENDER
  RECEIVER
}

"""
CedarExchange represents info about how data is exchanged between a CEDAR system and another system
"""
type CedarExchange {
	connectionFrequency: [String!]!
	containsBankingData: Boolean
	containsBeneficiaryAddress: Boolean
	containsPhi: Boolean
	containsPii: Boolean
	dataExchangeAgreement: String
	dataFormat: String
	dataFormatOther: String
	exchangeDescription: String
	exchangeEndDate: Time
	exchangeId: String
	exchangeName: String
	exchangeRetiredDate: Time
	exchangeStartDate: Time
	exchangeState: String
	exchangeVersion: String
  exchangeDirection: ExchangeDirection
	fromOwnerId: String
	fromOwnerName: String
	fromOwnerType: String
	isBeneficiaryMailingFile: Boolean
	numOfRecords: String
	sharedViaApi: Boolean
	toOwnerId: String
	toOwnerName: String
	toOwnerType: String
	typeOfData: [CedarExchangeTypeOfDataItem!]!
}

"""
An accessibility request represents a system that needs to go through
the 508 process
"""
type AccessibilityRequest {
  documents: [AccessibilityRequestDocument!]!
  id: UUID!
  name: String!
  relevantTestDate: TestDate
  submittedAt: Time!
  system: System
  testDates: [TestDate!]!
  euaUserId: String!
  statusRecord: AccessibilityRequestStatusRecord!
  notes: [AccessibilityRequestNote!]! @hasRole(role: EASI_508_TESTER_OR_USER)
  cedarSystemId: String
}

"""
Indicates the status of a 508/accessibility request
"""
enum AccessibilityRequestStatus {
  OPEN
  IN_REMEDIATION
  CLOSED
  DELETED
}

"""
An accessibility request status record is the data related to a status action
"""
type AccessibilityRequestStatusRecord {
  id: UUID!
  requestID: UUID!
  status: AccessibilityRequestStatus!
  euaUserId: String!
  createdAt: Time!
}

"""
Parameters for updating a 508/accessibility request's status
"""
input UpdateAccessibilityRequestStatus {
  requestID: UUID!
  status: AccessibilityRequestStatus!
}

"""
Result of updating a 508/accessibility request's status
"""
type UpdateAccessibilityRequestStatusPayload {
  id: UUID!
  requestID: UUID!
  status: AccessibilityRequestStatus!
  euaUserId: String!
  userErrors: [UserError!]
}

"""
Parameters for updating a 508/accessibility request's associated CEDAR system
"""
input UpdateAccessibilityRequestCedarSystemInput {
  id: UUID!
  cedarSystemId: String!
}

"""
Result of updating a 508/accessibility request's associated CEDAR system
"""
type UpdateAccessibilityRequestCedarSystemPayload {
  id: UUID!
  accessibilityRequest: AccessibilityRequest
}

"""
The data used when adding a note to a 508/accessibility request
"""
input CreateAccessibilityRequestNoteInput {
  requestID: UUID!
  note: String!
  shouldSendEmail: Boolean!
}

"""
Represents a note added to a 508/accessibility request by a user
"""
type AccessibilityRequestNote {
  id: UUID!
  requestID: UUID!
  createdAt: Time!
  note: String!
  authorName: String!
}

"""
The payload for adding a note to a 508/accessibility request
"""
type CreateAccessibilityRequestNotePayload {
  accessibilityRequestNote: AccessibilityRequestNote!
  userErrors: [UserError!]
}

"""
A business owner is the person at CMS responsible for a system
"""
type BusinessOwner {
  component: String!
  name: String!
}

"""
A System is derived from a system intake and represents a computer system
managed by CMS
"""
type System {
  businessOwner: BusinessOwner!
  id: UUID!
  lcid: String!
  name: String!
}

"""
Indicates the status of a document that has been attached to 508/accessibility
request, which will be scanned for viruses before it is made available
"""
enum AccessibilityRequestDocumentStatus {
  AVAILABLE
  PENDING
  UNAVAILABLE
}

"""
Represents the common options for document type that is attached to a
508/accessibility request
"""
enum AccessibilityRequestDocumentCommonType {
  AWARDED_VPAT
  OTHER
  REMEDIATION_PLAN
  TESTING_VPAT
  TEST_PLAN
  TEST_RESULTS
}

"""
Denotes type of a document that is attached to a 508/accessibility request,
which can be one of a number of common types, or another user-specified type
"""
type AccessibilityRequestDocumentType {
  commonType: AccessibilityRequestDocumentCommonType!
  otherTypeDescription: String
}

"""
Represents a document attached to a 508/accessibility request
"""
type AccessibilityRequestDocument {
  documentType: AccessibilityRequestDocumentType!
  id: UUID!
  mimeType: String!
  name: String!
  requestID: UUID!
  size: Int!
  status: AccessibilityRequestDocumentStatus!
  uploadedAt: Time!
  url: String!
}

type SystemConnection {
  edges: [SystemEdge!]!
}

type SystemEdge {
  node: System!
}

"""
The data needed to initialize a 508/accessibility request
"""
input CreateAccessibilityRequestInput {
  intakeID: UUID
  name: String!
  cedarSystemId: String
}

"""
The payload containing the data needed to initialize an AccessibilityRequest
"""
type CreateAccessibilityRequestPayload {
  accessibilityRequest: AccessibilityRequest
  userErrors: [UserError!]
}

"""
Denotes the reason a 508/accessibility request was deleted
"""
enum AccessibilityRequestDeletionReason {
  INCORRECT_APPLICATION_AND_LIFECYCLE_ID
  NO_TESTING_NEEDED
  OTHER
}

"""
The input data needed to delete a 508/accessibility request
"""
input DeleteAccessibilityRequestInput {
  id: UUID!
  reason: AccessibilityRequestDeletionReason!
}

"""
The payload data sent when deleting a 508/accessibility request
"""
type DeleteAccessibilityRequestPayload {
  id: UUID
  userErrors: [UserError!]
}

"""
Input associated with a document to be uploaded to a 508/accessibility request
"""
input GeneratePresignedUploadURLInput {
  fileName: String!
  mimeType: String!
  size: Int!
}

"""
URL generated for a document to be uploaded to a 508/accessibility request
"""
type GeneratePresignedUploadURLPayload {
  url: String
  userErrors: [UserError!]
}

type AccessibilityRequestsConnection {
  edges: [AccessibilityRequestEdge!]!
}

type AccessibilityRequestEdge {
  node: AccessibilityRequest!
}

"""
A 508 test instance
"""
type TestDate {
  date: Time!
  id: UUID!
  score: Int
  testType: TestDateTestType!
}

"""
The type of test added to a 508/accessibility request
"""
enum TestDateTestType {
  INITIAL
  REMEDIATION
}

"""
The input required to add a test date/score to a 508/accessibility request
"""
input CreateTestDateInput {
  date: Time!
  requestID: UUID!
  score: Int
  testType: TestDateTestType!
}

"""
The payload for the input required to add a test date/score to a
508/accessibility request
"""
type CreateTestDatePayload {
  testDate: TestDate
  userErrors: [UserError!]
}

"""
The input required to update a test date/score
"""
input UpdateTestDateInput {
  date: Time!
  id: UUID!
  score: Int
  testType: TestDateTestType!
}

"""
The payload for the input required to update a test date/score
"""
type UpdateTestDatePayload {
  testDate: TestDate
  userErrors: [UserError!]
}

"""
The input required to delete a test date/score
"""
input DeleteTestDateInput {
  id: UUID!
}

"""
The payload for the input required to delete a test date/score
"""
type DeleteTestDatePayload {
  testDate: TestDate
  userErrors: [UserError!]
}

"""
The input data used for adding a document to a 508/accessibility request
"""
input CreateAccessibilityRequestDocumentInput {
  commonDocumentType: AccessibilityRequestDocumentCommonType!
  mimeType: String!
  name: String!
  otherDocumentTypeDescription: String
  requestID: UUID!
  size: Int!
  url: String!
}

"""
The payload containing the input data used for adding a document to a
508/accessibility request
"""
type CreateAccessibilityRequestDocumentPayload {
  accessibilityRequestDocument: AccessibilityRequestDocument
  userErrors: [UserError!]
}

"""
The input used to delete a document from a 508/accessibility request
"""
input DeleteAccessibilityRequestDocumentInput {
  id: UUID!
}

"""
The payload used to delete a document from a 508/accessibility request
"""
type DeleteAccessibilityRequestDocumentPayload {
  id: UUID
}

"""
A solution proposal within a business case
"""
type BusinessCaseSolution {
  acquisitionApproach: String
  cons: String
  costSavings: String
  hasUi: String
  hostingCloudServiceType: String
  hostingLocation: String
  hostingType: String
  pros: String
  securityIsApproved: Boolean
  securityIsBeingReviewed: String
  summary: String
  title: String
}

"""
The cost phase of a
"""
enum LifecycleCostPhase {
  DEVELOPMENT
  OPERATIONS_AND_MAINTENANCE
  OTHER
}

"""
The type of a lifecycle cost solution, part of a business case
"""
enum LifecycleCostSolution {
  A
  B
  PREFERRED
}

"""
Represents a lifecycle cost phase
"""
enum LifecycleCostYear {
  LIFECYCLE_COST_YEAR_1
  LIFECYCLE_COST_YEAR_2
  LIFECYCLE_COST_YEAR_3
  LIFECYCLE_COST_YEAR_4
  LIFECYCLE_COST_YEAR_5
}

"""
Information related to the estimated costs over one lifecycle phase for a
system with a given solution
"""
type EstimatedLifecycleCost {
  businessCaseId: UUID!
  cost: Int
  id: UUID!
  phase: LifecycleCostPhase
  solution: LifecycleCostSolution
  year: LifecycleCostYear
}

"""
The status of a business case associated with an system IT governence request
"""
enum BusinessCaseStatus {
  CLOSED
  OPEN
}

"""
A business case associated with an system IT governence request; contains
equester's justification for their system request
"""
type BusinessCase {
  alternativeASolution: BusinessCaseSolution
  alternativeBSolution: BusinessCaseSolution
  businessNeed: String
  businessOwner: String
  cmsBenefit: String
  createdAt: Time!
  currentSolutionSummary: String
  euaUserId: String!
  id: UUID!
  lifecycleCostLines: [EstimatedLifecycleCost!]
  preferredSolution: BusinessCaseSolution
  priorityAlignment: String
  projectName: String
  requester: String
  requesterPhoneNumber: String
  status: BusinessCaseStatus!
  successIndicators: String
  systemIntake: SystemIntake!
  updatedAt: Time!
}

"""
The status of a system's IT governence request
"""
enum SystemIntakeStatus {
  BIZ_CASE_CHANGES_NEEDED
  BIZ_CASE_DRAFT
  BIZ_CASE_DRAFT_SUBMITTED
  BIZ_CASE_FINAL_NEEDED
  BIZ_CASE_FINAL_SUBMITTED
  INTAKE_DRAFT
  INTAKE_SUBMITTED
  LCID_ISSUED
  NEED_BIZ_CASE
  NOT_APPROVED
  """
  Request is not an IT request
  """
  NOT_IT_REQUEST
  """
  Request requires no further governance
  """
  NO_GOVERNANCE
  """
  Request is ready for Governance Review Board meeting
  """
  READY_FOR_GRB
  """
  Request is ready for Governance Review Team meeting
  """
  READY_FOR_GRT
  """
  Request for shutdown of existing system is complete
  """
  SHUTDOWN_COMPLETE
  """
  Request for shutdown of existing system is in progress
  """
  SHUTDOWN_IN_PROGRESS
  WITHDRAWN
}

"""
The type of an IT governance (system) request
"""
enum SystemIntakeRequestType {
  MAJOR_CHANGES
  NEW
  RECOMPETE
  SHUTDOWN
}

"""
Represents the OIT business owner of a system
"""
type SystemIntakeBusinessOwner {
  component: String
  name: String
}

"""
Represents a date used for start and end dates on a contract
"""
type ContractDate {
  day: String
  month: String
  year: String
}

"""
Represents a contract for work on a system
"""
type SystemIntakeContract {
  contractor: String
  endDate: ContractDate!
  hasContract: String
  startDate: ContractDate!
  vehicle: String
  number: String
}

"""
Represents expectations about a system's additional costs
"""
type SystemIntakeCosts {
  expectedIncreaseAmount: String
  isExpectingIncrease: String
}

"""
Represents a contact in OIT who is collaborating with the user
creating a system IT governance request
"""
type SystemIntakeCollaborator {
  acronym: String!
  collaborator: String!
  key: String!
  label: String!
  name: String!
}

"""
Contains multiple system request collaborators, if any
"""
type SystemIntakeGovernanceTeam {
  isPresent: Boolean
  teams: [SystemIntakeCollaborator!]
}

"""
The Information System Security Officer (ISSO) that is
assicuated with a system request, if any
"""
type SystemIntakeISSO {
  isPresent: Boolean
  name: String
}

"""
The author of a note added to a system request
"""
type SystemIntakeNoteAuthor {
  eua: String!
  name: String!
}

"""
A note added to a system request
"""
type SystemIntakeNote {
  author: SystemIntakeNoteAuthor!
  content: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
  isArchived: Boolean!
  editor: UserInfo
  id: UUID!
}

"""
The product manager associated with a system
"""
type SystemIntakeProductManager {
  component: String
  name: String
}

"""
The contact who made an IT governance request for a system
"""
type SystemIntakeRequester {
  component: String
  email: String
  name: String!
}

"""
Represents an IT governance request for a system
"""
type SystemIntake {
  actions: [SystemIntakeAction!]!
  adminLead: String
  archivedAt: Time
  businessCase: BusinessCase
  businessNeed: String
  businessOwner: SystemIntakeBusinessOwner!
  businessSolution: String
  contract: SystemIntakeContract!
  costs: SystemIntakeCosts!
  createdAt: Time!
  currentStage: String
  decisionNextSteps: String
  eaCollaborator: String
  eaCollaboratorName: String
  euaUserId: String!
  existingFunding: Boolean
  fundingSources: [SystemIntakeFundingSource!]!
  governanceTeams: SystemIntakeGovernanceTeam!
  grbDate: Time
  grtDate: Time
  grtFeedbacks: [GRTFeedback!]!
  id: UUID!
  isso: SystemIntakeISSO!
  lcid: String
  lcidExpiresAt: Time
  lcidScope: String
  lcidCostBaseline: String
  needsEaSupport: Boolean
  notes: [SystemIntakeNote!]!
  oitSecurityCollaborator: String
  oitSecurityCollaboratorName: String
  productManager: SystemIntakeProductManager!
  projectAcronym: String
  rejectionReason: String
  requestName: String
  requestType: SystemIntakeRequestType!
  requester: SystemIntakeRequester!
  status: SystemIntakeStatus!
  submittedAt: Time
  trbCollaborator: String
  trbCollaboratorName: String
  updatedAt: Time
  grtReviewEmailBody: String
  decidedAt: Time
  businessCaseId: UUID
  lastAdminNote: LastAdminNote!
  cedarSystemId: String
  documents: [SystemIntakeDocument!]!
  hasUiChanges: Boolean
}

"""
The input data used to set the requester of a system request
"""
input SystemIntakeRequesterInput {
  name: String!
}

"""
The input data used to initialize an IT governance request for a system
"""
input CreateSystemIntakeInput {
  requestType: SystemIntakeRequestType!
  requester: SystemIntakeRequesterInput!
}

"""
The input data used to set the requester for a system request along with the
requester's business component
"""
input SystemIntakeRequesterWithComponentInput {
  name: String!
  component: String!
}

"""
The input data used to set the CMS business owner of a system
"""
input SystemIntakeBusinessOwnerInput {
  name: String!
  component: String!
}

"""
The input data used to set the CMS product manager/lead of a system
"""
input SystemIntakeProductManagerInput {
  name: String!
  component: String!
}

"""
The input data used to set the ISSO associated with a system request, if any
"""
input SystemIntakeISSOInput {
  isPresent: Boolean
  name: String
}

"""
The input data used to add an OIT collaborator for a system request
"""
input SystemIntakeCollaboratorInput {
  collaborator: String!
  name: String!
  key: String!
}

"""
The input data used to set the list of OIT collaborators for a system request
"""
input SystemIntakeGovernanceTeamInput {
  isPresent: Boolean
  teams: [SystemIntakeCollaboratorInput]
}

"""
The input data used to update the contact details of the people associated with
a system request
"""
input UpdateSystemIntakeContactDetailsInput {
  id: UUID!
  requester: SystemIntakeRequesterWithComponentInput!,
  businessOwner: SystemIntakeBusinessOwnerInput!,
  productManager: SystemIntakeProductManagerInput!,
  isso: SystemIntakeISSOInput!,
  governanceTeams: SystemIntakeGovernanceTeamInput!,
}

"""
Input to update some fields on a system request
"""
input UpdateSystemIntakeRequestDetailsInput {
  id: UUID!
  requestName: String
  businessNeed: String
  businessSolution: String
  needsEaSupport: Boolean
  currentStage: String
  cedarSystemId: String
  hasUiChanges: Boolean
}

"""
Represents the source of funding for a system
"""
type SystemIntakeFundingSource {
  id: UUID!
  fundingNumber: String
  source: String
}

"""
Represents the source of funding for a system
"""
input SystemIntakeFundingSourceInput {
  fundingNumber: String
  source: String
}

"""
The input required to specify the funding source(s) for a system intake
"""
input SystemIntakeFundingSourcesInput {
  existingFunding: Boolean
  fundingSources: [SystemIntakeFundingSourceInput!]!
}

"""
Input data for estimated system cost increases associated with a system request
"""
input SystemIntakeCostsInput {
  expectedIncreaseAmount: String
  isExpectingIncrease: String
}

"""
Input data containing information about a contract related to a system request
"""
input SystemIntakeContractInput {
  contractor: String
  endDate: Time
  hasContract: String
  startDate: Time
  number: String
}

"""
Input data for updating contract details related to a system request
"""
input UpdateSystemIntakeContractDetailsInput {
  id: UUID!
  fundingSources: SystemIntakeFundingSourcesInput
  costs: SystemIntakeCostsInput
  contract: SystemIntakeContractInput
}

"""
Input data for updating a system intake's relationship to a CEDAR system
"""
input UpdateSystemIntakeLinkedCedarSystemInput {
  id: UUID!
  cedarSystemId: String
}

"""
Input data for updating a system intake's relationship to a contract
"""
input UpdateSystemIntakeLinkedContractInput {
  id: UUID!
  contractNumber: String
}

"""
Input data for extending a system request's lifecycle ID
"""
input CreateSystemIntakeActionExtendLifecycleIdInput {
  id: UUID!
  expirationDate: Time
  nextSteps: String
  scope: String!
  costBaseline: String
  notificationRecipients: EmailNotificationRecipients
}

"""
Payload data for extending a system request's lifecycle ID
"""
type CreateSystemIntakeActionExtendLifecycleIdPayload {
  systemIntake: SystemIntake
  userErrors: [UserError!]
}

"""
Represents the type of an action that is being done to a system request
"""
enum SystemIntakeActionType {
  BIZ_CASE_NEEDS_CHANGES
  CREATE_BIZ_CASE
  GUIDE_RECEIVED_CLOSE
  EXTEND_LCID
  ISSUE_LCID
  NEED_BIZ_CASE
  NO_GOVERNANCE_NEEDED
  NOT_IT_REQUEST
  NOT_RESPONDING_CLOSE
  PROVIDE_FEEDBACK_NEED_BIZ_CASE
  PROVIDE_GRT_FEEDBACK_BIZ_CASE_DRAFT
  PROVIDE_GRT_FEEDBACK_BIZ_CASE_FINAL
  READY_FOR_GRB
  READY_FOR_GRT
  REJECT
  SEND_EMAIL
  SUBMIT_BIZ_CASE
  SUBMIT_FINAL_BIZ_CASE
  SUBMIT_INTAKE
}

"""
An action taken on a system intake, often resulting in a change in status.
"""
type SystemIntakeAction {
  id: UUID!
  systemIntake: SystemIntake!
  type: SystemIntakeActionType!
  actor: SystemIntakeActionActor!
  feedback: String
  lcidExpirationChange: SystemIntakeLCIDExpirationChange
  createdAt: Time!
}

"""
Contains the data needed to change the expiration date of a system request's
lifecycle ID
"""
type SystemIntakeLCIDExpirationChange {
  previousDate: Time!
  newDate: Time!
  previousScope: String
  newScope: String
  previousNextSteps: String
  newNextSteps: String
  previousCostBaseline: String
  newCostBaseline: String
 }

"""
The contact who is associated with an action being done to a system request
"""
type SystemIntakeActionActor {
  name: String!
  email: String!
}

"""
Feedback intended for a business owner before they proceed to writing a
business case for a system request
"""
input AddGRTFeedbackInput {
  emailBody: String!
  feedback: String!
  intakeID: UUID!
  notificationRecipients: EmailNotificationRecipients
}

"""
Payload for adding GRT feedback to a system request (contains the system
request ID)
"""
type AddGRTFeedbackPayload {
  id: UUID
}

"""
The input data required to issue a lifecycle ID for a system's IT governance
request
"""
input IssueLifecycleIdInput {
  expiresAt: Time!
  feedback: String!
  intakeId: UUID!
  lcid: String
  nextSteps: String
  scope: String!
  costBaseline: String
  notificationRecipients: EmailNotificationRecipients
}

"""
Input data for rejection of a system's IT governance request
"""
input RejectIntakeInput {
  feedback: String!
  intakeId: UUID!
  nextSteps: String
  reason: String!
  notificationRecipients: EmailNotificationRecipients
}

"""
Input data used to update the admin lead assigned to a system IT governance
request
"""
input UpdateSystemIntakeAdminLeadInput {
  adminLead: String!
  id: UUID!
}

"""
The most recent note added by an admin to a system request
"""
type LastAdminNote {
  content: String
  createdAt: Time
}

"""
Indicates who the source is of feedback on a system request
"""
enum GRTFeedbackType {
  BUSINESS_OWNER
  GRB
}

"""
Feedback from the GRT to a business owner or GRB
"""
type GRTFeedback {
  id: UUID
  createdAt: Time!
  feedback: String
  feedbackType: GRTFeedbackType
}

"""
Input data used to update GRT and GRB dates for a system request
"""
input UpdateSystemIntakeReviewDatesInput {
  grbDate: Time
  grtDate: Time
  id: UUID!
}

"""
Input data for adding a note to a system request
"""
input CreateSystemIntakeNoteInput {
  content: String!
  authorName: String!
  intakeId: UUID!
}

"""
Input data for updating an IT governance admin note
"""
input UpdateSystemIntakeNoteInput {
  content: String!
  isArchived: Boolean!
  id: UUID!
}

"""
The payload for updating a system's IT governance request
"""
type UpdateSystemIntakePayload {
  systemIntake: SystemIntake
  userErrors: [UserError!]
}

"""
Input to add feedback to a system request
"""
input BasicActionInput {
  feedback: String!
  intakeId: UUID!
  notificationRecipients: EmailNotificationRecipients
}

"""
Input to submit an intake for review
"""
input SubmitIntakeInput {
  id: UUID!
}

"""
The current user's Launch Darkly key
"""
type LaunchDarklySettings {
  userKey: String!
  signedHash: String!
}

"""
The current user of the application
"""
type CurrentUser {
  launchDarkly: LaunchDarklySettings!
}

"""
Represents a contact associated with a system intake
"""
type SystemIntakeContact {
  id: UUID!
  euaUserId: String!
  systemIntakeId: UUID!
  component: String!
  role: String!
}

"""
Represents a contact associated with a system intake, including additional fields from CEDAR
"""
type AugmentedSystemIntakeContact {
  id: UUID!
  euaUserId: String!
  systemIntakeId: UUID!
  component: String!
  role: String!
  commonName: String
  email: String
}

"""
The data needed to associate a contact with a system intake
"""
input CreateSystemIntakeContactInput {
  euaUserId: String!
  systemIntakeId: UUID!
  component: String!
  role: String!
}

"""
The data needed to update a contact associated with a system intake
"""
input UpdateSystemIntakeContactInput {
  id: UUID!
  euaUserId: String!
  systemIntakeId: UUID!
  component: String!
  role: String!
}

"""
The data needed to delete a system intake contact
"""
input DeleteSystemIntakeContactInput {
  id: UUID!
}

"""
The payload when creating a system intake contact
"""
type CreateSystemIntakeContactPayload {
  systemIntakeContact: SystemIntakeContact
}

"""
The payload when deleting a system intake contact
"""
type DeleteSystemIntakeContactPayload {
  systemIntakeContact: SystemIntakeContact
}

input EmailNotificationRecipients {
  regularRecipientEmails: [EmailAddress!]!
  shouldNotifyITGovernance: Boolean!
  shouldNotifyITInvestment: Boolean!
}

"""
The payload when retrieving system intake contacts
"""
type SystemIntakeContactsPayload {
  systemIntakeContacts: [AugmentedSystemIntakeContact!]!
  invalidEUAIDs: [String!]!
}

"""
The inputs to the user feedback form
"""
input SendFeedbackEmailInput {
  isAnonymous: Boolean!
  canBeContacted: Boolean!
  easiServicesUsed: [String!]!
  cmsRole: String!
  systemEasyToUse: String!
  didntNeedHelpAnswering: String!
  questionsWereRelevant: String!
  hadAccessToInformation: String!
  howSatisfied: String!
  howCanWeImprove: String!
}

input SendCantFindSomethingEmailInput {
  body: String!
}

input SendReportAProblemEmailInput {
  isAnonymous: Boolean!
  canBeContacted: Boolean!
  easiService: String!
  whatWereYouDoing: String!
  whatWentWrong: String!
  howSevereWasTheProblem: String!
}

"""
Represents a request for support from the Technical Review Board (TRB)
"""
type TRBRequest {
  id: UUID!
  name: String
  archived: Boolean!
  type: TRBRequestType!
  state: TRBRequestState!
  status: TRBRequestStatus!
  attendees: [TRBRequestAttendee!]!
  feedback: [TRBRequestFeedback!]!
  documents: [TRBRequestDocument!]!
  form: TRBRequestForm!
  adviceLetter: TRBAdviceLetter
  taskStatuses: TRBTaskStatuses!
  consultMeetingTime: Time
  trbLead: String
  trbLeadInfo: UserInfo!
  requesterInfo: UserInfo!
  requesterComponent: String
  adminNotes: [TRBAdminNote!]! @hasRole(role: EASI_TRB_ADMIN)
  isRecent: Boolean!
  createdBy: String!
  createdAt: Time! # will be used for UploadedAt in frontend
  modifiedBy: String
  modifiedAt: Time
}

"""
Wraps all of the various status on the TRB task list into one type
"""
type TRBTaskStatuses {
  formStatus: TRBFormStatus!
  feedbackStatus: TRBFeedbackStatus!
  consultPrepStatus: TRBConsultPrepStatus!
  attendConsultStatus: TRBAttendConsultStatus!
  adviceLetterStatus: TRBAdviceLetterStatus!
  adviceLetterStatusTaskList: TRBAdviceLetterStatusTaskList!
}

"""
TRBRequestChanges represents the possible changes you can make to a TRB request when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
https://gqlgen.com/reference/changesets/
"""
input TRBRequestChanges @goModel(model: "map[string]interface{}") {
    name: String
    archived: Boolean
    type: TRBRequestType
}

"""
Represents an EUA user who is included as an attendee for a TRB request
"""
type TRBRequestAttendee {
  id: UUID!
  euaUserId: String! # Sort of duplicative, as this is also in UserInfo
  userInfo: UserInfo
  trbRequestId: UUID!
  component: String
  role: PersonRole
  createdBy: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
}

"""
The data needed add a TRB request attendee to a TRB request
"""
input CreateTRBRequestAttendeeInput {
  euaUserId: String!
  trbRequestId: UUID!
  component: String!
  role: PersonRole!
}

"""
Represents an EUA user who is included as an attendee for a TRB request
"""
input UpdateTRBRequestAttendeeInput {
  id: UUID!
  component: String!
  role: PersonRole!
}

"""
Enumeration of the possible statuses of documents uploaded in the TRB workflow
"""
enum TRBRequestDocumentStatus {
  AVAILABLE
  PENDING
  UNAVAILABLE
}

"""
Enumeration of the possible statuses of documents uploaded in the System Intake
"""
enum SystemIntakeDocumentStatus {
  AVAILABLE
  PENDING
  UNAVAILABLE
}

"""
Represents the common options for document type that is attached to a
508/accessibility request
"""
enum TRBDocumentCommonType {
  ARCHITECTURE_DIAGRAM
  PRESENTATION_SLIDE_DECK
  BUSINESS_CASE
  OTHER
}

"""
Represents the common options for document type that is attached to a
System Intake document
"""
enum SystemIntakeDocumentCommonType {
  SOO_SOW
  DRAFT_ICGE
  OTHER
}

"""
Denotes the type of a document attached to a TRB request,
which can be one of a number of common types, or a free-text user-specified type
"""
type TRBRequestDocumentType {
  commonType: TRBDocumentCommonType!
  otherTypeDescription: String
}

"""
Represents a document attached to a TRB request
"""
type TRBRequestDocument {
  documentType: TRBRequestDocumentType!
  id: UUID!
  fileName: String!
  status: TRBRequestDocumentStatus!
  uploadedAt: Time!
  url: String!
}

"""
The data needed to upload a TRB document and attach it to a request with metadata
"""
input CreateTRBRequestDocumentInput {
  requestID: UUID!
  fileData: Upload!
  documentType: TRBDocumentCommonType!
  otherTypeDescription: String  # Needed if documentType == OTHER
}

"""
The data needed to upload a System Intake document and attach it to a request with metadata
"""
input CreateSystemIntakeDocumentInput {
  requestID: UUID!
  fileData: Upload!
  documentType: SystemIntakeDocumentCommonType!
  otherTypeDescription: String
}

"""
Data returned after uploading a document to a TRB request
"""
type CreateTRBRequestDocumentPayload {
  document: TRBRequestDocument
}

"""
Data returned after deleting a document attached to a TRB request
"""
type DeleteTRBRequestDocumentPayload {
  document: TRBRequestDocument
}

"""Represents a document attached to a System Intake"""
type SystemIntakeDocument {
  documentType: SystemIntakeDocumentType!
  id: UUID!
  fileName: String!
  status: SystemIntakeDocumentStatus!
  uploadedAt: Time!
  url: String!
}

"""
Denotes the type of a document attached to a System Intake,
which can be one of a number of common types, or a free-text user-specified type
"""
type SystemIntakeDocumentType {
  commonType: SystemIntakeDocumentCommonType!
  otherTypeDescription: String
}

"""Data returned after uploading a document to a System Intake"""
type CreateSystemIntakeDocumentPayload {
  document: SystemIntakeDocument
}

"""Data returned after deleting a document attached to a System Intake"""
type DeleteSystemIntakeDocumentPayload {
  document: SystemIntakeDocument
}

"""
Represents an option selected to the "where are you in the process?" TRB request form
"""
enum TRBWhereInProcessOption {
  I_HAVE_AN_IDEA_AND_WANT_TO_BRAINSTORM
  CONTRACTING_WORK_HAS_STARTED
  DEVELOPMENT_HAS_RECENTLY_STARTED
  DEVELOPMENT_IS_SIGNIFICANTLY_UNDERWAY
  THE_SYSTEM_IS_IN_OPERATION_AND_MAINTENANCE
  OTHER
}

"""
Represents an option selected for collaboration groups in the TRB request form
"""
enum TRBCollabGroupOption {
  SECURITY
  ENTERPRISE_ARCHITECTURE
  CLOUD
  PRIVACY_ADVISOR
  GOVERNANCE_REVIEW_BOARD
  OTHER
}

"""
Represents the status of a TRB request form
"""
enum TRBFormStatus {
  READY_TO_START
  IN_PROGRESS
  COMPLETED
}

"""
Represents the status of the TRB feedback step
"""
enum TRBFeedbackStatus {
  CANNOT_START_YET
  READY_TO_START
  IN_REVIEW
  EDITS_REQUESTED
  COMPLETED
}

"""
Represents the status of the TRB consult step
"""
enum TRBConsultPrepStatus {
  CANNOT_START_YET
  READY_TO_START
  COMPLETED
}

"""
Represents the status of the TRB consult attendance step
"""
enum TRBAttendConsultStatus {
  CANNOT_START_YET
  READY_TO_SCHEDULE
  SCHEDULED
  COMPLETED
}

"""
Represents the status of the TRB advice letter step
"""
enum TRBAdviceLetterStatus {
  CANNOT_START_YET
  READY_TO_START
  IN_PROGRESS
  READY_FOR_REVIEW
  COMPLETED
}

"""
Represents the status of the TRB advice letter step
"""
enum TRBAdviceLetterStatusTaskList {
  CANNOT_START_YET
  IN_REVIEW
  COMPLETED
}

"""
The possible options on the TRB "Subject Areas" page
"""
enum TRBSubjectAreaOption {
  ACCESS_CONTROL_AND_IDENTITY_MANAGEMENT
  ACCESSIBILITY_COMPLIANCE
  ASSISTANCE_WITH_SYSTEM_CONCEPT_DEVELOPMENT
  BUSINESS_INTELLIGENCE
  CLOUD_MIGRATION
  CONTAINERS_AND_MICROSERVICES
  DISASTER_RECOVERY
  EMAIL_INTEGRATION
  ENTERPRISE_DATA_LAKE_INTEGRATION
  FRAMEWORK_OR_TOOL_ALTERNATIVES
  OPEN_SOURCE_SOFTWARE
  PORTAL_INTEGRATION
  TECHNICAL_REFERENCE_ARCHITECTURE
  SYSTEM_ARCHITECTURE_REVIEW
  SYSTEM_DISPOSITION_PLANNING
  WEB_SERVICES_AND_APIS
  WEB_BASED_UI_SERVICES
}

"""
Represents an EUA user who is included as an form for a TRB request
"""
type TRBRequestForm {
  id: UUID!
  trbRequestId: UUID!
  status: TRBFormStatus!
  component: String
  needsAssistanceWith: String
  hasSolutionInMind: Boolean
  proposedSolution: String
  whereInProcess: TRBWhereInProcessOption
  whereInProcessOther: String
  hasExpectedStartEndDates: Boolean
  expectedStartDate: Time
  expectedEndDate: Time
  collabGroups: [TRBCollabGroupOption!]!
  collabDateSecurity: String
  collabDateEnterpriseArchitecture: String
  collabDateCloud: String
  collabDatePrivacyAdvisor: String
  collabDateGovernanceReviewBoard: String
  collabDateOther: String
  collabGroupOther: String
  collabGRBConsultRequested: Boolean
  fundingSources: [TRBFundingSource!]
  systemIntakes: [SystemIntake!]!
  subjectAreaOptions: [TRBSubjectAreaOption!]
  subjectAreaOptionOther: String
  submittedAt: Time
  createdBy: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
}

"""
Represents an EUA user who is included as an form for a TRB request
"""
input UpdateTRBRequestFormInput @goModel(model: "map[string]interface{}") {
  trbRequestId: UUID!
  isSubmitted: Boolean
  component: String
  needsAssistanceWith: String
  hasSolutionInMind: Boolean
  proposedSolution: String
  whereInProcess: TRBWhereInProcessOption
  whereInProcessOther: String
  hasExpectedStartEndDates: Boolean
  expectedStartDate: Time
  expectedEndDate: Time
  collabGroups: [TRBCollabGroupOption!]
  collabDateSecurity: String
  collabDateEnterpriseArchitecture: String
  collabDateCloud: String
  collabDatePrivacyAdvisor: String
  collabDateGovernanceReviewBoard: String
  collabDateOther: String
  collabGroupOther: String
  collabGRBConsultRequested: Boolean
  systemIntakes: [UUID!]
  subjectAreaOptions: [TRBSubjectAreaOption!]
  subjectAreaOptionOther: String
}

"""
Represents a TRB funding source
"""
type TRBFundingSource {
  id: UUID!
  trbRequestId: UUID!
  fundingNumber: String!
  source: String!
  createdBy: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
}
input UpdateTRBRequestFundingSourcesInput {
  trbRequestId: UUID!
  fundingNumber: String!
  sources: [String!]!
}
input DeleteTRBRequestFundingSourcesInput {
  trbRequestId: UUID!
  fundingNumber: String!
}

"""
Represents the action an admin is taking on a TRB request when leaving feedback
"""
enum TRBFeedbackAction {
  READY_FOR_CONSULT
  REQUEST_EDITS
}

"""
Represents feedback added to a TRB request
"""
type TRBRequestFeedback {
  id: UUID!
  trbRequestId: UUID!
  feedbackMessage: String!
  copyTrbMailbox: Boolean!
  notifyEuaIds: [String!]!
  action: TRBFeedbackAction!
  author: UserInfo!
  createdBy: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
}

"""
The data needed to add feedback to a TRB request
"""
input CreateTRBRequestFeedbackInput {
  trbRequestId: UUID!
  feedbackMessage: String!
  copyTrbMailbox: Boolean!
  notifyEuaIds: [String!]!
  action: TRBFeedbackAction!
}

"""
The data needed schedule a TRB consult meeting time
"""
input UpdateTRBRequestConsultMeetingTimeInput {
  trbRequestId: UUID!
  consultMeetingTime: Time!
  copyTrbMailbox: Boolean!
  notifyEuaIds: [String!]!
  notes: String!
}

"""
The data needed assign a TRB lead to a TRB request
"""
input UpdateTRBRequestTRBLeadInput {
  trbRequestId: UUID!
  trbLead: String!
}

"""
Represents the category of a single TRB admin note
"""
enum TRBAdminNoteCategory {
  GENERAL_REQUEST
  INITIAL_REQUEST_FORM
  SUPPORTING_DOCUMENTS
  CONSULT_SESSION
  ADVICE_LETTER
}

"""
Represents an admin note attached to a TRB request
"""
type TRBAdminNote {
  id: UUID!
  trbRequestId: UUID!
  category: TRBAdminNoteCategory!
  noteText: String!
  author: UserInfo!
  isArchived: Boolean!
  createdBy: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
}

"""
Represents an advice letter for a TRB request
"""
type TRBAdviceLetter {
  id: UUID!
  trbRequestId: UUID!
  author: UserInfo!
  meetingSummary: String
  nextSteps: String
  isFollowupRecommended: Boolean
  dateSent: Time
  followupPoint: String
  recommendations: [TRBAdviceLetterRecommendation!]!
  createdBy: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
}

"""
The data needed to create a TRB admin note
"""
input CreateTRBAdminNoteInput {
  trbRequestId: UUID!
  category: TRBAdminNoteCategory!
  noteText: String!
}

"""
The data needed for updating a TRB admin note
"""
input UpdateTRBAdminNoteInput @goModel(model: "map[string]interface{}") {
  id: UUID!
  category: TRBAdminNoteCategory
  noteText: String
}

"""
The data needed to update a TRB advice letter
"""
input UpdateTRBAdviceLetterInput @goModel(model: "map[string]interface{}") {
  trbRequestId: UUID!
  meetingSummary: String
  nextSteps: String
  isFollowupRecommended: Boolean
  followupPoint: String
}

"""
The data needed to send a TRB advice letter, including who to notify
"""
input SendTRBAdviceLetterInput {
  id: UUID!
  copyTrbMailbox: Boolean!
  notifyEuaIds: [String!]!
}

"""
Represents a recommendation and links that have been added to a TRB advice letter
"""
type TRBAdviceLetterRecommendation {
  id: UUID!
  trbRequestId: UUID!
  title: String!
  recommendation: String!
  links: [String!]!
  author: UserInfo!
  createdBy: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
}

"""
The input required to add a recommendation & links to a TRB advice letter
"""
input CreateTRBAdviceLetterRecommendationInput {
  trbRequestId: UUID!
  title: String!
  recommendation: String!
  links: [String!]!
}

"""
The input required to update a recommendation to a TRB advice letter
"""
input UpdateTRBAdviceLetterRecommendationInput @goModel(model: "map[string]interface{}") {
  id: UUID!
  title: String
  recommendation: String
  links: [String!]
}

"""
The input needed to close a TRB request
"""
input CloseTRBRequestInput {
  id: UUID!
  reasonClosed: String!
  copyTrbMailbox: Boolean!
  notifyEuaIds: [String!]!
}

"""
The data needed to reopen a TRB request
"""
input ReopenTRBRequestInput {
  trbRequestId: UUID!
  reasonReopened: String!
  copyTrbMailbox: Boolean!
  notifyEuaIds: [String!]!
}

"""
Defines the mutations for the schema
"""
type Mutation {
  addGRTFeedbackAndKeepBusinessCaseInDraft(
    input: AddGRTFeedbackInput!
  ): AddGRTFeedbackPayload @hasRole(role: EASI_GOVTEAM)
  addGRTFeedbackAndProgressToFinalBusinessCase(
    input: AddGRTFeedbackInput!
  ): AddGRTFeedbackPayload @hasRole(role: EASI_GOVTEAM)
  addGRTFeedbackAndRequestBusinessCase(
    input: AddGRTFeedbackInput!
  ): AddGRTFeedbackPayload @hasRole(role: EASI_GOVTEAM)
  createAccessibilityRequest(
    input: CreateAccessibilityRequestInput!
  ): CreateAccessibilityRequestPayload
  deleteAccessibilityRequest(
    input: DeleteAccessibilityRequestInput!
  ): DeleteAccessibilityRequestPayload
  createAccessibilityRequestDocument(
    input: CreateAccessibilityRequestDocumentInput!
  ): CreateAccessibilityRequestDocumentPayload
  createAccessibilityRequestNote(
    input: CreateAccessibilityRequestNoteInput!
  ): CreateAccessibilityRequestNotePayload
    @hasRole(role: EASI_508_TESTER_OR_USER)
  deleteAccessibilityRequestDocument(
    input: DeleteAccessibilityRequestDocumentInput!
  ): DeleteAccessibilityRequestDocumentPayload
  updateAccessibilityRequestStatus(
    input: UpdateAccessibilityRequestStatus
  ): UpdateAccessibilityRequestStatusPayload
    @hasRole(role: EASI_508_TESTER_OR_USER)
  updateAccessibilityRequestCedarSystem(
    input: UpdateAccessibilityRequestCedarSystemInput
  ): UpdateAccessibilityRequestCedarSystemPayload
  createSystemIntakeActionBusinessCaseNeeded(
    input: BasicActionInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionBusinessCaseNeedsChanges(
    input: BasicActionInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionGuideReceievedClose(
    input: BasicActionInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionNoGovernanceNeeded(
    input: BasicActionInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionNotItRequest(
    input: BasicActionInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionNotRespondingClose(
    input: BasicActionInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionReadyForGRT(
    input: BasicActionInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionSendEmail(
    input: BasicActionInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionExtendLifecycleId(
    input: CreateSystemIntakeActionExtendLifecycleIdInput!
  ): CreateSystemIntakeActionExtendLifecycleIdPayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeNote(input: CreateSystemIntakeNoteInput!): SystemIntakeNote
    @hasRole(role: EASI_GOVTEAM)
  updateSystemIntakeNote(input: UpdateSystemIntakeNoteInput!): SystemIntakeNote!
    @hasRole(role: EASI_GOVTEAM)
  createSystemIntake(input: CreateSystemIntakeInput!): SystemIntake
    @hasRole(role: EASI_USER)
  createTestDate(input: CreateTestDateInput!): CreateTestDatePayload
    @hasRole(role: EASI_508_TESTER_OR_USER)
  updateTestDate(input: UpdateTestDateInput!): UpdateTestDatePayload
    @hasRole(role: EASI_508_TESTER_OR_USER)
  deleteTestDate(input: DeleteTestDateInput!): DeleteTestDatePayload
    @hasRole(role: EASI_508_TESTER_OR_USER)
  generatePresignedUploadURL(
    input: GeneratePresignedUploadURLInput!
  ): GeneratePresignedUploadURLPayload
  issueLifecycleId(input: IssueLifecycleIdInput!): UpdateSystemIntakePayload
    @hasRole(role: EASI_GOVTEAM)
  markSystemIntakeReadyForGRB(
    input: AddGRTFeedbackInput!
  ): AddGRTFeedbackPayload @hasRole(role: EASI_GOVTEAM)
  rejectIntake(input: RejectIntakeInput!): UpdateSystemIntakePayload
    @hasRole(role: EASI_GOVTEAM)
  submitIntake(
    input: SubmitIntakeInput!
  ): UpdateSystemIntakePayload
  updateSystemIntakeAdminLead(input: UpdateSystemIntakeAdminLeadInput!): UpdateSystemIntakePayload
    @hasRole(role: EASI_GOVTEAM)
  updateSystemIntakeReviewDates(input: UpdateSystemIntakeReviewDatesInput!): UpdateSystemIntakePayload
    @hasRole(role: EASI_GOVTEAM)
  updateSystemIntakeContactDetails(input: UpdateSystemIntakeContactDetailsInput!): UpdateSystemIntakePayload
  updateSystemIntakeRequestDetails(input: UpdateSystemIntakeRequestDetailsInput!): UpdateSystemIntakePayload
  updateSystemIntakeContractDetails(input: UpdateSystemIntakeContractDetailsInput!): UpdateSystemIntakePayload
  createCedarSystemBookmark(
    input: CreateCedarSystemBookmarkInput!
  ): CreateCedarSystemBookmarkPayload
  deleteCedarSystemBookmark(
    input: CreateCedarSystemBookmarkInput!
  ): DeleteCedarSystemBookmarkPayload
  createSystemIntakeContact(input: CreateSystemIntakeContactInput!): CreateSystemIntakeContactPayload
  updateSystemIntakeContact(input: UpdateSystemIntakeContactInput!): CreateSystemIntakeContactPayload
  deleteSystemIntakeContact(input: DeleteSystemIntakeContactInput!): DeleteSystemIntakeContactPayload
  updateSystemIntakeLinkedCedarSystem(input: UpdateSystemIntakeLinkedCedarSystemInput!): UpdateSystemIntakePayload
  updateSystemIntakeLinkedContract(input: UpdateSystemIntakeLinkedContractInput!): UpdateSystemIntakePayload
  sendFeedbackEmail(input: SendFeedbackEmailInput!): String
  sendCantFindSomethingEmail(input: SendCantFindSomethingEmailInput!): String
  sendReportAProblemEmail(input: SendReportAProblemEmailInput!): String
  createTRBRequest(requestType: TRBRequestType!): TRBRequest!
  updateTRBRequest(id: UUID!, changes: TRBRequestChanges): TRBRequest!
  createTRBRequestAttendee(input: CreateTRBRequestAttendeeInput!): TRBRequestAttendee!
  updateTRBRequestAttendee(input: UpdateTRBRequestAttendeeInput!): TRBRequestAttendee!
  deleteTRBRequestAttendee(id: UUID!): TRBRequestAttendee!
  createTRBRequestDocument(input: CreateTRBRequestDocumentInput!): CreateTRBRequestDocumentPayload
  deleteTRBRequestDocument(id: UUID!): DeleteTRBRequestDocumentPayload
  createSystemIntakeDocument(input: CreateSystemIntakeDocumentInput!): CreateSystemIntakeDocumentPayload
  deleteSystemIntakeDocument(id: UUID!): DeleteSystemIntakeDocumentPayload
  updateTRBRequestForm(input: UpdateTRBRequestFormInput!): TRBRequestForm!
  updateTRBRequestFundingSources(input: UpdateTRBRequestFundingSourcesInput!): [TRBFundingSource!]!
  deleteTRBRequestFundingSources(input: DeleteTRBRequestFundingSourcesInput!): [TRBFundingSource!]!
  setRolesForUserOnSystem(input: SetRolesForUserOnSystemInput!): String
  createTRBRequestFeedback(input: CreateTRBRequestFeedbackInput!): TRBRequestFeedback!
    @hasRole(role: EASI_TRB_ADMIN)
  updateTRBRequestConsultMeetingTime(input: UpdateTRBRequestConsultMeetingTimeInput!): TRBRequest!
    @hasRole(role: EASI_TRB_ADMIN)
  updateTRBRequestTRBLead(input: UpdateTRBRequestTRBLeadInput!): TRBRequest!
    @hasRole(role: EASI_TRB_ADMIN)
  createTRBAdminNote(input: CreateTRBAdminNoteInput!): TRBAdminNote!
    @hasRole(role: EASI_TRB_ADMIN)
  updateTRBAdminNote(input: UpdateTRBAdminNoteInput!): TRBAdminNote!
    @hasRole(role: EASI_TRB_ADMIN)
  setTRBAdminNoteArchived(id: UUID!, isArchived: Boolean!): TRBAdminNote!
    @hasRole(role: EASI_TRB_ADMIN)
  createTRBAdviceLetter(trbRequestId: UUID!): TRBAdviceLetter!
    @hasRole(role: EASI_TRB_ADMIN)
  updateTRBAdviceLetter(input: UpdateTRBAdviceLetterInput!): TRBAdviceLetter!
    @hasRole(role: EASI_TRB_ADMIN)
  requestReviewForTRBAdviceLetter(id: UUID!): TRBAdviceLetter!
    @hasRole(role: EASI_TRB_ADMIN)
  sendTRBAdviceLetter(input: SendTRBAdviceLetterInput!): TRBAdviceLetter!
    @hasRole(role: EASI_TRB_ADMIN)
  createTRBAdviceLetterRecommendation(input: CreateTRBAdviceLetterRecommendationInput!): TRBAdviceLetterRecommendation!
    @hasRole(role: EASI_TRB_ADMIN)
  updateTRBAdviceLetterRecommendation(input: UpdateTRBAdviceLetterRecommendationInput!): TRBAdviceLetterRecommendation!
    @hasRole(role: EASI_TRB_ADMIN)
  deleteTRBAdviceLetterRecommendation(id: UUID!): TRBAdviceLetterRecommendation!
    @hasRole(role: EASI_TRB_ADMIN)
  closeTRBRequest(input: CloseTRBRequestInput!): TRBRequest!
    @hasRole(role: EASI_TRB_ADMIN)
  reopenTrbRequest(input: ReopenTRBRequestInput!): TRBRequest!
    @hasRole(role: EASI_TRB_ADMIN)
  createTrbLeadOption(eua: String!): UserInfo!
    @hasRole(role: EASI_TRB_ADMIN)
  deleteTrbLeadOption(eua: String!): Boolean!
    @hasRole(role: EASI_TRB_ADMIN)
}

"""
Query definition for the schema
"""
type Query {
  accessibilityRequest(id: UUID!): AccessibilityRequest
  accessibilityRequests(
    after: String
    first: Int!
  ): AccessibilityRequestsConnection
  requests(after: String, first: Int!): RequestsConnection
  systemIntake(id: UUID!): SystemIntake
  systems(after: String, first: Int!): SystemConnection
  systemIntakesWithLcids: [SystemIntake!]!
  currentUser: CurrentUser
  cedarAuthorityToOperate(cedarSystemID: String!): [CedarAuthorityToOperate!]!
  cedarPersonsByCommonName(commonName: String!): [UserInfo!]!
  cedarSystem(cedarSystemId: String!): CedarSystem
  cedarSystems: [CedarSystem]
  cedarSystemBookmarks: [CedarSystemBookmark!]!
  cedarThreat(cedarSystemId: String!): [CedarThreat!]!
  deployments(cedarSystemId: String!, deploymentType: String, state: String, status: String): [CedarDeployment!]!
  roleTypes: [CedarRoleType!]!
  roles(cedarSystemId: String!, roleTypeID: String): [CedarRole!]!
  exchanges(cedarSystemId: String!): [CedarExchange!]!
  urls(cedarSystemId: String!): [CedarURL!]!
  cedarSystemDetails(cedarSystemId: String!): CedarSystemDetails
  systemIntakeContacts(id: UUID!): SystemIntakeContactsPayload!
  relatedSystemIntakes(id: UUID!): [SystemIntake!]!
  trbRequest(id: UUID!): TRBRequest!
  trbRequests(archived: Boolean! = false): [TRBRequest!]! @hasRole(role: EASI_TRB_ADMIN)
  myTrbRequests(archived: Boolean! = false): [TRBRequest!]!
  trbLeadOptions: [UserInfo!]!
  trbAdminNote(id: UUID!): TRBAdminNote!
    @hasRole(role: EASI_TRB_ADMIN)
}

enum TRBRequestType {
  NEED_HELP
  BRAINSTORM
  FOLLOWUP
  FORMAL_REVIEW
  OTHER
}

enum TRBRequestState {
  OPEN
  CLOSED
}

enum TRBRequestStatus {
  NEW
  DRAFT_REQUEST_FORM
  REQUEST_FORM_COMPLETE
  READY_FOR_CONSULT
  CONSULT_SCHEDULED
  CONSULT_COMPLETE
  DRAFT_ADVICE_LETTER
  ADVICE_LETTER_IN_REVIEW
  ADVICE_LETTER_SENT
  FOLLOW_UP_REQUESTED
}

"""
UUIDs are represented using 36 ASCII characters, for example B0511859-ADE6-4A67-8969-16EC280C0E1A
"""
scalar UUID

"""
Time values are represented as strings using RFC3339 format, for example 2019-10-12T07:20:50.52Z
"""
scalar Time

"""
Email addresses are represented as strings
"""
scalar EmailAddress

"""
https://gqlgen.com/reference/file-upload/
Represents a multipart file upload
"""
scalar Upload

directive @hasRole(role: Role!) on FIELD_DEFINITION

# https://gqlgen.com/config/#inline-config-with-directives
directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

"""
A user role associated with a job code
"""
enum Role {
  """
  A 508 Tester
  """
  EASI_508_TESTER

  """
  A 508 request program team member
  """
  EASI_508_USER

  """
  A 508 request program team member or tester
  """
  EASI_508_TESTER_OR_USER

  """
  A member of the GRT
  """
  EASI_GOVTEAM

  """
  An admin on the TRB
  """
  EASI_TRB_ADMIN

  """
  A generic EASi user
  """
  EASI_USER
}
