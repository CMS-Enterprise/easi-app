"""
UserError represents application-level errors that are the result of
either user or application developer error.
"""
type UserError {
  message: String!
  path: [String!]!
}

"""
An accessibility request represents a system that needs to go through
the 508 process.
"""
type AccessibilityRequest {
  documents: [AccessibilityRequestDocument!]!
  id: UUID!
  name: String!
  relevantTestDate: TestDate
  submittedAt: Time!
  system: System!
  testDates: [TestDate!]!
}

"""
A business owner is the person at CMS responsible for a system
"""
type BusinessOwner {
  component: String!
  name: String!
}

"""
A system is derived from a system intake and represents a computer system managed by CMS
"""
type System {
  businessOwner: BusinessOwner!
  id: UUID!
  lcid: String!
  name: String!
}

"""
Represents the availability of a document
"""
enum AccessibilityRequestDocumentStatus {
  """
  Passed security screen
  """
  AVAILABLE

  """
  Just uploaded
  """
  PENDING

  """
  Failed security screen
  """
  UNAVAILABLE
}

"""
Common document type of an Accessibility Request document
"""
enum AccessibilityRequestDocumentCommonType {
  """
  Awarded VPAT
  """
  AWARDED_VPAT

  """
  Other document
  """
  OTHER

  """
  Remediation Plan
  """
  REMEDIATION_PLAN

  """
  Testing VPAT
  """
  TESTING_VPAT

  """
  Test Plan
  """
  TEST_PLAN

  """
  Test Results
  """
  TEST_RESULTS
}

"""
Document type of an Accessibility Request document
"""
type AccessibilityRequestDocumentType {
  commonType: AccessibilityRequestDocumentCommonType!
  otherTypeDescription: String
}

"""
A document that belongs to an accessibility request
"""
type AccessibilityRequestDocument {
  documentType: AccessibilityRequestDocumentType!
  id: UUID!
  mimeType: String!
  name: String!
  requestID: UUID!
  size: Int!
  status: AccessibilityRequestDocumentStatus!
  uploadedAt: Time!
  url: String!
}

"""
A collection of Systems
"""
type SystemConnection {
  edges: [SystemEdge!]!
  totalCount: Int!
}

"""
An edge of an SystemConnection
"""
type SystemEdge {
  cursor: String!
  node: System!
}

"""
Parameters required to create an AccessibilityRequest
"""
input CreateAccessibilityRequestInput {
  intakeID: UUID!
  name: String!
}

"""
Result of CreateAccessibilityRequest
"""
type CreateAccessibilityRequestPayload {
  accessibilityRequest: AccessibilityRequest
  userErrors: [UserError!]
}

"""
Parameters required to generate a presigned upload URL
"""
input GeneratePresignedUploadURLInput {
  fileName: String!
  mimeType: String!
  size: Int!
}

"""
Result of CreateAccessibilityRequest
"""
type GeneratePresignedUploadURLPayload {
  url: String
  userErrors: [UserError!]
}

"""
A collection of AccessibilityRequests
"""
type AccessibilityRequestsConnection {
  edges: [AccessibilityRequestEdge!]!
  totalCount: Int!
}

"""
An edge of an AccessibilityRequestConnection
"""
type AccessibilityRequestEdge {
  cursor: String!
  node: AccessibilityRequest!
}

"""
A 508 test instance
"""
type TestDate {
  date: Time!
  id: UUID!
  score: Int
  testType: TestDateTestType!
}

"""
The variety of a 508 test
"""
enum TestDateTestType {
  """
  Represents an initial 508 test
  """
  INITIAL

  """
  Represents a remediation test
  """
  REMEDIATION
}

"""
Parameters for creating a test date
"""
input CreateTestDateInput {
  date: Time!
  requestID: UUID!
  score: Int
  testType: TestDateTestType!
}

"""
Result of createTestDate
"""
type CreateTestDatePayload {
  testDate: TestDate
  userErrors: [UserError!]
}

"""
Parameters for editing a test date
"""
input UpdateTestDateInput {
  date: Time!
  id: UUID!
  score: Int
  testType: TestDateTestType!
}

"""
Result of editTestDate
"""
type UpdateTestDatePayload {
  testDate: TestDate
  userErrors: [UserError!]
}

"""
Parameters for createAccessibilityRequestDocument
"""
input CreateAccessibilityRequestDocumentInput {
  commonDocumentType: AccessibilityRequestDocumentCommonType!
  mimeType: String!
  name: String!
  otherDocumentTypeDescription: String
  requestID: UUID!
  size: Int!
  url: String!
}

"""
Result of createAccessibilityRequestDocument
"""
type CreateAccessibilityRequestDocumentPayload {
  accessibilityRequestDocument: AccessibilityRequestDocument
  userErrors: [UserError!]
}

"""
The shape of a solution for a business case
"""
type BusinessCaseSolution {
  acquisitionApproach: String
  cons: String
  costSavings: String
  hasUi: String
  hostingCloudServiceType: String
  hostingLocation: String
  hostingType: String
  pros: String
  securityIsApproved: Boolean
  securityIsBeingReviewed: String
  summary: String
  title: String
}

"""
The shape of a solution for a business case
"""
type BusinessCaseAsIsSolution {
  cons: String
  costSavings: String
  pros: String
  summary: String
  title: String
}

"""
enum 
"""
enum LifecycleCostPhase {
  """
  development
  """
  DEVELOPMENT
  """
  Operations and Maintentance
  """
  OPERATIONS_AND_MAINTENANCE
  """
  Other
  """
  OTHER
}

"""
enum 
"""
enum LifecycleCostSolution {
  """
  A
  """
  A
  """
  As is
  """
  AS_IS
  """
  B
  """
  B
  """
  Preferred
  """
  PREFERRED
}

"""
enum 
"""
enum LifecycleCostYear {
  """
  1
  """
  LIFECYCLE_COST_YEAR_1
  """
  2
  """
  LIFECYCLE_COST_YEAR_2
  """
  3
  """
  LIFECYCLE_COST_YEAR_3
  """
  4
  """
  LIFECYCLE_COST_YEAR_4
  """
  5
  """
  LIFECYCLE_COST_YEAR_5
}

"""
The shape of an estimated lifecycle cost row
"""
type EstimatedLifecycleCost {
  businessCaseId: UUID!
  cost: Int
  id: UUID!
  phase: LifecycleCostPhase
  solution: LifecycleCostSolution
  year: LifecycleCostYear
}

"""
Business Case status options
"""
enum BusinessCaseStatus {
  """
  closed
  """
  CLOSED
  """
  open
  """
  OPEN
}

"""
A Business Case instance
"""
type BusinessCase {
  alternativeASolution: BusinessCaseSolution
  alternativeBSolution: BusinessCaseSolution
  asIsSolution: BusinessCaseAsIsSolution
  businessNeed: String
  businessOwner: String
  cmsBenefit: String
  createdAt: Time!
  euaUserId: String!
  id: UUID!
  initialSubmittedAt: Time
  lastSubmittedAt: Time
  lifecycleCostLines: [EstimatedLifecycleCost!]
  preferredSolution: BusinessCaseSolution
  priorityAlignment: String
  projectName: String
  requester: String
  requesterPhoneNumber: String
  status: BusinessCaseStatus!
  submittedAt: Time
  successIndicators: String
  systemIntake: SystemIntake!
  updatedAt: Time!
}

"""
The statuses for a system intake
"""
enum SystemIntakeStatus {
  """
  Accepted
  """
  ACCEPTED
  """
  Business case needs changes
  """
  BIZ_CASE_CHANGES_NEEDED
  """
  Busness case draft
  """
  BIZ_CASE_DRAFT
  """
  Business case draft submitted
  """
  BIZ_CASE_DRAFT_SUBMITTED
  """
  Business case final needed
  """
  BIZ_CASE_FINAL_NEEDED
  """
  Business case final submitted
  """
  BIZ_CASE_FINAL_SUBMITTED
  """
  Intake is in draft
  """
  INTAKE_DRAFT
  """
  Intake is submitted
  """
  INTAKE_SUBMITTED
  """
  Lifecycle ID issued
  """
  LCID_ISSUED
  """
  Need business case
  """
  NEED_BIZ_CASE
  """
  Request not approved
  """
  NOT_APPROVED
  """
  Request is not an IT request
  """
  NOT_IT_REQUEST
  """
  Request requires no further governance
  """
  NO_GOVERNANCE
  """
  Request is ready for Governance Review Board meeting
  """
  READY_FOR_GRB
  """
  Request is ready for Governance Review Team meeting
  """
  READY_FOR_GRT
  """
  Request for shutdown of existing system is complete
  """
  SHUTDOWN_COMPLETE
  """
  Request for shutdown of existing system is in progress
  """
  SHUTDOWN_IN_PROGRESS
  """
  Request was withdrawn by business owner
  """
  WITHDRAWN
}

"""
The request types for a system intake
"""
enum SystemIntakeRequestType {
  """
  Request is for major changes to an existing system
  """
  MAJOR_CHANGES
  """
  Request is for a new system
  """
  NEW
  """
  Request is for re-competing an existing system
  """
  RECOMPETE
  """
  Request is to shut down an existing system
  """
  SHUTDOWN
}

"""
A requester for a system intake
"""
type SystemIntakeRequester {
  component: String
  email: String
  name: String!
}

"""
A SystemIntake instance
"""
type SystemIntake {
  archivedAt: Time
  businessCase: BusinessCase
  businessNeed: String
  businessOwner: String
  businessOwnerComponent: String
  contractEndDate: Time
  contractEndMonth: String
  contractEndYear: String
  contractStartDate: Time
  contractStartMonth: String
  contractStartYear: String
  contractVehicle: String
  contractor: String
  costIncrease: String
  costIncreaseAmount: String
  createdAt: Time!
  decisionNextSteps: String
  eaCollaborator: String
  eaCollaboratorName: String
  eaSupportRequest: Boolean
  euaUserId: String!
  existingContract: String
  existingFunding: Boolean
  fundingNumber: String
  fundingSource: String
  grbDate: Time
  grtDate: Time
  id: UUID!
  isso: String
  issoName: String
  lcid: String
  lcidExpiresAt: Time
  lcidScope: String
  oitSecurityCollaborator: String
  oitSecurityCollaboratorName: String
  processStatus: String
  productManager: String
  productManagerComponent: String
  projectAcronym: String
  projectName: String
  rejectionReason: String
  requestType: SystemIntakeRequestType!
  requester: SystemIntakeRequester!
  solution: String
  status: SystemIntakeStatus!
  submittedAt: Time
  trbCollaborator: String
  trbCollaboratorName: String
  updatedAt: Time!
}

"""
Input for adding GRT Feedback
"""
input AddGRTFeedbackInput {
  emailBody: String!
  feedback: String!
  intakeID: UUID!
}

"""
Response for adding GRT Feedback
"""
type AddGRTFeedbackPayload {
  id: UUID
}

"""
The root mutation
"""
type Mutation {
  addGRTFeedbackAndKeepBusinessCaseInDraft(
    input: AddGRTFeedbackInput!
  ): AddGRTFeedbackPayload @hasRole(role: EASI_GOVTEAM)
  addGRTFeedbackAndProgressToFinalBusinessCase(
    input: AddGRTFeedbackInput!
  ): AddGRTFeedbackPayload @hasRole(role: EASI_GOVTEAM)
  addGRTFeedbackAndRequestBusinessCase(
    input: AddGRTFeedbackInput!
  ): AddGRTFeedbackPayload @hasRole(role: EASI_GOVTEAM)
  createAccessibilityRequest(
    input: CreateAccessibilityRequestInput!
  ): CreateAccessibilityRequestPayload
  createAccessibilityRequestDocument(
    input: CreateAccessibilityRequestDocumentInput!
  ): CreateAccessibilityRequestDocumentPayload
  createTestDate(input: CreateTestDateInput!): CreateTestDatePayload
    @hasRole(role: EASI_508_TESTER)
  generatePresignedUploadURL(
    input: GeneratePresignedUploadURLInput!
  ): GeneratePresignedUploadURLPayload
  updateTestDate(input: UpdateTestDateInput!): UpdateTestDatePayload
    @hasRole(role: EASI_508_TESTER)
}

"""
The root query
"""
type Query {
  accessibilityRequest(id: UUID!): AccessibilityRequest
  accessibilityRequests(
    after: String
    first: Int!
  ): AccessibilityRequestsConnection
  systemIntake(id: UUID!): SystemIntake @hasRole(role: EASI_GOVTEAM)
  systems(after: String, first: Int!): SystemConnection
}

"""
UUIDs are represented using 36 ASCII characters, for example B0511859-ADE6-4A67-8969-16EC280C0E1A
"""
scalar UUID

"""
Time values are represented as strings using RFC3339 format, for example 2019-10-12T07:20:50.52Z
"""
scalar Time

directive @hasRole(role: Role!) on FIELD_DEFINITION

"""
A user role associated with a job code
"""
enum Role {
  """
  A 508 Tester
  """
  EASI_508_TESTER

  """
  A 508 request owner
  """
  EASI_508_USER

  """
  A member of the GRT
  """
  EASI_GOVTEAM

  """
  A generic EASi user
  """
  EASI_USER
}
