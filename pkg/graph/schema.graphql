"""
UserError represents application-level errors that are the result of
either user or application developer error.
"""
type UserError {
  message: String!
  path: [String!]!
}

"""
PersonRole is an enumeration of values for a person's role
"""
enum PersonRole {
  BUSINESS_OWNER
  PRODUCT_OWNER
  SYSTEM_OWNER
  SYSTEM_MAINTAINER
  CONTRACT_OFFICE_RSREPRESENTATIVE
  CLOUD_NAVIGATOR
  INFORMATION_SYSTEM_SECURITY_ADVISOR
  PRIVACY_ADVISOR
  CRA
  OTHER
}

"""
CedarAuthorityToOperate represents the response from the /authorityToOperate endpoint from the CEDAR Core API.
"""
type CedarAuthorityToOperate {
  cedarId: String!
  uuid: String!
  actualDispositionDate: Time
  containsPersonallyIdentifiableInformation: Boolean
  countOfTotalNonPrivilegedUserPopulation: Int!
  countOfOpenPoams: Int!
  countOfTotalPrivilegedUserPopulation: Int!
  dateAuthorizationMemoExpires: Time
  dateAuthorizationMemoSigned: Time
  eAuthenticationLevel: String
  fips199OverallImpactRating: Int
  fismaSystemAcronym: String
  fismaSystemName: String
  isAccessedByNonOrganizationalUsers: Boolean
  isPiiLimitedToUserNameAndPass: Boolean
  isProtectedHealthInformation: Boolean
  lastActScaDate: Time
  lastAssessmentDate: Time
  lastContingencyPlanCompletionDate: Time
  lastPenTestDate: Time
  piaCompletionDate: Time
  primaryCyberRiskAdvisor: String
  privacySubjectMatterExpert: String
  recoveryPointObjective: Float
  recoveryTimeObjective: Float
  systemOfRecordsNotice: [String!]!
  tlcPhase: String
  xlcPhase: String
}

"""
CedarBudget represents info about the budget associated with a CEDAR object (usually a system); this information is returned from the CEDAR Core API
Right now, this does not tie in with any other types defined here, and is a root node until that changes.
"""
type CedarBudget {
  fiscalYear: String
  funding: String
  fundingId: String
  fundingSource: String
  id: String
  name: String
  projectId: String!
  projectTitle: String
  systemId: String
}

"""
CedarBudgetActualCost represents an individual budget actual cost item; this information is returned from the CEDAR Core API
as a part of the CedarBudgetSystemCost object
"""
type CedarBudgetActualCost {
  actualSystemCost: String
  fiscalYear: String
  systemId: String
}

"""
CedarBudgetSystemCost represents info about the actual cost associated with a CEDAR object (usually a system); this information is returned from the CEDAR Core API
Right now, this does not tie in with any other types defined here, and is a root node until that changes.
"""
type CedarBudgetSystemCost {
  budgetActualCost: [CedarBudgetActualCost!]!
}

"""
CedarSoftwareProductItem represents an individual software product; this information is returned from the CEDAR Core API
as a part of the CedarSoftwareProducts object
"""
type CedarSoftwareProductItem {
  apiGatewayUse: Boolean
  elaPurchase: String
  elaVendorId: String
  providesAiCapability: Boolean
  refstr: String
  softwareCatagoryConnectionGuid: String
  softwareVendorConnectionGuid: String
  softwareCost: String
  softwareElaOrganization: String
  softwareName: String
  systemSoftwareConnectionGuid: String
  technopediaCategory: String
  technopediaID: String
  vendorName: String
}

"""
CedarSoftwareProducts represents the response from the /softwareProducts endpoint from the CEDAR Core API.
Right now, this does not tie in with any other types defined here, and is a root node until that changes.
"""
type CedarSoftwareProducts {
  aiSolnCatg: [String]!
  aiSolnCatgOther: String
  apiDataArea: [String]!
  apiDescPubLocation: String
  apiDescPublished: String
  apiFHIRUse: String
  apiFHIRUseOther: String
  apiHasPortal: Boolean
  apisAccessibility: String
  apisDeveloped: String
  developmentStage: String
  softwareProducts: [CedarSoftwareProductItem!]!
  systemHasAPIGateway: Boolean
  usesAiTech: String
}

"""
CedarSystem represents the response from the /system/detail endpoint from the CEDAR Core API.
Right now, this does not tie in with any other types defined here, and is a root node until that changes.
"""
type CedarSystem {
  id: String!
  name: String!
  description: String
  acronym: String
  atoEffectiveDate: Time
  atoExpirationDate: Time
  status: String
  businessOwnerOrg: String
  businessOwnerOrgComp: String
  businessOwnerRoles: [CedarRole!]!
  systemMaintainerOrg: String
  systemMaintainerOrgComp: String
  versionId: String
  isBookmarked: Boolean!
  linkedTrbRequests(state: TRBRequestState! = OPEN): [TRBRequest!]!
  linkedSystemIntakes(state: SystemIntakeState! = OPEN): [SystemIntake!]!
  uuid: String
}

"""
CedarSubSystem represents the response from the /system/detail
"""
type CedarSubSystem {
  id: String!
  name: String!
  acronym: String
  description: String
}

"""
CedarThreat represents the response from the /threat endpoint from the CEDAR Core API.
"""
type CedarThreat {
  alternativeId: String
  controlFamily: String
  daysOpen: Int
  id: String
  parentId: String
  type: String
  weaknessRiskLevel: String
}

"""
BusinessOwnerInformation contains information about the Business Owner for a CEDAR system
"""
type CedarBusinessOwnerInformation {
  beneficiaryAddressPurpose: [String!]!
  beneficiaryAddressPurposeOther: String
  beneficiaryAddressSource: [String!]!
  beneficiaryAddressSourceOther: String
  beneficiaryInformation: [String!]!
  costPerYear: String
  editBeneficiaryInformation: Boolean
  isCmsOwned: Boolean
  nr508UserInterface: String
  numberOfContractorFte: String
  numberOfFederalFte: String
  numberOfSupportedUsersPerMonth: String
  storesBankingData: Boolean
  storesBeneficiaryAddress: Boolean
}

"""
SystemMaintainerInformation contains information about the system maintainer of a CEDAR system
"""
type CedarSystemMaintainerInformation {
  agileUsed: Boolean
  adHocAgileDeploymentFrequency: String
  authoritativeDatasource: String
  businessArtifactsOnDemand: Boolean
  dataAtRestEncryptionKeyManagement: String
  deploymentFrequency: String
  devCompletionPercent: String
  devWorkDescription: String
  ecapParticipation: Boolean
  frontendAccessType: String
  hardCodedIPAddress: Boolean
  ip6EnabledAssetPercent: String
  ip6TransitionPlan: String
  ipEnabledAssetCount: Int
  legalHoldCaseName: String
  locallyStoredUserInformation: Boolean
  majorRefreshDate: Time
  multifactorAuthenticationMethod: [String!]!
  multifactorAuthenticationMethodOther: String
  netAccessibility: String
  networkTrafficEncryptionKeyManagement: String
  noMajorRefresh: Boolean
  noPersistentRecordsFlag: Boolean
  noPlannedMajorRefresh: Boolean
  omDocumentationOnDemand: Boolean
  plansToRetireReplace: String
  quarterToRetireReplace: String
  recordsManagementBucket: [String!]!
  recordsManagementDisposalLocation: String
  recordsManagementDisposalPlan: String
  recordsUnderLegalHold: Boolean
  sourceCodeOnDemand: Boolean
  systemCustomization: String
  systemDataLocation: [String!]!
  systemDataLocationNotes: String
  systemDesignOnDemand: Boolean
  systemProductionDate: Time
  systemRequirementsOnDemand: Boolean
  testPlanOnDemand: Boolean
  testReportsOnDemand: Boolean
  testScriptsOnDemand: Boolean
  yearToRetireReplace: String
}

"""
This is the Representation of Cedar system with additional related information
"""
type CedarSystemDetails {
  cedarSystem: CedarSystem!
  systemMaintainerInformation: CedarSystemMaintainerInformation!
  businessOwnerInformation: CedarBusinessOwnerInformation!
  roles: [CedarRole!]!
  deployments: [CedarDeployment!]!
  threats: [CedarThreat!]!
  urls: [CedarURL!]!
  isMySystem: Boolean
  atoEffectiveDate: Time
  atoExpirationDate: Time
}

"""
Represents a user's bookmark of a cedar system
"""
type CedarSystemBookmark {
  euaUserId: String!
  cedarSystemId: String!
}

type CedarContract {
  startDate: Time
  endDate: Time
  contractNumber: String
  contractName: String
  description: String
  orderNumber: String
  serviceProvided: String
  isDeliveryOrg: Boolean
  systemID: String
}

"""
Represents a person response from Okta
"""
type UserInfo {
  firstName: String!
  lastName: String!
  commonName: String!
  email: EmailAddress!
  euaUserId: String!
}

"""
The data needed to bookmark a cedar system
"""
input CreateCedarSystemBookmarkInput {
  cedarSystemId: String!
}

"""
The payload when bookmarking a cedar system
"""
type CreateCedarSystemBookmarkPayload {
  cedarSystemBookmark: CedarSystemBookmark
}

"""
The payload when deleting a bookmark for a cedar system
"""
type DeleteCedarSystemBookmarkPayload {
  cedarSystemId: String!
}

"""
CedarDeployment represents a deployment of a system; this information is returned from the CEDAR Core API
"""
type CedarDeployment {
  id: String!
  name: String!
  systemID: String!
  startDate: Time
  endDate: Time
  isHotSite: String
  description: String
  contractorName: String
  systemVersion: String
  hasProductionData: String
  replicatedSystemElements: [String!]!
  deploymentType: String
  systemName: String
  deploymentElementID: String
  state: String
  status: String
  wanType: String
  dataCenter: CedarDataCenter
}

"""
CedarDataCenter represents the data center used by a CedarDeployment
"""
type CedarDataCenter {
  id: String
  name: String
  version: String
  description: String
  state: String
  status: String
  startDate: Time
  endDate: Time
  address1: String
  address2: String
  city: String
  addressState: String
  zip: String
}

"""
The possible types of assignees for CedarRoles
"""
enum CedarAssigneeType {
  PERSON
  ORGANIZATION
}

"""
CedarRoleType represents a type of role that a user or organization can hold for some system, i.e. "Business Owner" or "Project Lead"
"""
type CedarRoleType {
  id: String!
  application: String!
  name: String!
  description: String
}

"""
CedarRole represents a role assigned to a person or organization for a system; this information is returned from the CEDAR Core API
"""
type CedarRole {
  application: String!
  objectID: String!
  roleTypeID: String!
  assigneeType: CedarAssigneeType
  assigneeUsername: String
  assigneeEmail: String
  assigneeOrgID: String
  assigneeOrgName: String
  assigneeFirstName: String
  assigneeLastName: String
  assigneePhone: String
  assigneeDesc: String
  roleTypeName: String
  roleTypeDesc: String
  roleID: String
  objectType: String
}

input SetRolesForUserOnSystemInput {
  cedarSystemID: String!
  euaUserId: String!
  desiredRoleTypeIDs: [String!]!
}

"""
CedarURL represents info about a URL associated with a CEDAR object (usually a system); this information is returned from the CEDAR Core API
"""
type CedarURL {
  id: String!
  address: String
  isBehindWebApplicationFirewall: Boolean
  isAPIEndpoint: Boolean
  isVersionCodeRepository: Boolean
  urlHostingEnv: String
}

"""
CedarExchangeTypeOfDataItem is one item of the TypeofData slice in a CedarExchange
"""
type CedarExchangeTypeOfDataItem {
  id: String
  name: String
}


enum ExchangeDirection {
  SENDER
  RECEIVER
}

"""
CedarExchange represents info about how data is exchanged between a CEDAR system and another system
"""
type CedarExchange {
  connectionFrequency: [String!]!
  containsBankingData: Boolean
  containsBeneficiaryAddress: Boolean
  containsPhi: Boolean
  containsPii: Boolean
  containsHealthDisparityData: Boolean
  dataExchangeAgreement: String
  dataFormat: String
  dataFormatOther: String
  exchangeDescription: String
  exchangeEndDate: Time
  exchangeId: String
  exchangeName: String
  exchangeRetiredDate: Time
  exchangeStartDate: Time
  exchangeState: String
  exchangeVersion: String
  exchangeDirection: ExchangeDirection
  fromOwnerId: String
  fromOwnerName: String
  fromOwnerType: String
  isBeneficiaryMailingFile: Boolean
  numOfRecords: String
  sharedViaApi: Boolean
  toOwnerId: String
  toOwnerName: String
  toOwnerType: String
  typeOfData: [CedarExchangeTypeOfDataItem!]!
}

"""
A solution proposal within a Business Case
"""
type BusinessCaseSolution {
  acquisitionApproach: String
  cons: String
  costSavings: String
  hasUi: String
  hostingCloudServiceType: String
  hostingLocation: String
  hostingType: String
  pros: String
  securityIsApproved: Boolean
  securityIsBeingReviewed: String
  summary: String
  title: String
}

"""
The cost phase of a
"""
enum LifecycleCostPhase {
  DEVELOPMENT
  OPERATIONS_AND_MAINTENANCE
  OTHER
}

"""
The type of a lifecycle cost solution, part of a Business Case
"""
enum LifecycleCostSolution {
  A
  B
  PREFERRED
}

"""
Represents a lifecycle cost phase
"""
enum LifecycleCostYear {
  LIFECYCLE_COST_YEAR_1
  LIFECYCLE_COST_YEAR_2
  LIFECYCLE_COST_YEAR_3
  LIFECYCLE_COST_YEAR_4
  LIFECYCLE_COST_YEAR_5
}

"""
Information related to the estimated costs over one lifecycle phase for a
system with a given solution
"""
type EstimatedLifecycleCost {
  businessCaseId: UUID!
  cost: Int
  id: UUID!
  phase: LifecycleCostPhase
  solution: LifecycleCostSolution
  year: LifecycleCostYear
}

"""
The status of a Business Case associated with an system IT governence request
"""
enum BusinessCaseStatus {
  CLOSED
  OPEN
}

"""
A Business Case associated with an system IT governence request; contains
equester's justification for their system request
"""
type BusinessCase {
  alternativeASolution: BusinessCaseSolution
  alternativeBSolution: BusinessCaseSolution
  businessNeed: String
  businessOwner: String
  cmsBenefit: String
  createdAt: Time!
  currentSolutionSummary: String
  euaUserId: String!
  id: UUID!
  lifecycleCostLines: [EstimatedLifecycleCost!]
  preferredSolution: BusinessCaseSolution
  priorityAlignment: String
  projectName: String
  requester: String
  requesterPhoneNumber: String
  status: BusinessCaseStatus!
  successIndicators: String
  systemIntake: SystemIntake!
  updatedAt: Time!
}

"""
The type of an IT governance (system) request
"""
enum SystemIntakeRequestType {
  MAJOR_CHANGES
  NEW
  RECOMPETE
  SHUTDOWN
}

"""
Represents the OIT Business Owner of a system
"""
type SystemIntakeBusinessOwner {
  component: String
  name: String
}

"""
Represents a date used for start and end dates on a contract
"""
type ContractDate {
  day: String
  month: String
  year: String
}

"""
Represents a contract for work on a system
"""
type SystemIntakeContract {
  contractor: String
  endDate: ContractDate!
  hasContract: String
  startDate: ContractDate!
  vehicle: String
}

"""
Represents expectations about a system's additional costs
"""
type SystemIntakeCosts {
  expectedIncreaseAmount: String
  isExpectingIncrease: String
}

"""
Represents current and planned annual costs for a system
"""
type SystemIntakeAnnualSpending {
  currentAnnualSpending: String
  currentAnnualSpendingITPortion: String
  plannedYearOneSpending: String
  plannedYearOneSpendingITPortion: String
}

"""
Represents a contact in OIT who is collaborating with the user
creating a system IT governance request
"""
type SystemIntakeCollaborator {
  acronym: String!
  collaborator: String!
  key: String!
  label: String!
  name: String!
}

"""
Contains multiple system request collaborators, if any
"""
type SystemIntakeGovernanceTeam {
  isPresent: Boolean
  teams: [SystemIntakeCollaborator!]
}

"""
The Information System Security Officer (ISSO) that is
assicuated with a system request, if any
"""
type SystemIntakeISSO {
  isPresent: Boolean
  name: String
}

"""
The author of a note added to a system request
"""
type SystemIntakeNoteAuthor {
  eua: String!
  name: String!
}

"""
A note added to a system request
"""
type SystemIntakeNote {
  author: SystemIntakeNoteAuthor!
  content: HTML!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
  isArchived: Boolean!
  editor: UserInfo
  id: UUID!
}

"""
The product manager associated with a system
"""
type SystemIntakeProductManager {
  component: String
  name: String
}

"""
The contact who made an IT governance request for a system
"""
type SystemIntakeRequester {
  component: String
  email: String
  name: String!
}

"""
Represents a single row of presentation link and document data for a system intake's Async GRB review
All data values are optional but there is a constraint to require one data value on insertion
"""
type SystemIntakeGRBPresentationLinks {
  systemIntakeID: UUID!
  createdBy: UUID!
  createdAt: Time!
  modifiedBy: UUID
  modifiedAt: Time
  recordingLink: String
  recordingPasscode: String
  transcriptLink: String
  transcriptFileName: String
  transcriptFileURL: String
  transcriptFileStatus: SystemIntakeDocumentStatus
  presentationDeckFileName: String
  presentationDeckFileURL: String
  presentationDeckFileStatus: SystemIntakeDocumentStatus
}

"""
Data needed to add system intake presentation link data
One of the optional link/files values is required to pass the database constraint
"""
input SystemIntakeGRBPresentationLinksInput {
  systemIntakeID: UUID!
  recordingLink: String @goField(omittable: true)
  recordingPasscode: String @goField(omittable: true)
  transcriptLink: String @goField(omittable: true)
  transcriptFileData: Upload @goField(omittable: true)
  presentationDeckFileData: Upload @goField(omittable: true)
}

input DeleteSystemIntakeGRBPresentationLinksInput {
  systemIntakeID: UUID!
}

"""
Represents an IT governance request for a system
"""
type SystemIntake {
  actions: [SystemIntakeAction!]!
  adminLead: String
  archivedAt: Time
  businessCase: BusinessCase
  businessNeed: String
  businessOwner: SystemIntakeBusinessOwner!
  businessSolution: String
  contract: SystemIntakeContract!
  costs: SystemIntakeCosts
  annualSpending: SystemIntakeAnnualSpending
  createdAt: Time # TODO - This should probably not be nullable, but some data in IMPL & PROD has it nulled out. We should fix this in the future. (see EASI-3090)
  currentStage: String
  decisionNextSteps: HTML
  eaCollaborator: String
  eaCollaboratorName: String
  euaUserId: String
  existingFunding: Boolean
  fundingSources: [SystemIntakeFundingSource!]!
  governanceRequestFeedbacks: [GovernanceRequestFeedback!]!
  governanceTeams: SystemIntakeGovernanceTeam!
  grbDate: Time
  grtDate: Time
  lastMeetingDate: Time
  nextMeetingDate: Time
  grbReviewStartedAt: Time
  grbReviewers: [SystemIntakeGRBReviewer!]!
  id: UUID!
  isso: SystemIntakeISSO!
  lcid: String
  lcidIssuedAt: Time
  lcidExpiresAt: Time
  lcidScope: HTML
  lcidCostBaseline: String
  lcidRetiresAt: Time
  needsEaSupport: Boolean
  usingSoftware: String
  acquisitionMethods: [SystemIntakeSoftwareAcquisitionMethods!]!
  notes: [SystemIntakeNote!]!
  oitSecurityCollaborator: String
  oitSecurityCollaboratorName: String
  productManager: SystemIntakeProductManager!
  projectAcronym: String
  rejectionReason: HTML
  requestName: String
  requestType: SystemIntakeRequestType!
  requester: SystemIntakeRequester!
  # Both of these fields only really exist because the `requester` type (above) always calls Okta to get the `email` field, and the
  # 2 below (requesterName & requesterComponent) are just fields right from the system intakes table
  # TODO Remove them when email is not always fetched on the `requester` type
  requesterName: String
  requesterComponent: String
  state: SystemIntakeState!
  step: SystemIntakeStep!
  submittedAt: Time
  trbCollaborator: String
  trbCollaboratorName: String
  updatedAt: Time
  grtReviewEmailBody: String
  decidedAt: Time
  businessCaseId: UUID
  cedarSystemId: String
  documents: [SystemIntakeDocument!]!
  hasUiChanges: Boolean
  usesAiTech: Boolean
  itGovTaskStatuses:  ITGovTaskStatuses!
  requestFormState: SystemIntakeFormState!
  draftBusinessCaseState: SystemIntakeFormState!
  """
  This is a calculated state based on if a date exists for the GRT Meeting date
  """
  grtMeetingState: SystemIntakeMeetingState!
  finalBusinessCaseState: SystemIntakeFormState!
  """
  This is a calculated state based on if a date exists for the GRB Meeting date
  """
  grbMeetingState: SystemIntakeMeetingState!
  decisionState: SystemIntakeDecisionState!
  statusRequester: SystemIntakeStatusRequester!
  statusAdmin: SystemIntakeStatusAdmin!
  """
  Intentionally nullable - lcidStatus is null if (and only if) the intake doesn't have an LCID issued
  """
  lcidStatus: SystemIntakeLCIDStatus
  trbFollowUpRecommendation: SystemIntakeTRBFollowUp
  contractName: String
  relationType: RequestRelationType

  """
  Linked systems
  """
  systems: [CedarSystem!]!

  """
  Linked contract numbers
  """
  contractNumbers: [SystemIntakeContractNumber!]!
  """
  Other System Intakes that share a CEDAR System or Contract Number
  """
  relatedIntakes: [SystemIntake!]!
  """
  TRB Requests that share a CEDAR System or Contract Number
  """
  relatedTRBRequests: [TRBRequest!]!
  """
  GRB Review Discussion Posts/Threads
  """
  grbDiscussions: [SystemIntakeGRBReviewDiscussion!]!
  """
  GRB Presentation Link Data
  """
  grbPresentationLinks: SystemIntakeGRBPresentationLinks
}

type SystemIntakeContractNumber {
  id: UUID!
  systemIntakeID: UUID!
  contractNumber: String!
  createdBy: UUID!
  createdAt: Time!
  modifiedBy: UUID
  modifiedAt: Time
}

# TODO Figure out if there's any better way to name this.
# The name currently feels a bit abstract, but it's the best I could come up with.
enum RequestRelationType {
  NEW_SYSTEM
  EXISTING_SYSTEM
  EXISTING_SERVICE
}

"""
SystemIntakeState represents whether the intake is open or closed
"""
enum SystemIntakeState {
  OPEN
  CLOSED
}

"""
SystemIntakeStep represents the current step in the intake process
"""
enum SystemIntakeStep {
  INITIAL_REQUEST_FORM
  DRAFT_BUSINESS_CASE
  GRT_MEETING
  GRB_MEETING
  FINAL_BUSINESS_CASE
  DECISION_AND_NEXT_STEPS
}

"""
SystemIntakeSoftwareAcquisitionMethods represents the different methods requesters can select in a system intake
"""
enum SystemIntakeSoftwareAcquisitionMethods {
  CONTRACTOR_FURNISHED
  FED_FURNISHED
  ELA_OR_INTERNAL
  NOT_YET_DETERMINED
  OTHER
}

"""
The statuses of the different steps in the IT Gov v2 workflow
"""
type ITGovTaskStatuses {
  intakeFormStatus: ITGovIntakeFormStatus!
  feedbackFromInitialReviewStatus: ITGovFeedbackStatus!
  bizCaseDraftStatus: ITGovDraftBusinessCaseStatus!
  grtMeetingStatus: ITGovGRTStatus!
  bizCaseFinalStatus: ITGovFinalBusinessCaseStatus!
  grbMeetingStatus: ITGovGRBStatus!
  decisionAndNextStepsStatus: ITGovDecisionStatus!
}

"""
The input data used to set the requester of a system request
"""
input SystemIntakeRequesterInput {
  name: String!
}

"""
The input data used to initialize an IT governance request for a system
"""
input CreateSystemIntakeInput {
  requestType: SystemIntakeRequestType!
  requester: SystemIntakeRequesterInput!
}

"""
The input data used to set the requester for a system request along with the
requester's business component
"""
input SystemIntakeRequesterWithComponentInput {
  name: String!
  component: String!
}

"""
The input data used to set the CMS Business Owner of a system
"""
input SystemIntakeBusinessOwnerInput {
  name: String!
  component: String!
}

"""
The input data used to set the CMS product manager/lead of a system
"""
input SystemIntakeProductManagerInput {
  name: String!
  component: String!
}

"""
The input data used to set the ISSO associated with a system request, if any
"""
input SystemIntakeISSOInput {
  isPresent: Boolean
  name: String
}

"""
The input data used to add an OIT collaborator for a system request
"""
input SystemIntakeCollaboratorInput {
  collaborator: String!
  name: String!
  key: String!
}

"""
The input data used to set the list of OIT collaborators for a system request
"""
input SystemIntakeGovernanceTeamInput {
  isPresent: Boolean
  teams: [SystemIntakeCollaboratorInput]
}

"""
The input data used to update the contact details of the people associated with
a system request
"""
input UpdateSystemIntakeContactDetailsInput {
  id: UUID!
  requester: SystemIntakeRequesterWithComponentInput!,
  businessOwner: SystemIntakeBusinessOwnerInput!,
  productManager: SystemIntakeProductManagerInput!,
  isso: SystemIntakeISSOInput!,
  governanceTeams: SystemIntakeGovernanceTeamInput!,
}

"""
Input to update some fields on a system request
"""
input UpdateSystemIntakeRequestDetailsInput {
  id: UUID!
  requestName: String
  businessNeed: String
  businessSolution: String
  currentStage: String
  needsEaSupport: Boolean
  hasUiChanges: Boolean
  usesAiTech: Boolean
  usingSoftware: String
  acquisitionMethods: [SystemIntakeSoftwareAcquisitionMethods!]!
  cedarSystemId: String
}

"""
Represents the source of funding for a system
"""
type SystemIntakeFundingSource {
  id: UUID!
  fundingNumber: String
  source: String
}

"""
Represents the source of funding for a system
"""
input SystemIntakeFundingSourceInput {
  fundingNumber: String
  source: String
}

"""
The input required to specify the funding source(s) for a system intake
"""
input SystemIntakeFundingSourcesInput {
  existingFunding: Boolean
  fundingSources: [SystemIntakeFundingSourceInput!]!
}

"""
Input data for estimated system cost increases associated with a system request

NOTE: This field is no longer in intake form but data/query is preserved for existing intakes (EASI-2076)
"""
input SystemIntakeCostsInput {
  expectedIncreaseAmount: String
  isExpectingIncrease: String

}

"""
Input data for current and planned year one annual costs associated with a system request
"""
input SystemIntakeAnnualSpendingInput {
  currentAnnualSpending: String
  currentAnnualSpendingITPortion: String
  plannedYearOneSpending: String
  plannedYearOneSpendingITPortion: String
}

"""
Input data containing information about a contract related to a system request
"""
input SystemIntakeContractInput {
  contractor: String
  endDate: Time
  hasContract: String
  startDate: Time
  numbers: [String!]!
}

"""
Input data for updating contract details related to a system request
"""
input UpdateSystemIntakeContractDetailsInput {
  id: UUID!
  fundingSources: SystemIntakeFundingSourcesInput
  costs: SystemIntakeCostsInput
  annualSpending: SystemIntakeAnnualSpendingInput
  contract: SystemIntakeContractInput
}

"""
Input data for updating a system intake's relationship to a CEDAR system
"""
input UpdateSystemIntakeLinkedCedarSystemInput {
  id: UUID!
  cedarSystemId: String
}

# RequestRelationType.NEW_SYSTEM
input SetSystemIntakeRelationNewSystemInput {
  systemIntakeID: UUID!
  contractNumbers: [String!]!
}

# RequestRelationType.EXISTING_SYSTEM
input SetSystemIntakeRelationExistingSystemInput {
  systemIntakeID: UUID!
  cedarSystemIDs: [String!]!
  contractNumbers: [String!]!
}

# RequestRelationType.EXISTING_SERVICE
input SetSystemIntakeRelationExistingServiceInput {
  systemIntakeID: UUID!
  contractName: String!
  contractNumbers: [String!]!
}

"""
Represents the type of an action that is being done to a system request
"""
enum SystemIntakeActionType {
  # v2 actions
  PROGRESS_TO_NEW_STEP
  REQUEST_EDITS
  EXPIRE_LCID
  NOT_GOVERNANCE
  CLOSE_REQUEST
  REOPEN_REQUEST
  UPDATE_LCID
  CONFIRM_LCID
  RETIRE_LCID
  UNRETIRE_LCID
  CHANGE_LCID_RETIREMENT_DATE

  # v1/v2 actions - originally from v1, still used in v2
  ISSUE_LCID
  SUBMIT_INTAKE
  REJECT

  # v1 actions - no longer used in IT Gov v2 workflow
  BIZ_CASE_NEEDS_CHANGES
  CREATE_BIZ_CASE
  GUIDE_RECEIVED_CLOSE
  EXTEND_LCID
  NEED_BIZ_CASE
  NO_GOVERNANCE_NEEDED
  NOT_IT_REQUEST
  NOT_RESPONDING_CLOSE
  PROVIDE_FEEDBACK_NEED_BIZ_CASE
  PROVIDE_GRT_FEEDBACK_BIZ_CASE_DRAFT
  PROVIDE_GRT_FEEDBACK_BIZ_CASE_FINAL
  READY_FOR_GRB
  READY_FOR_GRT

  SEND_EMAIL
  SUBMIT_BIZ_CASE
  SUBMIT_FINAL_BIZ_CASE

}

"""
An action taken on a system intake, often resulting in a change in status.
"""
type SystemIntakeAction {
  id: UUID!
  systemIntake: SystemIntake!
  type: SystemIntakeActionType!
  actor: SystemIntakeActionActor!
  step: SystemIntakeStep
  feedback: HTML
  lcidExpirationChange: SystemIntakeLCIDExpirationChange
  previousRetirementDate: Time # purposely nullable, unlike previousDate in lcidExpirationChange - not all intakes will have a retirement date
  newRetirementDate: Time # purposely nullable, unlike newDate in lcidExpirationChange - not all intakes will have a retirement date
  createdAt: Time!
}

"""
Contains the data about a change to the expiration date of a system request's lifecycle ID
"""
type SystemIntakeLCIDExpirationChange {
  previousDate: Time!
  newDate: Time!
  previousScope: HTML
  newScope: HTML
  previousNextSteps: HTML
  newNextSteps: HTML
  previousCostBaseline: String
  newCostBaseline: String
}

"""
The contact who is associated with an action being done to a system request
"""
type SystemIntakeActionActor {
  name: String!
  email: String!
}

"""
Input for starting a GRB Review, which notifies reviewers by email
"""
input StartGRBReviewInput {
  systemIntakeID: UUID!
}

"""
GRB Reviewers for a system Intake Request
"""
type SystemIntakeGRBReviewer {
  id: UUID!
  userAccount: UserAccount!
  systemIntakeID: UUID!
  votingRole: SystemIntakeGRBReviewerVotingRole!
  grbRole: SystemIntakeGRBReviewerRole!
  createdBy: UUID!
  createdAt: Time!
  modifiedBy: UUID
  modifiedAt: Time
}

"""
GRBReviewerComparisonIntake represents a response when searching for System Intakes
that have GRB reviewers as compared to another Intake.

It's effectively a smaller subset of some of the fields on the entire Intake, plus a special
"reviewers" field specific to the comparison operation.
"""
type GRBReviewerComparisonIntake {
  id: UUID!
  requestName: String!
  reviewers: [GRBReviewerComparison!]!
  intakeCreatedAt: Time
}

"""
GRBReviewerComparison represents an individual GRB Reviewer within the context of a
comparison operation between two system intakes.

For this reason, it is similar to a regular "type GRBReviewer", but has an extra
field for "isCurrentReviewer", representing whether or not the specific GRB Reviewer
is already on the intake being compared against or not.
"""
type GRBReviewerComparison {
  id: UUID!
  userAccount: UserAccount!
  euaUserId: String!
  votingRole: SystemIntakeGRBReviewerVotingRole!
  grbRole: SystemIntakeGRBReviewerRole!
  isCurrentReviewer: Boolean!
}

input CreateGRBReviewerInput {
  euaUserId: String!
  votingRole: SystemIntakeGRBReviewerVotingRole!
  grbRole: SystemIntakeGRBReviewerRole!
}

input CreateSystemIntakeGRBReviewersInput {
  systemIntakeID: UUID!
  reviewers: [CreateGRBReviewerInput!]!
}

type CreateSystemIntakeGRBReviewersPayload {
  reviewers: [SystemIntakeGRBReviewer!]!
}

input UpdateSystemIntakeGRBReviewerInput {
  reviewerID: UUID!
  votingRole: SystemIntakeGRBReviewerVotingRole!
  grbRole: SystemIntakeGRBReviewerRole!
}

input DeleteSystemIntakeGRBReviewerInput {
  reviewerID: UUID!
}

enum SystemIntakeGRBReviewerRole {
  CO_CHAIR_CIO
  CO_CHAIR_CFO
  CO_CHAIR_HCA
  ACA_3021_REP
  CCIIO_REP
  PROGRAM_OPERATIONS_BDG_CHAIR
  CMCS_REP
  FED_ADMIN_BDG_CHAIR
  PROGRAM_INTEGRITY_BDG_CHAIR
  QIO_REP
  SUBJECT_MATTER_EXPERT
  OTHER
}

enum SystemIntakeGRBReviewerVotingRole {
  VOTING
  ALTERNATE
  NON_VOTING
}

type SystemIntakeGRBReviewDiscussionPost {
  id: UUID!
  content: HTML!
  votingRole: SystemIntakeGRBReviewerVotingRole
  grbRole: SystemIntakeGRBReviewerRole
  systemIntakeID: UUID!
  createdByUserAccount: UserAccount!
  createdAt: Time!
  modifiedByUserAccount: UserAccount
  modifiedAt: Time
}

type SystemIntakeGRBReviewDiscussion {
  initialPost: SystemIntakeGRBReviewDiscussionPost!
  replies: [SystemIntakeGRBReviewDiscussionPost!]!
}


input createSystemIntakeGRBDiscussionPostInput {
  systemIntakeID: UUID!
  content: TaggedHTML!
}

input createSystemIntakeGRBDiscussionReplyInput {
  initialPostID: UUID!
  content: TaggedHTML!
}

"""
Input data used to update the admin lead assigned to a system IT governance
request
"""
input UpdateSystemIntakeAdminLeadInput {
  adminLead: String!
  id: UUID!
}

"""
Input data used to update GRT and GRB dates for a system request
"""
input UpdateSystemIntakeReviewDatesInput {
  grbDate: Time
  grtDate: Time
  id: UUID!
}

"""
Input data for adding a note to a system request
"""
input CreateSystemIntakeNoteInput {
  content: HTML!
  authorName: String!
  intakeId: UUID!
}

"""
Input data for updating an IT governance admin note
"""
input UpdateSystemIntakeNoteInput {
  content: HTML!
  isArchived: Boolean!
  id: UUID!
}

"""
The payload for updating a system's IT governance request
"""
type UpdateSystemIntakePayload {
  systemIntake: SystemIntake
  userErrors: [UserError!]
}

"""
Steps in the system intake process that a Progress to New Step action can progress to
"""
enum SystemIntakeStepToProgressTo {
  DRAFT_BUSINESS_CASE
  GRT_MEETING
  GRB_MEETING
  FINAL_BUSINESS_CASE
}

"""
Input for submitting a Progress to New Step action in IT Gov v2
"""
input SystemIntakeProgressToNewStepsInput {
  systemIntakeID: UUID!
  newStep: SystemIntakeStepToProgressTo!
  meetingDate: Time # optionally used when progressing to GRT or GRB meeting; ignored when progressing to other steps
  notificationRecipients: EmailNotificationRecipients
  feedback: HTML
  grbRecommendations: HTML
  additionalInfo: HTML
  adminNote: HTML
}
"""
Input for updating an intake's LCID in IT Gov v2
"""
input SystemIntakeUpdateLCIDInput {
  systemIntakeID: UUID!

  expiresAt: Time
  scope: HTML
  nextSteps: HTML
  costBaseline: String
  reason: HTML
  additionalInfo: HTML
  notificationRecipients: EmailNotificationRecipients
  adminNote: HTML
}

"""
Input for confirming an intake's decision to issue an LCID in IT Gov v2
"""
input SystemIntakeConfirmLCIDInput {
  systemIntakeID: UUID!
  expiresAt: Time!
  scope: HTML!
  nextSteps: HTML!
  trbFollowUp: SystemIntakeTRBFollowUp!
  costBaseline: String
  additionalInfo: HTML
  notificationRecipients: EmailNotificationRecipients
  adminNote: HTML
}

"""
Input for creating a Request Edits Action in Admin Actions v2
"""
input SystemIntakeRequestEditsInput {
  systemIntakeID: UUID!
  intakeFormStep: SystemIntakeFormStep!
  notificationRecipients: EmailNotificationRecipients
  emailFeedback: HTML!
  additionalInfo: HTML
  adminNote: HTML
}


"""
Different options for whether the Governance team believes a requester's team should consult with the TRB
"""
enum SystemIntakeTRBFollowUp {
  STRONGLY_RECOMMENDED
  RECOMMENDED_BUT_NOT_CRITICAL
  NOT_RECOMMENDED
}

"""
Input for setting an intake's decision to issuing an LCID in IT Gov v2
"""
input SystemIntakeIssueLCIDInput {
  systemIntakeID: UUID!
  lcid: String
  expiresAt: Time!
  scope: HTML!
  nextSteps: HTML!
  trbFollowUp: SystemIntakeTRBFollowUp!
  costBaseline: String
  additionalInfo: HTML
  notificationRecipients: EmailNotificationRecipients
  adminNote: HTML
}

"""
Input for setting an intake's decision to Not Approved by GRB in IT Gov v2
"""
input SystemIntakeRejectIntakeInput {
  systemIntakeID: UUID!
  reason: HTML!
  nextSteps: HTML!
  trbFollowUp: SystemIntakeTRBFollowUp!
  additionalInfo: HTML
  notificationRecipients: EmailNotificationRecipients
  adminNote: HTML
}

"""
Input for expiring an intake's LCID in IT Gov v2
"""
input SystemIntakeExpireLCIDInput {
  systemIntakeID: UUID!
  reason: HTML!
  nextSteps: HTML
  notificationRecipients: EmailNotificationRecipients
  additionalInfo: HTML
  adminNote: HTML
}

"""
Input for retiring an intake's LCID in IT Gov v2
"""
input SystemIntakeRetireLCIDInput {
  systemIntakeID: UUID!
  retiresAt: Time!
  reason: HTML
  additionalInfo: HTML
  notificationRecipients: EmailNotificationRecipients
  adminNote: HTML
}

"""
Input for "unretiring" (i.e. removing retirement date) an LCID in IT Gov v2
"""
input SystemIntakeUnretireLCIDInput {
  systemIntakeID: UUID!
  additionalInfo: HTML
  notificationRecipients: EmailNotificationRecipients
  adminNote: HTML
}

"""
Input for changing an intake's LCID retirement date in IT Gov v2
"""
input SystemIntakeChangeLCIDRetirementDateInput {
  systemIntakeID: UUID!
  retiresAt: Time!
  additionalInfo: HTML
  notificationRecipients: EmailNotificationRecipients
  adminNote: HTML
}

"""
SystemIntakeRequestEditsOptions represents the current step in the intake process
"""
enum SystemIntakeFormStep {
  INITIAL_REQUEST_FORM
  DRAFT_BUSINESS_CASE
  FINAL_BUSINESS_CASE
}

"""
Input for creating a Not an IT Governance Request Action in Admin Actions v2
"""
input SystemIntakeNotITGovReqInput {
  systemIntakeID: UUID!
  notificationRecipients: EmailNotificationRecipients
  reason: HTML
  additionalInfo: HTML
  adminNote: HTML
}

"""
Input for creating a Close Request Action in Admin Actions v2
"""
input SystemIntakeCloseRequestInput {
  systemIntakeID: UUID!
  notificationRecipients: EmailNotificationRecipients
  reason: HTML
  additionalInfo: HTML
  adminNote: HTML
}

"""
Input for creating a Reopen Request Action in Admin Actions v2
"""
input SystemIntakeReopenRequestInput {
  systemIntakeID: UUID!
  notificationRecipients: EmailNotificationRecipients
  reason: HTML
  additionalInfo: HTML
  adminNote: HTML
}

"""
Input to submit an intake for review
"""
input SubmitIntakeInput {
  id: UUID!
}

"""
The current user's Launch Darkly key
"""
type LaunchDarklySettings {
  userKey: String!
  signedHash: String!
}

"""
The current user of the application
"""
type CurrentUser {
  launchDarkly: LaunchDarklySettings!
}

"""
Represents a contact associated with a system intake
"""
type SystemIntakeContact {
  id: UUID!
  euaUserId: String!
  systemIntakeId: UUID!
  component: String!
  role: String!
}

"""
Represents a contact associated with a system intake, including additional fields from CEDAR
"""
type AugmentedSystemIntakeContact {
  id: UUID!
  euaUserId: String!
  systemIntakeId: UUID!
  component: String!
  role: String!
  commonName: String
  email: EmailAddress
}

"""
The data needed to associate a contact with a system intake
"""
input CreateSystemIntakeContactInput {
  euaUserId: String!
  systemIntakeId: UUID!
  component: String!
  role: String!
}

"""
The data needed to update a contact associated with a system intake
"""
input UpdateSystemIntakeContactInput {
  id: UUID!
  euaUserId: String!
  systemIntakeId: UUID!
  component: String!
  role: String!
}

"""
The data needed to delete a system intake contact
"""
input DeleteSystemIntakeContactInput {
  id: UUID!
}

"""
The payload when creating a system intake contact
"""
type CreateSystemIntakeContactPayload {
  systemIntakeContact: SystemIntakeContact
}

"""
The payload when deleting a system intake contact
"""
type DeleteSystemIntakeContactPayload {
  systemIntakeContact: SystemIntakeContact
}

input EmailNotificationRecipients {
  regularRecipientEmails: [EmailAddress!]!
  shouldNotifyITGovernance: Boolean!
  shouldNotifyITInvestment: Boolean!
}

"""
The payload when retrieving system intake contacts
"""
type SystemIntakeContactsPayload {
  systemIntakeContacts: [AugmentedSystemIntakeContact!]!
  invalidEUAIDs: [String!]!
}

"""
The inputs to the user feedback form
"""
input SendFeedbackEmailInput {
  isAnonymous: Boolean!
  canBeContacted: Boolean!
  easiServicesUsed: [String!]!
  cmsRole: String!
  systemEasyToUse: String!
  didntNeedHelpAnswering: String!
  questionsWereRelevant: String!
  hadAccessToInformation: String!
  howSatisfied: String!
  howCanWeImprove: String!
}

input SendCantFindSomethingEmailInput {
  body: String!
}

input SendReportAProblemEmailInput {
  isAnonymous: Boolean!
  canBeContacted: Boolean!
  easiService: String!
  whatWereYouDoing: String!
  whatWentWrong: String!
  howSevereWasTheProblem: String!
}

"""
Represents a request for support from the Technical Review Board (TRB)
"""
type TRBRequest {
  id: UUID!
  name: String
  archived: Boolean!
  type: TRBRequestType!
  state: TRBRequestState!
  status: TRBRequestStatus!
  attendees: [TRBRequestAttendee!]!
  feedback: [TRBRequestFeedback!]!
  documents: [TRBRequestDocument!]! # This query will not return deleted documents -- see pkg/storage/trb_request_document.go `GetTRBRequestDocumentsByRequestID`
  form: TRBRequestForm!
  guidanceLetter: TRBGuidanceLetter
  taskStatuses: TRBTaskStatuses!
  consultMeetingTime: Time
  lastMeetingDate: Time
  nextMeetingDate: Time
  trbLead: String
  trbLeadInfo: UserInfo!
  requesterInfo: UserInfo!
  requesterComponent: String
  adminNotes: [TRBAdminNote!]! @hasRole(role: EASI_TRB_ADMIN)
  isRecent: Boolean!
  createdBy: String!
  createdAt: Time! # will be used for UploadedAt in frontend
  modifiedBy: String
  modifiedAt: Time
  contractName: String
  relationType: RequestRelationType # TODO: NOT IMPLEMENTED

  """
  Linked contract numbers
  """
  contractNumbers: [TRBRequestContractNumber!]!

  """
  Linked systems
  """
  systems: [CedarSystem!]!

  """
  System Intakes that share a CEDAR System or Contract Number
  """
  relatedIntakes: [SystemIntake!]!
  """
  Other TRB Requests that share a CEDAR System or Contract Number
  """
  relatedTRBRequests: [TRBRequest!]!
}

type TRBRequestContractNumber {
  id: UUID!
  trbRequestID: UUID!
  contractNumber: String!
  createdBy: UUID!
  createdAt: Time!
  modifiedBy: UUID
  modifiedAt: Time
}

"""
Wraps all of the various status on the TRB task list into one type
"""
type TRBTaskStatuses {
  formStatus: TRBFormStatus!
  feedbackStatus: TRBFeedbackStatus!
  consultPrepStatus: TRBConsultPrepStatus!
  attendConsultStatus: TRBAttendConsultStatus!
  guidanceLetterStatus: TRBGuidanceLetterStatus!
  guidanceLetterStatusTaskList: TRBGuidanceLetterStatusTaskList!
}

"""
TRBRequestChanges represents the possible changes you can make to a TRB request when updating it.
Fields explicitly set with NULL will be unset, and omitted fields will be left unchanged.
https://gqlgen.com/reference/changesets/
"""
input TRBRequestChanges @goModel(model: "map[string]interface{}") {
  name: String
  archived: Boolean
  type: TRBRequestType
}

"""
Represents an EUA user who is included as an attendee for a TRB request
"""
type TRBRequestAttendee {
  id: UUID!
  euaUserId: String! # Sort of duplicative, as this is also in UserInfo
  userInfo: UserInfo
  trbRequestId: UUID!
  component: String
  role: PersonRole
  createdBy: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
}

# lint-disable defined-types-are-used
enum TagType {
  USER_ACCOUNT
  GROUP_IT_GOV
  GROUP_GRB_REVIEWERS
}
# lint-enable defined-types-are-used

"""
The data needed add a TRB request attendee to a TRB request
"""
input CreateTRBRequestAttendeeInput {
  euaUserId: String!
  trbRequestId: UUID!
  component: String!
  role: PersonRole!
}

"""
Represents an EUA user who is included as an attendee for a TRB request
"""
input UpdateTRBRequestAttendeeInput {
  id: UUID!
  component: String!
  role: PersonRole!
}

"""
Enumeration of the possible statuses of documents uploaded in the TRB workflow
"""
enum TRBRequestDocumentStatus {
  AVAILABLE
  PENDING
  UNAVAILABLE
}

"""
Enumeration of the possible statuses of documents uploaded in the System Intake
"""
enum SystemIntakeDocumentStatus {
  AVAILABLE
  PENDING
  UNAVAILABLE
}

"""
Represents the common options for document type that is attached to a
TRB Request
"""
enum TRBDocumentCommonType {
  ARCHITECTURE_DIAGRAM
  PRESENTATION_SLIDE_DECK
  BUSINESS_CASE
  OTHER
}

"""
Represents the common options for document type that is attached to a
System Intake document
"""
enum SystemIntakeDocumentCommonType {
  SOO_SOW
  DRAFT_IGCE
  ACQUISITION_PLAN_OR_STRATEGY
  REQUEST_FOR_ADDITIONAL_FUNDING
  SOFTWARE_BILL_OF_MATERIALS
  MEETING_MINUTES
  OTHER
}

"""
Represents the version options for a document that is attached to a
System Intake document
"""
enum SystemIntakeDocumentVersion {
  CURRENT
  HISTORICAL
}

"""
Denotes the type of a document attached to a TRB request,
which can be one of a number of common types, or a free-text user-specified type
"""
type TRBRequestDocumentType {
  commonType: TRBDocumentCommonType!
  otherTypeDescription: String
}

"""
Represents a document attached to a TRB request
"""
type TRBRequestDocument {
  documentType: TRBRequestDocumentType!
  id: UUID!
  fileName: String!
  status: TRBRequestDocumentStatus!
  uploadedAt: Time!
  url: String!
  deletedAt: Time
}

"""
The data needed to upload a TRB document and attach it to a request with metadata
"""
input CreateTRBRequestDocumentInput {
  requestID: UUID!
  fileData: Upload!
  documentType: TRBDocumentCommonType!
  otherTypeDescription: String  # Needed if documentType == OTHER
}

"""
The data needed to upload a System Intake document and attach it to a request with metadata
"""
input CreateSystemIntakeDocumentInput {
  requestID: UUID!
  fileData: Upload!
  documentType: SystemIntakeDocumentCommonType!
  version: SystemIntakeDocumentVersion!
  otherTypeDescription: String
  sendNotification: Boolean
}

"""
Data returned after uploading a document to a TRB request
"""
type CreateTRBRequestDocumentPayload {
  document: TRBRequestDocument
}

"""
Data returned after deleting a document attached to a TRB request
"""
type DeleteTRBRequestDocumentPayload {
  document: TRBRequestDocument
}

"""Represents a document attached to a System Intake"""
type SystemIntakeDocument {
  documentType: SystemIntakeDocumentType!
  id: UUID!
  fileName: String!
  status: SystemIntakeDocumentStatus!
  version: SystemIntakeDocumentVersion!
  uploadedAt: Time!
  url: String
  canDelete: Boolean!
  canView: Boolean!
  systemIntakeId: UUID!
}

"""
Denotes the type of a document attached to a System Intake,
which can be one of a number of common types, or a free-text user-specified type
"""
type SystemIntakeDocumentType {
  commonType: SystemIntakeDocumentCommonType!
  otherTypeDescription: String
}

"""Data returned after uploading a document to a System Intake"""
type CreateSystemIntakeDocumentPayload {
  document: SystemIntakeDocument
}

"""Data returned after deleting a document attached to a System Intake"""
type DeleteSystemIntakeDocumentPayload {
  document: SystemIntakeDocument
}

"""
Represents the possible actions that can provide feedback on a governance request
"""
enum GovernanceRequestFeedbackSourceAction {
  REQUEST_EDITS
  PROGRESS_TO_NEW_STEP
}

"""
Represents the possible forms on a governance request that can receive feedback
"""
enum GovernanceRequestFeedbackTargetForm {
  NO_TARGET_PROVIDED
  INTAKE_REQUEST
  DRAFT_BUSINESS_CASE
  FINAL_BUSINESS_CASE
}

"""
Represents the possible types of feedback on governance requests, based on who it's directed to
"""
enum GovernanceRequestFeedbackType {
  REQUESTER
  GRB
}

"""
Feedback given to the requester on a governance request
"""
type GovernanceRequestFeedback {
  id: UUID!
  intakeId: UUID!
  feedback: HTML!
  sourceAction: GovernanceRequestFeedbackSourceAction!
  targetForm: GovernanceRequestFeedbackTargetForm!
  type: GovernanceRequestFeedbackType!
  author: UserInfo
  createdBy: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
}

"""
Represents an option selected to the "where are you in the process?" TRB request form
"""
enum TRBWhereInProcessOption {
  I_HAVE_AN_IDEA_AND_WANT_TO_BRAINSTORM
  CONTRACTING_WORK_HAS_STARTED
  DEVELOPMENT_HAS_RECENTLY_STARTED
  DEVELOPMENT_IS_SIGNIFICANTLY_UNDERWAY
  THE_SYSTEM_IS_IN_OPERATION_AND_MAINTENANCE
  OTHER
}

"""
Represents an option selected for collaboration groups in the TRB request form
"""
enum TRBCollabGroupOption {
  SECURITY
  ENTERPRISE_ARCHITECTURE
  CLOUD
  PRIVACY_ADVISOR
  GOVERNANCE_REVIEW_BOARD
  OTHER
}

"""
Represents the status of a TRB request form
"""
enum TRBFormStatus {
  READY_TO_START
  IN_PROGRESS
  COMPLETED
}

"""
Represents the status of the TRB feedback step
"""
enum TRBFeedbackStatus {
  CANNOT_START_YET
  READY_TO_START
  IN_REVIEW
  EDITS_REQUESTED
  COMPLETED
}

"""
Represents the status of the TRB consult step
"""
enum TRBConsultPrepStatus {
  CANNOT_START_YET
  READY_TO_START
  COMPLETED
}

"""
Represents the status of the TRB consult attendance step
"""
enum TRBAttendConsultStatus {
  CANNOT_START_YET
  READY_TO_SCHEDULE
  SCHEDULED
  COMPLETED
}

"""
Represents the status of the TRB guidance letter step
"""
enum TRBGuidanceLetterStatus {
  CANNOT_START_YET
  READY_TO_START
  IN_PROGRESS
  READY_FOR_REVIEW
  COMPLETED
}

"""
Represents the status of the TRB guidance letter step
"""
enum TRBGuidanceLetterStatusTaskList {
  CANNOT_START_YET
  IN_REVIEW
  COMPLETED
}

"""
The possible options on the TRB "Subject Areas" page
"""
enum TRBSubjectAreaOption {
  ACCESS_CONTROL_AND_IDENTITY_MANAGEMENT
  ACCESSIBILITY_COMPLIANCE
  ARTIFICIAL_INTELLIGENCE
  ASSISTANCE_WITH_SYSTEM_CONCEPT_DEVELOPMENT
  BUSINESS_INTELLIGENCE
  CLOUD_MIGRATION
  CONTAINERS_AND_MICROSERVICES
  DISASTER_RECOVERY
  EMAIL_INTEGRATION
  ENTERPRISE_DATA_LAKE_INTEGRATION
  FRAMEWORK_OR_TOOL_ALTERNATIVES
  OPEN_SOURCE_SOFTWARE
  PORTAL_INTEGRATION
  TECHNICAL_REFERENCE_ARCHITECTURE
  SYSTEM_ARCHITECTURE_REVIEW
  SYSTEM_DISPOSITION_PLANNING
  WEB_SERVICES_AND_APIS
  WEB_BASED_UI_SERVICES
}

"""
Represents an EUA user who is included as an form for a TRB request
"""
type TRBRequestForm {
  id: UUID!
  trbRequestId: UUID!
  status: TRBFormStatus!
  component: String
  needsAssistanceWith: String
  hasSolutionInMind: Boolean
  proposedSolution: String
  whereInProcess: TRBWhereInProcessOption
  whereInProcessOther: String
  hasExpectedStartEndDates: Boolean
  expectedStartDate: Time
  expectedEndDate: Time
  collabGroups: [TRBCollabGroupOption!]!
  collabDateSecurity: String
  collabDateEnterpriseArchitecture: String
  collabDateCloud: String
  collabDatePrivacyAdvisor: String
  collabDateGovernanceReviewBoard: String
  collabDateOther: String
  collabGroupOther: String
  collabGRBConsultRequested: Boolean
  """
  TODO: Make Funding sources non-nullable
  """
  fundingSources: [TRBFundingSource!]
  systemIntakes: [SystemIntake!]!
  subjectAreaOptions: [TRBSubjectAreaOption!]
  subjectAreaOptionOther: String
  submittedAt: Time
  createdBy: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
}

"""
Represents an EUA user who is included as an form for a TRB request
"""
input UpdateTRBRequestFormInput @goModel(model: "map[string]interface{}") {
  trbRequestId: UUID!
  isSubmitted: Boolean
  component: String
  needsAssistanceWith: String
  hasSolutionInMind: Boolean
  proposedSolution: String
  whereInProcess: TRBWhereInProcessOption
  whereInProcessOther: String
  hasExpectedStartEndDates: Boolean
  expectedStartDate: Time
  expectedEndDate: Time
  collabGroups: [TRBCollabGroupOption!]
  collabDateSecurity: String
  collabDateEnterpriseArchitecture: String
  collabDateCloud: String
  collabDatePrivacyAdvisor: String
  collabDateGovernanceReviewBoard: String
  collabDateOther: String
  collabGroupOther: String
  collabGRBConsultRequested: Boolean
  systemIntakes: [UUID!]
  subjectAreaOptions: [TRBSubjectAreaOption!]
  subjectAreaOptionOther: String
}

"""
Represents a TRB funding source
"""
type TRBFundingSource {
  id: UUID!
  trbRequestId: UUID!
  fundingNumber: String!
  source: String!
  createdBy: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
}
input UpdateTRBRequestFundingSourcesInput {
  trbRequestId: UUID!
  fundingNumber: String!
  sources: [String!]!
}
input DeleteTRBRequestFundingSourcesInput {
  trbRequestId: UUID!
  fundingNumber: String!
}

"""
Represents the action an admin is taking on a TRB request when leaving feedback
"""
enum TRBFeedbackAction {
  READY_FOR_CONSULT
  REQUEST_EDITS
}

"""
Represents feedback added to a TRB request
"""
type TRBRequestFeedback {
  id: UUID!
  trbRequestId: UUID!
  feedbackMessage: HTML!
  copyTrbMailbox: Boolean!
  notifyEuaIds: [String!]!
  action: TRBFeedbackAction!
  author: UserInfo!
  createdBy: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
}

"""
The data needed to add feedback to a TRB request
"""
input CreateTRBRequestFeedbackInput {
  trbRequestId: UUID!
  feedbackMessage: HTML!
  copyTrbMailbox: Boolean!
  notifyEuaIds: [String!]!
  action: TRBFeedbackAction!
}

"""
The data needed schedule a TRB consult meeting time
"""
input UpdateTRBRequestConsultMeetingTimeInput {
  trbRequestId: UUID!
  consultMeetingTime: Time!
  copyTrbMailbox: Boolean!
  notifyEuaIds: [String!]!
  notes: String!
}

"""
The data needed assign a TRB lead to a TRB request
"""
input UpdateTRBRequestTRBLeadInput {
  trbRequestId: UUID!
  trbLead: String!
}

# RequestRelationType.NEW_SYSTEM
input SetTRBRequestRelationNewSystemInput {
  trbRequestID: UUID!
  contractNumbers: [String!]!
}

# RequestRelationType.EXISTING_SYSTEM
input SetTRBRequestRelationExistingSystemInput {
  trbRequestID: UUID!
  cedarSystemIDs: [String!]!
  contractNumbers: [String!]!
}

# RequestRelationType.EXISTING_SERVICE
input SetTRBRequestRelationExistingServiceInput {
  trbRequestID: UUID!
  contractName: String!
  contractNumbers: [String!]!
}

"""
Represents the category of a single TRB admin note
"""
enum TRBAdminNoteCategory {
  GENERAL_REQUEST
  INITIAL_REQUEST_FORM
  SUPPORTING_DOCUMENTS
  CONSULT_SESSION
  GUIDANCE_LETTER
}

"""
Data specific to admin notes in the General Request category
This type doesn't contain any actual data
"""
type TRBAdminNoteGeneralRequestCategoryData {
  """
  Placeholder field so this type is non-empty, always null
  """
  placeholderField: Boolean # Necessary because gqlgen doesn't support empty types
}

"""
Data specific to admin notes in the Initial Request Form category
"""
type TRBAdminNoteInitialRequestFormCategoryData {
  appliesToBasicRequestDetails: Boolean!
  appliesToSubjectAreas: Boolean!
  appliesToAttendees: Boolean!
}

"""
Data specific to admin notes in the Supporting Documents category
The "documents" property _will_ return deleted documents so that UI can reference the document name
"""
type TRBAdminNoteSupportingDocumentsCategoryData {
  documents: [TRBRequestDocument!]!
}

"""
Data specific to admin notes in the Consult Session category
This type doesn't contain any actual data
"""
type TRBAdminNoteConsultSessionCategoryData {
  """
  Placeholder field so this type is non-empty, always null
  """
  placeholderField: Boolean # Necessary because gqlgen doesn't support empty types
}

"""
Data specific to admin notes in the Guidance Letter category
The "insights" property _will_ return deleted insights so that UI can reference the insight title
"""
type TRBAdminNoteGuidanceLetterCategoryData {
  appliesToMeetingSummary: Boolean!
  appliesToNextSteps: Boolean!
  insights: [TRBGuidanceLetterInsight!]!
}

union TRBAdminNoteCategorySpecificData = TRBAdminNoteGeneralRequestCategoryData | TRBAdminNoteInitialRequestFormCategoryData | TRBAdminNoteSupportingDocumentsCategoryData | TRBAdminNoteConsultSessionCategoryData | TRBAdminNoteGuidanceLetterCategoryData

"""
Represents an admin note attached to a TRB request
"""
type TRBAdminNote {
  id: UUID!
  trbRequestId: UUID!
  category: TRBAdminNoteCategory!
  noteText: HTML!
  author: UserInfo!
  isArchived: Boolean!
  categorySpecificData: TRBAdminNoteCategorySpecificData!
  createdBy: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
}

"""
Represents a guidance letter for a TRB request
"""
type TRBGuidanceLetter {
  id: UUID!
  trbRequestId: UUID!
  author: UserInfo!
  meetingSummary: HTML
  nextSteps: HTML
  isFollowupRecommended: Boolean
  dateSent: Time
  followupPoint: String
  """
  List of insights in the order specified by users
  """
  insights: [TRBGuidanceLetterInsight!]! # This query will not return deleted insights -- see pkg/storage/trb_guidance_letter_insight.go `GetTRBGuidanceLetterInsightsByTRBRequestID`
  createdBy: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
}

"""
The data needed to create a TRB admin note with the General Request category
"""
input CreateTRBAdminNoteGeneralRequestInput {
  # common fields used by all TRB admin notes
  trbRequestId: UUID!
  noteText: HTML!

  # no category-specific data for this category
}

"""
The data needed to create a TRB admin note with the Initial Request Form category
"""
input CreateTRBAdminNoteInitialRequestFormInput {
  # common fields used by all TRB admin notes
  trbRequestId: UUID!
  noteText: HTML!

  # category-specific data
  appliesToBasicRequestDetails: Boolean!
  appliesToSubjectAreas: Boolean!
  appliesToAttendees: Boolean!
}

"""
The data needed to create a TRB admin note with the Supporting Documents category
"""
input CreateTRBAdminNoteSupportingDocumentsInput {
  # common fields used by all TRB admin notes
  trbRequestId: UUID!
  noteText: HTML!

  # category-specific data
  documentIDs: [UUID!]!
}

"""
The data needed to create a TRB admin note with the Consult Session category
"""
input CreateTRBAdminNoteConsultSessionInput {
  # common fields used by all TRB admin notes
  trbRequestId: UUID!
  noteText: HTML!

  # no category-specific data for this category
}

"""
The data needed to create a TRB admin note with the Guidance Letter category
"""
input CreateTRBAdminNoteGuidanceLetterInput {
  # common fields used by all TRB admin notes
  trbRequestId: UUID!
  noteText: HTML!

  # category-specific data
  appliesToMeetingSummary: Boolean!
  appliesToNextSteps: Boolean!
  insightIDs: [UUID!]!
}

"""
The data needed to update a TRB guidance letter
"""
input UpdateTRBGuidanceLetterInput @goModel(model: "map[string]interface{}") {
  trbRequestId: UUID!
  meetingSummary: HTML
  nextSteps: HTML
  isFollowupRecommended: Boolean
  followupPoint: String
}

"""
The data needed to send a TRB guidance letter, including who to notify
"""
input SendTRBGuidanceLetterInput {
  id: UUID!
  copyITGovMailbox: Boolean!
  copyTrbMailbox: Boolean!
  notifyEuaIds: [String!]!
}

"""
Represents an insight and links that have been added to a TRB guidance letter
"""
type TRBGuidanceLetterInsight {
  id: UUID!
  trbRequestId: UUID!
  title: String!
  insight: HTML!
  links: [String!]!
  author: UserInfo!
  createdBy: String!
  createdAt: Time!
  modifiedBy: String
  modifiedAt: Time
  deletedAt: Time
  category: TRBGuidanceLetterInsightCategory
}

"""
The input required to add an insight & links to a TRB guidance letter
"""
input CreateTRBGuidanceLetterInsightInput {
  trbRequestId: UUID!
  title: String!
  insight: HTML!
  links: [String!]!
  category: TRBGuidanceLetterInsightCategory!
}

"""
The input required to update an insight to a TRB guidance letter
"""
input UpdateTRBGuidanceLetterInsightInput @goModel(model: "map[string]interface{}") {
  id: UUID!
  title: String
  insight: HTML
  links: [String!]
  category: TRBGuidanceLetterInsightCategory
}

enum TRBGuidanceLetterInsightCategory {
  REQUIREMENT
  RECOMMENDATION
  CONSIDERATION
  UNCATEGORIZED
}

"""
"""
input UpdateTRBGuidanceLetterInsightOrderInput {
  trbRequestId: UUID!
  """
  List of the insight IDs in the new order they should be displayed
  """
  newOrder: [UUID!]!
  category: TRBGuidanceLetterInsightCategory!
}

"""
The input needed to close a TRB request
"""
input CloseTRBRequestInput {
  id: UUID!
  reasonClosed: HTML!
  copyTrbMailbox: Boolean!
  notifyEuaIds: [String!]!
}

"""
The data needed to reopen a TRB request
"""
input ReopenTRBRequestInput {
  trbRequestId: UUID!
  reasonReopened: HTML!
  copyTrbMailbox: Boolean!
  notifyEuaIds: [String!]!
}

"""
Defines the mutations for the schema
"""
type Mutation {
  # Mutations for IT Gov v2 workflow
  createSystemIntakeActionProgressToNewStep(
    input: SystemIntakeProgressToNewStepsInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionRequestEdits(
    input: SystemIntakeRequestEditsInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionExpireLCID(
    input: SystemIntakeExpireLCIDInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionUpdateLCID(
    input: SystemIntakeUpdateLCIDInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionRetireLCID(
    input: SystemIntakeRetireLCIDInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionUnretireLCID(
    input: SystemIntakeUnretireLCIDInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionChangeLCIDRetirementDate(
    input: SystemIntakeChangeLCIDRetirementDateInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionConfirmLCID(
    input: SystemIntakeConfirmLCIDInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionIssueLCID(
    input: SystemIntakeIssueLCIDInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionRejectIntake(
    input: SystemIntakeRejectIntakeInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionReopenRequest(
    input: SystemIntakeReopenRequestInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionCloseRequest(
    input: SystemIntakeCloseRequestInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)
  createSystemIntakeActionNotITGovRequest(
    input: SystemIntakeNotITGovReqInput!
  ): UpdateSystemIntakePayload @hasRole(role: EASI_GOVTEAM)

  createSystemIntakeNote(input: CreateSystemIntakeNoteInput!): SystemIntakeNote
  @hasRole(role: EASI_GOVTEAM)
  updateSystemIntakeNote(input: UpdateSystemIntakeNoteInput!): SystemIntakeNote!
  @hasRole(role: EASI_GOVTEAM)
  createSystemIntake(input: CreateSystemIntakeInput!): SystemIntake
  @hasRole(role: EASI_USER)
  updateSystemIntakeRequestType(id: UUID!, newType: SystemIntakeRequestType!): SystemIntake!
  @hasRole(role: EASI_USER)

  submitIntake(
    input: SubmitIntakeInput!
  ): UpdateSystemIntakePayload
  updateSystemIntakeAdminLead(input: UpdateSystemIntakeAdminLeadInput!): UpdateSystemIntakePayload
  @hasRole(role: EASI_GOVTEAM)
  updateSystemIntakeReviewDates(input: UpdateSystemIntakeReviewDatesInput!): UpdateSystemIntakePayload
  @hasRole(role: EASI_GOVTEAM)
  updateSystemIntakeContactDetails(input: UpdateSystemIntakeContactDetailsInput!): UpdateSystemIntakePayload
  updateSystemIntakeRequestDetails(input: UpdateSystemIntakeRequestDetailsInput!): UpdateSystemIntakePayload
  updateSystemIntakeContractDetails(input: UpdateSystemIntakeContractDetailsInput!): UpdateSystemIntakePayload
  createCedarSystemBookmark(
    input: CreateCedarSystemBookmarkInput!
  ): CreateCedarSystemBookmarkPayload
  deleteCedarSystemBookmark(
    input: CreateCedarSystemBookmarkInput!
  ): DeleteCedarSystemBookmarkPayload

  setSystemIntakeRelationNewSystem(input: SetSystemIntakeRelationNewSystemInput): UpdateSystemIntakePayload
  setSystemIntakeRelationExistingSystem(input: SetSystemIntakeRelationExistingSystemInput): UpdateSystemIntakePayload
  setSystemIntakeRelationExistingService(input: SetSystemIntakeRelationExistingServiceInput): UpdateSystemIntakePayload
  unlinkSystemIntakeRelation(intakeID: UUID!): UpdateSystemIntakePayload

  createSystemIntakeContact(input: CreateSystemIntakeContactInput!): CreateSystemIntakeContactPayload
  updateSystemIntakeContact(input: UpdateSystemIntakeContactInput!): CreateSystemIntakeContactPayload
  deleteSystemIntakeContact(input: DeleteSystemIntakeContactInput!): DeleteSystemIntakeContactPayload

  startGRBReview(input: StartGRBReviewInput!): String

  createSystemIntakeGRBReviewers(input: CreateSystemIntakeGRBReviewersInput!): CreateSystemIntakeGRBReviewersPayload
  updateSystemIntakeGRBReviewer(input: UpdateSystemIntakeGRBReviewerInput!): SystemIntakeGRBReviewer!
  deleteSystemIntakeGRBReviewer(input: DeleteSystemIntakeGRBReviewerInput!): UUID!

  createSystemIntakeGRBDiscussionPost(input: createSystemIntakeGRBDiscussionPostInput!): SystemIntakeGRBReviewDiscussionPost
  createSystemIntakeGRBDiscussionReply(input: createSystemIntakeGRBDiscussionReplyInput!): SystemIntakeGRBReviewDiscussionPost

  updateSystemIntakeLinkedCedarSystem(input: UpdateSystemIntakeLinkedCedarSystemInput!): UpdateSystemIntakePayload

  setSystemIntakeGRBPresentationLinks(input: SystemIntakeGRBPresentationLinksInput!): SystemIntakeGRBPresentationLinks
  deleteSystemIntakeGRBPresentationLinks(input: DeleteSystemIntakeGRBPresentationLinksInput!): UUID!

  archiveSystemIntake(id: UUID!): SystemIntake!

  sendFeedbackEmail(input: SendFeedbackEmailInput!): String
  sendCantFindSomethingEmail(input: SendCantFindSomethingEmailInput!): String
  sendReportAProblemEmail(input: SendReportAProblemEmailInput!): String
  createTRBRequest(requestType: TRBRequestType!): TRBRequest!
  updateTRBRequest(id: UUID!, changes: TRBRequestChanges): TRBRequest!
  createTRBRequestAttendee(input: CreateTRBRequestAttendeeInput!): TRBRequestAttendee!
  updateTRBRequestAttendee(input: UpdateTRBRequestAttendeeInput!): TRBRequestAttendee!
  deleteTRBRequestAttendee(id: UUID!): TRBRequestAttendee!
  createTRBRequestDocument(input: CreateTRBRequestDocumentInput!): CreateTRBRequestDocumentPayload
  deleteTRBRequestDocument(id: UUID!): DeleteTRBRequestDocumentPayload
  createSystemIntakeDocument(input: CreateSystemIntakeDocumentInput!): CreateSystemIntakeDocumentPayload
  deleteSystemIntakeDocument(id: UUID!): DeleteSystemIntakeDocumentPayload
  updateTRBRequestForm(input: UpdateTRBRequestFormInput!): TRBRequestForm!
  updateTRBRequestFundingSources(input: UpdateTRBRequestFundingSourcesInput!): [TRBFundingSource!]!
  deleteTRBRequestFundingSources(input: DeleteTRBRequestFundingSourcesInput!): [TRBFundingSource!]!
  setRolesForUserOnSystem(input: SetRolesForUserOnSystemInput!): String
  createTRBRequestFeedback(input: CreateTRBRequestFeedbackInput!): TRBRequestFeedback!
  @hasRole(role: EASI_TRB_ADMIN)
  updateTRBRequestConsultMeetingTime(input: UpdateTRBRequestConsultMeetingTimeInput!): TRBRequest!
  @hasRole(role: EASI_TRB_ADMIN)
  updateTRBRequestTRBLead(input: UpdateTRBRequestTRBLeadInput!): TRBRequest!
  @hasRole(role: EASI_TRB_ADMIN)

  setTRBRequestRelationNewSystem(input: SetTRBRequestRelationNewSystemInput!): TRBRequest
  setTRBRequestRelationExistingSystem(input: SetTRBRequestRelationExistingSystemInput!): TRBRequest
  setTRBRequestRelationExistingService(input: SetTRBRequestRelationExistingServiceInput!): TRBRequest
  unlinkTRBRequestRelation(trbRequestID: UUID!): TRBRequest

  # separate mutations for each category of admin note
  createTRBAdminNoteGeneralRequest(input: CreateTRBAdminNoteGeneralRequestInput!): TRBAdminNote!
  @hasRole(role: EASI_TRB_ADMIN)
  createTRBAdminNoteInitialRequestForm(input: CreateTRBAdminNoteInitialRequestFormInput!): TRBAdminNote!
  @hasRole(role: EASI_TRB_ADMIN)
  createTRBAdminNoteSupportingDocuments(input: CreateTRBAdminNoteSupportingDocumentsInput!): TRBAdminNote!
  @hasRole(role: EASI_TRB_ADMIN)
  createTRBAdminNoteConsultSession(input: CreateTRBAdminNoteConsultSessionInput!): TRBAdminNote!
  @hasRole(role: EASI_TRB_ADMIN)
  createTRBAdminNoteGuidanceLetter(input: CreateTRBAdminNoteGuidanceLetterInput!): TRBAdminNote!
  @hasRole(role: EASI_TRB_ADMIN)
  setTRBAdminNoteArchived(id: UUID!, isArchived: Boolean!): TRBAdminNote!
  @hasRole(role: EASI_TRB_ADMIN)
  createTRBGuidanceLetter(trbRequestId: UUID!): TRBGuidanceLetter!
  @hasRole(role: EASI_TRB_ADMIN)
  updateTRBGuidanceLetter(input: UpdateTRBGuidanceLetterInput!): TRBGuidanceLetter!
  @hasRole(role: EASI_TRB_ADMIN)
  requestReviewForTRBGuidanceLetter(id: UUID!): TRBGuidanceLetter!
  @hasRole(role: EASI_TRB_ADMIN)
  sendTRBGuidanceLetter(input: SendTRBGuidanceLetterInput!): TRBGuidanceLetter!
  @hasRole(role: EASI_TRB_ADMIN)
  createTRBGuidanceLetterInsight(input: CreateTRBGuidanceLetterInsightInput!): TRBGuidanceLetterInsight!
  @hasRole(role: EASI_TRB_ADMIN)
  updateTRBGuidanceLetterInsight(input: UpdateTRBGuidanceLetterInsightInput!): TRBGuidanceLetterInsight!
  @hasRole(role: EASI_TRB_ADMIN)
  updateTRBGuidanceLetterInsightOrder(input: UpdateTRBGuidanceLetterInsightOrderInput!): [TRBGuidanceLetterInsight!]!
  @hasRole(role: EASI_TRB_ADMIN)
  deleteTRBGuidanceLetterInsight(id: UUID!): TRBGuidanceLetterInsight!
  @hasRole(role: EASI_TRB_ADMIN)
  closeTRBRequest(input: CloseTRBRequestInput!): TRBRequest!
  @hasRole(role: EASI_TRB_ADMIN)
  reopenTrbRequest(input: ReopenTRBRequestInput!): TRBRequest!
  @hasRole(role: EASI_TRB_ADMIN)
  createTrbLeadOption(eua: String!): UserInfo!
  @hasRole(role: EASI_TRB_ADMIN)
  deleteTrbLeadOption(eua: String!): Boolean!
  @hasRole(role: EASI_TRB_ADMIN)
}

"""
Query definition for the schema
"""
type Query {
  """
  Requests fetches a requester's own Intake Requests
  first is currently non-functional and can be removed later
  """
  systemIntake(id: UUID!): SystemIntake
  systemIntakes(openRequests: Boolean!): [SystemIntake!]!
  mySystemIntakes:[SystemIntake!]!
  systemIntakesWithReviewRequested: [SystemIntake!]!
  systemIntakesWithLcids: [SystemIntake!]!
  compareGRBReviewersByIntakeID(id: UUID!): [GRBReviewerComparisonIntake!]!
  currentUser: CurrentUser
  cedarAuthorityToOperate(cedarSystemID: String!): [CedarAuthorityToOperate!]!
  cedarBudget(cedarSystemID: String!): [CedarBudget!]
  cedarBudgetSystemCost(cedarSystemID: String!): CedarBudgetSystemCost
  cedarPersonsByCommonName(commonName: String!): [UserInfo!]!
  cedarSoftwareProducts(cedarSystemId: String!): CedarSoftwareProducts
  cedarSystem(cedarSystemId: String!): CedarSystem
  cedarSystems: [CedarSystem!]!
  cedarSubSystems(cedarSystemId: String!): [CedarSubSystem!]!
  cedarContractsBySystem(cedarSystemId: String!): [CedarContract!]!
  myCedarSystems: [CedarSystem!]!
  cedarSystemBookmarks: [CedarSystemBookmark!]!
  cedarThreat(cedarSystemId: String!): [CedarThreat!]!
  deployments(cedarSystemId: String!, deploymentType: String, state: String, status: String): [CedarDeployment!]!
  roleTypes: [CedarRoleType!]!
  roles(cedarSystemId: String!, roleTypeID: String): [CedarRole!]!
  exchanges(cedarSystemId: String!): [CedarExchange!]!
  urls(cedarSystemId: String!): [CedarURL!]!
  cedarSystemDetails(cedarSystemId: String!): CedarSystemDetails
  systemIntakeContacts(id: UUID!): SystemIntakeContactsPayload!
  trbRequest(id: UUID!): TRBRequest!
  trbRequests(archived: Boolean! = false): [TRBRequest!]! @hasRole(role: EASI_TRB_ADMIN)
  myTrbRequests(archived: Boolean! = false): [TRBRequest!]!
  trbLeadOptions: [UserInfo!]!
  trbAdminNote(id: UUID!): TRBAdminNote!
  @hasRole(role: EASI_TRB_ADMIN)
  userAccount(username: String!): UserAccount
}

enum TRBRequestType {
  NEED_HELP
  BRAINSTORM
  FOLLOWUP
  FORMAL_REVIEW
  OTHER
}

enum TRBRequestState {
  OPEN
  CLOSED
}

enum TRBRequestStatus {
  NEW
  DRAFT_REQUEST_FORM
  REQUEST_FORM_COMPLETE
  READY_FOR_CONSULT
  CONSULT_SCHEDULED
  CONSULT_COMPLETE
  DRAFT_GUIDANCE_LETTER
  GUIDANCE_LETTER_IN_REVIEW
  GUIDANCE_LETTER_SENT
  FOLLOW_UP_REQUESTED
}

"""
UUIDs are represented using 36 ASCII characters, for example B0511859-ADE6-4A67-8969-16EC280C0E1A
"""
scalar UUID

"""
HTML are represented using as strings,  <p><strong>Notification email</strong></p>
"""
scalar HTML

"""
TaggedHTML is represented using strings but can contain Tags (ex: @User) and possibly other richer elements than HTML
"""
scalar TaggedHTML

"""
Time values are represented as strings using RFC3339 format, for example 2019-10-12T07:20:50.52Z
"""
scalar Time

"""
Email addresses are represented as strings
"""
scalar EmailAddress

"""
https://gqlgen.com/reference/file-upload/
Represents a multipart file upload
"""
scalar Upload

directive @hasRole(role: Role!) on FIELD_DEFINITION

# https://gqlgen.com/config/#inline-config-with-directives
directive @goModel(
  model: String
  models: [String!]
  forceGenerate: Boolean
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

# https://gqlgen.com/config/#inline-config-with-directives
directive @goField(
  omittable: Boolean
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

"""
A user role associated with a job code
"""
enum Role {
  """
  An admin on the GRT
  """
  EASI_GOVTEAM

  """
  An admin on the TRB
  """
  EASI_TRB_ADMIN

  """
  A generic EASi user
  """
  EASI_USER
}


"""
The requester view of the IT gov intake step status
"""
enum ITGovIntakeFormStatus {
  """
  Ready to begin filling out
  """
  READY
  """
  The form has started to be filled out
  """
  IN_PROGRESS
  """
  The form has edits requested
  """
  EDITS_REQUESTED
  """
  The Form is completed
  """
  COMPLETED
}


"""
The requester view of the IT gov feedback step status
"""
enum ITGovFeedbackStatus {
  """
  This step can't be started yet
  """
  CANT_START
  """
  This step is in review
  """
  IN_REVIEW
  """
  The step is completed
  """
  COMPLETED
}


"""
The requester view of the IT gov Decision step status
"""
enum ITGovDecisionStatus {
  """
  This step can't be started yet
  """
  CANT_START
  """
  This step is in review
  """
  IN_REVIEW
  """
  The step is completed
  """
  COMPLETED
}


"""
The requester view of the IT gov draft Business Case step status
"""
enum ITGovDraftBusinessCaseStatus {
  """
  This step can't be started yet
  """
  CANT_START
  """
  This step is no longer needed
  """
  NOT_NEEDED
  """
  Ready to begin filling out
  """
  READY
  """
  The form has started to be filled out
  """
  IN_PROGRESS

  """
  This draft Business Case has edits requested
  """
  EDITS_REQUESTED

  """
  The draft Business Case has been submitted and it is waiting for feedback from the governance team
  """
  SUBMITTED

  """
  The draft Business Case has been completed and the intake is on a further step
  """
  DONE
}


"""
The requester view of the IT Gov GRT step status
"""
enum ITGovGRTStatus {
  """
  This step can't be started yet
  """
  CANT_START
  """
  This step is not needed and has been skipped
  """
  NOT_NEEDED
  """
  The GRT meeting is waiting to be scheduled
  """
  READY_TO_SCHEDULE
  """
  The GRT meeting has been scheduled
  """
  SCHEDULED
  """
  The GRT meeting has already happened, and an outcome hasn't been noted yet
  """
  AWAITING_DECISION
  """
  The step is completed
  """
  COMPLETED
}

"""
The requester view of the IT Gov Final Business Case step status
"""
enum ITGovFinalBusinessCaseStatus {
  """
  This step can't be started yet
  """
  CANT_START
  """
  This step is not needed and has been skipped
  """
  NOT_NEEDED
  """
  Ready to begin filling out
  """
  READY
  """
  The form has started to be filled out
  """
  IN_PROGRESS
  """
  This Business Case has edits requested
  """
  EDITS_REQUESTED

  """
  The Business Case has been submitted and it is waiting for feedback from the governance team
  """
  SUBMITTED

  """
  The Business Case has been completed and the intake is on a further step
  """
  DONE
}

"""
The requester view of the IT Gov GRB step status
"""
enum ITGovGRBStatus {
  """
  This step can't be started yet
  """
  CANT_START
  """
  This step is not needed and has been skipped
  """
  NOT_NEEDED
  """
  The GRB meeting is waiting to be scheduled
  """
  READY_TO_SCHEDULE
  """
  The GRB meeting has been scheduled
  """
  SCHEDULED
  """
  The GRT meeting has already happened, and an outcome hasn't been noted yet
  """
  AWAITING_DECISION
  """
  The step is completed
  """
  COMPLETED
}

"""
This represents the possible state any system intake form can take
"""
enum SystemIntakeFormState {
  NOT_STARTED
  IN_PROGRESS
  EDITS_REQUESTED
  SUBMITTED
}

"""
This represents the possible System Intake Decision States
"""
enum SystemIntakeDecisionState {
  NO_DECISION
  LCID_ISSUED
  NOT_APPROVED
  NOT_GOVERNANCE
}

"""
This represents the possible states any system intake meeting can take.
"""
enum SystemIntakeMeetingState {
  SCHEDULED
  NOT_SCHEDULED
}

"""
This represents the statuses that an admin would see as a representation of a system intake. Note, there is no status for a brand new request, because an Admin doesn't see the request until it is in progress.
"""
enum SystemIntakeStatusAdmin {
  INITIAL_REQUEST_FORM_IN_PROGRESS
  INITIAL_REQUEST_FORM_SUBMITTED
  DRAFT_BUSINESS_CASE_IN_PROGRESS
  DRAFT_BUSINESS_CASE_SUBMITTED
  GRT_MEETING_READY
  GRT_MEETING_COMPLETE
  GRB_MEETING_READY
  GRB_MEETING_COMPLETE
  FINAL_BUSINESS_CASE_IN_PROGRESS
  FINAL_BUSINESS_CASE_SUBMITTED
  LCID_ISSUED
  LCID_EXPIRED
  LCID_RETIRED
  LCID_RETIRING_SOON
  NOT_GOVERNANCE
  NOT_APPROVED
  CLOSED
}

"""
This represents the (calculated) statuses that a requester view of a system Intake Request can show as part of the IT Gov v2 workflow
"""
enum SystemIntakeStatusRequester {
  INITIAL_REQUEST_FORM_NEW
  INITIAL_REQUEST_FORM_IN_PROGRESS
  INITIAL_REQUEST_FORM_SUBMITTED
  INITIAL_REQUEST_FORM_EDITS_REQUESTED
  DRAFT_BUSINESS_CASE_IN_PROGRESS
  DRAFT_BUSINESS_CASE_SUBMITTED
  DRAFT_BUSINESS_CASE_EDITS_REQUESTED
  GRT_MEETING_READY
  GRT_MEETING_AWAITING_DECISION
  FINAL_BUSINESS_CASE_IN_PROGRESS
  FINAL_BUSINESS_CASE_SUBMITTED
  FINAL_BUSINESS_CASE_EDITS_REQUESTED
  GRB_MEETING_READY
  GRB_MEETING_AWAITING_DECISION
  LCID_ISSUED
  LCID_EXPIRED
  LCID_RETIRED
  NOT_GOVERNANCE
  NOT_APPROVED
  CLOSED
}

"""
The possible statuses that an issued LCID can be in
"""
enum SystemIntakeLCIDStatus {
  ISSUED
  EXPIRED
  RETIRED
}

"""
The representation of a User account in the EASI application
"""
type UserAccount {
  id: UUID!
  """
  The unique username of this user account
  """
  username: String!
  """
  The Common Name of a user. Typically this is a combination of Given and Family name
  """
  commonName: String!
  """
  The language localization of a user.
  """
  locale: String!
  """
  The email address associated to this user account
  """
  email: String!
  """
  A users given name
  """
  givenName: String!
  """
  A users family name
  """
  familyName: String!
  """
  The zone information connected with a user account
  """
  zoneInfo: String!
  """
  Represents if a user has logged in. If the user was added as a result of another action, this will show FALSE. When the user logs in, their account will be updated
  """
  hasLoggedIn: Boolean
}
