// Code generated by go-swagger; DO NOT EDIT.

package intake

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cms-enterprise/easi-app/pkg/cedar/intake/gen/models"
)

// IntakeFindByCedarIDReader is a Reader for the IntakeFindByCedarID structure.
type IntakeFindByCedarIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IntakeFindByCedarIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIntakeFindByCedarIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewIntakeFindByCedarIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewIntakeFindByCedarIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewIntakeFindByCedarIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /intake/cedar/{id}] intakeFindByCedarId", response, response.Code())
	}
}

// NewIntakeFindByCedarIDOK creates a IntakeFindByCedarIDOK with default headers values
func NewIntakeFindByCedarIDOK() *IntakeFindByCedarIDOK {
	return &IntakeFindByCedarIDOK{}
}

/*
IntakeFindByCedarIDOK describes a response with status code 200, with default header values.

OK
*/
type IntakeFindByCedarIDOK struct {
	Payload *models.Intake
}

// IsSuccess returns true when this intake find by cedar Id o k response has a 2xx status code
func (o *IntakeFindByCedarIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this intake find by cedar Id o k response has a 3xx status code
func (o *IntakeFindByCedarIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this intake find by cedar Id o k response has a 4xx status code
func (o *IntakeFindByCedarIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this intake find by cedar Id o k response has a 5xx status code
func (o *IntakeFindByCedarIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this intake find by cedar Id o k response a status code equal to that given
func (o *IntakeFindByCedarIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the intake find by cedar Id o k response
func (o *IntakeFindByCedarIDOK) Code() int {
	return 200
}

func (o *IntakeFindByCedarIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /intake/cedar/{id}][%d] intakeFindByCedarIdOK %s", 200, payload)
}

func (o *IntakeFindByCedarIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /intake/cedar/{id}][%d] intakeFindByCedarIdOK %s", 200, payload)
}

func (o *IntakeFindByCedarIDOK) GetPayload() *models.Intake {
	return o.Payload
}

func (o *IntakeFindByCedarIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Intake)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIntakeFindByCedarIDBadRequest creates a IntakeFindByCedarIDBadRequest with default headers values
func NewIntakeFindByCedarIDBadRequest() *IntakeFindByCedarIDBadRequest {
	return &IntakeFindByCedarIDBadRequest{}
}

/*
IntakeFindByCedarIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type IntakeFindByCedarIDBadRequest struct {
	Payload *models.Response
}

// IsSuccess returns true when this intake find by cedar Id bad request response has a 2xx status code
func (o *IntakeFindByCedarIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this intake find by cedar Id bad request response has a 3xx status code
func (o *IntakeFindByCedarIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this intake find by cedar Id bad request response has a 4xx status code
func (o *IntakeFindByCedarIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this intake find by cedar Id bad request response has a 5xx status code
func (o *IntakeFindByCedarIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this intake find by cedar Id bad request response a status code equal to that given
func (o *IntakeFindByCedarIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the intake find by cedar Id bad request response
func (o *IntakeFindByCedarIDBadRequest) Code() int {
	return 400
}

func (o *IntakeFindByCedarIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /intake/cedar/{id}][%d] intakeFindByCedarIdBadRequest %s", 400, payload)
}

func (o *IntakeFindByCedarIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /intake/cedar/{id}][%d] intakeFindByCedarIdBadRequest %s", 400, payload)
}

func (o *IntakeFindByCedarIDBadRequest) GetPayload() *models.Response {
	return o.Payload
}

func (o *IntakeFindByCedarIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIntakeFindByCedarIDUnauthorized creates a IntakeFindByCedarIDUnauthorized with default headers values
func NewIntakeFindByCedarIDUnauthorized() *IntakeFindByCedarIDUnauthorized {
	return &IntakeFindByCedarIDUnauthorized{}
}

/*
IntakeFindByCedarIDUnauthorized describes a response with status code 401, with default header values.

Access Denied
*/
type IntakeFindByCedarIDUnauthorized struct {
	Payload *models.Response
}

// IsSuccess returns true when this intake find by cedar Id unauthorized response has a 2xx status code
func (o *IntakeFindByCedarIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this intake find by cedar Id unauthorized response has a 3xx status code
func (o *IntakeFindByCedarIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this intake find by cedar Id unauthorized response has a 4xx status code
func (o *IntakeFindByCedarIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this intake find by cedar Id unauthorized response has a 5xx status code
func (o *IntakeFindByCedarIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this intake find by cedar Id unauthorized response a status code equal to that given
func (o *IntakeFindByCedarIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the intake find by cedar Id unauthorized response
func (o *IntakeFindByCedarIDUnauthorized) Code() int {
	return 401
}

func (o *IntakeFindByCedarIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /intake/cedar/{id}][%d] intakeFindByCedarIdUnauthorized %s", 401, payload)
}

func (o *IntakeFindByCedarIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /intake/cedar/{id}][%d] intakeFindByCedarIdUnauthorized %s", 401, payload)
}

func (o *IntakeFindByCedarIDUnauthorized) GetPayload() *models.Response {
	return o.Payload
}

func (o *IntakeFindByCedarIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIntakeFindByCedarIDInternalServerError creates a IntakeFindByCedarIDInternalServerError with default headers values
func NewIntakeFindByCedarIDInternalServerError() *IntakeFindByCedarIDInternalServerError {
	return &IntakeFindByCedarIDInternalServerError{}
}

/*
IntakeFindByCedarIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type IntakeFindByCedarIDInternalServerError struct {
	Payload *models.Response
}

// IsSuccess returns true when this intake find by cedar Id internal server error response has a 2xx status code
func (o *IntakeFindByCedarIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this intake find by cedar Id internal server error response has a 3xx status code
func (o *IntakeFindByCedarIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this intake find by cedar Id internal server error response has a 4xx status code
func (o *IntakeFindByCedarIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this intake find by cedar Id internal server error response has a 5xx status code
func (o *IntakeFindByCedarIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this intake find by cedar Id internal server error response a status code equal to that given
func (o *IntakeFindByCedarIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the intake find by cedar Id internal server error response
func (o *IntakeFindByCedarIDInternalServerError) Code() int {
	return 500
}

func (o *IntakeFindByCedarIDInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /intake/cedar/{id}][%d] intakeFindByCedarIdInternalServerError %s", 500, payload)
}

func (o *IntakeFindByCedarIDInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /intake/cedar/{id}][%d] intakeFindByCedarIdInternalServerError %s", 500, payload)
}

func (o *IntakeFindByCedarIDInternalServerError) GetPayload() *models.Response {
	return o.Payload
}

func (o *IntakeFindByCedarIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
