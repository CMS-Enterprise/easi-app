// Code generated by go-swagger; DO NOT EDIT.

package intake

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cms-enterprise/easi-app/pkg/cedar/intake/gen/models"
)

// IntakeFindByClientIDReader is a Reader for the IntakeFindByClientID structure.
type IntakeFindByClientIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IntakeFindByClientIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIntakeFindByClientIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewIntakeFindByClientIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewIntakeFindByClientIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewIntakeFindByClientIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /intake/client/{id}] intakeFindByClientId", response, response.Code())
	}
}

// NewIntakeFindByClientIDOK creates a IntakeFindByClientIDOK with default headers values
func NewIntakeFindByClientIDOK() *IntakeFindByClientIDOK {
	return &IntakeFindByClientIDOK{}
}

/*
IntakeFindByClientIDOK describes a response with status code 200, with default header values.

OK
*/
type IntakeFindByClientIDOK struct {
	Payload *models.Intake
}

// IsSuccess returns true when this intake find by client Id o k response has a 2xx status code
func (o *IntakeFindByClientIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this intake find by client Id o k response has a 3xx status code
func (o *IntakeFindByClientIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this intake find by client Id o k response has a 4xx status code
func (o *IntakeFindByClientIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this intake find by client Id o k response has a 5xx status code
func (o *IntakeFindByClientIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this intake find by client Id o k response a status code equal to that given
func (o *IntakeFindByClientIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the intake find by client Id o k response
func (o *IntakeFindByClientIDOK) Code() int {
	return 200
}

func (o *IntakeFindByClientIDOK) Error() string {
	return fmt.Sprintf("[GET /intake/client/{id}][%d] intakeFindByClientIdOK  %+v", 200, o.Payload)
}

func (o *IntakeFindByClientIDOK) String() string {
	return fmt.Sprintf("[GET /intake/client/{id}][%d] intakeFindByClientIdOK  %+v", 200, o.Payload)
}

func (o *IntakeFindByClientIDOK) GetPayload() *models.Intake {
	return o.Payload
}

func (o *IntakeFindByClientIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Intake)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIntakeFindByClientIDBadRequest creates a IntakeFindByClientIDBadRequest with default headers values
func NewIntakeFindByClientIDBadRequest() *IntakeFindByClientIDBadRequest {
	return &IntakeFindByClientIDBadRequest{}
}

/*
IntakeFindByClientIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type IntakeFindByClientIDBadRequest struct {
	Payload *models.Response
}

// IsSuccess returns true when this intake find by client Id bad request response has a 2xx status code
func (o *IntakeFindByClientIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this intake find by client Id bad request response has a 3xx status code
func (o *IntakeFindByClientIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this intake find by client Id bad request response has a 4xx status code
func (o *IntakeFindByClientIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this intake find by client Id bad request response has a 5xx status code
func (o *IntakeFindByClientIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this intake find by client Id bad request response a status code equal to that given
func (o *IntakeFindByClientIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the intake find by client Id bad request response
func (o *IntakeFindByClientIDBadRequest) Code() int {
	return 400
}

func (o *IntakeFindByClientIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /intake/client/{id}][%d] intakeFindByClientIdBadRequest  %+v", 400, o.Payload)
}

func (o *IntakeFindByClientIDBadRequest) String() string {
	return fmt.Sprintf("[GET /intake/client/{id}][%d] intakeFindByClientIdBadRequest  %+v", 400, o.Payload)
}

func (o *IntakeFindByClientIDBadRequest) GetPayload() *models.Response {
	return o.Payload
}

func (o *IntakeFindByClientIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIntakeFindByClientIDUnauthorized creates a IntakeFindByClientIDUnauthorized with default headers values
func NewIntakeFindByClientIDUnauthorized() *IntakeFindByClientIDUnauthorized {
	return &IntakeFindByClientIDUnauthorized{}
}

/*
IntakeFindByClientIDUnauthorized describes a response with status code 401, with default header values.

Access Denied
*/
type IntakeFindByClientIDUnauthorized struct {
	Payload *models.Response
}

// IsSuccess returns true when this intake find by client Id unauthorized response has a 2xx status code
func (o *IntakeFindByClientIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this intake find by client Id unauthorized response has a 3xx status code
func (o *IntakeFindByClientIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this intake find by client Id unauthorized response has a 4xx status code
func (o *IntakeFindByClientIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this intake find by client Id unauthorized response has a 5xx status code
func (o *IntakeFindByClientIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this intake find by client Id unauthorized response a status code equal to that given
func (o *IntakeFindByClientIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the intake find by client Id unauthorized response
func (o *IntakeFindByClientIDUnauthorized) Code() int {
	return 401
}

func (o *IntakeFindByClientIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /intake/client/{id}][%d] intakeFindByClientIdUnauthorized  %+v", 401, o.Payload)
}

func (o *IntakeFindByClientIDUnauthorized) String() string {
	return fmt.Sprintf("[GET /intake/client/{id}][%d] intakeFindByClientIdUnauthorized  %+v", 401, o.Payload)
}

func (o *IntakeFindByClientIDUnauthorized) GetPayload() *models.Response {
	return o.Payload
}

func (o *IntakeFindByClientIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIntakeFindByClientIDInternalServerError creates a IntakeFindByClientIDInternalServerError with default headers values
func NewIntakeFindByClientIDInternalServerError() *IntakeFindByClientIDInternalServerError {
	return &IntakeFindByClientIDInternalServerError{}
}

/*
IntakeFindByClientIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type IntakeFindByClientIDInternalServerError struct {
	Payload *models.Response
}

// IsSuccess returns true when this intake find by client Id internal server error response has a 2xx status code
func (o *IntakeFindByClientIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this intake find by client Id internal server error response has a 3xx status code
func (o *IntakeFindByClientIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this intake find by client Id internal server error response has a 4xx status code
func (o *IntakeFindByClientIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this intake find by client Id internal server error response has a 5xx status code
func (o *IntakeFindByClientIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this intake find by client Id internal server error response a status code equal to that given
func (o *IntakeFindByClientIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the intake find by client Id internal server error response
func (o *IntakeFindByClientIDInternalServerError) Code() int {
	return 500
}

func (o *IntakeFindByClientIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /intake/client/{id}][%d] intakeFindByClientIdInternalServerError  %+v", 500, o.Payload)
}

func (o *IntakeFindByClientIDInternalServerError) String() string {
	return fmt.Sprintf("[GET /intake/client/{id}][%d] intakeFindByClientIdInternalServerError  %+v", 500, o.Payload)
}

func (o *IntakeFindByClientIDInternalServerError) GetPayload() *models.Response {
	return o.Payload
}

func (o *IntakeFindByClientIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
