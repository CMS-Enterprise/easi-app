// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cmsgov/easi-app/pkg/cedar/intake/gen/models"
)

// IntakeAddReader is a Reader for the IntakeAdd structure.
type IntakeAddReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IntakeAddReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewIntakeAddAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewIntakeAddBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewIntakeAddUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewIntakeAddInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewIntakeAddAccepted creates a IntakeAddAccepted with default headers values
func NewIntakeAddAccepted() *IntakeAddAccepted {
	return &IntakeAddAccepted{}
}

/* IntakeAddAccepted describes a response with status code 202, with default header values.

Accepted
*/
type IntakeAddAccepted struct {
	Payload *IntakeAddAcceptedBody
}

func (o *IntakeAddAccepted) Error() string {
	return fmt.Sprintf("[POST /intake][%d] intakeAddAccepted  %+v", 202, o.Payload)
}
func (o *IntakeAddAccepted) GetPayload() *IntakeAddAcceptedBody {
	return o.Payload
}

func (o *IntakeAddAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(IntakeAddAcceptedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIntakeAddBadRequest creates a IntakeAddBadRequest with default headers values
func NewIntakeAddBadRequest() *IntakeAddBadRequest {
	return &IntakeAddBadRequest{}
}

/* IntakeAddBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type IntakeAddBadRequest struct {
	Payload *models.Response
}

func (o *IntakeAddBadRequest) Error() string {
	return fmt.Sprintf("[POST /intake][%d] intakeAddBadRequest  %+v", 400, o.Payload)
}
func (o *IntakeAddBadRequest) GetPayload() *models.Response {
	return o.Payload
}

func (o *IntakeAddBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIntakeAddUnauthorized creates a IntakeAddUnauthorized with default headers values
func NewIntakeAddUnauthorized() *IntakeAddUnauthorized {
	return &IntakeAddUnauthorized{}
}

/* IntakeAddUnauthorized describes a response with status code 401, with default header values.

Access Denied
*/
type IntakeAddUnauthorized struct {
	Payload *models.Response
}

func (o *IntakeAddUnauthorized) Error() string {
	return fmt.Sprintf("[POST /intake][%d] intakeAddUnauthorized  %+v", 401, o.Payload)
}
func (o *IntakeAddUnauthorized) GetPayload() *models.Response {
	return o.Payload
}

func (o *IntakeAddUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIntakeAddInternalServerError creates a IntakeAddInternalServerError with default headers values
func NewIntakeAddInternalServerError() *IntakeAddInternalServerError {
	return &IntakeAddInternalServerError{}
}

/* IntakeAddInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type IntakeAddInternalServerError struct {
	Payload *models.Response
}

func (o *IntakeAddInternalServerError) Error() string {
	return fmt.Sprintf("[POST /intake][%d] intakeAddInternalServerError  %+v", 500, o.Payload)
}
func (o *IntakeAddInternalServerError) GetPayload() *models.Response {
	return o.Payload
}

func (o *IntakeAddInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*IntakeAddAcceptedBody intake add accepted body
swagger:model IntakeAddAcceptedBody
*/
type IntakeAddAcceptedBody struct {

	// responses
	Responses []*models.IntakePostResponse `json:"Responses"`
}

// Validate validates this intake add accepted body
func (o *IntakeAddAcceptedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResponses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IntakeAddAcceptedBody) validateResponses(formats strfmt.Registry) error {
	if swag.IsZero(o.Responses) { // not required
		return nil
	}

	for i := 0; i < len(o.Responses); i++ {
		if swag.IsZero(o.Responses[i]) { // not required
			continue
		}

		if o.Responses[i] != nil {
			if err := o.Responses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("intakeAddAccepted" + "." + "Responses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this intake add accepted body based on the context it is used
func (o *IntakeAddAcceptedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResponses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IntakeAddAcceptedBody) contextValidateResponses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Responses); i++ {

		if o.Responses[i] != nil {
			if err := o.Responses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("intakeAddAccepted" + "." + "Responses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *IntakeAddAcceptedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IntakeAddAcceptedBody) UnmarshalBinary(b []byte) error {
	var res IntakeAddAcceptedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*IntakeAddBody intake add body
swagger:model IntakeAddBody
*/
type IntakeAddBody struct {

	// intakes
	Intakes []*models.IntakeInput `json:"Intakes"`
}

// Validate validates this intake add body
func (o *IntakeAddBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIntakes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IntakeAddBody) validateIntakes(formats strfmt.Registry) error {
	if swag.IsZero(o.Intakes) { // not required
		return nil
	}

	for i := 0; i < len(o.Intakes); i++ {
		if swag.IsZero(o.Intakes[i]) { // not required
			continue
		}

		if o.Intakes[i] != nil {
			if err := o.Intakes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "Intakes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this intake add body based on the context it is used
func (o *IntakeAddBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateIntakes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IntakeAddBody) contextValidateIntakes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Intakes); i++ {

		if o.Intakes[i] != nil {
			if err := o.Intakes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "Intakes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *IntakeAddBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IntakeAddBody) UnmarshalBinary(b []byte) error {
	var res IntakeAddBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
