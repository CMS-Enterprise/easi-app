// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EASILifecycleCost e a s i lifecycle cost
//
// swagger:model EASILifecycleCost
type EASILifecycleCost struct {

	// business case Id
	// Required: true
	BusinessCaseID *string `json:"businessCaseId"`

	// cost
	// Required: true
	Cost *string `json:"cost"`

	// id
	// Required: true
	ID *string `json:"id"`

	// phase
	// Required: true
	Phase *string `json:"phase"`

	// solution
	// Required: true
	Solution *string `json:"solution"`

	// year
	// Required: true
	Year *string `json:"year"`
}

// Validate validates this e a s i lifecycle cost
func (m *EASILifecycleCost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBusinessCaseID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSolution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EASILifecycleCost) validateBusinessCaseID(formats strfmt.Registry) error {

	if err := validate.Required("businessCaseId", "body", m.BusinessCaseID); err != nil {
		return err
	}

	return nil
}

func (m *EASILifecycleCost) validateCost(formats strfmt.Registry) error {

	if err := validate.Required("cost", "body", m.Cost); err != nil {
		return err
	}

	return nil
}

func (m *EASILifecycleCost) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *EASILifecycleCost) validatePhase(formats strfmt.Registry) error {

	if err := validate.Required("phase", "body", m.Phase); err != nil {
		return err
	}

	return nil
}

func (m *EASILifecycleCost) validateSolution(formats strfmt.Registry) error {

	if err := validate.Required("solution", "body", m.Solution); err != nil {
		return err
	}

	return nil
}

func (m *EASILifecycleCost) validateYear(formats strfmt.Registry) error {

	if err := validate.Required("year", "body", m.Year); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this e a s i lifecycle cost based on context it is used
func (m *EASILifecycleCost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EASILifecycleCost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EASILifecycleCost) UnmarshalBinary(b []byte) error {
	var res EASILifecycleCost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
