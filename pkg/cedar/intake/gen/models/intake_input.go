// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntakeInput { "id": "5555", "type": "SystemTest", "schema": "SystemTestV01", "status": "Initiated", "bodyFormat": "json", "body": "{\"id\":\"5555\",\"eua_user_id\":\"test\",\"requester\":\"John Doe\",\"requester_component\":\"test\",\"system_name\":\"Test\"}", "createdDate": "2021-02-05 10:39:00", "lastUpdate": "2021-02-05 10:39:00" }
//
// swagger:model IntakeInput
type IntakeInput struct {

	// The actual record data string. For json posts, the data must be json encoded.
	// Required: true
	Body *string `json:"body"`

	// The data type of the string being transmitted, i.e. json, xml, etc
	// Required: true
	// Enum: [json]
	BodyFormat *string `json:"bodyFormat"`

	// Customers createDate
	// Required: true
	CreatedDate *string `json:"createdDate"`

	// Customer UUID for the record
	// Required: true
	ID *string `json:"id"`

	// Customers lastUpdate
	// Required: true
	LastUpdate *string `json:"lastUpdate"`

	// The name and version of the corresponding schema
	// Required: true
	// Enum: [EASIActionV01 EASIBizCaseV01 EASIGrtFeedbackV01 EASIIntakeV01 EASILifecycleCostV01 EASINoteV01]
	Schema *string `json:"schema"`

	// Customer status for the record being transmitted, i.e. Initiated, Final, etc.
	// Required: true
	// Enum: [Initiated Final]
	Status *string `json:"status"`

	// The type of record being transmitted, i.e.
	// Required: true
	// Enum: [EASIAction EASIBizCase EASIGrtFeedback EASIIntake EASILifecycleCost EASINote]
	Type *string `json:"type"`
}

// Validate validates this intake input
func (m *IntakeInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBodyFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntakeInput) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body); err != nil {
		return err
	}

	return nil
}

var intakeInputTypeBodyFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["json"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		intakeInputTypeBodyFormatPropEnum = append(intakeInputTypeBodyFormatPropEnum, v)
	}
}

const (

	// IntakeInputBodyFormatJSON captures enum value "json"
	IntakeInputBodyFormatJSON string = "json"
)

// prop value enum
func (m *IntakeInput) validateBodyFormatEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, intakeInputTypeBodyFormatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IntakeInput) validateBodyFormat(formats strfmt.Registry) error {

	if err := validate.Required("bodyFormat", "body", m.BodyFormat); err != nil {
		return err
	}

	// value enum
	if err := m.validateBodyFormatEnum("bodyFormat", "body", *m.BodyFormat); err != nil {
		return err
	}

	return nil
}

func (m *IntakeInput) validateCreatedDate(formats strfmt.Registry) error {

	if err := validate.Required("createdDate", "body", m.CreatedDate); err != nil {
		return err
	}

	return nil
}

func (m *IntakeInput) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *IntakeInput) validateLastUpdate(formats strfmt.Registry) error {

	if err := validate.Required("lastUpdate", "body", m.LastUpdate); err != nil {
		return err
	}

	return nil
}

var intakeInputTypeSchemaPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EASIActionV01","EASIBizCaseV01","EASIGrtFeedbackV01","EASIIntakeV01","EASILifecycleCostV01","EASINoteV01"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		intakeInputTypeSchemaPropEnum = append(intakeInputTypeSchemaPropEnum, v)
	}
}

const (

	// IntakeInputSchemaEASIActionV01 captures enum value "EASIActionV01"
	IntakeInputSchemaEASIActionV01 string = "EASIActionV01"

	// IntakeInputSchemaEASIBizCaseV01 captures enum value "EASIBizCaseV01"
	IntakeInputSchemaEASIBizCaseV01 string = "EASIBizCaseV01"

	// IntakeInputSchemaEASIGrtFeedbackV01 captures enum value "EASIGrtFeedbackV01"
	IntakeInputSchemaEASIGrtFeedbackV01 string = "EASIGrtFeedbackV01"

	// IntakeInputSchemaEASIIntakeV01 captures enum value "EASIIntakeV01"
	IntakeInputSchemaEASIIntakeV01 string = "EASIIntakeV01"

	// IntakeInputSchemaEASILifecycleCostV01 captures enum value "EASILifecycleCostV01"
	IntakeInputSchemaEASILifecycleCostV01 string = "EASILifecycleCostV01"

	// IntakeInputSchemaEASINoteV01 captures enum value "EASINoteV01"
	IntakeInputSchemaEASINoteV01 string = "EASINoteV01"
)

// prop value enum
func (m *IntakeInput) validateSchemaEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, intakeInputTypeSchemaPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IntakeInput) validateSchema(formats strfmt.Registry) error {

	if err := validate.Required("schema", "body", m.Schema); err != nil {
		return err
	}

	// value enum
	if err := m.validateSchemaEnum("schema", "body", *m.Schema); err != nil {
		return err
	}

	return nil
}

var intakeInputTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Initiated","Final"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		intakeInputTypeStatusPropEnum = append(intakeInputTypeStatusPropEnum, v)
	}
}

const (

	// IntakeInputStatusInitiated captures enum value "Initiated"
	IntakeInputStatusInitiated string = "Initiated"

	// IntakeInputStatusFinal captures enum value "Final"
	IntakeInputStatusFinal string = "Final"
)

// prop value enum
func (m *IntakeInput) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, intakeInputTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IntakeInput) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

var intakeInputTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EASIAction","EASIBizCase","EASIGrtFeedback","EASIIntake","EASILifecycleCost","EASINote"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		intakeInputTypeTypePropEnum = append(intakeInputTypeTypePropEnum, v)
	}
}

const (

	// IntakeInputTypeEASIAction captures enum value "EASIAction"
	IntakeInputTypeEASIAction string = "EASIAction"

	// IntakeInputTypeEASIBizCase captures enum value "EASIBizCase"
	IntakeInputTypeEASIBizCase string = "EASIBizCase"

	// IntakeInputTypeEASIGrtFeedback captures enum value "EASIGrtFeedback"
	IntakeInputTypeEASIGrtFeedback string = "EASIGrtFeedback"

	// IntakeInputTypeEASIIntake captures enum value "EASIIntake"
	IntakeInputTypeEASIIntake string = "EASIIntake"

	// IntakeInputTypeEASILifecycleCost captures enum value "EASILifecycleCost"
	IntakeInputTypeEASILifecycleCost string = "EASILifecycleCost"

	// IntakeInputTypeEASINote captures enum value "EASINote"
	IntakeInputTypeEASINote string = "EASINote"
)

// prop value enum
func (m *IntakeInput) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, intakeInputTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IntakeInput) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntakeInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntakeInput) UnmarshalBinary(b []byte) error {
	var res IntakeInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
