// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EASIAction e a s i action
//
// swagger:model EASIAction
type EASIAction struct {

	// action type
	// Required: true
	ActionType *string `json:"actionType"`

	// actor e u a
	// Required: true
	ActorEUA *string `json:"actorEUA"`

	// feedback
	// Required: true
	Feedback *string `json:"feedback"`

	// intake Id
	// Required: true
	IntakeID *string `json:"intakeId"`
}

// Validate validates this e a s i action
func (m *EASIAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActorEUA(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeedback(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntakeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EASIAction) validateActionType(formats strfmt.Registry) error {

	if err := validate.Required("actionType", "body", m.ActionType); err != nil {
		return err
	}

	return nil
}

func (m *EASIAction) validateActorEUA(formats strfmt.Registry) error {

	if err := validate.Required("actorEUA", "body", m.ActorEUA); err != nil {
		return err
	}

	return nil
}

func (m *EASIAction) validateFeedback(formats strfmt.Registry) error {

	if err := validate.Required("feedback", "body", m.Feedback); err != nil {
		return err
	}

	return nil
}

func (m *EASIAction) validateIntakeID(formats strfmt.Registry) error {

	if err := validate.Required("intakeId", "body", m.IntakeID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EASIAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EASIAction) UnmarshalBinary(b []byte) error {
	var res EASIAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
