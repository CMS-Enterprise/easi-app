// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EASIIntake e a s i intake
//
// swagger:model EASIIntake
type EASIIntake struct {

	// admin lead
	// Required: true
	AdminLead *string `json:"adminLead"`

	// archived at
	// Required: true
	ArchivedAt *string `json:"archivedAt"`

	// business need
	// Required: true
	BusinessNeed *string `json:"businessNeed"`

	// business owner
	// Required: true
	BusinessOwner *string `json:"businessOwner"`

	// business owner component
	// Required: true
	BusinessOwnerComponent *string `json:"businessOwnerComponent"`

	// component
	// Required: true
	Component *string `json:"component"`

	// contract end date
	// Required: true
	ContractEndDate *string `json:"contractEndDate"`

	// contract start date
	// Required: true
	ContractStartDate *string `json:"contractStartDate"`

	// contract vehicle
	// Required: true
	ContractVehicle *string `json:"contractVehicle"`

	// contractor
	// Required: true
	Contractor *string `json:"contractor"`

	// cost increase
	// Required: true
	CostIncrease *string `json:"costIncrease"`

	// cost increase amount
	// Required: true
	CostIncreaseAmount *string `json:"costIncreaseAmount"`

	// decided at
	// Required: true
	DecidedAt *string `json:"decidedAt"`

	// decision next steps
	// Required: true
	DecisionNextSteps *string `json:"decisionNextSteps"`

	// ea collaborator
	// Required: true
	EaCollaborator *string `json:"eaCollaborator"`

	// ea collaborator name
	// Required: true
	EaCollaboratorName *string `json:"eaCollaboratorName"`

	// ea support request
	// Required: true
	// Enum: [ false true]
	EaSupportRequest *string `json:"eaSupportRequest"`

	// existing contract
	// Required: true
	ExistingContract *string `json:"existingContract"`

	// existing funding
	// Required: true
	// Enum: [ false true]
	ExistingFunding *string `json:"existingFunding"`

	// funding number
	// Required: true
	FundingNumber *string `json:"fundingNumber"`

	// funding source
	// Required: true
	FundingSource *string `json:"fundingSource"`

	// grb date
	// Required: true
	GrbDate *string `json:"grbDate"`

	// grt date
	// Required: true
	GrtDate *string `json:"grtDate"`

	// grt review email body
	// Required: true
	GrtReviewEmailBody *string `json:"grtReviewEmailBody"`

	// isso
	// Required: true
	Isso *string `json:"isso"`

	// isso name
	// Required: true
	IssoName *string `json:"issoName"`

	// lifecycle expires at
	// Required: true
	LifecycleExpiresAt *string `json:"lifecycleExpiresAt"`

	// lifecycle ID
	// Required: true
	LifecycleID *string `json:"lifecycleID"`

	// lifecycle scope
	// Required: true
	LifecycleScope *string `json:"lifecycleScope"`

	// oit security collaborator
	// Required: true
	OitSecurityCollaborator *string `json:"oitSecurityCollaborator"`

	// oit security collaborator name
	// Required: true
	OitSecurityCollaboratorName *string `json:"oitSecurityCollaboratorName"`

	// process status
	// Required: true
	ProcessStatus *string `json:"processStatus"`

	// product manager
	// Required: true
	ProductManager *string `json:"productManager"`

	// product manager component
	// Required: true
	ProductManagerComponent *string `json:"productManagerComponent"`

	// project acronym
	// Required: true
	ProjectAcronym *string `json:"projectAcronym"`

	// project name
	// Required: true
	ProjectName *string `json:"projectName"`

	// rejection reason
	// Required: true
	RejectionReason *string `json:"rejectionReason"`

	// request type
	// Required: true
	RequestType *string `json:"requestType"`

	// requester
	// Required: true
	Requester *string `json:"requester"`

	// requester email address
	// Required: true
	RequesterEmailAddress *string `json:"requesterEmailAddress"`

	// solution
	// Required: true
	Solution *string `json:"solution"`

	// status
	// Required: true
	Status *string `json:"status"`

	// submitted at
	// Required: true
	SubmittedAt *string `json:"submittedAt"`

	// trb collaborator
	// Required: true
	TrbCollaborator *string `json:"trbCollaborator"`

	// trb collaborator name
	// Required: true
	TrbCollaboratorName *string `json:"trbCollaboratorName"`

	// user e u a
	// Required: true
	UserEUA *string `json:"userEUA"`
}

// Validate validates this e a s i intake
func (m *EASIIntake) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdminLead(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchivedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessNeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessOwnerComponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractVehicle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCostIncrease(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCostIncreaseAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDecidedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDecisionNextSteps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEaCollaborator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEaCollaboratorName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEaSupportRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExistingContract(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExistingFunding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFundingNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFundingSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrbDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrtDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrtReviewEmailBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsso(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssoName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycleExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycleScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOitSecurityCollaborator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOitSecurityCollaboratorName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductManager(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductManagerComponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectAcronym(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRejectionReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequester(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequesterEmailAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSolution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmittedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrbCollaborator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrbCollaboratorName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserEUA(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EASIIntake) validateAdminLead(formats strfmt.Registry) error {

	if err := validate.Required("adminLead", "body", m.AdminLead); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateArchivedAt(formats strfmt.Registry) error {

	if err := validate.Required("archivedAt", "body", m.ArchivedAt); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateBusinessNeed(formats strfmt.Registry) error {

	if err := validate.Required("businessNeed", "body", m.BusinessNeed); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateBusinessOwner(formats strfmt.Registry) error {

	if err := validate.Required("businessOwner", "body", m.BusinessOwner); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateBusinessOwnerComponent(formats strfmt.Registry) error {

	if err := validate.Required("businessOwnerComponent", "body", m.BusinessOwnerComponent); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateComponent(formats strfmt.Registry) error {

	if err := validate.Required("component", "body", m.Component); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateContractEndDate(formats strfmt.Registry) error {

	if err := validate.Required("contractEndDate", "body", m.ContractEndDate); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateContractStartDate(formats strfmt.Registry) error {

	if err := validate.Required("contractStartDate", "body", m.ContractStartDate); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateContractVehicle(formats strfmt.Registry) error {

	if err := validate.Required("contractVehicle", "body", m.ContractVehicle); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateContractor(formats strfmt.Registry) error {

	if err := validate.Required("contractor", "body", m.Contractor); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateCostIncrease(formats strfmt.Registry) error {

	if err := validate.Required("costIncrease", "body", m.CostIncrease); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateCostIncreaseAmount(formats strfmt.Registry) error {

	if err := validate.Required("costIncreaseAmount", "body", m.CostIncreaseAmount); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateDecidedAt(formats strfmt.Registry) error {

	if err := validate.Required("decidedAt", "body", m.DecidedAt); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateDecisionNextSteps(formats strfmt.Registry) error {

	if err := validate.Required("decisionNextSteps", "body", m.DecisionNextSteps); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateEaCollaborator(formats strfmt.Registry) error {

	if err := validate.Required("eaCollaborator", "body", m.EaCollaborator); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateEaCollaboratorName(formats strfmt.Registry) error {

	if err := validate.Required("eaCollaboratorName", "body", m.EaCollaboratorName); err != nil {
		return err
	}

	return nil
}

var eASIIntakeTypeEaSupportRequestPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","false","true"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eASIIntakeTypeEaSupportRequestPropEnum = append(eASIIntakeTypeEaSupportRequestPropEnum, v)
	}
}

const (

	// EASIIntakeEaSupportRequestEmpty captures enum value ""
	EASIIntakeEaSupportRequestEmpty string = ""

	// EASIIntakeEaSupportRequestFalse captures enum value "false"
	EASIIntakeEaSupportRequestFalse string = "false"

	// EASIIntakeEaSupportRequestTrue captures enum value "true"
	EASIIntakeEaSupportRequestTrue string = "true"
)

// prop value enum
func (m *EASIIntake) validateEaSupportRequestEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, eASIIntakeTypeEaSupportRequestPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EASIIntake) validateEaSupportRequest(formats strfmt.Registry) error {

	if err := validate.Required("eaSupportRequest", "body", m.EaSupportRequest); err != nil {
		return err
	}

	// value enum
	if err := m.validateEaSupportRequestEnum("eaSupportRequest", "body", *m.EaSupportRequest); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateExistingContract(formats strfmt.Registry) error {

	if err := validate.Required("existingContract", "body", m.ExistingContract); err != nil {
		return err
	}

	return nil
}

var eASIIntakeTypeExistingFundingPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","false","true"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eASIIntakeTypeExistingFundingPropEnum = append(eASIIntakeTypeExistingFundingPropEnum, v)
	}
}

const (

	// EASIIntakeExistingFundingEmpty captures enum value ""
	EASIIntakeExistingFundingEmpty string = ""

	// EASIIntakeExistingFundingFalse captures enum value "false"
	EASIIntakeExistingFundingFalse string = "false"

	// EASIIntakeExistingFundingTrue captures enum value "true"
	EASIIntakeExistingFundingTrue string = "true"
)

// prop value enum
func (m *EASIIntake) validateExistingFundingEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, eASIIntakeTypeExistingFundingPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EASIIntake) validateExistingFunding(formats strfmt.Registry) error {

	if err := validate.Required("existingFunding", "body", m.ExistingFunding); err != nil {
		return err
	}

	// value enum
	if err := m.validateExistingFundingEnum("existingFunding", "body", *m.ExistingFunding); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateFundingNumber(formats strfmt.Registry) error {

	if err := validate.Required("fundingNumber", "body", m.FundingNumber); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateFundingSource(formats strfmt.Registry) error {

	if err := validate.Required("fundingSource", "body", m.FundingSource); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateGrbDate(formats strfmt.Registry) error {

	if err := validate.Required("grbDate", "body", m.GrbDate); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateGrtDate(formats strfmt.Registry) error {

	if err := validate.Required("grtDate", "body", m.GrtDate); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateGrtReviewEmailBody(formats strfmt.Registry) error {

	if err := validate.Required("grtReviewEmailBody", "body", m.GrtReviewEmailBody); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateIsso(formats strfmt.Registry) error {

	if err := validate.Required("isso", "body", m.Isso); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateIssoName(formats strfmt.Registry) error {

	if err := validate.Required("issoName", "body", m.IssoName); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateLifecycleExpiresAt(formats strfmt.Registry) error {

	if err := validate.Required("lifecycleExpiresAt", "body", m.LifecycleExpiresAt); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateLifecycleID(formats strfmt.Registry) error {

	if err := validate.Required("lifecycleID", "body", m.LifecycleID); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateLifecycleScope(formats strfmt.Registry) error {

	if err := validate.Required("lifecycleScope", "body", m.LifecycleScope); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateOitSecurityCollaborator(formats strfmt.Registry) error {

	if err := validate.Required("oitSecurityCollaborator", "body", m.OitSecurityCollaborator); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateOitSecurityCollaboratorName(formats strfmt.Registry) error {

	if err := validate.Required("oitSecurityCollaboratorName", "body", m.OitSecurityCollaboratorName); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateProcessStatus(formats strfmt.Registry) error {

	if err := validate.Required("processStatus", "body", m.ProcessStatus); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateProductManager(formats strfmt.Registry) error {

	if err := validate.Required("productManager", "body", m.ProductManager); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateProductManagerComponent(formats strfmt.Registry) error {

	if err := validate.Required("productManagerComponent", "body", m.ProductManagerComponent); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateProjectAcronym(formats strfmt.Registry) error {

	if err := validate.Required("projectAcronym", "body", m.ProjectAcronym); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateProjectName(formats strfmt.Registry) error {

	if err := validate.Required("projectName", "body", m.ProjectName); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateRejectionReason(formats strfmt.Registry) error {

	if err := validate.Required("rejectionReason", "body", m.RejectionReason); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateRequestType(formats strfmt.Registry) error {

	if err := validate.Required("requestType", "body", m.RequestType); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateRequester(formats strfmt.Registry) error {

	if err := validate.Required("requester", "body", m.Requester); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateRequesterEmailAddress(formats strfmt.Registry) error {

	if err := validate.Required("requesterEmailAddress", "body", m.RequesterEmailAddress); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateSolution(formats strfmt.Registry) error {

	if err := validate.Required("solution", "body", m.Solution); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateSubmittedAt(formats strfmt.Registry) error {

	if err := validate.Required("submittedAt", "body", m.SubmittedAt); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateTrbCollaborator(formats strfmt.Registry) error {

	if err := validate.Required("trbCollaborator", "body", m.TrbCollaborator); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateTrbCollaboratorName(formats strfmt.Registry) error {

	if err := validate.Required("trbCollaboratorName", "body", m.TrbCollaboratorName); err != nil {
		return err
	}

	return nil
}

func (m *EASIIntake) validateUserEUA(formats strfmt.Registry) error {

	if err := validate.Required("userEUA", "body", m.UserEUA); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this e a s i intake based on context it is used
func (m *EASIIntake) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EASIIntake) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EASIIntake) UnmarshalBinary(b []byte) error {
	var res EASIIntake
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
