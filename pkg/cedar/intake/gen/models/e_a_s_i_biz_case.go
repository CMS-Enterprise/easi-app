// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EASIBizCase e a s i biz case
//
// swagger:model EASIBizCase
type EASIBizCase struct {

	// alternative a acquisition approach
	// Required: true
	AlternativeAAcquisitionApproach *string `json:"alternativeAAcquisitionApproach"`

	// alternative a cons
	// Required: true
	AlternativeACons *string `json:"alternativeACons"`

	// alternative a cost savings
	// Required: true
	AlternativeACostSavings *string `json:"alternativeACostSavings"`

	// alternative a has UI
	// Required: true
	AlternativeAHasUI *string `json:"alternativeAHasUI"`

	// alternative a hosting cloud service type
	// Required: true
	AlternativeAHostingCloudServiceType *string `json:"alternativeAHostingCloudServiceType"`

	// alternative a hosting location
	// Required: true
	AlternativeAHostingLocation *string `json:"alternativeAHostingLocation"`

	// alternative a hosting type
	// Required: true
	AlternativeAHostingType *string `json:"alternativeAHostingType"`

	// alternative a pros
	// Required: true
	AlternativeAPros *string `json:"alternativeAPros"`

	// alternative a security is approved
	// Required: true
	// Enum: [ false true]
	AlternativeASecurityIsApproved *string `json:"alternativeASecurityIsApproved"`

	// alternative a security is being reviewed
	// Required: true
	AlternativeASecurityIsBeingReviewed *string `json:"alternativeASecurityIsBeingReviewed"`

	// alternative a summary
	// Required: true
	AlternativeASummary *string `json:"alternativeASummary"`

	// alternative a title
	// Required: true
	AlternativeATitle *string `json:"alternativeATitle"`

	// alternative b acquisition approach
	// Required: true
	AlternativeBAcquisitionApproach *string `json:"alternativeBAcquisitionApproach"`

	// alternative b cons
	// Required: true
	AlternativeBCons *string `json:"alternativeBCons"`

	// alternative b cost savings
	// Required: true
	AlternativeBCostSavings *string `json:"alternativeBCostSavings"`

	// alternative b has UI
	// Required: true
	AlternativeBHasUI *string `json:"alternativeBHasUI"`

	// alternative b hosting cloud service type
	// Required: true
	AlternativeBHostingCloudServiceType *string `json:"alternativeBHostingCloudServiceType"`

	// alternative b hosting location
	// Required: true
	AlternativeBHostingLocation *string `json:"alternativeBHostingLocation"`

	// alternative b hosting type
	// Required: true
	AlternativeBHostingType *string `json:"alternativeBHostingType"`

	// alternative b pros
	// Required: true
	AlternativeBPros *string `json:"alternativeBPros"`

	// alternative b security is approved
	// Required: true
	// Enum: [ false true]
	AlternativeBSecurityIsApproved *string `json:"alternativeBSecurityIsApproved"`

	// alternative b security is being reviewed
	// Required: true
	AlternativeBSecurityIsBeingReviewed *string `json:"alternativeBSecurityIsBeingReviewed"`

	// alternative b summary
	// Required: true
	AlternativeBSummary *string `json:"alternativeBSummary"`

	// alternative b title
	// Required: true
	AlternativeBTitle *string `json:"alternativeBTitle"`

	// archived at
	// Required: true
	ArchivedAt *string `json:"archivedAt"`

	// as is cons
	// Required: true
	AsIsCons *string `json:"asIsCons"`

	// as is cost savings
	// Required: true
	AsIsCostSavings *string `json:"asIsCostSavings"`

	// as is pros
	// Required: true
	AsIsPros *string `json:"asIsPros"`

	// as is summary
	// Required: true
	AsIsSummary *string `json:"asIsSummary"`

	// as is title
	// Required: true
	AsIsTitle *string `json:"asIsTitle"`

	// business need
	// Required: true
	BusinessNeed *string `json:"businessNeed"`

	// business owner
	// Required: true
	BusinessOwner *string `json:"businessOwner"`

	// cms benefit
	// Required: true
	CmsBenefit *string `json:"cmsBenefit"`

	// initial submitted at
	// Required: true
	InitialSubmittedAt *string `json:"initialSubmittedAt"`

	// intake Id
	// Required: true
	IntakeID *string `json:"intakeId"`

	// last submitted at
	// Required: true
	LastSubmittedAt *string `json:"lastSubmittedAt"`

	// lifecycle cost lines
	// Required: true
	LifecycleCostLines []*EASILifecycleCost `json:"lifecycleCostLines"`

	// preferred acquisition approach
	// Required: true
	PreferredAcquisitionApproach *string `json:"preferredAcquisitionApproach"`

	// preferred cons
	// Required: true
	PreferredCons *string `json:"preferredCons"`

	// preferred cost savings
	// Required: true
	PreferredCostSavings *string `json:"preferredCostSavings"`

	// preferred has UI
	// Required: true
	PreferredHasUI *string `json:"preferredHasUI"`

	// preferred hosting cloud service type
	// Required: true
	PreferredHostingCloudServiceType *string `json:"preferredHostingCloudServiceType"`

	// preferred hosting location
	// Required: true
	PreferredHostingLocation *string `json:"preferredHostingLocation"`

	// preferred hosting type
	// Required: true
	PreferredHostingType *string `json:"preferredHostingType"`

	// preferred pros
	// Required: true
	PreferredPros *string `json:"preferredPros"`

	// preferred security is approved
	// Required: true
	// Enum: [ false true]
	PreferredSecurityIsApproved *string `json:"preferredSecurityIsApproved"`

	// preferred security is being reviewed
	// Required: true
	PreferredSecurityIsBeingReviewed *string `json:"preferredSecurityIsBeingReviewed"`

	// preferred summary
	// Required: true
	PreferredSummary *string `json:"preferredSummary"`

	// preferred title
	// Required: true
	PreferredTitle *string `json:"preferredTitle"`

	// priority alignment
	// Required: true
	PriorityAlignment *string `json:"priorityAlignment"`

	// project name
	// Required: true
	ProjectName *string `json:"projectName"`

	// requester
	// Required: true
	Requester *string `json:"requester"`

	// requester phone number
	// Required: true
	RequesterPhoneNumber *string `json:"requesterPhoneNumber"`

	// submitted at
	// Required: true
	SubmittedAt *string `json:"submittedAt"`

	// success indicators
	// Required: true
	SuccessIndicators *string `json:"successIndicators"`

	// user e u a
	// Required: true
	UserEUA *string `json:"userEUA"`
}

// Validate validates this e a s i biz case
func (m *EASIBizCase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlternativeAAcquisitionApproach(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeACons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeACostSavings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeAHasUI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeAHostingCloudServiceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeAHostingLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeAHostingType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeAPros(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeASecurityIsApproved(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeASecurityIsBeingReviewed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeASummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeATitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeBAcquisitionApproach(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeBCons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeBCostSavings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeBHasUI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeBHostingCloudServiceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeBHostingLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeBHostingType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeBPros(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeBSecurityIsApproved(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeBSecurityIsBeingReviewed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeBSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeBTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArchivedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAsIsCons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAsIsCostSavings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAsIsPros(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAsIsSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAsIsTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessNeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCmsBenefit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitialSubmittedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntakeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSubmittedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycleCostLines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredAcquisitionApproach(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredCons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredCostSavings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredHasUI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredHostingCloudServiceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredHostingLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredHostingType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredPros(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredSecurityIsApproved(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredSecurityIsBeingReviewed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriorityAlignment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequester(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequesterPhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmittedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuccessIndicators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserEUA(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EASIBizCase) validateAlternativeAAcquisitionApproach(formats strfmt.Registry) error {

	if err := validate.Required("alternativeAAcquisitionApproach", "body", m.AlternativeAAcquisitionApproach); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAlternativeACons(formats strfmt.Registry) error {

	if err := validate.Required("alternativeACons", "body", m.AlternativeACons); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAlternativeACostSavings(formats strfmt.Registry) error {

	if err := validate.Required("alternativeACostSavings", "body", m.AlternativeACostSavings); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAlternativeAHasUI(formats strfmt.Registry) error {

	if err := validate.Required("alternativeAHasUI", "body", m.AlternativeAHasUI); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAlternativeAHostingCloudServiceType(formats strfmt.Registry) error {

	if err := validate.Required("alternativeAHostingCloudServiceType", "body", m.AlternativeAHostingCloudServiceType); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAlternativeAHostingLocation(formats strfmt.Registry) error {

	if err := validate.Required("alternativeAHostingLocation", "body", m.AlternativeAHostingLocation); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAlternativeAHostingType(formats strfmt.Registry) error {

	if err := validate.Required("alternativeAHostingType", "body", m.AlternativeAHostingType); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAlternativeAPros(formats strfmt.Registry) error {

	if err := validate.Required("alternativeAPros", "body", m.AlternativeAPros); err != nil {
		return err
	}

	return nil
}

var eASIBizCaseTypeAlternativeASecurityIsApprovedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","false","true"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eASIBizCaseTypeAlternativeASecurityIsApprovedPropEnum = append(eASIBizCaseTypeAlternativeASecurityIsApprovedPropEnum, v)
	}
}

const (

	// EASIBizCaseAlternativeASecurityIsApprovedEmpty captures enum value ""
	EASIBizCaseAlternativeASecurityIsApprovedEmpty string = ""

	// EASIBizCaseAlternativeASecurityIsApprovedFalse captures enum value "false"
	EASIBizCaseAlternativeASecurityIsApprovedFalse string = "false"

	// EASIBizCaseAlternativeASecurityIsApprovedTrue captures enum value "true"
	EASIBizCaseAlternativeASecurityIsApprovedTrue string = "true"
)

// prop value enum
func (m *EASIBizCase) validateAlternativeASecurityIsApprovedEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, eASIBizCaseTypeAlternativeASecurityIsApprovedPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EASIBizCase) validateAlternativeASecurityIsApproved(formats strfmt.Registry) error {

	if err := validate.Required("alternativeASecurityIsApproved", "body", m.AlternativeASecurityIsApproved); err != nil {
		return err
	}

	// value enum
	if err := m.validateAlternativeASecurityIsApprovedEnum("alternativeASecurityIsApproved", "body", *m.AlternativeASecurityIsApproved); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAlternativeASecurityIsBeingReviewed(formats strfmt.Registry) error {

	if err := validate.Required("alternativeASecurityIsBeingReviewed", "body", m.AlternativeASecurityIsBeingReviewed); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAlternativeASummary(formats strfmt.Registry) error {

	if err := validate.Required("alternativeASummary", "body", m.AlternativeASummary); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAlternativeATitle(formats strfmt.Registry) error {

	if err := validate.Required("alternativeATitle", "body", m.AlternativeATitle); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAlternativeBAcquisitionApproach(formats strfmt.Registry) error {

	if err := validate.Required("alternativeBAcquisitionApproach", "body", m.AlternativeBAcquisitionApproach); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAlternativeBCons(formats strfmt.Registry) error {

	if err := validate.Required("alternativeBCons", "body", m.AlternativeBCons); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAlternativeBCostSavings(formats strfmt.Registry) error {

	if err := validate.Required("alternativeBCostSavings", "body", m.AlternativeBCostSavings); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAlternativeBHasUI(formats strfmt.Registry) error {

	if err := validate.Required("alternativeBHasUI", "body", m.AlternativeBHasUI); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAlternativeBHostingCloudServiceType(formats strfmt.Registry) error {

	if err := validate.Required("alternativeBHostingCloudServiceType", "body", m.AlternativeBHostingCloudServiceType); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAlternativeBHostingLocation(formats strfmt.Registry) error {

	if err := validate.Required("alternativeBHostingLocation", "body", m.AlternativeBHostingLocation); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAlternativeBHostingType(formats strfmt.Registry) error {

	if err := validate.Required("alternativeBHostingType", "body", m.AlternativeBHostingType); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAlternativeBPros(formats strfmt.Registry) error {

	if err := validate.Required("alternativeBPros", "body", m.AlternativeBPros); err != nil {
		return err
	}

	return nil
}

var eASIBizCaseTypeAlternativeBSecurityIsApprovedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","false","true"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eASIBizCaseTypeAlternativeBSecurityIsApprovedPropEnum = append(eASIBizCaseTypeAlternativeBSecurityIsApprovedPropEnum, v)
	}
}

const (

	// EASIBizCaseAlternativeBSecurityIsApprovedEmpty captures enum value ""
	EASIBizCaseAlternativeBSecurityIsApprovedEmpty string = ""

	// EASIBizCaseAlternativeBSecurityIsApprovedFalse captures enum value "false"
	EASIBizCaseAlternativeBSecurityIsApprovedFalse string = "false"

	// EASIBizCaseAlternativeBSecurityIsApprovedTrue captures enum value "true"
	EASIBizCaseAlternativeBSecurityIsApprovedTrue string = "true"
)

// prop value enum
func (m *EASIBizCase) validateAlternativeBSecurityIsApprovedEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, eASIBizCaseTypeAlternativeBSecurityIsApprovedPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EASIBizCase) validateAlternativeBSecurityIsApproved(formats strfmt.Registry) error {

	if err := validate.Required("alternativeBSecurityIsApproved", "body", m.AlternativeBSecurityIsApproved); err != nil {
		return err
	}

	// value enum
	if err := m.validateAlternativeBSecurityIsApprovedEnum("alternativeBSecurityIsApproved", "body", *m.AlternativeBSecurityIsApproved); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAlternativeBSecurityIsBeingReviewed(formats strfmt.Registry) error {

	if err := validate.Required("alternativeBSecurityIsBeingReviewed", "body", m.AlternativeBSecurityIsBeingReviewed); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAlternativeBSummary(formats strfmt.Registry) error {

	if err := validate.Required("alternativeBSummary", "body", m.AlternativeBSummary); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAlternativeBTitle(formats strfmt.Registry) error {

	if err := validate.Required("alternativeBTitle", "body", m.AlternativeBTitle); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateArchivedAt(formats strfmt.Registry) error {

	if err := validate.Required("archivedAt", "body", m.ArchivedAt); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAsIsCons(formats strfmt.Registry) error {

	if err := validate.Required("asIsCons", "body", m.AsIsCons); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAsIsCostSavings(formats strfmt.Registry) error {

	if err := validate.Required("asIsCostSavings", "body", m.AsIsCostSavings); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAsIsPros(formats strfmt.Registry) error {

	if err := validate.Required("asIsPros", "body", m.AsIsPros); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAsIsSummary(formats strfmt.Registry) error {

	if err := validate.Required("asIsSummary", "body", m.AsIsSummary); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAsIsTitle(formats strfmt.Registry) error {

	if err := validate.Required("asIsTitle", "body", m.AsIsTitle); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateBusinessNeed(formats strfmt.Registry) error {

	if err := validate.Required("businessNeed", "body", m.BusinessNeed); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateBusinessOwner(formats strfmt.Registry) error {

	if err := validate.Required("businessOwner", "body", m.BusinessOwner); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateCmsBenefit(formats strfmt.Registry) error {

	if err := validate.Required("cmsBenefit", "body", m.CmsBenefit); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateInitialSubmittedAt(formats strfmt.Registry) error {

	if err := validate.Required("initialSubmittedAt", "body", m.InitialSubmittedAt); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateIntakeID(formats strfmt.Registry) error {

	if err := validate.Required("intakeId", "body", m.IntakeID); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateLastSubmittedAt(formats strfmt.Registry) error {

	if err := validate.Required("lastSubmittedAt", "body", m.LastSubmittedAt); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateLifecycleCostLines(formats strfmt.Registry) error {

	if err := validate.Required("lifecycleCostLines", "body", m.LifecycleCostLines); err != nil {
		return err
	}

	for i := 0; i < len(m.LifecycleCostLines); i++ {
		if swag.IsZero(m.LifecycleCostLines[i]) { // not required
			continue
		}

		if m.LifecycleCostLines[i] != nil {
			if err := m.LifecycleCostLines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lifecycleCostLines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EASIBizCase) validatePreferredAcquisitionApproach(formats strfmt.Registry) error {

	if err := validate.Required("preferredAcquisitionApproach", "body", m.PreferredAcquisitionApproach); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validatePreferredCons(formats strfmt.Registry) error {

	if err := validate.Required("preferredCons", "body", m.PreferredCons); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validatePreferredCostSavings(formats strfmt.Registry) error {

	if err := validate.Required("preferredCostSavings", "body", m.PreferredCostSavings); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validatePreferredHasUI(formats strfmt.Registry) error {

	if err := validate.Required("preferredHasUI", "body", m.PreferredHasUI); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validatePreferredHostingCloudServiceType(formats strfmt.Registry) error {

	if err := validate.Required("preferredHostingCloudServiceType", "body", m.PreferredHostingCloudServiceType); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validatePreferredHostingLocation(formats strfmt.Registry) error {

	if err := validate.Required("preferredHostingLocation", "body", m.PreferredHostingLocation); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validatePreferredHostingType(formats strfmt.Registry) error {

	if err := validate.Required("preferredHostingType", "body", m.PreferredHostingType); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validatePreferredPros(formats strfmt.Registry) error {

	if err := validate.Required("preferredPros", "body", m.PreferredPros); err != nil {
		return err
	}

	return nil
}

var eASIBizCaseTypePreferredSecurityIsApprovedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","false","true"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eASIBizCaseTypePreferredSecurityIsApprovedPropEnum = append(eASIBizCaseTypePreferredSecurityIsApprovedPropEnum, v)
	}
}

const (

	// EASIBizCasePreferredSecurityIsApprovedEmpty captures enum value ""
	EASIBizCasePreferredSecurityIsApprovedEmpty string = ""

	// EASIBizCasePreferredSecurityIsApprovedFalse captures enum value "false"
	EASIBizCasePreferredSecurityIsApprovedFalse string = "false"

	// EASIBizCasePreferredSecurityIsApprovedTrue captures enum value "true"
	EASIBizCasePreferredSecurityIsApprovedTrue string = "true"
)

// prop value enum
func (m *EASIBizCase) validatePreferredSecurityIsApprovedEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, eASIBizCaseTypePreferredSecurityIsApprovedPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EASIBizCase) validatePreferredSecurityIsApproved(formats strfmt.Registry) error {

	if err := validate.Required("preferredSecurityIsApproved", "body", m.PreferredSecurityIsApproved); err != nil {
		return err
	}

	// value enum
	if err := m.validatePreferredSecurityIsApprovedEnum("preferredSecurityIsApproved", "body", *m.PreferredSecurityIsApproved); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validatePreferredSecurityIsBeingReviewed(formats strfmt.Registry) error {

	if err := validate.Required("preferredSecurityIsBeingReviewed", "body", m.PreferredSecurityIsBeingReviewed); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validatePreferredSummary(formats strfmt.Registry) error {

	if err := validate.Required("preferredSummary", "body", m.PreferredSummary); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validatePreferredTitle(formats strfmt.Registry) error {

	if err := validate.Required("preferredTitle", "body", m.PreferredTitle); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validatePriorityAlignment(formats strfmt.Registry) error {

	if err := validate.Required("priorityAlignment", "body", m.PriorityAlignment); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateProjectName(formats strfmt.Registry) error {

	if err := validate.Required("projectName", "body", m.ProjectName); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateRequester(formats strfmt.Registry) error {

	if err := validate.Required("requester", "body", m.Requester); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateRequesterPhoneNumber(formats strfmt.Registry) error {

	if err := validate.Required("requesterPhoneNumber", "body", m.RequesterPhoneNumber); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateSubmittedAt(formats strfmt.Registry) error {

	if err := validate.Required("submittedAt", "body", m.SubmittedAt); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateSuccessIndicators(formats strfmt.Registry) error {

	if err := validate.Required("successIndicators", "body", m.SuccessIndicators); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateUserEUA(formats strfmt.Registry) error {

	if err := validate.Required("userEUA", "body", m.UserEUA); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EASIBizCase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EASIBizCase) UnmarshalBinary(b []byte) error {
	var res EASIBizCase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
