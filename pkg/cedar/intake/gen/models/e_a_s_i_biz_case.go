// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EASIBizCase e a s i biz case
//
// swagger:model EASIBizCase
type EASIBizCase struct {

	// archived at
	// Required: true
	ArchivedAt *string `json:"archivedAt"`

	// as is cons
	// Required: true
	AsIsCons *string `json:"asIsCons"`

	// as is cost savings
	// Required: true
	AsIsCostSavings *string `json:"asIsCostSavings"`

	// as is pros
	// Required: true
	AsIsPros *string `json:"asIsPros"`

	// as is summary
	// Required: true
	AsIsSummary *string `json:"asIsSummary"`

	// as is title
	// Required: true
	AsIsTitle *string `json:"asIsTitle"`

	// business need
	// Required: true
	BusinessNeed *string `json:"businessNeed"`

	// business owner
	// Required: true
	BusinessOwner *string `json:"businessOwner"`

	// business solutions
	// Required: true
	BusinessSolutions []*EASIBusinessSolution `json:"businessSolutions"`

	// cms benefit
	// Required: true
	CmsBenefit *string `json:"cmsBenefit"`

	// initial submitted at
	// Required: true
	InitialSubmittedAt *string `json:"initialSubmittedAt"`

	// intake Id
	// Required: true
	IntakeID *string `json:"intakeId"`

	// last submitted at
	// Required: true
	LastSubmittedAt *string `json:"lastSubmittedAt"`

	// lifecycle cost lines
	// Required: true
	LifecycleCostLines []*EASILifecycleCost `json:"lifecycleCostLines"`

	// priority alignment
	// Required: true
	PriorityAlignment *string `json:"priorityAlignment"`

	// project name
	// Required: true
	ProjectName *string `json:"projectName"`

	// requester
	// Required: true
	Requester *string `json:"requester"`

	// requester phone number
	// Required: true
	RequesterPhoneNumber *string `json:"requesterPhoneNumber"`

	// submitted at
	// Required: true
	SubmittedAt *string `json:"submittedAt"`

	// success indicators
	// Required: true
	SuccessIndicators *string `json:"successIndicators"`

	// user e u a
	// Required: true
	UserEUA *string `json:"userEUA"`
}

// Validate validates this e a s i biz case
func (m *EASIBizCase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchivedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAsIsCons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAsIsCostSavings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAsIsPros(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAsIsSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAsIsTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessNeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessSolutions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCmsBenefit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitialSubmittedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntakeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSubmittedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycleCostLines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriorityAlignment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequester(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequesterPhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmittedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuccessIndicators(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserEUA(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EASIBizCase) validateArchivedAt(formats strfmt.Registry) error {

	if err := validate.Required("archivedAt", "body", m.ArchivedAt); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAsIsCons(formats strfmt.Registry) error {

	if err := validate.Required("asIsCons", "body", m.AsIsCons); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAsIsCostSavings(formats strfmt.Registry) error {

	if err := validate.Required("asIsCostSavings", "body", m.AsIsCostSavings); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAsIsPros(formats strfmt.Registry) error {

	if err := validate.Required("asIsPros", "body", m.AsIsPros); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAsIsSummary(formats strfmt.Registry) error {

	if err := validate.Required("asIsSummary", "body", m.AsIsSummary); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateAsIsTitle(formats strfmt.Registry) error {

	if err := validate.Required("asIsTitle", "body", m.AsIsTitle); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateBusinessNeed(formats strfmt.Registry) error {

	if err := validate.Required("businessNeed", "body", m.BusinessNeed); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateBusinessOwner(formats strfmt.Registry) error {

	if err := validate.Required("businessOwner", "body", m.BusinessOwner); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateBusinessSolutions(formats strfmt.Registry) error {

	if err := validate.Required("businessSolutions", "body", m.BusinessSolutions); err != nil {
		return err
	}

	for i := 0; i < len(m.BusinessSolutions); i++ {
		if swag.IsZero(m.BusinessSolutions[i]) { // not required
			continue
		}

		if m.BusinessSolutions[i] != nil {
			if err := m.BusinessSolutions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("businessSolutions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EASIBizCase) validateCmsBenefit(formats strfmt.Registry) error {

	if err := validate.Required("cmsBenefit", "body", m.CmsBenefit); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateInitialSubmittedAt(formats strfmt.Registry) error {

	if err := validate.Required("initialSubmittedAt", "body", m.InitialSubmittedAt); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateIntakeID(formats strfmt.Registry) error {

	if err := validate.Required("intakeId", "body", m.IntakeID); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateLastSubmittedAt(formats strfmt.Registry) error {

	if err := validate.Required("lastSubmittedAt", "body", m.LastSubmittedAt); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateLifecycleCostLines(formats strfmt.Registry) error {

	if err := validate.Required("lifecycleCostLines", "body", m.LifecycleCostLines); err != nil {
		return err
	}

	for i := 0; i < len(m.LifecycleCostLines); i++ {
		if swag.IsZero(m.LifecycleCostLines[i]) { // not required
			continue
		}

		if m.LifecycleCostLines[i] != nil {
			if err := m.LifecycleCostLines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lifecycleCostLines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EASIBizCase) validatePriorityAlignment(formats strfmt.Registry) error {

	if err := validate.Required("priorityAlignment", "body", m.PriorityAlignment); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateProjectName(formats strfmt.Registry) error {

	if err := validate.Required("projectName", "body", m.ProjectName); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateRequester(formats strfmt.Registry) error {

	if err := validate.Required("requester", "body", m.Requester); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateRequesterPhoneNumber(formats strfmt.Registry) error {

	if err := validate.Required("requesterPhoneNumber", "body", m.RequesterPhoneNumber); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateSubmittedAt(formats strfmt.Registry) error {

	if err := validate.Required("submittedAt", "body", m.SubmittedAt); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateSuccessIndicators(formats strfmt.Registry) error {

	if err := validate.Required("successIndicators", "body", m.SuccessIndicators); err != nil {
		return err
	}

	return nil
}

func (m *EASIBizCase) validateUserEUA(formats strfmt.Registry) error {

	if err := validate.Required("userEUA", "body", m.UserEUA); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this e a s i biz case based on the context it is used
func (m *EASIBizCase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBusinessSolutions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLifecycleCostLines(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EASIBizCase) contextValidateBusinessSolutions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BusinessSolutions); i++ {

		if m.BusinessSolutions[i] != nil {
			if err := m.BusinessSolutions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("businessSolutions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EASIBizCase) contextValidateLifecycleCostLines(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LifecycleCostLines); i++ {

		if m.LifecycleCostLines[i] != nil {
			if err := m.LifecycleCostLines[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lifecycleCostLines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EASIBizCase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EASIBizCase) UnmarshalBinary(b []byte) error {
	var res EASIBizCase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
