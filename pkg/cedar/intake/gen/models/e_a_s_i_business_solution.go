// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EASIBusinessSolution e a s i business solution
//
// swagger:model EASIBusinessSolution
type EASIBusinessSolution struct {

	// acquisition approach
	// Required: true
	AcquisitionApproach *string `json:"acquisitionApproach"`

	// cons
	// Required: true
	Cons *string `json:"cons"`

	// cost savings
	// Required: true
	CostSavings *string `json:"costSavings"`

	// has UI
	// Required: true
	HasUI *string `json:"hasUI"`

	// hosting cloud service type
	// Required: true
	HostingCloudServiceType *string `json:"hostingCloudServiceType"`

	// hosting location
	// Required: true
	HostingLocation *string `json:"hostingLocation"`

	// hosting type
	// Required: true
	HostingType *string `json:"hostingType"`

	// pros
	// Required: true
	Pros *string `json:"pros"`

	// security is approved
	// Required: true
	// Enum: [ false true]
	SecurityIsApproved *string `json:"securityIsApproved"`

	// security is being reviewed
	// Required: true
	SecurityIsBeingReviewed *string `json:"securityIsBeingReviewed"`

	// solution type
	// Required: true
	// Enum: [preferred alternativeA alternativeB]
	SolutionType *string `json:"solutionType"`

	// summary
	// Required: true
	Summary *string `json:"summary"`

	// title
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this e a s i business solution
func (m *EASIBusinessSolution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcquisitionApproach(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCostSavings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasUI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostingCloudServiceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostingLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostingType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePros(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityIsApproved(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityIsBeingReviewed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSolutionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EASIBusinessSolution) validateAcquisitionApproach(formats strfmt.Registry) error {

	if err := validate.Required("acquisitionApproach", "body", m.AcquisitionApproach); err != nil {
		return err
	}

	return nil
}

func (m *EASIBusinessSolution) validateCons(formats strfmt.Registry) error {

	if err := validate.Required("cons", "body", m.Cons); err != nil {
		return err
	}

	return nil
}

func (m *EASIBusinessSolution) validateCostSavings(formats strfmt.Registry) error {

	if err := validate.Required("costSavings", "body", m.CostSavings); err != nil {
		return err
	}

	return nil
}

func (m *EASIBusinessSolution) validateHasUI(formats strfmt.Registry) error {

	if err := validate.Required("hasUI", "body", m.HasUI); err != nil {
		return err
	}

	return nil
}

func (m *EASIBusinessSolution) validateHostingCloudServiceType(formats strfmt.Registry) error {

	if err := validate.Required("hostingCloudServiceType", "body", m.HostingCloudServiceType); err != nil {
		return err
	}

	return nil
}

func (m *EASIBusinessSolution) validateHostingLocation(formats strfmt.Registry) error {

	if err := validate.Required("hostingLocation", "body", m.HostingLocation); err != nil {
		return err
	}

	return nil
}

func (m *EASIBusinessSolution) validateHostingType(formats strfmt.Registry) error {

	if err := validate.Required("hostingType", "body", m.HostingType); err != nil {
		return err
	}

	return nil
}

func (m *EASIBusinessSolution) validatePros(formats strfmt.Registry) error {

	if err := validate.Required("pros", "body", m.Pros); err != nil {
		return err
	}

	return nil
}

var eASIBusinessSolutionTypeSecurityIsApprovedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","false","true"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eASIBusinessSolutionTypeSecurityIsApprovedPropEnum = append(eASIBusinessSolutionTypeSecurityIsApprovedPropEnum, v)
	}
}

const (

	// EASIBusinessSolutionSecurityIsApprovedEmpty captures enum value ""
	EASIBusinessSolutionSecurityIsApprovedEmpty string = ""

	// EASIBusinessSolutionSecurityIsApprovedFalse captures enum value "false"
	EASIBusinessSolutionSecurityIsApprovedFalse string = "false"

	// EASIBusinessSolutionSecurityIsApprovedTrue captures enum value "true"
	EASIBusinessSolutionSecurityIsApprovedTrue string = "true"
)

// prop value enum
func (m *EASIBusinessSolution) validateSecurityIsApprovedEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, eASIBusinessSolutionTypeSecurityIsApprovedPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EASIBusinessSolution) validateSecurityIsApproved(formats strfmt.Registry) error {

	if err := validate.Required("securityIsApproved", "body", m.SecurityIsApproved); err != nil {
		return err
	}

	// value enum
	if err := m.validateSecurityIsApprovedEnum("securityIsApproved", "body", *m.SecurityIsApproved); err != nil {
		return err
	}

	return nil
}

func (m *EASIBusinessSolution) validateSecurityIsBeingReviewed(formats strfmt.Registry) error {

	if err := validate.Required("securityIsBeingReviewed", "body", m.SecurityIsBeingReviewed); err != nil {
		return err
	}

	return nil
}

var eASIBusinessSolutionTypeSolutionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["preferred","alternativeA","alternativeB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eASIBusinessSolutionTypeSolutionTypePropEnum = append(eASIBusinessSolutionTypeSolutionTypePropEnum, v)
	}
}

const (

	// EASIBusinessSolutionSolutionTypePreferred captures enum value "preferred"
	EASIBusinessSolutionSolutionTypePreferred string = "preferred"

	// EASIBusinessSolutionSolutionTypeAlternativeA captures enum value "alternativeA"
	EASIBusinessSolutionSolutionTypeAlternativeA string = "alternativeA"

	// EASIBusinessSolutionSolutionTypeAlternativeB captures enum value "alternativeB"
	EASIBusinessSolutionSolutionTypeAlternativeB string = "alternativeB"
)

// prop value enum
func (m *EASIBusinessSolution) validateSolutionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, eASIBusinessSolutionTypeSolutionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EASIBusinessSolution) validateSolutionType(formats strfmt.Registry) error {

	if err := validate.Required("solutionType", "body", m.SolutionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateSolutionTypeEnum("solutionType", "body", *m.SolutionType); err != nil {
		return err
	}

	return nil
}

func (m *EASIBusinessSolution) validateSummary(formats strfmt.Registry) error {

	if err := validate.Required("summary", "body", m.Summary); err != nil {
		return err
	}

	return nil
}

func (m *EASIBusinessSolution) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this e a s i business solution based on context it is used
func (m *EASIBusinessSolution) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EASIBusinessSolution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EASIBusinessSolution) UnmarshalBinary(b []byte) error {
	var res EASIBusinessSolution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
