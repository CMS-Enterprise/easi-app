// Code generated by ogen, DO NOT EDIT.

package cedarcoreclient

import (
	"fmt"

	"github.com/go-faster/errors"
	"github.com/ogen-go/ogen/validate"
)

func (s GatewayCEDAR20Core20API200AuthorityToOperateGetContainsPersonallyIdentifiableInformation) Validate() error {
	switch s {
	case "true":
		return nil
	case "True":
		return nil
	case "TRUE":
		return nil
	case "false":
		return nil
	case "False":
		return nil
	case "FALSE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200AuthorityToOperateGetIsProtectedHealthInformation) Validate() error {
	switch s {
	case "true":
		return nil
	case "True":
		return nil
	case "TRUE":
		return nil
	case "false":
		return nil
	case "False":
		return nil
	case "FALSE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewayCEDAR20Core20API200BudgetPostReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Budgets == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Budgets",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200BudgetPutReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Budgets == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Budgets",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200ContractPostReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Contracts == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Contracts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewayCEDAR20Core20API200CostTypeListGetApplication) Validate() error {
	switch s {
	case "alfabet":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200DeploymentGetDeploymentType) Validate() error {
	switch s {
	case "COOP DR":
		return nil
	case "Development":
		return nil
	case "Implementation":
		return nil
	case "Integration":
		return nil
	case "Production":
		return nil
	case "Testing":
		return nil
	case "Training":
		return nil
	case "Validation":
		return nil
	case "Other":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewayCEDAR20Core20API200DeploymentGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Deployments {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Deployments",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.DeploymentType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "deploymentType",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.State.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ReplicatedSystemElements.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "replicatedSystemElements",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DataCenter.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "DataCenter",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenter) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.State.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterState) Validate() error {
	switch s {
	case "active":
		return nil
	case "planned":
		return nil
	case "retired":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatus) Validate() error {
	switch s {
	case "approved":
		return nil
	case "draft":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentType) Validate() error {
	switch s {
	case "COOP DR":
		return nil
	case "Development":
		return nil
	case "Implementation":
		return nil
	case "Integration":
		return nil
	case "Production":
		return nil
	case "Testing":
		return nil
	case "Training":
		return nil
	case "Validation":
		return nil
	case "Other":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemState) Validate() error {
	switch s {
	case "active":
		return nil
	case "planned":
		return nil
	case "retired":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatus) Validate() error {
	switch s {
	case "approved":
		return nil
	case "draft":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200DeploymentGetState) Validate() error {
	switch s {
	case "active":
		return nil
	case "planned":
		return nil
	case "retired":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200DeploymentGetStatus) Validate() error {
	switch s {
	case "active":
		return nil
	case "planned":
		return nil
	case "retired":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewayCEDAR20Core20API200DeploymentPostReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Deployments == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Deployments {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Deployments",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ReplicatedSystemElements.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "replicatedSystemElements",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200DeploymentPutOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Result.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewayCEDAR20Core20API200DeploymentPutOKResult) Validate() error {
	switch s {
	case "success":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewayCEDAR20Core20API200DeploymentPutReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Deployments == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Deployments {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Deployments",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.DeploymentType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "deploymentType",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.State.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HasProductionData.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "hasProductionData",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IsHotSite.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "isHotSite",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ReplicatedSystemElements.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "replicatedSystemElements",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MovingToCloud.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "movingToCloud",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AwsEnclave.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "awsEnclave",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclave) Validate() error {
	switch s {
	case "Public":
		return nil
	case "Private":
		return nil
	case "GovCloud":
		return nil
	case "Commercial":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentType) Validate() error {
	switch s {
	case "Cloud":
		return nil
	case "On-Premise":
		return nil
	case "Hybrid":
		return nil
	case "Co-location":
		return nil
	case "SaaS":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemHasProductionData) Validate() error {
	switch s {
	case "true":
		return nil
	case "false":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemIsHotSite) Validate() error {
	switch s {
	case "true":
		return nil
	case "false":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemMovingToCloud) Validate() error {
	switch s {
	case "true":
		return nil
	case "false":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemState) Validate() error {
	switch s {
	case "Operational":
		return nil
	case "Non-Operational":
		return nil
	case "Maintenance":
		return nil
	case "Testing":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatus) Validate() error {
	switch s {
	case "Active":
		return nil
	case "Inactive":
		return nil
	case "Retired":
		return nil
	case "Planned":
		return nil
	case "Under Development":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewayCEDAR20Core20API200DomainModelLevelGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.DomainModelLevels == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "DomainModelLevels",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewayCEDAR20Core20API200DomainModelListGetModel) Validate() error {
	switch s {
	case "CmsDataReferenceModel":
		return nil
	case "CmsApplicationReferenceModel":
		return nil
	case "CmsBusinessReferenceModel":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewayCEDAR20Core20API200DomainModelListGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Areas {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Areas",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200DomainModelListGetOKAreasItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Categories.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Categories",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200DomainModelNameGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.DomainModelNames == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "DomainModelNames",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewayCEDAR20Core20API200EnumerationGetApplication) Validate() error {
	switch s {
	case "all":
		return nil
	case "alfabet":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewayCEDAR20Core20API200EnumerationGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Enumerations == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Enumerations {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Enumerations",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Values == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "values",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewayCEDAR20Core20API200ExchangeGetDirection) Validate() error {
	switch s {
	case "sender":
		return nil
	case "receiver":
		return nil
	case "both":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewayCEDAR20Core20API200ExchangeGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Exchanges == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Exchanges {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Exchanges",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200ExchangeGetOKExchangesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.FromOwnerType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "fromOwnerType",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ToOwnerType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "toOwnerType",
			Error: err,
		})
	}
	if err := func() error {
		if s.ConnectionFrequency == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "connectionFrequency",
			Error: err,
		})
	}
	if err := func() error {
		if s.BusinessPurposeOfAddress == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "businessPurposeOfAddress",
			Error: err,
		})
	}
	if err := func() error {
		if s.TypeOfData == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "typeOfData",
			Error: err,
		})
	}
	if err := func() error {
		if s.ExchangeCUIType == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exchangeCUIType",
			Error: err,
		})
	}
	if err := func() error {
		if s.ExchangeNetworkProtocol == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exchangeNetworkProtocol",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemFromOwnerType) Validate() error {
	switch s {
	case "application":
		return nil
	case "organization":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemToOwnerType) Validate() error {
	switch s {
	case "application":
		return nil
	case "organization":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewayCEDAR20Core20API200ExchangeIDGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.FromOwnerType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "fromOwnerType",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.ToOwnerType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "toOwnerType",
			Error: err,
		})
	}
	if err := func() error {
		if s.ConnectionFrequency == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "connectionFrequency",
			Error: err,
		})
	}
	if err := func() error {
		if s.BusinessPurposeOfAddress == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "businessPurposeOfAddress",
			Error: err,
		})
	}
	if err := func() error {
		if s.TypeOfData == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "typeOfData",
			Error: err,
		})
	}
	if err := func() error {
		if s.ExchangeNetworkProtocol == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exchangeNetworkProtocol",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewayCEDAR20Core20API200ExchangeIDGetOKFromOwnerType) Validate() error {
	switch s {
	case "application":
		return nil
	case "organization":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200ExchangeIDGetOKToOwnerType) Validate() error {
	switch s {
	case "application":
		return nil
	case "organization":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewayCEDAR20Core20API200ExchangePutReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Exchanges {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Exchanges",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200ExchangePutReqExchangesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ConnectionFrequency.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "connectionFrequency",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BusinessPurposeOfAddress.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "businessPurposeOfAddress",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TypeOfData.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "typeOfData",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ExchangeCUIType.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exchangeCUIType",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ExchangeNetworkProtocol.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exchangeNetworkProtocol",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200OrganizationGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Organizations.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range value {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Organizations",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewayCEDAR20Core20API200RoleGetApplication) Validate() error {
	switch s {
	case "alfabet":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewayCEDAR20Core20API200RoleGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Roles == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Roles {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Roles",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewayCEDAR20Core20API200RoleListDeleteApplication) Validate() error {
	switch s {
	case "all":
		return nil
	case "alfabet":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewayCEDAR20Core20API200RolePostOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Message == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "message",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200RolePostReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Application.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "application",
			Error: err,
		})
	}
	if err := func() error {
		if s.Roles == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Roles {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Roles",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewayCEDAR20Core20API200RolePostReqApplication) Validate() error {
	switch s {
	case "alfabet":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200RoleTypeApplicationGetApplication) Validate() error {
	switch s {
	case "alfabet":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewayCEDAR20Core20API200RoleTypeApplicationGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.RoleTypes == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.RoleTypes {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "RoleTypes",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200SoftwareProductsGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.AiSolnCatg.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "aiSolnCatg",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ApiDataArea.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "apiDataArea",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SoftwareProducts.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "softwareProducts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200SoftwareProductsPostReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ApiDataArea.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "apiDataArea",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AiSolnCatg.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "aiSolnCatg",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SoftwareProducts.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range value {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "SoftwareProducts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Products.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Products",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200StakeholderGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Stakeholders == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Stakeholders",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200SupportContactGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.SupportContacts == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "SupportContacts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BusinessOwnerInformation.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "BusinessOwnerInformation",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DataCenterHosting.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "DataCenterHosting",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SoftwareProductDetails.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "SoftwareProductDetails",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SystemMaintainerInformation.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "SystemMaintainerInformation",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.R508UserInterface.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "508UserInterface",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BeneficiaryAddressPurpose.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range value {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "beneficiaryAddressPurpose",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BeneficiaryAddressSource.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "beneficiaryAddressSource",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BeneficiaryInformation.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range value {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "beneficiaryInformation",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterface) Validate() error {
	switch s {
	case "Yes, UI accessible by external users.":
		return nil
	case "Yes, UI accessible by internal Federal Employees.":
		return nil
	case "Yes, UI accessible by both internal Federal Employees and external users.":
		return nil
	case "No, this system doesn't have a UI.":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItem) Validate() error {
	switch s {
	case "Mailing":
		return nil
	case "Payment Calculation":
		return nil
	case "Coordination of Benefits":
		return nil
	case "Subsidy Calculation":
		return nil
	case "Premium Calculation":
		return nil
	case "Risk Adjustment":
		return nil
	case "Coordination of Care":
		return nil
	case "Eligibility and Enrollment":
		return nil
	case "Customer Service":
		return nil
	case "Education and Outreach":
		return nil
	case "Innovation":
		return nil
	case "Research and Demonstrations":
		return nil
	case "Healthcare Quality Improvement":
		return nil
	case "Program Oversight":
		return nil
	case "Actuarial Services":
		return nil
	case "Regulatory and Policy Development":
		return nil
	case "Audit Support":
		return nil
	case "Patient Care Reporting":
		return nil
	case "Beneficiary Data Access":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItem) Validate() error {
	switch s {
	case "Beneficiary Address":
		return nil
	case "Beneficiary email":
		return nil
	case "Beneficiary Mobile Number":
		return nil
	case "None of the Above":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHosting) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.MovingToCloud.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "movingToCloud",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloud) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "No":
		return nil
	case "Plans":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetails) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.AiPlan.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "aiPlan",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ApiDataArea.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range value {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "apiDataArea",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ApiFHIRUse.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "apiFHIRUse",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ApisAccessibility.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "apisAccessibility",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ApisDeveloped.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "apisDeveloped",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlan) Validate() error {
	switch s {
	case "Yes - This system has developed AI capabilities.":
		return nil
	case "Yes - This system uses a SaaS AI tool like Remesh...":
		return nil
	case "No – And this system currently has no plans to utilize AI capabilities":
		return nil
	case "No – But there currently are plans to use AI capabilities in the next two years":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItem) Validate() error {
	switch s {
	case "Beneficiary and Consumer":
		return nil
	case "Health Insurance Program":
		return nil
	case "Healthcare Payment":
		return nil
	case "Healthcare Quality":
		return nil
	case "Healthcare Service":
		return nil
	case "Organization":
		return nil
	case "Provider":
		return nil
	case "Supporting Resource":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUse) Validate() error {
	switch s {
	case "No":
		return nil
	case "FHIR":
		return nil
	case "HL7":
		return nil
	case "Other Standard":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibility) Validate() error {
	switch s {
	case "Both":
		return nil
	case "External Access":
		return nil
	case "Internal Access":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDeveloped) Validate() error {
	switch s {
	case "No":
		return nil
	case "Yes":
		return nil
	case "API In development but not yet launched.":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformation) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.AdHocAgileDeploymentFrequency.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "adHocAgileDeploymentFrequency",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DataAtRestEncryptionKeyManagement.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dataAtRestEncryptionKeyManagement",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeploymentFrequency.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "deploymentFrequency",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.FrontendAccessType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "frontendAccessType",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Ip6EnabledAssetPercent.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ip6EnabledAssetPercent",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Ip6TransitionPlan.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ip6TransitionPlan",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MultifactorAuthenticationMethod.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range value {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "multifactorAuthenticationMethod",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.NetAccessibility.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "netAccessibility",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.NetworkTrafficEncryptionKeyManagement.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "networkTrafficEncryptionKeyManagement",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlansToRetireReplace.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plansToRetireReplace",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RecordsManagementBucket.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recordsManagementBucket",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SystemCustomization.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "systemCustomization",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SystemDataLocation.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range value {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "systemDataLocation",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequency) Validate() error {
	switch s {
	case "Annually":
		return nil
	case "Semi-Annually":
		return nil
	case "Quarterly":
		return nil
	case "Monthly":
		return nil
	case "Every Two Weeks":
		return nil
	case "Weekly":
		return nil
	case "Twice a Week":
		return nil
	case "Daily":
		return nil
	case "Hourly":
		return nil
	case "Ad Hoc/As Needed":
		return nil
	case "Not Applicable":
		return nil
	case "Other":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagement) Validate() error {
	switch s {
	case "We do not encrypt data at rest.":
		return nil
	case "We perform ad hoc management of encryption keys.":
		return nil
	case "We have a process for managing encryption keys.":
		return nil
	case "We have a process for managing encryption keys and it is automated.":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequency) Validate() error {
	switch s {
	case "Annually":
		return nil
	case "Semi-Annually":
		return nil
	case "Quarterly":
		return nil
	case "Monthly":
		return nil
	case "Every Two Weeks":
		return nil
	case "Weekly":
		return nil
	case "Twice a Week":
		return nil
	case "Daily":
		return nil
	case "Hourly":
		return nil
	case "Ad Hoc/As Needed":
		return nil
	case "Not Applicable":
		return nil
	case "Other":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessType) Validate() error {
	switch s {
	case "IPv4 Only":
		return nil
	case "IPv4 and IPv6":
		return nil
	case "IPv6 Only":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercent) Validate() error {
	switch s {
	case "Less than 20%":
		return nil
	case "Between 20% and 49%":
		return nil
	case "Between 50% and 79%":
		return nil
	case "80% or above":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlan) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "transition to IPv6":
		return nil
	case "No":
		return nil
	case "decommission/replace before 2026":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItem) Validate() error {
	switch s {
	case "One Time Password sent via Email":
		return nil
	case "One Time Password sent via SMS":
		return nil
	case "One Time Password or Push from an authenticator app e.g. Google Authenticator DUO":
		return nil
	case "One time Password from a hardware token e.g. RSA SecurID":
		return nil
	case "FIDO U2F (e.g. YubiKey as a second factor)":
		return nil
	case "PIV/certificate":
		return nil
	case "FIDO2/WebAuthn (passwordless authentication includes Windows Hello)":
		return nil
	case "None":
		return nil
	case "Other":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibility) Validate() error {
	switch s {
	case "Accessible to the Public Internet (non-restricted access)":
		return nil
	case "Accessible to a CMS-internal network only":
		return nil
	case "Accessible to both public internet and to CMS-internal network":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagement) Validate() error {
	switch s {
	case "We do not encrypt any network traffic.":
		return nil
	case "We perform ad hoc management of encryption keys.":
		return nil
	case "We have a process for managing encryption keys.":
		return nil
	case "We have a process for managing encryption keys and it is automated.":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplace) Validate() error {
	switch s {
	case "No":
		return nil
	case "Yes - Retire and Replace":
		return nil
	case "Yes - Retire but NOT Replace":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomization) Validate() error {
	switch s {
	case "COTS - Less than 20% custom coding":
		return nil
	case "GOTS – less than 20% custom coding":
		return nil
	case "Mixed – Uses COTS or GOTS and has more than 20% custom coding":
		return nil
	case "Custom developed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItem) Validate() error {
	switch s {
	case "Integrated Data Repository (IDR)":
		return nil
	case "Chronic Condition Warehouse (CCW)":
		return nil
	case "This system":
		return nil
	case "Another CMS system - Describe in Notes":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewayCEDAR20Core20API200SystemSummaryGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.SystemSummary == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "SystemSummary",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200SystemSummaryIDGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.SystemSummary == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "SystemSummary",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200ThreatGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Threats.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Threats",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200URLIDGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.UrlList.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "UrlList",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewayCEDAR20Core20API200UserGetApplication) Validate() error {
	switch s {
	case "alfabet":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewayCEDAR20Core20API200UserGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Users {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Users",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200UserGetOKUsersItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Email.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20API200UserPostReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Application.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "application",
			Error: err,
		})
	}
	if err := func() error {
		if s.Users == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Users {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Users",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewayCEDAR20Core20API200UserPostReqApplication) Validate() error {
	switch s {
	case "alfabet":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewayCEDAR20Core20API200UserPostReqUsersItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Email.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20APIExchangePostReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Exchanges == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Exchanges {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Exchanges",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDAR20Core20APIExchangePostReqExchangesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ConnectionFrequency.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "connectionFrequency",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BusinessPurposeOfAddress.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "businessPurposeOfAddress",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TypeOfData.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "typeOfData",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ExchangeCUIType.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exchangeCUIType",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ExchangeNetworkProtocol.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exchangeNetworkProtocol",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDARIntake10IntakePostOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Message == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "message",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayCEDARIntake10IntakePostReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.BodyFormat.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bodyFormat",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewayCEDARIntake10IntakePostReqBodyFormat) Validate() error {
	switch s {
	case "JSON":
		return nil
	case "XML":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDARIntake10IntakePostValidatePayload) Validate() error {
	switch s {
	case "true":
		return nil
	case "false":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayCEDARIntake10IntakeStatusGetCedarStatus) Validate() error {
	switch s {
	case "Error":
		return nil
	case "In Process":
		return nil
	case "New":
		return nil
	case "On Hold":
		return nil
	case "Processed":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewayIntakeSchemaGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Schemas {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemas",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayIntakeSchemaGetOKSchemasItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.ID)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayIntakeSchemaIDGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.ID)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayIntakeSchemaIDPutOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.ID)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayIntakeSchemaPostCreated) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.SchemaId)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schemaId",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200AdminReviewerDeleteReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Reviewers == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Reviewers",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewaySystem20Census20Core20API200AdminReviewerGetType) Validate() error {
	switch s {
	case "QA":
		return nil
	case "DA":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewaySystem20Census20Core20API200BudgetAndContractsPostReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Budgets.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Budgets",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Contracts.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Contracts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200BusinessOwnerPostReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BeneficiaryInformation.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "beneficiaryInformation",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SystemUIAccessibility.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "systemUIAccessibility",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200DataExchangeStatusDeleteReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.ExchangeIds == nil {
			return errors.New("nil is invalid value")
		}
		if err := (validate.Array{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    0,
			MaxLengthSet: false,
		}).ValidateLength(len(s.ExchangeIds)); err != nil {
			return errors.Wrap(err, "array")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exchangeIds",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewaySystem20Census20Core20API200DataExchangeStatusGetDirection) Validate() error {
	switch s {
	case "both":
		return nil
	case "receiver":
		return nil
	case "sender":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewaySystem20Census20Core20API200DataExchangeStatusGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ExchangeStatus {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ExchangeStatus",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Direction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "direction",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItemDirection) Validate() error {
	switch s {
	case "receiver":
		return nil
	case "sender":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewaySystem20Census20Core20API200NotePostOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Result.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result",
			Error: err,
		})
	}
	if err := func() error {
		if s.Message == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "message",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewaySystem20Census20Core20API200NotePostOKResult) Validate() error {
	switch s {
	case "success":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewaySystem20Census20Core20API200NotePostReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Notes == nil {
			return errors.New("nil is invalid value")
		}
		if err := (validate.Array{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    100,
			MaxLengthSet: true,
		}).ValidateLength(len(s.Notes)); err != nil {
			return errors.Wrap(err, "array")
		}
		var failures []validate.FieldError
		for i, elem := range s.Notes {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Notes",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200NotePostReqNotesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    38,
			MinLengthSet: true,
			MaxLength:    38,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        regexMap["^\\{[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\\}$"],
		}).Validate(string(s.SystemId)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "systemId",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    100,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.PageName)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pageName",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    50,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.UserId)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "userId",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.UserFirst.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "userFirst",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.UserLast.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "userLast",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.UserRole.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "userRole",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    4000,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Note)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "note",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Deployments {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Deployments",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Deployment.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Deployment",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeployment) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.DeploymentType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "deploymentType",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.State.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DataCenter.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "DataCenter",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenter) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.State.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "state",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterState) Validate() error {
	switch s {
	case "active":
		return nil
	case "planned":
		return nil
	case "retired":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStatus) Validate() error {
	switch s {
	case "approved":
		return nil
	case "draft":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentType) Validate() error {
	switch s {
	case "Development":
		return nil
	case "Implementation":
		return nil
	case "Integration":
		return nil
	case "Production":
		return nil
	case "Testing":
		return nil
	case "Training":
		return nil
	case "Validation":
		return nil
	case "Other":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentState) Validate() error {
	switch s {
	case "active":
		return nil
	case "planned":
		return nil
	case "retired":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStatus) Validate() error {
	switch s {
	case "approved":
		return nil
	case "draft":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200PageDataCentersGetState) Validate() error {
	switch s {
	case "active":
		return nil
	case "planned":
		return nil
	case "retired":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200PageDataCentersGetStatus) Validate() error {
	switch s {
	case "approved":
		return nil
	case "draft":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200PageDataCentersGetType) Validate() error {
	switch s {
	case "Development":
		return nil
	case "Implementation":
		return nil
	case "Integration":
		return nil
	case "Production":
		return nil
	case "Testing":
		return nil
	case "Training":
		return nil
	case "Validation":
		return nil
	case "Other":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewaySystem20Census20Core20API200PageDataCentersPostReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Deployments.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Deployments",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.DataExchanges {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "DataExchanges",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Exchange.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Exchange",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchange) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ConnectionFrequency.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "connectionFrequency",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContainsBeneficiaryAddress.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "containsBeneficiaryAddress",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BusinessPurposeOfAddress.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "businessPurposeOfAddress",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IsAddressEditable.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "isAddressEditable",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContainsPii.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "containsPii",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContainsPhi.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "containsPhi",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContainsBankingData.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "containsBankingData",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IsBeneficiaryMailingFile.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "isBeneficiaryMailingFile",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SharedViaApi.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sharedViaApi",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TypeOfData.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "typeOfData",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ExchangeContainsCUI.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exchangeContainsCUI",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ExchangeCUIType.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exchangeCUIType",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ExchangeConnectionAuthenticated.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exchangeConnectionAuthenticated",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ExchangeNetworkProtocol.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exchangeNetworkProtocol",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ExchangeSecondaryDataArea.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exchangeSecondaryDataArea",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBankingData) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "No":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBeneficiaryAddress) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "No":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPhi) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "No":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPii) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "No":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeConnectionAuthenticated) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "No":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeContainsCUI) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "No":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsAddressEditable) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "No":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsBeneficiaryMailingFile) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "No":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeSharedViaApi) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "No":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.DataExchanges == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.DataExchanges {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "DataExchanges",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Exchange.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Exchange",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchange) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ConnectionFrequency.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "connectionFrequency",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContainsBeneficiaryAddress.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "containsBeneficiaryAddress",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BusinessPurposeOfAddress.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "businessPurposeOfAddress",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IsAddressEditable.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "isAddressEditable",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContainsPii.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "containsPii",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContainsPhi.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "containsPhi",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IsBeneficiaryMailingFile.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "isBeneficiaryMailingFile",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SharedViaApi.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sharedViaApi",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TypeOfData.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "typeOfData",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ExchangeContainsCUI.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exchangeContainsCUI",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ExchangeConnectionAuthenticated.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exchangeConnectionAuthenticated",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ExchangeNetworkProtocol.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exchangeNetworkProtocol",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContainsBankingData.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "containsBankingData",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ExchangeSecondaryDataArea.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "exchangeSecondaryDataArea",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBankingData) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "No":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBeneficiaryAddress) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "No":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPhi) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "No":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPii) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "No":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeConnectionAuthenticated) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "No":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeContainsCUI) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "No":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsAddressEditable) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "No":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsBeneficiaryMailingFile) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "No":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeSharedViaApi) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "No":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewaySystem20Census20Core20API200PageSoftwareProductsGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.SoftwareProducts {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "softwareProducts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ProvidesAiCapability.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "provides_ai_capability",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItemProvidesAiCapability) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "No":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewaySystem20Census20Core20API200PageSystemDataPostReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.SecondaryDRM.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "secondaryDRM",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200PageSystemMaintainerGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RecordsManagementBucket.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recordsManagementBucket",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SystemDataLocation.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "systemDataLocation",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IdentityManagementSolution.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "identityManagementSolution",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MultifactorAuthenticationMethod.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "multifactorAuthenticationMethod",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RecordsManagementFormat.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recordsManagementFormat",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200PageUrlsPostReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Urls == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Urls {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Urls",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.URL == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Url",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200PersonGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Users == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Users",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ApiDataArea.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "apiDataArea",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AiSolnCatg.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "aiSolnCatg",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SoftwareProducts.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range value {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "SoftwareProducts",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Products == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Products {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Products",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ProvidesAiCapability.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "provides_ai_capability",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SoftwareLicenseMechanismType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "softwareLicenseMechanismType",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IsSaasProduct.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "isSaasProduct",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.VendorOffersAIcapabilityviaSoftwareProduct.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "vendorOffersAIcapabilityviaSoftwareProduct",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemIsSaasProduct) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "No":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemProvidesAiCapability) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "No":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismType) Validate() error {
	switch s {
	case "Named User":
		return nil
	case "Concurrent User":
		return nil
	case "Site License":
		return nil
	case "Processor":
		return nil
	case "Other":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemVendorOffersAIcapabilityviaSoftwareProduct) Validate() error {
	switch s {
	case "Yes":
		return nil
	case "No":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewaySystem20Census20Core20API200StatusGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Status {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200StatusGetOKStatusItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PERCENTCOMPLETE.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "PERCENT_COMPLETE",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200StatusPostReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Status == nil {
			return errors.New("nil is invalid value")
		}
		if err := (validate.Array{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    0,
			MaxLengthSet: false,
		}).ValidateLength(len(s.Status)); err != nil {
			return errors.Wrap(err, "array")
		}
		var failures []validate.FieldError
		for i, elem := range s.Status {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200StatusPostReqStatusItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PercentComplete.Get(); ok {
			if err := func() error {
				if err := (validate.Float{
					MinSet:        true,
					Min:           0,
					MaxSet:        true,
					Max:           100,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    nil,
				}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "percentComplete",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatus) Validate() error {
	switch s {
	case "Not Started":
		return nil
	case "In Progress":
		return nil
	case "Complete":
		return nil
	case "Issues Found":
		return nil
	case "Passed":
		return nil
	case "Not Required":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewaySystem20Census20Core20API200SystemAiUseGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Record.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "record",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200SystemAiUseGetOKRecord) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.SystemId.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "systemId",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ArtificialIntelligence.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "artificialIntelligence",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AiCapabilitySensitiveInformationInvolved.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "aiCapabilitySensitiveInformationInvolved",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AiCapabilitySystemDataCategory.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "aiCapabilitySystemDataCategory",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200SystemAiUsePostReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ArtificialIntelligence.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "artificialIntelligence",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AiCapabilitySensitiveInformationInvolved.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "aiCapabilitySensitiveInformationInvolved",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AiCapabilitySystemDataCategory.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "aiCapabilitySystemDataCategory",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200SystemComponentsPostReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.SystemComponents == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "SystemComponents",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewaySystem20Census20Core20API200SystemMaintainerPostReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RecordsManagementBucket.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recordsManagementBucket",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IdentityManagementSolution.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "identityManagementSolution",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MultifactorAuthenticationMethod.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "multifactorAuthenticationMethod",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SystemDataLocation.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "systemDataLocation",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GatewayTechnopedia10SoftwareExtendedGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Count.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "count",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewayTechnopedia10SoftwareExtendedGetSummary) Validate() error {
	switch s {
	case "true":
		return nil
	case "false":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GatewayTechnopedia10SoftwareExtendedGetUpdate) Validate() error {
	switch s {
	case "true":
		return nil
	case "false":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewayTechnopedia10SoftwareExtendedIDGetBadRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Result.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewayTechnopedia10SoftwareExtendedIDGetBadRequestResult) Validate() error {
	switch s {
	case "failure":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewayTechnopedia10SoftwareExtendedIDGetInternalServerError) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Result.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewayTechnopedia10SoftwareExtendedIDGetInternalServerErrorResult) Validate() error {
	switch s {
	case "error":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GatewayTechnopedia10SoftwareExtendedIDGetOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Result.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GatewayTechnopedia10SoftwareExtendedIDGetOKResult) Validate() error {
	switch s {
	case "success":
		return nil
	case "error":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *OrganizationSchema) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Organizations.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range value {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Organizations",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *Role) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Application.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "application",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AssigneeType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "assigneeType",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s RoleApplication) Validate() error {
	switch s {
	case "alfabet":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RoleAssigneeType) Validate() error {
	switch s {
	case "organization":
		return nil
	case "person":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *RoleType) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Application.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "application",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Name.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s RoleTypeApplication) Validate() error {
	switch s {
	case "alfabet":
		return nil
	case "all":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RoleTypeName) Validate() error {
	switch s {
	case "AI Contact":
		return nil
	case "API Contact":
		return nil
	case "Budget Analyst":
		return nil
	case "Business Owner":
		return nil
	case "Business Question Contact":
		return nil
	case "Contracting Officer's Representative (COR)":
		return nil
	case "DA Reviewer":
		return nil
	case "Data Center Contact":
		return nil
	case "ISSO Government Task Lead (GTL)":
		return nil
	case "Project Lead":
		return nil
	case "QA Reviewer":
		return nil
	case "System Maintainer":
		return nil
	case "Subject Matter Expert (SME)":
		return nil
	case "Support Staff":
		return nil
	case "Survey Point of Contact":
		return nil
	case "Technical System Issues Contact":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
