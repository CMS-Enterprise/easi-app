// Code generated by ogen, DO NOT EDIT.

package cedarcoreclient

import (
	"math/bits"
	"strconv"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/validate"
)

// Encode implements json.Marshaler.
func (s *BadRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BadRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("message")
		e.Str(s.Message)
	}
}

var jsonFieldsNameOfBadRequest = [1]string{
	0: "message",
}

// Decode decodes BadRequest from json.
func (s *BadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BadRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Message = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BadRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfBadRequest) {
					name = jsonFieldsNameOfBadRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Conflict) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Conflict) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("error")
		e.Str(s.Error)
	}
}

var jsonFieldsNameOfConflict = [1]string{
	0: "error",
}

// Decode decodes Conflict from json.
func (s *Conflict) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Conflict to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Error = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Conflict")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfConflict) {
					name = jsonFieldsNameOfConflict[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Conflict) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Conflict) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ErrorResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ErrorResponse) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("error")
		e.Str(s.Error)
	}
	{
		e.FieldStart("message")
		e.Str(s.Message)
	}
}

var jsonFieldsNameOfErrorResponse = [2]string{
	0: "error",
	1: "message",
}

// Decode decodes ErrorResponse from json.
func (s *ErrorResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ErrorResponse to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Error = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		case "message":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Message = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ErrorResponse")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfErrorResponse) {
					name = jsonFieldsNameOfErrorResponse[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ErrorResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ErrorResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Forbidden) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Forbidden) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("error")
		e.Str(s.Error)
	}
}

var jsonFieldsNameOfForbidden = [1]string{
	0: "error",
}

// Decode decodes Forbidden from json.
func (s *Forbidden) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Forbidden to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Error = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Forbidden")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfForbidden) {
					name = jsonFieldsNameOfForbidden[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Forbidden) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Forbidden) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200AuthorityToOperateGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200AuthorityToOperateGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.AuthorityToOperateList != nil {
			e.FieldStart("AuthorityToOperateList")
			e.ArrStart()
			for _, elem := range s.AuthorityToOperateList {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200AuthorityToOperateGetOK = [2]string{
	0: "count",
	1: "AuthorityToOperateList",
}

// Decode decodes GatewayCEDAR20Core20API200AuthorityToOperateGetOK from json.
func (s *GatewayCEDAR20Core20API200AuthorityToOperateGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200AuthorityToOperateGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "AuthorityToOperateList":
			if err := func() error {
				s.AuthorityToOperateList = make([]GatewayCEDAR20Core20API200AuthorityToOperateGetOKAuthorityToOperateListItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200AuthorityToOperateGetOKAuthorityToOperateListItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AuthorityToOperateList = append(s.AuthorityToOperateList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"AuthorityToOperateList\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200AuthorityToOperateGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200AuthorityToOperateGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200AuthorityToOperateGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200AuthorityToOperateGetOKAuthorityToOperateListItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200AuthorityToOperateGetOKAuthorityToOperateListItem) encodeFields(e *jx.Encoder) {
	{
		if s.CedarId.Set {
			e.FieldStart("cedarId")
			s.CedarId.Encode(e)
		}
	}
	{
		if s.UUID.Set {
			e.FieldStart("uuid")
			s.UUID.Encode(e)
		}
	}
	{
		if s.FismaSystemName.Set {
			e.FieldStart("fismaSystemName")
			s.FismaSystemName.Encode(e)
		}
	}
	{
		if s.FismaSystemAcronym.Set {
			e.FieldStart("fismaSystemAcronym")
			s.FismaSystemAcronym.Encode(e)
		}
	}
	{
		if s.ActualDispositionDate.Set {
			e.FieldStart("actualDispositionDate")
			s.ActualDispositionDate.Encode(e)
		}
	}
	{
		if s.CountOfOpenPoams.Set {
			e.FieldStart("countOfOpenPoams")
			s.CountOfOpenPoams.Encode(e)
		}
	}
	{
		if s.CountOfTotalNonPrivilegedUserPopulation.Set {
			e.FieldStart("countOfTotalNonPrivilegedUserPopulation")
			s.CountOfTotalNonPrivilegedUserPopulation.Encode(e)
		}
	}
	{
		if s.CountOfTotalPrivilegedUserPopulation.Set {
			e.FieldStart("countOfTotalPrivilegedUserPopulation")
			s.CountOfTotalPrivilegedUserPopulation.Encode(e)
		}
	}
	{
		if s.ContainsPersonallyIdentifiableInformation.Set {
			e.FieldStart("containsPersonallyIdentifiableInformation")
			s.ContainsPersonallyIdentifiableInformation.Encode(e)
		}
	}
	{
		if s.DateAuthorizationMemoSigned.Set {
			e.FieldStart("dateAuthorizationMemoSigned")
			s.DateAuthorizationMemoSigned.Encode(e)
		}
	}
	{
		if s.DateAuthorizationMemoExpires.Set {
			e.FieldStart("dateAuthorizationMemoExpires")
			s.DateAuthorizationMemoExpires.Encode(e)
		}
	}
	{
		if s.EAuthenticationLevel.Set {
			e.FieldStart("eAuthenticationLevel")
			s.EAuthenticationLevel.Encode(e)
		}
	}
	{
		if s.Fips199OverallImpactRating.Set {
			e.FieldStart("fips199OverallImpactRating")
			s.Fips199OverallImpactRating.Encode(e)
		}
	}
	{
		if s.IsAccessedByNonOrganizationalUsers.Set {
			e.FieldStart("isAccessedByNonOrganizationalUsers")
			s.IsAccessedByNonOrganizationalUsers.Encode(e)
		}
	}
	{
		if s.IsPiiLimitedToUserNameAndPass.Set {
			e.FieldStart("isPiiLimitedToUserNameAndPass")
			s.IsPiiLimitedToUserNameAndPass.Encode(e)
		}
	}
	{
		if s.IsProtectedHealthInformation.Set {
			e.FieldStart("isProtectedHealthInformation")
			s.IsProtectedHealthInformation.Encode(e)
		}
	}
	{
		if s.LastActScaDate.Set {
			e.FieldStart("lastActScaDate")
			s.LastActScaDate.Encode(e)
		}
	}
	{
		if s.LastAssessmentDate.Set {
			e.FieldStart("lastAssessmentDate")
			s.LastAssessmentDate.Encode(e)
		}
	}
	{
		if s.LastContingencyPlanCompletionDate.Set {
			e.FieldStart("lastContingencyPlanCompletionDate")
			s.LastContingencyPlanCompletionDate.Encode(e)
		}
	}
	{
		if s.LastPenTestDate.Set {
			e.FieldStart("lastPenTestDate")
			s.LastPenTestDate.Encode(e)
		}
	}
	{
		if s.PiaCompletionDate.Set {
			e.FieldStart("piaCompletionDate")
			s.PiaCompletionDate.Encode(e)
		}
	}
	{
		if s.PrimaryCyberRiskAdvisor.Set {
			e.FieldStart("primaryCyberRiskAdvisor")
			s.PrimaryCyberRiskAdvisor.Encode(e)
		}
	}
	{
		if s.PrivacySubjectMatterExpert.Set {
			e.FieldStart("privacySubjectMatterExpert")
			s.PrivacySubjectMatterExpert.Encode(e)
		}
	}
	{
		if s.RecoveryPointObjective.Set {
			e.FieldStart("recoveryPointObjective")
			s.RecoveryPointObjective.Encode(e)
		}
	}
	{
		if s.RecoveryTimeObjective.Set {
			e.FieldStart("recoveryTimeObjective")
			s.RecoveryTimeObjective.Encode(e)
		}
	}
	{
		if s.SystemOfRecordsNotice != nil {
			e.FieldStart("systemOfRecordsNotice")
			e.ArrStart()
			for _, elem := range s.SystemOfRecordsNotice {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.TlcPhase.Set {
			e.FieldStart("tlcPhase")
			s.TlcPhase.Encode(e)
		}
	}
	{
		if s.XlcPhase.Set {
			e.FieldStart("xlcPhase")
			s.XlcPhase.Encode(e)
		}
	}
	{
		if s.OaStatus.Set {
			e.FieldStart("oaStatus")
			s.OaStatus.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200AuthorityToOperateGetOKAuthorityToOperateListItem = [29]string{
	0:  "cedarId",
	1:  "uuid",
	2:  "fismaSystemName",
	3:  "fismaSystemAcronym",
	4:  "actualDispositionDate",
	5:  "countOfOpenPoams",
	6:  "countOfTotalNonPrivilegedUserPopulation",
	7:  "countOfTotalPrivilegedUserPopulation",
	8:  "containsPersonallyIdentifiableInformation",
	9:  "dateAuthorizationMemoSigned",
	10: "dateAuthorizationMemoExpires",
	11: "eAuthenticationLevel",
	12: "fips199OverallImpactRating",
	13: "isAccessedByNonOrganizationalUsers",
	14: "isPiiLimitedToUserNameAndPass",
	15: "isProtectedHealthInformation",
	16: "lastActScaDate",
	17: "lastAssessmentDate",
	18: "lastContingencyPlanCompletionDate",
	19: "lastPenTestDate",
	20: "piaCompletionDate",
	21: "primaryCyberRiskAdvisor",
	22: "privacySubjectMatterExpert",
	23: "recoveryPointObjective",
	24: "recoveryTimeObjective",
	25: "systemOfRecordsNotice",
	26: "tlcPhase",
	27: "xlcPhase",
	28: "oaStatus",
}

// Decode decodes GatewayCEDAR20Core20API200AuthorityToOperateGetOKAuthorityToOperateListItem from json.
func (s *GatewayCEDAR20Core20API200AuthorityToOperateGetOKAuthorityToOperateListItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200AuthorityToOperateGetOKAuthorityToOperateListItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cedarId":
			if err := func() error {
				s.CedarId.Reset()
				if err := s.CedarId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cedarId\"")
			}
		case "uuid":
			if err := func() error {
				s.UUID.Reset()
				if err := s.UUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uuid\"")
			}
		case "fismaSystemName":
			if err := func() error {
				s.FismaSystemName.Reset()
				if err := s.FismaSystemName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fismaSystemName\"")
			}
		case "fismaSystemAcronym":
			if err := func() error {
				s.FismaSystemAcronym.Reset()
				if err := s.FismaSystemAcronym.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fismaSystemAcronym\"")
			}
		case "actualDispositionDate":
			if err := func() error {
				s.ActualDispositionDate.Reset()
				if err := s.ActualDispositionDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"actualDispositionDate\"")
			}
		case "countOfOpenPoams":
			if err := func() error {
				s.CountOfOpenPoams.Reset()
				if err := s.CountOfOpenPoams.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"countOfOpenPoams\"")
			}
		case "countOfTotalNonPrivilegedUserPopulation":
			if err := func() error {
				s.CountOfTotalNonPrivilegedUserPopulation.Reset()
				if err := s.CountOfTotalNonPrivilegedUserPopulation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"countOfTotalNonPrivilegedUserPopulation\"")
			}
		case "countOfTotalPrivilegedUserPopulation":
			if err := func() error {
				s.CountOfTotalPrivilegedUserPopulation.Reset()
				if err := s.CountOfTotalPrivilegedUserPopulation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"countOfTotalPrivilegedUserPopulation\"")
			}
		case "containsPersonallyIdentifiableInformation":
			if err := func() error {
				s.ContainsPersonallyIdentifiableInformation.Reset()
				if err := s.ContainsPersonallyIdentifiableInformation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"containsPersonallyIdentifiableInformation\"")
			}
		case "dateAuthorizationMemoSigned":
			if err := func() error {
				s.DateAuthorizationMemoSigned.Reset()
				if err := s.DateAuthorizationMemoSigned.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dateAuthorizationMemoSigned\"")
			}
		case "dateAuthorizationMemoExpires":
			if err := func() error {
				s.DateAuthorizationMemoExpires.Reset()
				if err := s.DateAuthorizationMemoExpires.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dateAuthorizationMemoExpires\"")
			}
		case "eAuthenticationLevel":
			if err := func() error {
				s.EAuthenticationLevel.Reset()
				if err := s.EAuthenticationLevel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"eAuthenticationLevel\"")
			}
		case "fips199OverallImpactRating":
			if err := func() error {
				s.Fips199OverallImpactRating.Reset()
				if err := s.Fips199OverallImpactRating.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fips199OverallImpactRating\"")
			}
		case "isAccessedByNonOrganizationalUsers":
			if err := func() error {
				s.IsAccessedByNonOrganizationalUsers.Reset()
				if err := s.IsAccessedByNonOrganizationalUsers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isAccessedByNonOrganizationalUsers\"")
			}
		case "isPiiLimitedToUserNameAndPass":
			if err := func() error {
				s.IsPiiLimitedToUserNameAndPass.Reset()
				if err := s.IsPiiLimitedToUserNameAndPass.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isPiiLimitedToUserNameAndPass\"")
			}
		case "isProtectedHealthInformation":
			if err := func() error {
				s.IsProtectedHealthInformation.Reset()
				if err := s.IsProtectedHealthInformation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isProtectedHealthInformation\"")
			}
		case "lastActScaDate":
			if err := func() error {
				s.LastActScaDate.Reset()
				if err := s.LastActScaDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lastActScaDate\"")
			}
		case "lastAssessmentDate":
			if err := func() error {
				s.LastAssessmentDate.Reset()
				if err := s.LastAssessmentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lastAssessmentDate\"")
			}
		case "lastContingencyPlanCompletionDate":
			if err := func() error {
				s.LastContingencyPlanCompletionDate.Reset()
				if err := s.LastContingencyPlanCompletionDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lastContingencyPlanCompletionDate\"")
			}
		case "lastPenTestDate":
			if err := func() error {
				s.LastPenTestDate.Reset()
				if err := s.LastPenTestDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lastPenTestDate\"")
			}
		case "piaCompletionDate":
			if err := func() error {
				s.PiaCompletionDate.Reset()
				if err := s.PiaCompletionDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"piaCompletionDate\"")
			}
		case "primaryCyberRiskAdvisor":
			if err := func() error {
				s.PrimaryCyberRiskAdvisor.Reset()
				if err := s.PrimaryCyberRiskAdvisor.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"primaryCyberRiskAdvisor\"")
			}
		case "privacySubjectMatterExpert":
			if err := func() error {
				s.PrivacySubjectMatterExpert.Reset()
				if err := s.PrivacySubjectMatterExpert.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"privacySubjectMatterExpert\"")
			}
		case "recoveryPointObjective":
			if err := func() error {
				s.RecoveryPointObjective.Reset()
				if err := s.RecoveryPointObjective.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recoveryPointObjective\"")
			}
		case "recoveryTimeObjective":
			if err := func() error {
				s.RecoveryTimeObjective.Reset()
				if err := s.RecoveryTimeObjective.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recoveryTimeObjective\"")
			}
		case "systemOfRecordsNotice":
			if err := func() error {
				s.SystemOfRecordsNotice = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.SystemOfRecordsNotice = append(s.SystemOfRecordsNotice, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemOfRecordsNotice\"")
			}
		case "tlcPhase":
			if err := func() error {
				s.TlcPhase.Reset()
				if err := s.TlcPhase.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tlcPhase\"")
			}
		case "xlcPhase":
			if err := func() error {
				s.XlcPhase.Reset()
				if err := s.XlcPhase.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"xlcPhase\"")
			}
		case "oaStatus":
			if err := func() error {
				s.OaStatus.Reset()
				if err := s.OaStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"oaStatus\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200AuthorityToOperateGetOKAuthorityToOperateListItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200AuthorityToOperateGetOKAuthorityToOperateListItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200AuthorityToOperateGetOKAuthorityToOperateListItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200BudgetGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200BudgetGetOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("count")
		e.Int(s.Count)
	}
	{
		if s.Budgets != nil {
			e.FieldStart("Budgets")
			e.ArrStart()
			for _, elem := range s.Budgets {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetGetOK = [2]string{
	0: "count",
	1: "Budgets",
}

// Decode decodes GatewayCEDAR20Core20API200BudgetGetOK from json.
func (s *GatewayCEDAR20Core20API200BudgetGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200BudgetGetOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int()
				s.Count = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "Budgets":
			if err := func() error {
				s.Budgets = make([]GatewayCEDAR20Core20API200BudgetGetOKBudgetsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200BudgetGetOKBudgetsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Budgets = append(s.Budgets, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Budgets\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200BudgetGetOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetGetOK) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetGetOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200BudgetGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200BudgetGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200BudgetGetOKBudgetsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200BudgetGetOKBudgetsItem) encodeFields(e *jx.Encoder) {
	{
		if s.FiscalYear.Set {
			e.FieldStart("FiscalYear")
			s.FiscalYear.Encode(e)
		}
	}
	{
		if s.FundingSource.Set {
			e.FieldStart("FundingSource")
			s.FundingSource.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("Name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Funding.Set {
			e.FieldStart("funding")
			s.Funding.Encode(e)
		}
	}
	{
		if s.FundingId.Set {
			e.FieldStart("fundingId")
			s.FundingId.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		e.FieldStart("projectId")
		e.Str(s.ProjectId)
	}
	{
		if s.ProjectTitle.Set {
			e.FieldStart("projectTitle")
			s.ProjectTitle.Encode(e)
		}
	}
	{
		if s.SystemId.Set {
			e.FieldStart("systemId")
			s.SystemId.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetGetOKBudgetsItem = [9]string{
	0: "FiscalYear",
	1: "FundingSource",
	2: "Name",
	3: "funding",
	4: "fundingId",
	5: "id",
	6: "projectId",
	7: "projectTitle",
	8: "systemId",
}

// Decode decodes GatewayCEDAR20Core20API200BudgetGetOKBudgetsItem from json.
func (s *GatewayCEDAR20Core20API200BudgetGetOKBudgetsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200BudgetGetOKBudgetsItem to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "FiscalYear":
			if err := func() error {
				s.FiscalYear.Reset()
				if err := s.FiscalYear.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"FiscalYear\"")
			}
		case "FundingSource":
			if err := func() error {
				s.FundingSource.Reset()
				if err := s.FundingSource.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"FundingSource\"")
			}
		case "Name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Name\"")
			}
		case "funding":
			if err := func() error {
				s.Funding.Reset()
				if err := s.Funding.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"funding\"")
			}
		case "fundingId":
			if err := func() error {
				s.FundingId.Reset()
				if err := s.FundingId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fundingId\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "projectId":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				v, err := d.Str()
				s.ProjectId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"projectId\"")
			}
		case "projectTitle":
			if err := func() error {
				s.ProjectTitle.Reset()
				if err := s.ProjectTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"projectTitle\"")
			}
		case "systemId":
			if err := func() error {
				s.SystemId.Reset()
				if err := s.SystemId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200BudgetGetOKBudgetsItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b01000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetGetOKBudgetsItem) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetGetOKBudgetsItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200BudgetGetOKBudgetsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200BudgetGetOKBudgetsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200BudgetListDeleteOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200BudgetListDeleteOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetListDeleteOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewayCEDAR20Core20API200BudgetListDeleteOK from json.
func (s *GatewayCEDAR20Core20API200BudgetListDeleteOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200BudgetListDeleteOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200BudgetListDeleteOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200BudgetListDeleteOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200BudgetListDeleteOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200BudgetPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200BudgetPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetPostOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewayCEDAR20Core20API200BudgetPostOK from json.
func (s *GatewayCEDAR20Core20API200BudgetPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200BudgetPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200BudgetPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200BudgetPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200BudgetPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200BudgetPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200BudgetPostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("Budgets")
		e.ArrStart()
		for _, elem := range s.Budgets {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetPostReq = [1]string{
	0: "Budgets",
}

// Decode decodes GatewayCEDAR20Core20API200BudgetPostReq from json.
func (s *GatewayCEDAR20Core20API200BudgetPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200BudgetPostReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "Budgets":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				s.Budgets = make([]GatewayCEDAR20Core20API200BudgetPostReqBudgetsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200BudgetPostReqBudgetsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Budgets = append(s.Budgets, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Budgets\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200BudgetPostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetPostReq) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetPostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200BudgetPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200BudgetPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200BudgetPostReqBudgetsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200BudgetPostReqBudgetsItem) encodeFields(e *jx.Encoder) {
	{
		if s.FiscalYear.Set {
			e.FieldStart("FiscalYear")
			s.FiscalYear.Encode(e)
		}
	}
	{
		if s.FundingSource.Set {
			e.FieldStart("FundingSource")
			s.FundingSource.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("Name")
			s.Name.Encode(e)
		}
	}
	{
		e.FieldStart("projectId")
		e.Str(s.ProjectId)
	}
	{
		if s.SystemId.Set {
			e.FieldStart("systemId")
			s.SystemId.Encode(e)
		}
	}
	{
		if s.ProjectTitle.Set {
			e.FieldStart("projectTitle")
			s.ProjectTitle.Encode(e)
		}
	}
	{
		if s.FundingId.Set {
			e.FieldStart("fundingId")
			s.FundingId.Encode(e)
		}
	}
	{
		if s.Funding.Set {
			e.FieldStart("funding")
			s.Funding.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetPostReqBudgetsItem = [9]string{
	0: "FiscalYear",
	1: "FundingSource",
	2: "id",
	3: "Name",
	4: "projectId",
	5: "systemId",
	6: "projectTitle",
	7: "fundingId",
	8: "funding",
}

// Decode decodes GatewayCEDAR20Core20API200BudgetPostReqBudgetsItem from json.
func (s *GatewayCEDAR20Core20API200BudgetPostReqBudgetsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200BudgetPostReqBudgetsItem to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "FiscalYear":
			if err := func() error {
				s.FiscalYear.Reset()
				if err := s.FiscalYear.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"FiscalYear\"")
			}
		case "FundingSource":
			if err := func() error {
				s.FundingSource.Reset()
				if err := s.FundingSource.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"FundingSource\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "Name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Name\"")
			}
		case "projectId":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.ProjectId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"projectId\"")
			}
		case "systemId":
			if err := func() error {
				s.SystemId.Reset()
				if err := s.SystemId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "projectTitle":
			if err := func() error {
				s.ProjectTitle.Reset()
				if err := s.ProjectTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"projectTitle\"")
			}
		case "fundingId":
			if err := func() error {
				s.FundingId.Reset()
				if err := s.FundingId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fundingId\"")
			}
		case "funding":
			if err := func() error {
				s.Funding.Reset()
				if err := s.Funding.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"funding\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200BudgetPostReqBudgetsItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00010000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetPostReqBudgetsItem) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetPostReqBudgetsItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200BudgetPostReqBudgetsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200BudgetPostReqBudgetsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200BudgetPutOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200BudgetPutOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetPutOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewayCEDAR20Core20API200BudgetPutOK from json.
func (s *GatewayCEDAR20Core20API200BudgetPutOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200BudgetPutOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200BudgetPutOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200BudgetPutOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200BudgetPutOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200BudgetPutReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200BudgetPutReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("Budgets")
		e.ArrStart()
		for _, elem := range s.Budgets {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetPutReq = [1]string{
	0: "Budgets",
}

// Decode decodes GatewayCEDAR20Core20API200BudgetPutReq from json.
func (s *GatewayCEDAR20Core20API200BudgetPutReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200BudgetPutReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "Budgets":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				s.Budgets = make([]GatewayCEDAR20Core20API200BudgetPutReqBudgetsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200BudgetPutReqBudgetsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Budgets = append(s.Budgets, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Budgets\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200BudgetPutReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetPutReq) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetPutReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200BudgetPutReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200BudgetPutReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200BudgetPutReqBudgetsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200BudgetPutReqBudgetsItem) encodeFields(e *jx.Encoder) {
	{
		if s.FiscalYear.Set {
			e.FieldStart("FiscalYear")
			s.FiscalYear.Encode(e)
		}
	}
	{
		if s.FundingSource.Set {
			e.FieldStart("FundingSource")
			s.FundingSource.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("Name")
			s.Name.Encode(e)
		}
	}
	{
		e.FieldStart("projectId")
		e.Str(s.ProjectId)
	}
	{
		if s.SystemId.Set {
			e.FieldStart("systemId")
			s.SystemId.Encode(e)
		}
	}
	{
		if s.ProjectTitle.Set {
			e.FieldStart("projectTitle")
			s.ProjectTitle.Encode(e)
		}
	}
	{
		e.FieldStart("fundingId")
		e.Str(s.FundingId)
	}
	{
		if s.Funding.Set {
			e.FieldStart("funding")
			s.Funding.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetPutReqBudgetsItem = [9]string{
	0: "FiscalYear",
	1: "FundingSource",
	2: "id",
	3: "Name",
	4: "projectId",
	5: "systemId",
	6: "projectTitle",
	7: "fundingId",
	8: "funding",
}

// Decode decodes GatewayCEDAR20Core20API200BudgetPutReqBudgetsItem from json.
func (s *GatewayCEDAR20Core20API200BudgetPutReqBudgetsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200BudgetPutReqBudgetsItem to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "FiscalYear":
			if err := func() error {
				s.FiscalYear.Reset()
				if err := s.FiscalYear.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"FiscalYear\"")
			}
		case "FundingSource":
			if err := func() error {
				s.FundingSource.Reset()
				if err := s.FundingSource.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"FundingSource\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "Name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Name\"")
			}
		case "projectId":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.ProjectId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"projectId\"")
			}
		case "systemId":
			if err := func() error {
				s.SystemId.Reset()
				if err := s.SystemId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "projectTitle":
			if err := func() error {
				s.ProjectTitle.Reset()
				if err := s.ProjectTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"projectTitle\"")
			}
		case "fundingId":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				v, err := d.Str()
				s.FundingId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fundingId\"")
			}
		case "funding":
			if err := func() error {
				s.Funding.Reset()
				if err := s.Funding.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"funding\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200BudgetPutReqBudgetsItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b10010000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetPutReqBudgetsItem) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetPutReqBudgetsItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200BudgetPutReqBudgetsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200BudgetPutReqBudgetsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200BudgetSystemCostFindGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200BudgetSystemCostFindGetOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("count")
		e.Int32(s.Count)
	}
	{
		if s.BudgetActualCost != nil {
			e.FieldStart("BudgetActualCost")
			e.ArrStart()
			for _, elem := range s.BudgetActualCost {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetSystemCostFindGetOK = [2]string{
	0: "count",
	1: "BudgetActualCost",
}

// Decode decodes GatewayCEDAR20Core20API200BudgetSystemCostFindGetOK from json.
func (s *GatewayCEDAR20Core20API200BudgetSystemCostFindGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200BudgetSystemCostFindGetOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int32()
				s.Count = int32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "BudgetActualCost":
			if err := func() error {
				s.BudgetActualCost = make([]GatewayCEDAR20Core20API200BudgetSystemCostFindGetOKBudgetActualCostItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200BudgetSystemCostFindGetOKBudgetActualCostItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.BudgetActualCost = append(s.BudgetActualCost, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BudgetActualCost\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200BudgetSystemCostFindGetOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetSystemCostFindGetOK) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetSystemCostFindGetOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200BudgetSystemCostFindGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200BudgetSystemCostFindGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200BudgetSystemCostFindGetOKBudgetActualCostItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200BudgetSystemCostFindGetOKBudgetActualCostItem) encodeFields(e *jx.Encoder) {
	{
		if s.ActualSystemCost.Set {
			e.FieldStart("ActualSystemCost")
			s.ActualSystemCost.Encode(e)
		}
	}
	{
		if s.FiscalYear.Set {
			e.FieldStart("FiscalYear")
			s.FiscalYear.Encode(e)
		}
	}
	{
		if s.SystemId.Set {
			e.FieldStart("systemId")
			s.SystemId.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200BudgetSystemCostFindGetOKBudgetActualCostItem = [3]string{
	0: "ActualSystemCost",
	1: "FiscalYear",
	2: "systemId",
}

// Decode decodes GatewayCEDAR20Core20API200BudgetSystemCostFindGetOKBudgetActualCostItem from json.
func (s *GatewayCEDAR20Core20API200BudgetSystemCostFindGetOKBudgetActualCostItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200BudgetSystemCostFindGetOKBudgetActualCostItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ActualSystemCost":
			if err := func() error {
				s.ActualSystemCost.Reset()
				if err := s.ActualSystemCost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ActualSystemCost\"")
			}
		case "FiscalYear":
			if err := func() error {
				s.FiscalYear.Reset()
				if err := s.FiscalYear.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"FiscalYear\"")
			}
		case "systemId":
			if err := func() error {
				s.SystemId.Reset()
				if err := s.SystemId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200BudgetSystemCostFindGetOKBudgetActualCostItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200BudgetSystemCostFindGetOKBudgetActualCostItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200BudgetSystemCostFindGetOKBudgetActualCostItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200ComponentPostCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200ComponentPostCreated) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Payload.Set {
			e.FieldStart("payload")
			s.Payload.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200ComponentPostCreated = [3]string{
	0: "result",
	1: "message",
	2: "payload",
}

// Decode decodes GatewayCEDAR20Core20API200ComponentPostCreated from json.
func (s *GatewayCEDAR20Core20API200ComponentPostCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ComponentPostCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		case "payload":
			if err := func() error {
				s.Payload.Reset()
				if err := s.Payload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payload\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200ComponentPostCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200ComponentPostCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ComponentPostCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200ComponentPostCreatedPayload) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200ComponentPostCreatedPayload) encodeFields(e *jx.Encoder) {
	{
		if s.Refstr.Set {
			e.FieldStart("refstr")
			s.Refstr.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200ComponentPostCreatedPayload = [1]string{
	0: "refstr",
}

// Decode decodes GatewayCEDAR20Core20API200ComponentPostCreatedPayload from json.
func (s *GatewayCEDAR20Core20API200ComponentPostCreatedPayload) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ComponentPostCreatedPayload to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "refstr":
			if err := func() error {
				s.Refstr.Reset()
				if err := s.Refstr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"refstr\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200ComponentPostCreatedPayload")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200ComponentPostCreatedPayload) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ComponentPostCreatedPayload) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200ComponentPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200ComponentPostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		e.FieldStart("cmsTechnopediaComponent")
		e.Str(s.CmsTechnopediaComponent)
	}
	{
		e.FieldStart("category")
		e.Str(s.Category)
	}
	{
		if s.CmsTechnopediaBuildVersion.Set {
			e.FieldStart("cmsTechnopediaBuildVersion")
			s.CmsTechnopediaBuildVersion.Encode(e)
		}
	}
	{
		if s.CmsEndOfSupportDate.Set {
			e.FieldStart("cmsEndOfSupportDate")
			s.CmsEndOfSupportDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.CmsTechnopediaEdition.Set {
			e.FieldStart("cmsTechnopediaEdition")
			s.CmsTechnopediaEdition.Encode(e)
		}
	}
	{
		if s.CmsTechnopediaLicensable.Set {
			e.FieldStart("cmsTechnopediaLicensable")
			s.CmsTechnopediaLicensable.Encode(e)
		}
	}
	{
		if s.CmsTechnopediaRelease.Set {
			e.FieldStart("cmsTechnopediaRelease")
			s.CmsTechnopediaRelease.Encode(e)
		}
	}
	{
		if s.CmsTechnopediaReleaseId.Set {
			e.FieldStart("cmsTechnopediaReleaseId")
			s.CmsTechnopediaReleaseId.Encode(e)
		}
	}
	{
		if s.CmsTechnopediaVersion.Set {
			e.FieldStart("cmsTechnopediaVersion")
			s.CmsTechnopediaVersion.Encode(e)
		}
	}
	{
		if s.CmsTechnopediaVersionGroup.Set {
			e.FieldStart("cmsTechnopediaVersionGroup")
			s.CmsTechnopediaVersionGroup.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.EndDate.Set {
			e.FieldStart("endDate")
			s.EndDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.StartDate.Set {
			e.FieldStart("startDate")
			s.StartDate.Encode(e, json.EncodeDate)
		}
	}
	{
		e.FieldStart("vendor")
		e.Str(s.Vendor)
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200ComponentPostReq = [15]string{
	0:  "name",
	1:  "cmsTechnopediaComponent",
	2:  "category",
	3:  "cmsTechnopediaBuildVersion",
	4:  "cmsEndOfSupportDate",
	5:  "cmsTechnopediaEdition",
	6:  "cmsTechnopediaLicensable",
	7:  "cmsTechnopediaRelease",
	8:  "cmsTechnopediaReleaseId",
	9:  "cmsTechnopediaVersion",
	10: "cmsTechnopediaVersionGroup",
	11: "description",
	12: "endDate",
	13: "startDate",
	14: "vendor",
}

// Decode decodes GatewayCEDAR20Core20API200ComponentPostReq from json.
func (s *GatewayCEDAR20Core20API200ComponentPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ComponentPostReq to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "cmsTechnopediaComponent":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.CmsTechnopediaComponent = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cmsTechnopediaComponent\"")
			}
		case "category":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.Category = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"category\"")
			}
		case "cmsTechnopediaBuildVersion":
			if err := func() error {
				s.CmsTechnopediaBuildVersion.Reset()
				if err := s.CmsTechnopediaBuildVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cmsTechnopediaBuildVersion\"")
			}
		case "cmsEndOfSupportDate":
			if err := func() error {
				s.CmsEndOfSupportDate.Reset()
				if err := s.CmsEndOfSupportDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cmsEndOfSupportDate\"")
			}
		case "cmsTechnopediaEdition":
			if err := func() error {
				s.CmsTechnopediaEdition.Reset()
				if err := s.CmsTechnopediaEdition.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cmsTechnopediaEdition\"")
			}
		case "cmsTechnopediaLicensable":
			if err := func() error {
				s.CmsTechnopediaLicensable.Reset()
				if err := s.CmsTechnopediaLicensable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cmsTechnopediaLicensable\"")
			}
		case "cmsTechnopediaRelease":
			if err := func() error {
				s.CmsTechnopediaRelease.Reset()
				if err := s.CmsTechnopediaRelease.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cmsTechnopediaRelease\"")
			}
		case "cmsTechnopediaReleaseId":
			if err := func() error {
				s.CmsTechnopediaReleaseId.Reset()
				if err := s.CmsTechnopediaReleaseId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cmsTechnopediaReleaseId\"")
			}
		case "cmsTechnopediaVersion":
			if err := func() error {
				s.CmsTechnopediaVersion.Reset()
				if err := s.CmsTechnopediaVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cmsTechnopediaVersion\"")
			}
		case "cmsTechnopediaVersionGroup":
			if err := func() error {
				s.CmsTechnopediaVersionGroup.Reset()
				if err := s.CmsTechnopediaVersionGroup.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cmsTechnopediaVersionGroup\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "endDate":
			if err := func() error {
				s.EndDate.Reset()
				if err := s.EndDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"endDate\"")
			}
		case "startDate":
			if err := func() error {
				s.StartDate.Reset()
				if err := s.StartDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"startDate\"")
			}
		case "vendor":
			requiredBitSet[1] |= 1 << 6
			if err := func() error {
				v, err := d.Str()
				s.Vendor = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vendor\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200ComponentPostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00000111,
		0b01000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200ComponentPostReq) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200ComponentPostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200ComponentPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ComponentPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200ContractListDeleteOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200ContractListDeleteOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200ContractListDeleteOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewayCEDAR20Core20API200ContractListDeleteOK from json.
func (s *GatewayCEDAR20Core20API200ContractListDeleteOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ContractListDeleteOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200ContractListDeleteOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200ContractListDeleteOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ContractListDeleteOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200ContractListGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200ContractListGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.Contracts != nil {
			e.FieldStart("Contracts")
			e.ArrStart()
			for _, elem := range s.Contracts {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200ContractListGetOK = [2]string{
	0: "count",
	1: "Contracts",
}

// Decode decodes GatewayCEDAR20Core20API200ContractListGetOK from json.
func (s *GatewayCEDAR20Core20API200ContractListGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ContractListGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "Contracts":
			if err := func() error {
				s.Contracts = make([]GatewayCEDAR20Core20API200ContractListGetOKContractsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200ContractListGetOKContractsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Contracts = append(s.Contracts, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Contracts\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200ContractListGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200ContractListGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ContractListGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200ContractListGetOKContractsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200ContractListGetOKContractsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ParentAwardId.Set {
			e.FieldStart("parentAwardId")
			s.ParentAwardId.Encode(e)
		}
	}
	{
		if s.AwardId.Set {
			e.FieldStart("awardId")
			s.AwardId.Encode(e)
		}
	}
	{
		if s.Cost.Set {
			e.FieldStart("Cost")
			s.Cost.Encode(e)
		}
	}
	{
		if s.ContractName.Set {
			e.FieldStart("ContractName")
			s.ContractName.Encode(e)
		}
	}
	{
		if s.POPStartDate.Set {
			e.FieldStart("POPStartDate")
			s.POPStartDate.Encode(e)
		}
	}
	{
		if s.POPEndDate.Set {
			e.FieldStart("POPEndDate")
			s.POPEndDate.Encode(e)
		}
	}
	{
		if s.OrderNumber.Set {
			e.FieldStart("OrderNumber")
			s.OrderNumber.Encode(e)
		}
	}
	{
		if s.ProjectTitle.Set {
			e.FieldStart("ProjectTitle")
			s.ProjectTitle.Encode(e)
		}
	}
	{
		if s.ProductServiceDescription.Set {
			e.FieldStart("ProductServiceDescription")
			s.ProductServiceDescription.Encode(e)
		}
	}
	{
		if s.ServiceProvided.Set {
			e.FieldStart("ServiceProvided")
			s.ServiceProvided.Encode(e)
		}
	}
	{
		if s.ContractNumber.Set {
			e.FieldStart("ContractNumber")
			s.ContractNumber.Encode(e)
		}
	}
	{
		if s.ContractDeliverableId.Set {
			e.FieldStart("contractDeliverableId")
			s.ContractDeliverableId.Encode(e)
		}
	}
	{
		if s.SystemId.Set {
			e.FieldStart("systemId")
			s.SystemId.Encode(e)
		}
	}
	{
		if s.IsDeliveryOrg.Set {
			e.FieldStart("isDeliveryOrg")
			s.IsDeliveryOrg.Encode(e)
		}
	}
	{
		if s.ContractADO.Set {
			e.FieldStart("contractADO")
			s.ContractADO.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200ContractListGetOKContractsItem = [16]string{
	0:  "id",
	1:  "parentAwardId",
	2:  "awardId",
	3:  "Cost",
	4:  "ContractName",
	5:  "POPStartDate",
	6:  "POPEndDate",
	7:  "OrderNumber",
	8:  "ProjectTitle",
	9:  "ProductServiceDescription",
	10: "ServiceProvided",
	11: "ContractNumber",
	12: "contractDeliverableId",
	13: "systemId",
	14: "isDeliveryOrg",
	15: "contractADO",
}

// Decode decodes GatewayCEDAR20Core20API200ContractListGetOKContractsItem from json.
func (s *GatewayCEDAR20Core20API200ContractListGetOKContractsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ContractListGetOKContractsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "parentAwardId":
			if err := func() error {
				s.ParentAwardId.Reset()
				if err := s.ParentAwardId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"parentAwardId\"")
			}
		case "awardId":
			if err := func() error {
				s.AwardId.Reset()
				if err := s.AwardId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"awardId\"")
			}
		case "Cost":
			if err := func() error {
				s.Cost.Reset()
				if err := s.Cost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Cost\"")
			}
		case "ContractName":
			if err := func() error {
				s.ContractName.Reset()
				if err := s.ContractName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ContractName\"")
			}
		case "POPStartDate":
			if err := func() error {
				s.POPStartDate.Reset()
				if err := s.POPStartDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"POPStartDate\"")
			}
		case "POPEndDate":
			if err := func() error {
				s.POPEndDate.Reset()
				if err := s.POPEndDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"POPEndDate\"")
			}
		case "OrderNumber":
			if err := func() error {
				s.OrderNumber.Reset()
				if err := s.OrderNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"OrderNumber\"")
			}
		case "ProjectTitle":
			if err := func() error {
				s.ProjectTitle.Reset()
				if err := s.ProjectTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ProjectTitle\"")
			}
		case "ProductServiceDescription":
			if err := func() error {
				s.ProductServiceDescription.Reset()
				if err := s.ProductServiceDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ProductServiceDescription\"")
			}
		case "ServiceProvided":
			if err := func() error {
				s.ServiceProvided.Reset()
				if err := s.ServiceProvided.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ServiceProvided\"")
			}
		case "ContractNumber":
			if err := func() error {
				s.ContractNumber.Reset()
				if err := s.ContractNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ContractNumber\"")
			}
		case "contractDeliverableId":
			if err := func() error {
				s.ContractDeliverableId.Reset()
				if err := s.ContractDeliverableId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contractDeliverableId\"")
			}
		case "systemId":
			if err := func() error {
				s.SystemId.Reset()
				if err := s.SystemId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "isDeliveryOrg":
			if err := func() error {
				s.IsDeliveryOrg.Reset()
				if err := s.IsDeliveryOrg.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isDeliveryOrg\"")
			}
		case "contractADO":
			if err := func() error {
				s.ContractADO.Reset()
				if err := s.ContractADO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contractADO\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200ContractListGetOKContractsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200ContractListGetOKContractsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ContractListGetOKContractsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200ContractPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200ContractPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200ContractPostOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewayCEDAR20Core20API200ContractPostOK from json.
func (s *GatewayCEDAR20Core20API200ContractPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ContractPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200ContractPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200ContractPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ContractPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200ContractPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200ContractPostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("Contracts")
		e.ArrStart()
		for _, elem := range s.Contracts {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200ContractPostReq = [1]string{
	0: "Contracts",
}

// Decode decodes GatewayCEDAR20Core20API200ContractPostReq from json.
func (s *GatewayCEDAR20Core20API200ContractPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ContractPostReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "Contracts":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				s.Contracts = make([]GatewayCEDAR20Core20API200ContractPostReqContractsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200ContractPostReqContractsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Contracts = append(s.Contracts, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Contracts\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200ContractPostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200ContractPostReq) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200ContractPostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200ContractPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ContractPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200ContractPostReqContractsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200ContractPostReqContractsItem) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("id")
		e.Str(s.ID)
	}
	{
		if s.ContractNumber.Set {
			e.FieldStart("ContractNumber")
			s.ContractNumber.Encode(e)
		}
	}
	{
		if s.IsDeliveryOrg.Set {
			e.FieldStart("IsDeliveryOrg")
			s.IsDeliveryOrg.Encode(e)
		}
	}
	{
		if s.OrderNumber.Set {
			e.FieldStart("OrderNumber")
			s.OrderNumber.Encode(e)
		}
	}
	{
		if s.ProductServiceDescription.Set {
			e.FieldStart("ProductServiceDescription")
			s.ProductServiceDescription.Encode(e)
		}
	}
	{
		if s.ProjectTitle.Set {
			e.FieldStart("ProjectTitle")
			s.ProjectTitle.Encode(e)
		}
	}
	{
		if s.ServiceProvided.Set {
			e.FieldStart("ServiceProvided")
			s.ServiceProvided.Encode(e)
		}
	}
	{
		if s.ParentAwardId.Set {
			e.FieldStart("parentAwardId")
			s.ParentAwardId.Encode(e)
		}
	}
	{
		if s.ContractADO.Set {
			e.FieldStart("contractADO")
			s.ContractADO.Encode(e)
		}
	}
	{
		if s.AwardId.Set {
			e.FieldStart("awardId")
			s.AwardId.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		e.FieldStart("systemId")
		e.Str(s.SystemId)
	}
	{
		if s.POPStartDate.Set {
			e.FieldStart("POPStartDate")
			s.POPStartDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.POPEndDate.Set {
			e.FieldStart("POPEndDate")
			s.POPEndDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.ContractName.Set {
			e.FieldStart("contractName")
			s.ContractName.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200ContractPostReqContractsItem = [15]string{
	0:  "id",
	1:  "ContractNumber",
	2:  "IsDeliveryOrg",
	3:  "OrderNumber",
	4:  "ProductServiceDescription",
	5:  "ProjectTitle",
	6:  "ServiceProvided",
	7:  "parentAwardId",
	8:  "contractADO",
	9:  "awardId",
	10: "description",
	11: "systemId",
	12: "POPStartDate",
	13: "POPEndDate",
	14: "contractName",
}

// Decode decodes GatewayCEDAR20Core20API200ContractPostReqContractsItem from json.
func (s *GatewayCEDAR20Core20API200ContractPostReqContractsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ContractPostReqContractsItem to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.ID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "ContractNumber":
			if err := func() error {
				s.ContractNumber.Reset()
				if err := s.ContractNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ContractNumber\"")
			}
		case "IsDeliveryOrg":
			if err := func() error {
				s.IsDeliveryOrg.Reset()
				if err := s.IsDeliveryOrg.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IsDeliveryOrg\"")
			}
		case "OrderNumber":
			if err := func() error {
				s.OrderNumber.Reset()
				if err := s.OrderNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"OrderNumber\"")
			}
		case "ProductServiceDescription":
			if err := func() error {
				s.ProductServiceDescription.Reset()
				if err := s.ProductServiceDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ProductServiceDescription\"")
			}
		case "ProjectTitle":
			if err := func() error {
				s.ProjectTitle.Reset()
				if err := s.ProjectTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ProjectTitle\"")
			}
		case "ServiceProvided":
			if err := func() error {
				s.ServiceProvided.Reset()
				if err := s.ServiceProvided.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ServiceProvided\"")
			}
		case "parentAwardId":
			if err := func() error {
				s.ParentAwardId.Reset()
				if err := s.ParentAwardId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"parentAwardId\"")
			}
		case "contractADO":
			if err := func() error {
				s.ContractADO.Reset()
				if err := s.ContractADO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contractADO\"")
			}
		case "awardId":
			if err := func() error {
				s.AwardId.Reset()
				if err := s.AwardId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"awardId\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "systemId":
			requiredBitSet[1] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.SystemId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "POPStartDate":
			if err := func() error {
				s.POPStartDate.Reset()
				if err := s.POPStartDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"POPStartDate\"")
			}
		case "POPEndDate":
			if err := func() error {
				s.POPEndDate.Reset()
				if err := s.POPEndDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"POPEndDate\"")
			}
		case "contractName":
			if err := func() error {
				s.ContractName.Reset()
				if err := s.ContractName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contractName\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200ContractPostReqContractsItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00000001,
		0b00001000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200ContractPostReqContractsItem) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200ContractPostReqContractsItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200ContractPostReqContractsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ContractPostReqContractsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200ContractPutOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200ContractPutOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200ContractPutOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewayCEDAR20Core20API200ContractPutOK from json.
func (s *GatewayCEDAR20Core20API200ContractPutOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ContractPutOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200ContractPutOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200ContractPutOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ContractPutOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200ContractPutReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200ContractPutReq) encodeFields(e *jx.Encoder) {
	{
		if s.Contracts != nil {
			e.FieldStart("Contracts")
			e.ArrStart()
			for _, elem := range s.Contracts {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.BudgetsOnly.Set {
			e.FieldStart("budgetsOnly")
			s.BudgetsOnly.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200ContractPutReq = [2]string{
	0: "Contracts",
	1: "budgetsOnly",
}

// Decode decodes GatewayCEDAR20Core20API200ContractPutReq from json.
func (s *GatewayCEDAR20Core20API200ContractPutReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ContractPutReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "Contracts":
			if err := func() error {
				s.Contracts = make([]GatewayCEDAR20Core20API200ContractPutReqContractsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200ContractPutReqContractsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Contracts = append(s.Contracts, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Contracts\"")
			}
		case "budgetsOnly":
			if err := func() error {
				s.BudgetsOnly.Reset()
				if err := s.BudgetsOnly.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"budgetsOnly\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200ContractPutReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200ContractPutReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ContractPutReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200ContractPutReqContractsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200ContractPutReqContractsItem) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("id")
		e.Str(s.ID)
	}
	{
		e.FieldStart("parentAwardId")
		e.Str(s.ParentAwardId)
	}
	{
		if s.ContractDeliverableId.Set {
			e.FieldStart("contractDeliverableId")
			s.ContractDeliverableId.Encode(e)
		}
	}
	{
		if s.ContractNumber.Set {
			e.FieldStart("ContractNumber")
			s.ContractNumber.Encode(e)
		}
	}
	{
		if s.IsDeliveryOrg.Set {
			e.FieldStart("IsDeliveryOrg")
			s.IsDeliveryOrg.Encode(e)
		}
	}
	{
		if s.OrderNumber.Set {
			e.FieldStart("OrderNumber")
			s.OrderNumber.Encode(e)
		}
	}
	{
		if s.ProductServiceDescription.Set {
			e.FieldStart("ProductServiceDescription")
			s.ProductServiceDescription.Encode(e)
		}
	}
	{
		if s.ProjectTitle.Set {
			e.FieldStart("ProjectTitle")
			s.ProjectTitle.Encode(e)
		}
	}
	{
		if s.ServiceProvided.Set {
			e.FieldStart("ServiceProvided")
			s.ServiceProvided.Encode(e)
		}
	}
	{
		if s.ContractADO.Set {
			e.FieldStart("contractADO")
			s.ContractADO.Encode(e)
		}
	}
	{
		e.FieldStart("awardId")
		e.Str(s.AwardId)
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.SystemId.Set {
			e.FieldStart("systemId")
			s.SystemId.Encode(e)
		}
	}
	{
		if s.POPStartDate.Set {
			e.FieldStart("POPStartDate")
			s.POPStartDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.POPEndDate.Set {
			e.FieldStart("POPEndDate")
			s.POPEndDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.ContractName.Set {
			e.FieldStart("contractName")
			s.ContractName.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200ContractPutReqContractsItem = [16]string{
	0:  "id",
	1:  "parentAwardId",
	2:  "contractDeliverableId",
	3:  "ContractNumber",
	4:  "IsDeliveryOrg",
	5:  "OrderNumber",
	6:  "ProductServiceDescription",
	7:  "ProjectTitle",
	8:  "ServiceProvided",
	9:  "contractADO",
	10: "awardId",
	11: "description",
	12: "systemId",
	13: "POPStartDate",
	14: "POPEndDate",
	15: "contractName",
}

// Decode decodes GatewayCEDAR20Core20API200ContractPutReqContractsItem from json.
func (s *GatewayCEDAR20Core20API200ContractPutReqContractsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ContractPutReqContractsItem to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.ID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "parentAwardId":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.ParentAwardId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"parentAwardId\"")
			}
		case "contractDeliverableId":
			if err := func() error {
				s.ContractDeliverableId.Reset()
				if err := s.ContractDeliverableId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contractDeliverableId\"")
			}
		case "ContractNumber":
			if err := func() error {
				s.ContractNumber.Reset()
				if err := s.ContractNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ContractNumber\"")
			}
		case "IsDeliveryOrg":
			if err := func() error {
				s.IsDeliveryOrg.Reset()
				if err := s.IsDeliveryOrg.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IsDeliveryOrg\"")
			}
		case "OrderNumber":
			if err := func() error {
				s.OrderNumber.Reset()
				if err := s.OrderNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"OrderNumber\"")
			}
		case "ProductServiceDescription":
			if err := func() error {
				s.ProductServiceDescription.Reset()
				if err := s.ProductServiceDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ProductServiceDescription\"")
			}
		case "ProjectTitle":
			if err := func() error {
				s.ProjectTitle.Reset()
				if err := s.ProjectTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ProjectTitle\"")
			}
		case "ServiceProvided":
			if err := func() error {
				s.ServiceProvided.Reset()
				if err := s.ServiceProvided.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ServiceProvided\"")
			}
		case "contractADO":
			if err := func() error {
				s.ContractADO.Reset()
				if err := s.ContractADO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contractADO\"")
			}
		case "awardId":
			requiredBitSet[1] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.AwardId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"awardId\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "systemId":
			if err := func() error {
				s.SystemId.Reset()
				if err := s.SystemId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "POPStartDate":
			if err := func() error {
				s.POPStartDate.Reset()
				if err := s.POPStartDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"POPStartDate\"")
			}
		case "POPEndDate":
			if err := func() error {
				s.POPEndDate.Reset()
				if err := s.POPEndDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"POPEndDate\"")
			}
		case "contractName":
			if err := func() error {
				s.ContractName.Reset()
				if err := s.ContractName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contractName\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200ContractPutReqContractsItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00000011,
		0b00000100,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200ContractPutReqContractsItem) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200ContractPutReqContractsItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200ContractPutReqContractsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ContractPutReqContractsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200CostTypeListGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200CostTypeListGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.CostTypes != nil {
			e.FieldStart("CostTypes")
			e.ArrStart()
			for _, elem := range s.CostTypes {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200CostTypeListGetOK = [3]string{
	0: "id",
	1: "name",
	2: "CostTypes",
}

// Decode decodes GatewayCEDAR20Core20API200CostTypeListGetOK from json.
func (s *GatewayCEDAR20Core20API200CostTypeListGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200CostTypeListGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "CostTypes":
			if err := func() error {
				s.CostTypes = make([]GatewayCEDAR20Core20API200CostTypeListGetOKCostTypesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200CostTypeListGetOKCostTypesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CostTypes = append(s.CostTypes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"CostTypes\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200CostTypeListGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200CostTypeListGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200CostTypeListGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200CostTypeListGetOKCostTypesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200CostTypeListGetOKCostTypesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200CostTypeListGetOKCostTypesItem = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GatewayCEDAR20Core20API200CostTypeListGetOKCostTypesItem from json.
func (s *GatewayCEDAR20Core20API200CostTypeListGetOKCostTypesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200CostTypeListGetOKCostTypesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200CostTypeListGetOKCostTypesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200CostTypeListGetOKCostTypesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200CostTypeListGetOKCostTypesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentDeleteBadRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200DeploymentDeleteBadRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentDeleteBadRequest = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentDeleteBadRequest from json.
func (s *GatewayCEDAR20Core20API200DeploymentDeleteBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentDeleteBadRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200DeploymentDeleteBadRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentDeleteBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentDeleteBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentDeleteInternalServerError) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200DeploymentDeleteInternalServerError) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentDeleteInternalServerError = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentDeleteInternalServerError from json.
func (s *GatewayCEDAR20Core20API200DeploymentDeleteInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentDeleteInternalServerError to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200DeploymentDeleteInternalServerError")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentDeleteInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentDeleteInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentDeleteNotFound) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200DeploymentDeleteNotFound) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentDeleteNotFound = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentDeleteNotFound from json.
func (s *GatewayCEDAR20Core20API200DeploymentDeleteNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentDeleteNotFound to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200DeploymentDeleteNotFound")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentDeleteNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentDeleteNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentDeleteOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200DeploymentDeleteOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentDeleteOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentDeleteOK from json.
func (s *GatewayCEDAR20Core20API200DeploymentDeleteOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentDeleteOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200DeploymentDeleteOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentDeleteOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentDeleteOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200DeploymentGetOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("count")
		e.Int(s.Count)
	}
	{
		if s.Deployments != nil {
			e.FieldStart("Deployments")
			e.ArrStart()
			for _, elem := range s.Deployments {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentGetOK = [2]string{
	0: "count",
	1: "Deployments",
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentGetOK from json.
func (s *GatewayCEDAR20Core20API200DeploymentGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentGetOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int()
				s.Count = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "Deployments":
			if err := func() error {
				s.Deployments = make([]GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Deployments = append(s.Deployments, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Deployments\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200DeploymentGetOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentGetOK) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentGetOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItem) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("id")
		e.Str(s.ID)
	}
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.DeploymentType.Set {
			e.FieldStart("deploymentType")
			s.DeploymentType.Encode(e)
		}
	}
	{
		e.FieldStart("systemId")
		e.Str(s.SystemId)
	}
	{
		if s.SystemName.Set {
			e.FieldStart("systemName")
			s.SystemName.Encode(e)
		}
	}
	{
		if s.SystemVersion.Set {
			e.FieldStart("systemVersion")
			s.SystemVersion.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.State.Set {
			e.FieldStart("state")
			s.State.Encode(e)
		}
	}
	{
		if s.StartDate.Set {
			e.FieldStart("startDate")
			s.StartDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.EndDate.Set {
			e.FieldStart("endDate")
			s.EndDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.DeploymentElementId.Set {
			e.FieldStart("deploymentElementId")
			s.DeploymentElementId.Encode(e)
		}
	}
	{
		if s.ContractorName.Set {
			e.FieldStart("contractorName")
			s.ContractorName.Encode(e)
		}
	}
	{
		if s.HasProductionData.Set {
			e.FieldStart("hasProductionData")
			s.HasProductionData.Encode(e)
		}
	}
	{
		if s.IsHotSite.Set {
			e.FieldStart("isHotSite")
			s.IsHotSite.Encode(e)
		}
	}
	{
		if s.ReplicatedSystemElements.Set {
			e.FieldStart("replicatedSystemElements")
			s.ReplicatedSystemElements.Encode(e)
		}
	}
	{
		if s.WanType.Set {
			e.FieldStart("wanType")
			s.WanType.Encode(e)
		}
	}
	{
		if s.WanTypeOther.Set {
			e.FieldStart("wanTypeOther")
			s.WanTypeOther.Encode(e)
		}
	}
	{
		if s.MovingToCloud.Set {
			e.FieldStart("movingToCloud")
			s.MovingToCloud.Encode(e)
		}
	}
	{
		if s.MovingToCloudDate.Set {
			e.FieldStart("movingToCloudDate")
			s.MovingToCloudDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.UsersRequiringMFA.Set {
			e.FieldStart("usersRequiringMFA")
			s.UsersRequiringMFA.Encode(e)
		}
	}
	{
		if s.OtherSpecialUsers.Set {
			e.FieldStart("otherSpecialUsers")
			s.OtherSpecialUsers.Encode(e)
		}
	}
	{
		if s.NetworkEncryption.Set {
			e.FieldStart("networkEncryption")
			s.NetworkEncryption.Encode(e)
		}
	}
	{
		if s.AwsEnclave.Set {
			e.FieldStart("awsEnclave")
			s.AwsEnclave.Encode(e)
		}
	}
	{
		if s.AwsEnclaveOther.Set {
			e.FieldStart("awsEnclaveOther")
			s.AwsEnclaveOther.Encode(e)
		}
	}
	{
		if s.DataCenter.Set {
			e.FieldStart("DataCenter")
			s.DataCenter.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItem = [26]string{
	0:  "id",
	1:  "name",
	2:  "description",
	3:  "deploymentType",
	4:  "systemId",
	5:  "systemName",
	6:  "systemVersion",
	7:  "status",
	8:  "state",
	9:  "startDate",
	10: "endDate",
	11: "deploymentElementId",
	12: "contractorName",
	13: "hasProductionData",
	14: "isHotSite",
	15: "replicatedSystemElements",
	16: "wanType",
	17: "wanTypeOther",
	18: "movingToCloud",
	19: "movingToCloudDate",
	20: "usersRequiringMFA",
	21: "otherSpecialUsers",
	22: "networkEncryption",
	23: "awsEnclave",
	24: "awsEnclaveOther",
	25: "DataCenter",
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItem from json.
func (s *GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItem to nil")
	}
	var requiredBitSet [4]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.ID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "deploymentType":
			if err := func() error {
				s.DeploymentType.Reset()
				if err := s.DeploymentType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deploymentType\"")
			}
		case "systemId":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.SystemId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "systemName":
			if err := func() error {
				s.SystemName.Reset()
				if err := s.SystemName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemName\"")
			}
		case "systemVersion":
			if err := func() error {
				s.SystemVersion.Reset()
				if err := s.SystemVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemVersion\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "state":
			if err := func() error {
				s.State.Reset()
				if err := s.State.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state\"")
			}
		case "startDate":
			if err := func() error {
				s.StartDate.Reset()
				if err := s.StartDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"startDate\"")
			}
		case "endDate":
			if err := func() error {
				s.EndDate.Reset()
				if err := s.EndDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"endDate\"")
			}
		case "deploymentElementId":
			if err := func() error {
				s.DeploymentElementId.Reset()
				if err := s.DeploymentElementId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deploymentElementId\"")
			}
		case "contractorName":
			if err := func() error {
				s.ContractorName.Reset()
				if err := s.ContractorName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contractorName\"")
			}
		case "hasProductionData":
			if err := func() error {
				s.HasProductionData.Reset()
				if err := s.HasProductionData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hasProductionData\"")
			}
		case "isHotSite":
			if err := func() error {
				s.IsHotSite.Reset()
				if err := s.IsHotSite.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isHotSite\"")
			}
		case "replicatedSystemElements":
			if err := func() error {
				s.ReplicatedSystemElements.Reset()
				if err := s.ReplicatedSystemElements.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"replicatedSystemElements\"")
			}
		case "wanType":
			if err := func() error {
				s.WanType.Reset()
				if err := s.WanType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"wanType\"")
			}
		case "wanTypeOther":
			if err := func() error {
				s.WanTypeOther.Reset()
				if err := s.WanTypeOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"wanTypeOther\"")
			}
		case "movingToCloud":
			if err := func() error {
				s.MovingToCloud.Reset()
				if err := s.MovingToCloud.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"movingToCloud\"")
			}
		case "movingToCloudDate":
			if err := func() error {
				s.MovingToCloudDate.Reset()
				if err := s.MovingToCloudDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"movingToCloudDate\"")
			}
		case "usersRequiringMFA":
			if err := func() error {
				s.UsersRequiringMFA.Reset()
				if err := s.UsersRequiringMFA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usersRequiringMFA\"")
			}
		case "otherSpecialUsers":
			if err := func() error {
				s.OtherSpecialUsers.Reset()
				if err := s.OtherSpecialUsers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"otherSpecialUsers\"")
			}
		case "networkEncryption":
			if err := func() error {
				s.NetworkEncryption.Reset()
				if err := s.NetworkEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"networkEncryption\"")
			}
		case "awsEnclave":
			if err := func() error {
				s.AwsEnclave.Reset()
				if err := s.AwsEnclave.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"awsEnclave\"")
			}
		case "awsEnclaveOther":
			if err := func() error {
				s.AwsEnclaveOther.Reset()
				if err := s.AwsEnclaveOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"awsEnclaveOther\"")
			}
		case "DataCenter":
			if err := func() error {
				s.DataCenter.Reset()
				if err := s.DataCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DataCenter\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [4]uint8{
		0b00010011,
		0b00000000,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItem) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenter) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenter) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.State.Set {
			e.FieldStart("state")
			s.State.Encode(e)
		}
	}
	{
		if s.StartDate.Set {
			e.FieldStart("startDate")
			s.StartDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.EndDate.Set {
			e.FieldStart("endDate")
			s.EndDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.Address1.Set {
			e.FieldStart("address1")
			s.Address1.Encode(e)
		}
	}
	{
		if s.Address2.Set {
			e.FieldStart("address2")
			s.Address2.Encode(e)
		}
	}
	{
		if s.City.Set {
			e.FieldStart("city")
			s.City.Encode(e)
		}
	}
	{
		if s.AddressState.Set {
			e.FieldStart("addressState")
			s.AddressState.Encode(e)
		}
	}
	{
		if s.Zip.Set {
			e.FieldStart("zip")
			s.Zip.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenter = [13]string{
	0:  "id",
	1:  "name",
	2:  "version",
	3:  "description",
	4:  "status",
	5:  "state",
	6:  "startDate",
	7:  "endDate",
	8:  "address1",
	9:  "address2",
	10: "city",
	11: "addressState",
	12: "zip",
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenter from json.
func (s *GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenter) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenter to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "state":
			if err := func() error {
				s.State.Reset()
				if err := s.State.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state\"")
			}
		case "startDate":
			if err := func() error {
				s.StartDate.Reset()
				if err := s.StartDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"startDate\"")
			}
		case "endDate":
			if err := func() error {
				s.EndDate.Reset()
				if err := s.EndDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"endDate\"")
			}
		case "address1":
			if err := func() error {
				s.Address1.Reset()
				if err := s.Address1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address1\"")
			}
		case "address2":
			if err := func() error {
				s.Address2.Reset()
				if err := s.Address2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address2\"")
			}
		case "city":
			if err := func() error {
				s.City.Reset()
				if err := s.City.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"city\"")
			}
		case "addressState":
			if err := func() error {
				s.AddressState.Reset()
				if err := s.AddressState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addressState\"")
			}
		case "zip":
			if err := func() error {
				s.Zip.Reset()
				if err := s.Zip.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zip\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenter")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenter) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenter) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterState as json.
func (s GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterState) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterState from json.
func (s *GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterState) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterState to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterState(v) {
	case GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStateActive:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStateActive
	case GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatePlanned:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatePlanned
	case GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStateRetired:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStateRetired
	default:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterState(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatus as json.
func (s GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatus from json.
func (s *GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatus(v) {
	case GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatusApproved:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatusApproved
	case GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatusDraft:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatusDraft
	default:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentType as json.
func (s GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentType from json.
func (s *GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentType(v) {
	case GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentTypeCOOPDR:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentTypeCOOPDR
	case GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentTypeDevelopment:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentTypeDevelopment
	case GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentTypeImplementation:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentTypeImplementation
	case GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentTypeIntegration:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentTypeIntegration
	case GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentTypeProduction:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentTypeProduction
	case GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentTypeTesting:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentTypeTesting
	case GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentTypeTraining:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentTypeTraining
	case GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentTypeValidation:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentTypeValidation
	case GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentTypeOther:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentTypeOther
	default:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemState as json.
func (s GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemState) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemState from json.
func (s *GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemState) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemState to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemState(v) {
	case GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStateActive:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStateActive
	case GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatePlanned:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatePlanned
	case GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStateRetired:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStateRetired
	default:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemState(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatus as json.
func (s GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatus from json.
func (s *GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatus(v) {
	case GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatusApproved:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatusApproved
	case GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatusDraft:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatusDraft
	default:
		*s = GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200DeploymentPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentPostOK = [1]string{
	0: "result",
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPostOK from json.
func (s *GatewayCEDAR20Core20API200DeploymentPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200DeploymentPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200DeploymentPostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("Deployments")
		e.ArrStart()
		for _, elem := range s.Deployments {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentPostReq = [1]string{
	0: "Deployments",
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPostReq from json.
func (s *GatewayCEDAR20Core20API200DeploymentPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentPostReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "Deployments":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				s.Deployments = make([]GatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Deployments = append(s.Deployments, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Deployments\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200DeploymentPostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentPostReq) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentPostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		e.FieldStart("deploymentType")
		e.Str(s.DeploymentType)
	}
	{
		e.FieldStart("systemId")
		e.Str(s.SystemId)
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ContractorName.Set {
			e.FieldStart("contractorName")
			s.ContractorName.Encode(e)
		}
	}
	{
		if s.HasProductionData.Set {
			e.FieldStart("hasProductionData")
			s.HasProductionData.Encode(e)
		}
	}
	{
		if s.IsHotSite.Set {
			e.FieldStart("isHotSite")
			s.IsHotSite.Encode(e)
		}
	}
	{
		if s.ReplicatedSystemElements.Set {
			e.FieldStart("replicatedSystemElements")
			s.ReplicatedSystemElements.Encode(e)
		}
	}
	{
		if s.WanType.Set {
			e.FieldStart("wanType")
			s.WanType.Encode(e)
		}
	}
	{
		if s.WanTypeOther.Set {
			e.FieldStart("wanTypeOther")
			s.WanTypeOther.Encode(e)
		}
	}
	{
		if s.UsersRequiringMFA.Set {
			e.FieldStart("usersRequiringMFA")
			s.UsersRequiringMFA.Encode(e)
		}
	}
	{
		if s.OtherSpecialUsers.Set {
			e.FieldStart("otherSpecialUsers")
			s.OtherSpecialUsers.Encode(e)
		}
	}
	{
		if s.NetworkEncryption.Set {
			e.FieldStart("networkEncryption")
			s.NetworkEncryption.Encode(e)
		}
	}
	{
		if s.AwsEnclave.Set {
			e.FieldStart("awsEnclave")
			s.AwsEnclave.Encode(e)
		}
	}
	{
		if s.AwsEnclaveOther.Set {
			e.FieldStart("awsEnclaveOther")
			s.AwsEnclaveOther.Encode(e)
		}
	}
	{
		e.FieldStart("DataCenter")
		s.DataCenter.Encode(e)
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItem = [16]string{
	0:  "id",
	1:  "deploymentType",
	2:  "systemId",
	3:  "status",
	4:  "contractorName",
	5:  "hasProductionData",
	6:  "isHotSite",
	7:  "replicatedSystemElements",
	8:  "wanType",
	9:  "wanTypeOther",
	10: "usersRequiringMFA",
	11: "otherSpecialUsers",
	12: "networkEncryption",
	13: "awsEnclave",
	14: "awsEnclaveOther",
	15: "DataCenter",
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItem from json.
func (s *GatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItem to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "deploymentType":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.DeploymentType = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deploymentType\"")
			}
		case "systemId":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.SystemId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "contractorName":
			if err := func() error {
				s.ContractorName.Reset()
				if err := s.ContractorName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contractorName\"")
			}
		case "hasProductionData":
			if err := func() error {
				s.HasProductionData.Reset()
				if err := s.HasProductionData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hasProductionData\"")
			}
		case "isHotSite":
			if err := func() error {
				s.IsHotSite.Reset()
				if err := s.IsHotSite.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isHotSite\"")
			}
		case "replicatedSystemElements":
			if err := func() error {
				s.ReplicatedSystemElements.Reset()
				if err := s.ReplicatedSystemElements.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"replicatedSystemElements\"")
			}
		case "wanType":
			if err := func() error {
				s.WanType.Reset()
				if err := s.WanType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"wanType\"")
			}
		case "wanTypeOther":
			if err := func() error {
				s.WanTypeOther.Reset()
				if err := s.WanTypeOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"wanTypeOther\"")
			}
		case "usersRequiringMFA":
			if err := func() error {
				s.UsersRequiringMFA.Reset()
				if err := s.UsersRequiringMFA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usersRequiringMFA\"")
			}
		case "otherSpecialUsers":
			if err := func() error {
				s.OtherSpecialUsers.Reset()
				if err := s.OtherSpecialUsers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"otherSpecialUsers\"")
			}
		case "networkEncryption":
			if err := func() error {
				s.NetworkEncryption.Reset()
				if err := s.NetworkEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"networkEncryption\"")
			}
		case "awsEnclave":
			if err := func() error {
				s.AwsEnclave.Reset()
				if err := s.AwsEnclave.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"awsEnclave\"")
			}
		case "awsEnclaveOther":
			if err := func() error {
				s.AwsEnclaveOther.Reset()
				if err := s.AwsEnclaveOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"awsEnclaveOther\"")
			}
		case "DataCenter":
			requiredBitSet[1] |= 1 << 7
			if err := func() error {
				if err := s.DataCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DataCenter\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00000110,
		0b10000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItem) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItemDataCenter) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItemDataCenter) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("id")
		e.Str(s.ID)
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItemDataCenter = [1]string{
	0: "id",
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItemDataCenter from json.
func (s *GatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItemDataCenter) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItemDataCenter to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.ID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItemDataCenter")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItemDataCenter) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItemDataCenter[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItemDataCenter) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPostReqDeploymentsItemDataCenter) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPutOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200DeploymentPutOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Payload.Set {
			e.FieldStart("payload")
			s.Payload.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentPutOK = [3]string{
	0: "result",
	1: "message",
	2: "payload",
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPutOK from json.
func (s *GatewayCEDAR20Core20API200DeploymentPutOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentPutOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		case "payload":
			if err := func() error {
				s.Payload.Reset()
				if err := s.Payload.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payload\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200DeploymentPutOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPutOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPutOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPutOKPayload) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200DeploymentPutOKPayload) encodeFields(e *jx.Encoder) {
	{
		if s.Successful != nil {
			e.FieldStart("successful")
			e.ArrStart()
			for _, elem := range s.Successful {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Failed != nil {
			e.FieldStart("failed")
			e.ArrStart()
			for _, elem := range s.Failed {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentPutOKPayload = [2]string{
	0: "successful",
	1: "failed",
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPutOKPayload from json.
func (s *GatewayCEDAR20Core20API200DeploymentPutOKPayload) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentPutOKPayload to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "successful":
			if err := func() error {
				s.Successful = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Successful = append(s.Successful, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"successful\"")
			}
		case "failed":
			if err := func() error {
				s.Failed = make([]GatewayCEDAR20Core20API200DeploymentPutOKPayloadFailedItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200DeploymentPutOKPayloadFailedItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Failed = append(s.Failed, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"failed\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200DeploymentPutOKPayload")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPutOKPayload) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPutOKPayload) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPutOKPayloadFailedItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200DeploymentPutOKPayloadFailedItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentPutOKPayloadFailedItem = [2]string{
	0: "id",
	1: "error",
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPutOKPayloadFailedItem from json.
func (s *GatewayCEDAR20Core20API200DeploymentPutOKPayloadFailedItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentPutOKPayloadFailedItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200DeploymentPutOKPayloadFailedItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPutOKPayloadFailedItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPutOKPayloadFailedItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentPutOKResult as json.
func (s GatewayCEDAR20Core20API200DeploymentPutOKResult) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPutOKResult from json.
func (s *GatewayCEDAR20Core20API200DeploymentPutOKResult) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentPutOKResult to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200DeploymentPutOKResult(v) {
	case GatewayCEDAR20Core20API200DeploymentPutOKResultSuccess:
		*s = GatewayCEDAR20Core20API200DeploymentPutOKResultSuccess
	default:
		*s = GatewayCEDAR20Core20API200DeploymentPutOKResult(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200DeploymentPutOKResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPutOKResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPutReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200DeploymentPutReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("Deployments")
		e.ArrStart()
		for _, elem := range s.Deployments {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentPutReq = [1]string{
	0: "Deployments",
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPutReq from json.
func (s *GatewayCEDAR20Core20API200DeploymentPutReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentPutReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "Deployments":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				s.Deployments = make([]GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Deployments = append(s.Deployments, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Deployments\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200DeploymentPutReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentPutReq) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentPutReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPutReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPutReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItem) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("id")
		e.Str(s.ID)
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.DeploymentType.Set {
			e.FieldStart("deploymentType")
			s.DeploymentType.Encode(e)
		}
	}
	{
		e.FieldStart("systemId")
		e.Str(s.SystemId)
	}
	{
		if s.SystemName.Set {
			e.FieldStart("systemName")
			s.SystemName.Encode(e)
		}
	}
	{
		if s.SystemVersion.Set {
			e.FieldStart("systemVersion")
			s.SystemVersion.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.State.Set {
			e.FieldStart("state")
			s.State.Encode(e)
		}
	}
	{
		if s.StartDate.Set {
			e.FieldStart("startDate")
			s.StartDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.EndDate.Set {
			e.FieldStart("endDate")
			s.EndDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.DeploymentElementId.Set {
			e.FieldStart("deploymentElementId")
			s.DeploymentElementId.Encode(e)
		}
	}
	{
		if s.ContractorName.Set {
			e.FieldStart("contractorName")
			s.ContractorName.Encode(e)
		}
	}
	{
		if s.HasProductionData.Set {
			e.FieldStart("hasProductionData")
			s.HasProductionData.Encode(e)
		}
	}
	{
		if s.IsHotSite.Set {
			e.FieldStart("isHotSite")
			s.IsHotSite.Encode(e)
		}
	}
	{
		if s.ReplicatedSystemElements.Set {
			e.FieldStart("replicatedSystemElements")
			s.ReplicatedSystemElements.Encode(e)
		}
	}
	{
		if s.WanType.Set {
			e.FieldStart("wanType")
			s.WanType.Encode(e)
		}
	}
	{
		if s.WanTypeOther.Set {
			e.FieldStart("wanTypeOther")
			s.WanTypeOther.Encode(e)
		}
	}
	{
		if s.MovingToCloud.Set {
			e.FieldStart("movingToCloud")
			s.MovingToCloud.Encode(e)
		}
	}
	{
		if s.MovingToCloudDate.Set {
			e.FieldStart("movingToCloudDate")
			s.MovingToCloudDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.UsersRequiringMFA.Set {
			e.FieldStart("usersRequiringMFA")
			s.UsersRequiringMFA.Encode(e)
		}
	}
	{
		if s.OtherSpecialUsers.Set {
			e.FieldStart("otherSpecialUsers")
			s.OtherSpecialUsers.Encode(e)
		}
	}
	{
		if s.NetworkEncryption.Set {
			e.FieldStart("networkEncryption")
			s.NetworkEncryption.Encode(e)
		}
	}
	{
		if s.AwsEnclave.Set {
			e.FieldStart("awsEnclave")
			s.AwsEnclave.Encode(e)
		}
	}
	{
		if s.AwsEnclaveOther.Set {
			e.FieldStart("awsEnclaveOther")
			s.AwsEnclaveOther.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItem = [25]string{
	0:  "id",
	1:  "name",
	2:  "description",
	3:  "deploymentType",
	4:  "systemId",
	5:  "systemName",
	6:  "systemVersion",
	7:  "status",
	8:  "state",
	9:  "startDate",
	10: "endDate",
	11: "deploymentElementId",
	12: "contractorName",
	13: "hasProductionData",
	14: "isHotSite",
	15: "replicatedSystemElements",
	16: "wanType",
	17: "wanTypeOther",
	18: "movingToCloud",
	19: "movingToCloudDate",
	20: "usersRequiringMFA",
	21: "otherSpecialUsers",
	22: "networkEncryption",
	23: "awsEnclave",
	24: "awsEnclaveOther",
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItem from json.
func (s *GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItem to nil")
	}
	var requiredBitSet [4]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.ID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "deploymentType":
			if err := func() error {
				s.DeploymentType.Reset()
				if err := s.DeploymentType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deploymentType\"")
			}
		case "systemId":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.SystemId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "systemName":
			if err := func() error {
				s.SystemName.Reset()
				if err := s.SystemName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemName\"")
			}
		case "systemVersion":
			if err := func() error {
				s.SystemVersion.Reset()
				if err := s.SystemVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemVersion\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "state":
			if err := func() error {
				s.State.Reset()
				if err := s.State.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state\"")
			}
		case "startDate":
			if err := func() error {
				s.StartDate.Reset()
				if err := s.StartDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"startDate\"")
			}
		case "endDate":
			if err := func() error {
				s.EndDate.Reset()
				if err := s.EndDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"endDate\"")
			}
		case "deploymentElementId":
			if err := func() error {
				s.DeploymentElementId.Reset()
				if err := s.DeploymentElementId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deploymentElementId\"")
			}
		case "contractorName":
			if err := func() error {
				s.ContractorName.Reset()
				if err := s.ContractorName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contractorName\"")
			}
		case "hasProductionData":
			if err := func() error {
				s.HasProductionData.Reset()
				if err := s.HasProductionData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hasProductionData\"")
			}
		case "isHotSite":
			if err := func() error {
				s.IsHotSite.Reset()
				if err := s.IsHotSite.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isHotSite\"")
			}
		case "replicatedSystemElements":
			if err := func() error {
				s.ReplicatedSystemElements.Reset()
				if err := s.ReplicatedSystemElements.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"replicatedSystemElements\"")
			}
		case "wanType":
			if err := func() error {
				s.WanType.Reset()
				if err := s.WanType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"wanType\"")
			}
		case "wanTypeOther":
			if err := func() error {
				s.WanTypeOther.Reset()
				if err := s.WanTypeOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"wanTypeOther\"")
			}
		case "movingToCloud":
			if err := func() error {
				s.MovingToCloud.Reset()
				if err := s.MovingToCloud.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"movingToCloud\"")
			}
		case "movingToCloudDate":
			if err := func() error {
				s.MovingToCloudDate.Reset()
				if err := s.MovingToCloudDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"movingToCloudDate\"")
			}
		case "usersRequiringMFA":
			if err := func() error {
				s.UsersRequiringMFA.Reset()
				if err := s.UsersRequiringMFA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usersRequiringMFA\"")
			}
		case "otherSpecialUsers":
			if err := func() error {
				s.OtherSpecialUsers.Reset()
				if err := s.OtherSpecialUsers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"otherSpecialUsers\"")
			}
		case "networkEncryption":
			if err := func() error {
				s.NetworkEncryption.Reset()
				if err := s.NetworkEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"networkEncryption\"")
			}
		case "awsEnclave":
			if err := func() error {
				s.AwsEnclave.Reset()
				if err := s.AwsEnclave.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"awsEnclave\"")
			}
		case "awsEnclaveOther":
			if err := func() error {
				s.AwsEnclaveOther.Reset()
				if err := s.AwsEnclaveOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"awsEnclaveOther\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [4]uint8{
		0b00010001,
		0b00000000,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItem) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclave as json.
func (s GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclave) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclave from json.
func (s *GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclave) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclave to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclave(v) {
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclavePublic:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclavePublic
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclavePrivate:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclavePrivate
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclaveGovCloud:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclaveGovCloud
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclaveCommercial:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclaveCommercial
	default:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclave(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclave) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclave) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentType as json.
func (s GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentType from json.
func (s *GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentType(v) {
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentTypeCloud:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentTypeCloud
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentTypeOnPremise:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentTypeOnPremise
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentTypeHybrid:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentTypeHybrid
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentTypeCoLocation:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentTypeCoLocation
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentTypeSaaS:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentTypeSaaS
	default:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemHasProductionData as json.
func (s GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemHasProductionData) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemHasProductionData from json.
func (s *GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemHasProductionData) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemHasProductionData to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemHasProductionData(v) {
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemHasProductionDataTrue:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemHasProductionDataTrue
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemHasProductionDataFalse:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemHasProductionDataFalse
	default:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemHasProductionData(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemHasProductionData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemHasProductionData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemIsHotSite as json.
func (s GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemIsHotSite) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemIsHotSite from json.
func (s *GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemIsHotSite) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemIsHotSite to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemIsHotSite(v) {
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemIsHotSiteTrue:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemIsHotSiteTrue
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemIsHotSiteFalse:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemIsHotSiteFalse
	default:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemIsHotSite(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemIsHotSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemIsHotSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemMovingToCloud as json.
func (s GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemMovingToCloud) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemMovingToCloud from json.
func (s *GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemMovingToCloud) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemMovingToCloud to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemMovingToCloud(v) {
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemMovingToCloudTrue:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemMovingToCloudTrue
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemMovingToCloudFalse:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemMovingToCloudFalse
	default:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemMovingToCloud(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemMovingToCloud) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemMovingToCloud) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemState as json.
func (s GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemState) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemState from json.
func (s *GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemState) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemState to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemState(v) {
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStateOperational:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStateOperational
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStateNonOperational:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStateNonOperational
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStateMaintenance:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStateMaintenance
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStateTesting:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStateTesting
	default:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemState(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatus as json.
func (s GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatus from json.
func (s *GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatus(v) {
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatusActive:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatusActive
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatusInactive:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatusInactive
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatusRetired:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatusRetired
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatusPlanned:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatusPlanned
	case GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatusUnderDevelopment:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatusUnderDevelopment
	default:
		*s = GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200DomainModelLevelGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200DomainModelLevelGetOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("count")
		e.Int(s.Count)
	}
	{
		e.FieldStart("DomainModelLevels")
		e.ArrStart()
		for _, elem := range s.DomainModelLevels {
			e.Str(elem)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200DomainModelLevelGetOK = [2]string{
	0: "count",
	1: "DomainModelLevels",
}

// Decode decodes GatewayCEDAR20Core20API200DomainModelLevelGetOK from json.
func (s *GatewayCEDAR20Core20API200DomainModelLevelGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DomainModelLevelGetOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int()
				s.Count = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "DomainModelLevels":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.DomainModelLevels = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.DomainModelLevels = append(s.DomainModelLevels, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DomainModelLevels\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200DomainModelLevelGetOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200DomainModelLevelGetOK) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200DomainModelLevelGetOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200DomainModelLevelGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DomainModelLevelGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200DomainModelListGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200DomainModelListGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Areas != nil {
			e.FieldStart("Areas")
			e.ArrStart()
			for _, elem := range s.Areas {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200DomainModelListGetOK = [1]string{
	0: "Areas",
}

// Decode decodes GatewayCEDAR20Core20API200DomainModelListGetOK from json.
func (s *GatewayCEDAR20Core20API200DomainModelListGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DomainModelListGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "Areas":
			if err := func() error {
				s.Areas = make([]GatewayCEDAR20Core20API200DomainModelListGetOKAreasItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200DomainModelListGetOKAreasItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Areas = append(s.Areas, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Areas\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200DomainModelListGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200DomainModelListGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DomainModelListGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200DomainModelListGetOKAreasItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200DomainModelListGetOKAreasItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Categories.Set {
			e.FieldStart("Categories")
			s.Categories.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200DomainModelListGetOKAreasItem = [3]string{
	0: "id",
	1: "name",
	2: "Categories",
}

// Decode decodes GatewayCEDAR20Core20API200DomainModelListGetOKAreasItem from json.
func (s *GatewayCEDAR20Core20API200DomainModelListGetOKAreasItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DomainModelListGetOKAreasItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "Categories":
			if err := func() error {
				s.Categories.Reset()
				if err := s.Categories.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Categories\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200DomainModelListGetOKAreasItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200DomainModelListGetOKAreasItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DomainModelListGetOKAreasItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200DomainModelListGetOKAreasItemCategoriesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200DomainModelListGetOKAreasItemCategoriesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200DomainModelListGetOKAreasItemCategoriesItem = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GatewayCEDAR20Core20API200DomainModelListGetOKAreasItemCategoriesItem from json.
func (s *GatewayCEDAR20Core20API200DomainModelListGetOKAreasItemCategoriesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DomainModelListGetOKAreasItemCategoriesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200DomainModelListGetOKAreasItemCategoriesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200DomainModelListGetOKAreasItemCategoriesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DomainModelListGetOKAreasItemCategoriesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200DomainModelNameGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200DomainModelNameGetOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("count")
		e.Int32(s.Count)
	}
	{
		e.FieldStart("DomainModelNames")
		e.ArrStart()
		for _, elem := range s.DomainModelNames {
			e.Str(elem)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200DomainModelNameGetOK = [2]string{
	0: "count",
	1: "DomainModelNames",
}

// Decode decodes GatewayCEDAR20Core20API200DomainModelNameGetOK from json.
func (s *GatewayCEDAR20Core20API200DomainModelNameGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200DomainModelNameGetOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int32()
				s.Count = int32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "DomainModelNames":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.DomainModelNames = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.DomainModelNames = append(s.DomainModelNames, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DomainModelNames\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200DomainModelNameGetOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200DomainModelNameGetOK) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200DomainModelNameGetOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200DomainModelNameGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200DomainModelNameGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200EnumerationGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200EnumerationGetOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("count")
		e.Int32(s.Count)
	}
	{
		e.FieldStart("Enumerations")
		e.ArrStart()
		for _, elem := range s.Enumerations {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200EnumerationGetOK = [2]string{
	0: "count",
	1: "Enumerations",
}

// Decode decodes GatewayCEDAR20Core20API200EnumerationGetOK from json.
func (s *GatewayCEDAR20Core20API200EnumerationGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200EnumerationGetOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int32()
				s.Count = int32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "Enumerations":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.Enumerations = make([]GatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Enumerations = append(s.Enumerations, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Enumerations\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200EnumerationGetOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200EnumerationGetOK) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200EnumerationGetOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200EnumerationGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200EnumerationGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItem) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		if s.Caption.Set {
			e.FieldStart("caption")
			s.Caption.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		e.FieldStart("values")
		e.ArrStart()
		for _, elem := range s.Values {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItem = [4]string{
	0: "name",
	1: "caption",
	2: "description",
	3: "values",
}

// Decode decodes GatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItem from json.
func (s *GatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "caption":
			if err := func() error {
				s.Caption.Reset()
				if err := s.Caption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"caption\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "values":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				s.Values = make([]GatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItemValuesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItemValuesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Values = append(s.Values, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"values\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00001001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItem) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItemValuesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItemValuesItem) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("value")
		e.Str(s.Value)
	}
	{
		e.FieldStart("description")
		e.Str(s.Description)
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItemValuesItem = [2]string{
	0: "value",
	1: "description",
}

// Decode decodes GatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItemValuesItem from json.
func (s *GatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItemValuesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItemValuesItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "value":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Value = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"value\"")
			}
		case "description":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Description = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItemValuesItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItemValuesItem) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItemValuesItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItemValuesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200EnumerationGetOKEnumerationsItemValuesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200ExchangeGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200ExchangeGetOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("count")
		e.Int32(s.Count)
	}
	{
		e.FieldStart("Exchanges")
		e.ArrStart()
		for _, elem := range s.Exchanges {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200ExchangeGetOK = [2]string{
	0: "count",
	1: "Exchanges",
}

// Decode decodes GatewayCEDAR20Core20API200ExchangeGetOK from json.
func (s *GatewayCEDAR20Core20API200ExchangeGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ExchangeGetOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int32()
				s.Count = int32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "Exchanges":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.Exchanges = make([]GatewayCEDAR20Core20API200ExchangeGetOKExchangesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200ExchangeGetOKExchangesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Exchanges = append(s.Exchanges, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Exchanges\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200ExchangeGetOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200ExchangeGetOK) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200ExchangeGetOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200ExchangeGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ExchangeGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200ExchangeGetOKExchangesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200ExchangeGetOKExchangesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ExchangeId.Set {
			e.FieldStart("exchangeId")
			s.ExchangeId.Encode(e)
		}
	}
	{
		if s.ExchangeName.Set {
			e.FieldStart("exchangeName")
			s.ExchangeName.Encode(e)
		}
	}
	{
		if s.ExchangeDescription.Set {
			e.FieldStart("exchangeDescription")
			s.ExchangeDescription.Encode(e)
		}
	}
	{
		if s.ExchangeVersion.Set {
			e.FieldStart("exchangeVersion")
			s.ExchangeVersion.Encode(e)
		}
	}
	{
		if s.ExchangeState.Set {
			e.FieldStart("exchangeState")
			s.ExchangeState.Encode(e)
		}
	}
	{
		if s.ExchangeStartDate.Set {
			e.FieldStart("exchangeStartDate")
			s.ExchangeStartDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.ExchangeEndDate.Set {
			e.FieldStart("exchangeEndDate")
			s.ExchangeEndDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.ExchangeRetiredDate.Set {
			e.FieldStart("exchangeRetiredDate")
			s.ExchangeRetiredDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.FromOwnerId.Set {
			e.FieldStart("fromOwnerId")
			s.FromOwnerId.Encode(e)
		}
	}
	{
		if s.FromOwnerName.Set {
			e.FieldStart("fromOwnerName")
			s.FromOwnerName.Encode(e)
		}
	}
	{
		if s.FromOwnerType.Set {
			e.FieldStart("fromOwnerType")
			s.FromOwnerType.Encode(e)
		}
	}
	{
		if s.ToOwnerId.Set {
			e.FieldStart("toOwnerId")
			s.ToOwnerId.Encode(e)
		}
	}
	{
		if s.ToOwnerName.Set {
			e.FieldStart("toOwnerName")
			s.ToOwnerName.Encode(e)
		}
	}
	{
		if s.ToOwnerType.Set {
			e.FieldStart("toOwnerType")
			s.ToOwnerType.Encode(e)
		}
	}
	{
		e.FieldStart("connectionFrequency")
		e.ArrStart()
		for _, elem := range s.ConnectionFrequency {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		if s.DataExchangeAgreement.Set {
			e.FieldStart("dataExchangeAgreement")
			s.DataExchangeAgreement.Encode(e)
		}
	}
	{
		if s.ContainsBeneficiaryAddress.Set {
			e.FieldStart("containsBeneficiaryAddress")
			s.ContainsBeneficiaryAddress.Encode(e)
		}
	}
	{
		e.FieldStart("businessPurposeOfAddress")
		e.ArrStart()
		for _, elem := range s.BusinessPurposeOfAddress {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		if s.IsAddressEditable.Set {
			e.FieldStart("isAddressEditable")
			s.IsAddressEditable.Encode(e)
		}
	}
	{
		if s.ContainsPii.Set {
			e.FieldStart("containsPii")
			s.ContainsPii.Encode(e)
		}
	}
	{
		if s.ContainsPhi.Set {
			e.FieldStart("containsPhi")
			s.ContainsPhi.Encode(e)
		}
	}
	{
		if s.IsBeneficiaryMailingFile.Set {
			e.FieldStart("isBeneficiaryMailingFile")
			s.IsBeneficiaryMailingFile.Encode(e)
		}
	}
	{
		if s.ContainsBankingData.Set {
			e.FieldStart("containsBankingData")
			s.ContainsBankingData.Encode(e)
		}
	}
	{
		if s.SharedViaApi.Set {
			e.FieldStart("sharedViaApi")
			s.SharedViaApi.Encode(e)
		}
	}
	{
		if s.ApiOwnership.Set {
			e.FieldStart("apiOwnership")
			s.ApiOwnership.Encode(e)
		}
	}
	{
		e.FieldStart("typeOfData")
		e.ArrStart()
		for _, elem := range s.TypeOfData {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	{
		if s.NumOfRecords.Set {
			e.FieldStart("numOfRecords")
			s.NumOfRecords.Encode(e)
		}
	}
	{
		if s.DataFormat.Set {
			e.FieldStart("dataFormat")
			s.DataFormat.Encode(e)
		}
	}
	{
		if s.DataFormatOther.Set {
			e.FieldStart("dataFormatOther")
			s.DataFormatOther.Encode(e)
		}
	}
	{
		if s.ExchangeContainsCUI.Set {
			e.FieldStart("exchangeContainsCUI")
			s.ExchangeContainsCUI.Encode(e)
		}
	}
	{
		if s.ExchangeCUIDescription.Set {
			e.FieldStart("exchangeCUIDescription")
			s.ExchangeCUIDescription.Encode(e)
		}
	}
	{
		e.FieldStart("exchangeCUIType")
		e.ArrStart()
		for _, elem := range s.ExchangeCUIType {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		if s.ExchangeConnectionAuthenticated.Set {
			e.FieldStart("exchangeConnectionAuthenticated")
			s.ExchangeConnectionAuthenticated.Encode(e)
		}
	}
	{
		e.FieldStart("exchangeNetworkProtocol")
		e.ArrStart()
		for _, elem := range s.ExchangeNetworkProtocol {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		if s.ExchangeNetworkProtocolOther.Set {
			e.FieldStart("exchangeNetworkProtocolOther")
			s.ExchangeNetworkProtocolOther.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200ExchangeGetOKExchangesItem = [35]string{
	0:  "exchangeId",
	1:  "exchangeName",
	2:  "exchangeDescription",
	3:  "exchangeVersion",
	4:  "exchangeState",
	5:  "exchangeStartDate",
	6:  "exchangeEndDate",
	7:  "exchangeRetiredDate",
	8:  "fromOwnerId",
	9:  "fromOwnerName",
	10: "fromOwnerType",
	11: "toOwnerId",
	12: "toOwnerName",
	13: "toOwnerType",
	14: "connectionFrequency",
	15: "dataExchangeAgreement",
	16: "containsBeneficiaryAddress",
	17: "businessPurposeOfAddress",
	18: "isAddressEditable",
	19: "containsPii",
	20: "containsPhi",
	21: "isBeneficiaryMailingFile",
	22: "containsBankingData",
	23: "sharedViaApi",
	24: "apiOwnership",
	25: "typeOfData",
	26: "numOfRecords",
	27: "dataFormat",
	28: "dataFormatOther",
	29: "exchangeContainsCUI",
	30: "exchangeCUIDescription",
	31: "exchangeCUIType",
	32: "exchangeConnectionAuthenticated",
	33: "exchangeNetworkProtocol",
	34: "exchangeNetworkProtocolOther",
}

// Decode decodes GatewayCEDAR20Core20API200ExchangeGetOKExchangesItem from json.
func (s *GatewayCEDAR20Core20API200ExchangeGetOKExchangesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ExchangeGetOKExchangesItem to nil")
	}
	var requiredBitSet [5]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exchangeId":
			if err := func() error {
				s.ExchangeId.Reset()
				if err := s.ExchangeId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeId\"")
			}
		case "exchangeName":
			if err := func() error {
				s.ExchangeName.Reset()
				if err := s.ExchangeName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeName\"")
			}
		case "exchangeDescription":
			if err := func() error {
				s.ExchangeDescription.Reset()
				if err := s.ExchangeDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeDescription\"")
			}
		case "exchangeVersion":
			if err := func() error {
				s.ExchangeVersion.Reset()
				if err := s.ExchangeVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeVersion\"")
			}
		case "exchangeState":
			if err := func() error {
				s.ExchangeState.Reset()
				if err := s.ExchangeState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeState\"")
			}
		case "exchangeStartDate":
			if err := func() error {
				s.ExchangeStartDate.Reset()
				if err := s.ExchangeStartDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeStartDate\"")
			}
		case "exchangeEndDate":
			if err := func() error {
				s.ExchangeEndDate.Reset()
				if err := s.ExchangeEndDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeEndDate\"")
			}
		case "exchangeRetiredDate":
			if err := func() error {
				s.ExchangeRetiredDate.Reset()
				if err := s.ExchangeRetiredDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeRetiredDate\"")
			}
		case "fromOwnerId":
			if err := func() error {
				s.FromOwnerId.Reset()
				if err := s.FromOwnerId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fromOwnerId\"")
			}
		case "fromOwnerName":
			if err := func() error {
				s.FromOwnerName.Reset()
				if err := s.FromOwnerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fromOwnerName\"")
			}
		case "fromOwnerType":
			if err := func() error {
				s.FromOwnerType.Reset()
				if err := s.FromOwnerType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fromOwnerType\"")
			}
		case "toOwnerId":
			if err := func() error {
				s.ToOwnerId.Reset()
				if err := s.ToOwnerId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toOwnerId\"")
			}
		case "toOwnerName":
			if err := func() error {
				s.ToOwnerName.Reset()
				if err := s.ToOwnerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toOwnerName\"")
			}
		case "toOwnerType":
			if err := func() error {
				s.ToOwnerType.Reset()
				if err := s.ToOwnerType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toOwnerType\"")
			}
		case "connectionFrequency":
			requiredBitSet[1] |= 1 << 6
			if err := func() error {
				s.ConnectionFrequency = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.ConnectionFrequency = append(s.ConnectionFrequency, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"connectionFrequency\"")
			}
		case "dataExchangeAgreement":
			if err := func() error {
				s.DataExchangeAgreement.Reset()
				if err := s.DataExchangeAgreement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dataExchangeAgreement\"")
			}
		case "containsBeneficiaryAddress":
			if err := func() error {
				s.ContainsBeneficiaryAddress.Reset()
				if err := s.ContainsBeneficiaryAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"containsBeneficiaryAddress\"")
			}
		case "businessPurposeOfAddress":
			requiredBitSet[2] |= 1 << 1
			if err := func() error {
				s.BusinessPurposeOfAddress = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.BusinessPurposeOfAddress = append(s.BusinessPurposeOfAddress, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"businessPurposeOfAddress\"")
			}
		case "isAddressEditable":
			if err := func() error {
				s.IsAddressEditable.Reset()
				if err := s.IsAddressEditable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isAddressEditable\"")
			}
		case "containsPii":
			if err := func() error {
				s.ContainsPii.Reset()
				if err := s.ContainsPii.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"containsPii\"")
			}
		case "containsPhi":
			if err := func() error {
				s.ContainsPhi.Reset()
				if err := s.ContainsPhi.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"containsPhi\"")
			}
		case "isBeneficiaryMailingFile":
			if err := func() error {
				s.IsBeneficiaryMailingFile.Reset()
				if err := s.IsBeneficiaryMailingFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isBeneficiaryMailingFile\"")
			}
		case "containsBankingData":
			if err := func() error {
				s.ContainsBankingData.Reset()
				if err := s.ContainsBankingData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"containsBankingData\"")
			}
		case "sharedViaApi":
			if err := func() error {
				s.SharedViaApi.Reset()
				if err := s.SharedViaApi.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sharedViaApi\"")
			}
		case "apiOwnership":
			if err := func() error {
				s.ApiOwnership.Reset()
				if err := s.ApiOwnership.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiOwnership\"")
			}
		case "typeOfData":
			requiredBitSet[3] |= 1 << 1
			if err := func() error {
				s.TypeOfData = make([]GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemTypeOfDataItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemTypeOfDataItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.TypeOfData = append(s.TypeOfData, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"typeOfData\"")
			}
		case "numOfRecords":
			if err := func() error {
				s.NumOfRecords.Reset()
				if err := s.NumOfRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numOfRecords\"")
			}
		case "dataFormat":
			if err := func() error {
				s.DataFormat.Reset()
				if err := s.DataFormat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dataFormat\"")
			}
		case "dataFormatOther":
			if err := func() error {
				s.DataFormatOther.Reset()
				if err := s.DataFormatOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dataFormatOther\"")
			}
		case "exchangeContainsCUI":
			if err := func() error {
				s.ExchangeContainsCUI.Reset()
				if err := s.ExchangeContainsCUI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeContainsCUI\"")
			}
		case "exchangeCUIDescription":
			if err := func() error {
				s.ExchangeCUIDescription.Reset()
				if err := s.ExchangeCUIDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeCUIDescription\"")
			}
		case "exchangeCUIType":
			requiredBitSet[3] |= 1 << 7
			if err := func() error {
				s.ExchangeCUIType = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.ExchangeCUIType = append(s.ExchangeCUIType, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeCUIType\"")
			}
		case "exchangeConnectionAuthenticated":
			if err := func() error {
				s.ExchangeConnectionAuthenticated.Reset()
				if err := s.ExchangeConnectionAuthenticated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeConnectionAuthenticated\"")
			}
		case "exchangeNetworkProtocol":
			requiredBitSet[4] |= 1 << 1
			if err := func() error {
				s.ExchangeNetworkProtocol = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.ExchangeNetworkProtocol = append(s.ExchangeNetworkProtocol, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeNetworkProtocol\"")
			}
		case "exchangeNetworkProtocolOther":
			if err := func() error {
				s.ExchangeNetworkProtocolOther.Reset()
				if err := s.ExchangeNetworkProtocolOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeNetworkProtocolOther\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200ExchangeGetOKExchangesItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [5]uint8{
		0b00000000,
		0b01000000,
		0b00000010,
		0b10000010,
		0b00000010,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200ExchangeGetOKExchangesItem) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200ExchangeGetOKExchangesItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200ExchangeGetOKExchangesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ExchangeGetOKExchangesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemFromOwnerType as json.
func (s GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemFromOwnerType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemFromOwnerType from json.
func (s *GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemFromOwnerType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemFromOwnerType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemFromOwnerType(v) {
	case GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemFromOwnerTypeApplication:
		*s = GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemFromOwnerTypeApplication
	case GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemFromOwnerTypeOrganization:
		*s = GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemFromOwnerTypeOrganization
	default:
		*s = GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemFromOwnerType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemFromOwnerType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemFromOwnerType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemToOwnerType as json.
func (s GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemToOwnerType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemToOwnerType from json.
func (s *GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemToOwnerType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemToOwnerType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemToOwnerType(v) {
	case GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemToOwnerTypeApplication:
		*s = GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemToOwnerTypeApplication
	case GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemToOwnerTypeOrganization:
		*s = GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemToOwnerTypeOrganization
	default:
		*s = GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemToOwnerType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemToOwnerType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemToOwnerType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemTypeOfDataItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemTypeOfDataItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200ExchangeGetOKExchangesItemTypeOfDataItem = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemTypeOfDataItem from json.
func (s *GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemTypeOfDataItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemTypeOfDataItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemTypeOfDataItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemTypeOfDataItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemTypeOfDataItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200ExchangeIDGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200ExchangeIDGetOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("exchangeId")
		e.Str(s.ExchangeId)
	}
	{
		e.FieldStart("exchangeName")
		e.Str(s.ExchangeName)
	}
	{
		if s.ExchangeVersion.Set {
			e.FieldStart("exchangeVersion")
			s.ExchangeVersion.Encode(e)
		}
	}
	{
		if s.ExchangeState.Set {
			e.FieldStart("exchangeState")
			s.ExchangeState.Encode(e)
		}
	}
	{
		if s.ExchangeStartDate.Set {
			e.FieldStart("exchangeStartDate")
			s.ExchangeStartDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.ExchangeEndDate.Set {
			e.FieldStart("exchangeEndDate")
			s.ExchangeEndDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.ExchangeRetiredDate.Set {
			e.FieldStart("exchangeRetiredDate")
			s.ExchangeRetiredDate.Encode(e, json.EncodeDate)
		}
	}
	{
		e.FieldStart("fromOwnerId")
		e.Str(s.FromOwnerId)
	}
	{
		e.FieldStart("fromOwnerName")
		e.Str(s.FromOwnerName)
	}
	{
		e.FieldStart("fromOwnerType")
		s.FromOwnerType.Encode(e)
	}
	{
		e.FieldStart("toOwnerId")
		e.Str(s.ToOwnerId)
	}
	{
		e.FieldStart("toOwnerName")
		e.Str(s.ToOwnerName)
	}
	{
		e.FieldStart("toOwnerType")
		s.ToOwnerType.Encode(e)
	}
	{
		e.FieldStart("connectionFrequency")
		e.ArrStart()
		for _, elem := range s.ConnectionFrequency {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("businessPurposeOfAddress")
		e.ArrStart()
		for _, elem := range s.BusinessPurposeOfAddress {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("typeOfData")
		e.ArrStart()
		for _, elem := range s.TypeOfData {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		if s.ExchangeContainsCUI.Set {
			e.FieldStart("exchangeContainsCUI")
			s.ExchangeContainsCUI.Encode(e)
		}
	}
	{
		if s.ExchangeCUIDescription.Set {
			e.FieldStart("exchangeCUIDescription")
			s.ExchangeCUIDescription.Encode(e)
		}
	}
	{
		e.FieldStart("exchangeNetworkProtocol")
		e.ArrStart()
		for _, elem := range s.ExchangeNetworkProtocol {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		if s.ExchangeNetworkProtocolOther.Set {
			e.FieldStart("exchangeNetworkProtocolOther")
			s.ExchangeNetworkProtocolOther.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200ExchangeIDGetOK = [20]string{
	0:  "exchangeId",
	1:  "exchangeName",
	2:  "exchangeVersion",
	3:  "exchangeState",
	4:  "exchangeStartDate",
	5:  "exchangeEndDate",
	6:  "exchangeRetiredDate",
	7:  "fromOwnerId",
	8:  "fromOwnerName",
	9:  "fromOwnerType",
	10: "toOwnerId",
	11: "toOwnerName",
	12: "toOwnerType",
	13: "connectionFrequency",
	14: "businessPurposeOfAddress",
	15: "typeOfData",
	16: "exchangeContainsCUI",
	17: "exchangeCUIDescription",
	18: "exchangeNetworkProtocol",
	19: "exchangeNetworkProtocolOther",
}

// Decode decodes GatewayCEDAR20Core20API200ExchangeIDGetOK from json.
func (s *GatewayCEDAR20Core20API200ExchangeIDGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ExchangeIDGetOK to nil")
	}
	var requiredBitSet [3]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exchangeId":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.ExchangeId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeId\"")
			}
		case "exchangeName":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.ExchangeName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeName\"")
			}
		case "exchangeVersion":
			if err := func() error {
				s.ExchangeVersion.Reset()
				if err := s.ExchangeVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeVersion\"")
			}
		case "exchangeState":
			if err := func() error {
				s.ExchangeState.Reset()
				if err := s.ExchangeState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeState\"")
			}
		case "exchangeStartDate":
			if err := func() error {
				s.ExchangeStartDate.Reset()
				if err := s.ExchangeStartDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeStartDate\"")
			}
		case "exchangeEndDate":
			if err := func() error {
				s.ExchangeEndDate.Reset()
				if err := s.ExchangeEndDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeEndDate\"")
			}
		case "exchangeRetiredDate":
			if err := func() error {
				s.ExchangeRetiredDate.Reset()
				if err := s.ExchangeRetiredDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeRetiredDate\"")
			}
		case "fromOwnerId":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				v, err := d.Str()
				s.FromOwnerId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fromOwnerId\"")
			}
		case "fromOwnerName":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.FromOwnerName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fromOwnerName\"")
			}
		case "fromOwnerType":
			requiredBitSet[1] |= 1 << 1
			if err := func() error {
				if err := s.FromOwnerType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fromOwnerType\"")
			}
		case "toOwnerId":
			requiredBitSet[1] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.ToOwnerId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toOwnerId\"")
			}
		case "toOwnerName":
			requiredBitSet[1] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.ToOwnerName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toOwnerName\"")
			}
		case "toOwnerType":
			requiredBitSet[1] |= 1 << 4
			if err := func() error {
				if err := s.ToOwnerType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toOwnerType\"")
			}
		case "connectionFrequency":
			requiredBitSet[1] |= 1 << 5
			if err := func() error {
				s.ConnectionFrequency = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.ConnectionFrequency = append(s.ConnectionFrequency, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"connectionFrequency\"")
			}
		case "businessPurposeOfAddress":
			requiredBitSet[1] |= 1 << 6
			if err := func() error {
				s.BusinessPurposeOfAddress = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.BusinessPurposeOfAddress = append(s.BusinessPurposeOfAddress, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"businessPurposeOfAddress\"")
			}
		case "typeOfData":
			requiredBitSet[1] |= 1 << 7
			if err := func() error {
				s.TypeOfData = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.TypeOfData = append(s.TypeOfData, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"typeOfData\"")
			}
		case "exchangeContainsCUI":
			if err := func() error {
				s.ExchangeContainsCUI.Reset()
				if err := s.ExchangeContainsCUI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeContainsCUI\"")
			}
		case "exchangeCUIDescription":
			if err := func() error {
				s.ExchangeCUIDescription.Reset()
				if err := s.ExchangeCUIDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeCUIDescription\"")
			}
		case "exchangeNetworkProtocol":
			requiredBitSet[2] |= 1 << 2
			if err := func() error {
				s.ExchangeNetworkProtocol = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.ExchangeNetworkProtocol = append(s.ExchangeNetworkProtocol, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeNetworkProtocol\"")
			}
		case "exchangeNetworkProtocolOther":
			if err := func() error {
				s.ExchangeNetworkProtocolOther.Reset()
				if err := s.ExchangeNetworkProtocolOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeNetworkProtocolOther\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200ExchangeIDGetOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [3]uint8{
		0b10000011,
		0b11111111,
		0b00000100,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200ExchangeIDGetOK) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200ExchangeIDGetOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200ExchangeIDGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ExchangeIDGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200ExchangeIDGetOKFromOwnerType as json.
func (s GatewayCEDAR20Core20API200ExchangeIDGetOKFromOwnerType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200ExchangeIDGetOKFromOwnerType from json.
func (s *GatewayCEDAR20Core20API200ExchangeIDGetOKFromOwnerType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ExchangeIDGetOKFromOwnerType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200ExchangeIDGetOKFromOwnerType(v) {
	case GatewayCEDAR20Core20API200ExchangeIDGetOKFromOwnerTypeApplication:
		*s = GatewayCEDAR20Core20API200ExchangeIDGetOKFromOwnerTypeApplication
	case GatewayCEDAR20Core20API200ExchangeIDGetOKFromOwnerTypeOrganization:
		*s = GatewayCEDAR20Core20API200ExchangeIDGetOKFromOwnerTypeOrganization
	default:
		*s = GatewayCEDAR20Core20API200ExchangeIDGetOKFromOwnerType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200ExchangeIDGetOKFromOwnerType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ExchangeIDGetOKFromOwnerType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200ExchangeIDGetOKToOwnerType as json.
func (s GatewayCEDAR20Core20API200ExchangeIDGetOKToOwnerType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200ExchangeIDGetOKToOwnerType from json.
func (s *GatewayCEDAR20Core20API200ExchangeIDGetOKToOwnerType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ExchangeIDGetOKToOwnerType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200ExchangeIDGetOKToOwnerType(v) {
	case GatewayCEDAR20Core20API200ExchangeIDGetOKToOwnerTypeApplication:
		*s = GatewayCEDAR20Core20API200ExchangeIDGetOKToOwnerTypeApplication
	case GatewayCEDAR20Core20API200ExchangeIDGetOKToOwnerTypeOrganization:
		*s = GatewayCEDAR20Core20API200ExchangeIDGetOKToOwnerTypeOrganization
	default:
		*s = GatewayCEDAR20Core20API200ExchangeIDGetOKToOwnerType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200ExchangeIDGetOKToOwnerType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ExchangeIDGetOKToOwnerType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200ExchangePutOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200ExchangePutOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200ExchangePutOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewayCEDAR20Core20API200ExchangePutOK from json.
func (s *GatewayCEDAR20Core20API200ExchangePutOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ExchangePutOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200ExchangePutOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200ExchangePutOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ExchangePutOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200ExchangePutReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200ExchangePutReq) encodeFields(e *jx.Encoder) {
	{
		if s.Exchanges != nil {
			e.FieldStart("Exchanges")
			e.ArrStart()
			for _, elem := range s.Exchanges {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200ExchangePutReq = [1]string{
	0: "Exchanges",
}

// Decode decodes GatewayCEDAR20Core20API200ExchangePutReq from json.
func (s *GatewayCEDAR20Core20API200ExchangePutReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ExchangePutReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "Exchanges":
			if err := func() error {
				s.Exchanges = make([]GatewayCEDAR20Core20API200ExchangePutReqExchangesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200ExchangePutReqExchangesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Exchanges = append(s.Exchanges, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Exchanges\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200ExchangePutReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200ExchangePutReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ExchangePutReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200ExchangePutReqExchangesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200ExchangePutReqExchangesItem) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("exchangeId")
		e.Str(s.ExchangeId)
	}
	{
		if s.ExchangeName.Set {
			e.FieldStart("exchangeName")
			s.ExchangeName.Encode(e)
		}
	}
	{
		if s.ExchangeDescription.Set {
			e.FieldStart("exchangeDescription")
			s.ExchangeDescription.Encode(e)
		}
	}
	{
		if s.ExchangeVersion.Set {
			e.FieldStart("exchangeVersion")
			s.ExchangeVersion.Encode(e)
		}
	}
	{
		if s.ExchangeState.Set {
			e.FieldStart("exchangeState")
			s.ExchangeState.Encode(e)
		}
	}
	{
		if s.ExchangeStartDate.Set {
			e.FieldStart("exchangeStartDate")
			s.ExchangeStartDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.ExchangeEndDate.Set {
			e.FieldStart("exchangeEndDate")
			s.ExchangeEndDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.ExchangeRetiredDate.Set {
			e.FieldStart("exchangeRetiredDate")
			s.ExchangeRetiredDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.FromOwnerId.Set {
			e.FieldStart("fromOwnerId")
			s.FromOwnerId.Encode(e)
		}
	}
	{
		if s.FromOwnerName.Set {
			e.FieldStart("fromOwnerName")
			s.FromOwnerName.Encode(e)
		}
	}
	{
		if s.FromOwnerType.Set {
			e.FieldStart("fromOwnerType")
			s.FromOwnerType.Encode(e)
		}
	}
	{
		if s.ToOwnerId.Set {
			e.FieldStart("toOwnerId")
			s.ToOwnerId.Encode(e)
		}
	}
	{
		if s.ToOwnerName.Set {
			e.FieldStart("toOwnerName")
			s.ToOwnerName.Encode(e)
		}
	}
	{
		if s.ToOwnerType.Set {
			e.FieldStart("toOwnerType")
			s.ToOwnerType.Encode(e)
		}
	}
	{
		if s.ConnectionFrequency.Set {
			e.FieldStart("connectionFrequency")
			s.ConnectionFrequency.Encode(e)
		}
	}
	{
		if s.DataExchangeAgreement.Set {
			e.FieldStart("dataExchangeAgreement")
			s.DataExchangeAgreement.Encode(e)
		}
	}
	{
		if s.ContainsBeneficiaryAddress.Set {
			e.FieldStart("containsBeneficiaryAddress")
			s.ContainsBeneficiaryAddress.Encode(e)
		}
	}
	{
		if s.BusinessPurposeOfAddress.Set {
			e.FieldStart("businessPurposeOfAddress")
			s.BusinessPurposeOfAddress.Encode(e)
		}
	}
	{
		if s.IsAddressEditable.Set {
			e.FieldStart("isAddressEditable")
			s.IsAddressEditable.Encode(e)
		}
	}
	{
		if s.ContainsPii.Set {
			e.FieldStart("containsPii")
			s.ContainsPii.Encode(e)
		}
	}
	{
		if s.ContainsPhi.Set {
			e.FieldStart("containsPhi")
			s.ContainsPhi.Encode(e)
		}
	}
	{
		if s.ContainsBankingData.Set {
			e.FieldStart("containsBankingData")
			s.ContainsBankingData.Encode(e)
		}
	}
	{
		if s.IsBeneficiaryMailingFile.Set {
			e.FieldStart("isBeneficiaryMailingFile")
			s.IsBeneficiaryMailingFile.Encode(e)
		}
	}
	{
		if s.SharedViaApi.Set {
			e.FieldStart("sharedViaApi")
			s.SharedViaApi.Encode(e)
		}
	}
	{
		if s.ApiOwnership.Set {
			e.FieldStart("apiOwnership")
			s.ApiOwnership.Encode(e)
		}
	}
	{
		if s.TypeOfData.Set {
			e.FieldStart("typeOfData")
			s.TypeOfData.Encode(e)
		}
	}
	{
		if s.NumOfRecords.Set {
			e.FieldStart("numOfRecords")
			s.NumOfRecords.Encode(e)
		}
	}
	{
		if s.DataFormat.Set {
			e.FieldStart("dataFormat")
			s.DataFormat.Encode(e)
		}
	}
	{
		if s.DataFormatOther.Set {
			e.FieldStart("dataFormatOther")
			s.DataFormatOther.Encode(e)
		}
	}
	{
		if s.ExchangeContainsCUI.Set {
			e.FieldStart("exchangeContainsCUI")
			s.ExchangeContainsCUI.Encode(e)
		}
	}
	{
		if s.ExchangeCUIDescription.Set {
			e.FieldStart("exchangeCUIDescription")
			s.ExchangeCUIDescription.Encode(e)
		}
	}
	{
		if s.ExchangeCUIType.Set {
			e.FieldStart("exchangeCUIType")
			s.ExchangeCUIType.Encode(e)
		}
	}
	{
		if s.ExchangeConnectionAuthenticated.Set {
			e.FieldStart("exchangeConnectionAuthenticated")
			s.ExchangeConnectionAuthenticated.Encode(e)
		}
	}
	{
		if s.ExchangeNetworkProtocol.Set {
			e.FieldStart("exchangeNetworkProtocol")
			s.ExchangeNetworkProtocol.Encode(e)
		}
	}
	{
		if s.ExchangeNetworkProtocolOther.Set {
			e.FieldStart("exchangeNetworkProtocolOther")
			s.ExchangeNetworkProtocolOther.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200ExchangePutReqExchangesItem = [35]string{
	0:  "exchangeId",
	1:  "exchangeName",
	2:  "exchangeDescription",
	3:  "exchangeVersion",
	4:  "exchangeState",
	5:  "exchangeStartDate",
	6:  "exchangeEndDate",
	7:  "exchangeRetiredDate",
	8:  "fromOwnerId",
	9:  "fromOwnerName",
	10: "fromOwnerType",
	11: "toOwnerId",
	12: "toOwnerName",
	13: "toOwnerType",
	14: "connectionFrequency",
	15: "dataExchangeAgreement",
	16: "containsBeneficiaryAddress",
	17: "businessPurposeOfAddress",
	18: "isAddressEditable",
	19: "containsPii",
	20: "containsPhi",
	21: "containsBankingData",
	22: "isBeneficiaryMailingFile",
	23: "sharedViaApi",
	24: "apiOwnership",
	25: "typeOfData",
	26: "numOfRecords",
	27: "dataFormat",
	28: "dataFormatOther",
	29: "exchangeContainsCUI",
	30: "exchangeCUIDescription",
	31: "exchangeCUIType",
	32: "exchangeConnectionAuthenticated",
	33: "exchangeNetworkProtocol",
	34: "exchangeNetworkProtocolOther",
}

// Decode decodes GatewayCEDAR20Core20API200ExchangePutReqExchangesItem from json.
func (s *GatewayCEDAR20Core20API200ExchangePutReqExchangesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ExchangePutReqExchangesItem to nil")
	}
	var requiredBitSet [5]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exchangeId":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.ExchangeId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeId\"")
			}
		case "exchangeName":
			if err := func() error {
				s.ExchangeName.Reset()
				if err := s.ExchangeName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeName\"")
			}
		case "exchangeDescription":
			if err := func() error {
				s.ExchangeDescription.Reset()
				if err := s.ExchangeDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeDescription\"")
			}
		case "exchangeVersion":
			if err := func() error {
				s.ExchangeVersion.Reset()
				if err := s.ExchangeVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeVersion\"")
			}
		case "exchangeState":
			if err := func() error {
				s.ExchangeState.Reset()
				if err := s.ExchangeState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeState\"")
			}
		case "exchangeStartDate":
			if err := func() error {
				s.ExchangeStartDate.Reset()
				if err := s.ExchangeStartDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeStartDate\"")
			}
		case "exchangeEndDate":
			if err := func() error {
				s.ExchangeEndDate.Reset()
				if err := s.ExchangeEndDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeEndDate\"")
			}
		case "exchangeRetiredDate":
			if err := func() error {
				s.ExchangeRetiredDate.Reset()
				if err := s.ExchangeRetiredDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeRetiredDate\"")
			}
		case "fromOwnerId":
			if err := func() error {
				s.FromOwnerId.Reset()
				if err := s.FromOwnerId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fromOwnerId\"")
			}
		case "fromOwnerName":
			if err := func() error {
				s.FromOwnerName.Reset()
				if err := s.FromOwnerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fromOwnerName\"")
			}
		case "fromOwnerType":
			if err := func() error {
				s.FromOwnerType.Reset()
				if err := s.FromOwnerType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fromOwnerType\"")
			}
		case "toOwnerId":
			if err := func() error {
				s.ToOwnerId.Reset()
				if err := s.ToOwnerId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toOwnerId\"")
			}
		case "toOwnerName":
			if err := func() error {
				s.ToOwnerName.Reset()
				if err := s.ToOwnerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toOwnerName\"")
			}
		case "toOwnerType":
			if err := func() error {
				s.ToOwnerType.Reset()
				if err := s.ToOwnerType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toOwnerType\"")
			}
		case "connectionFrequency":
			if err := func() error {
				s.ConnectionFrequency.Reset()
				if err := s.ConnectionFrequency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"connectionFrequency\"")
			}
		case "dataExchangeAgreement":
			if err := func() error {
				s.DataExchangeAgreement.Reset()
				if err := s.DataExchangeAgreement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dataExchangeAgreement\"")
			}
		case "containsBeneficiaryAddress":
			if err := func() error {
				s.ContainsBeneficiaryAddress.Reset()
				if err := s.ContainsBeneficiaryAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"containsBeneficiaryAddress\"")
			}
		case "businessPurposeOfAddress":
			if err := func() error {
				s.BusinessPurposeOfAddress.Reset()
				if err := s.BusinessPurposeOfAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"businessPurposeOfAddress\"")
			}
		case "isAddressEditable":
			if err := func() error {
				s.IsAddressEditable.Reset()
				if err := s.IsAddressEditable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isAddressEditable\"")
			}
		case "containsPii":
			if err := func() error {
				s.ContainsPii.Reset()
				if err := s.ContainsPii.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"containsPii\"")
			}
		case "containsPhi":
			if err := func() error {
				s.ContainsPhi.Reset()
				if err := s.ContainsPhi.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"containsPhi\"")
			}
		case "containsBankingData":
			if err := func() error {
				s.ContainsBankingData.Reset()
				if err := s.ContainsBankingData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"containsBankingData\"")
			}
		case "isBeneficiaryMailingFile":
			if err := func() error {
				s.IsBeneficiaryMailingFile.Reset()
				if err := s.IsBeneficiaryMailingFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isBeneficiaryMailingFile\"")
			}
		case "sharedViaApi":
			if err := func() error {
				s.SharedViaApi.Reset()
				if err := s.SharedViaApi.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sharedViaApi\"")
			}
		case "apiOwnership":
			if err := func() error {
				s.ApiOwnership.Reset()
				if err := s.ApiOwnership.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiOwnership\"")
			}
		case "typeOfData":
			if err := func() error {
				s.TypeOfData.Reset()
				if err := s.TypeOfData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"typeOfData\"")
			}
		case "numOfRecords":
			if err := func() error {
				s.NumOfRecords.Reset()
				if err := s.NumOfRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numOfRecords\"")
			}
		case "dataFormat":
			if err := func() error {
				s.DataFormat.Reset()
				if err := s.DataFormat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dataFormat\"")
			}
		case "dataFormatOther":
			if err := func() error {
				s.DataFormatOther.Reset()
				if err := s.DataFormatOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dataFormatOther\"")
			}
		case "exchangeContainsCUI":
			if err := func() error {
				s.ExchangeContainsCUI.Reset()
				if err := s.ExchangeContainsCUI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeContainsCUI\"")
			}
		case "exchangeCUIDescription":
			if err := func() error {
				s.ExchangeCUIDescription.Reset()
				if err := s.ExchangeCUIDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeCUIDescription\"")
			}
		case "exchangeCUIType":
			if err := func() error {
				s.ExchangeCUIType.Reset()
				if err := s.ExchangeCUIType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeCUIType\"")
			}
		case "exchangeConnectionAuthenticated":
			if err := func() error {
				s.ExchangeConnectionAuthenticated.Reset()
				if err := s.ExchangeConnectionAuthenticated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeConnectionAuthenticated\"")
			}
		case "exchangeNetworkProtocol":
			if err := func() error {
				s.ExchangeNetworkProtocol.Reset()
				if err := s.ExchangeNetworkProtocol.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeNetworkProtocol\"")
			}
		case "exchangeNetworkProtocolOther":
			if err := func() error {
				s.ExchangeNetworkProtocolOther.Reset()
				if err := s.ExchangeNetworkProtocolOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeNetworkProtocolOther\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200ExchangePutReqExchangesItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [5]uint8{
		0b00000001,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200ExchangePutReqExchangesItem) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200ExchangePutReqExchangesItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200ExchangePutReqExchangesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ExchangePutReqExchangesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200ExchangePutReqExchangesItemTypeOfDataItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200ExchangePutReqExchangesItemTypeOfDataItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200ExchangePutReqExchangesItemTypeOfDataItem = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GatewayCEDAR20Core20API200ExchangePutReqExchangesItemTypeOfDataItem from json.
func (s *GatewayCEDAR20Core20API200ExchangePutReqExchangesItemTypeOfDataItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ExchangePutReqExchangesItemTypeOfDataItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200ExchangePutReqExchangesItemTypeOfDataItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200ExchangePutReqExchangesItemTypeOfDataItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ExchangePutReqExchangesItemTypeOfDataItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200OrganizationGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200OrganizationGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.Organizations.Set {
			e.FieldStart("Organizations")
			s.Organizations.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200OrganizationGetOK = [2]string{
	0: "count",
	1: "Organizations",
}

// Decode decodes GatewayCEDAR20Core20API200OrganizationGetOK from json.
func (s *GatewayCEDAR20Core20API200OrganizationGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200OrganizationGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "Organizations":
			if err := func() error {
				s.Organizations.Reset()
				if err := s.Organizations.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Organizations\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200OrganizationGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200OrganizationGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200OrganizationGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200RoleGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200RoleGetOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("count")
		e.Int32(s.Count)
	}
	{
		e.FieldStart("Roles")
		e.ArrStart()
		for _, elem := range s.Roles {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200RoleGetOK = [2]string{
	0: "count",
	1: "Roles",
}

// Decode decodes GatewayCEDAR20Core20API200RoleGetOK from json.
func (s *GatewayCEDAR20Core20API200RoleGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200RoleGetOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int32()
				s.Count = int32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "Roles":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.Roles = make([]Role, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Role
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Roles = append(s.Roles, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Roles\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200RoleGetOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200RoleGetOK) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200RoleGetOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200RoleGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200RoleGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200RoleListDeleteOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200RoleListDeleteOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200RoleListDeleteOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewayCEDAR20Core20API200RoleListDeleteOK from json.
func (s *GatewayCEDAR20Core20API200RoleListDeleteOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200RoleListDeleteOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200RoleListDeleteOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200RoleListDeleteOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200RoleListDeleteOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200RolePostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200RolePostOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("result")
		e.Str(s.Result)
	}
	{
		e.FieldStart("message")
		e.ArrStart()
		for _, elem := range s.Message {
			e.Str(elem)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200RolePostOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewayCEDAR20Core20API200RolePostOK from json.
func (s *GatewayCEDAR20Core20API200RolePostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200RolePostOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Result = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200RolePostOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200RolePostOK) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200RolePostOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200RolePostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200RolePostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200RolePostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200RolePostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("application")
		s.Application.Encode(e)
	}
	{
		e.FieldStart("Roles")
		e.ArrStart()
		for _, elem := range s.Roles {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200RolePostReq = [2]string{
	0: "application",
	1: "Roles",
}

// Decode decodes GatewayCEDAR20Core20API200RolePostReq from json.
func (s *GatewayCEDAR20Core20API200RolePostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200RolePostReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "application":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.Application.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"application\"")
			}
		case "Roles":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.Roles = make([]Role, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Role
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Roles = append(s.Roles, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Roles\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200RolePostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200RolePostReq) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200RolePostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200RolePostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200RolePostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200RolePostReqApplication as json.
func (s GatewayCEDAR20Core20API200RolePostReqApplication) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200RolePostReqApplication from json.
func (s *GatewayCEDAR20Core20API200RolePostReqApplication) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200RolePostReqApplication to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200RolePostReqApplication(v) {
	case GatewayCEDAR20Core20API200RolePostReqApplicationAlfabet:
		*s = GatewayCEDAR20Core20API200RolePostReqApplicationAlfabet
	case GatewayCEDAR20Core20API200RolePostReqApplicationAll:
		*s = GatewayCEDAR20Core20API200RolePostReqApplicationAll
	default:
		*s = GatewayCEDAR20Core20API200RolePostReqApplication(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200RolePostReqApplication) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200RolePostReqApplication) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200RoleTypeApplicationGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200RoleTypeApplicationGetOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("count")
		e.Int32(s.Count)
	}
	{
		e.FieldStart("RoleTypes")
		e.ArrStart()
		for _, elem := range s.RoleTypes {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200RoleTypeApplicationGetOK = [2]string{
	0: "count",
	1: "RoleTypes",
}

// Decode decodes GatewayCEDAR20Core20API200RoleTypeApplicationGetOK from json.
func (s *GatewayCEDAR20Core20API200RoleTypeApplicationGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200RoleTypeApplicationGetOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int32()
				s.Count = int32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "RoleTypes":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.RoleTypes = make([]RoleType, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem RoleType
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.RoleTypes = append(s.RoleTypes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"RoleTypes\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200RoleTypeApplicationGetOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200RoleTypeApplicationGetOK) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200RoleTypeApplicationGetOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200RoleTypeApplicationGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200RoleTypeApplicationGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200SoftwareProductsGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200SoftwareProductsGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.AiSolnCatg.Set {
			e.FieldStart("aiSolnCatg")
			s.AiSolnCatg.Encode(e)
		}
	}
	{
		if s.AiSolnCatgOther.Set {
			e.FieldStart("aiSolnCatgOther")
			s.AiSolnCatgOther.Encode(e)
		}
	}
	{
		if s.ApiDataArea.Set {
			e.FieldStart("apiDataArea")
			s.ApiDataArea.Encode(e)
		}
	}
	{
		if s.ApiDescPubLocation.Set {
			e.FieldStart("apiDescPubLocation")
			s.ApiDescPubLocation.Encode(e)
		}
	}
	{
		if s.ApiDescPublished.Set {
			e.FieldStart("apiDescPublished")
			s.ApiDescPublished.Encode(e)
		}
	}
	{
		if s.ApiFHIRUse.Set {
			e.FieldStart("apiFHIRUse")
			s.ApiFHIRUse.Encode(e)
		}
	}
	{
		if s.ApiFHIRUseOther.Set {
			e.FieldStart("apiFHIRUseOther")
			s.ApiFHIRUseOther.Encode(e)
		}
	}
	{
		if s.ApiHasPortal.Set {
			e.FieldStart("apiHasPortal")
			s.ApiHasPortal.Encode(e)
		}
	}
	{
		if s.ApisAccessibility.Set {
			e.FieldStart("apisAccessibility")
			s.ApisAccessibility.Encode(e)
		}
	}
	{
		if s.ApisDeveloped.Set {
			e.FieldStart("apisDeveloped")
			s.ApisDeveloped.Encode(e)
		}
	}
	{
		if s.DevelopmentStage.Set {
			e.FieldStart("developmentStage")
			s.DevelopmentStage.Encode(e)
		}
	}
	{
		if s.HostingInfrastructureSystem.Set {
			e.FieldStart("hostingInfrastructureSystem")
			s.HostingInfrastructureSystem.Encode(e)
		}
	}
	{
		if s.SoftwareProducts.Set {
			e.FieldStart("softwareProducts")
			s.SoftwareProducts.Encode(e)
		}
	}
	{
		if s.SystemHasApiGateway.Set {
			e.FieldStart("systemHasApiGateway")
			s.SystemHasApiGateway.Encode(e)
		}
	}
	{
		if s.UsesAiTech.Set {
			e.FieldStart("usesAiTech")
			s.UsesAiTech.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200SoftwareProductsGetOK = [15]string{
	0:  "aiSolnCatg",
	1:  "aiSolnCatgOther",
	2:  "apiDataArea",
	3:  "apiDescPubLocation",
	4:  "apiDescPublished",
	5:  "apiFHIRUse",
	6:  "apiFHIRUseOther",
	7:  "apiHasPortal",
	8:  "apisAccessibility",
	9:  "apisDeveloped",
	10: "developmentStage",
	11: "hostingInfrastructureSystem",
	12: "softwareProducts",
	13: "systemHasApiGateway",
	14: "usesAiTech",
}

// Decode decodes GatewayCEDAR20Core20API200SoftwareProductsGetOK from json.
func (s *GatewayCEDAR20Core20API200SoftwareProductsGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SoftwareProductsGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "aiSolnCatg":
			if err := func() error {
				s.AiSolnCatg.Reset()
				if err := s.AiSolnCatg.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aiSolnCatg\"")
			}
		case "aiSolnCatgOther":
			if err := func() error {
				s.AiSolnCatgOther.Reset()
				if err := s.AiSolnCatgOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aiSolnCatgOther\"")
			}
		case "apiDataArea":
			if err := func() error {
				s.ApiDataArea.Reset()
				if err := s.ApiDataArea.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiDataArea\"")
			}
		case "apiDescPubLocation":
			if err := func() error {
				s.ApiDescPubLocation.Reset()
				if err := s.ApiDescPubLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiDescPubLocation\"")
			}
		case "apiDescPublished":
			if err := func() error {
				s.ApiDescPublished.Reset()
				if err := s.ApiDescPublished.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiDescPublished\"")
			}
		case "apiFHIRUse":
			if err := func() error {
				s.ApiFHIRUse.Reset()
				if err := s.ApiFHIRUse.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiFHIRUse\"")
			}
		case "apiFHIRUseOther":
			if err := func() error {
				s.ApiFHIRUseOther.Reset()
				if err := s.ApiFHIRUseOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiFHIRUseOther\"")
			}
		case "apiHasPortal":
			if err := func() error {
				s.ApiHasPortal.Reset()
				if err := s.ApiHasPortal.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiHasPortal\"")
			}
		case "apisAccessibility":
			if err := func() error {
				s.ApisAccessibility.Reset()
				if err := s.ApisAccessibility.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apisAccessibility\"")
			}
		case "apisDeveloped":
			if err := func() error {
				s.ApisDeveloped.Reset()
				if err := s.ApisDeveloped.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apisDeveloped\"")
			}
		case "developmentStage":
			if err := func() error {
				s.DevelopmentStage.Reset()
				if err := s.DevelopmentStage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"developmentStage\"")
			}
		case "hostingInfrastructureSystem":
			if err := func() error {
				s.HostingInfrastructureSystem.Reset()
				if err := s.HostingInfrastructureSystem.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hostingInfrastructureSystem\"")
			}
		case "softwareProducts":
			if err := func() error {
				s.SoftwareProducts.Reset()
				if err := s.SoftwareProducts.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"softwareProducts\"")
			}
		case "systemHasApiGateway":
			if err := func() error {
				s.SystemHasApiGateway.Reset()
				if err := s.SystemHasApiGateway.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemHasApiGateway\"")
			}
		case "usesAiTech":
			if err := func() error {
				s.UsesAiTech.Reset()
				if err := s.UsesAiTech.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usesAiTech\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200SoftwareProductsGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200SoftwareProductsGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SoftwareProductsGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200SoftwareProductsGetOKSoftwareProductsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200SoftwareProductsGetOKSoftwareProductsItem) encodeFields(e *jx.Encoder) {
	{
		if s.APIGatewayUse.Set {
			e.FieldStart("api_gateway_use")
			s.APIGatewayUse.Encode(e)
		}
	}
	{
		if s.ElaPurchase.Set {
			e.FieldStart("ela_purchase")
			s.ElaPurchase.Encode(e)
		}
	}
	{
		if s.ElaVendorID.Set {
			e.FieldStart("ela_vendor_id")
			s.ElaVendorID.Encode(e)
		}
	}
	{
		if s.ProvidesAiCapability.Set {
			e.FieldStart("provides_ai_capability")
			s.ProvidesAiCapability.Encode(e)
		}
	}
	{
		if s.Refstr.Set {
			e.FieldStart("refstr")
			s.Refstr.Encode(e)
		}
	}
	{
		if s.SoftwareCatagoryConnectionGuid.Set {
			e.FieldStart("softwareCatagoryConnectionGuid")
			s.SoftwareCatagoryConnectionGuid.Encode(e)
		}
	}
	{
		if s.SoftwareVendorConnectionGuid.Set {
			e.FieldStart("softwareVendorConnectionGuid")
			s.SoftwareVendorConnectionGuid.Encode(e)
		}
	}
	{
		if s.SoftwareCost.Set {
			e.FieldStart("software_cost")
			s.SoftwareCost.Encode(e)
		}
	}
	{
		if s.SoftwareElaOrganization.Set {
			e.FieldStart("software_ela_organization")
			s.SoftwareElaOrganization.Encode(e)
		}
	}
	{
		if s.SoftwareName.Set {
			e.FieldStart("software_name")
			s.SoftwareName.Encode(e)
		}
	}
	{
		if s.SystemSoftwareConnectionGuid.Set {
			e.FieldStart("systemSoftwareConnectionGuid")
			s.SystemSoftwareConnectionGuid.Encode(e)
		}
	}
	{
		if s.TechnopediaCategory.Set {
			e.FieldStart("technopedia_category")
			s.TechnopediaCategory.Encode(e)
		}
	}
	{
		if s.TechnopediaID.Set {
			e.FieldStart("technopedia_id")
			s.TechnopediaID.Encode(e)
		}
	}
	{
		if s.VendorName.Set {
			e.FieldStart("vendor_name")
			s.VendorName.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200SoftwareProductsGetOKSoftwareProductsItem = [14]string{
	0:  "api_gateway_use",
	1:  "ela_purchase",
	2:  "ela_vendor_id",
	3:  "provides_ai_capability",
	4:  "refstr",
	5:  "softwareCatagoryConnectionGuid",
	6:  "softwareVendorConnectionGuid",
	7:  "software_cost",
	8:  "software_ela_organization",
	9:  "software_name",
	10: "systemSoftwareConnectionGuid",
	11: "technopedia_category",
	12: "technopedia_id",
	13: "vendor_name",
}

// Decode decodes GatewayCEDAR20Core20API200SoftwareProductsGetOKSoftwareProductsItem from json.
func (s *GatewayCEDAR20Core20API200SoftwareProductsGetOKSoftwareProductsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SoftwareProductsGetOKSoftwareProductsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "api_gateway_use":
			if err := func() error {
				s.APIGatewayUse.Reset()
				if err := s.APIGatewayUse.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_gateway_use\"")
			}
		case "ela_purchase":
			if err := func() error {
				s.ElaPurchase.Reset()
				if err := s.ElaPurchase.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ela_purchase\"")
			}
		case "ela_vendor_id":
			if err := func() error {
				s.ElaVendorID.Reset()
				if err := s.ElaVendorID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ela_vendor_id\"")
			}
		case "provides_ai_capability":
			if err := func() error {
				s.ProvidesAiCapability.Reset()
				if err := s.ProvidesAiCapability.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_ai_capability\"")
			}
		case "refstr":
			if err := func() error {
				s.Refstr.Reset()
				if err := s.Refstr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"refstr\"")
			}
		case "softwareCatagoryConnectionGuid":
			if err := func() error {
				s.SoftwareCatagoryConnectionGuid.Reset()
				if err := s.SoftwareCatagoryConnectionGuid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"softwareCatagoryConnectionGuid\"")
			}
		case "softwareVendorConnectionGuid":
			if err := func() error {
				s.SoftwareVendorConnectionGuid.Reset()
				if err := s.SoftwareVendorConnectionGuid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"softwareVendorConnectionGuid\"")
			}
		case "software_cost":
			if err := func() error {
				s.SoftwareCost.Reset()
				if err := s.SoftwareCost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"software_cost\"")
			}
		case "software_ela_organization":
			if err := func() error {
				s.SoftwareElaOrganization.Reset()
				if err := s.SoftwareElaOrganization.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"software_ela_organization\"")
			}
		case "software_name":
			if err := func() error {
				s.SoftwareName.Reset()
				if err := s.SoftwareName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"software_name\"")
			}
		case "systemSoftwareConnectionGuid":
			if err := func() error {
				s.SystemSoftwareConnectionGuid.Reset()
				if err := s.SystemSoftwareConnectionGuid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemSoftwareConnectionGuid\"")
			}
		case "technopedia_category":
			if err := func() error {
				s.TechnopediaCategory.Reset()
				if err := s.TechnopediaCategory.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"technopedia_category\"")
			}
		case "technopedia_id":
			if err := func() error {
				s.TechnopediaID.Reset()
				if err := s.TechnopediaID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"technopedia_id\"")
			}
		case "vendor_name":
			if err := func() error {
				s.VendorName.Reset()
				if err := s.VendorName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vendor_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200SoftwareProductsGetOKSoftwareProductsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200SoftwareProductsGetOKSoftwareProductsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SoftwareProductsGetOKSoftwareProductsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200SoftwareProductsPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200SoftwareProductsPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200SoftwareProductsPostOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewayCEDAR20Core20API200SoftwareProductsPostOK from json.
func (s *GatewayCEDAR20Core20API200SoftwareProductsPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SoftwareProductsPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200SoftwareProductsPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200SoftwareProductsPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SoftwareProductsPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200SoftwareProductsPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200SoftwareProductsPostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("applicationId")
		e.Str(s.ApplicationId)
	}
	{
		if s.ApisDeveloped.Set {
			e.FieldStart("apisDeveloped")
			s.ApisDeveloped.Encode(e)
		}
	}
	{
		if s.ApiDescPublished.Set {
			e.FieldStart("apiDescPublished")
			s.ApiDescPublished.Encode(e)
		}
	}
	{
		if s.ApiDescPubLocation.Set {
			e.FieldStart("apiDescPubLocation")
			s.ApiDescPubLocation.Encode(e)
		}
	}
	{
		if s.ApiDataArea.Set {
			e.FieldStart("apiDataArea")
			s.ApiDataArea.Encode(e)
		}
	}
	{
		if s.ApisAccessibility.Set {
			e.FieldStart("apisAccessibility")
			s.ApisAccessibility.Encode(e)
		}
	}
	{
		if s.ApiFHIRUse.Set {
			e.FieldStart("apiFHIRUse")
			s.ApiFHIRUse.Encode(e)
		}
	}
	{
		if s.ApiFHIRUseOther.Set {
			e.FieldStart("apiFHIRUseOther")
			s.ApiFHIRUseOther.Encode(e)
		}
	}
	{
		if s.SystemHasApiGateway.Set {
			e.FieldStart("systemHasApiGateway")
			s.SystemHasApiGateway.Encode(e)
		}
	}
	{
		if s.ApiHasPortal.Set {
			e.FieldStart("apiHasPortal")
			s.ApiHasPortal.Encode(e)
		}
	}
	{
		if s.UsesAiTech.Set {
			e.FieldStart("usesAiTech")
			s.UsesAiTech.Encode(e)
		}
	}
	{
		if s.AiLifeCycleStage.Set {
			e.FieldStart("ai_life_cycle_stage")
			s.AiLifeCycleStage.Encode(e)
		}
	}
	{
		if s.AiSolnCatg.Set {
			e.FieldStart("aiSolnCatg")
			s.AiSolnCatg.Encode(e)
		}
	}
	{
		if s.AiSolnCatgOther.Set {
			e.FieldStart("aiSolnCatgOther")
			s.AiSolnCatgOther.Encode(e)
		}
	}
	{
		if s.SoftwareProducts.Set {
			e.FieldStart("SoftwareProducts")
			s.SoftwareProducts.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200SoftwareProductsPostReq = [15]string{
	0:  "applicationId",
	1:  "apisDeveloped",
	2:  "apiDescPublished",
	3:  "apiDescPubLocation",
	4:  "apiDataArea",
	5:  "apisAccessibility",
	6:  "apiFHIRUse",
	7:  "apiFHIRUseOther",
	8:  "systemHasApiGateway",
	9:  "apiHasPortal",
	10: "usesAiTech",
	11: "ai_life_cycle_stage",
	12: "aiSolnCatg",
	13: "aiSolnCatgOther",
	14: "SoftwareProducts",
}

// Decode decodes GatewayCEDAR20Core20API200SoftwareProductsPostReq from json.
func (s *GatewayCEDAR20Core20API200SoftwareProductsPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SoftwareProductsPostReq to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "applicationId":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.ApplicationId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"applicationId\"")
			}
		case "apisDeveloped":
			if err := func() error {
				s.ApisDeveloped.Reset()
				if err := s.ApisDeveloped.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apisDeveloped\"")
			}
		case "apiDescPublished":
			if err := func() error {
				s.ApiDescPublished.Reset()
				if err := s.ApiDescPublished.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiDescPublished\"")
			}
		case "apiDescPubLocation":
			if err := func() error {
				s.ApiDescPubLocation.Reset()
				if err := s.ApiDescPubLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiDescPubLocation\"")
			}
		case "apiDataArea":
			if err := func() error {
				s.ApiDataArea.Reset()
				if err := s.ApiDataArea.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiDataArea\"")
			}
		case "apisAccessibility":
			if err := func() error {
				s.ApisAccessibility.Reset()
				if err := s.ApisAccessibility.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apisAccessibility\"")
			}
		case "apiFHIRUse":
			if err := func() error {
				s.ApiFHIRUse.Reset()
				if err := s.ApiFHIRUse.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiFHIRUse\"")
			}
		case "apiFHIRUseOther":
			if err := func() error {
				s.ApiFHIRUseOther.Reset()
				if err := s.ApiFHIRUseOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiFHIRUseOther\"")
			}
		case "systemHasApiGateway":
			if err := func() error {
				s.SystemHasApiGateway.Reset()
				if err := s.SystemHasApiGateway.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemHasApiGateway\"")
			}
		case "apiHasPortal":
			if err := func() error {
				s.ApiHasPortal.Reset()
				if err := s.ApiHasPortal.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiHasPortal\"")
			}
		case "usesAiTech":
			if err := func() error {
				s.UsesAiTech.Reset()
				if err := s.UsesAiTech.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usesAiTech\"")
			}
		case "ai_life_cycle_stage":
			if err := func() error {
				s.AiLifeCycleStage.Reset()
				if err := s.AiLifeCycleStage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ai_life_cycle_stage\"")
			}
		case "aiSolnCatg":
			if err := func() error {
				s.AiSolnCatg.Reset()
				if err := s.AiSolnCatg.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aiSolnCatg\"")
			}
		case "aiSolnCatgOther":
			if err := func() error {
				s.AiSolnCatgOther.Reset()
				if err := s.AiSolnCatgOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aiSolnCatgOther\"")
			}
		case "SoftwareProducts":
			if err := func() error {
				s.SoftwareProducts.Reset()
				if err := s.SoftwareProducts.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SoftwareProducts\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200SoftwareProductsPostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00000001,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200SoftwareProductsPostReq) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200SoftwareProductsPostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200SoftwareProductsPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SoftwareProductsPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Deleted.Set {
			e.FieldStart("deleted")
			s.Deleted.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.Products.Set {
			e.FieldStart("Products")
			s.Products.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItem = [3]string{
	0: "deleted",
	1: "updated",
	2: "Products",
}

// Decode decodes GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItem from json.
func (s *GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "deleted":
			if err := func() error {
				s.Deleted.Reset()
				if err := s.Deleted.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deleted\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "Products":
			if err := func() error {
				s.Products.Reset()
				if err := s.Products.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Products\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem) encodeFields(e *jx.Encoder) {
	{
		if s.SoftwareProductId.Set {
			e.FieldStart("softwareProductId")
			s.SoftwareProductId.Encode(e)
		}
	}
	{
		e.FieldStart("technopedia_id")
		e.Str(s.TechnopediaID)
	}
	{
		if s.APIGatewayUse.Set {
			e.FieldStart("api_gateway_use")
			s.APIGatewayUse.Encode(e)
		}
	}
	{
		if s.ProvidesAiCapability.Set {
			e.FieldStart("provides_ai_capability")
			s.ProvidesAiCapability.Encode(e)
		}
	}
	{
		if s.SoftwareCost.Set {
			e.FieldStart("software_cost")
			s.SoftwareCost.Encode(e)
		}
	}
	{
		if s.ElaPurchase.Set {
			e.FieldStart("ela_purchase")
			s.ElaPurchase.Encode(e)
		}
	}
	{
		if s.ElaOrganization.Set {
			e.FieldStart("ela_organization")
			s.ElaOrganization.Encode(e)
		}
	}
	{
		if s.SystemSoftwareConnectionGuid.Set {
			e.FieldStart("systemSoftwareConnectionGuid")
			s.SystemSoftwareConnectionGuid.Encode(e)
		}
	}
	{
		if s.SoftwareCatagoryConnectionGuid.Set {
			e.FieldStart("softwareCatagoryConnectionGuid")
			s.SoftwareCatagoryConnectionGuid.Encode(e)
		}
	}
	{
		if s.SoftwareVendorConnectionGuid.Set {
			e.FieldStart("softwareVendorConnectionGuid")
			s.SoftwareVendorConnectionGuid.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem = [10]string{
	0: "softwareProductId",
	1: "technopedia_id",
	2: "api_gateway_use",
	3: "provides_ai_capability",
	4: "software_cost",
	5: "ela_purchase",
	6: "ela_organization",
	7: "systemSoftwareConnectionGuid",
	8: "softwareCatagoryConnectionGuid",
	9: "softwareVendorConnectionGuid",
}

// Decode decodes GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem from json.
func (s *GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "softwareProductId":
			if err := func() error {
				s.SoftwareProductId.Reset()
				if err := s.SoftwareProductId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"softwareProductId\"")
			}
		case "technopedia_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.TechnopediaID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"technopedia_id\"")
			}
		case "api_gateway_use":
			if err := func() error {
				s.APIGatewayUse.Reset()
				if err := s.APIGatewayUse.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_gateway_use\"")
			}
		case "provides_ai_capability":
			if err := func() error {
				s.ProvidesAiCapability.Reset()
				if err := s.ProvidesAiCapability.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_ai_capability\"")
			}
		case "software_cost":
			if err := func() error {
				s.SoftwareCost.Reset()
				if err := s.SoftwareCost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"software_cost\"")
			}
		case "ela_purchase":
			if err := func() error {
				s.ElaPurchase.Reset()
				if err := s.ElaPurchase.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ela_purchase\"")
			}
		case "ela_organization":
			if err := func() error {
				s.ElaOrganization.Reset()
				if err := s.ElaOrganization.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ela_organization\"")
			}
		case "systemSoftwareConnectionGuid":
			if err := func() error {
				s.SystemSoftwareConnectionGuid.Reset()
				if err := s.SystemSoftwareConnectionGuid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemSoftwareConnectionGuid\"")
			}
		case "softwareCatagoryConnectionGuid":
			if err := func() error {
				s.SoftwareCatagoryConnectionGuid.Reset()
				if err := s.SoftwareCatagoryConnectionGuid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"softwareCatagoryConnectionGuid\"")
			}
		case "softwareVendorConnectionGuid":
			if err := func() error {
				s.SoftwareVendorConnectionGuid.Reset()
				if err := s.SoftwareVendorConnectionGuid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"softwareVendorConnectionGuid\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00000010,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200StakeholderGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200StakeholderGetOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("count")
		e.Int(s.Count)
	}
	{
		e.FieldStart("Stakeholders")
		e.ArrStart()
		for _, elem := range s.Stakeholders {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200StakeholderGetOK = [2]string{
	0: "count",
	1: "Stakeholders",
}

// Decode decodes GatewayCEDAR20Core20API200StakeholderGetOK from json.
func (s *GatewayCEDAR20Core20API200StakeholderGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200StakeholderGetOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int()
				s.Count = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "Stakeholders":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.Stakeholders = make([]GatewayCEDAR20Core20API200StakeholderGetOKStakeholdersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200StakeholderGetOKStakeholdersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Stakeholders = append(s.Stakeholders, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Stakeholders\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200StakeholderGetOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200StakeholderGetOK) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200StakeholderGetOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200StakeholderGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200StakeholderGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200StakeholderGetOKStakeholdersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200StakeholderGetOKStakeholdersItem) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("id")
		e.Str(s.ID)
	}
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
	{
		if s.State.Set {
			e.FieldStart("state")
			s.State.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200StakeholderGetOKStakeholdersItem = [4]string{
	0: "id",
	1: "name",
	2: "version",
	3: "state",
}

// Decode decodes GatewayCEDAR20Core20API200StakeholderGetOKStakeholdersItem from json.
func (s *GatewayCEDAR20Core20API200StakeholderGetOKStakeholdersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200StakeholderGetOKStakeholdersItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.ID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "state":
			if err := func() error {
				s.State.Reset()
				if err := s.State.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200StakeholderGetOKStakeholdersItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200StakeholderGetOKStakeholdersItem) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200StakeholderGetOKStakeholdersItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200StakeholderGetOKStakeholdersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200StakeholderGetOKStakeholdersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200SupportContactDeleteBadRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200SupportContactDeleteBadRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200SupportContactDeleteBadRequest = [1]string{
	0: "message",
}

// Decode decodes GatewayCEDAR20Core20API200SupportContactDeleteBadRequest from json.
func (s *GatewayCEDAR20Core20API200SupportContactDeleteBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SupportContactDeleteBadRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200SupportContactDeleteBadRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200SupportContactDeleteBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SupportContactDeleteBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200SupportContactDeleteOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200SupportContactDeleteOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200SupportContactDeleteOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewayCEDAR20Core20API200SupportContactDeleteOK from json.
func (s *GatewayCEDAR20Core20API200SupportContactDeleteOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SupportContactDeleteOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200SupportContactDeleteOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200SupportContactDeleteOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SupportContactDeleteOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200SupportContactGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200SupportContactGetOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("count")
		e.Int(s.Count)
	}
	{
		e.FieldStart("SupportContacts")
		e.ArrStart()
		for _, elem := range s.SupportContacts {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200SupportContactGetOK = [2]string{
	0: "count",
	1: "SupportContacts",
}

// Decode decodes GatewayCEDAR20Core20API200SupportContactGetOK from json.
func (s *GatewayCEDAR20Core20API200SupportContactGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SupportContactGetOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int()
				s.Count = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "SupportContacts":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.SupportContacts = make([]GatewayCEDAR20Core20API200SupportContactGetOKSupportContactsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200SupportContactGetOKSupportContactsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SupportContacts = append(s.SupportContacts, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SupportContacts\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200SupportContactGetOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200SupportContactGetOK) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200SupportContactGetOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200SupportContactGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SupportContactGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200SupportContactGetOKSupportContactsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200SupportContactGetOKSupportContactsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Application.Set {
			e.FieldStart("application")
			s.Application.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.Phone.Set {
			e.FieldStart("phone")
			s.Phone.Encode(e)
		}
	}
	{
		if s.URL.Set {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200SupportContactGetOKSupportContactsItem = [7]string{
	0: "id",
	1: "application",
	2: "name",
	3: "title",
	4: "email",
	5: "phone",
	6: "url",
}

// Decode decodes GatewayCEDAR20Core20API200SupportContactGetOKSupportContactsItem from json.
func (s *GatewayCEDAR20Core20API200SupportContactGetOKSupportContactsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SupportContactGetOKSupportContactsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "application":
			if err := func() error {
				s.Application.Reset()
				if err := s.Application.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"application\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "phone":
			if err := func() error {
				s.Phone.Reset()
				if err := s.Phone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone\"")
			}
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200SupportContactGetOKSupportContactsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200SupportContactGetOKSupportContactsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SupportContactGetOKSupportContactsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200SupportContactPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200SupportContactPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200SupportContactPostOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewayCEDAR20Core20API200SupportContactPostOK from json.
func (s *GatewayCEDAR20Core20API200SupportContactPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SupportContactPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200SupportContactPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200SupportContactPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SupportContactPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200SupportContactPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200SupportContactPostReq) encodeFields(e *jx.Encoder) {
	{
		if s.SupportContacts != nil {
			e.FieldStart("SupportContacts")
			e.ArrStart()
			for _, elem := range s.SupportContacts {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200SupportContactPostReq = [1]string{
	0: "SupportContacts",
}

// Decode decodes GatewayCEDAR20Core20API200SupportContactPostReq from json.
func (s *GatewayCEDAR20Core20API200SupportContactPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SupportContactPostReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "SupportContacts":
			if err := func() error {
				s.SupportContacts = make([]GatewayCEDAR20Core20API200SupportContactPostReqSupportContactsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200SupportContactPostReqSupportContactsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SupportContacts = append(s.SupportContacts, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SupportContacts\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200SupportContactPostReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200SupportContactPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SupportContactPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200SupportContactPostReqSupportContactsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200SupportContactPostReqSupportContactsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		e.FieldStart("application")
		e.Str(s.Application)
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.URL.Set {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
	{
		if s.Phone.Set {
			e.FieldStart("phone")
			s.Phone.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200SupportContactPostReqSupportContactsItem = [7]string{
	0: "id",
	1: "application",
	2: "name",
	3: "title",
	4: "url",
	5: "phone",
	6: "email",
}

// Decode decodes GatewayCEDAR20Core20API200SupportContactPostReqSupportContactsItem from json.
func (s *GatewayCEDAR20Core20API200SupportContactPostReqSupportContactsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SupportContactPostReqSupportContactsItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "application":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Application = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"application\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		case "phone":
			if err := func() error {
				s.Phone.Reset()
				if err := s.Phone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200SupportContactPostReqSupportContactsItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000010,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200SupportContactPostReqSupportContactsItem) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200SupportContactPostReqSupportContactsItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200SupportContactPostReqSupportContactsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SupportContactPostReqSupportContactsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.BusinessOwnerInformation.Set {
			e.FieldStart("BusinessOwnerInformation")
			s.BusinessOwnerInformation.Encode(e)
		}
	}
	{
		if s.DataCenterHosting.Set {
			e.FieldStart("DataCenterHosting")
			s.DataCenterHosting.Encode(e)
		}
	}
	{
		if s.SoftwareProductDetails.Set {
			e.FieldStart("SoftwareProductDetails")
			s.SoftwareProductDetails.Encode(e)
		}
	}
	{
		if s.SystemMaintainerInformation.Set {
			e.FieldStart("SystemMaintainerInformation")
			s.SystemMaintainerInformation.Encode(e)
		}
	}
	{
		if s.Acronym.Set {
			e.FieldStart("acronym")
			s.Acronym.Encode(e)
		}
	}
	{
		if s.AtoEffectiveDate.Set {
			e.FieldStart("atoEffectiveDate")
			s.AtoEffectiveDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.AtoExpirationDate.Set {
			e.FieldStart("atoExpirationDate")
			s.AtoExpirationDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.BelongsTo.Set {
			e.FieldStart("belongsTo")
			s.BelongsTo.Encode(e)
		}
	}
	{
		if s.BusinessOwnerOrg.Set {
			e.FieldStart("businessOwnerOrg")
			s.BusinessOwnerOrg.Encode(e)
		}
	}
	{
		if s.BusinessOwnerOrgComp.Set {
			e.FieldStart("businessOwnerOrgComp")
			s.BusinessOwnerOrgComp.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.IctObjectId.Set {
			e.FieldStart("ictObjectId")
			s.IctObjectId.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.NextVersionId.Set {
			e.FieldStart("nextVersionId")
			s.NextVersionId.Encode(e)
		}
	}
	{
		if s.PreviousVersionId.Set {
			e.FieldStart("previousVersionId")
			s.PreviousVersionId.Encode(e)
		}
	}
	{
		if s.State.Set {
			e.FieldStart("state")
			s.State.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.SystemMaintainerOrg.Set {
			e.FieldStart("systemMaintainerOrg")
			s.SystemMaintainerOrg.Encode(e)
		}
	}
	{
		if s.SystemMaintainerOrgComp.Set {
			e.FieldStart("systemMaintainerOrgComp")
			s.SystemMaintainerOrgComp.Encode(e)
		}
	}
	{
		if s.UUID.Set {
			e.FieldStart("uuid")
			s.UUID.Encode(e)
		}
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200SystemDetailIDGetOK = [22]string{
	0:  "BusinessOwnerInformation",
	1:  "DataCenterHosting",
	2:  "SoftwareProductDetails",
	3:  "SystemMaintainerInformation",
	4:  "acronym",
	5:  "atoEffectiveDate",
	6:  "atoExpirationDate",
	7:  "belongsTo",
	8:  "businessOwnerOrg",
	9:  "businessOwnerOrgComp",
	10: "description",
	11: "ictObjectId",
	12: "id",
	13: "name",
	14: "nextVersionId",
	15: "previousVersionId",
	16: "state",
	17: "status",
	18: "systemMaintainerOrg",
	19: "systemMaintainerOrgComp",
	20: "uuid",
	21: "version",
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOK from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "BusinessOwnerInformation":
			if err := func() error {
				s.BusinessOwnerInformation.Reset()
				if err := s.BusinessOwnerInformation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"BusinessOwnerInformation\"")
			}
		case "DataCenterHosting":
			if err := func() error {
				s.DataCenterHosting.Reset()
				if err := s.DataCenterHosting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DataCenterHosting\"")
			}
		case "SoftwareProductDetails":
			if err := func() error {
				s.SoftwareProductDetails.Reset()
				if err := s.SoftwareProductDetails.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SoftwareProductDetails\"")
			}
		case "SystemMaintainerInformation":
			if err := func() error {
				s.SystemMaintainerInformation.Reset()
				if err := s.SystemMaintainerInformation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SystemMaintainerInformation\"")
			}
		case "acronym":
			if err := func() error {
				s.Acronym.Reset()
				if err := s.Acronym.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"acronym\"")
			}
		case "atoEffectiveDate":
			if err := func() error {
				s.AtoEffectiveDate.Reset()
				if err := s.AtoEffectiveDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"atoEffectiveDate\"")
			}
		case "atoExpirationDate":
			if err := func() error {
				s.AtoExpirationDate.Reset()
				if err := s.AtoExpirationDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"atoExpirationDate\"")
			}
		case "belongsTo":
			if err := func() error {
				s.BelongsTo.Reset()
				if err := s.BelongsTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"belongsTo\"")
			}
		case "businessOwnerOrg":
			if err := func() error {
				s.BusinessOwnerOrg.Reset()
				if err := s.BusinessOwnerOrg.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"businessOwnerOrg\"")
			}
		case "businessOwnerOrgComp":
			if err := func() error {
				s.BusinessOwnerOrgComp.Reset()
				if err := s.BusinessOwnerOrgComp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"businessOwnerOrgComp\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "ictObjectId":
			if err := func() error {
				s.IctObjectId.Reset()
				if err := s.IctObjectId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ictObjectId\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "nextVersionId":
			if err := func() error {
				s.NextVersionId.Reset()
				if err := s.NextVersionId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nextVersionId\"")
			}
		case "previousVersionId":
			if err := func() error {
				s.PreviousVersionId.Reset()
				if err := s.PreviousVersionId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"previousVersionId\"")
			}
		case "state":
			if err := func() error {
				s.State.Reset()
				if err := s.State.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "systemMaintainerOrg":
			if err := func() error {
				s.SystemMaintainerOrg.Reset()
				if err := s.SystemMaintainerOrg.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemMaintainerOrg\"")
			}
		case "systemMaintainerOrgComp":
			if err := func() error {
				s.SystemMaintainerOrgComp.Reset()
				if err := s.SystemMaintainerOrgComp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemMaintainerOrgComp\"")
			}
		case "uuid":
			if err := func() error {
				s.UUID.Reset()
				if err := s.UUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uuid\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200SystemDetailIDGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation) encodeFields(e *jx.Encoder) {
	{
		if s.R508UserInterface.Set {
			e.FieldStart("508UserInterface")
			s.R508UserInterface.Encode(e)
		}
	}
	{
		if s.BeneficiaryAddressPurpose.Set {
			e.FieldStart("beneficiaryAddressPurpose")
			s.BeneficiaryAddressPurpose.Encode(e)
		}
	}
	{
		if s.BeneficiaryAddressPurposeOther.Set {
			e.FieldStart("beneficiaryAddressPurposeOther")
			s.BeneficiaryAddressPurposeOther.Encode(e)
		}
	}
	{
		if s.BeneficiaryAddressSource.Set {
			e.FieldStart("beneficiaryAddressSource")
			s.BeneficiaryAddressSource.Encode(e)
		}
	}
	{
		if s.BeneficiaryAddressSourceOther.Set {
			e.FieldStart("beneficiaryAddressSourceOther")
			s.BeneficiaryAddressSourceOther.Encode(e)
		}
	}
	{
		if s.BeneficiaryInformation.Set {
			e.FieldStart("beneficiaryInformation")
			s.BeneficiaryInformation.Encode(e)
		}
	}
	{
		if s.CostPerYear.Set {
			e.FieldStart("costPerYear")
			s.CostPerYear.Encode(e)
		}
	}
	{
		if s.EditBeneficiaryInformation.Set {
			e.FieldStart("editBeneficiaryInformation")
			s.EditBeneficiaryInformation.Encode(e)
		}
	}
	{
		if s.IsCmsOwned.Set {
			e.FieldStart("isCmsOwned")
			s.IsCmsOwned.Encode(e)
		}
	}
	{
		if s.NumberOfContractorFte.Set {
			e.FieldStart("numberOfContractorFte")
			s.NumberOfContractorFte.Encode(e)
		}
	}
	{
		if s.NumberOfFederalFte.Set {
			e.FieldStart("numberOfFederalFte")
			s.NumberOfFederalFte.Encode(e)
		}
	}
	{
		if s.NumberOfSupportedUsersPerMonth.Set {
			e.FieldStart("numberOfSupportedUsersPerMonth")
			s.NumberOfSupportedUsersPerMonth.Encode(e)
		}
	}
	{
		if s.StoresBankingData.Set {
			e.FieldStart("storesBankingData")
			s.StoresBankingData.Encode(e)
		}
	}
	{
		if s.StoresBeneficiaryAddress.Set {
			e.FieldStart("storesBeneficiaryAddress")
			s.StoresBeneficiaryAddress.Encode(e)
		}
	}
	{
		if s.SystemOwnership.Set {
			e.FieldStart("systemOwnership")
			s.SystemOwnership.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation = [15]string{
	0:  "508UserInterface",
	1:  "beneficiaryAddressPurpose",
	2:  "beneficiaryAddressPurposeOther",
	3:  "beneficiaryAddressSource",
	4:  "beneficiaryAddressSourceOther",
	5:  "beneficiaryInformation",
	6:  "costPerYear",
	7:  "editBeneficiaryInformation",
	8:  "isCmsOwned",
	9:  "numberOfContractorFte",
	10: "numberOfFederalFte",
	11: "numberOfSupportedUsersPerMonth",
	12: "storesBankingData",
	13: "storesBeneficiaryAddress",
	14: "systemOwnership",
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "508UserInterface":
			if err := func() error {
				s.R508UserInterface.Reset()
				if err := s.R508UserInterface.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"508UserInterface\"")
			}
		case "beneficiaryAddressPurpose":
			if err := func() error {
				s.BeneficiaryAddressPurpose.Reset()
				if err := s.BeneficiaryAddressPurpose.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"beneficiaryAddressPurpose\"")
			}
		case "beneficiaryAddressPurposeOther":
			if err := func() error {
				s.BeneficiaryAddressPurposeOther.Reset()
				if err := s.BeneficiaryAddressPurposeOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"beneficiaryAddressPurposeOther\"")
			}
		case "beneficiaryAddressSource":
			if err := func() error {
				s.BeneficiaryAddressSource.Reset()
				if err := s.BeneficiaryAddressSource.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"beneficiaryAddressSource\"")
			}
		case "beneficiaryAddressSourceOther":
			if err := func() error {
				s.BeneficiaryAddressSourceOther.Reset()
				if err := s.BeneficiaryAddressSourceOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"beneficiaryAddressSourceOther\"")
			}
		case "beneficiaryInformation":
			if err := func() error {
				s.BeneficiaryInformation.Reset()
				if err := s.BeneficiaryInformation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"beneficiaryInformation\"")
			}
		case "costPerYear":
			if err := func() error {
				s.CostPerYear.Reset()
				if err := s.CostPerYear.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"costPerYear\"")
			}
		case "editBeneficiaryInformation":
			if err := func() error {
				s.EditBeneficiaryInformation.Reset()
				if err := s.EditBeneficiaryInformation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"editBeneficiaryInformation\"")
			}
		case "isCmsOwned":
			if err := func() error {
				s.IsCmsOwned.Reset()
				if err := s.IsCmsOwned.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isCmsOwned\"")
			}
		case "numberOfContractorFte":
			if err := func() error {
				s.NumberOfContractorFte.Reset()
				if err := s.NumberOfContractorFte.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numberOfContractorFte\"")
			}
		case "numberOfFederalFte":
			if err := func() error {
				s.NumberOfFederalFte.Reset()
				if err := s.NumberOfFederalFte.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numberOfFederalFte\"")
			}
		case "numberOfSupportedUsersPerMonth":
			if err := func() error {
				s.NumberOfSupportedUsersPerMonth.Reset()
				if err := s.NumberOfSupportedUsersPerMonth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numberOfSupportedUsersPerMonth\"")
			}
		case "storesBankingData":
			if err := func() error {
				s.StoresBankingData.Reset()
				if err := s.StoresBankingData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"storesBankingData\"")
			}
		case "storesBeneficiaryAddress":
			if err := func() error {
				s.StoresBeneficiaryAddress.Reset()
				if err := s.StoresBeneficiaryAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"storesBeneficiaryAddress\"")
			}
		case "systemOwnership":
			if err := func() error {
				s.SystemOwnership.Reset()
				if err := s.SystemOwnership.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemOwnership\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterface as json.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterface) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterface from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterface) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterface to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterface(v) {
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterfaceYesUIAccessibleByExternalUsers:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterfaceYesUIAccessibleByExternalUsers
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterfaceYesUIAccessibleByInternalFederalEmployees:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterfaceYesUIAccessibleByInternalFederalEmployees
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterfaceYesUIAccessibleByBothInternalFederalEmployeesAndExternalUsers:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterfaceYesUIAccessibleByBothInternalFederalEmployeesAndExternalUsers
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterfaceNoThisSystemDoesnTHaveAUI:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterfaceNoThisSystemDoesnTHaveAUI
	default:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterface(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterface) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterface) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItem as json.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItem) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItem from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItem to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItem(v) {
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemMailing:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemMailing
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemPaymentCalculation:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemPaymentCalculation
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemCoordinationOfBenefits:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemCoordinationOfBenefits
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemSubsidyCalculation:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemSubsidyCalculation
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemPremiumCalculation:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemPremiumCalculation
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemRiskAdjustment:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemRiskAdjustment
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemCoordinationOfCare:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemCoordinationOfCare
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemEligibilityAndEnrollment:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemEligibilityAndEnrollment
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemCustomerService:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemCustomerService
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemEducationAndOutreach:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemEducationAndOutreach
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemInnovation:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemInnovation
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemResearchAndDemonstrations:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemResearchAndDemonstrations
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemHealthcareQualityImprovement:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemHealthcareQualityImprovement
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemProgramOversight:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemProgramOversight
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemActuarialServices:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemActuarialServices
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemRegulatoryAndPolicyDevelopment:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemRegulatoryAndPolicyDevelopment
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemAuditSupport:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemAuditSupport
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemPatientCareReporting:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemPatientCareReporting
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemBeneficiaryDataAccess:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemBeneficiaryDataAccess
	default:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItem(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItem as json.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItem) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItem from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItem to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItem(v) {
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItemBeneficiaryAddress:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItemBeneficiaryAddress
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItemBeneficiaryEmail:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItemBeneficiaryEmail
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItemBeneficiaryMobileNumber:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItemBeneficiaryMobileNumber
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItemNoneOfTheAbove:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItemNoneOfTheAbove
	default:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItem(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHosting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHosting) encodeFields(e *jx.Encoder) {
	{
		if s.MovingToCloud.Set {
			e.FieldStart("movingToCloud")
			s.MovingToCloud.Encode(e)
		}
	}
	{
		if s.MovingToCloudDate.Set {
			e.FieldStart("movingToCloudDate")
			s.MovingToCloudDate.Encode(e, json.EncodeDate)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHosting = [2]string{
	0: "movingToCloud",
	1: "movingToCloudDate",
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHosting from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHosting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHosting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "movingToCloud":
			if err := func() error {
				s.MovingToCloud.Reset()
				if err := s.MovingToCloud.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"movingToCloud\"")
			}
		case "movingToCloudDate":
			if err := func() error {
				s.MovingToCloudDate.Reset()
				if err := s.MovingToCloudDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"movingToCloudDate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHosting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHosting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHosting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloud as json.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloud) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloud from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloud) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloud to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloud(v) {
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloudYes:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloudYes
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloudNo:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloudNo
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloudPlans:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloudPlans
	default:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloud(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloud) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloud) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetails) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetails) encodeFields(e *jx.Encoder) {
	{
		if s.AiPlan.Set {
			e.FieldStart("aiPlan")
			s.AiPlan.Encode(e)
		}
	}
	{
		if s.ApiDataArea.Set {
			e.FieldStart("apiDataArea")
			s.ApiDataArea.Encode(e)
		}
	}
	{
		if s.ApiFHIRUse.Set {
			e.FieldStart("apiFHIRUse")
			s.ApiFHIRUse.Encode(e)
		}
	}
	{
		if s.ApiFHIRUseOther.Set {
			e.FieldStart("apiFHIRUseOther")
			s.ApiFHIRUseOther.Encode(e)
		}
	}
	{
		if s.ApisAccessibility.Set {
			e.FieldStart("apisAccessibility")
			s.ApisAccessibility.Encode(e)
		}
	}
	{
		if s.ApisDeveloped.Set {
			e.FieldStart("apisDeveloped")
			s.ApisDeveloped.Encode(e)
		}
	}
	{
		if s.SystemAiType.Set {
			e.FieldStart("systemAiType")
			s.SystemAiType.Encode(e)
		}
	}
	{
		if s.SystemAiTypeOther.Set {
			e.FieldStart("systemAiTypeOther")
			s.SystemAiTypeOther.Encode(e)
		}
	}
	{
		if s.SystemHasApiGateway.Set {
			e.FieldStart("systemHasApiGateway")
			s.SystemHasApiGateway.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetails = [9]string{
	0: "aiPlan",
	1: "apiDataArea",
	2: "apiFHIRUse",
	3: "apiFHIRUseOther",
	4: "apisAccessibility",
	5: "apisDeveloped",
	6: "systemAiType",
	7: "systemAiTypeOther",
	8: "systemHasApiGateway",
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetails from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetails) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetails to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "aiPlan":
			if err := func() error {
				s.AiPlan.Reset()
				if err := s.AiPlan.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aiPlan\"")
			}
		case "apiDataArea":
			if err := func() error {
				s.ApiDataArea.Reset()
				if err := s.ApiDataArea.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiDataArea\"")
			}
		case "apiFHIRUse":
			if err := func() error {
				s.ApiFHIRUse.Reset()
				if err := s.ApiFHIRUse.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiFHIRUse\"")
			}
		case "apiFHIRUseOther":
			if err := func() error {
				s.ApiFHIRUseOther.Reset()
				if err := s.ApiFHIRUseOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiFHIRUseOther\"")
			}
		case "apisAccessibility":
			if err := func() error {
				s.ApisAccessibility.Reset()
				if err := s.ApisAccessibility.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apisAccessibility\"")
			}
		case "apisDeveloped":
			if err := func() error {
				s.ApisDeveloped.Reset()
				if err := s.ApisDeveloped.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apisDeveloped\"")
			}
		case "systemAiType":
			if err := func() error {
				s.SystemAiType.Reset()
				if err := s.SystemAiType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemAiType\"")
			}
		case "systemAiTypeOther":
			if err := func() error {
				s.SystemAiTypeOther.Reset()
				if err := s.SystemAiTypeOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemAiTypeOther\"")
			}
		case "systemHasApiGateway":
			if err := func() error {
				s.SystemHasApiGateway.Reset()
				if err := s.SystemHasApiGateway.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemHasApiGateway\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetails")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetails) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetails) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlan as json.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlan) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlan from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlan) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlan to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlan(v) {
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlanYesThisSystemHasDevelopedAICapabilities:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlanYesThisSystemHasDevelopedAICapabilities
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlanYesThisSystemUsesASaaSAIToolLikeRemesh:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlanYesThisSystemUsesASaaSAIToolLikeRemesh
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlanNoAndThisSystemCurrentlyHasNoPlansToUtilizeAICapabilities:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlanNoAndThisSystemCurrentlyHasNoPlansToUtilizeAICapabilities
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlanNoButThereCurrentlyArePlansToUseAICapabilitiesInTheNextTwoYears:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlanNoButThereCurrentlyArePlansToUseAICapabilitiesInTheNextTwoYears
	default:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlan(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlan) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlan) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItem as json.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItem) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItem from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItem to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItem(v) {
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItemBeneficiaryAndConsumer:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItemBeneficiaryAndConsumer
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItemHealthInsuranceProgram:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItemHealthInsuranceProgram
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItemHealthcarePayment:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItemHealthcarePayment
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItemHealthcareQuality:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItemHealthcareQuality
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItemHealthcareService:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItemHealthcareService
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItemOrganization:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItemOrganization
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItemProvider:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItemProvider
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItemSupportingResource:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItemSupportingResource
	default:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItem(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUse as json.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUse) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUse from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUse to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUse(v) {
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUseNo:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUseNo
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUseFHIR:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUseFHIR
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUseHL7:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUseHL7
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUseOtherStandard:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUseOtherStandard
	default:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUse(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibility as json.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibility) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibility from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibility) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibility to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibility(v) {
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibilityBoth:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibilityBoth
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibilityExternalAccess:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibilityExternalAccess
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibilityInternalAccess:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibilityInternalAccess
	default:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibility(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibility) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibility) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDeveloped as json.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDeveloped) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDeveloped from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDeveloped) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDeveloped to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDeveloped(v) {
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDevelopedNo:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDevelopedNo
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDevelopedYes:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDevelopedYes
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDevelopedAPIInDevelopmentButNotYetLaunched:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDevelopedAPIInDevelopmentButNotYetLaunched
	default:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDeveloped(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDeveloped) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDeveloped) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformation) encodeFields(e *jx.Encoder) {
	{
		if s.AdHocAgileDeploymentFrequency.Set {
			e.FieldStart("adHocAgileDeploymentFrequency")
			s.AdHocAgileDeploymentFrequency.Encode(e)
		}
	}
	{
		if s.AgileUsed.Set {
			e.FieldStart("agileUsed")
			s.AgileUsed.Encode(e)
		}
	}
	{
		if s.AuthoritativeDatasource.Set {
			e.FieldStart("authoritativeDatasource")
			s.AuthoritativeDatasource.Encode(e)
		}
	}
	{
		if s.BusinessArtifactsOnDemand.Set {
			e.FieldStart("businessArtifactsOnDemand")
			s.BusinessArtifactsOnDemand.Encode(e)
		}
	}
	{
		if s.DataAtRestEncryptionKeyManagement.Set {
			e.FieldStart("dataAtRestEncryptionKeyManagement")
			s.DataAtRestEncryptionKeyManagement.Encode(e)
		}
	}
	{
		if s.DeploymentFrequency.Set {
			e.FieldStart("deploymentFrequency")
			s.DeploymentFrequency.Encode(e)
		}
	}
	{
		if s.DevCompletionPercent.Set {
			e.FieldStart("devCompletionPercent")
			s.DevCompletionPercent.Encode(e)
		}
	}
	{
		if s.DevWorkDescription.Set {
			e.FieldStart("devWorkDescription")
			s.DevWorkDescription.Encode(e)
		}
	}
	{
		if s.EcapParticipation.Set {
			e.FieldStart("ecapParticipation")
			s.EcapParticipation.Encode(e)
		}
	}
	{
		if s.FrontendAccessType.Set {
			e.FieldStart("frontendAccessType")
			s.FrontendAccessType.Encode(e)
		}
	}
	{
		if s.HardCodedIpAddress.Set {
			e.FieldStart("hardCodedIpAddress")
			s.HardCodedIpAddress.Encode(e)
		}
	}
	{
		if s.Ip6EnabledAssetPercent.Set {
			e.FieldStart("ip6EnabledAssetPercent")
			s.Ip6EnabledAssetPercent.Encode(e)
		}
	}
	{
		if s.Ip6TransitionPlan.Set {
			e.FieldStart("ip6TransitionPlan")
			s.Ip6TransitionPlan.Encode(e)
		}
	}
	{
		if s.IpEnabledAssetCount.Set {
			e.FieldStart("ipEnabledAssetCount")
			s.IpEnabledAssetCount.Encode(e)
		}
	}
	{
		if s.LegalHoldCaseName.Set {
			e.FieldStart("legalHoldCaseName")
			s.LegalHoldCaseName.Encode(e)
		}
	}
	{
		if s.LocallyStoredUserInformation.Set {
			e.FieldStart("locallyStoredUserInformation")
			s.LocallyStoredUserInformation.Encode(e)
		}
	}
	{
		if s.MajorRefreshDate.Set {
			e.FieldStart("majorRefreshDate")
			s.MajorRefreshDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.MultifactorAuthenticationMethod.Set {
			e.FieldStart("multifactorAuthenticationMethod")
			s.MultifactorAuthenticationMethod.Encode(e)
		}
	}
	{
		if s.MultifactorAuthenticationMethodOther.Set {
			e.FieldStart("multifactorAuthenticationMethodOther")
			s.MultifactorAuthenticationMethodOther.Encode(e)
		}
	}
	{
		if s.NetAccessibility.Set {
			e.FieldStart("netAccessibility")
			s.NetAccessibility.Encode(e)
		}
	}
	{
		if s.NetworkTrafficEncryptionKeyManagement.Set {
			e.FieldStart("networkTrafficEncryptionKeyManagement")
			s.NetworkTrafficEncryptionKeyManagement.Encode(e)
		}
	}
	{
		if s.NoMajorRefresh.Set {
			e.FieldStart("noMajorRefresh")
			s.NoMajorRefresh.Encode(e)
		}
	}
	{
		if s.NoPersistentRecordsFlag.Set {
			e.FieldStart("noPersistentRecordsFlag")
			s.NoPersistentRecordsFlag.Encode(e)
		}
	}
	{
		if s.NoPlannedMajorRefresh.Set {
			e.FieldStart("noPlannedMajorRefresh")
			s.NoPlannedMajorRefresh.Encode(e)
		}
	}
	{
		if s.OmDocumentationOnDemand.Set {
			e.FieldStart("omDocumentationOnDemand")
			s.OmDocumentationOnDemand.Encode(e)
		}
	}
	{
		if s.PlansToRetireReplace.Set {
			e.FieldStart("plansToRetireReplace")
			s.PlansToRetireReplace.Encode(e)
		}
	}
	{
		if s.QuarterToRetireReplace.Set {
			e.FieldStart("quarterToRetireReplace")
			s.QuarterToRetireReplace.Encode(e)
		}
	}
	{
		if s.RecordsManagementBucket.Set {
			e.FieldStart("recordsManagementBucket")
			s.RecordsManagementBucket.Encode(e)
		}
	}
	{
		if s.RecordsManagementDisposalLocation.Set {
			e.FieldStart("recordsManagementDisposalLocation")
			s.RecordsManagementDisposalLocation.Encode(e)
		}
	}
	{
		if s.RecordsManagementDisposalPlan.Set {
			e.FieldStart("recordsManagementDisposalPlan")
			s.RecordsManagementDisposalPlan.Encode(e)
		}
	}
	{
		if s.RecordsUnderLegalHold.Set {
			e.FieldStart("recordsUnderLegalHold")
			s.RecordsUnderLegalHold.Encode(e)
		}
	}
	{
		if s.SourceCodeOnDemand.Set {
			e.FieldStart("sourceCodeOnDemand")
			s.SourceCodeOnDemand.Encode(e)
		}
	}
	{
		if s.SystemCustomization.Set {
			e.FieldStart("systemCustomization")
			s.SystemCustomization.Encode(e)
		}
	}
	{
		if s.SystemDataLocation.Set {
			e.FieldStart("systemDataLocation")
			s.SystemDataLocation.Encode(e)
		}
	}
	{
		if s.SystemDataLocationNotes.Set {
			e.FieldStart("systemDataLocationNotes")
			s.SystemDataLocationNotes.Encode(e)
		}
	}
	{
		if s.SystemDesignOnDemand.Set {
			e.FieldStart("systemDesignOnDemand")
			s.SystemDesignOnDemand.Encode(e)
		}
	}
	{
		if s.SystemProductionDate.Set {
			e.FieldStart("systemProductionDate")
			s.SystemProductionDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.SystemRequirementsOnDemand.Set {
			e.FieldStart("systemRequirementsOnDemand")
			s.SystemRequirementsOnDemand.Encode(e)
		}
	}
	{
		if s.TestPlanOnDemand.Set {
			e.FieldStart("testPlanOnDemand")
			s.TestPlanOnDemand.Encode(e)
		}
	}
	{
		if s.TestReportsOnDemand.Set {
			e.FieldStart("testReportsOnDemand")
			s.TestReportsOnDemand.Encode(e)
		}
	}
	{
		if s.TestScriptsOnDemand.Set {
			e.FieldStart("testScriptsOnDemand")
			s.TestScriptsOnDemand.Encode(e)
		}
	}
	{
		if s.YearToRetireReplace.Set {
			e.FieldStart("yearToRetireReplace")
			s.YearToRetireReplace.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformation = [42]string{
	0:  "adHocAgileDeploymentFrequency",
	1:  "agileUsed",
	2:  "authoritativeDatasource",
	3:  "businessArtifactsOnDemand",
	4:  "dataAtRestEncryptionKeyManagement",
	5:  "deploymentFrequency",
	6:  "devCompletionPercent",
	7:  "devWorkDescription",
	8:  "ecapParticipation",
	9:  "frontendAccessType",
	10: "hardCodedIpAddress",
	11: "ip6EnabledAssetPercent",
	12: "ip6TransitionPlan",
	13: "ipEnabledAssetCount",
	14: "legalHoldCaseName",
	15: "locallyStoredUserInformation",
	16: "majorRefreshDate",
	17: "multifactorAuthenticationMethod",
	18: "multifactorAuthenticationMethodOther",
	19: "netAccessibility",
	20: "networkTrafficEncryptionKeyManagement",
	21: "noMajorRefresh",
	22: "noPersistentRecordsFlag",
	23: "noPlannedMajorRefresh",
	24: "omDocumentationOnDemand",
	25: "plansToRetireReplace",
	26: "quarterToRetireReplace",
	27: "recordsManagementBucket",
	28: "recordsManagementDisposalLocation",
	29: "recordsManagementDisposalPlan",
	30: "recordsUnderLegalHold",
	31: "sourceCodeOnDemand",
	32: "systemCustomization",
	33: "systemDataLocation",
	34: "systemDataLocationNotes",
	35: "systemDesignOnDemand",
	36: "systemProductionDate",
	37: "systemRequirementsOnDemand",
	38: "testPlanOnDemand",
	39: "testReportsOnDemand",
	40: "testScriptsOnDemand",
	41: "yearToRetireReplace",
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformation from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "adHocAgileDeploymentFrequency":
			if err := func() error {
				s.AdHocAgileDeploymentFrequency.Reset()
				if err := s.AdHocAgileDeploymentFrequency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adHocAgileDeploymentFrequency\"")
			}
		case "agileUsed":
			if err := func() error {
				s.AgileUsed.Reset()
				if err := s.AgileUsed.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"agileUsed\"")
			}
		case "authoritativeDatasource":
			if err := func() error {
				s.AuthoritativeDatasource.Reset()
				if err := s.AuthoritativeDatasource.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authoritativeDatasource\"")
			}
		case "businessArtifactsOnDemand":
			if err := func() error {
				s.BusinessArtifactsOnDemand.Reset()
				if err := s.BusinessArtifactsOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"businessArtifactsOnDemand\"")
			}
		case "dataAtRestEncryptionKeyManagement":
			if err := func() error {
				s.DataAtRestEncryptionKeyManagement.Reset()
				if err := s.DataAtRestEncryptionKeyManagement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dataAtRestEncryptionKeyManagement\"")
			}
		case "deploymentFrequency":
			if err := func() error {
				s.DeploymentFrequency.Reset()
				if err := s.DeploymentFrequency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deploymentFrequency\"")
			}
		case "devCompletionPercent":
			if err := func() error {
				s.DevCompletionPercent.Reset()
				if err := s.DevCompletionPercent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"devCompletionPercent\"")
			}
		case "devWorkDescription":
			if err := func() error {
				s.DevWorkDescription.Reset()
				if err := s.DevWorkDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"devWorkDescription\"")
			}
		case "ecapParticipation":
			if err := func() error {
				s.EcapParticipation.Reset()
				if err := s.EcapParticipation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ecapParticipation\"")
			}
		case "frontendAccessType":
			if err := func() error {
				s.FrontendAccessType.Reset()
				if err := s.FrontendAccessType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"frontendAccessType\"")
			}
		case "hardCodedIpAddress":
			if err := func() error {
				s.HardCodedIpAddress.Reset()
				if err := s.HardCodedIpAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hardCodedIpAddress\"")
			}
		case "ip6EnabledAssetPercent":
			if err := func() error {
				s.Ip6EnabledAssetPercent.Reset()
				if err := s.Ip6EnabledAssetPercent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip6EnabledAssetPercent\"")
			}
		case "ip6TransitionPlan":
			if err := func() error {
				s.Ip6TransitionPlan.Reset()
				if err := s.Ip6TransitionPlan.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip6TransitionPlan\"")
			}
		case "ipEnabledAssetCount":
			if err := func() error {
				s.IpEnabledAssetCount.Reset()
				if err := s.IpEnabledAssetCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ipEnabledAssetCount\"")
			}
		case "legalHoldCaseName":
			if err := func() error {
				s.LegalHoldCaseName.Reset()
				if err := s.LegalHoldCaseName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"legalHoldCaseName\"")
			}
		case "locallyStoredUserInformation":
			if err := func() error {
				s.LocallyStoredUserInformation.Reset()
				if err := s.LocallyStoredUserInformation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locallyStoredUserInformation\"")
			}
		case "majorRefreshDate":
			if err := func() error {
				s.MajorRefreshDate.Reset()
				if err := s.MajorRefreshDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"majorRefreshDate\"")
			}
		case "multifactorAuthenticationMethod":
			if err := func() error {
				s.MultifactorAuthenticationMethod.Reset()
				if err := s.MultifactorAuthenticationMethod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"multifactorAuthenticationMethod\"")
			}
		case "multifactorAuthenticationMethodOther":
			if err := func() error {
				s.MultifactorAuthenticationMethodOther.Reset()
				if err := s.MultifactorAuthenticationMethodOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"multifactorAuthenticationMethodOther\"")
			}
		case "netAccessibility":
			if err := func() error {
				s.NetAccessibility.Reset()
				if err := s.NetAccessibility.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"netAccessibility\"")
			}
		case "networkTrafficEncryptionKeyManagement":
			if err := func() error {
				s.NetworkTrafficEncryptionKeyManagement.Reset()
				if err := s.NetworkTrafficEncryptionKeyManagement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"networkTrafficEncryptionKeyManagement\"")
			}
		case "noMajorRefresh":
			if err := func() error {
				s.NoMajorRefresh.Reset()
				if err := s.NoMajorRefresh.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"noMajorRefresh\"")
			}
		case "noPersistentRecordsFlag":
			if err := func() error {
				s.NoPersistentRecordsFlag.Reset()
				if err := s.NoPersistentRecordsFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"noPersistentRecordsFlag\"")
			}
		case "noPlannedMajorRefresh":
			if err := func() error {
				s.NoPlannedMajorRefresh.Reset()
				if err := s.NoPlannedMajorRefresh.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"noPlannedMajorRefresh\"")
			}
		case "omDocumentationOnDemand":
			if err := func() error {
				s.OmDocumentationOnDemand.Reset()
				if err := s.OmDocumentationOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"omDocumentationOnDemand\"")
			}
		case "plansToRetireReplace":
			if err := func() error {
				s.PlansToRetireReplace.Reset()
				if err := s.PlansToRetireReplace.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plansToRetireReplace\"")
			}
		case "quarterToRetireReplace":
			if err := func() error {
				s.QuarterToRetireReplace.Reset()
				if err := s.QuarterToRetireReplace.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"quarterToRetireReplace\"")
			}
		case "recordsManagementBucket":
			if err := func() error {
				s.RecordsManagementBucket.Reset()
				if err := s.RecordsManagementBucket.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recordsManagementBucket\"")
			}
		case "recordsManagementDisposalLocation":
			if err := func() error {
				s.RecordsManagementDisposalLocation.Reset()
				if err := s.RecordsManagementDisposalLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recordsManagementDisposalLocation\"")
			}
		case "recordsManagementDisposalPlan":
			if err := func() error {
				s.RecordsManagementDisposalPlan.Reset()
				if err := s.RecordsManagementDisposalPlan.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recordsManagementDisposalPlan\"")
			}
		case "recordsUnderLegalHold":
			if err := func() error {
				s.RecordsUnderLegalHold.Reset()
				if err := s.RecordsUnderLegalHold.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recordsUnderLegalHold\"")
			}
		case "sourceCodeOnDemand":
			if err := func() error {
				s.SourceCodeOnDemand.Reset()
				if err := s.SourceCodeOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sourceCodeOnDemand\"")
			}
		case "systemCustomization":
			if err := func() error {
				s.SystemCustomization.Reset()
				if err := s.SystemCustomization.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemCustomization\"")
			}
		case "systemDataLocation":
			if err := func() error {
				s.SystemDataLocation.Reset()
				if err := s.SystemDataLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemDataLocation\"")
			}
		case "systemDataLocationNotes":
			if err := func() error {
				s.SystemDataLocationNotes.Reset()
				if err := s.SystemDataLocationNotes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemDataLocationNotes\"")
			}
		case "systemDesignOnDemand":
			if err := func() error {
				s.SystemDesignOnDemand.Reset()
				if err := s.SystemDesignOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemDesignOnDemand\"")
			}
		case "systemProductionDate":
			if err := func() error {
				s.SystemProductionDate.Reset()
				if err := s.SystemProductionDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemProductionDate\"")
			}
		case "systemRequirementsOnDemand":
			if err := func() error {
				s.SystemRequirementsOnDemand.Reset()
				if err := s.SystemRequirementsOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemRequirementsOnDemand\"")
			}
		case "testPlanOnDemand":
			if err := func() error {
				s.TestPlanOnDemand.Reset()
				if err := s.TestPlanOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testPlanOnDemand\"")
			}
		case "testReportsOnDemand":
			if err := func() error {
				s.TestReportsOnDemand.Reset()
				if err := s.TestReportsOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testReportsOnDemand\"")
			}
		case "testScriptsOnDemand":
			if err := func() error {
				s.TestScriptsOnDemand.Reset()
				if err := s.TestScriptsOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testScriptsOnDemand\"")
			}
		case "yearToRetireReplace":
			if err := func() error {
				s.YearToRetireReplace.Reset()
				if err := s.YearToRetireReplace.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"yearToRetireReplace\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequency as json.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequency) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequency from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequency) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequency to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequency(v) {
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencyAnnually:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencyAnnually
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencySemiAnnually:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencySemiAnnually
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencyQuarterly:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencyQuarterly
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencyMonthly:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencyMonthly
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencyEveryTwoWeeks:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencyEveryTwoWeeks
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencyWeekly:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencyWeekly
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencyTwiceAWeek:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencyTwiceAWeek
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencyDaily:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencyDaily
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencyHourly:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencyHourly
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencyAdHocAsNeeded:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencyAdHocAsNeeded
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencyNotApplicable:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencyNotApplicable
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencyOther:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequencyOther
	default:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequency(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequency) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequency) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagement as json.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagement) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagement from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagement) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagement to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagement(v) {
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagementWeDoNotEncryptDataAtRest:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagementWeDoNotEncryptDataAtRest
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagementWePerformAdHocManagementOfEncryptionKeys:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagementWePerformAdHocManagementOfEncryptionKeys
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagementWeHaveAProcessForManagingEncryptionKeys:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagementWeHaveAProcessForManagingEncryptionKeys
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagementWeHaveAProcessForManagingEncryptionKeysAndItIsAutomated:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagementWeHaveAProcessForManagingEncryptionKeysAndItIsAutomated
	default:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagement(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequency as json.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequency) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequency from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequency) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequency to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequency(v) {
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencyAnnually:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencyAnnually
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencySemiAnnually:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencySemiAnnually
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencyQuarterly:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencyQuarterly
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencyMonthly:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencyMonthly
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencyEveryTwoWeeks:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencyEveryTwoWeeks
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencyWeekly:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencyWeekly
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencyTwiceAWeek:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencyTwiceAWeek
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencyDaily:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencyDaily
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencyHourly:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencyHourly
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencyAdHocAsNeeded:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencyAdHocAsNeeded
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencyNotApplicable:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencyNotApplicable
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencyOther:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequencyOther
	default:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequency(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequency) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequency) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessType as json.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessType from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessType(v) {
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessTypeIPv4Only:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessTypeIPv4Only
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessTypeIPv4AndIPv6:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessTypeIPv4AndIPv6
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessTypeIPv6Only:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessTypeIPv6Only
	default:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercent as json.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercent) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercent from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercent to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercent(v) {
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercentLessThan20:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercentLessThan20
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercentBetween20And49:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercentBetween20And49
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercentBetween50And79:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercentBetween50And79
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercent80OrAbove:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercent80OrAbove
	default:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercent(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlan as json.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlan) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlan from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlan) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlan to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlan(v) {
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlanYes:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlanYes
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlanTransitionToIPv6:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlanTransitionToIPv6
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlanNo:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlanNo
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlanDecommissionReplaceBefore2026:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlanDecommissionReplaceBefore2026
	default:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlan(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlan) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlan) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItem as json.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItem) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItem from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItem to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItem(v) {
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItemOneTimePasswordSentViaEmail:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItemOneTimePasswordSentViaEmail
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItemOneTimePasswordSentViaSMS:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItemOneTimePasswordSentViaSMS
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItemOneTimePasswordOrPushFromAnAuthenticatorAppEGGoogleAuthenticatorDUO:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItemOneTimePasswordOrPushFromAnAuthenticatorAppEGGoogleAuthenticatorDUO
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItemOneTimePasswordFromAHardwareTokenEGRSASecurID:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItemOneTimePasswordFromAHardwareTokenEGRSASecurID
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItemFIDOU2FEGYubiKeyAsASecondFactor:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItemFIDOU2FEGYubiKeyAsASecondFactor
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItemPIVCertificate:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItemPIVCertificate
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItemFIDO2WebAuthnPasswordlessAuthenticationIncludesWindowsHello:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItemFIDO2WebAuthnPasswordlessAuthenticationIncludesWindowsHello
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItemNone:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItemNone
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItemOther:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItemOther
	default:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItem(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibility as json.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibility) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibility from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibility) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibility to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibility(v) {
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibilityAccessibleToThePublicInternetNonRestrictedAccess:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibilityAccessibleToThePublicInternetNonRestrictedAccess
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibilityAccessibleToACMSInternalNetworkOnly:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibilityAccessibleToACMSInternalNetworkOnly
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibilityAccessibleToBothPublicInternetAndToCMSInternalNetwork:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibilityAccessibleToBothPublicInternetAndToCMSInternalNetwork
	default:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibility(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibility) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibility) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagement as json.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagement) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagement from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagement) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagement to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagement(v) {
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagementWeDoNotEncryptAnyNetworkTraffic:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagementWeDoNotEncryptAnyNetworkTraffic
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagementWePerformAdHocManagementOfEncryptionKeys:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagementWePerformAdHocManagementOfEncryptionKeys
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagementWeHaveAProcessForManagingEncryptionKeys:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagementWeHaveAProcessForManagingEncryptionKeys
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagementWeHaveAProcessForManagingEncryptionKeysAndItIsAutomated:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagementWeHaveAProcessForManagingEncryptionKeysAndItIsAutomated
	default:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagement(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplace as json.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplace) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplace from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplace) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplace to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplace(v) {
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplaceNo:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplaceNo
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplaceYesRetireAndReplace:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplaceYesRetireAndReplace
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplaceYesRetireButNOTReplace:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplaceYesRetireButNOTReplace
	default:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplace(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplace) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplace) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomization as json.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomization) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomization from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomization) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomization to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomization(v) {
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomizationCOTSLessThan20CustomCoding:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomizationCOTSLessThan20CustomCoding
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomizationGOTSLessThan20CustomCoding:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomizationGOTSLessThan20CustomCoding
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomizationMixedUsesCOTSOrGOTSAndHasMoreThan20CustomCoding:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomizationMixedUsesCOTSOrGOTSAndHasMoreThan20CustomCoding
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomizationCustomDeveloped:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomizationCustomDeveloped
	default:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomization(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomization) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomization) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItem as json.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItem) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItem from json.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItem to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItem(v) {
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItemIntegratedDataRepositoryIDR:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItemIntegratedDataRepositoryIDR
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItemChronicConditionWarehouseCCW:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItemChronicConditionWarehouseCCW
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItemThisSystem:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItemThisSystem
	case GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItemAnotherCMSSystemDescribeInNotes:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItemAnotherCMSSystemDescribeInNotes
	default:
		*s = GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItem(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200SystemSummaryGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200SystemSummaryGetOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("SystemSummary")
		e.ArrStart()
		for _, elem := range s.SystemSummary {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("count")
		e.Int(s.Count)
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200SystemSummaryGetOK = [2]string{
	0: "SystemSummary",
	1: "count",
}

// Decode decodes GatewayCEDAR20Core20API200SystemSummaryGetOK from json.
func (s *GatewayCEDAR20Core20API200SystemSummaryGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemSummaryGetOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "SystemSummary":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				s.SystemSummary = make([]GatewayCEDAR20Core20API200SystemSummaryGetOKSystemSummaryItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200SystemSummaryGetOKSystemSummaryItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SystemSummary = append(s.SystemSummary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SystemSummary\"")
			}
		case "count":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Int()
				s.Count = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200SystemSummaryGetOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200SystemSummaryGetOK) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200SystemSummaryGetOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200SystemSummaryGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemSummaryGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200SystemSummaryGetOKSystemSummaryItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200SystemSummaryGetOKSystemSummaryItem) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("id")
		s.ID.Encode(e)
	}
	{
		e.FieldStart("name")
		s.Name.Encode(e)
	}
	{
		if s.State.Set {
			e.FieldStart("state")
			s.State.Encode(e)
		}
	}
	{
		if s.BusinessOwnerOrgComp.Set {
			e.FieldStart("businessOwnerOrgComp")
			s.BusinessOwnerOrgComp.Encode(e)
		}
	}
	{
		if s.SystemMaintainerOrgComp.Set {
			e.FieldStart("systemMaintainerOrgComp")
			s.SystemMaintainerOrgComp.Encode(e)
		}
	}
	{
		if s.AtoEffectiveDate.Set {
			e.FieldStart("atoEffectiveDate")
			s.AtoEffectiveDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.AtoExpirationDate.Set {
			e.FieldStart("atoExpirationDate")
			s.AtoExpirationDate.Encode(e, json.EncodeDate)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200SystemSummaryGetOKSystemSummaryItem = [7]string{
	0: "id",
	1: "name",
	2: "state",
	3: "businessOwnerOrgComp",
	4: "systemMaintainerOrgComp",
	5: "atoEffectiveDate",
	6: "atoExpirationDate",
}

// Decode decodes GatewayCEDAR20Core20API200SystemSummaryGetOKSystemSummaryItem from json.
func (s *GatewayCEDAR20Core20API200SystemSummaryGetOKSystemSummaryItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemSummaryGetOKSystemSummaryItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "state":
			if err := func() error {
				s.State.Reset()
				if err := s.State.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state\"")
			}
		case "businessOwnerOrgComp":
			if err := func() error {
				s.BusinessOwnerOrgComp.Reset()
				if err := s.BusinessOwnerOrgComp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"businessOwnerOrgComp\"")
			}
		case "systemMaintainerOrgComp":
			if err := func() error {
				s.SystemMaintainerOrgComp.Reset()
				if err := s.SystemMaintainerOrgComp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemMaintainerOrgComp\"")
			}
		case "atoEffectiveDate":
			if err := func() error {
				s.AtoEffectiveDate.Reset()
				if err := s.AtoEffectiveDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"atoEffectiveDate\"")
			}
		case "atoExpirationDate":
			if err := func() error {
				s.AtoExpirationDate.Reset()
				if err := s.AtoExpirationDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"atoExpirationDate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200SystemSummaryGetOKSystemSummaryItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200SystemSummaryGetOKSystemSummaryItem) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200SystemSummaryGetOKSystemSummaryItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200SystemSummaryGetOKSystemSummaryItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemSummaryGetOKSystemSummaryItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200SystemSummaryIDGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200SystemSummaryIDGetOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("SystemSummary")
		e.ArrStart()
		for _, elem := range s.SystemSummary {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("count")
		e.Int(s.Count)
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200SystemSummaryIDGetOK = [2]string{
	0: "SystemSummary",
	1: "count",
}

// Decode decodes GatewayCEDAR20Core20API200SystemSummaryIDGetOK from json.
func (s *GatewayCEDAR20Core20API200SystemSummaryIDGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemSummaryIDGetOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "SystemSummary":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				s.SystemSummary = make([]GatewayCEDAR20Core20API200SystemSummaryIDGetOKSystemSummaryItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200SystemSummaryIDGetOKSystemSummaryItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SystemSummary = append(s.SystemSummary, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SystemSummary\"")
			}
		case "count":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Int()
				s.Count = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200SystemSummaryIDGetOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200SystemSummaryIDGetOK) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200SystemSummaryIDGetOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200SystemSummaryIDGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemSummaryIDGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200SystemSummaryIDGetOKSystemSummaryItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200SystemSummaryIDGetOKSystemSummaryItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.NextVersionId.Set {
			e.FieldStart("nextVersionId")
			s.NextVersionId.Encode(e)
		}
	}
	{
		if s.PreviousVersionId.Set {
			e.FieldStart("previousVersionId")
			s.PreviousVersionId.Encode(e)
		}
	}
	{
		if s.Acronym.Set {
			e.FieldStart("acronym")
			s.Acronym.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200SystemSummaryIDGetOKSystemSummaryItem = [4]string{
	0: "id",
	1: "nextVersionId",
	2: "previousVersionId",
	3: "acronym",
}

// Decode decodes GatewayCEDAR20Core20API200SystemSummaryIDGetOKSystemSummaryItem from json.
func (s *GatewayCEDAR20Core20API200SystemSummaryIDGetOKSystemSummaryItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200SystemSummaryIDGetOKSystemSummaryItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "nextVersionId":
			if err := func() error {
				s.NextVersionId.Reset()
				if err := s.NextVersionId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nextVersionId\"")
			}
		case "previousVersionId":
			if err := func() error {
				s.PreviousVersionId.Reset()
				if err := s.PreviousVersionId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"previousVersionId\"")
			}
		case "acronym":
			if err := func() error {
				s.Acronym.Reset()
				if err := s.Acronym.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"acronym\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200SystemSummaryIDGetOKSystemSummaryItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200SystemSummaryIDGetOKSystemSummaryItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200SystemSummaryIDGetOKSystemSummaryItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200ThreatGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200ThreatGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Threats.Set {
			e.FieldStart("Threats")
			s.Threats.Encode(e)
		}
	}
	{
		e.FieldStart("count")
		e.Int32(s.Count)
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200ThreatGetOK = [2]string{
	0: "Threats",
	1: "count",
}

// Decode decodes GatewayCEDAR20Core20API200ThreatGetOK from json.
func (s *GatewayCEDAR20Core20API200ThreatGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ThreatGetOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "Threats":
			if err := func() error {
				s.Threats.Reset()
				if err := s.Threats.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Threats\"")
			}
		case "count":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Int32()
				s.Count = int32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200ThreatGetOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000010,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200ThreatGetOK) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200ThreatGetOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200ThreatGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ThreatGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200ThreatGetOKThreatsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200ThreatGetOKThreatsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ParentId.Set {
			e.FieldStart("parentId")
			s.ParentId.Encode(e)
		}
	}
	{
		if s.AlternativeId.Set {
			e.FieldStart("alternativeId")
			s.AlternativeId.Encode(e)
		}
	}
	{
		if s.ControlFamily.Set {
			e.FieldStart("controlFamily")
			s.ControlFamily.Encode(e)
		}
	}
	{
		e.FieldStart("daysOpen")
		e.Int32(s.DaysOpen)
	}
	{
		if s.WeaknessRiskLevel.Set {
			e.FieldStart("weaknessRiskLevel")
			s.WeaknessRiskLevel.Encode(e)
		}
	}
	{
		e.FieldStart("type")
		e.Str(s.Type)
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200ThreatGetOKThreatsItem = [7]string{
	0: "id",
	1: "parentId",
	2: "alternativeId",
	3: "controlFamily",
	4: "daysOpen",
	5: "weaknessRiskLevel",
	6: "type",
}

// Decode decodes GatewayCEDAR20Core20API200ThreatGetOKThreatsItem from json.
func (s *GatewayCEDAR20Core20API200ThreatGetOKThreatsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200ThreatGetOKThreatsItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "parentId":
			if err := func() error {
				s.ParentId.Reset()
				if err := s.ParentId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"parentId\"")
			}
		case "alternativeId":
			if err := func() error {
				s.AlternativeId.Reset()
				if err := s.AlternativeId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alternativeId\"")
			}
		case "controlFamily":
			if err := func() error {
				s.ControlFamily.Reset()
				if err := s.ControlFamily.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"controlFamily\"")
			}
		case "daysOpen":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Int32()
				s.DaysOpen = int32(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"daysOpen\"")
			}
		case "weaknessRiskLevel":
			if err := func() error {
				s.WeaknessRiskLevel.Reset()
				if err := s.WeaknessRiskLevel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"weaknessRiskLevel\"")
			}
		case "type":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				v, err := d.Str()
				s.Type = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200ThreatGetOKThreatsItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b01010000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200ThreatGetOKThreatsItem) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200ThreatGetOKThreatsItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200ThreatGetOKThreatsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200ThreatGetOKThreatsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200URLIDGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200URLIDGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.UrlList.Set {
			e.FieldStart("UrlList")
			s.UrlList.Encode(e)
		}
	}
	{
		e.FieldStart("count")
		e.Int(s.Count)
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200URLIDGetOK = [2]string{
	0: "UrlList",
	1: "count",
}

// Decode decodes GatewayCEDAR20Core20API200URLIDGetOK from json.
func (s *GatewayCEDAR20Core20API200URLIDGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200URLIDGetOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "UrlList":
			if err := func() error {
				s.UrlList.Reset()
				if err := s.UrlList.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"UrlList\"")
			}
		case "count":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Int()
				s.Count = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200URLIDGetOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000010,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200URLIDGetOK) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200URLIDGetOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200URLIDGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200URLIDGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200URLIDGetOKUrlListItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200URLIDGetOKUrlListItem) encodeFields(e *jx.Encoder) {
	{
		if s.Address.Set {
			e.FieldStart("address")
			s.Address.Encode(e)
		}
	}
	{
		if s.IsApiEndpoint.Set {
			e.FieldStart("isApiEndpoint")
			s.IsApiEndpoint.Encode(e)
		}
	}
	{
		if s.IsBehindWebApplicationFirewall.Set {
			e.FieldStart("isBehindWebApplicationFirewall")
			s.IsBehindWebApplicationFirewall.Encode(e)
		}
	}
	{
		if s.IsVersionCodeRepository.Set {
			e.FieldStart("isVersionCodeRepository")
			s.IsVersionCodeRepository.Encode(e)
		}
	}
	{
		if s.UrlHostingEnv.Set {
			e.FieldStart("urlHostingEnv")
			s.UrlHostingEnv.Encode(e)
		}
	}
	{
		if s.UrlId.Set {
			e.FieldStart("urlId")
			s.UrlId.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200URLIDGetOKUrlListItem = [6]string{
	0: "address",
	1: "isApiEndpoint",
	2: "isBehindWebApplicationFirewall",
	3: "isVersionCodeRepository",
	4: "urlHostingEnv",
	5: "urlId",
}

// Decode decodes GatewayCEDAR20Core20API200URLIDGetOKUrlListItem from json.
func (s *GatewayCEDAR20Core20API200URLIDGetOKUrlListItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200URLIDGetOKUrlListItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "address":
			if err := func() error {
				s.Address.Reset()
				if err := s.Address.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address\"")
			}
		case "isApiEndpoint":
			if err := func() error {
				s.IsApiEndpoint.Reset()
				if err := s.IsApiEndpoint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isApiEndpoint\"")
			}
		case "isBehindWebApplicationFirewall":
			if err := func() error {
				s.IsBehindWebApplicationFirewall.Reset()
				if err := s.IsBehindWebApplicationFirewall.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isBehindWebApplicationFirewall\"")
			}
		case "isVersionCodeRepository":
			if err := func() error {
				s.IsVersionCodeRepository.Reset()
				if err := s.IsVersionCodeRepository.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isVersionCodeRepository\"")
			}
		case "urlHostingEnv":
			if err := func() error {
				s.UrlHostingEnv.Reset()
				if err := s.UrlHostingEnv.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"urlHostingEnv\"")
			}
		case "urlId":
			if err := func() error {
				s.UrlId.Reset()
				if err := s.UrlId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"urlId\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200URLIDGetOKUrlListItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200URLIDGetOKUrlListItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200URLIDGetOKUrlListItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200UserGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200UserGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.Users != nil {
			e.FieldStart("Users")
			e.ArrStart()
			for _, elem := range s.Users {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200UserGetOK = [2]string{
	0: "count",
	1: "Users",
}

// Decode decodes GatewayCEDAR20Core20API200UserGetOK from json.
func (s *GatewayCEDAR20Core20API200UserGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200UserGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "Users":
			if err := func() error {
				s.Users = make([]GatewayCEDAR20Core20API200UserGetOKUsersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200UserGetOKUsersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Users = append(s.Users, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Users\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200UserGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200UserGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200UserGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200UserGetOKUsersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200UserGetOKUsersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Application.Set {
			e.FieldStart("application")
			s.Application.Encode(e)
		}
	}
	{
		if s.UserName.Set {
			e.FieldStart("userName")
			s.UserName.Encode(e)
		}
	}
	{
		if s.FirstName.Set {
			e.FieldStart("firstName")
			s.FirstName.Encode(e)
		}
	}
	{
		if s.LastName.Set {
			e.FieldStart("lastName")
			s.LastName.Encode(e)
		}
	}
	{
		if s.Phone.Set {
			e.FieldStart("phone")
			s.Phone.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200UserGetOKUsersItem = [7]string{
	0: "id",
	1: "application",
	2: "userName",
	3: "firstName",
	4: "lastName",
	5: "phone",
	6: "email",
}

// Decode decodes GatewayCEDAR20Core20API200UserGetOKUsersItem from json.
func (s *GatewayCEDAR20Core20API200UserGetOKUsersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200UserGetOKUsersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "application":
			if err := func() error {
				s.Application.Reset()
				if err := s.Application.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"application\"")
			}
		case "userName":
			if err := func() error {
				s.UserName.Reset()
				if err := s.UserName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"userName\"")
			}
		case "firstName":
			if err := func() error {
				s.FirstName.Reset()
				if err := s.FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"firstName\"")
			}
		case "lastName":
			if err := func() error {
				s.LastName.Reset()
				if err := s.LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lastName\"")
			}
		case "phone":
			if err := func() error {
				s.Phone.Reset()
				if err := s.Phone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200UserGetOKUsersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200UserGetOKUsersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200UserGetOKUsersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200UserPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200UserPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200UserPostOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewayCEDAR20Core20API200UserPostOK from json.
func (s *GatewayCEDAR20Core20API200UserPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200UserPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200UserPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200UserPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200UserPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200UserPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200UserPostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("application")
		s.Application.Encode(e)
	}
	{
		e.FieldStart("Users")
		e.ArrStart()
		for _, elem := range s.Users {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200UserPostReq = [2]string{
	0: "application",
	1: "Users",
}

// Decode decodes GatewayCEDAR20Core20API200UserPostReq from json.
func (s *GatewayCEDAR20Core20API200UserPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200UserPostReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "application":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.Application.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"application\"")
			}
		case "Users":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.Users = make([]GatewayCEDAR20Core20API200UserPostReqUsersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20API200UserPostReqUsersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Users = append(s.Users, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Users\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200UserPostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200UserPostReq) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200UserPostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200UserPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200UserPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200UserPostReqApplication as json.
func (s GatewayCEDAR20Core20API200UserPostReqApplication) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDAR20Core20API200UserPostReqApplication from json.
func (s *GatewayCEDAR20Core20API200UserPostReqApplication) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200UserPostReqApplication to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDAR20Core20API200UserPostReqApplication(v) {
	case GatewayCEDAR20Core20API200UserPostReqApplicationAlfabet:
		*s = GatewayCEDAR20Core20API200UserPostReqApplicationAlfabet
	case GatewayCEDAR20Core20API200UserPostReqApplicationAll:
		*s = GatewayCEDAR20Core20API200UserPostReqApplicationAll
	default:
		*s = GatewayCEDAR20Core20API200UserPostReqApplication(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDAR20Core20API200UserPostReqApplication) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200UserPostReqApplication) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20API200UserPostReqUsersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20API200UserPostReqUsersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		e.FieldStart("userName")
		e.Str(s.UserName)
	}
	{
		if s.FirstName.Set {
			e.FieldStart("firstName")
			s.FirstName.Encode(e)
		}
	}
	{
		if s.LastName.Set {
			e.FieldStart("lastName")
			s.LastName.Encode(e)
		}
	}
	{
		if s.Phone.Set {
			e.FieldStart("phone")
			s.Phone.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.IsDeleted.Set {
			e.FieldStart("isDeleted")
			s.IsDeleted.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20API200UserPostReqUsersItem = [7]string{
	0: "id",
	1: "userName",
	2: "firstName",
	3: "lastName",
	4: "phone",
	5: "email",
	6: "isDeleted",
}

// Decode decodes GatewayCEDAR20Core20API200UserPostReqUsersItem from json.
func (s *GatewayCEDAR20Core20API200UserPostReqUsersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20API200UserPostReqUsersItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "userName":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.UserName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"userName\"")
			}
		case "firstName":
			if err := func() error {
				s.FirstName.Reset()
				if err := s.FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"firstName\"")
			}
		case "lastName":
			if err := func() error {
				s.LastName.Reset()
				if err := s.LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lastName\"")
			}
		case "phone":
			if err := func() error {
				s.Phone.Reset()
				if err := s.Phone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "isDeleted":
			if err := func() error {
				s.IsDeleted.Reset()
				if err := s.IsDeleted.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isDeleted\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20API200UserPostReqUsersItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000010,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20API200UserPostReqUsersItem) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20API200UserPostReqUsersItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20API200UserPostReqUsersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20API200UserPostReqUsersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20APIExchangePostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20APIExchangePostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20APIExchangePostOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewayCEDAR20Core20APIExchangePostOK from json.
func (s *GatewayCEDAR20Core20APIExchangePostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20APIExchangePostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20APIExchangePostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20APIExchangePostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20APIExchangePostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20APIExchangePostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20APIExchangePostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("Exchanges")
		e.ArrStart()
		for _, elem := range s.Exchanges {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20APIExchangePostReq = [1]string{
	0: "Exchanges",
}

// Decode decodes GatewayCEDAR20Core20APIExchangePostReq from json.
func (s *GatewayCEDAR20Core20APIExchangePostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20APIExchangePostReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "Exchanges":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				s.Exchanges = make([]GatewayCEDAR20Core20APIExchangePostReqExchangesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDAR20Core20APIExchangePostReqExchangesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Exchanges = append(s.Exchanges, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Exchanges\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20APIExchangePostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20APIExchangePostReq) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20APIExchangePostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20APIExchangePostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20APIExchangePostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20APIExchangePostReqExchangesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20APIExchangePostReqExchangesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ExchangeId.Set {
			e.FieldStart("exchangeId")
			s.ExchangeId.Encode(e)
		}
	}
	{
		e.FieldStart("exchangeName")
		e.Str(s.ExchangeName)
	}
	{
		if s.ExchangeDescription.Set {
			e.FieldStart("exchangeDescription")
			s.ExchangeDescription.Encode(e)
		}
	}
	{
		if s.ExchangeVersion.Set {
			e.FieldStart("exchangeVersion")
			s.ExchangeVersion.Encode(e)
		}
	}
	{
		if s.ExchangeState.Set {
			e.FieldStart("exchangeState")
			s.ExchangeState.Encode(e)
		}
	}
	{
		if s.ExchangeStartDate.Set {
			e.FieldStart("exchangeStartDate")
			s.ExchangeStartDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.ExchangeEndDate.Set {
			e.FieldStart("exchangeEndDate")
			s.ExchangeEndDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.ExchangeRetiredDate.Set {
			e.FieldStart("exchangeRetiredDate")
			s.ExchangeRetiredDate.Encode(e, json.EncodeDate)
		}
	}
	{
		e.FieldStart("fromOwnerId")
		e.Str(s.FromOwnerId)
	}
	{
		if s.FromOwnerName.Set {
			e.FieldStart("fromOwnerName")
			s.FromOwnerName.Encode(e)
		}
	}
	{
		if s.FromOwnerType.Set {
			e.FieldStart("fromOwnerType")
			s.FromOwnerType.Encode(e)
		}
	}
	{
		e.FieldStart("toOwnerId")
		e.Str(s.ToOwnerId)
	}
	{
		if s.ToOwnerName.Set {
			e.FieldStart("toOwnerName")
			s.ToOwnerName.Encode(e)
		}
	}
	{
		if s.ToOwnerType.Set {
			e.FieldStart("toOwnerType")
			s.ToOwnerType.Encode(e)
		}
	}
	{
		if s.ConnectionFrequency.Set {
			e.FieldStart("connectionFrequency")
			s.ConnectionFrequency.Encode(e)
		}
	}
	{
		if s.DataExchangeAgreement.Set {
			e.FieldStart("dataExchangeAgreement")
			s.DataExchangeAgreement.Encode(e)
		}
	}
	{
		if s.ContainsBeneficiaryAddress.Set {
			e.FieldStart("containsBeneficiaryAddress")
			s.ContainsBeneficiaryAddress.Encode(e)
		}
	}
	{
		if s.BusinessPurposeOfAddress.Set {
			e.FieldStart("businessPurposeOfAddress")
			s.BusinessPurposeOfAddress.Encode(e)
		}
	}
	{
		if s.IsAddressEditable.Set {
			e.FieldStart("isAddressEditable")
			s.IsAddressEditable.Encode(e)
		}
	}
	{
		if s.ContainsPii.Set {
			e.FieldStart("containsPii")
			s.ContainsPii.Encode(e)
		}
	}
	{
		if s.ContainsPhi.Set {
			e.FieldStart("containsPhi")
			s.ContainsPhi.Encode(e)
		}
	}
	{
		if s.ContainsBankingData.Set {
			e.FieldStart("containsBankingData")
			s.ContainsBankingData.Encode(e)
		}
	}
	{
		if s.IsBeneficiaryMailingFile.Set {
			e.FieldStart("isBeneficiaryMailingFile")
			s.IsBeneficiaryMailingFile.Encode(e)
		}
	}
	{
		if s.SharedViaApi.Set {
			e.FieldStart("sharedViaApi")
			s.SharedViaApi.Encode(e)
		}
	}
	{
		if s.ApiOwnership.Set {
			e.FieldStart("apiOwnership")
			s.ApiOwnership.Encode(e)
		}
	}
	{
		if s.TypeOfData.Set {
			e.FieldStart("typeOfData")
			s.TypeOfData.Encode(e)
		}
	}
	{
		if s.NumOfRecords.Set {
			e.FieldStart("numOfRecords")
			s.NumOfRecords.Encode(e)
		}
	}
	{
		if s.DataFormat.Set {
			e.FieldStart("dataFormat")
			s.DataFormat.Encode(e)
		}
	}
	{
		if s.DataFormatOther.Set {
			e.FieldStart("dataFormatOther")
			s.DataFormatOther.Encode(e)
		}
	}
	{
		if s.ExchangeContainsCUI.Set {
			e.FieldStart("exchangeContainsCUI")
			s.ExchangeContainsCUI.Encode(e)
		}
	}
	{
		if s.ExchangeCUIDescription.Set {
			e.FieldStart("exchangeCUIDescription")
			s.ExchangeCUIDescription.Encode(e)
		}
	}
	{
		if s.ExchangeCUIType.Set {
			e.FieldStart("exchangeCUIType")
			s.ExchangeCUIType.Encode(e)
		}
	}
	{
		if s.ExchangeConnectionAuthenticated.Set {
			e.FieldStart("exchangeConnectionAuthenticated")
			s.ExchangeConnectionAuthenticated.Encode(e)
		}
	}
	{
		if s.ExchangeNetworkProtocol.Set {
			e.FieldStart("exchangeNetworkProtocol")
			s.ExchangeNetworkProtocol.Encode(e)
		}
	}
	{
		if s.ExchangeNetworkProtocolOther.Set {
			e.FieldStart("exchangeNetworkProtocolOther")
			s.ExchangeNetworkProtocolOther.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20APIExchangePostReqExchangesItem = [35]string{
	0:  "exchangeId",
	1:  "exchangeName",
	2:  "exchangeDescription",
	3:  "exchangeVersion",
	4:  "exchangeState",
	5:  "exchangeStartDate",
	6:  "exchangeEndDate",
	7:  "exchangeRetiredDate",
	8:  "fromOwnerId",
	9:  "fromOwnerName",
	10: "fromOwnerType",
	11: "toOwnerId",
	12: "toOwnerName",
	13: "toOwnerType",
	14: "connectionFrequency",
	15: "dataExchangeAgreement",
	16: "containsBeneficiaryAddress",
	17: "businessPurposeOfAddress",
	18: "isAddressEditable",
	19: "containsPii",
	20: "containsPhi",
	21: "containsBankingData",
	22: "isBeneficiaryMailingFile",
	23: "sharedViaApi",
	24: "apiOwnership",
	25: "typeOfData",
	26: "numOfRecords",
	27: "dataFormat",
	28: "dataFormatOther",
	29: "exchangeContainsCUI",
	30: "exchangeCUIDescription",
	31: "exchangeCUIType",
	32: "exchangeConnectionAuthenticated",
	33: "exchangeNetworkProtocol",
	34: "exchangeNetworkProtocolOther",
}

// Decode decodes GatewayCEDAR20Core20APIExchangePostReqExchangesItem from json.
func (s *GatewayCEDAR20Core20APIExchangePostReqExchangesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20APIExchangePostReqExchangesItem to nil")
	}
	var requiredBitSet [5]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exchangeId":
			if err := func() error {
				s.ExchangeId.Reset()
				if err := s.ExchangeId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeId\"")
			}
		case "exchangeName":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.ExchangeName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeName\"")
			}
		case "exchangeDescription":
			if err := func() error {
				s.ExchangeDescription.Reset()
				if err := s.ExchangeDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeDescription\"")
			}
		case "exchangeVersion":
			if err := func() error {
				s.ExchangeVersion.Reset()
				if err := s.ExchangeVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeVersion\"")
			}
		case "exchangeState":
			if err := func() error {
				s.ExchangeState.Reset()
				if err := s.ExchangeState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeState\"")
			}
		case "exchangeStartDate":
			if err := func() error {
				s.ExchangeStartDate.Reset()
				if err := s.ExchangeStartDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeStartDate\"")
			}
		case "exchangeEndDate":
			if err := func() error {
				s.ExchangeEndDate.Reset()
				if err := s.ExchangeEndDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeEndDate\"")
			}
		case "exchangeRetiredDate":
			if err := func() error {
				s.ExchangeRetiredDate.Reset()
				if err := s.ExchangeRetiredDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeRetiredDate\"")
			}
		case "fromOwnerId":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.FromOwnerId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fromOwnerId\"")
			}
		case "fromOwnerName":
			if err := func() error {
				s.FromOwnerName.Reset()
				if err := s.FromOwnerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fromOwnerName\"")
			}
		case "fromOwnerType":
			if err := func() error {
				s.FromOwnerType.Reset()
				if err := s.FromOwnerType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fromOwnerType\"")
			}
		case "toOwnerId":
			requiredBitSet[1] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.ToOwnerId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toOwnerId\"")
			}
		case "toOwnerName":
			if err := func() error {
				s.ToOwnerName.Reset()
				if err := s.ToOwnerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toOwnerName\"")
			}
		case "toOwnerType":
			if err := func() error {
				s.ToOwnerType.Reset()
				if err := s.ToOwnerType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toOwnerType\"")
			}
		case "connectionFrequency":
			if err := func() error {
				s.ConnectionFrequency.Reset()
				if err := s.ConnectionFrequency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"connectionFrequency\"")
			}
		case "dataExchangeAgreement":
			if err := func() error {
				s.DataExchangeAgreement.Reset()
				if err := s.DataExchangeAgreement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dataExchangeAgreement\"")
			}
		case "containsBeneficiaryAddress":
			if err := func() error {
				s.ContainsBeneficiaryAddress.Reset()
				if err := s.ContainsBeneficiaryAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"containsBeneficiaryAddress\"")
			}
		case "businessPurposeOfAddress":
			if err := func() error {
				s.BusinessPurposeOfAddress.Reset()
				if err := s.BusinessPurposeOfAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"businessPurposeOfAddress\"")
			}
		case "isAddressEditable":
			if err := func() error {
				s.IsAddressEditable.Reset()
				if err := s.IsAddressEditable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isAddressEditable\"")
			}
		case "containsPii":
			if err := func() error {
				s.ContainsPii.Reset()
				if err := s.ContainsPii.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"containsPii\"")
			}
		case "containsPhi":
			if err := func() error {
				s.ContainsPhi.Reset()
				if err := s.ContainsPhi.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"containsPhi\"")
			}
		case "containsBankingData":
			if err := func() error {
				s.ContainsBankingData.Reset()
				if err := s.ContainsBankingData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"containsBankingData\"")
			}
		case "isBeneficiaryMailingFile":
			if err := func() error {
				s.IsBeneficiaryMailingFile.Reset()
				if err := s.IsBeneficiaryMailingFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isBeneficiaryMailingFile\"")
			}
		case "sharedViaApi":
			if err := func() error {
				s.SharedViaApi.Reset()
				if err := s.SharedViaApi.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sharedViaApi\"")
			}
		case "apiOwnership":
			if err := func() error {
				s.ApiOwnership.Reset()
				if err := s.ApiOwnership.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiOwnership\"")
			}
		case "typeOfData":
			if err := func() error {
				s.TypeOfData.Reset()
				if err := s.TypeOfData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"typeOfData\"")
			}
		case "numOfRecords":
			if err := func() error {
				s.NumOfRecords.Reset()
				if err := s.NumOfRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numOfRecords\"")
			}
		case "dataFormat":
			if err := func() error {
				s.DataFormat.Reset()
				if err := s.DataFormat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dataFormat\"")
			}
		case "dataFormatOther":
			if err := func() error {
				s.DataFormatOther.Reset()
				if err := s.DataFormatOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dataFormatOther\"")
			}
		case "exchangeContainsCUI":
			if err := func() error {
				s.ExchangeContainsCUI.Reset()
				if err := s.ExchangeContainsCUI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeContainsCUI\"")
			}
		case "exchangeCUIDescription":
			if err := func() error {
				s.ExchangeCUIDescription.Reset()
				if err := s.ExchangeCUIDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeCUIDescription\"")
			}
		case "exchangeCUIType":
			if err := func() error {
				s.ExchangeCUIType.Reset()
				if err := s.ExchangeCUIType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeCUIType\"")
			}
		case "exchangeConnectionAuthenticated":
			if err := func() error {
				s.ExchangeConnectionAuthenticated.Reset()
				if err := s.ExchangeConnectionAuthenticated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeConnectionAuthenticated\"")
			}
		case "exchangeNetworkProtocol":
			if err := func() error {
				s.ExchangeNetworkProtocol.Reset()
				if err := s.ExchangeNetworkProtocol.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeNetworkProtocol\"")
			}
		case "exchangeNetworkProtocolOther":
			if err := func() error {
				s.ExchangeNetworkProtocolOther.Reset()
				if err := s.ExchangeNetworkProtocolOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeNetworkProtocolOther\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20APIExchangePostReqExchangesItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [5]uint8{
		0b00000010,
		0b00001001,
		0b00000000,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDAR20Core20APIExchangePostReqExchangesItem) {
					name = jsonFieldsNameOfGatewayCEDAR20Core20APIExchangePostReqExchangesItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20APIExchangePostReqExchangesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20APIExchangePostReqExchangesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDAR20Core20APIExchangePostReqExchangesItemTypeOfDataItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDAR20Core20APIExchangePostReqExchangesItemTypeOfDataItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDAR20Core20APIExchangePostReqExchangesItemTypeOfDataItem = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GatewayCEDAR20Core20APIExchangePostReqExchangesItemTypeOfDataItem from json.
func (s *GatewayCEDAR20Core20APIExchangePostReqExchangesItemTypeOfDataItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDAR20Core20APIExchangePostReqExchangesItemTypeOfDataItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDAR20Core20APIExchangePostReqExchangesItemTypeOfDataItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDAR20Core20APIExchangePostReqExchangesItemTypeOfDataItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDAR20Core20APIExchangePostReqExchangesItemTypeOfDataItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDARIntake10ClientIDGetInternalServerError) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDARIntake10ClientIDGetInternalServerError) encodeFields(e *jx.Encoder) {
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDARIntake10ClientIDGetInternalServerError = [1]string{
	0: "error",
}

// Decode decodes GatewayCEDARIntake10ClientIDGetInternalServerError from json.
func (s *GatewayCEDARIntake10ClientIDGetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDARIntake10ClientIDGetInternalServerError to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDARIntake10ClientIDGetInternalServerError")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDARIntake10ClientIDGetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDARIntake10ClientIDGetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDARIntake10ClientIDGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDARIntake10ClientIDGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.CedarId.Set {
			e.FieldStart("cedarId")
			s.CedarId.Encode(e)
		}
	}
	{
		if s.ClientId.Set {
			e.FieldStart("clientId")
			s.ClientId.Encode(e)
		}
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.CedarStatus.Set {
			e.FieldStart("cedarStatus")
			s.CedarStatus.Encode(e)
		}
	}
	{
		if s.CedarStatusMessage.Set {
			e.FieldStart("cedarStatusMessage")
			s.CedarStatusMessage.Encode(e)
		}
	}
	{
		if s.ClientStatus.Set {
			e.FieldStart("clientStatus")
			s.ClientStatus.Encode(e)
		}
	}
	{
		if s.Schema.Set {
			e.FieldStart("schema")
			s.Schema.Encode(e)
		}
	}
	{
		if s.BodyFormat.Set {
			e.FieldStart("bodyFormat")
			s.BodyFormat.Encode(e)
		}
	}
	{
		if s.Body.Set {
			e.FieldStart("body")
			s.Body.Encode(e)
		}
	}
	{
		if s.ClientCreatedDate.Set {
			e.FieldStart("clientCreatedDate")
			s.ClientCreatedDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.ClientLastUpdatedDate.Set {
			e.FieldStart("clientLastUpdatedDate")
			s.ClientLastUpdatedDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.CedarCreatedDate.Set {
			e.FieldStart("cedarCreatedDate")
			s.CedarCreatedDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.CedarLastUpdatedDate.Set {
			e.FieldStart("cedarLastUpdatedDate")
			s.CedarLastUpdatedDate.Encode(e, json.EncodeDateTime)
		}
	}
}

var jsonFieldsNameOfGatewayCEDARIntake10ClientIDGetOK = [14]string{
	0:  "cedarId",
	1:  "clientId",
	2:  "version",
	3:  "type",
	4:  "cedarStatus",
	5:  "cedarStatusMessage",
	6:  "clientStatus",
	7:  "schema",
	8:  "bodyFormat",
	9:  "body",
	10: "clientCreatedDate",
	11: "clientLastUpdatedDate",
	12: "cedarCreatedDate",
	13: "cedarLastUpdatedDate",
}

// Decode decodes GatewayCEDARIntake10ClientIDGetOK from json.
func (s *GatewayCEDARIntake10ClientIDGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDARIntake10ClientIDGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cedarId":
			if err := func() error {
				s.CedarId.Reset()
				if err := s.CedarId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cedarId\"")
			}
		case "clientId":
			if err := func() error {
				s.ClientId.Reset()
				if err := s.ClientId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"clientId\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "cedarStatus":
			if err := func() error {
				s.CedarStatus.Reset()
				if err := s.CedarStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cedarStatus\"")
			}
		case "cedarStatusMessage":
			if err := func() error {
				s.CedarStatusMessage.Reset()
				if err := s.CedarStatusMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cedarStatusMessage\"")
			}
		case "clientStatus":
			if err := func() error {
				s.ClientStatus.Reset()
				if err := s.ClientStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"clientStatus\"")
			}
		case "schema":
			if err := func() error {
				s.Schema.Reset()
				if err := s.Schema.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schema\"")
			}
		case "bodyFormat":
			if err := func() error {
				s.BodyFormat.Reset()
				if err := s.BodyFormat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bodyFormat\"")
			}
		case "body":
			if err := func() error {
				s.Body.Reset()
				if err := s.Body.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"body\"")
			}
		case "clientCreatedDate":
			if err := func() error {
				s.ClientCreatedDate.Reset()
				if err := s.ClientCreatedDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"clientCreatedDate\"")
			}
		case "clientLastUpdatedDate":
			if err := func() error {
				s.ClientLastUpdatedDate.Reset()
				if err := s.ClientLastUpdatedDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"clientLastUpdatedDate\"")
			}
		case "cedarCreatedDate":
			if err := func() error {
				s.CedarCreatedDate.Reset()
				if err := s.CedarCreatedDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cedarCreatedDate\"")
			}
		case "cedarLastUpdatedDate":
			if err := func() error {
				s.CedarLastUpdatedDate.Reset()
				if err := s.CedarLastUpdatedDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cedarLastUpdatedDate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDARIntake10ClientIDGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDARIntake10ClientIDGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDARIntake10ClientIDGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDARIntake10HealthCheckGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDARIntake10HealthCheckGetOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("status")
		e.Str(s.Status)
	}
	{
		e.FieldStart("datetime")
		e.Str(s.Datetime)
	}
	{
		e.FieldStart("version")
		e.Str(s.Version)
	}
	{
		e.FieldStart("timestamp")
		e.Int(s.Timestamp)
	}
}

var jsonFieldsNameOfGatewayCEDARIntake10HealthCheckGetOK = [4]string{
	0: "status",
	1: "datetime",
	2: "version",
	3: "timestamp",
}

// Decode decodes GatewayCEDARIntake10HealthCheckGetOK from json.
func (s *GatewayCEDARIntake10HealthCheckGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDARIntake10HealthCheckGetOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Status = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "datetime":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Datetime = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"datetime\"")
			}
		case "version":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.Version = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "timestamp":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Int()
				s.Timestamp = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timestamp\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDARIntake10HealthCheckGetOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00001111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDARIntake10HealthCheckGetOK) {
					name = jsonFieldsNameOfGatewayCEDARIntake10HealthCheckGetOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDARIntake10HealthCheckGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDARIntake10HealthCheckGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDARIntake10IntakeCedarIDGetInternalServerError) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDARIntake10IntakeCedarIDGetInternalServerError) encodeFields(e *jx.Encoder) {
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDARIntake10IntakeCedarIDGetInternalServerError = [1]string{
	0: "error",
}

// Decode decodes GatewayCEDARIntake10IntakeCedarIDGetInternalServerError from json.
func (s *GatewayCEDARIntake10IntakeCedarIDGetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDARIntake10IntakeCedarIDGetInternalServerError to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDARIntake10IntakeCedarIDGetInternalServerError")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDARIntake10IntakeCedarIDGetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDARIntake10IntakeCedarIDGetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDARIntake10IntakeCedarIDGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDARIntake10IntakeCedarIDGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.CedarId.Set {
			e.FieldStart("cedarId")
			s.CedarId.Encode(e)
		}
	}
	{
		if s.ClientId.Set {
			e.FieldStart("clientId")
			s.ClientId.Encode(e)
		}
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.CedarStatus.Set {
			e.FieldStart("cedarStatus")
			s.CedarStatus.Encode(e)
		}
	}
	{
		if s.CedarStatusMessage.Set {
			e.FieldStart("cedarStatusMessage")
			s.CedarStatusMessage.Encode(e)
		}
	}
	{
		if s.ClientStatus.Set {
			e.FieldStart("clientStatus")
			s.ClientStatus.Encode(e)
		}
	}
	{
		if s.Schema.Set {
			e.FieldStart("schema")
			s.Schema.Encode(e)
		}
	}
	{
		if s.BodyFormat.Set {
			e.FieldStart("bodyFormat")
			s.BodyFormat.Encode(e)
		}
	}
	{
		if s.Body.Set {
			e.FieldStart("body")
			s.Body.Encode(e)
		}
	}
	{
		if s.ClientCreatedDate.Set {
			e.FieldStart("clientCreatedDate")
			s.ClientCreatedDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.ClientLastUpdatedDate.Set {
			e.FieldStart("clientLastUpdatedDate")
			s.ClientLastUpdatedDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.CedarCreatedDate.Set {
			e.FieldStart("cedarCreatedDate")
			s.CedarCreatedDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.CedarLastUpdatedDate.Set {
			e.FieldStart("cedarLastUpdatedDate")
			s.CedarLastUpdatedDate.Encode(e, json.EncodeDateTime)
		}
	}
}

var jsonFieldsNameOfGatewayCEDARIntake10IntakeCedarIDGetOK = [14]string{
	0:  "cedarId",
	1:  "clientId",
	2:  "version",
	3:  "type",
	4:  "cedarStatus",
	5:  "cedarStatusMessage",
	6:  "clientStatus",
	7:  "schema",
	8:  "bodyFormat",
	9:  "body",
	10: "clientCreatedDate",
	11: "clientLastUpdatedDate",
	12: "cedarCreatedDate",
	13: "cedarLastUpdatedDate",
}

// Decode decodes GatewayCEDARIntake10IntakeCedarIDGetOK from json.
func (s *GatewayCEDARIntake10IntakeCedarIDGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDARIntake10IntakeCedarIDGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cedarId":
			if err := func() error {
				s.CedarId.Reset()
				if err := s.CedarId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cedarId\"")
			}
		case "clientId":
			if err := func() error {
				s.ClientId.Reset()
				if err := s.ClientId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"clientId\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "cedarStatus":
			if err := func() error {
				s.CedarStatus.Reset()
				if err := s.CedarStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cedarStatus\"")
			}
		case "cedarStatusMessage":
			if err := func() error {
				s.CedarStatusMessage.Reset()
				if err := s.CedarStatusMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cedarStatusMessage\"")
			}
		case "clientStatus":
			if err := func() error {
				s.ClientStatus.Reset()
				if err := s.ClientStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"clientStatus\"")
			}
		case "schema":
			if err := func() error {
				s.Schema.Reset()
				if err := s.Schema.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schema\"")
			}
		case "bodyFormat":
			if err := func() error {
				s.BodyFormat.Reset()
				if err := s.BodyFormat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bodyFormat\"")
			}
		case "body":
			if err := func() error {
				s.Body.Reset()
				if err := s.Body.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"body\"")
			}
		case "clientCreatedDate":
			if err := func() error {
				s.ClientCreatedDate.Reset()
				if err := s.ClientCreatedDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"clientCreatedDate\"")
			}
		case "clientLastUpdatedDate":
			if err := func() error {
				s.ClientLastUpdatedDate.Reset()
				if err := s.ClientLastUpdatedDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"clientLastUpdatedDate\"")
			}
		case "cedarCreatedDate":
			if err := func() error {
				s.CedarCreatedDate.Reset()
				if err := s.CedarCreatedDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cedarCreatedDate\"")
			}
		case "cedarLastUpdatedDate":
			if err := func() error {
				s.CedarLastUpdatedDate.Reset()
				if err := s.CedarLastUpdatedDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cedarLastUpdatedDate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDARIntake10IntakeCedarIDGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDARIntake10IntakeCedarIDGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDARIntake10IntakeCedarIDGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDARIntake10IntakePostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDARIntake10IntakePostOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("message")
		e.ArrStart()
		for _, elem := range s.Message {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	{
		e.FieldStart("result")
		e.Str(s.Result)
	}
}

var jsonFieldsNameOfGatewayCEDARIntake10IntakePostOK = [2]string{
	0: "message",
	1: "result",
}

// Decode decodes GatewayCEDARIntake10IntakePostOK from json.
func (s *GatewayCEDARIntake10IntakePostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDARIntake10IntakePostOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		case "result":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Result = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDARIntake10IntakePostOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDARIntake10IntakePostOK) {
					name = jsonFieldsNameOfGatewayCEDARIntake10IntakePostOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDARIntake10IntakePostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDARIntake10IntakePostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDARIntake10IntakePostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDARIntake10IntakePostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("body")
		e.Str(s.Body)
	}
	{
		e.FieldStart("bodyFormat")
		s.BodyFormat.Encode(e)
	}
	{
		e.FieldStart("clientCreatedDate")
		json.EncodeDateTime(e, s.ClientCreatedDate)
	}
	{
		e.FieldStart("clientId")
		e.Str(s.ClientId)
	}
	{
		if s.ClientLastUpdatedDate.Set {
			e.FieldStart("clientLastUpdatedDate")
			s.ClientLastUpdatedDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		e.FieldStart("clientStatus")
		e.Str(s.ClientStatus)
	}
	{
		e.FieldStart("schema")
		e.Str(s.Schema)
	}
	{
		e.FieldStart("type")
		e.Str(s.Type)
	}
	{
		e.FieldStart("version")
		e.Str(s.Version)
	}
}

var jsonFieldsNameOfGatewayCEDARIntake10IntakePostReq = [9]string{
	0: "body",
	1: "bodyFormat",
	2: "clientCreatedDate",
	3: "clientId",
	4: "clientLastUpdatedDate",
	5: "clientStatus",
	6: "schema",
	7: "type",
	8: "version",
}

// Decode decodes GatewayCEDARIntake10IntakePostReq from json.
func (s *GatewayCEDARIntake10IntakePostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDARIntake10IntakePostReq to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "body":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Body = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"body\"")
			}
		case "bodyFormat":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.BodyFormat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bodyFormat\"")
			}
		case "clientCreatedDate":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := json.DecodeDateTime(d)
				s.ClientCreatedDate = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"clientCreatedDate\"")
			}
		case "clientId":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.ClientId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"clientId\"")
			}
		case "clientLastUpdatedDate":
			if err := func() error {
				s.ClientLastUpdatedDate.Reset()
				if err := s.ClientLastUpdatedDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"clientLastUpdatedDate\"")
			}
		case "clientStatus":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				v, err := d.Str()
				s.ClientStatus = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"clientStatus\"")
			}
		case "schema":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				v, err := d.Str()
				s.Schema = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schema\"")
			}
		case "type":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				v, err := d.Str()
				s.Type = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "version":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Version = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDARIntake10IntakePostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b11101111,
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayCEDARIntake10IntakePostReq) {
					name = jsonFieldsNameOfGatewayCEDARIntake10IntakePostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDARIntake10IntakePostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDARIntake10IntakePostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDARIntake10IntakePostReqBodyFormat as json.
func (s GatewayCEDARIntake10IntakePostReqBodyFormat) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayCEDARIntake10IntakePostReqBodyFormat from json.
func (s *GatewayCEDARIntake10IntakePostReqBodyFormat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDARIntake10IntakePostReqBodyFormat to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayCEDARIntake10IntakePostReqBodyFormat(v) {
	case GatewayCEDARIntake10IntakePostReqBodyFormatJSON:
		*s = GatewayCEDARIntake10IntakePostReqBodyFormatJSON
	case GatewayCEDARIntake10IntakePostReqBodyFormatXML:
		*s = GatewayCEDARIntake10IntakePostReqBodyFormatXML
	default:
		*s = GatewayCEDARIntake10IntakePostReqBodyFormat(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayCEDARIntake10IntakePostReqBodyFormat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDARIntake10IntakePostReqBodyFormat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDARIntake10IntakeStatusGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDARIntake10IntakeStatusGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.Statuses != nil {
			e.FieldStart("Statuses")
			e.ArrStart()
			for _, elem := range s.Statuses {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayCEDARIntake10IntakeStatusGetOK = [2]string{
	0: "count",
	1: "Statuses",
}

// Decode decodes GatewayCEDARIntake10IntakeStatusGetOK from json.
func (s *GatewayCEDARIntake10IntakeStatusGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDARIntake10IntakeStatusGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "Statuses":
			if err := func() error {
				s.Statuses = make([]GatewayCEDARIntake10IntakeStatusGetOKStatusesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayCEDARIntake10IntakeStatusGetOKStatusesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Statuses = append(s.Statuses, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Statuses\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDARIntake10IntakeStatusGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDARIntake10IntakeStatusGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDARIntake10IntakeStatusGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDARIntake10IntakeStatusGetOKStatusesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDARIntake10IntakeStatusGetOKStatusesItem) encodeFields(e *jx.Encoder) {
	{
		if s.CedarId.Set {
			e.FieldStart("cedarId")
			s.CedarId.Encode(e)
		}
	}
	{
		if s.ClientId.Set {
			e.FieldStart("clientId")
			s.ClientId.Encode(e)
		}
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
	{
		if s.CedarStatus.Set {
			e.FieldStart("cedarStatus")
			s.CedarStatus.Encode(e)
		}
	}
	{
		if s.CedarStatusMessage.Set {
			e.FieldStart("cedarStatusMessage")
			s.CedarStatusMessage.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDARIntake10IntakeStatusGetOKStatusesItem = [5]string{
	0: "cedarId",
	1: "clientId",
	2: "version",
	3: "cedarStatus",
	4: "cedarStatusMessage",
}

// Decode decodes GatewayCEDARIntake10IntakeStatusGetOKStatusesItem from json.
func (s *GatewayCEDARIntake10IntakeStatusGetOKStatusesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDARIntake10IntakeStatusGetOKStatusesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cedarId":
			if err := func() error {
				s.CedarId.Reset()
				if err := s.CedarId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cedarId\"")
			}
		case "clientId":
			if err := func() error {
				s.ClientId.Reset()
				if err := s.ClientId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"clientId\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "cedarStatus":
			if err := func() error {
				s.CedarStatus.Reset()
				if err := s.CedarStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cedarStatus\"")
			}
		case "cedarStatusMessage":
			if err := func() error {
				s.CedarStatusMessage.Reset()
				if err := s.CedarStatusMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cedarStatusMessage\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDARIntake10IntakeStatusGetOKStatusesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDARIntake10IntakeStatusGetOKStatusesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDARIntake10IntakeStatusGetOKStatusesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDARIntake10StatusCedarIDGetInternalServerError) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDARIntake10StatusCedarIDGetInternalServerError) encodeFields(e *jx.Encoder) {
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDARIntake10StatusCedarIDGetInternalServerError = [1]string{
	0: "error",
}

// Decode decodes GatewayCEDARIntake10StatusCedarIDGetInternalServerError from json.
func (s *GatewayCEDARIntake10StatusCedarIDGetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDARIntake10StatusCedarIDGetInternalServerError to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDARIntake10StatusCedarIDGetInternalServerError")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDARIntake10StatusCedarIDGetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDARIntake10StatusCedarIDGetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDARIntake10StatusCedarIDGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDARIntake10StatusCedarIDGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.CedarId.Set {
			e.FieldStart("cedarId")
			s.CedarId.Encode(e)
		}
	}
	{
		if s.ClientId.Set {
			e.FieldStart("clientId")
			s.ClientId.Encode(e)
		}
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
	{
		if s.CedarStatus.Set {
			e.FieldStart("cedarStatus")
			s.CedarStatus.Encode(e)
		}
	}
	{
		if s.CedarStatusMessage.Set {
			e.FieldStart("cedarStatusMessage")
			s.CedarStatusMessage.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDARIntake10StatusCedarIDGetOK = [5]string{
	0: "cedarId",
	1: "clientId",
	2: "version",
	3: "cedarStatus",
	4: "cedarStatusMessage",
}

// Decode decodes GatewayCEDARIntake10StatusCedarIDGetOK from json.
func (s *GatewayCEDARIntake10StatusCedarIDGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDARIntake10StatusCedarIDGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cedarId":
			if err := func() error {
				s.CedarId.Reset()
				if err := s.CedarId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cedarId\"")
			}
		case "clientId":
			if err := func() error {
				s.ClientId.Reset()
				if err := s.ClientId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"clientId\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "cedarStatus":
			if err := func() error {
				s.CedarStatus.Reset()
				if err := s.CedarStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cedarStatus\"")
			}
		case "cedarStatusMessage":
			if err := func() error {
				s.CedarStatusMessage.Reset()
				if err := s.CedarStatusMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cedarStatusMessage\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDARIntake10StatusCedarIDGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDARIntake10StatusCedarIDGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDARIntake10StatusCedarIDGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDARIntake10StatusClientIDGetInternalServerError) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDARIntake10StatusClientIDGetInternalServerError) encodeFields(e *jx.Encoder) {
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDARIntake10StatusClientIDGetInternalServerError = [1]string{
	0: "error",
}

// Decode decodes GatewayCEDARIntake10StatusClientIDGetInternalServerError from json.
func (s *GatewayCEDARIntake10StatusClientIDGetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDARIntake10StatusClientIDGetInternalServerError to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDARIntake10StatusClientIDGetInternalServerError")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDARIntake10StatusClientIDGetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDARIntake10StatusClientIDGetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayCEDARIntake10StatusClientIDGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayCEDARIntake10StatusClientIDGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.CedarId.Set {
			e.FieldStart("cedarId")
			s.CedarId.Encode(e)
		}
	}
	{
		if s.ClientId.Set {
			e.FieldStart("clientId")
			s.ClientId.Encode(e)
		}
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
	{
		if s.CedarStatus.Set {
			e.FieldStart("cedarStatus")
			s.CedarStatus.Encode(e)
		}
	}
	{
		if s.CedarStatusMessage.Set {
			e.FieldStart("cedarStatusMessage")
			s.CedarStatusMessage.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayCEDARIntake10StatusClientIDGetOK = [5]string{
	0: "cedarId",
	1: "clientId",
	2: "version",
	3: "cedarStatus",
	4: "cedarStatusMessage",
}

// Decode decodes GatewayCEDARIntake10StatusClientIDGetOK from json.
func (s *GatewayCEDARIntake10StatusClientIDGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayCEDARIntake10StatusClientIDGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cedarId":
			if err := func() error {
				s.CedarId.Reset()
				if err := s.CedarId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cedarId\"")
			}
		case "clientId":
			if err := func() error {
				s.ClientId.Reset()
				if err := s.ClientId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"clientId\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "cedarStatus":
			if err := func() error {
				s.CedarStatus.Reset()
				if err := s.CedarStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cedarStatus\"")
			}
		case "cedarStatusMessage":
			if err := func() error {
				s.CedarStatusMessage.Reset()
				if err := s.CedarStatusMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cedarStatusMessage\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayCEDARIntake10StatusClientIDGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayCEDARIntake10StatusClientIDGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayCEDARIntake10StatusClientIDGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayIntakeSchemaGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayIntakeSchemaGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Schemas != nil {
			e.FieldStart("schemas")
			e.ArrStart()
			for _, elem := range s.Schemas {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayIntakeSchemaGetOK = [1]string{
	0: "schemas",
}

// Decode decodes GatewayIntakeSchemaGetOK from json.
func (s *GatewayIntakeSchemaGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayIntakeSchemaGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "schemas":
			if err := func() error {
				s.Schemas = make([]GatewayIntakeSchemaGetOKSchemasItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayIntakeSchemaGetOKSchemasItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Schemas = append(s.Schemas, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schemas\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayIntakeSchemaGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayIntakeSchemaGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayIntakeSchemaGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayIntakeSchemaGetOKSchemasItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayIntakeSchemaGetOKSchemasItem) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("id")
		e.Float64(s.ID)
	}
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		e.FieldStart("schema")
		e.Str(s.Schema)
	}
	{
		e.FieldStart("createdBy")
		e.Str(s.CreatedBy)
	}
	{
		e.FieldStart("createdDate")
		e.Str(s.CreatedDate)
	}
	{
		e.FieldStart("updatedBy")
		e.Str(s.UpdatedBy)
	}
	{
		e.FieldStart("updatedDate")
		e.Str(s.UpdatedDate)
	}
}

var jsonFieldsNameOfGatewayIntakeSchemaGetOKSchemasItem = [7]string{
	0: "id",
	1: "name",
	2: "schema",
	3: "createdBy",
	4: "createdDate",
	5: "updatedBy",
	6: "updatedDate",
}

// Decode decodes GatewayIntakeSchemaGetOKSchemasItem from json.
func (s *GatewayIntakeSchemaGetOKSchemasItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayIntakeSchemaGetOKSchemasItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Float64()
				s.ID = float64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "schema":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.Schema = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schema\"")
			}
		case "createdBy":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.CreatedBy = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"createdBy\"")
			}
		case "createdDate":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.CreatedDate = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"createdDate\"")
			}
		case "updatedBy":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				v, err := d.Str()
				s.UpdatedBy = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updatedBy\"")
			}
		case "updatedDate":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				v, err := d.Str()
				s.UpdatedDate = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updatedDate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayIntakeSchemaGetOKSchemasItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b01111111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayIntakeSchemaGetOKSchemasItem) {
					name = jsonFieldsNameOfGatewayIntakeSchemaGetOKSchemasItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayIntakeSchemaGetOKSchemasItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayIntakeSchemaGetOKSchemasItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayIntakeSchemaIDGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayIntakeSchemaIDGetOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("id")
		e.Float64(s.ID)
	}
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		e.FieldStart("schema")
		e.Str(s.Schema)
	}
	{
		e.FieldStart("createdBy")
		e.Str(s.CreatedBy)
	}
	{
		e.FieldStart("createdDate")
		e.Str(s.CreatedDate)
	}
	{
		e.FieldStart("updatedBy")
		e.Str(s.UpdatedBy)
	}
	{
		e.FieldStart("updatedDate")
		e.Str(s.UpdatedDate)
	}
}

var jsonFieldsNameOfGatewayIntakeSchemaIDGetOK = [7]string{
	0: "id",
	1: "name",
	2: "schema",
	3: "createdBy",
	4: "createdDate",
	5: "updatedBy",
	6: "updatedDate",
}

// Decode decodes GatewayIntakeSchemaIDGetOK from json.
func (s *GatewayIntakeSchemaIDGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayIntakeSchemaIDGetOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Float64()
				s.ID = float64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "schema":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.Schema = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schema\"")
			}
		case "createdBy":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.CreatedBy = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"createdBy\"")
			}
		case "createdDate":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.CreatedDate = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"createdDate\"")
			}
		case "updatedBy":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				v, err := d.Str()
				s.UpdatedBy = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updatedBy\"")
			}
		case "updatedDate":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				v, err := d.Str()
				s.UpdatedDate = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updatedDate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayIntakeSchemaIDGetOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b01111111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayIntakeSchemaIDGetOK) {
					name = jsonFieldsNameOfGatewayIntakeSchemaIDGetOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayIntakeSchemaIDGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayIntakeSchemaIDGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayIntakeSchemaIDPutOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayIntakeSchemaIDPutOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("id")
		e.Float64(s.ID)
	}
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		e.FieldStart("schema")
		e.Str(s.Schema)
	}
	{
		e.FieldStart("createdBy")
		e.Str(s.CreatedBy)
	}
	{
		e.FieldStart("createdDate")
		e.Str(s.CreatedDate)
	}
	{
		e.FieldStart("updatedBy")
		e.Str(s.UpdatedBy)
	}
	{
		e.FieldStart("updatedDate")
		e.Str(s.UpdatedDate)
	}
}

var jsonFieldsNameOfGatewayIntakeSchemaIDPutOK = [7]string{
	0: "id",
	1: "name",
	2: "schema",
	3: "createdBy",
	4: "createdDate",
	5: "updatedBy",
	6: "updatedDate",
}

// Decode decodes GatewayIntakeSchemaIDPutOK from json.
func (s *GatewayIntakeSchemaIDPutOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayIntakeSchemaIDPutOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Float64()
				s.ID = float64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "schema":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.Schema = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schema\"")
			}
		case "createdBy":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.CreatedBy = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"createdBy\"")
			}
		case "createdDate":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.CreatedDate = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"createdDate\"")
			}
		case "updatedBy":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				v, err := d.Str()
				s.UpdatedBy = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updatedBy\"")
			}
		case "updatedDate":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				v, err := d.Str()
				s.UpdatedDate = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updatedDate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayIntakeSchemaIDPutOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b01111111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayIntakeSchemaIDPutOK) {
					name = jsonFieldsNameOfGatewayIntakeSchemaIDPutOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayIntakeSchemaIDPutOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayIntakeSchemaIDPutOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayIntakeSchemaIDPutReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayIntakeSchemaIDPutReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("schema")
		e.Str(s.Schema)
	}
}

var jsonFieldsNameOfGatewayIntakeSchemaIDPutReq = [1]string{
	0: "schema",
}

// Decode decodes GatewayIntakeSchemaIDPutReq from json.
func (s *GatewayIntakeSchemaIDPutReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayIntakeSchemaIDPutReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "schema":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Schema = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schema\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayIntakeSchemaIDPutReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayIntakeSchemaIDPutReq) {
					name = jsonFieldsNameOfGatewayIntakeSchemaIDPutReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayIntakeSchemaIDPutReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayIntakeSchemaIDPutReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayIntakeSchemaPostCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayIntakeSchemaPostCreated) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("schemaId")
		e.Float64(s.SchemaId)
	}
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
}

var jsonFieldsNameOfGatewayIntakeSchemaPostCreated = [2]string{
	0: "schemaId",
	1: "name",
}

// Decode decodes GatewayIntakeSchemaPostCreated from json.
func (s *GatewayIntakeSchemaPostCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayIntakeSchemaPostCreated to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "schemaId":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Float64()
				s.SchemaId = float64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schemaId\"")
			}
		case "name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayIntakeSchemaPostCreated")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayIntakeSchemaPostCreated) {
					name = jsonFieldsNameOfGatewayIntakeSchemaPostCreated[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayIntakeSchemaPostCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayIntakeSchemaPostCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayIntakeSchemaPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayIntakeSchemaPostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		e.FieldStart("schema")
		e.Str(s.Schema)
	}
}

var jsonFieldsNameOfGatewayIntakeSchemaPostReq = [2]string{
	0: "name",
	1: "schema",
}

// Decode decodes GatewayIntakeSchemaPostReq from json.
func (s *GatewayIntakeSchemaPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayIntakeSchemaPostReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "schema":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Schema = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"schema\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayIntakeSchemaPostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayIntakeSchemaPostReq) {
					name = jsonFieldsNameOfGatewayIntakeSchemaPostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayIntakeSchemaPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayIntakeSchemaPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayKeysGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayKeysGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Results != nil {
			e.FieldStart("results")
			e.ArrStart()
			for _, elem := range s.Results {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayKeysGetOK = [1]string{
	0: "results",
}

// Decode decodes GatewayKeysGetOK from json.
func (s *GatewayKeysGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayKeysGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "results":
			if err := func() error {
				s.Results = make([]GatewayKeysGetOKResultsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayKeysGetOKResultsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Results = append(s.Results, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"results\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayKeysGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayKeysGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayKeysGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayKeysGetOKResultsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayKeysGetOKResultsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Key.Set {
			e.FieldStart("key")
			s.Key.Encode(e)
		}
	}
	{
		if s.CreatedBy.Set {
			e.FieldStart("createdBy")
			s.CreatedBy.Encode(e)
		}
	}
	{
		if s.CreatedDate.Set {
			e.FieldStart("createdDate")
			s.CreatedDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.IsActive.Set {
			e.FieldStart("isActive")
			s.IsActive.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayKeysGetOKResultsItem = [5]string{
	0: "id",
	1: "key",
	2: "createdBy",
	3: "createdDate",
	4: "isActive",
}

// Decode decodes GatewayKeysGetOKResultsItem from json.
func (s *GatewayKeysGetOKResultsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayKeysGetOKResultsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "key":
			if err := func() error {
				s.Key.Reset()
				if err := s.Key.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"key\"")
			}
		case "createdBy":
			if err := func() error {
				s.CreatedBy.Reset()
				if err := s.CreatedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"createdBy\"")
			}
		case "createdDate":
			if err := func() error {
				s.CreatedDate.Reset()
				if err := s.CreatedDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"createdDate\"")
			}
		case "isActive":
			if err := func() error {
				s.IsActive.Reset()
				if err := s.IsActive.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isActive\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayKeysGetOKResultsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayKeysGetOKResultsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayKeysGetOKResultsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayKeysPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayKeysPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Key.Set {
			e.FieldStart("key")
			s.Key.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayKeysPostOK = [1]string{
	0: "key",
}

// Decode decodes GatewayKeysPostOK from json.
func (s *GatewayKeysPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayKeysPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "key":
			if err := func() error {
				s.Key.Reset()
				if err := s.Key.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"key\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayKeysPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayKeysPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayKeysPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayLDAP10AuthenticatePostBadRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayLDAP10AuthenticatePostBadRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayLDAP10AuthenticatePostBadRequest = [1]string{
	0: "message",
}

// Decode decodes GatewayLDAP10AuthenticatePostBadRequest from json.
func (s *GatewayLDAP10AuthenticatePostBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayLDAP10AuthenticatePostBadRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayLDAP10AuthenticatePostBadRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayLDAP10AuthenticatePostBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayLDAP10AuthenticatePostBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayLDAP10AuthenticatePostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayLDAP10AuthenticatePostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayLDAP10AuthenticatePostOK = [1]string{
	0: "message",
}

// Decode decodes GatewayLDAP10AuthenticatePostOK from json.
func (s *GatewayLDAP10AuthenticatePostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayLDAP10AuthenticatePostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayLDAP10AuthenticatePostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayLDAP10AuthenticatePostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayLDAP10AuthenticatePostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayLDAP10AuthenticatePostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayLDAP10AuthenticatePostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("username")
		e.Str(s.Username)
	}
	{
		if s.Principal.Set {
			e.FieldStart("principal")
			s.Principal.Encode(e)
		}
	}
	{
		e.FieldStart("password")
		e.Str(s.Password)
	}
	{
		if s.Credentials.Set {
			e.FieldStart("credentials")
			s.Credentials.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayLDAP10AuthenticatePostReq = [4]string{
	0: "username",
	1: "principal",
	2: "password",
	3: "credentials",
}

// Decode decodes GatewayLDAP10AuthenticatePostReq from json.
func (s *GatewayLDAP10AuthenticatePostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayLDAP10AuthenticatePostReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "username":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Username = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"username\"")
			}
		case "principal":
			if err := func() error {
				s.Principal.Reset()
				if err := s.Principal.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"principal\"")
			}
		case "password":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.Password = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"password\"")
			}
		case "credentials":
			if err := func() error {
				s.Credentials.Reset()
				if err := s.Credentials.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credentials\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayLDAP10AuthenticatePostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000101,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewayLDAP10AuthenticatePostReq) {
					name = jsonFieldsNameOfGatewayLDAP10AuthenticatePostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayLDAP10AuthenticatePostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayLDAP10AuthenticatePostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayLDAP10PersonGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayLDAP10PersonGetOK) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfGatewayLDAP10PersonGetOK = [0]string{}

// Decode decodes GatewayLDAP10PersonGetOK from json.
func (s *GatewayLDAP10PersonGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayLDAP10PersonGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode GatewayLDAP10PersonGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayLDAP10PersonGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayLDAP10PersonGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayLDAP10PersonIDGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayLDAP10PersonIDGetOK) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfGatewayLDAP10PersonIDGetOK = [0]string{}

// Decode decodes GatewayLDAP10PersonIDGetOK from json.
func (s *GatewayLDAP10PersonIDGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayLDAP10PersonIDGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode GatewayLDAP10PersonIDGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayLDAP10PersonIDGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayLDAP10PersonIDGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerDeleteMultiStatus) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200AdminReviewerDeleteMultiStatus) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200AdminReviewerDeleteMultiStatus = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200AdminReviewerDeleteMultiStatus from json.
func (s *GatewaySystem20Census20Core20API200AdminReviewerDeleteMultiStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200AdminReviewerDeleteMultiStatus to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200AdminReviewerDeleteMultiStatus")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerDeleteMultiStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerDeleteMultiStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerDeleteOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200AdminReviewerDeleteOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200AdminReviewerDeleteOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200AdminReviewerDeleteOK from json.
func (s *GatewaySystem20Census20Core20API200AdminReviewerDeleteOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200AdminReviewerDeleteOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200AdminReviewerDeleteOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerDeleteOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerDeleteOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerDeleteReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200AdminReviewerDeleteReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("Reviewers")
		e.ArrStart()
		for _, elem := range s.Reviewers {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200AdminReviewerDeleteReq = [1]string{
	0: "Reviewers",
}

// Decode decodes GatewaySystem20Census20Core20API200AdminReviewerDeleteReq from json.
func (s *GatewaySystem20Census20Core20API200AdminReviewerDeleteReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200AdminReviewerDeleteReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "Reviewers":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				s.Reviewers = make([]GatewaySystem20Census20Core20API200AdminReviewerDeleteReqReviewersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200AdminReviewerDeleteReqReviewersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Reviewers = append(s.Reviewers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Reviewers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200AdminReviewerDeleteReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200AdminReviewerDeleteReq) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200AdminReviewerDeleteReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerDeleteReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerDeleteReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerDeleteReqReviewersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200AdminReviewerDeleteReqReviewersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.UserName.Set {
			e.FieldStart("userName")
			s.UserName.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200AdminReviewerDeleteReqReviewersItem = [3]string{
	0: "id",
	1: "userName",
	2: "type",
}

// Decode decodes GatewaySystem20Census20Core20API200AdminReviewerDeleteReqReviewersItem from json.
func (s *GatewaySystem20Census20Core20API200AdminReviewerDeleteReqReviewersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200AdminReviewerDeleteReqReviewersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "userName":
			if err := func() error {
				s.UserName.Reset()
				if err := s.UserName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"userName\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200AdminReviewerDeleteReqReviewersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerDeleteReqReviewersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerDeleteReqReviewersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200AdminReviewerGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.Reviewers != nil {
			e.FieldStart("Reviewers")
			e.ArrStart()
			for _, elem := range s.Reviewers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200AdminReviewerGetOK = [2]string{
	0: "count",
	1: "Reviewers",
}

// Decode decodes GatewaySystem20Census20Core20API200AdminReviewerGetOK from json.
func (s *GatewaySystem20Census20Core20API200AdminReviewerGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200AdminReviewerGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "Reviewers":
			if err := func() error {
				s.Reviewers = make([]GatewaySystem20Census20Core20API200AdminReviewerGetOKReviewersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200AdminReviewerGetOKReviewersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Reviewers = append(s.Reviewers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Reviewers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200AdminReviewerGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerGetOKReviewersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200AdminReviewerGetOKReviewersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.UserName.Set {
			e.FieldStart("userName")
			s.UserName.Encode(e)
		}
	}
	{
		if s.FullName.Set {
			e.FieldStart("fullName")
			s.FullName.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200AdminReviewerGetOKReviewersItem = [4]string{
	0: "id",
	1: "userName",
	2: "fullName",
	3: "type",
}

// Decode decodes GatewaySystem20Census20Core20API200AdminReviewerGetOKReviewersItem from json.
func (s *GatewaySystem20Census20Core20API200AdminReviewerGetOKReviewersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200AdminReviewerGetOKReviewersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "userName":
			if err := func() error {
				s.UserName.Reset()
				if err := s.UserName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"userName\"")
			}
		case "fullName":
			if err := func() error {
				s.FullName.Reset()
				if err := s.FullName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fullName\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200AdminReviewerGetOKReviewersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerGetOKReviewersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerGetOKReviewersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerPostMultiStatus) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200AdminReviewerPostMultiStatus) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200AdminReviewerPostMultiStatus = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200AdminReviewerPostMultiStatus from json.
func (s *GatewaySystem20Census20Core20API200AdminReviewerPostMultiStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200AdminReviewerPostMultiStatus to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200AdminReviewerPostMultiStatus")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerPostMultiStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerPostMultiStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200AdminReviewerPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200AdminReviewerPostOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200AdminReviewerPostOK from json.
func (s *GatewaySystem20Census20Core20API200AdminReviewerPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200AdminReviewerPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200AdminReviewerPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200AdminReviewerPostReq) encodeFields(e *jx.Encoder) {
	{
		if s.Reviewers != nil {
			e.FieldStart("Reviewers")
			e.ArrStart()
			for _, elem := range s.Reviewers {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200AdminReviewerPostReq = [1]string{
	0: "Reviewers",
}

// Decode decodes GatewaySystem20Census20Core20API200AdminReviewerPostReq from json.
func (s *GatewaySystem20Census20Core20API200AdminReviewerPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200AdminReviewerPostReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "Reviewers":
			if err := func() error {
				s.Reviewers = make([]GatewaySystem20Census20Core20API200AdminReviewerPostReqReviewersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200AdminReviewerPostReqReviewersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Reviewers = append(s.Reviewers, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Reviewers\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200AdminReviewerPostReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerPostReqReviewersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200AdminReviewerPostReqReviewersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		e.FieldStart("userName")
		e.Str(s.UserName)
	}
	{
		e.FieldStart("fullName")
		e.Str(s.FullName)
	}
	{
		e.FieldStart("type")
		e.Str(s.Type)
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200AdminReviewerPostReqReviewersItem = [4]string{
	0: "id",
	1: "userName",
	2: "fullName",
	3: "type",
}

// Decode decodes GatewaySystem20Census20Core20API200AdminReviewerPostReqReviewersItem from json.
func (s *GatewaySystem20Census20Core20API200AdminReviewerPostReqReviewersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200AdminReviewerPostReqReviewersItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "userName":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.UserName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"userName\"")
			}
		case "fullName":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.FullName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fullName\"")
			}
		case "type":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Type = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200AdminReviewerPostReqReviewersItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00001110,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200AdminReviewerPostReqReviewersItem) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200AdminReviewerPostReqReviewersItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerPostReqReviewersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200AdminReviewerPostReqReviewersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.SystemId.Set {
			e.FieldStart("systemId")
			s.SystemId.Encode(e)
		}
	}
	{
		if s.Budgets != nil {
			e.FieldStart("Budgets")
			e.ArrStart()
			for _, elem := range s.Budgets {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Contracts != nil {
			e.FieldStart("Contracts")
			e.ArrStart()
			for _, elem := range s.Contracts {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200BudgetAndContractsGetOK = [3]string{
	0: "systemId",
	1: "Budgets",
	2: "Contracts",
}

// Decode decodes GatewaySystem20Census20Core20API200BudgetAndContractsGetOK from json.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200BudgetAndContractsGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "systemId":
			if err := func() error {
				s.SystemId.Reset()
				if err := s.SystemId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "Budgets":
			if err := func() error {
				s.Budgets = make([]GatewaySystem20Census20Core20API200BudgetAndContractsGetOKBudgetsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200BudgetAndContractsGetOKBudgetsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Budgets = append(s.Budgets, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Budgets\"")
			}
		case "Contracts":
			if err := func() error {
				s.Contracts = make([]GatewaySystem20Census20Core20API200BudgetAndContractsGetOKContractsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200BudgetAndContractsGetOKContractsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Contracts = append(s.Contracts, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Contracts\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200BudgetAndContractsGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsGetOKBudgetsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsGetOKBudgetsItem) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200BudgetAndContractsGetOKBudgetsItem = [0]string{}

// Decode decodes GatewaySystem20Census20Core20API200BudgetAndContractsGetOKBudgetsItem from json.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsGetOKBudgetsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200BudgetAndContractsGetOKBudgetsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200BudgetAndContractsGetOKBudgetsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsGetOKBudgetsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsGetOKBudgetsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsGetOKContractsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsGetOKContractsItem) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200BudgetAndContractsGetOKContractsItem = [0]string{}

// Decode decodes GatewaySystem20Census20Core20API200BudgetAndContractsGetOKContractsItem from json.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsGetOKContractsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200BudgetAndContractsGetOKContractsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200BudgetAndContractsGetOKContractsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsGetOKContractsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsGetOKContractsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200BudgetAndContractsPostOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200BudgetAndContractsPostOK from json.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200BudgetAndContractsPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200BudgetAndContractsPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsPostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("systemId")
		e.Str(s.SystemId)
	}
	{
		e.FieldStart("pageName")
		e.Str(s.PageName)
	}
	{
		if s.Budgets.Set {
			e.FieldStart("Budgets")
			s.Budgets.Encode(e)
		}
	}
	{
		if s.Contracts.Set {
			e.FieldStart("Contracts")
			s.Contracts.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200BudgetAndContractsPostReq = [4]string{
	0: "systemId",
	1: "pageName",
	2: "Budgets",
	3: "Contracts",
}

// Decode decodes GatewaySystem20Census20Core20API200BudgetAndContractsPostReq from json.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200BudgetAndContractsPostReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "systemId":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.SystemId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "pageName":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.PageName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageName\"")
			}
		case "Budgets":
			if err := func() error {
				s.Budgets.Reset()
				if err := s.Budgets.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Budgets\"")
			}
		case "Contracts":
			if err := func() error {
				s.Contracts.Reset()
				if err := s.Contracts.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Contracts\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200BudgetAndContractsPostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200BudgetAndContractsPostReq) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200BudgetAndContractsPostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsPostReqBudgetsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsPostReqBudgetsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		e.FieldStart("projectId")
		e.Str(s.ProjectId)
	}
	{
		if s.ProjectTitle.Set {
			e.FieldStart("projectTitle")
			s.ProjectTitle.Encode(e)
		}
	}
	{
		if s.FundingId.Set {
			e.FieldStart("fundingId")
			s.FundingId.Encode(e)
		}
	}
	{
		if s.Funding.Set {
			e.FieldStart("funding")
			s.Funding.Encode(e)
		}
	}
	{
		if s.Deleted.Set {
			e.FieldStart("deleted")
			s.Deleted.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200BudgetAndContractsPostReqBudgetsItem = [7]string{
	0: "id",
	1: "projectId",
	2: "projectTitle",
	3: "fundingId",
	4: "funding",
	5: "deleted",
	6: "updated",
}

// Decode decodes GatewaySystem20Census20Core20API200BudgetAndContractsPostReqBudgetsItem from json.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsPostReqBudgetsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200BudgetAndContractsPostReqBudgetsItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "projectId":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.ProjectId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"projectId\"")
			}
		case "projectTitle":
			if err := func() error {
				s.ProjectTitle.Reset()
				if err := s.ProjectTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"projectTitle\"")
			}
		case "fundingId":
			if err := func() error {
				s.FundingId.Reset()
				if err := s.FundingId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fundingId\"")
			}
		case "funding":
			if err := func() error {
				s.Funding.Reset()
				if err := s.Funding.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"funding\"")
			}
		case "deleted":
			if err := func() error {
				s.Deleted.Reset()
				if err := s.Deleted.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deleted\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200BudgetAndContractsPostReqBudgetsItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000010,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200BudgetAndContractsPostReqBudgetsItem) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200BudgetAndContractsPostReqBudgetsItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsPostReqBudgetsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsPostReqBudgetsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsPostReqContractsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsPostReqContractsItem) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("id")
		e.Str(s.ID)
	}
	{
		if s.ContractDeliverableId.Set {
			e.FieldStart("contractDeliverableId")
			s.ContractDeliverableId.Encode(e)
		}
	}
	{
		e.FieldStart("parentAwardId")
		e.Str(s.ParentAwardId)
	}
	{
		e.FieldStart("awardId")
		e.Str(s.AwardId)
	}
	{
		if s.ContractADO.Set {
			e.FieldStart("contractADO")
			s.ContractADO.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Deleted.Set {
			e.FieldStart("deleted")
			s.Deleted.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.SystemId.Set {
			e.FieldStart("systemId")
			s.SystemId.Encode(e)
		}
	}
	{
		if s.POPStartDate.Set {
			e.FieldStart("POPStartDate")
			s.POPStartDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.POPEndDate.Set {
			e.FieldStart("POPEndDate")
			s.POPEndDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.ContractName.Set {
			e.FieldStart("contractName")
			s.ContractName.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200BudgetAndContractsPostReqContractsItem = [12]string{
	0:  "id",
	1:  "contractDeliverableId",
	2:  "parentAwardId",
	3:  "awardId",
	4:  "contractADO",
	5:  "description",
	6:  "deleted",
	7:  "updated",
	8:  "systemId",
	9:  "POPStartDate",
	10: "POPEndDate",
	11: "contractName",
}

// Decode decodes GatewaySystem20Census20Core20API200BudgetAndContractsPostReqContractsItem from json.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsPostReqContractsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200BudgetAndContractsPostReqContractsItem to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.ID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "contractDeliverableId":
			if err := func() error {
				s.ContractDeliverableId.Reset()
				if err := s.ContractDeliverableId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contractDeliverableId\"")
			}
		case "parentAwardId":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.ParentAwardId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"parentAwardId\"")
			}
		case "awardId":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.AwardId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"awardId\"")
			}
		case "contractADO":
			if err := func() error {
				s.ContractADO.Reset()
				if err := s.ContractADO.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contractADO\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "deleted":
			if err := func() error {
				s.Deleted.Reset()
				if err := s.Deleted.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deleted\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "systemId":
			if err := func() error {
				s.SystemId.Reset()
				if err := s.SystemId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "POPStartDate":
			if err := func() error {
				s.POPStartDate.Reset()
				if err := s.POPStartDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"POPStartDate\"")
			}
		case "POPEndDate":
			if err := func() error {
				s.POPEndDate.Reset()
				if err := s.POPEndDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"POPEndDate\"")
			}
		case "contractName":
			if err := func() error {
				s.ContractName.Reset()
				if err := s.ContractName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contractName\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200BudgetAndContractsPostReqContractsItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00001101,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200BudgetAndContractsPostReqContractsItem) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200BudgetAndContractsPostReqContractsItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsPostReqContractsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200BudgetAndContractsPostReqContractsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200BusinessOwnerPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200BusinessOwnerPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200BusinessOwnerPostOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200BusinessOwnerPostOK from json.
func (s *GatewaySystem20Census20Core20API200BusinessOwnerPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200BusinessOwnerPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200BusinessOwnerPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200BusinessOwnerPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200BusinessOwnerPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200BusinessOwnerPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200BusinessOwnerPostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("id")
		e.Str(s.ID)
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
	{
		if s.PageName.Set {
			e.FieldStart("pageName")
			s.PageName.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.SystemOwnership.Set {
			e.FieldStart("SystemOwnership")
			s.SystemOwnership.Encode(e)
		}
	}
	{
		if s.StoresBeneficiaryAddress.Set {
			e.FieldStart("storesBeneficiaryAddress")
			s.StoresBeneficiaryAddress.Encode(e)
		}
	}
	{
		if s.StoresHealthDisparityData.Set {
			e.FieldStart("storesHealthDisparityData")
			s.StoresHealthDisparityData.Encode(e)
		}
	}
	{
		if s.StoresBankingData.Set {
			e.FieldStart("storesBankingData")
			s.StoresBankingData.Encode(e)
		}
	}
	{
		if s.CostPerYear.Set {
			e.FieldStart("costPerYear")
			s.CostPerYear.Encode(e)
		}
	}
	{
		if s.NumberOfFederalFteId.Set {
			e.FieldStart("numberOfFederalFteId")
			s.NumberOfFederalFteId.Encode(e)
		}
	}
	{
		if s.NumberOfFederalFte.Set {
			e.FieldStart("numberOfFederalFte")
			s.NumberOfFederalFte.Encode(e)
		}
	}
	{
		if s.NumberOfContractorFteId.Set {
			e.FieldStart("numberOfContractorFteId")
			s.NumberOfContractorFteId.Encode(e)
		}
	}
	{
		if s.NumberOfContractorFte.Set {
			e.FieldStart("numberOfContractorFte")
			s.NumberOfContractorFte.Encode(e)
		}
	}
	{
		if s.NumberOfSupportedUsersPerMonthId.Set {
			e.FieldStart("numberOfSupportedUsersPerMonthId")
			s.NumberOfSupportedUsersPerMonthId.Encode(e)
		}
	}
	{
		if s.NumberOfSupportedUsersPerMonth.Set {
			e.FieldStart("numberOfSupportedUsersPerMonth")
			s.NumberOfSupportedUsersPerMonth.Encode(e)
		}
	}
	{
		if s.BeneficiaryInformation.Set {
			e.FieldStart("beneficiaryInformation")
			s.BeneficiaryInformation.Encode(e)
		}
	}
	{
		if s.EditBeneficiaryInformation.Set {
			e.FieldStart("editBeneficiaryInformation")
			s.EditBeneficiaryInformation.Encode(e)
		}
	}
	{
		if s.R508UserInterface.Set {
			e.FieldStart("508UserInterface")
			s.R508UserInterface.Encode(e)
		}
	}
	{
		if s.SystemUIAccessibility.Set {
			e.FieldStart("systemUIAccessibility")
			s.SystemUIAccessibility.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200BusinessOwnerPostReq = [19]string{
	0:  "id",
	1:  "version",
	2:  "pageName",
	3:  "description",
	4:  "SystemOwnership",
	5:  "storesBeneficiaryAddress",
	6:  "storesHealthDisparityData",
	7:  "storesBankingData",
	8:  "costPerYear",
	9:  "numberOfFederalFteId",
	10: "numberOfFederalFte",
	11: "numberOfContractorFteId",
	12: "numberOfContractorFte",
	13: "numberOfSupportedUsersPerMonthId",
	14: "numberOfSupportedUsersPerMonth",
	15: "beneficiaryInformation",
	16: "editBeneficiaryInformation",
	17: "508UserInterface",
	18: "systemUIAccessibility",
}

// Decode decodes GatewaySystem20Census20Core20API200BusinessOwnerPostReq from json.
func (s *GatewaySystem20Census20Core20API200BusinessOwnerPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200BusinessOwnerPostReq to nil")
	}
	var requiredBitSet [3]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.ID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "pageName":
			if err := func() error {
				s.PageName.Reset()
				if err := s.PageName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageName\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "SystemOwnership":
			if err := func() error {
				s.SystemOwnership.Reset()
				if err := s.SystemOwnership.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SystemOwnership\"")
			}
		case "storesBeneficiaryAddress":
			if err := func() error {
				s.StoresBeneficiaryAddress.Reset()
				if err := s.StoresBeneficiaryAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"storesBeneficiaryAddress\"")
			}
		case "storesHealthDisparityData":
			if err := func() error {
				s.StoresHealthDisparityData.Reset()
				if err := s.StoresHealthDisparityData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"storesHealthDisparityData\"")
			}
		case "storesBankingData":
			if err := func() error {
				s.StoresBankingData.Reset()
				if err := s.StoresBankingData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"storesBankingData\"")
			}
		case "costPerYear":
			if err := func() error {
				s.CostPerYear.Reset()
				if err := s.CostPerYear.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"costPerYear\"")
			}
		case "numberOfFederalFteId":
			if err := func() error {
				s.NumberOfFederalFteId.Reset()
				if err := s.NumberOfFederalFteId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numberOfFederalFteId\"")
			}
		case "numberOfFederalFte":
			if err := func() error {
				s.NumberOfFederalFte.Reset()
				if err := s.NumberOfFederalFte.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numberOfFederalFte\"")
			}
		case "numberOfContractorFteId":
			if err := func() error {
				s.NumberOfContractorFteId.Reset()
				if err := s.NumberOfContractorFteId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numberOfContractorFteId\"")
			}
		case "numberOfContractorFte":
			if err := func() error {
				s.NumberOfContractorFte.Reset()
				if err := s.NumberOfContractorFte.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numberOfContractorFte\"")
			}
		case "numberOfSupportedUsersPerMonthId":
			if err := func() error {
				s.NumberOfSupportedUsersPerMonthId.Reset()
				if err := s.NumberOfSupportedUsersPerMonthId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numberOfSupportedUsersPerMonthId\"")
			}
		case "numberOfSupportedUsersPerMonth":
			if err := func() error {
				s.NumberOfSupportedUsersPerMonth.Reset()
				if err := s.NumberOfSupportedUsersPerMonth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numberOfSupportedUsersPerMonth\"")
			}
		case "beneficiaryInformation":
			if err := func() error {
				s.BeneficiaryInformation.Reset()
				if err := s.BeneficiaryInformation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"beneficiaryInformation\"")
			}
		case "editBeneficiaryInformation":
			if err := func() error {
				s.EditBeneficiaryInformation.Reset()
				if err := s.EditBeneficiaryInformation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"editBeneficiaryInformation\"")
			}
		case "508UserInterface":
			if err := func() error {
				s.R508UserInterface.Reset()
				if err := s.R508UserInterface.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"508UserInterface\"")
			}
		case "systemUIAccessibility":
			if err := func() error {
				s.SystemUIAccessibility.Reset()
				if err := s.SystemUIAccessibility.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemUIAccessibility\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200BusinessOwnerPostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [3]uint8{
		0b00000001,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200BusinessOwnerPostReq) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200BusinessOwnerPostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200BusinessOwnerPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200BusinessOwnerPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesDeleteOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesDeleteOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200DataExchangeNotesDeleteOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200DataExchangeNotesDeleteOK from json.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesDeleteOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200DataExchangeNotesDeleteOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200DataExchangeNotesDeleteOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesDeleteOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesDeleteOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.ExchangeNotes != nil {
			e.FieldStart("ExchangeNotes")
			e.ArrStart()
			for _, elem := range s.ExchangeNotes {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200DataExchangeNotesGetOK = [2]string{
	0: "count",
	1: "ExchangeNotes",
}

// Decode decodes GatewaySystem20Census20Core20API200DataExchangeNotesGetOK from json.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200DataExchangeNotesGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "ExchangeNotes":
			if err := func() error {
				s.ExchangeNotes = make([]GatewaySystem20Census20Core20API200DataExchangeNotesGetOKExchangeNotesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200DataExchangeNotesGetOKExchangeNotesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ExchangeNotes = append(s.ExchangeNotes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ExchangeNotes\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200DataExchangeNotesGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesGetOKExchangeNotesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesGetOKExchangeNotesItem) encodeFields(e *jx.Encoder) {
	{
		if s.NoteId.Set {
			e.FieldStart("noteId")
			s.NoteId.Encode(e)
		}
	}
	{
		if s.ExchangeId.Set {
			e.FieldStart("exchangeId")
			s.ExchangeId.Encode(e)
		}
	}
	{
		if s.UserId.Set {
			e.FieldStart("userId")
			s.UserId.Encode(e)
		}
	}
	{
		if s.CreatedOn.Set {
			e.FieldStart("createdOn")
			s.CreatedOn.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.Note.Set {
			e.FieldStart("note")
			s.Note.Encode(e)
		}
	}
	{
		if s.UserRole.Set {
			e.FieldStart("userRole")
			s.UserRole.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200DataExchangeNotesGetOKExchangeNotesItem = [6]string{
	0: "noteId",
	1: "exchangeId",
	2: "userId",
	3: "createdOn",
	4: "note",
	5: "userRole",
}

// Decode decodes GatewaySystem20Census20Core20API200DataExchangeNotesGetOKExchangeNotesItem from json.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesGetOKExchangeNotesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200DataExchangeNotesGetOKExchangeNotesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "noteId":
			if err := func() error {
				s.NoteId.Reset()
				if err := s.NoteId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"noteId\"")
			}
		case "exchangeId":
			if err := func() error {
				s.ExchangeId.Reset()
				if err := s.ExchangeId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeId\"")
			}
		case "userId":
			if err := func() error {
				s.UserId.Reset()
				if err := s.UserId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"userId\"")
			}
		case "createdOn":
			if err := func() error {
				s.CreatedOn.Reset()
				if err := s.CreatedOn.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"createdOn\"")
			}
		case "note":
			if err := func() error {
				s.Note.Reset()
				if err := s.Note.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"note\"")
			}
		case "userRole":
			if err := func() error {
				s.UserRole.Reset()
				if err := s.UserRole.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"userRole\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200DataExchangeNotesGetOKExchangeNotesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesGetOKExchangeNotesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesGetOKExchangeNotesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesPostCreated) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesPostCreated) encodeFields(e *jx.Encoder) {
	{
		if s.Inserted.Set {
			e.FieldStart("inserted")
			s.Inserted.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200DataExchangeNotesPostCreated = [2]string{
	0: "inserted",
	1: "updated",
}

// Decode decodes GatewaySystem20Census20Core20API200DataExchangeNotesPostCreated from json.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesPostCreated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200DataExchangeNotesPostCreated to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "inserted":
			if err := func() error {
				s.Inserted.Reset()
				if err := s.Inserted.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"inserted\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200DataExchangeNotesPostCreated")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesPostCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesPostCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesPostReq) encodeFields(e *jx.Encoder) {
	{
		if s.ExchangeNotes != nil {
			e.FieldStart("ExchangeNotes")
			e.ArrStart()
			for _, elem := range s.ExchangeNotes {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.EmailFlags.Set {
			e.FieldStart("EmailFlags")
			s.EmailFlags.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200DataExchangeNotesPostReq = [2]string{
	0: "ExchangeNotes",
	1: "EmailFlags",
}

// Decode decodes GatewaySystem20Census20Core20API200DataExchangeNotesPostReq from json.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200DataExchangeNotesPostReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ExchangeNotes":
			if err := func() error {
				s.ExchangeNotes = make([]GatewaySystem20Census20Core20API200DataExchangeNotesPostReqExchangeNotesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200DataExchangeNotesPostReqExchangeNotesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ExchangeNotes = append(s.ExchangeNotes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ExchangeNotes\"")
			}
		case "EmailFlags":
			if err := func() error {
				s.EmailFlags.Reset()
				if err := s.EmailFlags.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"EmailFlags\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200DataExchangeNotesPostReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesPostReqEmailFlags) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesPostReqEmailFlags) encodeFields(e *jx.Encoder) {
	{
		if s.NotifyReviewer.Set {
			e.FieldStart("notifyReviewer")
			s.NotifyReviewer.Encode(e)
		}
	}
	{
		if s.NotifyRespondent.Set {
			e.FieldStart("notifyRespondent")
			s.NotifyRespondent.Encode(e)
		}
	}
	{
		if s.IncludeHistory.Set {
			e.FieldStart("includeHistory")
			s.IncludeHistory.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200DataExchangeNotesPostReqEmailFlags = [3]string{
	0: "notifyReviewer",
	1: "notifyRespondent",
	2: "includeHistory",
}

// Decode decodes GatewaySystem20Census20Core20API200DataExchangeNotesPostReqEmailFlags from json.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesPostReqEmailFlags) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200DataExchangeNotesPostReqEmailFlags to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "notifyReviewer":
			if err := func() error {
				s.NotifyReviewer.Reset()
				if err := s.NotifyReviewer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"notifyReviewer\"")
			}
		case "notifyRespondent":
			if err := func() error {
				s.NotifyRespondent.Reset()
				if err := s.NotifyRespondent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"notifyRespondent\"")
			}
		case "includeHistory":
			if err := func() error {
				s.IncludeHistory.Reset()
				if err := s.IncludeHistory.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"includeHistory\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200DataExchangeNotesPostReqEmailFlags")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesPostReqEmailFlags) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesPostReqEmailFlags) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesPostReqExchangeNotesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesPostReqExchangeNotesItem) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("exchangeId")
		e.Str(s.ExchangeId)
	}
	{
		if s.Date.Set {
			e.FieldStart("date")
			s.Date.Encode(e, json.EncodeDateTime)
		}
	}
	{
		e.FieldStart("user")
		e.Str(s.User)
	}
	{
		if s.Role.Set {
			e.FieldStart("role")
			s.Role.Encode(e)
		}
	}
	{
		e.FieldStart("note")
		e.Str(s.Note)
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200DataExchangeNotesPostReqExchangeNotesItem = [5]string{
	0: "exchangeId",
	1: "date",
	2: "user",
	3: "role",
	4: "note",
}

// Decode decodes GatewaySystem20Census20Core20API200DataExchangeNotesPostReqExchangeNotesItem from json.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesPostReqExchangeNotesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200DataExchangeNotesPostReqExchangeNotesItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exchangeId":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.ExchangeId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeId\"")
			}
		case "date":
			if err := func() error {
				s.Date.Reset()
				if err := s.Date.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date\"")
			}
		case "user":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.User = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user\"")
			}
		case "role":
			if err := func() error {
				s.Role.Reset()
				if err := s.Role.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role\"")
			}
		case "note":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.Note = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"note\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200DataExchangeNotesPostReqExchangeNotesItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00010101,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200DataExchangeNotesPostReqExchangeNotesItem) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200DataExchangeNotesPostReqExchangeNotesItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesPostReqExchangeNotesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeNotesPostReqExchangeNotesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusDeleteBadRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusDeleteBadRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200DataExchangeStatusDeleteBadRequest = [1]string{
	0: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200DataExchangeStatusDeleteBadRequest from json.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusDeleteBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200DataExchangeStatusDeleteBadRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200DataExchangeStatusDeleteBadRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusDeleteBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusDeleteBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusDeleteOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusDeleteOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200DataExchangeStatusDeleteOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200DataExchangeStatusDeleteOK from json.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusDeleteOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200DataExchangeStatusDeleteOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200DataExchangeStatusDeleteOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusDeleteOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusDeleteOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusDeleteReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusDeleteReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("exchangeIds")
		e.ArrStart()
		for _, elem := range s.ExchangeIds {
			json.EncodeUUID(e, elem)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200DataExchangeStatusDeleteReq = [1]string{
	0: "exchangeIds",
}

// Decode decodes GatewaySystem20Census20Core20API200DataExchangeStatusDeleteReq from json.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusDeleteReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200DataExchangeStatusDeleteReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exchangeIds":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				s.ExchangeIds = make([]uuid.UUID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem uuid.UUID
					v, err := json.DecodeUUID(d)
					elem = v
					if err != nil {
						return err
					}
					s.ExchangeIds = append(s.ExchangeIds, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeIds\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200DataExchangeStatusDeleteReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200DataExchangeStatusDeleteReq) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200DataExchangeStatusDeleteReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusDeleteReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusDeleteReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.ExchangeStatus != nil {
			e.FieldStart("ExchangeStatus")
			e.ArrStart()
			for _, elem := range s.ExchangeStatus {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200DataExchangeStatusGetOK = [2]string{
	0: "count",
	1: "ExchangeStatus",
}

// Decode decodes GatewaySystem20Census20Core20API200DataExchangeStatusGetOK from json.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200DataExchangeStatusGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "ExchangeStatus":
			if err := func() error {
				s.ExchangeStatus = make([]GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ExchangeStatus = append(s.ExchangeStatus, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ExchangeStatus\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200DataExchangeStatusGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItem) encodeFields(e *jx.Encoder) {
	{
		if s.ExchangeId.Set {
			e.FieldStart("exchangeId")
			s.ExchangeId.Encode(e)
		}
	}
	{
		if s.SystemId.Set {
			e.FieldStart("systemId")
			s.SystemId.Encode(e)
		}
	}
	{
		if s.SystemStatus.Set {
			e.FieldStart("systemStatus")
			s.SystemStatus.Encode(e)
		}
	}
	{
		if s.PartnerId.Set {
			e.FieldStart("partnerId")
			s.PartnerId.Encode(e)
		}
	}
	{
		if s.PartnerStatus.Set {
			e.FieldStart("partnerStatus")
			s.PartnerStatus.Encode(e)
		}
	}
	{
		if s.ReviewerStatus.Set {
			e.FieldStart("reviewerStatus")
			s.ReviewerStatus.Encode(e)
		}
	}
	{
		if s.Direction.Set {
			e.FieldStart("direction")
			s.Direction.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItem = [7]string{
	0: "exchangeId",
	1: "systemId",
	2: "systemStatus",
	3: "partnerId",
	4: "partnerStatus",
	5: "reviewerStatus",
	6: "direction",
}

// Decode decodes GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItem from json.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exchangeId":
			if err := func() error {
				s.ExchangeId.Reset()
				if err := s.ExchangeId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeId\"")
			}
		case "systemId":
			if err := func() error {
				s.SystemId.Reset()
				if err := s.SystemId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "systemStatus":
			if err := func() error {
				s.SystemStatus.Reset()
				if err := s.SystemStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemStatus\"")
			}
		case "partnerId":
			if err := func() error {
				s.PartnerId.Reset()
				if err := s.PartnerId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"partnerId\"")
			}
		case "partnerStatus":
			if err := func() error {
				s.PartnerStatus.Reset()
				if err := s.PartnerStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"partnerStatus\"")
			}
		case "reviewerStatus":
			if err := func() error {
				s.ReviewerStatus.Reset()
				if err := s.ReviewerStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reviewerStatus\"")
			}
		case "direction":
			if err := func() error {
				s.Direction.Reset()
				if err := s.Direction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItemDirection as json.
func (s GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItemDirection) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItemDirection from json.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItemDirection) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItemDirection to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItemDirection(v) {
	case GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItemDirectionReceiver:
		*s = GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItemDirectionReceiver
	case GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItemDirectionSender:
		*s = GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItemDirectionSender
	default:
		*s = GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItemDirection(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItemDirection) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItemDirection) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200DrmGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200DrmGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Records != nil {
			e.FieldStart("records")
			e.ArrStart()
			for _, elem := range s.Records {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200DrmGetOK = [2]string{
	0: "result",
	1: "records",
}

// Decode decodes GatewaySystem20Census20Core20API200DrmGetOK from json.
func (s *GatewaySystem20Census20Core20API200DrmGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200DrmGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "records":
			if err := func() error {
				s.Records = make([]GatewaySystem20Census20Core20API200DrmGetOKRecordsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200DrmGetOKRecordsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Records = append(s.Records, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200DrmGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200DrmGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200DrmGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200DrmGetOKRecordsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200DrmGetOKRecordsItem) encodeFields(e *jx.Encoder) {
	{
		if s.DrmName.Set {
			e.FieldStart("drmName")
			s.DrmName.Encode(e)
		}
	}
	{
		if s.DrmCategory.Set {
			e.FieldStart("drmCategory")
			s.DrmCategory.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200DrmGetOKRecordsItem = [2]string{
	0: "drmName",
	1: "drmCategory",
}

// Decode decodes GatewaySystem20Census20Core20API200DrmGetOKRecordsItem from json.
func (s *GatewaySystem20Census20Core20API200DrmGetOKRecordsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200DrmGetOKRecordsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "drmName":
			if err := func() error {
				s.DrmName.Reset()
				if err := s.DrmName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"drmName\"")
			}
		case "drmCategory":
			if err := func() error {
				s.DrmCategory.Reset()
				if err := s.DrmCategory.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"drmCategory\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200DrmGetOKRecordsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200DrmGetOKRecordsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200DrmGetOKRecordsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200NoteListDeleteOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200NoteListDeleteOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200NoteListDeleteOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200NoteListDeleteOK from json.
func (s *GatewaySystem20Census20Core20API200NoteListDeleteOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200NoteListDeleteOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200NoteListDeleteOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200NoteListDeleteOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200NoteListDeleteOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200NoteListGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200NoteListGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.Notes != nil {
			e.FieldStart("Notes")
			e.ArrStart()
			for _, elem := range s.Notes {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200NoteListGetOK = [2]string{
	0: "count",
	1: "Notes",
}

// Decode decodes GatewaySystem20Census20Core20API200NoteListGetOK from json.
func (s *GatewaySystem20Census20Core20API200NoteListGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200NoteListGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "Notes":
			if err := func() error {
				s.Notes = make([]GatewaySystem20Census20Core20API200NoteListGetOKNotesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200NoteListGetOKNotesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Notes = append(s.Notes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Notes\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200NoteListGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200NoteListGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200NoteListGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200NoteListGetOKNotesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200NoteListGetOKNotesItem) encodeFields(e *jx.Encoder) {
	{
		if s.NoteId.Set {
			e.FieldStart("noteId")
			s.NoteId.Encode(e)
		}
	}
	{
		if s.SystemId.Set {
			e.FieldStart("systemId")
			s.SystemId.Encode(e)
		}
	}
	{
		if s.PageName.Set {
			e.FieldStart("pageName")
			s.PageName.Encode(e)
		}
	}
	{
		if s.UserId.Set {
			e.FieldStart("userId")
			s.UserId.Encode(e)
		}
	}
	{
		if s.UserFirst.Set {
			e.FieldStart("userFirst")
			s.UserFirst.Encode(e)
		}
	}
	{
		if s.UserLast.Set {
			e.FieldStart("userLast")
			s.UserLast.Encode(e)
		}
	}
	{
		if s.UserRole.Set {
			e.FieldStart("userRole")
			s.UserRole.Encode(e)
		}
	}
	{
		if s.Note.Set {
			e.FieldStart("note")
			s.Note.Encode(e)
		}
	}
	{
		if s.CreatedOn.Set {
			e.FieldStart("createdOn")
			s.CreatedOn.Encode(e, json.EncodeDateTime)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200NoteListGetOKNotesItem = [9]string{
	0: "noteId",
	1: "systemId",
	2: "pageName",
	3: "userId",
	4: "userFirst",
	5: "userLast",
	6: "userRole",
	7: "note",
	8: "createdOn",
}

// Decode decodes GatewaySystem20Census20Core20API200NoteListGetOKNotesItem from json.
func (s *GatewaySystem20Census20Core20API200NoteListGetOKNotesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200NoteListGetOKNotesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "noteId":
			if err := func() error {
				s.NoteId.Reset()
				if err := s.NoteId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"noteId\"")
			}
		case "systemId":
			if err := func() error {
				s.SystemId.Reset()
				if err := s.SystemId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "pageName":
			if err := func() error {
				s.PageName.Reset()
				if err := s.PageName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageName\"")
			}
		case "userId":
			if err := func() error {
				s.UserId.Reset()
				if err := s.UserId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"userId\"")
			}
		case "userFirst":
			if err := func() error {
				s.UserFirst.Reset()
				if err := s.UserFirst.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"userFirst\"")
			}
		case "userLast":
			if err := func() error {
				s.UserLast.Reset()
				if err := s.UserLast.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"userLast\"")
			}
		case "userRole":
			if err := func() error {
				s.UserRole.Reset()
				if err := s.UserRole.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"userRole\"")
			}
		case "note":
			if err := func() error {
				s.Note.Reset()
				if err := s.Note.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"note\"")
			}
		case "createdOn":
			if err := func() error {
				s.CreatedOn.Reset()
				if err := s.CreatedOn.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"createdOn\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200NoteListGetOKNotesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200NoteListGetOKNotesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200NoteListGetOKNotesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200NotePostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200NotePostOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("result")
		s.Result.Encode(e)
	}
	{
		e.FieldStart("message")
		e.ArrStart()
		for _, elem := range s.Message {
			e.Str(elem)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200NotePostOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200NotePostOK from json.
func (s *GatewaySystem20Census20Core20API200NotePostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200NotePostOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200NotePostOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200NotePostOK) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200NotePostOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200NotePostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200NotePostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200NotePostOKResult as json.
func (s GatewaySystem20Census20Core20API200NotePostOKResult) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200NotePostOKResult from json.
func (s *GatewaySystem20Census20Core20API200NotePostOKResult) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200NotePostOKResult to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200NotePostOKResult(v) {
	case GatewaySystem20Census20Core20API200NotePostOKResultSuccess:
		*s = GatewaySystem20Census20Core20API200NotePostOKResultSuccess
	default:
		*s = GatewaySystem20Census20Core20API200NotePostOKResult(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200NotePostOKResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200NotePostOKResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200NotePostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200NotePostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("Notes")
		e.ArrStart()
		for _, elem := range s.Notes {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	{
		if s.EmailFlags.Set {
			e.FieldStart("EmailFlags")
			s.EmailFlags.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200NotePostReq = [2]string{
	0: "Notes",
	1: "EmailFlags",
}

// Decode decodes GatewaySystem20Census20Core20API200NotePostReq from json.
func (s *GatewaySystem20Census20Core20API200NotePostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200NotePostReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "Notes":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				s.Notes = make([]GatewaySystem20Census20Core20API200NotePostReqNotesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200NotePostReqNotesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Notes = append(s.Notes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Notes\"")
			}
		case "EmailFlags":
			if err := func() error {
				s.EmailFlags.Reset()
				if err := s.EmailFlags.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"EmailFlags\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200NotePostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200NotePostReq) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200NotePostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200NotePostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200NotePostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200NotePostReqEmailFlags) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200NotePostReqEmailFlags) encodeFields(e *jx.Encoder) {
	{
		if s.NotifyReviewer.Set {
			e.FieldStart("notifyReviewer")
			s.NotifyReviewer.Encode(e)
		}
	}
	{
		if s.NotifyRespondent.Set {
			e.FieldStart("notifyRespondent")
			s.NotifyRespondent.Encode(e)
		}
	}
	{
		if s.IncludeHistory.Set {
			e.FieldStart("includeHistory")
			s.IncludeHistory.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200NotePostReqEmailFlags = [3]string{
	0: "notifyReviewer",
	1: "notifyRespondent",
	2: "includeHistory",
}

// Decode decodes GatewaySystem20Census20Core20API200NotePostReqEmailFlags from json.
func (s *GatewaySystem20Census20Core20API200NotePostReqEmailFlags) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200NotePostReqEmailFlags to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "notifyReviewer":
			if err := func() error {
				s.NotifyReviewer.Reset()
				if err := s.NotifyReviewer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"notifyReviewer\"")
			}
		case "notifyRespondent":
			if err := func() error {
				s.NotifyRespondent.Reset()
				if err := s.NotifyRespondent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"notifyRespondent\"")
			}
		case "includeHistory":
			if err := func() error {
				s.IncludeHistory.Reset()
				if err := s.IncludeHistory.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"includeHistory\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200NotePostReqEmailFlags")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200NotePostReqEmailFlags) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200NotePostReqEmailFlags) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200NotePostReqNotesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200NotePostReqNotesItem) encodeFields(e *jx.Encoder) {
	{
		if s.NoteId.Set {
			e.FieldStart("noteId")
			s.NoteId.Encode(e)
		}
	}
	{
		e.FieldStart("systemId")
		e.Str(s.SystemId)
	}
	{
		e.FieldStart("pageName")
		e.Str(s.PageName)
	}
	{
		e.FieldStart("userId")
		e.Str(s.UserId)
	}
	{
		if s.UserFirst.Set {
			e.FieldStart("userFirst")
			s.UserFirst.Encode(e)
		}
	}
	{
		if s.UserLast.Set {
			e.FieldStart("userLast")
			s.UserLast.Encode(e)
		}
	}
	{
		if s.UserRole.Set {
			e.FieldStart("userRole")
			s.UserRole.Encode(e)
		}
	}
	{
		e.FieldStart("note")
		e.Str(s.Note)
	}
	{
		if s.CreatedOn.Set {
			e.FieldStart("createdOn")
			s.CreatedOn.Encode(e, json.EncodeDateTime)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200NotePostReqNotesItem = [9]string{
	0: "noteId",
	1: "systemId",
	2: "pageName",
	3: "userId",
	4: "userFirst",
	5: "userLast",
	6: "userRole",
	7: "note",
	8: "createdOn",
}

// Decode decodes GatewaySystem20Census20Core20API200NotePostReqNotesItem from json.
func (s *GatewaySystem20Census20Core20API200NotePostReqNotesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200NotePostReqNotesItem to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "noteId":
			if err := func() error {
				s.NoteId.Reset()
				if err := s.NoteId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"noteId\"")
			}
		case "systemId":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.SystemId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "pageName":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.PageName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageName\"")
			}
		case "userId":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.UserId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"userId\"")
			}
		case "userFirst":
			if err := func() error {
				s.UserFirst.Reset()
				if err := s.UserFirst.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"userFirst\"")
			}
		case "userLast":
			if err := func() error {
				s.UserLast.Reset()
				if err := s.UserLast.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"userLast\"")
			}
		case "userRole":
			if err := func() error {
				s.UserRole.Reset()
				if err := s.UserRole.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"userRole\"")
			}
		case "note":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				v, err := d.Str()
				s.Note = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"note\"")
			}
		case "createdOn":
			if err := func() error {
				s.CreatedOn.Reset()
				if err := s.CreatedOn.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"createdOn\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200NotePostReqNotesItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b10001110,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200NotePostReqNotesItem) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200NotePostReqNotesItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200NotePostReqNotesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200NotePostReqNotesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200NotePutOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200NotePutOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200NotePutOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200NotePutOK from json.
func (s *GatewaySystem20Census20Core20API200NotePutOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200NotePutOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200NotePutOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200NotePutOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200NotePutOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200NotePutReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200NotePutReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("note")
		e.Str(s.Note)
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200NotePutReq = [1]string{
	0: "note",
}

// Decode decodes GatewaySystem20Census20Core20API200NotePutReq from json.
func (s *GatewaySystem20Census20Core20API200NotePutReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200NotePutReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "note":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Note = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"note\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200NotePutReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200NotePutReq) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200NotePutReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200NotePutReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200NotePutReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageBusinessOwnerGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageBusinessOwnerGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PageName.Set {
			e.FieldStart("pageName")
			s.PageName.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.SystemOwnership.Set {
			e.FieldStart("SystemOwnership")
			s.SystemOwnership.Encode(e)
		}
	}
	{
		if s.CostPerYear.Set {
			e.FieldStart("costPerYear")
			s.CostPerYear.Encode(e)
		}
	}
	{
		if s.NumberOfFederalFte.Set {
			e.FieldStart("numberOfFederalFte")
			s.NumberOfFederalFte.Encode(e)
		}
	}
	{
		if s.NumberOfContractorFte.Set {
			e.FieldStart("numberOfContractorFte")
			s.NumberOfContractorFte.Encode(e)
		}
	}
	{
		if s.NumberOfSupportedUsersPerMonth.Set {
			e.FieldStart("numberOfSupportedUsersPerMonth")
			s.NumberOfSupportedUsersPerMonth.Encode(e)
		}
	}
	{
		if s.EditBeneficiaryInformation.Set {
			e.FieldStart("editBeneficiaryInformation")
			s.EditBeneficiaryInformation.Encode(e)
		}
	}
	{
		if s.StoresHealthDisparityData.Set {
			e.FieldStart("storesHealthDisparityData")
			s.StoresHealthDisparityData.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageBusinessOwnerGetOK = [10]string{
	0: "id",
	1: "pageName",
	2: "description",
	3: "SystemOwnership",
	4: "costPerYear",
	5: "numberOfFederalFte",
	6: "numberOfContractorFte",
	7: "numberOfSupportedUsersPerMonth",
	8: "editBeneficiaryInformation",
	9: "storesHealthDisparityData",
}

// Decode decodes GatewaySystem20Census20Core20API200PageBusinessOwnerGetOK from json.
func (s *GatewaySystem20Census20Core20API200PageBusinessOwnerGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageBusinessOwnerGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "pageName":
			if err := func() error {
				s.PageName.Reset()
				if err := s.PageName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageName\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "SystemOwnership":
			if err := func() error {
				s.SystemOwnership.Reset()
				if err := s.SystemOwnership.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SystemOwnership\"")
			}
		case "costPerYear":
			if err := func() error {
				s.CostPerYear.Reset()
				if err := s.CostPerYear.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"costPerYear\"")
			}
		case "numberOfFederalFte":
			if err := func() error {
				s.NumberOfFederalFte.Reset()
				if err := s.NumberOfFederalFte.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numberOfFederalFte\"")
			}
		case "numberOfContractorFte":
			if err := func() error {
				s.NumberOfContractorFte.Reset()
				if err := s.NumberOfContractorFte.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numberOfContractorFte\"")
			}
		case "numberOfSupportedUsersPerMonth":
			if err := func() error {
				s.NumberOfSupportedUsersPerMonth.Reset()
				if err := s.NumberOfSupportedUsersPerMonth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numberOfSupportedUsersPerMonth\"")
			}
		case "editBeneficiaryInformation":
			if err := func() error {
				s.EditBeneficiaryInformation.Reset()
				if err := s.EditBeneficiaryInformation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"editBeneficiaryInformation\"")
			}
		case "storesHealthDisparityData":
			if err := func() error {
				s.StoresHealthDisparityData.Reset()
				if err := s.StoresHealthDisparityData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"storesHealthDisparityData\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageBusinessOwnerGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageBusinessOwnerGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageBusinessOwnerGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.SystemId.Set {
			e.FieldStart("systemId")
			s.SystemId.Encode(e)
		}
	}
	{
		if s.PageName.Set {
			e.FieldStart("pageName")
			s.PageName.Encode(e)
		}
	}
	{
		if s.MovingToCloud.Set {
			e.FieldStart("movingToCloud")
			s.MovingToCloud.Encode(e)
		}
	}
	{
		if s.MovingToCloudDate.Set {
			e.FieldStart("movingToCloudDate")
			s.MovingToCloudDate.Encode(e, json.EncodeDate)
		}
	}
	{
		e.FieldStart("count")
		e.Int(s.Count)
	}
	{
		if s.Deployments != nil {
			e.FieldStart("Deployments")
			e.ArrStart()
			for _, elem := range s.Deployments {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataCentersGetOK = [6]string{
	0: "systemId",
	1: "pageName",
	2: "movingToCloud",
	3: "movingToCloudDate",
	4: "count",
	5: "Deployments",
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataCentersGetOK from json.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataCentersGetOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "systemId":
			if err := func() error {
				s.SystemId.Reset()
				if err := s.SystemId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "pageName":
			if err := func() error {
				s.PageName.Reset()
				if err := s.PageName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageName\"")
			}
		case "movingToCloud":
			if err := func() error {
				s.MovingToCloud.Reset()
				if err := s.MovingToCloud.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"movingToCloud\"")
			}
		case "movingToCloudDate":
			if err := func() error {
				s.MovingToCloudDate.Reset()
				if err := s.MovingToCloudDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"movingToCloudDate\"")
			}
		case "count":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Int()
				s.Count = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "Deployments":
			if err := func() error {
				s.Deployments = make([]GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Deployments = append(s.Deployments, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Deployments\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageDataCentersGetOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00010000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataCentersGetOK) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataCentersGetOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Deleted.Set {
			e.FieldStart("deleted")
			s.Deleted.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.Deployment.Set {
			e.FieldStart("Deployment")
			s.Deployment.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItem = [3]string{
	0: "deleted",
	1: "updated",
	2: "Deployment",
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItem from json.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "deleted":
			if err := func() error {
				s.Deleted.Reset()
				if err := s.Deleted.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deleted\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "Deployment":
			if err := func() error {
				s.Deployment.Reset()
				if err := s.Deployment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Deployment\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeployment) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeployment) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("id")
		e.Str(s.ID)
	}
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.DeploymentType.Set {
			e.FieldStart("deploymentType")
			s.DeploymentType.Encode(e)
		}
	}
	{
		e.FieldStart("systemId")
		e.Str(s.SystemId)
	}
	{
		if s.SystemName.Set {
			e.FieldStart("systemName")
			s.SystemName.Encode(e)
		}
	}
	{
		if s.SystemVersion.Set {
			e.FieldStart("systemVersion")
			s.SystemVersion.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.State.Set {
			e.FieldStart("state")
			s.State.Encode(e)
		}
	}
	{
		if s.StartDate.Set {
			e.FieldStart("startDate")
			s.StartDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.EndDate.Set {
			e.FieldStart("endDate")
			s.EndDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.DeploymentElementId.Set {
			e.FieldStart("deploymentElementId")
			s.DeploymentElementId.Encode(e)
		}
	}
	{
		if s.ContractorName.Set {
			e.FieldStart("contractorName")
			s.ContractorName.Encode(e)
		}
	}
	{
		if s.HasProductionData.Set {
			e.FieldStart("hasProductionData")
			s.HasProductionData.Encode(e)
		}
	}
	{
		if s.WanType.Set {
			e.FieldStart("wanType")
			s.WanType.Encode(e)
		}
	}
	{
		if s.WanTypeOther.Set {
			e.FieldStart("wanTypeOther")
			s.WanTypeOther.Encode(e)
		}
	}
	{
		if s.UsersRequiringMFA.Set {
			e.FieldStart("usersRequiringMFA")
			s.UsersRequiringMFA.Encode(e)
		}
	}
	{
		if s.OtherSpecialUsers.Set {
			e.FieldStart("otherSpecialUsers")
			s.OtherSpecialUsers.Encode(e)
		}
	}
	{
		if s.NetworkEncryption.Set {
			e.FieldStart("networkEncryption")
			s.NetworkEncryption.Encode(e)
		}
	}
	{
		if s.AwsEnclave.Set {
			e.FieldStart("awsEnclave")
			s.AwsEnclave.Encode(e)
		}
	}
	{
		if s.AwsEnclaveOther.Set {
			e.FieldStart("awsEnclaveOther")
			s.AwsEnclaveOther.Encode(e)
		}
	}
	{
		if s.DataCenter.Set {
			e.FieldStart("DataCenter")
			s.DataCenter.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeployment = [22]string{
	0:  "id",
	1:  "name",
	2:  "description",
	3:  "deploymentType",
	4:  "systemId",
	5:  "systemName",
	6:  "systemVersion",
	7:  "status",
	8:  "state",
	9:  "startDate",
	10: "endDate",
	11: "deploymentElementId",
	12: "contractorName",
	13: "hasProductionData",
	14: "wanType",
	15: "wanTypeOther",
	16: "usersRequiringMFA",
	17: "otherSpecialUsers",
	18: "networkEncryption",
	19: "awsEnclave",
	20: "awsEnclaveOther",
	21: "DataCenter",
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeployment from json.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeployment) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeployment to nil")
	}
	var requiredBitSet [3]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.ID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "deploymentType":
			if err := func() error {
				s.DeploymentType.Reset()
				if err := s.DeploymentType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deploymentType\"")
			}
		case "systemId":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.SystemId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "systemName":
			if err := func() error {
				s.SystemName.Reset()
				if err := s.SystemName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemName\"")
			}
		case "systemVersion":
			if err := func() error {
				s.SystemVersion.Reset()
				if err := s.SystemVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemVersion\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "state":
			if err := func() error {
				s.State.Reset()
				if err := s.State.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state\"")
			}
		case "startDate":
			if err := func() error {
				s.StartDate.Reset()
				if err := s.StartDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"startDate\"")
			}
		case "endDate":
			if err := func() error {
				s.EndDate.Reset()
				if err := s.EndDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"endDate\"")
			}
		case "deploymentElementId":
			if err := func() error {
				s.DeploymentElementId.Reset()
				if err := s.DeploymentElementId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deploymentElementId\"")
			}
		case "contractorName":
			if err := func() error {
				s.ContractorName.Reset()
				if err := s.ContractorName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contractorName\"")
			}
		case "hasProductionData":
			if err := func() error {
				s.HasProductionData.Reset()
				if err := s.HasProductionData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hasProductionData\"")
			}
		case "wanType":
			if err := func() error {
				s.WanType.Reset()
				if err := s.WanType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"wanType\"")
			}
		case "wanTypeOther":
			if err := func() error {
				s.WanTypeOther.Reset()
				if err := s.WanTypeOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"wanTypeOther\"")
			}
		case "usersRequiringMFA":
			if err := func() error {
				s.UsersRequiringMFA.Reset()
				if err := s.UsersRequiringMFA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usersRequiringMFA\"")
			}
		case "otherSpecialUsers":
			if err := func() error {
				s.OtherSpecialUsers.Reset()
				if err := s.OtherSpecialUsers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"otherSpecialUsers\"")
			}
		case "networkEncryption":
			if err := func() error {
				s.NetworkEncryption.Reset()
				if err := s.NetworkEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"networkEncryption\"")
			}
		case "awsEnclave":
			if err := func() error {
				s.AwsEnclave.Reset()
				if err := s.AwsEnclave.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"awsEnclave\"")
			}
		case "awsEnclaveOther":
			if err := func() error {
				s.AwsEnclaveOther.Reset()
				if err := s.AwsEnclaveOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"awsEnclaveOther\"")
			}
		case "DataCenter":
			if err := func() error {
				s.DataCenter.Reset()
				if err := s.DataCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DataCenter\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeployment")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [3]uint8{
		0b00010011,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeployment) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeployment[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeployment) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeployment) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenter) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenter) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.State.Set {
			e.FieldStart("state")
			s.State.Encode(e)
		}
	}
	{
		if s.StartDate.Set {
			e.FieldStart("startDate")
			s.StartDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.EndDate.Set {
			e.FieldStart("endDate")
			s.EndDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.Address1.Set {
			e.FieldStart("address1")
			s.Address1.Encode(e)
		}
	}
	{
		if s.Address2.Set {
			e.FieldStart("address2")
			s.Address2.Encode(e)
		}
	}
	{
		if s.City.Set {
			e.FieldStart("city")
			s.City.Encode(e)
		}
	}
	{
		if s.AddressState.Set {
			e.FieldStart("addressState")
			s.AddressState.Encode(e)
		}
	}
	{
		if s.Zip.Set {
			e.FieldStart("zip")
			s.Zip.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenter = [13]string{
	0:  "id",
	1:  "name",
	2:  "version",
	3:  "description",
	4:  "status",
	5:  "state",
	6:  "startDate",
	7:  "endDate",
	8:  "address1",
	9:  "address2",
	10: "city",
	11: "addressState",
	12: "zip",
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenter from json.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenter) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenter to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "state":
			if err := func() error {
				s.State.Reset()
				if err := s.State.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state\"")
			}
		case "startDate":
			if err := func() error {
				s.StartDate.Reset()
				if err := s.StartDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"startDate\"")
			}
		case "endDate":
			if err := func() error {
				s.EndDate.Reset()
				if err := s.EndDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"endDate\"")
			}
		case "address1":
			if err := func() error {
				s.Address1.Reset()
				if err := s.Address1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address1\"")
			}
		case "address2":
			if err := func() error {
				s.Address2.Reset()
				if err := s.Address2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address2\"")
			}
		case "city":
			if err := func() error {
				s.City.Reset()
				if err := s.City.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"city\"")
			}
		case "addressState":
			if err := func() error {
				s.AddressState.Reset()
				if err := s.AddressState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addressState\"")
			}
		case "zip":
			if err := func() error {
				s.Zip.Reset()
				if err := s.Zip.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zip\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenter")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenter) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenter) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterState as json.
func (s GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterState) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterState from json.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterState) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterState to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterState(v) {
	case GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStateActive:
		*s = GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStateActive
	case GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStatePlanned:
		*s = GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStatePlanned
	case GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStateRetired:
		*s = GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStateRetired
	default:
		*s = GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterState(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStatus as json.
func (s GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStatus from json.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStatus(v) {
	case GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStatusApproved:
		*s = GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStatusApproved
	case GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStatusDraft:
		*s = GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStatusDraft
	default:
		*s = GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentType as json.
func (s GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentType from json.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentType(v) {
	case GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentTypeDevelopment:
		*s = GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentTypeDevelopment
	case GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentTypeImplementation:
		*s = GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentTypeImplementation
	case GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentTypeIntegration:
		*s = GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentTypeIntegration
	case GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentTypeProduction:
		*s = GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentTypeProduction
	case GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentTypeTesting:
		*s = GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentTypeTesting
	case GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentTypeTraining:
		*s = GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentTypeTraining
	case GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentTypeValidation:
		*s = GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentTypeValidation
	case GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentTypeOther:
		*s = GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentTypeOther
	default:
		*s = GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentState as json.
func (s GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentState) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentState from json.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentState) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentState to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentState(v) {
	case GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStateActive:
		*s = GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStateActive
	case GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStatePlanned:
		*s = GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStatePlanned
	case GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStateRetired:
		*s = GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStateRetired
	default:
		*s = GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentState(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStatus as json.
func (s GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStatus from json.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStatus(v) {
	case GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStatusApproved:
		*s = GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStatusApproved
	case GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStatusDraft:
		*s = GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStatusDraft
	default:
		*s = GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostBadRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostBadRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataCentersPostBadRequest = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataCentersPostBadRequest from json.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataCentersPostBadRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageDataCentersPostBadRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataCentersPostOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataCentersPostOK from json.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataCentersPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageDataCentersPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("systemId")
		e.Str(s.SystemId)
	}
	{
		if s.PageName.Set {
			e.FieldStart("pageName")
			s.PageName.Encode(e)
		}
	}
	{
		if s.MovingToCloud.Set {
			e.FieldStart("movingToCloud")
			s.MovingToCloud.Encode(e)
		}
	}
	{
		if s.MovingToCloudDate.Set {
			e.FieldStart("movingToCloudDate")
			s.MovingToCloudDate.Encode(e)
		}
	}
	{
		if s.Deployments.Set {
			e.FieldStart("Deployments")
			s.Deployments.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataCentersPostReq = [5]string{
	0: "systemId",
	1: "pageName",
	2: "movingToCloud",
	3: "movingToCloudDate",
	4: "Deployments",
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataCentersPostReq from json.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataCentersPostReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "systemId":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.SystemId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "pageName":
			if err := func() error {
				s.PageName.Reset()
				if err := s.PageName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageName\"")
			}
		case "movingToCloud":
			if err := func() error {
				s.MovingToCloud.Reset()
				if err := s.MovingToCloud.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"movingToCloud\"")
			}
		case "movingToCloudDate":
			if err := func() error {
				s.MovingToCloudDate.Reset()
				if err := s.MovingToCloudDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"movingToCloudDate\"")
			}
		case "Deployments":
			if err := func() error {
				s.Deployments.Reset()
				if err := s.Deployments.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Deployments\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageDataCentersPostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataCentersPostReq) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataCentersPostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.DeploymentType.Set {
			e.FieldStart("deploymentType")
			s.DeploymentType.Encode(e)
		}
	}
	{
		if s.SystemId.Set {
			e.FieldStart("systemId")
			s.SystemId.Encode(e)
		}
	}
	{
		if s.SystemName.Set {
			e.FieldStart("systemName")
			s.SystemName.Encode(e)
		}
	}
	{
		if s.SystemVersion.Set {
			e.FieldStart("systemVersion")
			s.SystemVersion.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.State.Set {
			e.FieldStart("state")
			s.State.Encode(e)
		}
	}
	{
		if s.StartDate.Set {
			e.FieldStart("startDate")
			s.StartDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.EndDate.Set {
			e.FieldStart("endDate")
			s.EndDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.DeploymentElementId.Set {
			e.FieldStart("deploymentElementId")
			s.DeploymentElementId.Encode(e)
		}
	}
	{
		if s.ContractorName.Set {
			e.FieldStart("contractorName")
			s.ContractorName.Encode(e)
		}
	}
	{
		if s.HasProductionData.Set {
			e.FieldStart("hasProductionData")
			s.HasProductionData.Encode(e)
		}
	}
	{
		if s.WanType.Set {
			e.FieldStart("wanType")
			s.WanType.Encode(e)
		}
	}
	{
		if s.WanTypeOther.Set {
			e.FieldStart("wanTypeOther")
			s.WanTypeOther.Encode(e)
		}
	}
	{
		if s.UsersRequiringMFA.Set {
			e.FieldStart("usersRequiringMFA")
			s.UsersRequiringMFA.Encode(e)
		}
	}
	{
		if s.OtherSpecialUsers.Set {
			e.FieldStart("otherSpecialUsers")
			s.OtherSpecialUsers.Encode(e)
		}
	}
	{
		if s.NetworkEncryption.Set {
			e.FieldStart("networkEncryption")
			s.NetworkEncryption.Encode(e)
		}
	}
	{
		if s.AwsEnclave.Set {
			e.FieldStart("awsEnclave")
			s.AwsEnclave.Encode(e)
		}
	}
	{
		if s.AwsEnclaveOther.Set {
			e.FieldStart("awsEnclaveOther")
			s.AwsEnclaveOther.Encode(e)
		}
	}
	{
		if s.DataCenter.Set {
			e.FieldStart("DataCenter")
			s.DataCenter.Encode(e)
		}
	}
	{
		if s.Deleted.Set {
			e.FieldStart("deleted")
			s.Deleted.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItem = [24]string{
	0:  "id",
	1:  "name",
	2:  "description",
	3:  "deploymentType",
	4:  "systemId",
	5:  "systemName",
	6:  "systemVersion",
	7:  "status",
	8:  "state",
	9:  "startDate",
	10: "endDate",
	11: "deploymentElementId",
	12: "contractorName",
	13: "hasProductionData",
	14: "wanType",
	15: "wanTypeOther",
	16: "usersRequiringMFA",
	17: "otherSpecialUsers",
	18: "networkEncryption",
	19: "awsEnclave",
	20: "awsEnclaveOther",
	21: "DataCenter",
	22: "deleted",
	23: "updated",
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItem from json.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "deploymentType":
			if err := func() error {
				s.DeploymentType.Reset()
				if err := s.DeploymentType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deploymentType\"")
			}
		case "systemId":
			if err := func() error {
				s.SystemId.Reset()
				if err := s.SystemId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "systemName":
			if err := func() error {
				s.SystemName.Reset()
				if err := s.SystemName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemName\"")
			}
		case "systemVersion":
			if err := func() error {
				s.SystemVersion.Reset()
				if err := s.SystemVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemVersion\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "state":
			if err := func() error {
				s.State.Reset()
				if err := s.State.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state\"")
			}
		case "startDate":
			if err := func() error {
				s.StartDate.Reset()
				if err := s.StartDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"startDate\"")
			}
		case "endDate":
			if err := func() error {
				s.EndDate.Reset()
				if err := s.EndDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"endDate\"")
			}
		case "deploymentElementId":
			if err := func() error {
				s.DeploymentElementId.Reset()
				if err := s.DeploymentElementId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deploymentElementId\"")
			}
		case "contractorName":
			if err := func() error {
				s.ContractorName.Reset()
				if err := s.ContractorName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contractorName\"")
			}
		case "hasProductionData":
			if err := func() error {
				s.HasProductionData.Reset()
				if err := s.HasProductionData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hasProductionData\"")
			}
		case "wanType":
			if err := func() error {
				s.WanType.Reset()
				if err := s.WanType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"wanType\"")
			}
		case "wanTypeOther":
			if err := func() error {
				s.WanTypeOther.Reset()
				if err := s.WanTypeOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"wanTypeOther\"")
			}
		case "usersRequiringMFA":
			if err := func() error {
				s.UsersRequiringMFA.Reset()
				if err := s.UsersRequiringMFA.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usersRequiringMFA\"")
			}
		case "otherSpecialUsers":
			if err := func() error {
				s.OtherSpecialUsers.Reset()
				if err := s.OtherSpecialUsers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"otherSpecialUsers\"")
			}
		case "networkEncryption":
			if err := func() error {
				s.NetworkEncryption.Reset()
				if err := s.NetworkEncryption.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"networkEncryption\"")
			}
		case "awsEnclave":
			if err := func() error {
				s.AwsEnclave.Reset()
				if err := s.AwsEnclave.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"awsEnclave\"")
			}
		case "awsEnclaveOther":
			if err := func() error {
				s.AwsEnclaveOther.Reset()
				if err := s.AwsEnclaveOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"awsEnclaveOther\"")
			}
		case "DataCenter":
			if err := func() error {
				s.DataCenter.Reset()
				if err := s.DataCenter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DataCenter\"")
			}
		case "deleted":
			if err := func() error {
				s.Deleted.Reset()
				if err := s.Deleted.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deleted\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItemDataCenter) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItemDataCenter) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.State.Set {
			e.FieldStart("state")
			s.State.Encode(e)
		}
	}
	{
		if s.StartDate.Set {
			e.FieldStart("startDate")
			s.StartDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.EndDate.Set {
			e.FieldStart("endDate")
			s.EndDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.Address1.Set {
			e.FieldStart("address1")
			s.Address1.Encode(e)
		}
	}
	{
		if s.Address2.Set {
			e.FieldStart("address2")
			s.Address2.Encode(e)
		}
	}
	{
		if s.City.Set {
			e.FieldStart("city")
			s.City.Encode(e)
		}
	}
	{
		if s.AddressState.Set {
			e.FieldStart("addressState")
			s.AddressState.Encode(e)
		}
	}
	{
		if s.Zip.Set {
			e.FieldStart("zip")
			s.Zip.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItemDataCenter = [13]string{
	0:  "id",
	1:  "name",
	2:  "version",
	3:  "description",
	4:  "status",
	5:  "state",
	6:  "startDate",
	7:  "endDate",
	8:  "address1",
	9:  "address2",
	10: "city",
	11: "addressState",
	12: "zip",
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItemDataCenter from json.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItemDataCenter) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItemDataCenter to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "state":
			if err := func() error {
				s.State.Reset()
				if err := s.State.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state\"")
			}
		case "startDate":
			if err := func() error {
				s.StartDate.Reset()
				if err := s.StartDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"startDate\"")
			}
		case "endDate":
			if err := func() error {
				s.EndDate.Reset()
				if err := s.EndDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"endDate\"")
			}
		case "address1":
			if err := func() error {
				s.Address1.Reset()
				if err := s.Address1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address1\"")
			}
		case "address2":
			if err := func() error {
				s.Address2.Reset()
				if err := s.Address2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address2\"")
			}
		case "city":
			if err := func() error {
				s.City.Reset()
				if err := s.City.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"city\"")
			}
		case "addressState":
			if err := func() error {
				s.AddressState.Reset()
				if err := s.AddressState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addressState\"")
			}
		case "zip":
			if err := func() error {
				s.Zip.Reset()
				if err := s.Zip.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zip\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItemDataCenter")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItemDataCenter) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItemDataCenter) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.SystemId.Set {
			e.FieldStart("systemId")
			s.SystemId.Encode(e)
		}
	}
	{
		if s.PageName.Set {
			e.FieldStart("pageName")
			s.PageName.Encode(e)
		}
	}
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.DataExchanges != nil {
			e.FieldStart("DataExchanges")
			e.ArrStart()
			for _, elem := range s.DataExchanges {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataExchangeGetOK = [4]string{
	0: "systemId",
	1: "pageName",
	2: "count",
	3: "DataExchanges",
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOK from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangeGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "systemId":
			if err := func() error {
				s.SystemId.Reset()
				if err := s.SystemId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "pageName":
			if err := func() error {
				s.PageName.Reset()
				if err := s.PageName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageName\"")
			}
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "DataExchanges":
			if err := func() error {
				s.DataExchanges = make([]GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.DataExchanges = append(s.DataExchanges, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DataExchanges\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageDataExchangeGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Direction.Set {
			e.FieldStart("direction")
			s.Direction.Encode(e)
		}
	}
	{
		if s.Deleted.Set {
			e.FieldStart("deleted")
			s.Deleted.Encode(e)
		}
	}
	{
		if s.Exchange.Set {
			e.FieldStart("Exchange")
			s.Exchange.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("Status")
			s.Status.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItem = [4]string{
	0: "direction",
	1: "deleted",
	2: "Exchange",
	3: "Status",
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItem from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "direction":
			if err := func() error {
				s.Direction.Reset()
				if err := s.Direction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		case "deleted":
			if err := func() error {
				s.Deleted.Reset()
				if err := s.Deleted.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deleted\"")
			}
		case "Exchange":
			if err := func() error {
				s.Exchange.Reset()
				if err := s.Exchange.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Exchange\"")
			}
		case "Status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchange) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchange) encodeFields(e *jx.Encoder) {
	{
		if s.ExchangeId.Set {
			e.FieldStart("exchangeId")
			s.ExchangeId.Encode(e)
		}
	}
	{
		if s.ExchangeName.Set {
			e.FieldStart("exchangeName")
			s.ExchangeName.Encode(e)
		}
	}
	{
		if s.ExchangeDescription.Set {
			e.FieldStart("exchangeDescription")
			s.ExchangeDescription.Encode(e)
		}
	}
	{
		if s.ExchangeVersion.Set {
			e.FieldStart("exchangeVersion")
			s.ExchangeVersion.Encode(e)
		}
	}
	{
		if s.ExchangeState.Set {
			e.FieldStart("exchangeState")
			s.ExchangeState.Encode(e)
		}
	}
	{
		if s.ExchangeStartDate.Set {
			e.FieldStart("exchangeStartDate")
			s.ExchangeStartDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.ExchangeEndDate.Set {
			e.FieldStart("exchangeEndDate")
			s.ExchangeEndDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.ExchangeRetiredDate.Set {
			e.FieldStart("exchangeRetiredDate")
			s.ExchangeRetiredDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.FromOwnerId.Set {
			e.FieldStart("fromOwnerId")
			s.FromOwnerId.Encode(e)
		}
	}
	{
		if s.FromOwnerName.Set {
			e.FieldStart("fromOwnerName")
			s.FromOwnerName.Encode(e)
		}
	}
	{
		if s.FromOwnerType.Set {
			e.FieldStart("fromOwnerType")
			s.FromOwnerType.Encode(e)
		}
	}
	{
		if s.ToOwnerId.Set {
			e.FieldStart("toOwnerId")
			s.ToOwnerId.Encode(e)
		}
	}
	{
		if s.ToOwnerName.Set {
			e.FieldStart("toOwnerName")
			s.ToOwnerName.Encode(e)
		}
	}
	{
		if s.ToOwnerType.Set {
			e.FieldStart("toOwnerType")
			s.ToOwnerType.Encode(e)
		}
	}
	{
		if s.ConnectionFrequency.Set {
			e.FieldStart("connectionFrequency")
			s.ConnectionFrequency.Encode(e)
		}
	}
	{
		if s.DataExchangeAgreement.Set {
			e.FieldStart("dataExchangeAgreement")
			s.DataExchangeAgreement.Encode(e)
		}
	}
	{
		if s.ContainsBeneficiaryAddress.Set {
			e.FieldStart("containsBeneficiaryAddress")
			s.ContainsBeneficiaryAddress.Encode(e)
		}
	}
	{
		if s.BusinessPurposeOfAddress.Set {
			e.FieldStart("businessPurposeOfAddress")
			s.BusinessPurposeOfAddress.Encode(e)
		}
	}
	{
		if s.IsAddressEditable.Set {
			e.FieldStart("isAddressEditable")
			s.IsAddressEditable.Encode(e)
		}
	}
	{
		if s.ContainsPii.Set {
			e.FieldStart("containsPii")
			s.ContainsPii.Encode(e)
		}
	}
	{
		if s.ContainsPhi.Set {
			e.FieldStart("containsPhi")
			s.ContainsPhi.Encode(e)
		}
	}
	{
		if s.ContainsBankingData.Set {
			e.FieldStart("containsBankingData")
			s.ContainsBankingData.Encode(e)
		}
	}
	{
		if s.IsBeneficiaryMailingFile.Set {
			e.FieldStart("isBeneficiaryMailingFile")
			s.IsBeneficiaryMailingFile.Encode(e)
		}
	}
	{
		if s.SharedViaApi.Set {
			e.FieldStart("sharedViaApi")
			s.SharedViaApi.Encode(e)
		}
	}
	{
		if s.ApiOwnership.Set {
			e.FieldStart("apiOwnership")
			s.ApiOwnership.Encode(e)
		}
	}
	{
		if s.TypeOfData.Set {
			e.FieldStart("typeOfData")
			s.TypeOfData.Encode(e)
		}
	}
	{
		if s.NumOfRecords.Set {
			e.FieldStart("numOfRecords")
			s.NumOfRecords.Encode(e)
		}
	}
	{
		if s.DataFormat.Set {
			e.FieldStart("dataFormat")
			s.DataFormat.Encode(e)
		}
	}
	{
		if s.DataFormatOther.Set {
			e.FieldStart("dataFormatOther")
			s.DataFormatOther.Encode(e)
		}
	}
	{
		if s.ExchangeContainsCUI.Set {
			e.FieldStart("exchangeContainsCUI")
			s.ExchangeContainsCUI.Encode(e)
		}
	}
	{
		if s.ExchangeCUIDescription.Set {
			e.FieldStart("exchangeCUIDescription")
			s.ExchangeCUIDescription.Encode(e)
		}
	}
	{
		if s.ExchangeCUIType.Set {
			e.FieldStart("exchangeCUIType")
			s.ExchangeCUIType.Encode(e)
		}
	}
	{
		if s.ExchangeConnectionAuthenticated.Set {
			e.FieldStart("exchangeConnectionAuthenticated")
			s.ExchangeConnectionAuthenticated.Encode(e)
		}
	}
	{
		if s.ExchangeNetworkProtocol.Set {
			e.FieldStart("exchangeNetworkProtocol")
			s.ExchangeNetworkProtocol.Encode(e)
		}
	}
	{
		if s.ExchangeNetworkProtocolOther.Set {
			e.FieldStart("exchangeNetworkProtocolOther")
			s.ExchangeNetworkProtocolOther.Encode(e)
		}
	}
	{
		if s.ExchangePrimaryDataArea.Set {
			e.FieldStart("exchangePrimaryDataArea")
			s.ExchangePrimaryDataArea.Encode(e)
		}
	}
	{
		if s.ExchangeSecondaryDataArea.Set {
			e.FieldStart("exchangeSecondaryDataArea")
			s.ExchangeSecondaryDataArea.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchange = [37]string{
	0:  "exchangeId",
	1:  "exchangeName",
	2:  "exchangeDescription",
	3:  "exchangeVersion",
	4:  "exchangeState",
	5:  "exchangeStartDate",
	6:  "exchangeEndDate",
	7:  "exchangeRetiredDate",
	8:  "fromOwnerId",
	9:  "fromOwnerName",
	10: "fromOwnerType",
	11: "toOwnerId",
	12: "toOwnerName",
	13: "toOwnerType",
	14: "connectionFrequency",
	15: "dataExchangeAgreement",
	16: "containsBeneficiaryAddress",
	17: "businessPurposeOfAddress",
	18: "isAddressEditable",
	19: "containsPii",
	20: "containsPhi",
	21: "containsBankingData",
	22: "isBeneficiaryMailingFile",
	23: "sharedViaApi",
	24: "apiOwnership",
	25: "typeOfData",
	26: "numOfRecords",
	27: "dataFormat",
	28: "dataFormatOther",
	29: "exchangeContainsCUI",
	30: "exchangeCUIDescription",
	31: "exchangeCUIType",
	32: "exchangeConnectionAuthenticated",
	33: "exchangeNetworkProtocol",
	34: "exchangeNetworkProtocolOther",
	35: "exchangePrimaryDataArea",
	36: "exchangeSecondaryDataArea",
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchange from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchange) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchange to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exchangeId":
			if err := func() error {
				s.ExchangeId.Reset()
				if err := s.ExchangeId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeId\"")
			}
		case "exchangeName":
			if err := func() error {
				s.ExchangeName.Reset()
				if err := s.ExchangeName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeName\"")
			}
		case "exchangeDescription":
			if err := func() error {
				s.ExchangeDescription.Reset()
				if err := s.ExchangeDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeDescription\"")
			}
		case "exchangeVersion":
			if err := func() error {
				s.ExchangeVersion.Reset()
				if err := s.ExchangeVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeVersion\"")
			}
		case "exchangeState":
			if err := func() error {
				s.ExchangeState.Reset()
				if err := s.ExchangeState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeState\"")
			}
		case "exchangeStartDate":
			if err := func() error {
				s.ExchangeStartDate.Reset()
				if err := s.ExchangeStartDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeStartDate\"")
			}
		case "exchangeEndDate":
			if err := func() error {
				s.ExchangeEndDate.Reset()
				if err := s.ExchangeEndDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeEndDate\"")
			}
		case "exchangeRetiredDate":
			if err := func() error {
				s.ExchangeRetiredDate.Reset()
				if err := s.ExchangeRetiredDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeRetiredDate\"")
			}
		case "fromOwnerId":
			if err := func() error {
				s.FromOwnerId.Reset()
				if err := s.FromOwnerId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fromOwnerId\"")
			}
		case "fromOwnerName":
			if err := func() error {
				s.FromOwnerName.Reset()
				if err := s.FromOwnerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fromOwnerName\"")
			}
		case "fromOwnerType":
			if err := func() error {
				s.FromOwnerType.Reset()
				if err := s.FromOwnerType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fromOwnerType\"")
			}
		case "toOwnerId":
			if err := func() error {
				s.ToOwnerId.Reset()
				if err := s.ToOwnerId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toOwnerId\"")
			}
		case "toOwnerName":
			if err := func() error {
				s.ToOwnerName.Reset()
				if err := s.ToOwnerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toOwnerName\"")
			}
		case "toOwnerType":
			if err := func() error {
				s.ToOwnerType.Reset()
				if err := s.ToOwnerType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toOwnerType\"")
			}
		case "connectionFrequency":
			if err := func() error {
				s.ConnectionFrequency.Reset()
				if err := s.ConnectionFrequency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"connectionFrequency\"")
			}
		case "dataExchangeAgreement":
			if err := func() error {
				s.DataExchangeAgreement.Reset()
				if err := s.DataExchangeAgreement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dataExchangeAgreement\"")
			}
		case "containsBeneficiaryAddress":
			if err := func() error {
				s.ContainsBeneficiaryAddress.Reset()
				if err := s.ContainsBeneficiaryAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"containsBeneficiaryAddress\"")
			}
		case "businessPurposeOfAddress":
			if err := func() error {
				s.BusinessPurposeOfAddress.Reset()
				if err := s.BusinessPurposeOfAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"businessPurposeOfAddress\"")
			}
		case "isAddressEditable":
			if err := func() error {
				s.IsAddressEditable.Reset()
				if err := s.IsAddressEditable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isAddressEditable\"")
			}
		case "containsPii":
			if err := func() error {
				s.ContainsPii.Reset()
				if err := s.ContainsPii.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"containsPii\"")
			}
		case "containsPhi":
			if err := func() error {
				s.ContainsPhi.Reset()
				if err := s.ContainsPhi.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"containsPhi\"")
			}
		case "containsBankingData":
			if err := func() error {
				s.ContainsBankingData.Reset()
				if err := s.ContainsBankingData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"containsBankingData\"")
			}
		case "isBeneficiaryMailingFile":
			if err := func() error {
				s.IsBeneficiaryMailingFile.Reset()
				if err := s.IsBeneficiaryMailingFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isBeneficiaryMailingFile\"")
			}
		case "sharedViaApi":
			if err := func() error {
				s.SharedViaApi.Reset()
				if err := s.SharedViaApi.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sharedViaApi\"")
			}
		case "apiOwnership":
			if err := func() error {
				s.ApiOwnership.Reset()
				if err := s.ApiOwnership.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiOwnership\"")
			}
		case "typeOfData":
			if err := func() error {
				s.TypeOfData.Reset()
				if err := s.TypeOfData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"typeOfData\"")
			}
		case "numOfRecords":
			if err := func() error {
				s.NumOfRecords.Reset()
				if err := s.NumOfRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numOfRecords\"")
			}
		case "dataFormat":
			if err := func() error {
				s.DataFormat.Reset()
				if err := s.DataFormat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dataFormat\"")
			}
		case "dataFormatOther":
			if err := func() error {
				s.DataFormatOther.Reset()
				if err := s.DataFormatOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dataFormatOther\"")
			}
		case "exchangeContainsCUI":
			if err := func() error {
				s.ExchangeContainsCUI.Reset()
				if err := s.ExchangeContainsCUI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeContainsCUI\"")
			}
		case "exchangeCUIDescription":
			if err := func() error {
				s.ExchangeCUIDescription.Reset()
				if err := s.ExchangeCUIDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeCUIDescription\"")
			}
		case "exchangeCUIType":
			if err := func() error {
				s.ExchangeCUIType.Reset()
				if err := s.ExchangeCUIType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeCUIType\"")
			}
		case "exchangeConnectionAuthenticated":
			if err := func() error {
				s.ExchangeConnectionAuthenticated.Reset()
				if err := s.ExchangeConnectionAuthenticated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeConnectionAuthenticated\"")
			}
		case "exchangeNetworkProtocol":
			if err := func() error {
				s.ExchangeNetworkProtocol.Reset()
				if err := s.ExchangeNetworkProtocol.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeNetworkProtocol\"")
			}
		case "exchangeNetworkProtocolOther":
			if err := func() error {
				s.ExchangeNetworkProtocolOther.Reset()
				if err := s.ExchangeNetworkProtocolOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeNetworkProtocolOther\"")
			}
		case "exchangePrimaryDataArea":
			if err := func() error {
				s.ExchangePrimaryDataArea.Reset()
				if err := s.ExchangePrimaryDataArea.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangePrimaryDataArea\"")
			}
		case "exchangeSecondaryDataArea":
			if err := func() error {
				s.ExchangeSecondaryDataArea.Reset()
				if err := s.ExchangeSecondaryDataArea.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeSecondaryDataArea\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchange")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchange) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchange) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBankingData as json.
func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBankingData) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBankingData from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBankingData) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBankingData to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBankingData(v) {
	case GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBankingDataYes:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBankingDataYes
	case GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBankingDataNo:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBankingDataNo
	default:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBankingData(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBankingData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBankingData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBeneficiaryAddress as json.
func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBeneficiaryAddress) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBeneficiaryAddress from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBeneficiaryAddress) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBeneficiaryAddress to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBeneficiaryAddress(v) {
	case GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBeneficiaryAddressYes:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBeneficiaryAddressYes
	case GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBeneficiaryAddressNo:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBeneficiaryAddressNo
	default:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBeneficiaryAddress(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBeneficiaryAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBeneficiaryAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPhi as json.
func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPhi) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPhi from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPhi) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPhi to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPhi(v) {
	case GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPhiYes:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPhiYes
	case GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPhiNo:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPhiNo
	default:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPhi(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPhi) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPhi) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPii as json.
func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPii) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPii from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPii) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPii to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPii(v) {
	case GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPiiYes:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPiiYes
	case GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPiiNo:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPiiNo
	default:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPii(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPii) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPii) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeConnectionAuthenticated as json.
func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeConnectionAuthenticated) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeConnectionAuthenticated from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeConnectionAuthenticated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeConnectionAuthenticated to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeConnectionAuthenticated(v) {
	case GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeConnectionAuthenticatedYes:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeConnectionAuthenticatedYes
	case GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeConnectionAuthenticatedNo:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeConnectionAuthenticatedNo
	default:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeConnectionAuthenticated(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeConnectionAuthenticated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeConnectionAuthenticated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeContainsCUI as json.
func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeContainsCUI) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeContainsCUI from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeContainsCUI) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeContainsCUI to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeContainsCUI(v) {
	case GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeContainsCUIYes:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeContainsCUIYes
	case GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeContainsCUINo:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeContainsCUINo
	default:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeContainsCUI(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeContainsCUI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeContainsCUI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsAddressEditable as json.
func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsAddressEditable) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsAddressEditable from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsAddressEditable) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsAddressEditable to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsAddressEditable(v) {
	case GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsAddressEditableYes:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsAddressEditableYes
	case GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsAddressEditableNo:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsAddressEditableNo
	default:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsAddressEditable(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsAddressEditable) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsAddressEditable) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsBeneficiaryMailingFile as json.
func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsBeneficiaryMailingFile) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsBeneficiaryMailingFile from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsBeneficiaryMailingFile) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsBeneficiaryMailingFile to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsBeneficiaryMailingFile(v) {
	case GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsBeneficiaryMailingFileYes:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsBeneficiaryMailingFileYes
	case GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsBeneficiaryMailingFileNo:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsBeneficiaryMailingFileNo
	default:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsBeneficiaryMailingFile(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsBeneficiaryMailingFile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsBeneficiaryMailingFile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeSharedViaApi as json.
func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeSharedViaApi) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeSharedViaApi from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeSharedViaApi) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeSharedViaApi to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeSharedViaApi(v) {
	case GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeSharedViaApiYes:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeSharedViaApiYes
	case GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeSharedViaApiNo:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeSharedViaApiNo
	default:
		*s = GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeSharedViaApi(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeSharedViaApi) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeSharedViaApi) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeTypeOfDataItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeTypeOfDataItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeTypeOfDataItem = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeTypeOfDataItem from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeTypeOfDataItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeTypeOfDataItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeTypeOfDataItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeTypeOfDataItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeTypeOfDataItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemStatus) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemStatus) encodeFields(e *jx.Encoder) {
	{
		if s.ExchangeId.Set {
			e.FieldStart("exchangeId")
			s.ExchangeId.Encode(e)
		}
	}
	{
		if s.SystemId.Set {
			e.FieldStart("systemId")
			s.SystemId.Encode(e)
		}
	}
	{
		if s.SystemStatus.Set {
			e.FieldStart("systemStatus")
			s.SystemStatus.Encode(e)
		}
	}
	{
		if s.PartnerId.Set {
			e.FieldStart("partnerId")
			s.PartnerId.Encode(e)
		}
	}
	{
		if s.PartnerStatus.Set {
			e.FieldStart("partnerStatus")
			s.PartnerStatus.Encode(e)
		}
	}
	{
		if s.ReviewerStatus.Set {
			e.FieldStart("reviewerStatus")
			s.ReviewerStatus.Encode(e)
		}
	}
	{
		if s.Direction.Set {
			e.FieldStart("direction")
			s.Direction.Encode(e)
		}
	}
	{
		if s.Deleted.Set {
			e.FieldStart("deleted")
			s.Deleted.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemStatus = [8]string{
	0: "exchangeId",
	1: "systemId",
	2: "systemStatus",
	3: "partnerId",
	4: "partnerStatus",
	5: "reviewerStatus",
	6: "direction",
	7: "deleted",
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemStatus from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemStatus to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exchangeId":
			if err := func() error {
				s.ExchangeId.Reset()
				if err := s.ExchangeId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeId\"")
			}
		case "systemId":
			if err := func() error {
				s.SystemId.Reset()
				if err := s.SystemId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "systemStatus":
			if err := func() error {
				s.SystemStatus.Reset()
				if err := s.SystemStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemStatus\"")
			}
		case "partnerId":
			if err := func() error {
				s.PartnerId.Reset()
				if err := s.PartnerId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"partnerId\"")
			}
		case "partnerStatus":
			if err := func() error {
				s.PartnerStatus.Reset()
				if err := s.PartnerStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"partnerStatus\"")
			}
		case "reviewerStatus":
			if err := func() error {
				s.ReviewerStatus.Reset()
				if err := s.ReviewerStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reviewerStatus\"")
			}
		case "direction":
			if err := func() error {
				s.Direction.Reset()
				if err := s.Direction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		case "deleted":
			if err := func() error {
				s.Deleted.Reset()
				if err := s.Deleted.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deleted\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemStatus")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetReq) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataExchangeGetReq = [0]string{}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetReq from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangeGetReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageDataExchangeGetReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangeGetReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataExchangePostOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostOK from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangePostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageDataExchangePostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("systemId")
		e.Str(s.SystemId)
	}
	{
		e.FieldStart("pageName")
		e.Str(s.PageName)
	}
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		e.FieldStart("DataExchanges")
		e.ArrStart()
		for _, elem := range s.DataExchanges {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataExchangePostReq = [4]string{
	0: "systemId",
	1: "pageName",
	2: "count",
	3: "DataExchanges",
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostReq from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangePostReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "systemId":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.SystemId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "pageName":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.PageName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageName\"")
			}
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "DataExchanges":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				s.DataExchanges = make([]GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.DataExchanges = append(s.DataExchanges, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DataExchanges\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageDataExchangePostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00001011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataExchangePostReq) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataExchangePostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Direction.Set {
			e.FieldStart("direction")
			s.Direction.Encode(e)
		}
	}
	{
		if s.Deleted.Set {
			e.FieldStart("deleted")
			s.Deleted.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		e.FieldStart("Exchange")
		s.Exchange.Encode(e)
	}
	{
		e.FieldStart("Status")
		s.Status.Encode(e)
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItem = [5]string{
	0: "direction",
	1: "deleted",
	2: "updated",
	3: "Exchange",
	4: "Status",
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItem from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "direction":
			if err := func() error {
				s.Direction.Reset()
				if err := s.Direction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		case "deleted":
			if err := func() error {
				s.Deleted.Reset()
				if err := s.Deleted.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deleted\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "Exchange":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				if err := s.Exchange.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Exchange\"")
			}
		case "Status":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00011000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItem) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchange) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchange) encodeFields(e *jx.Encoder) {
	{
		if s.ExchangeId.Set {
			e.FieldStart("exchangeId")
			s.ExchangeId.Encode(e)
		}
	}
	{
		if s.ExchangeName.Set {
			e.FieldStart("exchangeName")
			s.ExchangeName.Encode(e)
		}
	}
	{
		if s.ExchangeDescription.Set {
			e.FieldStart("exchangeDescription")
			s.ExchangeDescription.Encode(e)
		}
	}
	{
		if s.ExchangeVersion.Set {
			e.FieldStart("exchangeVersion")
			s.ExchangeVersion.Encode(e)
		}
	}
	{
		if s.EchangesState.Set {
			e.FieldStart("echangesState")
			s.EchangesState.Encode(e)
		}
	}
	{
		if s.ExchangeStartDate.Set {
			e.FieldStart("exchangeStartDate")
			s.ExchangeStartDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.ExchangeEndDate.Set {
			e.FieldStart("exchangeEndDate")
			s.ExchangeEndDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.ExchangeRetiredDate.Set {
			e.FieldStart("exchangeRetiredDate")
			s.ExchangeRetiredDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.FromOwnerId.Set {
			e.FieldStart("fromOwnerId")
			s.FromOwnerId.Encode(e)
		}
	}
	{
		if s.FromOwnerName.Set {
			e.FieldStart("fromOwnerName")
			s.FromOwnerName.Encode(e)
		}
	}
	{
		if s.FromOwnerType.Set {
			e.FieldStart("fromOwnerType")
			s.FromOwnerType.Encode(e)
		}
	}
	{
		if s.ToOwnerId.Set {
			e.FieldStart("toOwnerId")
			s.ToOwnerId.Encode(e)
		}
	}
	{
		if s.ToOwnerName.Set {
			e.FieldStart("toOwnerName")
			s.ToOwnerName.Encode(e)
		}
	}
	{
		if s.ToOwnerType.Set {
			e.FieldStart("toOwnerType")
			s.ToOwnerType.Encode(e)
		}
	}
	{
		if s.ConnectionFrequency.Set {
			e.FieldStart("connectionFrequency")
			s.ConnectionFrequency.Encode(e)
		}
	}
	{
		if s.DataExchangeAgreement.Set {
			e.FieldStart("dataExchangeAgreement")
			s.DataExchangeAgreement.Encode(e)
		}
	}
	{
		if s.ContainsBeneficiaryAddress.Set {
			e.FieldStart("containsBeneficiaryAddress")
			s.ContainsBeneficiaryAddress.Encode(e)
		}
	}
	{
		if s.BusinessPurposeOfAddress.Set {
			e.FieldStart("businessPurposeOfAddress")
			s.BusinessPurposeOfAddress.Encode(e)
		}
	}
	{
		if s.IsAddressEditable.Set {
			e.FieldStart("isAddressEditable")
			s.IsAddressEditable.Encode(e)
		}
	}
	{
		if s.ContainsPii.Set {
			e.FieldStart("containsPii")
			s.ContainsPii.Encode(e)
		}
	}
	{
		if s.ContainsPhi.Set {
			e.FieldStart("containsPhi")
			s.ContainsPhi.Encode(e)
		}
	}
	{
		if s.IsBeneficiaryMailingFile.Set {
			e.FieldStart("isBeneficiaryMailingFile")
			s.IsBeneficiaryMailingFile.Encode(e)
		}
	}
	{
		if s.SharedViaApi.Set {
			e.FieldStart("sharedViaApi")
			s.SharedViaApi.Encode(e)
		}
	}
	{
		if s.ApiOwnership.Set {
			e.FieldStart("apiOwnership")
			s.ApiOwnership.Encode(e)
		}
	}
	{
		if s.TypeOfData.Set {
			e.FieldStart("typeOfData")
			s.TypeOfData.Encode(e)
		}
	}
	{
		if s.NumOfRecords.Set {
			e.FieldStart("numOfRecords")
			s.NumOfRecords.Encode(e)
		}
	}
	{
		if s.DataFormat.Set {
			e.FieldStart("dataFormat")
			s.DataFormat.Encode(e)
		}
	}
	{
		if s.DataFormatOther.Set {
			e.FieldStart("dataFormatOther")
			s.DataFormatOther.Encode(e)
		}
	}
	{
		if s.ExchangeContainsCUI.Set {
			e.FieldStart("exchangeContainsCUI")
			s.ExchangeContainsCUI.Encode(e)
		}
	}
	{
		if s.ExchangeConnectionAuthenticated.Set {
			e.FieldStart("exchangeConnectionAuthenticated")
			s.ExchangeConnectionAuthenticated.Encode(e)
		}
	}
	{
		if s.ExchangeCUIDescription.Set {
			e.FieldStart("exchangeCUIDescription")
			s.ExchangeCUIDescription.Encode(e)
		}
	}
	{
		if s.ExchangeNetworkProtocol.Set {
			e.FieldStart("exchangeNetworkProtocol")
			s.ExchangeNetworkProtocol.Encode(e)
		}
	}
	{
		if s.ExchangeNetworkProtocolOther.Set {
			e.FieldStart("exchangeNetworkProtocolOther")
			s.ExchangeNetworkProtocolOther.Encode(e)
		}
	}
	{
		if s.ContainsBankingData.Set {
			e.FieldStart("containsBankingData")
			s.ContainsBankingData.Encode(e)
		}
	}
	{
		if s.ExchangePrimaryDataArea.Set {
			e.FieldStart("exchangePrimaryDataArea")
			s.ExchangePrimaryDataArea.Encode(e)
		}
	}
	{
		if s.ExchangeSecondaryDataArea.Set {
			e.FieldStart("exchangeSecondaryDataArea")
			s.ExchangeSecondaryDataArea.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchange = [36]string{
	0:  "exchangeId",
	1:  "exchangeName",
	2:  "exchangeDescription",
	3:  "exchangeVersion",
	4:  "echangesState",
	5:  "exchangeStartDate",
	6:  "exchangeEndDate",
	7:  "exchangeRetiredDate",
	8:  "fromOwnerId",
	9:  "fromOwnerName",
	10: "fromOwnerType",
	11: "toOwnerId",
	12: "toOwnerName",
	13: "toOwnerType",
	14: "connectionFrequency",
	15: "dataExchangeAgreement",
	16: "containsBeneficiaryAddress",
	17: "businessPurposeOfAddress",
	18: "isAddressEditable",
	19: "containsPii",
	20: "containsPhi",
	21: "isBeneficiaryMailingFile",
	22: "sharedViaApi",
	23: "apiOwnership",
	24: "typeOfData",
	25: "numOfRecords",
	26: "dataFormat",
	27: "dataFormatOther",
	28: "exchangeContainsCUI",
	29: "exchangeConnectionAuthenticated",
	30: "exchangeCUIDescription",
	31: "exchangeNetworkProtocol",
	32: "exchangeNetworkProtocolOther",
	33: "containsBankingData",
	34: "exchangePrimaryDataArea",
	35: "exchangeSecondaryDataArea",
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchange from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchange) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchange to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exchangeId":
			if err := func() error {
				s.ExchangeId.Reset()
				if err := s.ExchangeId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeId\"")
			}
		case "exchangeName":
			if err := func() error {
				s.ExchangeName.Reset()
				if err := s.ExchangeName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeName\"")
			}
		case "exchangeDescription":
			if err := func() error {
				s.ExchangeDescription.Reset()
				if err := s.ExchangeDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeDescription\"")
			}
		case "exchangeVersion":
			if err := func() error {
				s.ExchangeVersion.Reset()
				if err := s.ExchangeVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeVersion\"")
			}
		case "echangesState":
			if err := func() error {
				s.EchangesState.Reset()
				if err := s.EchangesState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"echangesState\"")
			}
		case "exchangeStartDate":
			if err := func() error {
				s.ExchangeStartDate.Reset()
				if err := s.ExchangeStartDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeStartDate\"")
			}
		case "exchangeEndDate":
			if err := func() error {
				s.ExchangeEndDate.Reset()
				if err := s.ExchangeEndDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeEndDate\"")
			}
		case "exchangeRetiredDate":
			if err := func() error {
				s.ExchangeRetiredDate.Reset()
				if err := s.ExchangeRetiredDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeRetiredDate\"")
			}
		case "fromOwnerId":
			if err := func() error {
				s.FromOwnerId.Reset()
				if err := s.FromOwnerId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fromOwnerId\"")
			}
		case "fromOwnerName":
			if err := func() error {
				s.FromOwnerName.Reset()
				if err := s.FromOwnerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fromOwnerName\"")
			}
		case "fromOwnerType":
			if err := func() error {
				s.FromOwnerType.Reset()
				if err := s.FromOwnerType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fromOwnerType\"")
			}
		case "toOwnerId":
			if err := func() error {
				s.ToOwnerId.Reset()
				if err := s.ToOwnerId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toOwnerId\"")
			}
		case "toOwnerName":
			if err := func() error {
				s.ToOwnerName.Reset()
				if err := s.ToOwnerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toOwnerName\"")
			}
		case "toOwnerType":
			if err := func() error {
				s.ToOwnerType.Reset()
				if err := s.ToOwnerType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toOwnerType\"")
			}
		case "connectionFrequency":
			if err := func() error {
				s.ConnectionFrequency.Reset()
				if err := s.ConnectionFrequency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"connectionFrequency\"")
			}
		case "dataExchangeAgreement":
			if err := func() error {
				s.DataExchangeAgreement.Reset()
				if err := s.DataExchangeAgreement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dataExchangeAgreement\"")
			}
		case "containsBeneficiaryAddress":
			if err := func() error {
				s.ContainsBeneficiaryAddress.Reset()
				if err := s.ContainsBeneficiaryAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"containsBeneficiaryAddress\"")
			}
		case "businessPurposeOfAddress":
			if err := func() error {
				s.BusinessPurposeOfAddress.Reset()
				if err := s.BusinessPurposeOfAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"businessPurposeOfAddress\"")
			}
		case "isAddressEditable":
			if err := func() error {
				s.IsAddressEditable.Reset()
				if err := s.IsAddressEditable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isAddressEditable\"")
			}
		case "containsPii":
			if err := func() error {
				s.ContainsPii.Reset()
				if err := s.ContainsPii.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"containsPii\"")
			}
		case "containsPhi":
			if err := func() error {
				s.ContainsPhi.Reset()
				if err := s.ContainsPhi.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"containsPhi\"")
			}
		case "isBeneficiaryMailingFile":
			if err := func() error {
				s.IsBeneficiaryMailingFile.Reset()
				if err := s.IsBeneficiaryMailingFile.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isBeneficiaryMailingFile\"")
			}
		case "sharedViaApi":
			if err := func() error {
				s.SharedViaApi.Reset()
				if err := s.SharedViaApi.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sharedViaApi\"")
			}
		case "apiOwnership":
			if err := func() error {
				s.ApiOwnership.Reset()
				if err := s.ApiOwnership.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiOwnership\"")
			}
		case "typeOfData":
			if err := func() error {
				s.TypeOfData.Reset()
				if err := s.TypeOfData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"typeOfData\"")
			}
		case "numOfRecords":
			if err := func() error {
				s.NumOfRecords.Reset()
				if err := s.NumOfRecords.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numOfRecords\"")
			}
		case "dataFormat":
			if err := func() error {
				s.DataFormat.Reset()
				if err := s.DataFormat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dataFormat\"")
			}
		case "dataFormatOther":
			if err := func() error {
				s.DataFormatOther.Reset()
				if err := s.DataFormatOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dataFormatOther\"")
			}
		case "exchangeContainsCUI":
			if err := func() error {
				s.ExchangeContainsCUI.Reset()
				if err := s.ExchangeContainsCUI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeContainsCUI\"")
			}
		case "exchangeConnectionAuthenticated":
			if err := func() error {
				s.ExchangeConnectionAuthenticated.Reset()
				if err := s.ExchangeConnectionAuthenticated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeConnectionAuthenticated\"")
			}
		case "exchangeCUIDescription":
			if err := func() error {
				s.ExchangeCUIDescription.Reset()
				if err := s.ExchangeCUIDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeCUIDescription\"")
			}
		case "exchangeNetworkProtocol":
			if err := func() error {
				s.ExchangeNetworkProtocol.Reset()
				if err := s.ExchangeNetworkProtocol.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeNetworkProtocol\"")
			}
		case "exchangeNetworkProtocolOther":
			if err := func() error {
				s.ExchangeNetworkProtocolOther.Reset()
				if err := s.ExchangeNetworkProtocolOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeNetworkProtocolOther\"")
			}
		case "containsBankingData":
			if err := func() error {
				s.ContainsBankingData.Reset()
				if err := s.ContainsBankingData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"containsBankingData\"")
			}
		case "exchangePrimaryDataArea":
			if err := func() error {
				s.ExchangePrimaryDataArea.Reset()
				if err := s.ExchangePrimaryDataArea.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangePrimaryDataArea\"")
			}
		case "exchangeSecondaryDataArea":
			if err := func() error {
				s.ExchangeSecondaryDataArea.Reset()
				if err := s.ExchangeSecondaryDataArea.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeSecondaryDataArea\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchange")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchange) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchange) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBankingData as json.
func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBankingData) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBankingData from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBankingData) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBankingData to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBankingData(v) {
	case GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBankingDataYes:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBankingDataYes
	case GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBankingDataNo:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBankingDataNo
	default:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBankingData(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBankingData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBankingData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBeneficiaryAddress as json.
func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBeneficiaryAddress) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBeneficiaryAddress from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBeneficiaryAddress) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBeneficiaryAddress to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBeneficiaryAddress(v) {
	case GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBeneficiaryAddressYes:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBeneficiaryAddressYes
	case GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBeneficiaryAddressNo:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBeneficiaryAddressNo
	default:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBeneficiaryAddress(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBeneficiaryAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBeneficiaryAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPhi as json.
func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPhi) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPhi from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPhi) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPhi to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPhi(v) {
	case GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPhiYes:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPhiYes
	case GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPhiNo:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPhiNo
	default:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPhi(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPhi) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPhi) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPii as json.
func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPii) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPii from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPii) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPii to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPii(v) {
	case GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPiiYes:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPiiYes
	case GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPiiNo:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPiiNo
	default:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPii(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPii) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPii) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeConnectionAuthenticated as json.
func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeConnectionAuthenticated) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeConnectionAuthenticated from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeConnectionAuthenticated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeConnectionAuthenticated to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeConnectionAuthenticated(v) {
	case GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeConnectionAuthenticatedYes:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeConnectionAuthenticatedYes
	case GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeConnectionAuthenticatedNo:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeConnectionAuthenticatedNo
	default:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeConnectionAuthenticated(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeConnectionAuthenticated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeConnectionAuthenticated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeContainsCUI as json.
func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeContainsCUI) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeContainsCUI from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeContainsCUI) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeContainsCUI to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeContainsCUI(v) {
	case GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeContainsCUIYes:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeContainsCUIYes
	case GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeContainsCUINo:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeContainsCUINo
	default:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeContainsCUI(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeContainsCUI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeContainsCUI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsAddressEditable as json.
func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsAddressEditable) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsAddressEditable from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsAddressEditable) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsAddressEditable to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsAddressEditable(v) {
	case GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsAddressEditableYes:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsAddressEditableYes
	case GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsAddressEditableNo:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsAddressEditableNo
	default:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsAddressEditable(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsAddressEditable) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsAddressEditable) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsBeneficiaryMailingFile as json.
func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsBeneficiaryMailingFile) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsBeneficiaryMailingFile from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsBeneficiaryMailingFile) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsBeneficiaryMailingFile to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsBeneficiaryMailingFile(v) {
	case GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsBeneficiaryMailingFileYes:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsBeneficiaryMailingFileYes
	case GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsBeneficiaryMailingFileNo:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsBeneficiaryMailingFileNo
	default:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsBeneficiaryMailingFile(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsBeneficiaryMailingFile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsBeneficiaryMailingFile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeSharedViaApi as json.
func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeSharedViaApi) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeSharedViaApi from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeSharedViaApi) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeSharedViaApi to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeSharedViaApi(v) {
	case GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeSharedViaApiYes:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeSharedViaApiYes
	case GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeSharedViaApiNo:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeSharedViaApiNo
	default:
		*s = GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeSharedViaApi(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeSharedViaApi) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeSharedViaApi) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeTypeOfDataItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeTypeOfDataItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeTypeOfDataItem = [2]string{
	0: "id",
	1: "name",
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeTypeOfDataItem from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeTypeOfDataItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeTypeOfDataItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeTypeOfDataItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeTypeOfDataItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeTypeOfDataItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemStatus) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemStatus) encodeFields(e *jx.Encoder) {
	{
		if s.ExchangeId.Set {
			e.FieldStart("exchangeId")
			s.ExchangeId.Encode(e)
		}
	}
	{
		e.FieldStart("systemId")
		e.Str(s.SystemId)
	}
	{
		e.FieldStart("systemStatus")
		e.Str(s.SystemStatus)
	}
	{
		if s.PartnerId.Set {
			e.FieldStart("partnerId")
			s.PartnerId.Encode(e)
		}
	}
	{
		e.FieldStart("partnerStatus")
		e.Str(s.PartnerStatus)
	}
	{
		e.FieldStart("reviewerStatus")
		e.Str(s.ReviewerStatus)
	}
	{
		e.FieldStart("direction")
		e.Str(s.Direction)
	}
	{
		if s.Deleted.Set {
			e.FieldStart("deleted")
			s.Deleted.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemStatus = [8]string{
	0: "exchangeId",
	1: "systemId",
	2: "systemStatus",
	3: "partnerId",
	4: "partnerStatus",
	5: "reviewerStatus",
	6: "direction",
	7: "deleted",
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemStatus from json.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemStatus to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "exchangeId":
			if err := func() error {
				s.ExchangeId.Reset()
				if err := s.ExchangeId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"exchangeId\"")
			}
		case "systemId":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.SystemId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "systemStatus":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.SystemStatus = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemStatus\"")
			}
		case "partnerId":
			if err := func() error {
				s.PartnerId.Reset()
				if err := s.PartnerId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"partnerId\"")
			}
		case "partnerStatus":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.PartnerStatus = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"partnerStatus\"")
			}
		case "reviewerStatus":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				v, err := d.Str()
				s.ReviewerStatus = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reviewerStatus\"")
			}
		case "direction":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				v, err := d.Str()
				s.Direction = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"direction\"")
			}
		case "deleted":
			if err := func() error {
				s.Deleted.Reset()
				if err := s.Deleted.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deleted\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemStatus")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b01110110,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemStatus) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemStatus[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageSoftwareProductsGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageSoftwareProductsGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.SoftwareProducts != nil {
			e.FieldStart("softwareProducts")
			e.ArrStart()
			for _, elem := range s.SoftwareProducts {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageSoftwareProductsGetOK = [1]string{
	0: "softwareProducts",
}

// Decode decodes GatewaySystem20Census20Core20API200PageSoftwareProductsGetOK from json.
func (s *GatewaySystem20Census20Core20API200PageSoftwareProductsGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageSoftwareProductsGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "softwareProducts":
			if err := func() error {
				s.SoftwareProducts = make([]GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SoftwareProducts = append(s.SoftwareProducts, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"softwareProducts\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageSoftwareProductsGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageSoftwareProductsGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageSoftwareProductsGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItem) encodeFields(e *jx.Encoder) {
	{
		if s.SoftwareName.Set {
			e.FieldStart("software_name")
			s.SoftwareName.Encode(e)
		}
	}
	{
		if s.VendorName.Set {
			e.FieldStart("vendor_name")
			s.VendorName.Encode(e)
		}
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
	{
		if s.Edition.Set {
			e.FieldStart("edition")
			s.Edition.Encode(e)
		}
	}
	{
		if s.ActualVersion.Set {
			e.FieldStart("actualVersion")
			s.ActualVersion.Encode(e)
		}
	}
	{
		if s.ClosestVersion.Set {
			e.FieldStart("closestVersion")
			s.ClosestVersion.Encode(e)
		}
	}
	{
		if s.TechnopediaID.Set {
			e.FieldStart("technopedia_id")
			s.TechnopediaID.Encode(e)
		}
	}
	{
		if s.TechnopediaCategory.Set {
			e.FieldStart("technopedia_category")
			s.TechnopediaCategory.Encode(e)
		}
	}
	{
		if s.APIGatewayUse.Set {
			e.FieldStart("api_gateway_use")
			s.APIGatewayUse.Encode(e)
		}
	}
	{
		if s.ProvidesAiCapability.Set {
			e.FieldStart("provides_ai_capability")
			s.ProvidesAiCapability.Encode(e)
		}
	}
	{
		if s.SoftwareCost.Set {
			e.FieldStart("software_cost")
			s.SoftwareCost.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItem = [11]string{
	0:  "software_name",
	1:  "vendor_name",
	2:  "version",
	3:  "edition",
	4:  "actualVersion",
	5:  "closestVersion",
	6:  "technopedia_id",
	7:  "technopedia_category",
	8:  "api_gateway_use",
	9:  "provides_ai_capability",
	10: "software_cost",
}

// Decode decodes GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItem from json.
func (s *GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "software_name":
			if err := func() error {
				s.SoftwareName.Reset()
				if err := s.SoftwareName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"software_name\"")
			}
		case "vendor_name":
			if err := func() error {
				s.VendorName.Reset()
				if err := s.VendorName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vendor_name\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "edition":
			if err := func() error {
				s.Edition.Reset()
				if err := s.Edition.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"edition\"")
			}
		case "actualVersion":
			if err := func() error {
				s.ActualVersion.Reset()
				if err := s.ActualVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"actualVersion\"")
			}
		case "closestVersion":
			if err := func() error {
				s.ClosestVersion.Reset()
				if err := s.ClosestVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closestVersion\"")
			}
		case "technopedia_id":
			if err := func() error {
				s.TechnopediaID.Reset()
				if err := s.TechnopediaID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"technopedia_id\"")
			}
		case "technopedia_category":
			if err := func() error {
				s.TechnopediaCategory.Reset()
				if err := s.TechnopediaCategory.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"technopedia_category\"")
			}
		case "api_gateway_use":
			if err := func() error {
				s.APIGatewayUse.Reset()
				if err := s.APIGatewayUse.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_gateway_use\"")
			}
		case "provides_ai_capability":
			if err := func() error {
				s.ProvidesAiCapability.Reset()
				if err := s.ProvidesAiCapability.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_ai_capability\"")
			}
		case "software_cost":
			if err := func() error {
				s.SoftwareCost.Reset()
				if err := s.SoftwareCost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"software_cost\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItemProvidesAiCapability as json.
func (s GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItemProvidesAiCapability) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItemProvidesAiCapability from json.
func (s *GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItemProvidesAiCapability) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItemProvidesAiCapability to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItemProvidesAiCapability(v) {
	case GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItemProvidesAiCapabilityYes:
		*s = GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItemProvidesAiCapabilityYes
	case GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItemProvidesAiCapabilityNo:
		*s = GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItemProvidesAiCapabilityNo
	default:
		*s = GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItemProvidesAiCapability(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItemProvidesAiCapability) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItemProvidesAiCapability) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemDataGetBadRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageSystemDataGetBadRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageSystemDataGetBadRequest = [1]string{
	0: "error",
}

// Decode decodes GatewaySystem20Census20Core20API200PageSystemDataGetBadRequest from json.
func (s *GatewaySystem20Census20Core20API200PageSystemDataGetBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageSystemDataGetBadRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageSystemDataGetBadRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemDataGetBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemDataGetBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemDataGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageSystemDataGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Records != nil {
			e.FieldStart("records")
			e.ArrStart()
			for _, elem := range s.Records {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageSystemDataGetOK = [2]string{
	0: "result",
	1: "records",
}

// Decode decodes GatewaySystem20Census20Core20API200PageSystemDataGetOK from json.
func (s *GatewaySystem20Census20Core20API200PageSystemDataGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageSystemDataGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "records":
			if err := func() error {
				s.Records = make([]GatewaySystem20Census20Core20API200PageSystemDataGetOKRecordsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200PageSystemDataGetOKRecordsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Records = append(s.Records, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"records\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageSystemDataGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemDataGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemDataGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemDataGetOKRecordsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageSystemDataGetOKRecordsItem) encodeFields(e *jx.Encoder) {
	{
		if s.SparxSystemId.Set {
			e.FieldStart("sparxSystemId")
			s.SparxSystemId.Encode(e)
		}
	}
	{
		if s.SparxSystemGuid.Set {
			e.FieldStart("sparxSystemGuid")
			s.SparxSystemGuid.Encode(e)
		}
	}
	{
		if s.SystemName.Set {
			e.FieldStart("systemName")
			s.SystemName.Encode(e)
		}
	}
	{
		if s.Acronym.Set {
			e.FieldStart("acronym")
			s.Acronym.Encode(e)
		}
	}
	{
		if s.AmountOfData.Set {
			e.FieldStart("amountOfData")
			s.AmountOfData.Encode(e)
		}
	}
	{
		if s.ExternalUserSensitiveDataAccess.Set {
			e.FieldStart("externalUserSensitiveDataAccess")
			s.ExternalUserSensitiveDataAccess.Encode(e)
		}
	}
	{
		if s.PermitsDataTransferOutsideUS.Set {
			e.FieldStart("permitsDataTransferOutsideUS")
			s.PermitsDataTransferOutsideUS.Encode(e)
		}
	}
	{
		if s.ApiDeveloped.Set {
			e.FieldStart("apiDeveloped")
			s.ApiDeveloped.Encode(e)
		}
	}
	{
		if s.DoesTheApiUseFhir.Set {
			e.FieldStart("doesTheApiUseFhir")
			s.DoesTheApiUseFhir.Encode(e)
		}
	}
	{
		if s.DoesTheApiUseFhirOther.Set {
			e.FieldStart("doesTheApiUseFhirOther")
			s.DoesTheApiUseFhirOther.Encode(e)
		}
	}
	{
		if s.EditBeneficiaryInformation.Set {
			e.FieldStart("editBeneficiaryInformation")
			s.EditBeneficiaryInformation.Encode(e)
		}
	}
	{
		if s.SystemDataSummary.Set {
			e.FieldStart("systemDataSummary")
			s.SystemDataSummary.Encode(e)
		}
	}
	{
		if s.SystemDataAuthoritativeSource.Set {
			e.FieldStart("systemDataAuthoritativeSource")
			s.SystemDataAuthoritativeSource.Encode(e)
		}
	}
	{
		if s.SystemDataLocation != nil {
			e.FieldStart("systemDataLocation")
			e.ArrStart()
			for _, elem := range s.SystemDataLocation {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SystemDataLocationNotes.Set {
			e.FieldStart("systemDataLocationNotes")
			s.SystemDataLocationNotes.Encode(e)
		}
	}
	{
		if s.SystemDataInvolvement != nil {
			e.FieldStart("systemDataInvolvement")
			e.ArrStart()
			for _, elem := range s.SystemDataInvolvement {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.BeneficiaryInformation != nil {
			e.FieldStart("beneficiaryInformation")
			e.ArrStart()
			for _, elem := range s.BeneficiaryInformation {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.PrimaryDRM.Set {
			e.FieldStart("primaryDRM")
			s.PrimaryDRM.Encode(e)
		}
	}
	{
		if s.SecondaryDRM != nil {
			e.FieldStart("secondaryDRM")
			e.ArrStart()
			for _, elem := range s.SecondaryDRM {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageSystemDataGetOKRecordsItem = [19]string{
	0:  "sparxSystemId",
	1:  "sparxSystemGuid",
	2:  "systemName",
	3:  "acronym",
	4:  "amountOfData",
	5:  "externalUserSensitiveDataAccess",
	6:  "permitsDataTransferOutsideUS",
	7:  "apiDeveloped",
	8:  "doesTheApiUseFhir",
	9:  "doesTheApiUseFhirOther",
	10: "editBeneficiaryInformation",
	11: "systemDataSummary",
	12: "systemDataAuthoritativeSource",
	13: "systemDataLocation",
	14: "systemDataLocationNotes",
	15: "systemDataInvolvement",
	16: "beneficiaryInformation",
	17: "primaryDRM",
	18: "secondaryDRM",
}

// Decode decodes GatewaySystem20Census20Core20API200PageSystemDataGetOKRecordsItem from json.
func (s *GatewaySystem20Census20Core20API200PageSystemDataGetOKRecordsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageSystemDataGetOKRecordsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "sparxSystemId":
			if err := func() error {
				s.SparxSystemId.Reset()
				if err := s.SparxSystemId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sparxSystemId\"")
			}
		case "sparxSystemGuid":
			if err := func() error {
				s.SparxSystemGuid.Reset()
				if err := s.SparxSystemGuid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sparxSystemGuid\"")
			}
		case "systemName":
			if err := func() error {
				s.SystemName.Reset()
				if err := s.SystemName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemName\"")
			}
		case "acronym":
			if err := func() error {
				s.Acronym.Reset()
				if err := s.Acronym.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"acronym\"")
			}
		case "amountOfData":
			if err := func() error {
				s.AmountOfData.Reset()
				if err := s.AmountOfData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amountOfData\"")
			}
		case "externalUserSensitiveDataAccess":
			if err := func() error {
				s.ExternalUserSensitiveDataAccess.Reset()
				if err := s.ExternalUserSensitiveDataAccess.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"externalUserSensitiveDataAccess\"")
			}
		case "permitsDataTransferOutsideUS":
			if err := func() error {
				s.PermitsDataTransferOutsideUS.Reset()
				if err := s.PermitsDataTransferOutsideUS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"permitsDataTransferOutsideUS\"")
			}
		case "apiDeveloped":
			if err := func() error {
				s.ApiDeveloped.Reset()
				if err := s.ApiDeveloped.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiDeveloped\"")
			}
		case "doesTheApiUseFhir":
			if err := func() error {
				s.DoesTheApiUseFhir.Reset()
				if err := s.DoesTheApiUseFhir.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"doesTheApiUseFhir\"")
			}
		case "doesTheApiUseFhirOther":
			if err := func() error {
				s.DoesTheApiUseFhirOther.Reset()
				if err := s.DoesTheApiUseFhirOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"doesTheApiUseFhirOther\"")
			}
		case "editBeneficiaryInformation":
			if err := func() error {
				s.EditBeneficiaryInformation.Reset()
				if err := s.EditBeneficiaryInformation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"editBeneficiaryInformation\"")
			}
		case "systemDataSummary":
			if err := func() error {
				s.SystemDataSummary.Reset()
				if err := s.SystemDataSummary.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemDataSummary\"")
			}
		case "systemDataAuthoritativeSource":
			if err := func() error {
				s.SystemDataAuthoritativeSource.Reset()
				if err := s.SystemDataAuthoritativeSource.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemDataAuthoritativeSource\"")
			}
		case "systemDataLocation":
			if err := func() error {
				s.SystemDataLocation = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.SystemDataLocation = append(s.SystemDataLocation, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemDataLocation\"")
			}
		case "systemDataLocationNotes":
			if err := func() error {
				s.SystemDataLocationNotes.Reset()
				if err := s.SystemDataLocationNotes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemDataLocationNotes\"")
			}
		case "systemDataInvolvement":
			if err := func() error {
				s.SystemDataInvolvement = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.SystemDataInvolvement = append(s.SystemDataInvolvement, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemDataInvolvement\"")
			}
		case "beneficiaryInformation":
			if err := func() error {
				s.BeneficiaryInformation = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.BeneficiaryInformation = append(s.BeneficiaryInformation, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"beneficiaryInformation\"")
			}
		case "primaryDRM":
			if err := func() error {
				s.PrimaryDRM.Reset()
				if err := s.PrimaryDRM.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"primaryDRM\"")
			}
		case "secondaryDRM":
			if err := func() error {
				s.SecondaryDRM = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.SecondaryDRM = append(s.SecondaryDRM, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secondaryDRM\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageSystemDataGetOKRecordsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemDataGetOKRecordsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemDataGetOKRecordsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemDataPostBadRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageSystemDataPostBadRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageSystemDataPostBadRequest = [1]string{
	0: "error",
}

// Decode decodes GatewaySystem20Census20Core20API200PageSystemDataPostBadRequest from json.
func (s *GatewaySystem20Census20Core20API200PageSystemDataPostBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageSystemDataPostBadRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageSystemDataPostBadRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemDataPostBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemDataPostBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemDataPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageSystemDataPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageSystemDataPostOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200PageSystemDataPostOK from json.
func (s *GatewaySystem20Census20Core20API200PageSystemDataPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageSystemDataPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageSystemDataPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemDataPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemDataPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemDataPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageSystemDataPostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("systemGUID")
		e.Str(s.SystemGUID)
	}
	{
		if s.PrimaryDRM.Set {
			e.FieldStart("primaryDRM")
			s.PrimaryDRM.Encode(e)
		}
	}
	{
		if s.SecondaryDRM.Set {
			e.FieldStart("secondaryDRM")
			s.SecondaryDRM.Encode(e)
		}
	}
	{
		if s.SystemDataSummary.Set {
			e.FieldStart("systemDataSummary")
			s.SystemDataSummary.Encode(e)
		}
	}
	{
		if s.SystemDataAuthoritativeSource.Set {
			e.FieldStart("systemDataAuthoritativeSource")
			s.SystemDataAuthoritativeSource.Encode(e)
		}
	}
	{
		if s.SystemDataLocation.Set {
			e.FieldStart("systemDataLocation")
			s.SystemDataLocation.Encode(e)
		}
	}
	{
		if s.SystemDataLocationNotes.Set {
			e.FieldStart("systemDataLocationNotes")
			s.SystemDataLocationNotes.Encode(e)
		}
	}
	{
		if s.AmountofData.Set {
			e.FieldStart("amountofData")
			s.AmountofData.Encode(e)
		}
	}
	{
		if s.SystemDataInvolvement.Set {
			e.FieldStart("systemDataInvolvement")
			s.SystemDataInvolvement.Encode(e)
		}
	}
	{
		if s.ExternalUserSensitiveDataAccess.Set {
			e.FieldStart("externalUserSensitiveDataAccess")
			s.ExternalUserSensitiveDataAccess.Encode(e)
		}
	}
	{
		if s.PermitsDataTransferOutsideUS.Set {
			e.FieldStart("permitsDataTransferOutsideUS")
			s.PermitsDataTransferOutsideUS.Encode(e)
		}
	}
	{
		if s.ApiDeveloped.Set {
			e.FieldStart("apiDeveloped")
			s.ApiDeveloped.Encode(e)
		}
	}
	{
		if s.DoestheAPIuseFHIR.Set {
			e.FieldStart("doestheAPIuseFHIR")
			s.DoestheAPIuseFHIR.Encode(e)
		}
	}
	{
		if s.DoestheAPIuseFHIROther.Set {
			e.FieldStart("doestheAPIuseFHIROther")
			s.DoestheAPIuseFHIROther.Encode(e)
		}
	}
	{
		if s.BeneficiaryInformation.Set {
			e.FieldStart("beneficiaryInformation")
			s.BeneficiaryInformation.Encode(e)
		}
	}
	{
		if s.EditBeneficiaryInformation.Set {
			e.FieldStart("editBeneficiaryInformation")
			s.EditBeneficiaryInformation.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageSystemDataPostReq = [16]string{
	0:  "systemGUID",
	1:  "primaryDRM",
	2:  "secondaryDRM",
	3:  "systemDataSummary",
	4:  "systemDataAuthoritativeSource",
	5:  "systemDataLocation",
	6:  "systemDataLocationNotes",
	7:  "amountofData",
	8:  "systemDataInvolvement",
	9:  "externalUserSensitiveDataAccess",
	10: "permitsDataTransferOutsideUS",
	11: "apiDeveloped",
	12: "doestheAPIuseFHIR",
	13: "doestheAPIuseFHIROther",
	14: "beneficiaryInformation",
	15: "editBeneficiaryInformation",
}

// Decode decodes GatewaySystem20Census20Core20API200PageSystemDataPostReq from json.
func (s *GatewaySystem20Census20Core20API200PageSystemDataPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageSystemDataPostReq to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "systemGUID":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.SystemGUID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemGUID\"")
			}
		case "primaryDRM":
			if err := func() error {
				s.PrimaryDRM.Reset()
				if err := s.PrimaryDRM.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"primaryDRM\"")
			}
		case "secondaryDRM":
			if err := func() error {
				s.SecondaryDRM.Reset()
				if err := s.SecondaryDRM.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secondaryDRM\"")
			}
		case "systemDataSummary":
			if err := func() error {
				s.SystemDataSummary.Reset()
				if err := s.SystemDataSummary.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemDataSummary\"")
			}
		case "systemDataAuthoritativeSource":
			if err := func() error {
				s.SystemDataAuthoritativeSource.Reset()
				if err := s.SystemDataAuthoritativeSource.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemDataAuthoritativeSource\"")
			}
		case "systemDataLocation":
			if err := func() error {
				s.SystemDataLocation.Reset()
				if err := s.SystemDataLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemDataLocation\"")
			}
		case "systemDataLocationNotes":
			if err := func() error {
				s.SystemDataLocationNotes.Reset()
				if err := s.SystemDataLocationNotes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemDataLocationNotes\"")
			}
		case "amountofData":
			if err := func() error {
				s.AmountofData.Reset()
				if err := s.AmountofData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amountofData\"")
			}
		case "systemDataInvolvement":
			if err := func() error {
				s.SystemDataInvolvement.Reset()
				if err := s.SystemDataInvolvement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemDataInvolvement\"")
			}
		case "externalUserSensitiveDataAccess":
			if err := func() error {
				s.ExternalUserSensitiveDataAccess.Reset()
				if err := s.ExternalUserSensitiveDataAccess.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"externalUserSensitiveDataAccess\"")
			}
		case "permitsDataTransferOutsideUS":
			if err := func() error {
				s.PermitsDataTransferOutsideUS.Reset()
				if err := s.PermitsDataTransferOutsideUS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"permitsDataTransferOutsideUS\"")
			}
		case "apiDeveloped":
			if err := func() error {
				s.ApiDeveloped.Reset()
				if err := s.ApiDeveloped.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiDeveloped\"")
			}
		case "doestheAPIuseFHIR":
			if err := func() error {
				s.DoestheAPIuseFHIR.Reset()
				if err := s.DoestheAPIuseFHIR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"doestheAPIuseFHIR\"")
			}
		case "doestheAPIuseFHIROther":
			if err := func() error {
				s.DoestheAPIuseFHIROther.Reset()
				if err := s.DoestheAPIuseFHIROther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"doestheAPIuseFHIROther\"")
			}
		case "beneficiaryInformation":
			if err := func() error {
				s.BeneficiaryInformation.Reset()
				if err := s.BeneficiaryInformation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"beneficiaryInformation\"")
			}
		case "editBeneficiaryInformation":
			if err := func() error {
				s.EditBeneficiaryInformation.Reset()
				if err := s.EditBeneficiaryInformation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"editBeneficiaryInformation\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageSystemDataPostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00000001,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200PageSystemDataPostReq) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200PageSystemDataPostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemDataPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemDataPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemMaintainerGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageSystemMaintainerGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
	{
		if s.PageName.Set {
			e.FieldStart("pageName")
			s.PageName.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.SystemCustomization.Set {
			e.FieldStart("systemCustomization")
			s.SystemCustomization.Encode(e)
		}
	}
	{
		if s.FrontendAccessType.Set {
			e.FieldStart("frontendAccessType")
			s.FrontendAccessType.Encode(e)
		}
	}
	{
		if s.NetAccessibility.Set {
			e.FieldStart("netAccessibility")
			s.NetAccessibility.Encode(e)
		}
	}
	{
		if s.IpEnabledAssetCount.Set {
			e.FieldStart("ipEnabledAssetCount")
			s.IpEnabledAssetCount.Encode(e)
		}
	}
	{
		if s.Ip6EnabledAssetPercent.Set {
			e.FieldStart("ip6EnabledAssetPercent")
			s.Ip6EnabledAssetPercent.Encode(e)
		}
	}
	{
		if s.Ip6TransitionPlan.Set {
			e.FieldStart("ip6TransitionPlan")
			s.Ip6TransitionPlan.Encode(e)
		}
	}
	{
		if s.SystemProductionDate.Set {
			e.FieldStart("systemProductionDate")
			s.SystemProductionDate.Encode(e)
		}
	}
	{
		if s.DevWorkDescription.Set {
			e.FieldStart("devWorkDescription")
			s.DevWorkDescription.Encode(e)
		}
	}
	{
		if s.AgileUsed.Set {
			e.FieldStart("agileUsed")
			s.AgileUsed.Encode(e)
		}
	}
	{
		if s.DeploymentFrequency.Set {
			e.FieldStart("deploymentFrequency")
			s.DeploymentFrequency.Encode(e)
		}
	}
	{
		if s.AdHocAgileDeploymentFrequency.Set {
			e.FieldStart("adHocAgileDeploymentFrequency")
			s.AdHocAgileDeploymentFrequency.Encode(e)
		}
	}
	{
		if s.MajorRefreshDate.Set {
			e.FieldStart("majorRefreshDate")
			s.MajorRefreshDate.Encode(e)
		}
	}
	{
		if s.NoMajorRefresh.Set {
			e.FieldStart("noMajorRefresh")
			s.NoMajorRefresh.Encode(e)
		}
	}
	{
		if s.NextMajorRefreshDate.Set {
			e.FieldStart("nextMajorRefreshDate")
			s.NextMajorRefreshDate.Encode(e)
		}
	}
	{
		if s.NoPlannedMajorRefresh.Set {
			e.FieldStart("noPlannedMajorRefresh")
			s.NoPlannedMajorRefresh.Encode(e)
		}
	}
	{
		if s.PlansToRetireReplace.Set {
			e.FieldStart("plansToRetireReplace")
			s.PlansToRetireReplace.Encode(e)
		}
	}
	{
		if s.YearToRetireReplace.Set {
			e.FieldStart("yearToRetireReplace")
			s.YearToRetireReplace.Encode(e)
		}
	}
	{
		if s.QuarterToRetireReplace.Set {
			e.FieldStart("quarterToRetireReplace")
			s.QuarterToRetireReplace.Encode(e)
		}
	}
	{
		if s.BusinessArtifactsOnDemand.Set {
			e.FieldStart("businessArtifactsOnDemand")
			s.BusinessArtifactsOnDemand.Encode(e)
		}
	}
	{
		if s.BusinessArtifactsLocation.Set {
			e.FieldStart("businessArtifactsLocation")
			s.BusinessArtifactsLocation.Encode(e)
		}
	}
	{
		if s.SystemRequirementsOnDemand.Set {
			e.FieldStart("systemRequirementsOnDemand")
			s.SystemRequirementsOnDemand.Encode(e)
		}
	}
	{
		if s.SystemRequirementsLocation.Set {
			e.FieldStart("systemRequirementsLocation")
			s.SystemRequirementsLocation.Encode(e)
		}
	}
	{
		if s.SystemDesignOnDemand.Set {
			e.FieldStart("systemDesignOnDemand")
			s.SystemDesignOnDemand.Encode(e)
		}
	}
	{
		if s.SystemDesignLocation.Set {
			e.FieldStart("systemDesignLocation")
			s.SystemDesignLocation.Encode(e)
		}
	}
	{
		if s.SourceCodeOnDemand.Set {
			e.FieldStart("sourceCodeOnDemand")
			s.SourceCodeOnDemand.Encode(e)
		}
	}
	{
		if s.SourceCodeLoction.Set {
			e.FieldStart("sourceCodeLoction")
			s.SourceCodeLoction.Encode(e)
		}
	}
	{
		if s.TestPlanOnDemand.Set {
			e.FieldStart("testPlanOnDemand")
			s.TestPlanOnDemand.Encode(e)
		}
	}
	{
		if s.TestPlanLocation.Set {
			e.FieldStart("testPlanLocation")
			s.TestPlanLocation.Encode(e)
		}
	}
	{
		if s.TestScriptsOnDemand.Set {
			e.FieldStart("testScriptsOnDemand")
			s.TestScriptsOnDemand.Encode(e)
		}
	}
	{
		if s.TestScriptsLocation.Set {
			e.FieldStart("testScriptsLocation")
			s.TestScriptsLocation.Encode(e)
		}
	}
	{
		if s.TestReportsOnDemand.Set {
			e.FieldStart("testReportsOnDemand")
			s.TestReportsOnDemand.Encode(e)
		}
	}
	{
		if s.TestReportsLocation.Set {
			e.FieldStart("testReportsLocation")
			s.TestReportsLocation.Encode(e)
		}
	}
	{
		if s.OmDocumentationOnDemand.Set {
			e.FieldStart("omDocumentationOnDemand")
			s.OmDocumentationOnDemand.Encode(e)
		}
	}
	{
		if s.OmDocumentationLocation.Set {
			e.FieldStart("omDocumentationLocation")
			s.OmDocumentationLocation.Encode(e)
		}
	}
	{
		if s.NoPersistentRecordsFlag.Set {
			e.FieldStart("noPersistentRecordsFlag")
			s.NoPersistentRecordsFlag.Encode(e)
		}
	}
	{
		if s.RecordsManagementBucket.Set {
			e.FieldStart("recordsManagementBucket")
			s.RecordsManagementBucket.Encode(e)
		}
	}
	{
		if s.HasMetadataGlossary.Set {
			e.FieldStart("hasMetadataGlossary")
			s.HasMetadataGlossary.Encode(e)
		}
	}
	{
		if s.AuthoritativeDatasource.Set {
			e.FieldStart("authoritativeDatasource")
			s.AuthoritativeDatasource.Encode(e)
		}
	}
	{
		if s.SystemDataLocation.Set {
			e.FieldStart("systemDataLocation")
			s.SystemDataLocation.Encode(e)
		}
	}
	{
		if s.SystemDataLocationNotes.Set {
			e.FieldStart("systemDataLocationNotes")
			s.SystemDataLocationNotes.Encode(e)
		}
	}
	{
		if s.StoreInCentralDataCatalog.Set {
			e.FieldStart("storeInCentralDataCatalog")
			s.StoreInCentralDataCatalog.Encode(e)
		}
	}
	{
		if s.HaveEnterpriseDataLakePlan.Set {
			e.FieldStart("haveEnterpriseDataLakePlan")
			s.HaveEnterpriseDataLakePlan.Encode(e)
		}
	}
	{
		if s.IdentityManagementSolution.Set {
			e.FieldStart("identityManagementSolution")
			s.IdentityManagementSolution.Encode(e)
		}
	}
	{
		if s.IdentityManagementSolutionOther.Set {
			e.FieldStart("identityManagementSolutionOther")
			s.IdentityManagementSolutionOther.Encode(e)
		}
	}
	{
		if s.LocallyStoredUserInformation.Set {
			e.FieldStart("locallyStoredUserInformation")
			s.LocallyStoredUserInformation.Encode(e)
		}
	}
	{
		if s.MultifactorAuthenticationMethod.Set {
			e.FieldStart("multifactorAuthenticationMethod")
			s.MultifactorAuthenticationMethod.Encode(e)
		}
	}
	{
		if s.MultifactorAuthenticationMethodOther.Set {
			e.FieldStart("multifactorAuthenticationMethodOther")
			s.MultifactorAuthenticationMethodOther.Encode(e)
		}
	}
	{
		if s.NetworkTrafficEncryptionKeyManagement.Set {
			e.FieldStart("networkTrafficEncryptionKeyManagement")
			s.NetworkTrafficEncryptionKeyManagement.Encode(e)
		}
	}
	{
		if s.DataAtRestEncryptionKeyManagement.Set {
			e.FieldStart("dataAtRestEncryptionKeyManagement")
			s.DataAtRestEncryptionKeyManagement.Encode(e)
		}
	}
	{
		if s.RecordsUnderLegalHold.Set {
			e.FieldStart("recordsUnderLegalHold")
			s.RecordsUnderLegalHold.Encode(e)
		}
	}
	{
		if s.LegalHoldCaseName.Set {
			e.FieldStart("legalHoldCaseName")
			s.LegalHoldCaseName.Encode(e)
		}
	}
	{
		if s.IsRecordManagementScheduleApproved.Set {
			e.FieldStart("isRecordManagementScheduleApproved")
			s.IsRecordManagementScheduleApproved.Encode(e)
		}
	}
	{
		if s.RecordsManagementDisposalPlan.Set {
			e.FieldStart("recordsManagementDisposalPlan")
			s.RecordsManagementDisposalPlan.Encode(e)
		}
	}
	{
		if s.RecordsManagementDisposalLocation.Set {
			e.FieldStart("recordsManagementDisposalLocation")
			s.RecordsManagementDisposalLocation.Encode(e)
		}
	}
	{
		if s.RecordsManagementFormat.Set {
			e.FieldStart("recordsManagementFormat")
			s.RecordsManagementFormat.Encode(e)
		}
	}
	{
		if s.RecordManagementFormatOther.Set {
			e.FieldStart("recordManagementFormatOther")
			s.RecordManagementFormatOther.Encode(e)
		}
	}
	{
		if s.AnotherCMSsystem.Set {
			e.FieldStart("anotherCMSsystem")
			s.AnotherCMSsystem.Encode(e)
		}
	}
	{
		if s.HardCodedIpAddress.Set {
			e.FieldStart("hardCodedIpAddress")
			s.HardCodedIpAddress.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageSystemMaintainerGetOK = [62]string{
	0:  "id",
	1:  "version",
	2:  "pageName",
	3:  "name",
	4:  "systemCustomization",
	5:  "frontendAccessType",
	6:  "netAccessibility",
	7:  "ipEnabledAssetCount",
	8:  "ip6EnabledAssetPercent",
	9:  "ip6TransitionPlan",
	10: "systemProductionDate",
	11: "devWorkDescription",
	12: "agileUsed",
	13: "deploymentFrequency",
	14: "adHocAgileDeploymentFrequency",
	15: "majorRefreshDate",
	16: "noMajorRefresh",
	17: "nextMajorRefreshDate",
	18: "noPlannedMajorRefresh",
	19: "plansToRetireReplace",
	20: "yearToRetireReplace",
	21: "quarterToRetireReplace",
	22: "businessArtifactsOnDemand",
	23: "businessArtifactsLocation",
	24: "systemRequirementsOnDemand",
	25: "systemRequirementsLocation",
	26: "systemDesignOnDemand",
	27: "systemDesignLocation",
	28: "sourceCodeOnDemand",
	29: "sourceCodeLoction",
	30: "testPlanOnDemand",
	31: "testPlanLocation",
	32: "testScriptsOnDemand",
	33: "testScriptsLocation",
	34: "testReportsOnDemand",
	35: "testReportsLocation",
	36: "omDocumentationOnDemand",
	37: "omDocumentationLocation",
	38: "noPersistentRecordsFlag",
	39: "recordsManagementBucket",
	40: "hasMetadataGlossary",
	41: "authoritativeDatasource",
	42: "systemDataLocation",
	43: "systemDataLocationNotes",
	44: "storeInCentralDataCatalog",
	45: "haveEnterpriseDataLakePlan",
	46: "identityManagementSolution",
	47: "identityManagementSolutionOther",
	48: "locallyStoredUserInformation",
	49: "multifactorAuthenticationMethod",
	50: "multifactorAuthenticationMethodOther",
	51: "networkTrafficEncryptionKeyManagement",
	52: "dataAtRestEncryptionKeyManagement",
	53: "recordsUnderLegalHold",
	54: "legalHoldCaseName",
	55: "isRecordManagementScheduleApproved",
	56: "recordsManagementDisposalPlan",
	57: "recordsManagementDisposalLocation",
	58: "recordsManagementFormat",
	59: "recordManagementFormatOther",
	60: "anotherCMSsystem",
	61: "hardCodedIpAddress",
}

// Decode decodes GatewaySystem20Census20Core20API200PageSystemMaintainerGetOK from json.
func (s *GatewaySystem20Census20Core20API200PageSystemMaintainerGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageSystemMaintainerGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "pageName":
			if err := func() error {
				s.PageName.Reset()
				if err := s.PageName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageName\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "systemCustomization":
			if err := func() error {
				s.SystemCustomization.Reset()
				if err := s.SystemCustomization.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemCustomization\"")
			}
		case "frontendAccessType":
			if err := func() error {
				s.FrontendAccessType.Reset()
				if err := s.FrontendAccessType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"frontendAccessType\"")
			}
		case "netAccessibility":
			if err := func() error {
				s.NetAccessibility.Reset()
				if err := s.NetAccessibility.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"netAccessibility\"")
			}
		case "ipEnabledAssetCount":
			if err := func() error {
				s.IpEnabledAssetCount.Reset()
				if err := s.IpEnabledAssetCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ipEnabledAssetCount\"")
			}
		case "ip6EnabledAssetPercent":
			if err := func() error {
				s.Ip6EnabledAssetPercent.Reset()
				if err := s.Ip6EnabledAssetPercent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip6EnabledAssetPercent\"")
			}
		case "ip6TransitionPlan":
			if err := func() error {
				s.Ip6TransitionPlan.Reset()
				if err := s.Ip6TransitionPlan.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip6TransitionPlan\"")
			}
		case "systemProductionDate":
			if err := func() error {
				s.SystemProductionDate.Reset()
				if err := s.SystemProductionDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemProductionDate\"")
			}
		case "devWorkDescription":
			if err := func() error {
				s.DevWorkDescription.Reset()
				if err := s.DevWorkDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"devWorkDescription\"")
			}
		case "agileUsed":
			if err := func() error {
				s.AgileUsed.Reset()
				if err := s.AgileUsed.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"agileUsed\"")
			}
		case "deploymentFrequency":
			if err := func() error {
				s.DeploymentFrequency.Reset()
				if err := s.DeploymentFrequency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deploymentFrequency\"")
			}
		case "adHocAgileDeploymentFrequency":
			if err := func() error {
				s.AdHocAgileDeploymentFrequency.Reset()
				if err := s.AdHocAgileDeploymentFrequency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adHocAgileDeploymentFrequency\"")
			}
		case "majorRefreshDate":
			if err := func() error {
				s.MajorRefreshDate.Reset()
				if err := s.MajorRefreshDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"majorRefreshDate\"")
			}
		case "noMajorRefresh":
			if err := func() error {
				s.NoMajorRefresh.Reset()
				if err := s.NoMajorRefresh.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"noMajorRefresh\"")
			}
		case "nextMajorRefreshDate":
			if err := func() error {
				s.NextMajorRefreshDate.Reset()
				if err := s.NextMajorRefreshDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nextMajorRefreshDate\"")
			}
		case "noPlannedMajorRefresh":
			if err := func() error {
				s.NoPlannedMajorRefresh.Reset()
				if err := s.NoPlannedMajorRefresh.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"noPlannedMajorRefresh\"")
			}
		case "plansToRetireReplace":
			if err := func() error {
				s.PlansToRetireReplace.Reset()
				if err := s.PlansToRetireReplace.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plansToRetireReplace\"")
			}
		case "yearToRetireReplace":
			if err := func() error {
				s.YearToRetireReplace.Reset()
				if err := s.YearToRetireReplace.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"yearToRetireReplace\"")
			}
		case "quarterToRetireReplace":
			if err := func() error {
				s.QuarterToRetireReplace.Reset()
				if err := s.QuarterToRetireReplace.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"quarterToRetireReplace\"")
			}
		case "businessArtifactsOnDemand":
			if err := func() error {
				s.BusinessArtifactsOnDemand.Reset()
				if err := s.BusinessArtifactsOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"businessArtifactsOnDemand\"")
			}
		case "businessArtifactsLocation":
			if err := func() error {
				s.BusinessArtifactsLocation.Reset()
				if err := s.BusinessArtifactsLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"businessArtifactsLocation\"")
			}
		case "systemRequirementsOnDemand":
			if err := func() error {
				s.SystemRequirementsOnDemand.Reset()
				if err := s.SystemRequirementsOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemRequirementsOnDemand\"")
			}
		case "systemRequirementsLocation":
			if err := func() error {
				s.SystemRequirementsLocation.Reset()
				if err := s.SystemRequirementsLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemRequirementsLocation\"")
			}
		case "systemDesignOnDemand":
			if err := func() error {
				s.SystemDesignOnDemand.Reset()
				if err := s.SystemDesignOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemDesignOnDemand\"")
			}
		case "systemDesignLocation":
			if err := func() error {
				s.SystemDesignLocation.Reset()
				if err := s.SystemDesignLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemDesignLocation\"")
			}
		case "sourceCodeOnDemand":
			if err := func() error {
				s.SourceCodeOnDemand.Reset()
				if err := s.SourceCodeOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sourceCodeOnDemand\"")
			}
		case "sourceCodeLoction":
			if err := func() error {
				s.SourceCodeLoction.Reset()
				if err := s.SourceCodeLoction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sourceCodeLoction\"")
			}
		case "testPlanOnDemand":
			if err := func() error {
				s.TestPlanOnDemand.Reset()
				if err := s.TestPlanOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testPlanOnDemand\"")
			}
		case "testPlanLocation":
			if err := func() error {
				s.TestPlanLocation.Reset()
				if err := s.TestPlanLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testPlanLocation\"")
			}
		case "testScriptsOnDemand":
			if err := func() error {
				s.TestScriptsOnDemand.Reset()
				if err := s.TestScriptsOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testScriptsOnDemand\"")
			}
		case "testScriptsLocation":
			if err := func() error {
				s.TestScriptsLocation.Reset()
				if err := s.TestScriptsLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testScriptsLocation\"")
			}
		case "testReportsOnDemand":
			if err := func() error {
				s.TestReportsOnDemand.Reset()
				if err := s.TestReportsOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testReportsOnDemand\"")
			}
		case "testReportsLocation":
			if err := func() error {
				s.TestReportsLocation.Reset()
				if err := s.TestReportsLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testReportsLocation\"")
			}
		case "omDocumentationOnDemand":
			if err := func() error {
				s.OmDocumentationOnDemand.Reset()
				if err := s.OmDocumentationOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"omDocumentationOnDemand\"")
			}
		case "omDocumentationLocation":
			if err := func() error {
				s.OmDocumentationLocation.Reset()
				if err := s.OmDocumentationLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"omDocumentationLocation\"")
			}
		case "noPersistentRecordsFlag":
			if err := func() error {
				s.NoPersistentRecordsFlag.Reset()
				if err := s.NoPersistentRecordsFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"noPersistentRecordsFlag\"")
			}
		case "recordsManagementBucket":
			if err := func() error {
				s.RecordsManagementBucket.Reset()
				if err := s.RecordsManagementBucket.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recordsManagementBucket\"")
			}
		case "hasMetadataGlossary":
			if err := func() error {
				s.HasMetadataGlossary.Reset()
				if err := s.HasMetadataGlossary.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hasMetadataGlossary\"")
			}
		case "authoritativeDatasource":
			if err := func() error {
				s.AuthoritativeDatasource.Reset()
				if err := s.AuthoritativeDatasource.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authoritativeDatasource\"")
			}
		case "systemDataLocation":
			if err := func() error {
				s.SystemDataLocation.Reset()
				if err := s.SystemDataLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemDataLocation\"")
			}
		case "systemDataLocationNotes":
			if err := func() error {
				s.SystemDataLocationNotes.Reset()
				if err := s.SystemDataLocationNotes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemDataLocationNotes\"")
			}
		case "storeInCentralDataCatalog":
			if err := func() error {
				s.StoreInCentralDataCatalog.Reset()
				if err := s.StoreInCentralDataCatalog.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"storeInCentralDataCatalog\"")
			}
		case "haveEnterpriseDataLakePlan":
			if err := func() error {
				s.HaveEnterpriseDataLakePlan.Reset()
				if err := s.HaveEnterpriseDataLakePlan.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"haveEnterpriseDataLakePlan\"")
			}
		case "identityManagementSolution":
			if err := func() error {
				s.IdentityManagementSolution.Reset()
				if err := s.IdentityManagementSolution.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"identityManagementSolution\"")
			}
		case "identityManagementSolutionOther":
			if err := func() error {
				s.IdentityManagementSolutionOther.Reset()
				if err := s.IdentityManagementSolutionOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"identityManagementSolutionOther\"")
			}
		case "locallyStoredUserInformation":
			if err := func() error {
				s.LocallyStoredUserInformation.Reset()
				if err := s.LocallyStoredUserInformation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locallyStoredUserInformation\"")
			}
		case "multifactorAuthenticationMethod":
			if err := func() error {
				s.MultifactorAuthenticationMethod.Reset()
				if err := s.MultifactorAuthenticationMethod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"multifactorAuthenticationMethod\"")
			}
		case "multifactorAuthenticationMethodOther":
			if err := func() error {
				s.MultifactorAuthenticationMethodOther.Reset()
				if err := s.MultifactorAuthenticationMethodOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"multifactorAuthenticationMethodOther\"")
			}
		case "networkTrafficEncryptionKeyManagement":
			if err := func() error {
				s.NetworkTrafficEncryptionKeyManagement.Reset()
				if err := s.NetworkTrafficEncryptionKeyManagement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"networkTrafficEncryptionKeyManagement\"")
			}
		case "dataAtRestEncryptionKeyManagement":
			if err := func() error {
				s.DataAtRestEncryptionKeyManagement.Reset()
				if err := s.DataAtRestEncryptionKeyManagement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dataAtRestEncryptionKeyManagement\"")
			}
		case "recordsUnderLegalHold":
			if err := func() error {
				s.RecordsUnderLegalHold.Reset()
				if err := s.RecordsUnderLegalHold.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recordsUnderLegalHold\"")
			}
		case "legalHoldCaseName":
			if err := func() error {
				s.LegalHoldCaseName.Reset()
				if err := s.LegalHoldCaseName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"legalHoldCaseName\"")
			}
		case "isRecordManagementScheduleApproved":
			if err := func() error {
				s.IsRecordManagementScheduleApproved.Reset()
				if err := s.IsRecordManagementScheduleApproved.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isRecordManagementScheduleApproved\"")
			}
		case "recordsManagementDisposalPlan":
			if err := func() error {
				s.RecordsManagementDisposalPlan.Reset()
				if err := s.RecordsManagementDisposalPlan.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recordsManagementDisposalPlan\"")
			}
		case "recordsManagementDisposalLocation":
			if err := func() error {
				s.RecordsManagementDisposalLocation.Reset()
				if err := s.RecordsManagementDisposalLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recordsManagementDisposalLocation\"")
			}
		case "recordsManagementFormat":
			if err := func() error {
				s.RecordsManagementFormat.Reset()
				if err := s.RecordsManagementFormat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recordsManagementFormat\"")
			}
		case "recordManagementFormatOther":
			if err := func() error {
				s.RecordManagementFormatOther.Reset()
				if err := s.RecordManagementFormatOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recordManagementFormatOther\"")
			}
		case "anotherCMSsystem":
			if err := func() error {
				s.AnotherCMSsystem.Reset()
				if err := s.AnotherCMSsystem.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"anotherCMSsystem\"")
			}
		case "hardCodedIpAddress":
			if err := func() error {
				s.HardCodedIpAddress.Reset()
				if err := s.HardCodedIpAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hardCodedIpAddress\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageSystemMaintainerGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemMaintainerGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemMaintainerGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemsListGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageSystemsListGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.PageName.Set {
			e.FieldStart("pageName")
			s.PageName.Encode(e)
		}
	}
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.SystemsList != nil {
			e.FieldStart("SystemsList")
			e.ArrStart()
			for _, elem := range s.SystemsList {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageSystemsListGetOK = [3]string{
	0: "pageName",
	1: "count",
	2: "SystemsList",
}

// Decode decodes GatewaySystem20Census20Core20API200PageSystemsListGetOK from json.
func (s *GatewaySystem20Census20Core20API200PageSystemsListGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageSystemsListGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pageName":
			if err := func() error {
				s.PageName.Reset()
				if err := s.PageName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageName\"")
			}
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "SystemsList":
			if err := func() error {
				s.SystemsList = make([]GatewaySystem20Census20Core20API200PageSystemsListGetOKSystemsListItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200PageSystemsListGetOKSystemsListItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SystemsList = append(s.SystemsList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SystemsList\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageSystemsListGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemsListGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemsListGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemsListGetOKSystemsListItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageSystemsListGetOKSystemsListItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.NextVersionId.Set {
			e.FieldStart("nextVersionId")
			s.NextVersionId.Encode(e)
		}
	}
	{
		if s.PreviousVersionId.Set {
			e.FieldStart("previousVersionId")
			s.PreviousVersionId.Encode(e)
		}
	}
	{
		if s.IctObjectId.Set {
			e.FieldStart("ictObjectId")
			s.IctObjectId.Encode(e)
		}
	}
	{
		if s.UUID.Set {
			e.FieldStart("uuid")
			s.UUID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
	{
		if s.Acronym.Set {
			e.FieldStart("acronym")
			s.Acronym.Encode(e)
		}
	}
	{
		if s.ObjectState.Set {
			e.FieldStart("objectState")
			s.ObjectState.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.BelongsTo.Set {
			e.FieldStart("belongsTo")
			s.BelongsTo.Encode(e)
		}
	}
	{
		if s.BusinessOwnerOrg.Set {
			e.FieldStart("businessOwnerOrg")
			s.BusinessOwnerOrg.Encode(e)
		}
	}
	{
		if s.BusinessOwnerOrgComp.Set {
			e.FieldStart("businessOwnerOrgComp")
			s.BusinessOwnerOrgComp.Encode(e)
		}
	}
	{
		if s.SystemMaintainerOrg.Set {
			e.FieldStart("systemMaintainerOrg")
			s.SystemMaintainerOrg.Encode(e)
		}
	}
	{
		if s.SystemMaintainerOrgComp.Set {
			e.FieldStart("systemMaintainerOrgComp")
			s.SystemMaintainerOrgComp.Encode(e)
		}
	}
	{
		if s.QaReviewerAssignmentId.Set {
			e.FieldStart("qaReviewerAssignmentId")
			s.QaReviewerAssignmentId.Encode(e)
		}
	}
	{
		if s.QaReviewerFirstName.Set {
			e.FieldStart("qaReviewerFirstName")
			s.QaReviewerFirstName.Encode(e)
		}
	}
	{
		if s.QaReviewerLastName.Set {
			e.FieldStart("qaReviewerLastName")
			s.QaReviewerLastName.Encode(e)
		}
	}
	{
		if s.QaReviewerUserName.Set {
			e.FieldStart("qaReviewerUserName")
			s.QaReviewerUserName.Encode(e)
		}
	}
	{
		if s.DaReviewerAssignmentId.Set {
			e.FieldStart("daReviewerAssignmentId")
			s.DaReviewerAssignmentId.Encode(e)
		}
	}
	{
		if s.DaReviewerFirstName.Set {
			e.FieldStart("daReviewerFirstName")
			s.DaReviewerFirstName.Encode(e)
		}
	}
	{
		if s.DaReviewerLastName.Set {
			e.FieldStart("daReviewerLastName")
			s.DaReviewerLastName.Encode(e)
		}
	}
	{
		if s.DaReviewerUserName.Set {
			e.FieldStart("daReviewerUserName")
			s.DaReviewerUserName.Encode(e)
		}
	}
	{
		if s.CensusStatus.Set {
			e.FieldStart("censusStatus")
			s.CensusStatus.Encode(e)
		}
	}
	{
		if s.PercentComplete.Set {
			e.FieldStart("percentComplete")
			s.PercentComplete.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageSystemsListGetOKSystemsListItem = [26]string{
	0:  "id",
	1:  "nextVersionId",
	2:  "previousVersionId",
	3:  "ictObjectId",
	4:  "uuid",
	5:  "name",
	6:  "description",
	7:  "version",
	8:  "acronym",
	9:  "objectState",
	10: "status",
	11: "belongsTo",
	12: "businessOwnerOrg",
	13: "businessOwnerOrgComp",
	14: "systemMaintainerOrg",
	15: "systemMaintainerOrgComp",
	16: "qaReviewerAssignmentId",
	17: "qaReviewerFirstName",
	18: "qaReviewerLastName",
	19: "qaReviewerUserName",
	20: "daReviewerAssignmentId",
	21: "daReviewerFirstName",
	22: "daReviewerLastName",
	23: "daReviewerUserName",
	24: "censusStatus",
	25: "percentComplete",
}

// Decode decodes GatewaySystem20Census20Core20API200PageSystemsListGetOKSystemsListItem from json.
func (s *GatewaySystem20Census20Core20API200PageSystemsListGetOKSystemsListItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageSystemsListGetOKSystemsListItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "nextVersionId":
			if err := func() error {
				s.NextVersionId.Reset()
				if err := s.NextVersionId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nextVersionId\"")
			}
		case "previousVersionId":
			if err := func() error {
				s.PreviousVersionId.Reset()
				if err := s.PreviousVersionId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"previousVersionId\"")
			}
		case "ictObjectId":
			if err := func() error {
				s.IctObjectId.Reset()
				if err := s.IctObjectId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ictObjectId\"")
			}
		case "uuid":
			if err := func() error {
				s.UUID.Reset()
				if err := s.UUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uuid\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "acronym":
			if err := func() error {
				s.Acronym.Reset()
				if err := s.Acronym.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"acronym\"")
			}
		case "objectState":
			if err := func() error {
				s.ObjectState.Reset()
				if err := s.ObjectState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"objectState\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "belongsTo":
			if err := func() error {
				s.BelongsTo.Reset()
				if err := s.BelongsTo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"belongsTo\"")
			}
		case "businessOwnerOrg":
			if err := func() error {
				s.BusinessOwnerOrg.Reset()
				if err := s.BusinessOwnerOrg.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"businessOwnerOrg\"")
			}
		case "businessOwnerOrgComp":
			if err := func() error {
				s.BusinessOwnerOrgComp.Reset()
				if err := s.BusinessOwnerOrgComp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"businessOwnerOrgComp\"")
			}
		case "systemMaintainerOrg":
			if err := func() error {
				s.SystemMaintainerOrg.Reset()
				if err := s.SystemMaintainerOrg.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemMaintainerOrg\"")
			}
		case "systemMaintainerOrgComp":
			if err := func() error {
				s.SystemMaintainerOrgComp.Reset()
				if err := s.SystemMaintainerOrgComp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemMaintainerOrgComp\"")
			}
		case "qaReviewerAssignmentId":
			if err := func() error {
				s.QaReviewerAssignmentId.Reset()
				if err := s.QaReviewerAssignmentId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"qaReviewerAssignmentId\"")
			}
		case "qaReviewerFirstName":
			if err := func() error {
				s.QaReviewerFirstName.Reset()
				if err := s.QaReviewerFirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"qaReviewerFirstName\"")
			}
		case "qaReviewerLastName":
			if err := func() error {
				s.QaReviewerLastName.Reset()
				if err := s.QaReviewerLastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"qaReviewerLastName\"")
			}
		case "qaReviewerUserName":
			if err := func() error {
				s.QaReviewerUserName.Reset()
				if err := s.QaReviewerUserName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"qaReviewerUserName\"")
			}
		case "daReviewerAssignmentId":
			if err := func() error {
				s.DaReviewerAssignmentId.Reset()
				if err := s.DaReviewerAssignmentId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"daReviewerAssignmentId\"")
			}
		case "daReviewerFirstName":
			if err := func() error {
				s.DaReviewerFirstName.Reset()
				if err := s.DaReviewerFirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"daReviewerFirstName\"")
			}
		case "daReviewerLastName":
			if err := func() error {
				s.DaReviewerLastName.Reset()
				if err := s.DaReviewerLastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"daReviewerLastName\"")
			}
		case "daReviewerUserName":
			if err := func() error {
				s.DaReviewerUserName.Reset()
				if err := s.DaReviewerUserName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"daReviewerUserName\"")
			}
		case "censusStatus":
			if err := func() error {
				s.CensusStatus.Reset()
				if err := s.CensusStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"censusStatus\"")
			}
		case "percentComplete":
			if err := func() error {
				s.PercentComplete.Reset()
				if err := s.PercentComplete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"percentComplete\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageSystemsListGetOKSystemsListItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemsListGetOKSystemsListItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageSystemsListGetOKSystemsListItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageUrlsGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageUrlsGetOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("count")
		e.Str(s.Count)
	}
	{
		if s.PageName.Set {
			e.FieldStart("pageName")
			s.PageName.Encode(e)
		}
	}
	{
		if s.NoURLsFlag.Set {
			e.FieldStart("noURLsFlag")
			s.NoURLsFlag.Encode(e)
		}
	}
	{
		if s.Urls != nil {
			e.FieldStart("Urls")
			e.ArrStart()
			for _, elem := range s.Urls {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageUrlsGetOK = [4]string{
	0: "count",
	1: "pageName",
	2: "noURLsFlag",
	3: "Urls",
}

// Decode decodes GatewaySystem20Census20Core20API200PageUrlsGetOK from json.
func (s *GatewaySystem20Census20Core20API200PageUrlsGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageUrlsGetOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Count = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "pageName":
			if err := func() error {
				s.PageName.Reset()
				if err := s.PageName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageName\"")
			}
		case "noURLsFlag":
			if err := func() error {
				s.NoURLsFlag.Reset()
				if err := s.NoURLsFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"noURLsFlag\"")
			}
		case "Urls":
			if err := func() error {
				s.Urls = make([]GatewaySystem20Census20Core20API200PageUrlsGetOKUrlsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200PageUrlsGetOKUrlsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Urls = append(s.Urls, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Urls\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageUrlsGetOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200PageUrlsGetOK) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200PageUrlsGetOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageUrlsGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageUrlsGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageUrlsGetOKUrlsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageUrlsGetOKUrlsItem) encodeFields(e *jx.Encoder) {
	{
		if s.UrlId.Set {
			e.FieldStart("urlId")
			s.UrlId.Encode(e)
		}
	}
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.UrlApiEndpoint.Set {
			e.FieldStart("urlApiEndpoint")
			s.UrlApiEndpoint.Encode(e)
		}
	}
	{
		if s.UrlApiWaf.Set {
			e.FieldStart("urlApiWaf")
			s.UrlApiWaf.Encode(e)
		}
	}
	{
		if s.ProvidesVerCodeAccess.Set {
			e.FieldStart("providesVerCodeAccess")
			s.ProvidesVerCodeAccess.Encode(e)
		}
	}
	{
		if s.UrlHostingEnv.Set {
			e.FieldStart("urlHostingEnv")
			s.UrlHostingEnv.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageUrlsGetOKUrlsItem = [6]string{
	0: "urlId",
	1: "link",
	2: "urlApiEndpoint",
	3: "urlApiWaf",
	4: "providesVerCodeAccess",
	5: "urlHostingEnv",
}

// Decode decodes GatewaySystem20Census20Core20API200PageUrlsGetOKUrlsItem from json.
func (s *GatewaySystem20Census20Core20API200PageUrlsGetOKUrlsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageUrlsGetOKUrlsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "urlId":
			if err := func() error {
				s.UrlId.Reset()
				if err := s.UrlId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"urlId\"")
			}
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "urlApiEndpoint":
			if err := func() error {
				s.UrlApiEndpoint.Reset()
				if err := s.UrlApiEndpoint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"urlApiEndpoint\"")
			}
		case "urlApiWaf":
			if err := func() error {
				s.UrlApiWaf.Reset()
				if err := s.UrlApiWaf.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"urlApiWaf\"")
			}
		case "providesVerCodeAccess":
			if err := func() error {
				s.ProvidesVerCodeAccess.Reset()
				if err := s.ProvidesVerCodeAccess.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"providesVerCodeAccess\"")
			}
		case "urlHostingEnv":
			if err := func() error {
				s.UrlHostingEnv.Reset()
				if err := s.UrlHostingEnv.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"urlHostingEnv\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageUrlsGetOKUrlsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageUrlsGetOKUrlsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageUrlsGetOKUrlsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageUrlsPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageUrlsPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageUrlsPostOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200PageUrlsPostOK from json.
func (s *GatewaySystem20Census20Core20API200PageUrlsPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageUrlsPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageUrlsPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageUrlsPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageUrlsPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageUrlsPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageUrlsPostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("systemId")
		e.Str(s.SystemId)
	}
	{
		e.FieldStart("Urls")
		e.ArrStart()
		for _, elem := range s.Urls {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageUrlsPostReq = [2]string{
	0: "systemId",
	1: "Urls",
}

// Decode decodes GatewaySystem20Census20Core20API200PageUrlsPostReq from json.
func (s *GatewaySystem20Census20Core20API200PageUrlsPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageUrlsPostReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "systemId":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.SystemId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "Urls":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.Urls = make([]GatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Urls = append(s.Urls, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Urls\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageUrlsPostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200PageUrlsPostReq) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200PageUrlsPostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageUrlsPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageUrlsPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Deleted.Set {
			e.FieldStart("deleted")
			s.Deleted.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		e.FieldStart("Url")
		e.ArrStart()
		for _, elem := range s.URL {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItem = [3]string{
	0: "deleted",
	1: "updated",
	2: "Url",
}

// Decode decodes GatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItem from json.
func (s *GatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "deleted":
			if err := func() error {
				s.Deleted.Reset()
				if err := s.Deleted.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deleted\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "Url":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				s.URL = make([]GatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItemURLItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItemURLItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.URL = append(s.URL, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Url\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000100,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItem) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItemURLItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItemURLItem) encodeFields(e *jx.Encoder) {
	{
		if s.UrlId.Set {
			e.FieldStart("urlId")
			s.UrlId.Encode(e)
		}
	}
	{
		if s.Link.Set {
			e.FieldStart("link")
			s.Link.Encode(e)
		}
	}
	{
		if s.UrlHostingEnv.Set {
			e.FieldStart("urlHostingEnv")
			s.UrlHostingEnv.Encode(e)
		}
	}
	{
		if s.UrlApiEndpoint.Set {
			e.FieldStart("urlApiEndpoint")
			s.UrlApiEndpoint.Encode(e)
		}
	}
	{
		if s.UrlApiWaf.Set {
			e.FieldStart("urlApiWaf")
			s.UrlApiWaf.Encode(e)
		}
	}
	{
		if s.ProvidesVerCodeAccess.Set {
			e.FieldStart("providesVerCodeAccess")
			s.ProvidesVerCodeAccess.Encode(e)
		}
	}
	{
		if s.ConfidenceLevel.Set {
			e.FieldStart("confidenceLevel")
			s.ConfidenceLevel.Encode(e)
		}
	}
	{
		if s.IsIntranetOnly.Set {
			e.FieldStart("isIntranetOnly")
			s.IsIntranetOnly.Encode(e)
		}
	}
	{
		if s.PortalServicesUsed.Set {
			e.FieldStart("portalServicesUsed")
			s.PortalServicesUsed.Encode(e)
		}
	}
	{
		if s.UsedforBeneficiary.Set {
			e.FieldStart("usedforBeneficiary")
			s.UsedforBeneficiary.Encode(e)
		}
	}
	{
		if s.UsesHTTPS.Set {
			e.FieldStart("usesHTTPS")
			s.UsesHTTPS.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItemURLItem = [11]string{
	0:  "urlId",
	1:  "link",
	2:  "urlHostingEnv",
	3:  "urlApiEndpoint",
	4:  "urlApiWaf",
	5:  "providesVerCodeAccess",
	6:  "confidenceLevel",
	7:  "isIntranetOnly",
	8:  "portalServicesUsed",
	9:  "usedforBeneficiary",
	10: "usesHTTPS",
}

// Decode decodes GatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItemURLItem from json.
func (s *GatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItemURLItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItemURLItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "urlId":
			if err := func() error {
				s.UrlId.Reset()
				if err := s.UrlId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"urlId\"")
			}
		case "link":
			if err := func() error {
				s.Link.Reset()
				if err := s.Link.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link\"")
			}
		case "urlHostingEnv":
			if err := func() error {
				s.UrlHostingEnv.Reset()
				if err := s.UrlHostingEnv.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"urlHostingEnv\"")
			}
		case "urlApiEndpoint":
			if err := func() error {
				s.UrlApiEndpoint.Reset()
				if err := s.UrlApiEndpoint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"urlApiEndpoint\"")
			}
		case "urlApiWaf":
			if err := func() error {
				s.UrlApiWaf.Reset()
				if err := s.UrlApiWaf.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"urlApiWaf\"")
			}
		case "providesVerCodeAccess":
			if err := func() error {
				s.ProvidesVerCodeAccess.Reset()
				if err := s.ProvidesVerCodeAccess.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"providesVerCodeAccess\"")
			}
		case "confidenceLevel":
			if err := func() error {
				s.ConfidenceLevel.Reset()
				if err := s.ConfidenceLevel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"confidenceLevel\"")
			}
		case "isIntranetOnly":
			if err := func() error {
				s.IsIntranetOnly.Reset()
				if err := s.IsIntranetOnly.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isIntranetOnly\"")
			}
		case "portalServicesUsed":
			if err := func() error {
				s.PortalServicesUsed.Reset()
				if err := s.PortalServicesUsed.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"portalServicesUsed\"")
			}
		case "usedforBeneficiary":
			if err := func() error {
				s.UsedforBeneficiary.Reset()
				if err := s.UsedforBeneficiary.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usedforBeneficiary\"")
			}
		case "usesHTTPS":
			if err := func() error {
				s.UsesHTTPS.Reset()
				if err := s.UsesHTTPS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usesHTTPS\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItemURLItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItemURLItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PageUrlsPostReqUrlsItemURLItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PersonGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PersonGetOK) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("count")
		e.Int(s.Count)
	}
	{
		e.FieldStart("Users")
		e.ArrStart()
		for _, elem := range s.Users {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PersonGetOK = [2]string{
	0: "count",
	1: "Users",
}

// Decode decodes GatewaySystem20Census20Core20API200PersonGetOK from json.
func (s *GatewaySystem20Census20Core20API200PersonGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PersonGetOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Int()
				s.Count = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "Users":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.Users = make([]GatewaySystem20Census20Core20API200PersonGetOKUsersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200PersonGetOKUsersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Users = append(s.Users, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Users\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PersonGetOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200PersonGetOK) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200PersonGetOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PersonGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PersonGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PersonGetOKUsersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PersonGetOKUsersItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.UserName.Set {
			e.FieldStart("userName")
			s.UserName.Encode(e)
		}
	}
	{
		if s.FirstName.Set {
			e.FieldStart("firstName")
			s.FirstName.Encode(e)
		}
	}
	{
		if s.LastName.Set {
			e.FieldStart("lastName")
			s.LastName.Encode(e)
		}
	}
	{
		if s.Phone.Set {
			e.FieldStart("phone")
			s.Phone.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PersonGetOKUsersItem = [6]string{
	0: "id",
	1: "userName",
	2: "firstName",
	3: "lastName",
	4: "phone",
	5: "email",
}

// Decode decodes GatewaySystem20Census20Core20API200PersonGetOKUsersItem from json.
func (s *GatewaySystem20Census20Core20API200PersonGetOKUsersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PersonGetOKUsersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "userName":
			if err := func() error {
				s.UserName.Reset()
				if err := s.UserName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"userName\"")
			}
		case "firstName":
			if err := func() error {
				s.FirstName.Reset()
				if err := s.FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"firstName\"")
			}
		case "lastName":
			if err := func() error {
				s.LastName.Reset()
				if err := s.LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lastName\"")
			}
		case "phone":
			if err := func() error {
				s.Phone.Reset()
				if err := s.Phone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PersonGetOKUsersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PersonGetOKUsersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PersonGetOKUsersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200PersonGetReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200PersonGetReq) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200PersonGetReq = [0]string{}

// Decode decodes GatewaySystem20Census20Core20API200PersonGetReq from json.
func (s *GatewaySystem20Census20Core20API200PersonGetReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200PersonGetReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200PersonGetReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200PersonGetReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200PersonGetReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200SoftwareProductsPostOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200SoftwareProductsPostOK from json.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SoftwareProductsPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200SoftwareProductsPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReq) encodeFields(e *jx.Encoder) {
	{
		if s.ProductOnly.Set {
			e.FieldStart("productOnly")
			s.ProductOnly.Encode(e)
		}
	}
	{
		e.FieldStart("applicationId")
		e.Str(s.ApplicationId)
	}
	{
		if s.ApisDeveloped.Set {
			e.FieldStart("apisDeveloped")
			s.ApisDeveloped.Encode(e)
		}
	}
	{
		if s.ApiDescPublished.Set {
			e.FieldStart("apiDescPublished")
			s.ApiDescPublished.Encode(e)
		}
	}
	{
		if s.ApiDescPubLocation.Set {
			e.FieldStart("apiDescPubLocation")
			s.ApiDescPubLocation.Encode(e)
		}
	}
	{
		if s.ApiDataArea.Set {
			e.FieldStart("apiDataArea")
			s.ApiDataArea.Encode(e)
		}
	}
	{
		if s.ApisAccessibility.Set {
			e.FieldStart("apisAccessibility")
			s.ApisAccessibility.Encode(e)
		}
	}
	{
		if s.ApiFHIRUse.Set {
			e.FieldStart("apiFHIRUse")
			s.ApiFHIRUse.Encode(e)
		}
	}
	{
		if s.ApiFHIRUseOther.Set {
			e.FieldStart("apiFHIRUseOther")
			s.ApiFHIRUseOther.Encode(e)
		}
	}
	{
		if s.SystemHasApiGateway.Set {
			e.FieldStart("systemHasApiGateway")
			s.SystemHasApiGateway.Encode(e)
		}
	}
	{
		if s.ApiHasPortal.Set {
			e.FieldStart("apiHasPortal")
			s.ApiHasPortal.Encode(e)
		}
	}
	{
		if s.UsesAiTech.Set {
			e.FieldStart("usesAiTech")
			s.UsesAiTech.Encode(e)
		}
	}
	{
		if s.DevelopmentStage.Set {
			e.FieldStart("developmentStage")
			s.DevelopmentStage.Encode(e)
		}
	}
	{
		if s.AiSolnCatg.Set {
			e.FieldStart("aiSolnCatg")
			s.AiSolnCatg.Encode(e)
		}
	}
	{
		if s.AiSolnCatgOther.Set {
			e.FieldStart("aiSolnCatgOther")
			s.AiSolnCatgOther.Encode(e)
		}
	}
	{
		if s.SoftwareProducts.Set {
			e.FieldStart("SoftwareProducts")
			s.SoftwareProducts.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200SoftwareProductsPostReq = [16]string{
	0:  "productOnly",
	1:  "applicationId",
	2:  "apisDeveloped",
	3:  "apiDescPublished",
	4:  "apiDescPubLocation",
	5:  "apiDataArea",
	6:  "apisAccessibility",
	7:  "apiFHIRUse",
	8:  "apiFHIRUseOther",
	9:  "systemHasApiGateway",
	10: "apiHasPortal",
	11: "usesAiTech",
	12: "developmentStage",
	13: "aiSolnCatg",
	14: "aiSolnCatgOther",
	15: "SoftwareProducts",
}

// Decode decodes GatewaySystem20Census20Core20API200SoftwareProductsPostReq from json.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SoftwareProductsPostReq to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "productOnly":
			if err := func() error {
				s.ProductOnly.Reset()
				if err := s.ProductOnly.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"productOnly\"")
			}
		case "applicationId":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.ApplicationId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"applicationId\"")
			}
		case "apisDeveloped":
			if err := func() error {
				s.ApisDeveloped.Reset()
				if err := s.ApisDeveloped.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apisDeveloped\"")
			}
		case "apiDescPublished":
			if err := func() error {
				s.ApiDescPublished.Reset()
				if err := s.ApiDescPublished.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiDescPublished\"")
			}
		case "apiDescPubLocation":
			if err := func() error {
				s.ApiDescPubLocation.Reset()
				if err := s.ApiDescPubLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiDescPubLocation\"")
			}
		case "apiDataArea":
			if err := func() error {
				s.ApiDataArea.Reset()
				if err := s.ApiDataArea.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiDataArea\"")
			}
		case "apisAccessibility":
			if err := func() error {
				s.ApisAccessibility.Reset()
				if err := s.ApisAccessibility.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apisAccessibility\"")
			}
		case "apiFHIRUse":
			if err := func() error {
				s.ApiFHIRUse.Reset()
				if err := s.ApiFHIRUse.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiFHIRUse\"")
			}
		case "apiFHIRUseOther":
			if err := func() error {
				s.ApiFHIRUseOther.Reset()
				if err := s.ApiFHIRUseOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiFHIRUseOther\"")
			}
		case "systemHasApiGateway":
			if err := func() error {
				s.SystemHasApiGateway.Reset()
				if err := s.SystemHasApiGateway.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemHasApiGateway\"")
			}
		case "apiHasPortal":
			if err := func() error {
				s.ApiHasPortal.Reset()
				if err := s.ApiHasPortal.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apiHasPortal\"")
			}
		case "usesAiTech":
			if err := func() error {
				s.UsesAiTech.Reset()
				if err := s.UsesAiTech.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usesAiTech\"")
			}
		case "developmentStage":
			if err := func() error {
				s.DevelopmentStage.Reset()
				if err := s.DevelopmentStage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"developmentStage\"")
			}
		case "aiSolnCatg":
			if err := func() error {
				s.AiSolnCatg.Reset()
				if err := s.AiSolnCatg.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aiSolnCatg\"")
			}
		case "aiSolnCatgOther":
			if err := func() error {
				s.AiSolnCatgOther.Reset()
				if err := s.AiSolnCatgOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aiSolnCatgOther\"")
			}
		case "SoftwareProducts":
			if err := func() error {
				s.SoftwareProducts.Reset()
				if err := s.SoftwareProducts.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SoftwareProducts\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200SoftwareProductsPostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00000010,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200SoftwareProductsPostReq) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200SoftwareProductsPostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Deleted.Set {
			e.FieldStart("deleted")
			s.Deleted.Encode(e)
		}
	}
	{
		e.FieldStart("Products")
		e.ArrStart()
		for _, elem := range s.Products {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItem = [2]string{
	0: "deleted",
	1: "Products",
}

// Decode decodes GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItem from json.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItem to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "deleted":
			if err := func() error {
				s.Deleted.Reset()
				if err := s.Deleted.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deleted\"")
			}
		case "Products":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.Products = make([]GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Products = append(s.Products, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Products\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000010,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItem) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem) encodeFields(e *jx.Encoder) {
	{
		if s.SoftwareProductId.Set {
			e.FieldStart("softwareProductId")
			s.SoftwareProductId.Encode(e)
		}
	}
	{
		if s.TechnopediaID.Set {
			e.FieldStart("technopedia_id")
			s.TechnopediaID.Encode(e)
		}
	}
	{
		if s.SoftwareName.Set {
			e.FieldStart("software_name")
			s.SoftwareName.Encode(e)
		}
	}
	{
		if s.VendorName.Set {
			e.FieldStart("vendor_name")
			s.VendorName.Encode(e)
		}
	}
	{
		if s.Category.Set {
			e.FieldStart("category")
			s.Category.Encode(e)
		}
	}
	{
		if s.APIGatewayUse.Set {
			e.FieldStart("api_gateway_use")
			s.APIGatewayUse.Encode(e)
		}
	}
	{
		if s.ProvidesAiCapability.Set {
			e.FieldStart("provides_ai_capability")
			s.ProvidesAiCapability.Encode(e)
		}
	}
	{
		if s.ElaPurchase.Set {
			e.FieldStart("ela_purchase")
			s.ElaPurchase.Encode(e)
		}
	}
	{
		if s.ElaOrganization.Set {
			e.FieldStart("ela_organization")
			s.ElaOrganization.Encode(e)
		}
	}
	{
		if s.SystemSoftwareConnectionGuid.Set {
			e.FieldStart("systemSoftwareConnectionGuid")
			s.SystemSoftwareConnectionGuid.Encode(e)
		}
	}
	{
		if s.SoftwareCost.Set {
			e.FieldStart("software_cost")
			s.SoftwareCost.Encode(e)
		}
	}
	{
		if s.ActualVersion.Set {
			e.FieldStart("actualVersion")
			s.ActualVersion.Encode(e)
		}
	}
	{
		if s.ClosestVersion.Set {
			e.FieldStart("closestVersion")
			s.ClosestVersion.Encode(e)
		}
	}
	{
		if s.SoftwareLicenseMechanismType.Set {
			e.FieldStart("softwareLicenseMechanismType")
			s.SoftwareLicenseMechanismType.Encode(e)
		}
	}
	{
		if s.SoftwareLicenseMechanismTypeOther.Set {
			e.FieldStart("softwareLicenseMechanismTypeOther")
			s.SoftwareLicenseMechanismTypeOther.Encode(e)
		}
	}
	{
		if s.NumberOfLicensesBought.Set {
			e.FieldStart("numberOfLicensesBought")
			s.NumberOfLicensesBought.Encode(e)
		}
	}
	{
		if s.NumberOfLicensesUtilized.Set {
			e.FieldStart("numberOfLicensesUtilized")
			s.NumberOfLicensesUtilized.Encode(e)
		}
	}
	{
		if s.SoftwareLicenseNotes.Set {
			e.FieldStart("softwareLicenseNotes")
			s.SoftwareLicenseNotes.Encode(e)
		}
	}
	{
		if s.SoftwareNonELAPurchaseNotes.Set {
			e.FieldStart("softwareNonELAPurchaseNotes")
			s.SoftwareNonELAPurchaseNotes.Encode(e)
		}
	}
	{
		if s.IsSaasProduct.Set {
			e.FieldStart("isSaasProduct")
			s.IsSaasProduct.Encode(e)
		}
	}
	{
		if s.VendorOffersAIcapabilityviaSoftwareProduct.Set {
			e.FieldStart("vendorOffersAIcapabilityviaSoftwareProduct")
			s.VendorOffersAIcapabilityviaSoftwareProduct.Encode(e)
		}
	}
	{
		if s.SoftwarePurchaseContractNumber.Set {
			e.FieldStart("softwarePurchaseContractNumber")
			s.SoftwarePurchaseContractNumber.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem = [22]string{
	0:  "softwareProductId",
	1:  "technopedia_id",
	2:  "software_name",
	3:  "vendor_name",
	4:  "category",
	5:  "api_gateway_use",
	6:  "provides_ai_capability",
	7:  "ela_purchase",
	8:  "ela_organization",
	9:  "systemSoftwareConnectionGuid",
	10: "software_cost",
	11: "actualVersion",
	12: "closestVersion",
	13: "softwareLicenseMechanismType",
	14: "softwareLicenseMechanismTypeOther",
	15: "numberOfLicensesBought",
	16: "numberOfLicensesUtilized",
	17: "softwareLicenseNotes",
	18: "softwareNonELAPurchaseNotes",
	19: "isSaasProduct",
	20: "vendorOffersAIcapabilityviaSoftwareProduct",
	21: "softwarePurchaseContractNumber",
}

// Decode decodes GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem from json.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "softwareProductId":
			if err := func() error {
				s.SoftwareProductId.Reset()
				if err := s.SoftwareProductId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"softwareProductId\"")
			}
		case "technopedia_id":
			if err := func() error {
				s.TechnopediaID.Reset()
				if err := s.TechnopediaID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"technopedia_id\"")
			}
		case "software_name":
			if err := func() error {
				s.SoftwareName.Reset()
				if err := s.SoftwareName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"software_name\"")
			}
		case "vendor_name":
			if err := func() error {
				s.VendorName.Reset()
				if err := s.VendorName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vendor_name\"")
			}
		case "category":
			if err := func() error {
				s.Category.Reset()
				if err := s.Category.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"category\"")
			}
		case "api_gateway_use":
			if err := func() error {
				s.APIGatewayUse.Reset()
				if err := s.APIGatewayUse.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_gateway_use\"")
			}
		case "provides_ai_capability":
			if err := func() error {
				s.ProvidesAiCapability.Reset()
				if err := s.ProvidesAiCapability.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_ai_capability\"")
			}
		case "ela_purchase":
			if err := func() error {
				s.ElaPurchase.Reset()
				if err := s.ElaPurchase.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ela_purchase\"")
			}
		case "ela_organization":
			if err := func() error {
				s.ElaOrganization.Reset()
				if err := s.ElaOrganization.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ela_organization\"")
			}
		case "systemSoftwareConnectionGuid":
			if err := func() error {
				s.SystemSoftwareConnectionGuid.Reset()
				if err := s.SystemSoftwareConnectionGuid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemSoftwareConnectionGuid\"")
			}
		case "software_cost":
			if err := func() error {
				s.SoftwareCost.Reset()
				if err := s.SoftwareCost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"software_cost\"")
			}
		case "actualVersion":
			if err := func() error {
				s.ActualVersion.Reset()
				if err := s.ActualVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"actualVersion\"")
			}
		case "closestVersion":
			if err := func() error {
				s.ClosestVersion.Reset()
				if err := s.ClosestVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"closestVersion\"")
			}
		case "softwareLicenseMechanismType":
			if err := func() error {
				s.SoftwareLicenseMechanismType.Reset()
				if err := s.SoftwareLicenseMechanismType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"softwareLicenseMechanismType\"")
			}
		case "softwareLicenseMechanismTypeOther":
			if err := func() error {
				s.SoftwareLicenseMechanismTypeOther.Reset()
				if err := s.SoftwareLicenseMechanismTypeOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"softwareLicenseMechanismTypeOther\"")
			}
		case "numberOfLicensesBought":
			if err := func() error {
				s.NumberOfLicensesBought.Reset()
				if err := s.NumberOfLicensesBought.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numberOfLicensesBought\"")
			}
		case "numberOfLicensesUtilized":
			if err := func() error {
				s.NumberOfLicensesUtilized.Reset()
				if err := s.NumberOfLicensesUtilized.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numberOfLicensesUtilized\"")
			}
		case "softwareLicenseNotes":
			if err := func() error {
				s.SoftwareLicenseNotes.Reset()
				if err := s.SoftwareLicenseNotes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"softwareLicenseNotes\"")
			}
		case "softwareNonELAPurchaseNotes":
			if err := func() error {
				s.SoftwareNonELAPurchaseNotes.Reset()
				if err := s.SoftwareNonELAPurchaseNotes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"softwareNonELAPurchaseNotes\"")
			}
		case "isSaasProduct":
			if err := func() error {
				s.IsSaasProduct.Reset()
				if err := s.IsSaasProduct.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isSaasProduct\"")
			}
		case "vendorOffersAIcapabilityviaSoftwareProduct":
			if err := func() error {
				s.VendorOffersAIcapabilityviaSoftwareProduct.Reset()
				if err := s.VendorOffersAIcapabilityviaSoftwareProduct.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vendorOffersAIcapabilityviaSoftwareProduct\"")
			}
		case "softwarePurchaseContractNumber":
			if err := func() error {
				s.SoftwarePurchaseContractNumber.Reset()
				if err := s.SoftwarePurchaseContractNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"softwarePurchaseContractNumber\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemIsSaasProduct as json.
func (s GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemIsSaasProduct) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemIsSaasProduct from json.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemIsSaasProduct) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemIsSaasProduct to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemIsSaasProduct(v) {
	case GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemIsSaasProductYes:
		*s = GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemIsSaasProductYes
	case GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemIsSaasProductNo:
		*s = GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemIsSaasProductNo
	default:
		*s = GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemIsSaasProduct(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemIsSaasProduct) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemIsSaasProduct) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemProvidesAiCapability as json.
func (s GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemProvidesAiCapability) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemProvidesAiCapability from json.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemProvidesAiCapability) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemProvidesAiCapability to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemProvidesAiCapability(v) {
	case GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemProvidesAiCapabilityYes:
		*s = GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemProvidesAiCapabilityYes
	case GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemProvidesAiCapabilityNo:
		*s = GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemProvidesAiCapabilityNo
	default:
		*s = GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemProvidesAiCapability(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemProvidesAiCapability) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemProvidesAiCapability) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismType as json.
func (s GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismType from json.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismType(v) {
	case GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismTypeNamedUser:
		*s = GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismTypeNamedUser
	case GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismTypeConcurrentUser:
		*s = GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismTypeConcurrentUser
	case GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismTypeSiteLicense:
		*s = GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismTypeSiteLicense
	case GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismTypeProcessor:
		*s = GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismTypeProcessor
	case GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismTypeOther:
		*s = GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismTypeOther
	default:
		*s = GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemVendorOffersAIcapabilityviaSoftwareProduct as json.
func (s GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemVendorOffersAIcapabilityviaSoftwareProduct) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemVendorOffersAIcapabilityviaSoftwareProduct from json.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemVendorOffersAIcapabilityviaSoftwareProduct) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemVendorOffersAIcapabilityviaSoftwareProduct to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemVendorOffersAIcapabilityviaSoftwareProduct(v) {
	case GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemVendorOffersAIcapabilityviaSoftwareProductYes:
		*s = GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemVendorOffersAIcapabilityviaSoftwareProductYes
	case GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemVendorOffersAIcapabilityviaSoftwareProductNo:
		*s = GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemVendorOffersAIcapabilityviaSoftwareProductNo
	default:
		*s = GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemVendorOffersAIcapabilityviaSoftwareProduct(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemVendorOffersAIcapabilityviaSoftwareProduct) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemVendorOffersAIcapabilityviaSoftwareProduct) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200StatusDeleteBadRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200StatusDeleteBadRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200StatusDeleteBadRequest = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200StatusDeleteBadRequest from json.
func (s *GatewaySystem20Census20Core20API200StatusDeleteBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200StatusDeleteBadRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200StatusDeleteBadRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200StatusDeleteBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200StatusDeleteBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200StatusDeleteInternalServerError) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200StatusDeleteInternalServerError) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200StatusDeleteInternalServerError = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200StatusDeleteInternalServerError from json.
func (s *GatewaySystem20Census20Core20API200StatusDeleteInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200StatusDeleteInternalServerError to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200StatusDeleteInternalServerError")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200StatusDeleteInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200StatusDeleteInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200StatusDeleteOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200StatusDeleteOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200StatusDeleteOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200StatusDeleteOK from json.
func (s *GatewaySystem20Census20Core20API200StatusDeleteOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200StatusDeleteOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200StatusDeleteOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200StatusDeleteOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200StatusDeleteOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200StatusGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200StatusGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.Status != nil {
			e.FieldStart("status")
			e.ArrStart()
			for _, elem := range s.Status {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200StatusGetOK = [2]string{
	0: "count",
	1: "status",
}

// Decode decodes GatewaySystem20Census20Core20API200StatusGetOK from json.
func (s *GatewaySystem20Census20Core20API200StatusGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200StatusGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "status":
			if err := func() error {
				s.Status = make([]GatewaySystem20Census20Core20API200StatusGetOKStatusItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200StatusGetOKStatusItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Status = append(s.Status, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200StatusGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200StatusGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200StatusGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200StatusGetOKStatusItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200StatusGetOKStatusItem) encodeFields(e *jx.Encoder) {
	{
		if s.SYSTEMSURVEYPAGESTATUSID.Set {
			e.FieldStart("SYSTEM_SURVEY_PAGE_STATUS_ID")
			s.SYSTEMSURVEYPAGESTATUSID.Encode(e)
		}
	}
	{
		if s.APPLICATIONREFSTR.Set {
			e.FieldStart("APPLICATION_REFSTR")
			s.APPLICATIONREFSTR.Encode(e)
		}
	}
	{
		if s.PAGENAME.Set {
			e.FieldStart("PAGE_NAME")
			s.PAGENAME.Encode(e)
		}
	}
	{
		if s.STATUS.Set {
			e.FieldStart("STATUS")
			s.STATUS.Encode(e)
		}
	}
	{
		if s.PAGERESPONDENT.Set {
			e.FieldStart("PAGE_RESPONDENT")
			s.PAGERESPONDENT.Encode(e)
		}
	}
	{
		if s.PERCENTCOMPLETE.Set {
			e.FieldStart("PERCENT_COMPLETE")
			s.PERCENTCOMPLETE.Encode(e)
		}
	}
	{
		if s.LASTUPDATEDDATE.Set {
			e.FieldStart("LAST_UPDATED_DATE")
			s.LASTUPDATEDDATE.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.LASTUPDATEDBY.Set {
			e.FieldStart("LAST_UPDATED_BY")
			s.LASTUPDATEDBY.Encode(e)
		}
	}
	{
		if s.LASTCOMMUNICATIONDATE.Set {
			e.FieldStart("LAST_COMMUNICATION_DATE")
			s.LASTCOMMUNICATIONDATE.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.DISPLAYPAGENAME.Set {
			e.FieldStart("DISPLAY_PAGE_NAME")
			s.DISPLAYPAGENAME.Encode(e)
		}
	}
	{
		if s.PAGERESPONDENTFIRSTNAME.Set {
			e.FieldStart("PAGE_RESPONDENT_FIRST_NAME")
			s.PAGERESPONDENTFIRSTNAME.Encode(e)
		}
	}
	{
		if s.PAGERESPONDENTLASTNAME.Set {
			e.FieldStart("PAGE_RESPONDENT_LAST_NAME")
			s.PAGERESPONDENTLASTNAME.Encode(e)
		}
	}
	{
		if s.LASTUPDATEDFIRSTNAME.Set {
			e.FieldStart("LAST_UPDATED_FIRST_NAME")
			s.LASTUPDATEDFIRSTNAME.Encode(e)
		}
	}
	{
		if s.LASTUPDATEDLASTNAME.Set {
			e.FieldStart("LAST_UPDATED_LAST_NAME")
			s.LASTUPDATEDLASTNAME.Encode(e)
		}
	}
	{
		if s.SystemID.Set {
			e.FieldStart("System_ID")
			s.SystemID.Encode(e)
		}
	}
	{
		if s.LASTRESPONDENTDATE.Set {
			e.FieldStart("LAST_RESPONDENT_DATE")
			s.LASTRESPONDENTDATE.Encode(e, json.EncodeDateTime)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200StatusGetOKStatusItem = [16]string{
	0:  "SYSTEM_SURVEY_PAGE_STATUS_ID",
	1:  "APPLICATION_REFSTR",
	2:  "PAGE_NAME",
	3:  "STATUS",
	4:  "PAGE_RESPONDENT",
	5:  "PERCENT_COMPLETE",
	6:  "LAST_UPDATED_DATE",
	7:  "LAST_UPDATED_BY",
	8:  "LAST_COMMUNICATION_DATE",
	9:  "DISPLAY_PAGE_NAME",
	10: "PAGE_RESPONDENT_FIRST_NAME",
	11: "PAGE_RESPONDENT_LAST_NAME",
	12: "LAST_UPDATED_FIRST_NAME",
	13: "LAST_UPDATED_LAST_NAME",
	14: "System_ID",
	15: "LAST_RESPONDENT_DATE",
}

// Decode decodes GatewaySystem20Census20Core20API200StatusGetOKStatusItem from json.
func (s *GatewaySystem20Census20Core20API200StatusGetOKStatusItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200StatusGetOKStatusItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "SYSTEM_SURVEY_PAGE_STATUS_ID":
			if err := func() error {
				s.SYSTEMSURVEYPAGESTATUSID.Reset()
				if err := s.SYSTEMSURVEYPAGESTATUSID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SYSTEM_SURVEY_PAGE_STATUS_ID\"")
			}
		case "APPLICATION_REFSTR":
			if err := func() error {
				s.APPLICATIONREFSTR.Reset()
				if err := s.APPLICATIONREFSTR.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"APPLICATION_REFSTR\"")
			}
		case "PAGE_NAME":
			if err := func() error {
				s.PAGENAME.Reset()
				if err := s.PAGENAME.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PAGE_NAME\"")
			}
		case "STATUS":
			if err := func() error {
				s.STATUS.Reset()
				if err := s.STATUS.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"STATUS\"")
			}
		case "PAGE_RESPONDENT":
			if err := func() error {
				s.PAGERESPONDENT.Reset()
				if err := s.PAGERESPONDENT.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PAGE_RESPONDENT\"")
			}
		case "PERCENT_COMPLETE":
			if err := func() error {
				s.PERCENTCOMPLETE.Reset()
				if err := s.PERCENTCOMPLETE.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PERCENT_COMPLETE\"")
			}
		case "LAST_UPDATED_DATE":
			if err := func() error {
				s.LASTUPDATEDDATE.Reset()
				if err := s.LASTUPDATEDDATE.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"LAST_UPDATED_DATE\"")
			}
		case "LAST_UPDATED_BY":
			if err := func() error {
				s.LASTUPDATEDBY.Reset()
				if err := s.LASTUPDATEDBY.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"LAST_UPDATED_BY\"")
			}
		case "LAST_COMMUNICATION_DATE":
			if err := func() error {
				s.LASTCOMMUNICATIONDATE.Reset()
				if err := s.LASTCOMMUNICATIONDATE.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"LAST_COMMUNICATION_DATE\"")
			}
		case "DISPLAY_PAGE_NAME":
			if err := func() error {
				s.DISPLAYPAGENAME.Reset()
				if err := s.DISPLAYPAGENAME.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"DISPLAY_PAGE_NAME\"")
			}
		case "PAGE_RESPONDENT_FIRST_NAME":
			if err := func() error {
				s.PAGERESPONDENTFIRSTNAME.Reset()
				if err := s.PAGERESPONDENTFIRSTNAME.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PAGE_RESPONDENT_FIRST_NAME\"")
			}
		case "PAGE_RESPONDENT_LAST_NAME":
			if err := func() error {
				s.PAGERESPONDENTLASTNAME.Reset()
				if err := s.PAGERESPONDENTLASTNAME.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"PAGE_RESPONDENT_LAST_NAME\"")
			}
		case "LAST_UPDATED_FIRST_NAME":
			if err := func() error {
				s.LASTUPDATEDFIRSTNAME.Reset()
				if err := s.LASTUPDATEDFIRSTNAME.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"LAST_UPDATED_FIRST_NAME\"")
			}
		case "LAST_UPDATED_LAST_NAME":
			if err := func() error {
				s.LASTUPDATEDLASTNAME.Reset()
				if err := s.LASTUPDATEDLASTNAME.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"LAST_UPDATED_LAST_NAME\"")
			}
		case "System_ID":
			if err := func() error {
				s.SystemID.Reset()
				if err := s.SystemID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"System_ID\"")
			}
		case "LAST_RESPONDENT_DATE":
			if err := func() error {
				s.LASTRESPONDENTDATE.Reset()
				if err := s.LASTRESPONDENTDATE.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"LAST_RESPONDENT_DATE\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200StatusGetOKStatusItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200StatusGetOKStatusItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200StatusGetOKStatusItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200StatusPostBadRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200StatusPostBadRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200StatusPostBadRequest = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200StatusPostBadRequest from json.
func (s *GatewaySystem20Census20Core20API200StatusPostBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200StatusPostBadRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200StatusPostBadRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200StatusPostBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200StatusPostBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200StatusPostInternalServerError) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200StatusPostInternalServerError) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200StatusPostInternalServerError = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200StatusPostInternalServerError from json.
func (s *GatewaySystem20Census20Core20API200StatusPostInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200StatusPostInternalServerError to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200StatusPostInternalServerError")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200StatusPostInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200StatusPostInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200StatusPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200StatusPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Inserted.Set {
			e.FieldStart("inserted")
			s.Inserted.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200StatusPostOK = [3]string{
	0: "result",
	1: "inserted",
	2: "updated",
}

// Decode decodes GatewaySystem20Census20Core20API200StatusPostOK from json.
func (s *GatewaySystem20Census20Core20API200StatusPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200StatusPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "inserted":
			if err := func() error {
				s.Inserted.Reset()
				if err := s.Inserted.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"inserted\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200StatusPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200StatusPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200StatusPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200StatusPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200StatusPostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("Status")
		e.ArrStart()
		for _, elem := range s.Status {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200StatusPostReq = [1]string{
	0: "Status",
}

// Decode decodes GatewaySystem20Census20Core20API200StatusPostReq from json.
func (s *GatewaySystem20Census20Core20API200StatusPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200StatusPostReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "Status":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				s.Status = make([]GatewaySystem20Census20Core20API200StatusPostReqStatusItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200StatusPostReqStatusItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Status = append(s.Status, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200StatusPostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200StatusPostReq) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200StatusPostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200StatusPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200StatusPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200StatusPostReqStatusItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200StatusPostReqStatusItem) encodeFields(e *jx.Encoder) {
	{
		if s.StatusId.Set {
			e.FieldStart("statusId")
			s.StatusId.Encode(e)
		}
	}
	{
		e.FieldStart("systemId")
		e.Str(s.SystemId)
	}
	{
		e.FieldStart("pageName")
		e.Str(s.PageName)
	}
	{
		if s.DisplayPageName.Set {
			e.FieldStart("displayPageName")
			s.DisplayPageName.Encode(e)
		}
	}
	{
		if s.PercentComplete.Set {
			e.FieldStart("percentComplete")
			s.PercentComplete.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.RespondentId.Set {
			e.FieldStart("respondentId")
			s.RespondentId.Encode(e)
		}
	}
	{
		if s.RespondentFirstName.Set {
			e.FieldStart("respondentFirstName")
			s.RespondentFirstName.Encode(e)
		}
	}
	{
		if s.RespondentLastName.Set {
			e.FieldStart("respondentLastName")
			s.RespondentLastName.Encode(e)
		}
	}
	{
		if s.LastUpdatedDate.Set {
			e.FieldStart("lastUpdatedDate")
			s.LastUpdatedDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.LastUpdatedById.Set {
			e.FieldStart("lastUpdatedById")
			s.LastUpdatedById.Encode(e)
		}
	}
	{
		if s.LastUpdatedByFirstName.Set {
			e.FieldStart("lastUpdatedByFirstName")
			s.LastUpdatedByFirstName.Encode(e)
		}
	}
	{
		if s.LastUpdatedByLastName.Set {
			e.FieldStart("lastUpdatedByLastName")
			s.LastUpdatedByLastName.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200StatusPostReqStatusItem = [13]string{
	0:  "statusId",
	1:  "systemId",
	2:  "pageName",
	3:  "displayPageName",
	4:  "percentComplete",
	5:  "status",
	6:  "respondentId",
	7:  "respondentFirstName",
	8:  "respondentLastName",
	9:  "lastUpdatedDate",
	10: "lastUpdatedById",
	11: "lastUpdatedByFirstName",
	12: "lastUpdatedByLastName",
}

// Decode decodes GatewaySystem20Census20Core20API200StatusPostReqStatusItem from json.
func (s *GatewaySystem20Census20Core20API200StatusPostReqStatusItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200StatusPostReqStatusItem to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "statusId":
			if err := func() error {
				s.StatusId.Reset()
				if err := s.StatusId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"statusId\"")
			}
		case "systemId":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.SystemId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "pageName":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.PageName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageName\"")
			}
		case "displayPageName":
			if err := func() error {
				s.DisplayPageName.Reset()
				if err := s.DisplayPageName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayPageName\"")
			}
		case "percentComplete":
			if err := func() error {
				s.PercentComplete.Reset()
				if err := s.PercentComplete.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"percentComplete\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "respondentId":
			if err := func() error {
				s.RespondentId.Reset()
				if err := s.RespondentId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"respondentId\"")
			}
		case "respondentFirstName":
			if err := func() error {
				s.RespondentFirstName.Reset()
				if err := s.RespondentFirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"respondentFirstName\"")
			}
		case "respondentLastName":
			if err := func() error {
				s.RespondentLastName.Reset()
				if err := s.RespondentLastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"respondentLastName\"")
			}
		case "lastUpdatedDate":
			if err := func() error {
				s.LastUpdatedDate.Reset()
				if err := s.LastUpdatedDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lastUpdatedDate\"")
			}
		case "lastUpdatedById":
			if err := func() error {
				s.LastUpdatedById.Reset()
				if err := s.LastUpdatedById.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lastUpdatedById\"")
			}
		case "lastUpdatedByFirstName":
			if err := func() error {
				s.LastUpdatedByFirstName.Reset()
				if err := s.LastUpdatedByFirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lastUpdatedByFirstName\"")
			}
		case "lastUpdatedByLastName":
			if err := func() error {
				s.LastUpdatedByLastName.Reset()
				if err := s.LastUpdatedByLastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lastUpdatedByLastName\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200StatusPostReqStatusItem")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00000110,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200StatusPostReqStatusItem) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200StatusPostReqStatusItem[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200StatusPostReqStatusItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200StatusPostReqStatusItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatus as json.
func (s GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatus from json.
func (s *GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatus(v) {
	case GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatusNotStarted:
		*s = GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatusNotStarted
	case GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatusInProgress:
		*s = GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatusInProgress
	case GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatusComplete:
		*s = GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatusComplete
	case GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatusIssuesFound:
		*s = GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatusIssuesFound
	case GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatusPassed:
		*s = GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatusPassed
	case GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatusNotRequired:
		*s = GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatusNotRequired
	default:
		*s = GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUseGetBadRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200SystemAiUseGetBadRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemAiUseGetBadRequest = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200SystemAiUseGetBadRequest from json.
func (s *GatewaySystem20Census20Core20API200SystemAiUseGetBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SystemAiUseGetBadRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200SystemAiUseGetBadRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUseGetBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUseGetBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUseGetNotFound) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200SystemAiUseGetNotFound) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemAiUseGetNotFound = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200SystemAiUseGetNotFound from json.
func (s *GatewaySystem20Census20Core20API200SystemAiUseGetNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SystemAiUseGetNotFound to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200SystemAiUseGetNotFound")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUseGetNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUseGetNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUseGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200SystemAiUseGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Record.Set {
			e.FieldStart("record")
			s.Record.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemAiUseGetOK = [2]string{
	0: "result",
	1: "record",
}

// Decode decodes GatewaySystem20Census20Core20API200SystemAiUseGetOK from json.
func (s *GatewaySystem20Census20Core20API200SystemAiUseGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SystemAiUseGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "record":
			if err := func() error {
				s.Record.Reset()
				if err := s.Record.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"record\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200SystemAiUseGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUseGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUseGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUseGetOKRecord) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200SystemAiUseGetOKRecord) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PageName.Set {
			e.FieldStart("pageName")
			s.PageName.Encode(e)
		}
	}
	{
		if s.SystemId.Set {
			e.FieldStart("systemId")
			s.SystemId.Encode(e)
		}
	}
	{
		if s.SystemName.Set {
			e.FieldStart("systemName")
			s.SystemName.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Acronym.Set {
			e.FieldStart("acronym")
			s.Acronym.Encode(e)
		}
	}
	{
		if s.ObjectState.Set {
			e.FieldStart("objectState")
			s.ObjectState.Encode(e)
		}
	}
	{
		if s.CmsUUID.Set {
			e.FieldStart("cmsUUID")
			s.CmsUUID.Encode(e)
		}
	}
	{
		if s.UsesAITechnology.Set {
			e.FieldStart("usesAITechnology")
			s.UsesAITechnology.Encode(e)
		}
	}
	{
		if s.ArtificialIntelligence.Set {
			e.FieldStart("artificialIntelligence")
			s.ArtificialIntelligence.Encode(e)
		}
	}
	{
		if s.ArtificialIntelligenceOtherDescription.Set {
			e.FieldStart("artificialIntelligenceOtherDescription")
			s.ArtificialIntelligenceOtherDescription.Encode(e)
		}
	}
	{
		if s.AiProjectLifeCycleStage.Set {
			e.FieldStart("aiProjectLifeCycleStage")
			s.AiProjectLifeCycleStage.Encode(e)
		}
	}
	{
		if s.AiCapabilityImpact.Set {
			e.FieldStart("aiCapabilityImpact")
			s.AiCapabilityImpact.Encode(e)
		}
	}
	{
		if s.AiCapabilityITGRReviewed.Set {
			e.FieldStart("aiCapabilityITGRReviewed")
			s.AiCapabilityITGRReviewed.Encode(e)
		}
	}
	{
		if s.AiCapabilityITGRSubmissionDate.Set {
			e.FieldStart("aiCapabilityITGRSubmissionDate")
			s.AiCapabilityITGRSubmissionDate.Encode(e)
		}
	}
	{
		if s.AiCapabilityITGRLifecycleAssigned.Set {
			e.FieldStart("aiCapabilityITGRLifecycleAssigned")
			s.AiCapabilityITGRLifecycleAssigned.Encode(e)
		}
	}
	{
		if s.AiCapabilityITGRLifecycleMissing.Set {
			e.FieldStart("aiCapabilityITGRLifecycleMissing")
			s.AiCapabilityITGRLifecycleMissing.Encode(e)
		}
	}
	{
		if s.AiCapabilitySensitiveInformationInvolved.Set {
			e.FieldStart("aiCapabilitySensitiveInformationInvolved")
			s.AiCapabilitySensitiveInformationInvolved.Encode(e)
		}
	}
	{
		if s.AiCapabilitySystemDataCategory.Set {
			e.FieldStart("aiCapabilitySystemDataCategory")
			s.AiCapabilitySystemDataCategory.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemAiUseGetOKRecord = [19]string{
	0:  "id",
	1:  "pageName",
	2:  "systemId",
	3:  "systemName",
	4:  "description",
	5:  "acronym",
	6:  "objectState",
	7:  "cmsUUID",
	8:  "usesAITechnology",
	9:  "artificialIntelligence",
	10: "artificialIntelligenceOtherDescription",
	11: "aiProjectLifeCycleStage",
	12: "aiCapabilityImpact",
	13: "aiCapabilityITGRReviewed",
	14: "aiCapabilityITGRSubmissionDate",
	15: "aiCapabilityITGRLifecycleAssigned",
	16: "aiCapabilityITGRLifecycleMissing",
	17: "aiCapabilitySensitiveInformationInvolved",
	18: "aiCapabilitySystemDataCategory",
}

// Decode decodes GatewaySystem20Census20Core20API200SystemAiUseGetOKRecord from json.
func (s *GatewaySystem20Census20Core20API200SystemAiUseGetOKRecord) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SystemAiUseGetOKRecord to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "pageName":
			if err := func() error {
				s.PageName.Reset()
				if err := s.PageName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageName\"")
			}
		case "systemId":
			if err := func() error {
				s.SystemId.Reset()
				if err := s.SystemId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "systemName":
			if err := func() error {
				s.SystemName.Reset()
				if err := s.SystemName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemName\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "acronym":
			if err := func() error {
				s.Acronym.Reset()
				if err := s.Acronym.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"acronym\"")
			}
		case "objectState":
			if err := func() error {
				s.ObjectState.Reset()
				if err := s.ObjectState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"objectState\"")
			}
		case "cmsUUID":
			if err := func() error {
				s.CmsUUID.Reset()
				if err := s.CmsUUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cmsUUID\"")
			}
		case "usesAITechnology":
			if err := func() error {
				s.UsesAITechnology.Reset()
				if err := s.UsesAITechnology.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usesAITechnology\"")
			}
		case "artificialIntelligence":
			if err := func() error {
				s.ArtificialIntelligence.Reset()
				if err := s.ArtificialIntelligence.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"artificialIntelligence\"")
			}
		case "artificialIntelligenceOtherDescription":
			if err := func() error {
				s.ArtificialIntelligenceOtherDescription.Reset()
				if err := s.ArtificialIntelligenceOtherDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"artificialIntelligenceOtherDescription\"")
			}
		case "aiProjectLifeCycleStage":
			if err := func() error {
				s.AiProjectLifeCycleStage.Reset()
				if err := s.AiProjectLifeCycleStage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aiProjectLifeCycleStage\"")
			}
		case "aiCapabilityImpact":
			if err := func() error {
				s.AiCapabilityImpact.Reset()
				if err := s.AiCapabilityImpact.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aiCapabilityImpact\"")
			}
		case "aiCapabilityITGRReviewed":
			if err := func() error {
				s.AiCapabilityITGRReviewed.Reset()
				if err := s.AiCapabilityITGRReviewed.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aiCapabilityITGRReviewed\"")
			}
		case "aiCapabilityITGRSubmissionDate":
			if err := func() error {
				s.AiCapabilityITGRSubmissionDate.Reset()
				if err := s.AiCapabilityITGRSubmissionDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aiCapabilityITGRSubmissionDate\"")
			}
		case "aiCapabilityITGRLifecycleAssigned":
			if err := func() error {
				s.AiCapabilityITGRLifecycleAssigned.Reset()
				if err := s.AiCapabilityITGRLifecycleAssigned.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aiCapabilityITGRLifecycleAssigned\"")
			}
		case "aiCapabilityITGRLifecycleMissing":
			if err := func() error {
				s.AiCapabilityITGRLifecycleMissing.Reset()
				if err := s.AiCapabilityITGRLifecycleMissing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aiCapabilityITGRLifecycleMissing\"")
			}
		case "aiCapabilitySensitiveInformationInvolved":
			if err := func() error {
				s.AiCapabilitySensitiveInformationInvolved.Reset()
				if err := s.AiCapabilitySensitiveInformationInvolved.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aiCapabilitySensitiveInformationInvolved\"")
			}
		case "aiCapabilitySystemDataCategory":
			if err := func() error {
				s.AiCapabilitySystemDataCategory.Reset()
				if err := s.AiCapabilitySystemDataCategory.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aiCapabilitySystemDataCategory\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200SystemAiUseGetOKRecord")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUseGetOKRecord) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUseGetOKRecord) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUsePostBadRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200SystemAiUsePostBadRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemAiUsePostBadRequest = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200SystemAiUsePostBadRequest from json.
func (s *GatewaySystem20Census20Core20API200SystemAiUsePostBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SystemAiUsePostBadRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200SystemAiUsePostBadRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUsePostBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUsePostBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUsePostInternalServerError) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200SystemAiUsePostInternalServerError) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemAiUsePostInternalServerError = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200SystemAiUsePostInternalServerError from json.
func (s *GatewaySystem20Census20Core20API200SystemAiUsePostInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SystemAiUsePostInternalServerError to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200SystemAiUsePostInternalServerError")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUsePostInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUsePostInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUsePostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200SystemAiUsePostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemAiUsePostOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200SystemAiUsePostOK from json.
func (s *GatewaySystem20Census20Core20API200SystemAiUsePostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SystemAiUsePostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200SystemAiUsePostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUsePostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUsePostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUsePostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200SystemAiUsePostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("id")
		e.Str(s.ID)
	}
	{
		if s.UsesAITechnology.Set {
			e.FieldStart("usesAITechnology")
			s.UsesAITechnology.Encode(e)
		}
	}
	{
		if s.ArtificialIntelligence.Set {
			e.FieldStart("artificialIntelligence")
			s.ArtificialIntelligence.Encode(e)
		}
	}
	{
		if s.ArtificialIntelligenceOtherDescription.Set {
			e.FieldStart("artificialIntelligenceOtherDescription")
			s.ArtificialIntelligenceOtherDescription.Encode(e)
		}
	}
	{
		if s.AiProjectLifeCycleStage.Set {
			e.FieldStart("aiProjectLifeCycleStage")
			s.AiProjectLifeCycleStage.Encode(e)
		}
	}
	{
		if s.AiCapabilityImpact.Set {
			e.FieldStart("aiCapabilityImpact")
			s.AiCapabilityImpact.Encode(e)
		}
	}
	{
		if s.AiCapabilityITGRReviewed.Set {
			e.FieldStart("aiCapabilityITGRReviewed")
			s.AiCapabilityITGRReviewed.Encode(e)
		}
	}
	{
		if s.AiCapabilityITGRSubmissionDate.Set {
			e.FieldStart("aiCapabilityITGRSubmissionDate")
			s.AiCapabilityITGRSubmissionDate.Encode(e)
		}
	}
	{
		if s.AiCapabilityITGRLifecycleAssigned.Set {
			e.FieldStart("aiCapabilityITGRLifecycleAssigned")
			s.AiCapabilityITGRLifecycleAssigned.Encode(e)
		}
	}
	{
		if s.AiCapabilityITGRLifecycleMissing.Set {
			e.FieldStart("aiCapabilityITGRLifecycleMissing")
			s.AiCapabilityITGRLifecycleMissing.Encode(e)
		}
	}
	{
		if s.AiCapabilitySensitiveInformationInvolved.Set {
			e.FieldStart("aiCapabilitySensitiveInformationInvolved")
			s.AiCapabilitySensitiveInformationInvolved.Encode(e)
		}
	}
	{
		if s.AiCapabilitySystemDataCategory.Set {
			e.FieldStart("aiCapabilitySystemDataCategory")
			s.AiCapabilitySystemDataCategory.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemAiUsePostReq = [12]string{
	0:  "id",
	1:  "usesAITechnology",
	2:  "artificialIntelligence",
	3:  "artificialIntelligenceOtherDescription",
	4:  "aiProjectLifeCycleStage",
	5:  "aiCapabilityImpact",
	6:  "aiCapabilityITGRReviewed",
	7:  "aiCapabilityITGRSubmissionDate",
	8:  "aiCapabilityITGRLifecycleAssigned",
	9:  "aiCapabilityITGRLifecycleMissing",
	10: "aiCapabilitySensitiveInformationInvolved",
	11: "aiCapabilitySystemDataCategory",
}

// Decode decodes GatewaySystem20Census20Core20API200SystemAiUsePostReq from json.
func (s *GatewaySystem20Census20Core20API200SystemAiUsePostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SystemAiUsePostReq to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.ID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "usesAITechnology":
			if err := func() error {
				s.UsesAITechnology.Reset()
				if err := s.UsesAITechnology.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usesAITechnology\"")
			}
		case "artificialIntelligence":
			if err := func() error {
				s.ArtificialIntelligence.Reset()
				if err := s.ArtificialIntelligence.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"artificialIntelligence\"")
			}
		case "artificialIntelligenceOtherDescription":
			if err := func() error {
				s.ArtificialIntelligenceOtherDescription.Reset()
				if err := s.ArtificialIntelligenceOtherDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"artificialIntelligenceOtherDescription\"")
			}
		case "aiProjectLifeCycleStage":
			if err := func() error {
				s.AiProjectLifeCycleStage.Reset()
				if err := s.AiProjectLifeCycleStage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aiProjectLifeCycleStage\"")
			}
		case "aiCapabilityImpact":
			if err := func() error {
				s.AiCapabilityImpact.Reset()
				if err := s.AiCapabilityImpact.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aiCapabilityImpact\"")
			}
		case "aiCapabilityITGRReviewed":
			if err := func() error {
				s.AiCapabilityITGRReviewed.Reset()
				if err := s.AiCapabilityITGRReviewed.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aiCapabilityITGRReviewed\"")
			}
		case "aiCapabilityITGRSubmissionDate":
			if err := func() error {
				s.AiCapabilityITGRSubmissionDate.Reset()
				if err := s.AiCapabilityITGRSubmissionDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aiCapabilityITGRSubmissionDate\"")
			}
		case "aiCapabilityITGRLifecycleAssigned":
			if err := func() error {
				s.AiCapabilityITGRLifecycleAssigned.Reset()
				if err := s.AiCapabilityITGRLifecycleAssigned.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aiCapabilityITGRLifecycleAssigned\"")
			}
		case "aiCapabilityITGRLifecycleMissing":
			if err := func() error {
				s.AiCapabilityITGRLifecycleMissing.Reset()
				if err := s.AiCapabilityITGRLifecycleMissing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aiCapabilityITGRLifecycleMissing\"")
			}
		case "aiCapabilitySensitiveInformationInvolved":
			if err := func() error {
				s.AiCapabilitySensitiveInformationInvolved.Reset()
				if err := s.AiCapabilitySensitiveInformationInvolved.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aiCapabilitySensitiveInformationInvolved\"")
			}
		case "aiCapabilitySystemDataCategory":
			if err := func() error {
				s.AiCapabilitySystemDataCategory.Reset()
				if err := s.AiCapabilitySystemDataCategory.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aiCapabilitySystemDataCategory\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200SystemAiUsePostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00000001,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemAiUsePostReq) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemAiUsePostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUsePostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SystemAiUsePostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemComponentsGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200SystemComponentsGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.ParentSystem.Set {
			e.FieldStart("parentSystem")
			s.ParentSystem.Encode(e)
		}
	}
	{
		if s.ParentSystemId.Set {
			e.FieldStart("parentSystemId")
			s.ParentSystemId.Encode(e)
		}
	}
	{
		if s.IsSubsystem.Set {
			e.FieldStart("isSubsystem")
			s.IsSubsystem.Encode(e)
		}
	}
	{
		if s.NoSubsystemFlag.Set {
			e.FieldStart("noSubsystemFlag")
			s.NoSubsystemFlag.Encode(e)
		}
	}
	{
		if s.SystemComponents != nil {
			e.FieldStart("SystemComponents")
			e.ArrStart()
			for _, elem := range s.SystemComponents {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemComponentsGetOK = [6]string{
	0: "count",
	1: "parentSystem",
	2: "parentSystemId",
	3: "isSubsystem",
	4: "noSubsystemFlag",
	5: "SystemComponents",
}

// Decode decodes GatewaySystem20Census20Core20API200SystemComponentsGetOK from json.
func (s *GatewaySystem20Census20Core20API200SystemComponentsGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SystemComponentsGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "parentSystem":
			if err := func() error {
				s.ParentSystem.Reset()
				if err := s.ParentSystem.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"parentSystem\"")
			}
		case "parentSystemId":
			if err := func() error {
				s.ParentSystemId.Reset()
				if err := s.ParentSystemId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"parentSystemId\"")
			}
		case "isSubsystem":
			if err := func() error {
				s.IsSubsystem.Reset()
				if err := s.IsSubsystem.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isSubsystem\"")
			}
		case "noSubsystemFlag":
			if err := func() error {
				s.NoSubsystemFlag.Reset()
				if err := s.NoSubsystemFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"noSubsystemFlag\"")
			}
		case "SystemComponents":
			if err := func() error {
				s.SystemComponents = make([]GatewaySystem20Census20Core20API200SystemComponentsGetOKSystemComponentsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200SystemComponentsGetOKSystemComponentsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SystemComponents = append(s.SystemComponents, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SystemComponents\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200SystemComponentsGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemComponentsGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SystemComponentsGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemComponentsGetOKSystemComponentsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200SystemComponentsGetOKSystemComponentsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ComponentId.Set {
			e.FieldStart("componentId")
			s.ComponentId.Encode(e)
		}
	}
	{
		if s.ComponentName.Set {
			e.FieldStart("componentName")
			s.ComponentName.Encode(e)
		}
	}
	{
		if s.ComponentAcronym.Set {
			e.FieldStart("componentAcronym")
			s.ComponentAcronym.Encode(e)
		}
	}
	{
		if s.ComponentRetirementYear.Set {
			e.FieldStart("componentRetirementYear")
			s.ComponentRetirementYear.Encode(e)
		}
	}
	{
		if s.ComponentRetirementQuarter.Set {
			e.FieldStart("componentRetirementQuarter")
			s.ComponentRetirementQuarter.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.ComponentObjectState.Set {
			e.FieldStart("componentObjectState")
			s.ComponentObjectState.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemComponentsGetOKSystemComponentsItem = [7]string{
	0: "componentId",
	1: "componentName",
	2: "componentAcronym",
	3: "componentRetirementYear",
	4: "componentRetirementQuarter",
	5: "description",
	6: "componentObjectState",
}

// Decode decodes GatewaySystem20Census20Core20API200SystemComponentsGetOKSystemComponentsItem from json.
func (s *GatewaySystem20Census20Core20API200SystemComponentsGetOKSystemComponentsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SystemComponentsGetOKSystemComponentsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "componentId":
			if err := func() error {
				s.ComponentId.Reset()
				if err := s.ComponentId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"componentId\"")
			}
		case "componentName":
			if err := func() error {
				s.ComponentName.Reset()
				if err := s.ComponentName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"componentName\"")
			}
		case "componentAcronym":
			if err := func() error {
				s.ComponentAcronym.Reset()
				if err := s.ComponentAcronym.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"componentAcronym\"")
			}
		case "componentRetirementYear":
			if err := func() error {
				s.ComponentRetirementYear.Reset()
				if err := s.ComponentRetirementYear.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"componentRetirementYear\"")
			}
		case "componentRetirementQuarter":
			if err := func() error {
				s.ComponentRetirementQuarter.Reset()
				if err := s.ComponentRetirementQuarter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"componentRetirementQuarter\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "componentObjectState":
			if err := func() error {
				s.ComponentObjectState.Reset()
				if err := s.ComponentObjectState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"componentObjectState\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200SystemComponentsGetOKSystemComponentsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemComponentsGetOKSystemComponentsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SystemComponentsGetOKSystemComponentsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemComponentsPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200SystemComponentsPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemComponentsPostOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200SystemComponentsPostOK from json.
func (s *GatewaySystem20Census20Core20API200SystemComponentsPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SystemComponentsPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200SystemComponentsPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemComponentsPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SystemComponentsPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemComponentsPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200SystemComponentsPostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("systemId")
		e.Str(s.SystemId)
	}
	{
		e.FieldStart("SystemComponents")
		e.ArrStart()
		for _, elem := range s.SystemComponents {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemComponentsPostReq = [2]string{
	0: "systemId",
	1: "SystemComponents",
}

// Decode decodes GatewaySystem20Census20Core20API200SystemComponentsPostReq from json.
func (s *GatewaySystem20Census20Core20API200SystemComponentsPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SystemComponentsPostReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "systemId":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.SystemId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "SystemComponents":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				s.SystemComponents = make([]GatewaySystem20Census20Core20API200SystemComponentsPostReqSystemComponentsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200SystemComponentsPostReqSystemComponentsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.SystemComponents = append(s.SystemComponents, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"SystemComponents\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200SystemComponentsPostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemComponentsPostReq) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemComponentsPostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemComponentsPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SystemComponentsPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemComponentsPostReqSystemComponentsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200SystemComponentsPostReqSystemComponentsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.Deleted.Set {
			e.FieldStart("deleted")
			s.Deleted.Encode(e)
		}
	}
	{
		if s.Components != nil {
			e.FieldStart("Components")
			e.ArrStart()
			for _, elem := range s.Components {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemComponentsPostReqSystemComponentsItem = [3]string{
	0: "updated",
	1: "deleted",
	2: "Components",
}

// Decode decodes GatewaySystem20Census20Core20API200SystemComponentsPostReqSystemComponentsItem from json.
func (s *GatewaySystem20Census20Core20API200SystemComponentsPostReqSystemComponentsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SystemComponentsPostReqSystemComponentsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "deleted":
			if err := func() error {
				s.Deleted.Reset()
				if err := s.Deleted.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deleted\"")
			}
		case "Components":
			if err := func() error {
				s.Components = make([]GatewaySystem20Census20Core20API200SystemComponentsPostReqSystemComponentsItemComponentsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewaySystem20Census20Core20API200SystemComponentsPostReqSystemComponentsItemComponentsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Components = append(s.Components, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Components\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200SystemComponentsPostReqSystemComponentsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemComponentsPostReqSystemComponentsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SystemComponentsPostReqSystemComponentsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemComponentsPostReqSystemComponentsItemComponentsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200SystemComponentsPostReqSystemComponentsItemComponentsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ComponentId.Set {
			e.FieldStart("componentId")
			s.ComponentId.Encode(e)
		}
	}
	{
		if s.ComponentName.Set {
			e.FieldStart("componentName")
			s.ComponentName.Encode(e)
		}
	}
	{
		if s.ComponentAcronym.Set {
			e.FieldStart("componentAcronym")
			s.ComponentAcronym.Encode(e)
		}
	}
	{
		if s.ComponentRetirementYear.Set {
			e.FieldStart("componentRetirementYear")
			s.ComponentRetirementYear.Encode(e)
		}
	}
	{
		if s.ComponentRetirementQuarter.Set {
			e.FieldStart("componentRetirementQuarter")
			s.ComponentRetirementQuarter.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemComponentsPostReqSystemComponentsItemComponentsItem = [6]string{
	0: "componentId",
	1: "componentName",
	2: "componentAcronym",
	3: "componentRetirementYear",
	4: "componentRetirementQuarter",
	5: "description",
}

// Decode decodes GatewaySystem20Census20Core20API200SystemComponentsPostReqSystemComponentsItemComponentsItem from json.
func (s *GatewaySystem20Census20Core20API200SystemComponentsPostReqSystemComponentsItemComponentsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SystemComponentsPostReqSystemComponentsItemComponentsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "componentId":
			if err := func() error {
				s.ComponentId.Reset()
				if err := s.ComponentId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"componentId\"")
			}
		case "componentName":
			if err := func() error {
				s.ComponentName.Reset()
				if err := s.ComponentName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"componentName\"")
			}
		case "componentAcronym":
			if err := func() error {
				s.ComponentAcronym.Reset()
				if err := s.ComponentAcronym.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"componentAcronym\"")
			}
		case "componentRetirementYear":
			if err := func() error {
				s.ComponentRetirementYear.Reset()
				if err := s.ComponentRetirementYear.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"componentRetirementYear\"")
			}
		case "componentRetirementQuarter":
			if err := func() error {
				s.ComponentRetirementQuarter.Reset()
				if err := s.ComponentRetirementQuarter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"componentRetirementQuarter\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200SystemComponentsPostReqSystemComponentsItemComponentsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemComponentsPostReqSystemComponentsItemComponentsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SystemComponentsPostReqSystemComponentsItemComponentsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemMaintainerPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200SystemMaintainerPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemMaintainerPostOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200SystemMaintainerPostOK from json.
func (s *GatewaySystem20Census20Core20API200SystemMaintainerPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SystemMaintainerPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200SystemMaintainerPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemMaintainerPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SystemMaintainerPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemMaintainerPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200SystemMaintainerPostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("id")
		e.Str(s.ID)
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
	{
		if s.PageName.Set {
			e.FieldStart("pageName")
			s.PageName.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.SystemCustomization.Set {
			e.FieldStart("systemCustomization")
			s.SystemCustomization.Encode(e)
		}
	}
	{
		if s.FrontendAccessType.Set {
			e.FieldStart("frontendAccessType")
			s.FrontendAccessType.Encode(e)
		}
	}
	{
		if s.NetAccessibility.Set {
			e.FieldStart("netAccessibility")
			s.NetAccessibility.Encode(e)
		}
	}
	{
		if s.IpEnabledAssetCount.Set {
			e.FieldStart("ipEnabledAssetCount")
			s.IpEnabledAssetCount.Encode(e)
		}
	}
	{
		if s.Ip6EnabledAssetPercent.Set {
			e.FieldStart("ip6EnabledAssetPercent")
			s.Ip6EnabledAssetPercent.Encode(e)
		}
	}
	{
		if s.Ip6TransitionPlan.Set {
			e.FieldStart("ip6TransitionPlan")
			s.Ip6TransitionPlan.Encode(e)
		}
	}
	{
		if s.SystemProductionDate.Set {
			e.FieldStart("systemProductionDate")
			s.SystemProductionDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.DevWorkDescription.Set {
			e.FieldStart("devWorkDescription")
			s.DevWorkDescription.Encode(e)
		}
	}
	{
		if s.AgileUsed.Set {
			e.FieldStart("agileUsed")
			s.AgileUsed.Encode(e)
		}
	}
	{
		if s.DeploymentFrequency.Set {
			e.FieldStart("deploymentFrequency")
			s.DeploymentFrequency.Encode(e)
		}
	}
	{
		if s.MajorRefreshDate.Set {
			e.FieldStart("majorRefreshDate")
			s.MajorRefreshDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.NextMajorRefreshDate.Set {
			e.FieldStart("nextMajorRefreshDate")
			s.NextMajorRefreshDate.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.PlansToRetireReplace.Set {
			e.FieldStart("plansToRetireReplace")
			s.PlansToRetireReplace.Encode(e)
		}
	}
	{
		if s.YearToRetireReplace.Set {
			e.FieldStart("yearToRetireReplace")
			s.YearToRetireReplace.Encode(e)
		}
	}
	{
		if s.QuarterToRetireReplace.Set {
			e.FieldStart("quarterToRetireReplace")
			s.QuarterToRetireReplace.Encode(e)
		}
	}
	{
		if s.BusinessArtifactsOnDemand.Set {
			e.FieldStart("businessArtifactsOnDemand")
			s.BusinessArtifactsOnDemand.Encode(e)
		}
	}
	{
		if s.BusinessArtifactsLocation.Set {
			e.FieldStart("businessArtifactsLocation")
			s.BusinessArtifactsLocation.Encode(e)
		}
	}
	{
		if s.SystemRequirementsOnDemand.Set {
			e.FieldStart("systemRequirementsOnDemand")
			s.SystemRequirementsOnDemand.Encode(e)
		}
	}
	{
		if s.SystemRequirementsLocation.Set {
			e.FieldStart("systemRequirementsLocation")
			s.SystemRequirementsLocation.Encode(e)
		}
	}
	{
		if s.SystemDesignOnDemand.Set {
			e.FieldStart("systemDesignOnDemand")
			s.SystemDesignOnDemand.Encode(e)
		}
	}
	{
		if s.SystemDesignLocation.Set {
			e.FieldStart("systemDesignLocation")
			s.SystemDesignLocation.Encode(e)
		}
	}
	{
		if s.SourceCodeOnDemand.Set {
			e.FieldStart("sourceCodeOnDemand")
			s.SourceCodeOnDemand.Encode(e)
		}
	}
	{
		if s.SourceCodeLoction.Set {
			e.FieldStart("sourceCodeLoction")
			s.SourceCodeLoction.Encode(e)
		}
	}
	{
		if s.TestPlanOnDemand.Set {
			e.FieldStart("testPlanOnDemand")
			s.TestPlanOnDemand.Encode(e)
		}
	}
	{
		if s.TestPlanLocation.Set {
			e.FieldStart("testPlanLocation")
			s.TestPlanLocation.Encode(e)
		}
	}
	{
		if s.TestScriptsOnDemand.Set {
			e.FieldStart("testScriptsOnDemand")
			s.TestScriptsOnDemand.Encode(e)
		}
	}
	{
		if s.TestScriptsLocation.Set {
			e.FieldStart("testScriptsLocation")
			s.TestScriptsLocation.Encode(e)
		}
	}
	{
		if s.TestReportsOnDemand.Set {
			e.FieldStart("testReportsOnDemand")
			s.TestReportsOnDemand.Encode(e)
		}
	}
	{
		if s.TestReportsLocation.Set {
			e.FieldStart("testReportsLocation")
			s.TestReportsLocation.Encode(e)
		}
	}
	{
		if s.OmDocumentationOnDemand.Set {
			e.FieldStart("omDocumentationOnDemand")
			s.OmDocumentationOnDemand.Encode(e)
		}
	}
	{
		if s.OmDocumentationLocation.Set {
			e.FieldStart("omDocumentationLocation")
			s.OmDocumentationLocation.Encode(e)
		}
	}
	{
		if s.RecordsManagementBucket.Set {
			e.FieldStart("recordsManagementBucket")
			s.RecordsManagementBucket.Encode(e)
		}
	}
	{
		if s.HasMetadataGlossary.Set {
			e.FieldStart("hasMetadataGlossary")
			s.HasMetadataGlossary.Encode(e)
		}
	}
	{
		if s.StoreInCentralDataCatalog.Set {
			e.FieldStart("storeInCentralDataCatalog")
			s.StoreInCentralDataCatalog.Encode(e)
		}
	}
	{
		if s.HaveEnterpriseDataLakePlan.Set {
			e.FieldStart("haveEnterpriseDataLakePlan")
			s.HaveEnterpriseDataLakePlan.Encode(e)
		}
	}
	{
		if s.IdentityManagementSolution.Set {
			e.FieldStart("identityManagementSolution")
			s.IdentityManagementSolution.Encode(e)
		}
	}
	{
		if s.IdentityManagementSolutionOther.Set {
			e.FieldStart("identityManagementSolutionOther")
			s.IdentityManagementSolutionOther.Encode(e)
		}
	}
	{
		if s.IsRecordManagementScheduleApproved.Set {
			e.FieldStart("isRecordManagementScheduleApproved")
			s.IsRecordManagementScheduleApproved.Encode(e)
		}
	}
	{
		if s.AdHocAgileDeploymentFrequency.Set {
			e.FieldStart("adHocAgileDeploymentFrequency")
			s.AdHocAgileDeploymentFrequency.Encode(e)
		}
	}
	{
		if s.AuthoritativeDatasource.Set {
			e.FieldStart("authoritativeDatasource")
			s.AuthoritativeDatasource.Encode(e)
		}
	}
	{
		if s.DataAtRestEncryptionKeyManagement.Set {
			e.FieldStart("dataAtRestEncryptionKeyManagement")
			s.DataAtRestEncryptionKeyManagement.Encode(e)
		}
	}
	{
		if s.LegalHoldCaseName.Set {
			e.FieldStart("legalHoldCaseName")
			s.LegalHoldCaseName.Encode(e)
		}
	}
	{
		if s.LocallyStoredUserInformation.Set {
			e.FieldStart("locallyStoredUserInformation")
			s.LocallyStoredUserInformation.Encode(e)
		}
	}
	{
		if s.MultifactorAuthenticationMethod.Set {
			e.FieldStart("multifactorAuthenticationMethod")
			s.MultifactorAuthenticationMethod.Encode(e)
		}
	}
	{
		if s.MultifactorAuthenticationMethodOther.Set {
			e.FieldStart("multifactorAuthenticationMethodOther")
			s.MultifactorAuthenticationMethodOther.Encode(e)
		}
	}
	{
		if s.NetworkTrafficEncryptionKeyManagement.Set {
			e.FieldStart("networkTrafficEncryptionKeyManagement")
			s.NetworkTrafficEncryptionKeyManagement.Encode(e)
		}
	}
	{
		if s.NoMajorRefresh.Set {
			e.FieldStart("noMajorRefresh")
			s.NoMajorRefresh.Encode(e)
		}
	}
	{
		if s.NoPersistentRecordsFlag.Set {
			e.FieldStart("noPersistentRecordsFlag")
			s.NoPersistentRecordsFlag.Encode(e)
		}
	}
	{
		if s.NoPlannedMajorRefresh.Set {
			e.FieldStart("noPlannedMajorRefresh")
			s.NoPlannedMajorRefresh.Encode(e)
		}
	}
	{
		if s.RecordsUnderLegalHold.Set {
			e.FieldStart("recordsUnderLegalHold")
			s.RecordsUnderLegalHold.Encode(e)
		}
	}
	{
		if s.SystemDataLocation.Set {
			e.FieldStart("systemDataLocation")
			s.SystemDataLocation.Encode(e)
		}
	}
	{
		if s.SystemDataLocationNotes.Set {
			e.FieldStart("systemDataLocationNotes")
			s.SystemDataLocationNotes.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemMaintainerPostReq = [56]string{
	0:  "id",
	1:  "version",
	2:  "pageName",
	3:  "name",
	4:  "systemCustomization",
	5:  "frontendAccessType",
	6:  "netAccessibility",
	7:  "ipEnabledAssetCount",
	8:  "ip6EnabledAssetPercent",
	9:  "ip6TransitionPlan",
	10: "systemProductionDate",
	11: "devWorkDescription",
	12: "agileUsed",
	13: "deploymentFrequency",
	14: "majorRefreshDate",
	15: "nextMajorRefreshDate",
	16: "plansToRetireReplace",
	17: "yearToRetireReplace",
	18: "quarterToRetireReplace",
	19: "businessArtifactsOnDemand",
	20: "businessArtifactsLocation",
	21: "systemRequirementsOnDemand",
	22: "systemRequirementsLocation",
	23: "systemDesignOnDemand",
	24: "systemDesignLocation",
	25: "sourceCodeOnDemand",
	26: "sourceCodeLoction",
	27: "testPlanOnDemand",
	28: "testPlanLocation",
	29: "testScriptsOnDemand",
	30: "testScriptsLocation",
	31: "testReportsOnDemand",
	32: "testReportsLocation",
	33: "omDocumentationOnDemand",
	34: "omDocumentationLocation",
	35: "recordsManagementBucket",
	36: "hasMetadataGlossary",
	37: "storeInCentralDataCatalog",
	38: "haveEnterpriseDataLakePlan",
	39: "identityManagementSolution",
	40: "identityManagementSolutionOther",
	41: "isRecordManagementScheduleApproved",
	42: "adHocAgileDeploymentFrequency",
	43: "authoritativeDatasource",
	44: "dataAtRestEncryptionKeyManagement",
	45: "legalHoldCaseName",
	46: "locallyStoredUserInformation",
	47: "multifactorAuthenticationMethod",
	48: "multifactorAuthenticationMethodOther",
	49: "networkTrafficEncryptionKeyManagement",
	50: "noMajorRefresh",
	51: "noPersistentRecordsFlag",
	52: "noPlannedMajorRefresh",
	53: "recordsUnderLegalHold",
	54: "systemDataLocation",
	55: "systemDataLocationNotes",
}

// Decode decodes GatewaySystem20Census20Core20API200SystemMaintainerPostReq from json.
func (s *GatewaySystem20Census20Core20API200SystemMaintainerPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SystemMaintainerPostReq to nil")
	}
	var requiredBitSet [7]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.ID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "pageName":
			if err := func() error {
				s.PageName.Reset()
				if err := s.PageName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pageName\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "systemCustomization":
			if err := func() error {
				s.SystemCustomization.Reset()
				if err := s.SystemCustomization.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemCustomization\"")
			}
		case "frontendAccessType":
			if err := func() error {
				s.FrontendAccessType.Reset()
				if err := s.FrontendAccessType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"frontendAccessType\"")
			}
		case "netAccessibility":
			if err := func() error {
				s.NetAccessibility.Reset()
				if err := s.NetAccessibility.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"netAccessibility\"")
			}
		case "ipEnabledAssetCount":
			if err := func() error {
				s.IpEnabledAssetCount.Reset()
				if err := s.IpEnabledAssetCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ipEnabledAssetCount\"")
			}
		case "ip6EnabledAssetPercent":
			if err := func() error {
				s.Ip6EnabledAssetPercent.Reset()
				if err := s.Ip6EnabledAssetPercent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip6EnabledAssetPercent\"")
			}
		case "ip6TransitionPlan":
			if err := func() error {
				s.Ip6TransitionPlan.Reset()
				if err := s.Ip6TransitionPlan.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip6TransitionPlan\"")
			}
		case "systemProductionDate":
			if err := func() error {
				s.SystemProductionDate.Reset()
				if err := s.SystemProductionDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemProductionDate\"")
			}
		case "devWorkDescription":
			if err := func() error {
				s.DevWorkDescription.Reset()
				if err := s.DevWorkDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"devWorkDescription\"")
			}
		case "agileUsed":
			if err := func() error {
				s.AgileUsed.Reset()
				if err := s.AgileUsed.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"agileUsed\"")
			}
		case "deploymentFrequency":
			if err := func() error {
				s.DeploymentFrequency.Reset()
				if err := s.DeploymentFrequency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deploymentFrequency\"")
			}
		case "majorRefreshDate":
			if err := func() error {
				s.MajorRefreshDate.Reset()
				if err := s.MajorRefreshDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"majorRefreshDate\"")
			}
		case "nextMajorRefreshDate":
			if err := func() error {
				s.NextMajorRefreshDate.Reset()
				if err := s.NextMajorRefreshDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nextMajorRefreshDate\"")
			}
		case "plansToRetireReplace":
			if err := func() error {
				s.PlansToRetireReplace.Reset()
				if err := s.PlansToRetireReplace.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plansToRetireReplace\"")
			}
		case "yearToRetireReplace":
			if err := func() error {
				s.YearToRetireReplace.Reset()
				if err := s.YearToRetireReplace.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"yearToRetireReplace\"")
			}
		case "quarterToRetireReplace":
			if err := func() error {
				s.QuarterToRetireReplace.Reset()
				if err := s.QuarterToRetireReplace.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"quarterToRetireReplace\"")
			}
		case "businessArtifactsOnDemand":
			if err := func() error {
				s.BusinessArtifactsOnDemand.Reset()
				if err := s.BusinessArtifactsOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"businessArtifactsOnDemand\"")
			}
		case "businessArtifactsLocation":
			if err := func() error {
				s.BusinessArtifactsLocation.Reset()
				if err := s.BusinessArtifactsLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"businessArtifactsLocation\"")
			}
		case "systemRequirementsOnDemand":
			if err := func() error {
				s.SystemRequirementsOnDemand.Reset()
				if err := s.SystemRequirementsOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemRequirementsOnDemand\"")
			}
		case "systemRequirementsLocation":
			if err := func() error {
				s.SystemRequirementsLocation.Reset()
				if err := s.SystemRequirementsLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemRequirementsLocation\"")
			}
		case "systemDesignOnDemand":
			if err := func() error {
				s.SystemDesignOnDemand.Reset()
				if err := s.SystemDesignOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemDesignOnDemand\"")
			}
		case "systemDesignLocation":
			if err := func() error {
				s.SystemDesignLocation.Reset()
				if err := s.SystemDesignLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemDesignLocation\"")
			}
		case "sourceCodeOnDemand":
			if err := func() error {
				s.SourceCodeOnDemand.Reset()
				if err := s.SourceCodeOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sourceCodeOnDemand\"")
			}
		case "sourceCodeLoction":
			if err := func() error {
				s.SourceCodeLoction.Reset()
				if err := s.SourceCodeLoction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sourceCodeLoction\"")
			}
		case "testPlanOnDemand":
			if err := func() error {
				s.TestPlanOnDemand.Reset()
				if err := s.TestPlanOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testPlanOnDemand\"")
			}
		case "testPlanLocation":
			if err := func() error {
				s.TestPlanLocation.Reset()
				if err := s.TestPlanLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testPlanLocation\"")
			}
		case "testScriptsOnDemand":
			if err := func() error {
				s.TestScriptsOnDemand.Reset()
				if err := s.TestScriptsOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testScriptsOnDemand\"")
			}
		case "testScriptsLocation":
			if err := func() error {
				s.TestScriptsLocation.Reset()
				if err := s.TestScriptsLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testScriptsLocation\"")
			}
		case "testReportsOnDemand":
			if err := func() error {
				s.TestReportsOnDemand.Reset()
				if err := s.TestReportsOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testReportsOnDemand\"")
			}
		case "testReportsLocation":
			if err := func() error {
				s.TestReportsLocation.Reset()
				if err := s.TestReportsLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"testReportsLocation\"")
			}
		case "omDocumentationOnDemand":
			if err := func() error {
				s.OmDocumentationOnDemand.Reset()
				if err := s.OmDocumentationOnDemand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"omDocumentationOnDemand\"")
			}
		case "omDocumentationLocation":
			if err := func() error {
				s.OmDocumentationLocation.Reset()
				if err := s.OmDocumentationLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"omDocumentationLocation\"")
			}
		case "recordsManagementBucket":
			if err := func() error {
				s.RecordsManagementBucket.Reset()
				if err := s.RecordsManagementBucket.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recordsManagementBucket\"")
			}
		case "hasMetadataGlossary":
			if err := func() error {
				s.HasMetadataGlossary.Reset()
				if err := s.HasMetadataGlossary.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hasMetadataGlossary\"")
			}
		case "storeInCentralDataCatalog":
			if err := func() error {
				s.StoreInCentralDataCatalog.Reset()
				if err := s.StoreInCentralDataCatalog.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"storeInCentralDataCatalog\"")
			}
		case "haveEnterpriseDataLakePlan":
			if err := func() error {
				s.HaveEnterpriseDataLakePlan.Reset()
				if err := s.HaveEnterpriseDataLakePlan.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"haveEnterpriseDataLakePlan\"")
			}
		case "identityManagementSolution":
			if err := func() error {
				s.IdentityManagementSolution.Reset()
				if err := s.IdentityManagementSolution.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"identityManagementSolution\"")
			}
		case "identityManagementSolutionOther":
			if err := func() error {
				s.IdentityManagementSolutionOther.Reset()
				if err := s.IdentityManagementSolutionOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"identityManagementSolutionOther\"")
			}
		case "isRecordManagementScheduleApproved":
			if err := func() error {
				s.IsRecordManagementScheduleApproved.Reset()
				if err := s.IsRecordManagementScheduleApproved.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"isRecordManagementScheduleApproved\"")
			}
		case "adHocAgileDeploymentFrequency":
			if err := func() error {
				s.AdHocAgileDeploymentFrequency.Reset()
				if err := s.AdHocAgileDeploymentFrequency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"adHocAgileDeploymentFrequency\"")
			}
		case "authoritativeDatasource":
			if err := func() error {
				s.AuthoritativeDatasource.Reset()
				if err := s.AuthoritativeDatasource.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authoritativeDatasource\"")
			}
		case "dataAtRestEncryptionKeyManagement":
			if err := func() error {
				s.DataAtRestEncryptionKeyManagement.Reset()
				if err := s.DataAtRestEncryptionKeyManagement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dataAtRestEncryptionKeyManagement\"")
			}
		case "legalHoldCaseName":
			if err := func() error {
				s.LegalHoldCaseName.Reset()
				if err := s.LegalHoldCaseName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"legalHoldCaseName\"")
			}
		case "locallyStoredUserInformation":
			if err := func() error {
				s.LocallyStoredUserInformation.Reset()
				if err := s.LocallyStoredUserInformation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"locallyStoredUserInformation\"")
			}
		case "multifactorAuthenticationMethod":
			if err := func() error {
				s.MultifactorAuthenticationMethod.Reset()
				if err := s.MultifactorAuthenticationMethod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"multifactorAuthenticationMethod\"")
			}
		case "multifactorAuthenticationMethodOther":
			if err := func() error {
				s.MultifactorAuthenticationMethodOther.Reset()
				if err := s.MultifactorAuthenticationMethodOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"multifactorAuthenticationMethodOther\"")
			}
		case "networkTrafficEncryptionKeyManagement":
			if err := func() error {
				s.NetworkTrafficEncryptionKeyManagement.Reset()
				if err := s.NetworkTrafficEncryptionKeyManagement.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"networkTrafficEncryptionKeyManagement\"")
			}
		case "noMajorRefresh":
			if err := func() error {
				s.NoMajorRefresh.Reset()
				if err := s.NoMajorRefresh.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"noMajorRefresh\"")
			}
		case "noPersistentRecordsFlag":
			if err := func() error {
				s.NoPersistentRecordsFlag.Reset()
				if err := s.NoPersistentRecordsFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"noPersistentRecordsFlag\"")
			}
		case "noPlannedMajorRefresh":
			if err := func() error {
				s.NoPlannedMajorRefresh.Reset()
				if err := s.NoPlannedMajorRefresh.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"noPlannedMajorRefresh\"")
			}
		case "recordsUnderLegalHold":
			if err := func() error {
				s.RecordsUnderLegalHold.Reset()
				if err := s.RecordsUnderLegalHold.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recordsUnderLegalHold\"")
			}
		case "systemDataLocation":
			if err := func() error {
				s.SystemDataLocation.Reset()
				if err := s.SystemDataLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemDataLocation\"")
			}
		case "systemDataLocationNotes":
			if err := func() error {
				s.SystemDataLocationNotes.Reset()
				if err := s.SystemDataLocationNotes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemDataLocationNotes\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200SystemMaintainerPostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [7]uint8{
		0b00000001,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemMaintainerPostReq) {
					name = jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemMaintainerPostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemMaintainerPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SystemMaintainerPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemPropertyGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200SystemPropertyGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.PropertyValue.Set {
			e.FieldStart("propertyValue")
			s.PropertyValue.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemPropertyGetOK = [1]string{
	0: "propertyValue",
}

// Decode decodes GatewaySystem20Census20Core20API200SystemPropertyGetOK from json.
func (s *GatewaySystem20Census20Core20API200SystemPropertyGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SystemPropertyGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "propertyValue":
			if err := func() error {
				s.PropertyValue.Reset()
				if err := s.PropertyValue.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"propertyValue\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200SystemPropertyGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemPropertyGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SystemPropertyGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemPropertyPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200SystemPropertyPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemPropertyPostOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewaySystem20Census20Core20API200SystemPropertyPostOK from json.
func (s *GatewaySystem20Census20Core20API200SystemPropertyPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SystemPropertyPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200SystemPropertyPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemPropertyPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SystemPropertyPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemPropertyPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewaySystem20Census20Core20API200SystemPropertyPostReq) encodeFields(e *jx.Encoder) {
	{
		if s.SystemId.Set {
			e.FieldStart("systemId")
			s.SystemId.Encode(e)
		}
	}
	{
		if s.PropertyName.Set {
			e.FieldStart("propertyName")
			s.PropertyName.Encode(e)
		}
	}
	{
		if s.PropertyValue.Set {
			e.FieldStart("propertyValue")
			s.PropertyValue.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewaySystem20Census20Core20API200SystemPropertyPostReq = [3]string{
	0: "systemId",
	1: "propertyName",
	2: "propertyValue",
}

// Decode decodes GatewaySystem20Census20Core20API200SystemPropertyPostReq from json.
func (s *GatewaySystem20Census20Core20API200SystemPropertyPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewaySystem20Census20Core20API200SystemPropertyPostReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "systemId":
			if err := func() error {
				s.SystemId.Reset()
				if err := s.SystemId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemId\"")
			}
		case "propertyName":
			if err := func() error {
				s.PropertyName.Reset()
				if err := s.PropertyName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"propertyName\"")
			}
		case "propertyValue":
			if err := func() error {
				s.PropertyValue.Reset()
				if err := s.PropertyValue.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"propertyValue\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewaySystem20Census20Core20API200SystemPropertyPostReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewaySystem20Census20Core20API200SystemPropertyPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewaySystem20Census20Core20API200SystemPropertyPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayTechnopedia10SoftwareExtendedGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayTechnopedia10SoftwareExtendedGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Success.Set {
			e.FieldStart("success")
			s.Success.Encode(e)
		}
	}
	{
		if s.Data != nil {
			e.FieldStart("data")
			e.ArrStart()
			for _, elem := range s.Data {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayTechnopedia10SoftwareExtendedGetOK = [3]string{
	0: "success",
	1: "data",
	2: "count",
}

// Decode decodes GatewayTechnopedia10SoftwareExtendedGetOK from json.
func (s *GatewayTechnopedia10SoftwareExtendedGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayTechnopedia10SoftwareExtendedGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "success":
			if err := func() error {
				s.Success.Reset()
				if err := s.Success.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"success\"")
			}
		case "data":
			if err := func() error {
				s.Data = make([]GatewayTechnopedia10SoftwareExtendedGetOKDataItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayTechnopedia10SoftwareExtendedGetOKDataItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Data = append(s.Data, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"data\"")
			}
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayTechnopedia10SoftwareExtendedGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayTechnopedia10SoftwareExtendedGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayTechnopedia10SoftwareExtendedGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayTechnopedia10SoftwareExtendedGetOKDataItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayTechnopedia10SoftwareExtendedGetOKDataItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ProductName.Set {
			e.FieldStart("product_name")
			s.ProductName.Encode(e)
		}
	}
	{
		if s.Manufacturer.Set {
			e.FieldStart("manufacturer")
			s.Manufacturer.Encode(e)
		}
	}
	{
		if s.Category.Set {
			e.FieldStart("category")
			s.Category.Encode(e)
		}
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
	{
		if s.Edition.Set {
			e.FieldStart("edition")
			s.Edition.Encode(e)
		}
	}
	{
		if s.EndOfLifeDate.Set {
			e.FieldStart("end_of_life_date")
			s.EndOfLifeDate.Encode(e)
		}
	}
	{
		if s.GeneralAvailabilityDate.Set {
			e.FieldStart("general_availability_date")
			s.GeneralAvailabilityDate.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayTechnopedia10SoftwareExtendedGetOKDataItem = [8]string{
	0: "id",
	1: "product_name",
	2: "manufacturer",
	3: "category",
	4: "version",
	5: "edition",
	6: "end_of_life_date",
	7: "general_availability_date",
}

// Decode decodes GatewayTechnopedia10SoftwareExtendedGetOKDataItem from json.
func (s *GatewayTechnopedia10SoftwareExtendedGetOKDataItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayTechnopedia10SoftwareExtendedGetOKDataItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "product_name":
			if err := func() error {
				s.ProductName.Reset()
				if err := s.ProductName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"product_name\"")
			}
		case "manufacturer":
			if err := func() error {
				s.Manufacturer.Reset()
				if err := s.Manufacturer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"manufacturer\"")
			}
		case "category":
			if err := func() error {
				s.Category.Reset()
				if err := s.Category.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"category\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "edition":
			if err := func() error {
				s.Edition.Reset()
				if err := s.Edition.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"edition\"")
			}
		case "end_of_life_date":
			if err := func() error {
				s.EndOfLifeDate.Reset()
				if err := s.EndOfLifeDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_of_life_date\"")
			}
		case "general_availability_date":
			if err := func() error {
				s.GeneralAvailabilityDate.Reset()
				if err := s.GeneralAvailabilityDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"general_availability_date\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayTechnopedia10SoftwareExtendedGetOKDataItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayTechnopedia10SoftwareExtendedGetOKDataItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayTechnopedia10SoftwareExtendedGetOKDataItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetBadRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetBadRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayTechnopedia10SoftwareExtendedIDGetBadRequest = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewayTechnopedia10SoftwareExtendedIDGetBadRequest from json.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayTechnopedia10SoftwareExtendedIDGetBadRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayTechnopedia10SoftwareExtendedIDGetBadRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayTechnopedia10SoftwareExtendedIDGetBadRequestResult as json.
func (s GatewayTechnopedia10SoftwareExtendedIDGetBadRequestResult) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayTechnopedia10SoftwareExtendedIDGetBadRequestResult from json.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetBadRequestResult) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayTechnopedia10SoftwareExtendedIDGetBadRequestResult to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayTechnopedia10SoftwareExtendedIDGetBadRequestResult(v) {
	case GatewayTechnopedia10SoftwareExtendedIDGetBadRequestResultFailure:
		*s = GatewayTechnopedia10SoftwareExtendedIDGetBadRequestResultFailure
	default:
		*s = GatewayTechnopedia10SoftwareExtendedIDGetBadRequestResult(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayTechnopedia10SoftwareExtendedIDGetBadRequestResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetBadRequestResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetInternalServerError) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetInternalServerError) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayTechnopedia10SoftwareExtendedIDGetInternalServerError = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewayTechnopedia10SoftwareExtendedIDGetInternalServerError from json.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayTechnopedia10SoftwareExtendedIDGetInternalServerError to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayTechnopedia10SoftwareExtendedIDGetInternalServerError")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayTechnopedia10SoftwareExtendedIDGetInternalServerErrorResult as json.
func (s GatewayTechnopedia10SoftwareExtendedIDGetInternalServerErrorResult) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayTechnopedia10SoftwareExtendedIDGetInternalServerErrorResult from json.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetInternalServerErrorResult) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayTechnopedia10SoftwareExtendedIDGetInternalServerErrorResult to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayTechnopedia10SoftwareExtendedIDGetInternalServerErrorResult(v) {
	case GatewayTechnopedia10SoftwareExtendedIDGetInternalServerErrorResultError:
		*s = GatewayTechnopedia10SoftwareExtendedIDGetInternalServerErrorResultError
	default:
		*s = GatewayTechnopedia10SoftwareExtendedIDGetInternalServerErrorResult(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayTechnopedia10SoftwareExtendedIDGetInternalServerErrorResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetInternalServerErrorResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.Message != nil {
			e.FieldStart("message")
			e.ArrStart()
			for _, elem := range s.Message {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfGatewayTechnopedia10SoftwareExtendedIDGetOK = [2]string{
	0: "result",
	1: "message",
}

// Decode decodes GatewayTechnopedia10SoftwareExtendedIDGetOK from json.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayTechnopedia10SoftwareExtendedIDGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "message":
			if err := func() error {
				s.Message = make([]GatewayTechnopedia10SoftwareExtendedIDGetOKMessageItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem GatewayTechnopedia10SoftwareExtendedIDGetOKMessageItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Message = append(s.Message, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayTechnopedia10SoftwareExtendedIDGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetOKMessageItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetOKMessageItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ProductName.Set {
			e.FieldStart("product_name")
			s.ProductName.Encode(e)
		}
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
	{
		if s.VersionGroup.Set {
			e.FieldStart("version_group")
			s.VersionGroup.Encode(e)
		}
	}
	{
		if s.Manufacturer.Set {
			e.FieldStart("manufacturer")
			s.Manufacturer.Encode(e)
		}
	}
	{
		if s.Category.Set {
			e.FieldStart("category")
			s.Category.Encode(e)
		}
	}
	{
		if s.SubCategory.Set {
			e.FieldStart("sub_category")
			s.SubCategory.Encode(e)
		}
	}
	{
		if s.Release.Set {
			e.FieldStart("release")
			s.Release.Encode(e)
		}
	}
	{
		if s.Edition.Set {
			e.FieldStart("edition")
			s.Edition.Encode(e)
		}
	}
	{
		if s.BrandFamily.Set {
			e.FieldStart("brand_family")
			s.BrandFamily.Encode(e)
		}
	}
	{
		if s.GeneralAvailabilityDate.Set {
			e.FieldStart("general_availability_date")
			s.GeneralAvailabilityDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.GeneralAvailabilityStr.Set {
			e.FieldStart("general_availability_str")
			s.GeneralAvailabilityStr.Encode(e)
		}
	}
	{
		if s.EndOfLifeDate.Set {
			e.FieldStart("end_of_life_date")
			s.EndOfLifeDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.EndOfLifeStr.Set {
			e.FieldStart("end_of_life_str")
			s.EndOfLifeStr.Encode(e)
		}
	}
	{
		if s.EndOfLifeSupportLevel.Set {
			e.FieldStart("end_of_life_support_level")
			s.EndOfLifeSupportLevel.Encode(e)
		}
	}
	{
		if s.ObsoleteDate.Set {
			e.FieldStart("obsolete_date")
			s.ObsoleteDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.ObsoleteStr.Set {
			e.FieldStart("obsolete_str")
			s.ObsoleteStr.Encode(e)
		}
	}
	{
		if s.Licensable.Set {
			e.FieldStart("licensable")
			s.Licensable.Encode(e)
		}
	}
	{
		if s.BelongsToSuite.Set {
			e.FieldStart("belongs_to_suite")
			s.BelongsToSuite.Encode(e)
		}
	}
	{
		if s.SuiteName.Set {
			e.FieldStart("suite_name")
			s.SuiteName.Encode(e)
		}
	}
	{
		if s.IsMajorRelease.Set {
			e.FieldStart("is_major_release")
			s.IsMajorRelease.Encode(e)
		}
	}
	{
		if s.IsMajorVersion.Set {
			e.FieldStart("is_major_version")
			s.IsMajorVersion.Encode(e)
		}
	}
	{
		if s.ResourceURI.Set {
			e.FieldStart("resource_uri")
			s.ResourceURI.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Tier.Set {
			e.FieldStart("tier")
			s.Tier.Encode(e)
		}
	}
	{
		if s.CreateDate.Set {
			e.FieldStart("create_date")
			s.CreateDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.LastModifiedDate.Set {
			e.FieldStart("last_modified_date")
			s.LastModifiedDate.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.CatManufacturerID.Set {
			e.FieldStart("cat_manufacturer_id")
			s.CatManufacturerID.Encode(e)
		}
	}
	{
		if s.CatSwProductID.Set {
			e.FieldStart("cat_sw_product_id")
			s.CatSwProductID.Encode(e)
		}
	}
	{
		if s.CatSwReleaseID.Set {
			e.FieldStart("cat_sw_release_id")
			s.CatSwReleaseID.Encode(e)
		}
	}
	{
		if s.CatSwVersionID.Set {
			e.FieldStart("cat_sw_version_id")
			s.CatSwVersionID.Encode(e)
		}
	}
	{
		if s.ProductAlias.Set {
			e.FieldStart("product_alias")
			s.ProductAlias.Encode(e)
		}
	}
}

var jsonFieldsNameOfGatewayTechnopedia10SoftwareExtendedIDGetOKMessageItem = [32]string{
	0:  "id",
	1:  "product_name",
	2:  "version",
	3:  "version_group",
	4:  "manufacturer",
	5:  "category",
	6:  "sub_category",
	7:  "release",
	8:  "edition",
	9:  "brand_family",
	10: "general_availability_date",
	11: "general_availability_str",
	12: "end_of_life_date",
	13: "end_of_life_str",
	14: "end_of_life_support_level",
	15: "obsolete_date",
	16: "obsolete_str",
	17: "licensable",
	18: "belongs_to_suite",
	19: "suite_name",
	20: "is_major_release",
	21: "is_major_version",
	22: "resource_uri",
	23: "status",
	24: "tier",
	25: "create_date",
	26: "last_modified_date",
	27: "cat_manufacturer_id",
	28: "cat_sw_product_id",
	29: "cat_sw_release_id",
	30: "cat_sw_version_id",
	31: "product_alias",
}

// Decode decodes GatewayTechnopedia10SoftwareExtendedIDGetOKMessageItem from json.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetOKMessageItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayTechnopedia10SoftwareExtendedIDGetOKMessageItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "product_name":
			if err := func() error {
				s.ProductName.Reset()
				if err := s.ProductName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"product_name\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		case "version_group":
			if err := func() error {
				s.VersionGroup.Reset()
				if err := s.VersionGroup.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version_group\"")
			}
		case "manufacturer":
			if err := func() error {
				s.Manufacturer.Reset()
				if err := s.Manufacturer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"manufacturer\"")
			}
		case "category":
			if err := func() error {
				s.Category.Reset()
				if err := s.Category.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"category\"")
			}
		case "sub_category":
			if err := func() error {
				s.SubCategory.Reset()
				if err := s.SubCategory.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sub_category\"")
			}
		case "release":
			if err := func() error {
				s.Release.Reset()
				if err := s.Release.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"release\"")
			}
		case "edition":
			if err := func() error {
				s.Edition.Reset()
				if err := s.Edition.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"edition\"")
			}
		case "brand_family":
			if err := func() error {
				s.BrandFamily.Reset()
				if err := s.BrandFamily.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand_family\"")
			}
		case "general_availability_date":
			if err := func() error {
				s.GeneralAvailabilityDate.Reset()
				if err := s.GeneralAvailabilityDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"general_availability_date\"")
			}
		case "general_availability_str":
			if err := func() error {
				s.GeneralAvailabilityStr.Reset()
				if err := s.GeneralAvailabilityStr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"general_availability_str\"")
			}
		case "end_of_life_date":
			if err := func() error {
				s.EndOfLifeDate.Reset()
				if err := s.EndOfLifeDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_of_life_date\"")
			}
		case "end_of_life_str":
			if err := func() error {
				s.EndOfLifeStr.Reset()
				if err := s.EndOfLifeStr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_of_life_str\"")
			}
		case "end_of_life_support_level":
			if err := func() error {
				s.EndOfLifeSupportLevel.Reset()
				if err := s.EndOfLifeSupportLevel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_of_life_support_level\"")
			}
		case "obsolete_date":
			if err := func() error {
				s.ObsoleteDate.Reset()
				if err := s.ObsoleteDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"obsolete_date\"")
			}
		case "obsolete_str":
			if err := func() error {
				s.ObsoleteStr.Reset()
				if err := s.ObsoleteStr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"obsolete_str\"")
			}
		case "licensable":
			if err := func() error {
				s.Licensable.Reset()
				if err := s.Licensable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"licensable\"")
			}
		case "belongs_to_suite":
			if err := func() error {
				s.BelongsToSuite.Reset()
				if err := s.BelongsToSuite.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"belongs_to_suite\"")
			}
		case "suite_name":
			if err := func() error {
				s.SuiteName.Reset()
				if err := s.SuiteName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"suite_name\"")
			}
		case "is_major_release":
			if err := func() error {
				s.IsMajorRelease.Reset()
				if err := s.IsMajorRelease.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_major_release\"")
			}
		case "is_major_version":
			if err := func() error {
				s.IsMajorVersion.Reset()
				if err := s.IsMajorVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_major_version\"")
			}
		case "resource_uri":
			if err := func() error {
				s.ResourceURI.Reset()
				if err := s.ResourceURI.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resource_uri\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "tier":
			if err := func() error {
				s.Tier.Reset()
				if err := s.Tier.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tier\"")
			}
		case "create_date":
			if err := func() error {
				s.CreateDate.Reset()
				if err := s.CreateDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"create_date\"")
			}
		case "last_modified_date":
			if err := func() error {
				s.LastModifiedDate.Reset()
				if err := s.LastModifiedDate.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_modified_date\"")
			}
		case "cat_manufacturer_id":
			if err := func() error {
				s.CatManufacturerID.Reset()
				if err := s.CatManufacturerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cat_manufacturer_id\"")
			}
		case "cat_sw_product_id":
			if err := func() error {
				s.CatSwProductID.Reset()
				if err := s.CatSwProductID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cat_sw_product_id\"")
			}
		case "cat_sw_release_id":
			if err := func() error {
				s.CatSwReleaseID.Reset()
				if err := s.CatSwReleaseID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cat_sw_release_id\"")
			}
		case "cat_sw_version_id":
			if err := func() error {
				s.CatSwVersionID.Reset()
				if err := s.CatSwVersionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cat_sw_version_id\"")
			}
		case "product_alias":
			if err := func() error {
				s.ProductAlias.Reset()
				if err := s.ProductAlias.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"product_alias\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GatewayTechnopedia10SoftwareExtendedIDGetOKMessageItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetOKMessageItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetOKMessageItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayTechnopedia10SoftwareExtendedIDGetOKResult as json.
func (s GatewayTechnopedia10SoftwareExtendedIDGetOKResult) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GatewayTechnopedia10SoftwareExtendedIDGetOKResult from json.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetOKResult) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GatewayTechnopedia10SoftwareExtendedIDGetOKResult to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GatewayTechnopedia10SoftwareExtendedIDGetOKResult(v) {
	case GatewayTechnopedia10SoftwareExtendedIDGetOKResultSuccess:
		*s = GatewayTechnopedia10SoftwareExtendedIDGetOKResultSuccess
	case GatewayTechnopedia10SoftwareExtendedIDGetOKResultError:
		*s = GatewayTechnopedia10SoftwareExtendedIDGetOKResultError
	default:
		*s = GatewayTechnopedia10SoftwareExtendedIDGetOKResult(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GatewayTechnopedia10SoftwareExtendedIDGetOKResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GatewayTechnopedia10SoftwareExtendedIDGetOKResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *HealthGetOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *HealthGetOK) encodeFields(e *jx.Encoder) {
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
}

var jsonFieldsNameOfHealthGetOK = [1]string{
	0: "message",
}

// Decode decodes HealthGetOK from json.
func (s *HealthGetOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HealthGetOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode HealthGetOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HealthGetOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HealthGetOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *InternalServerError) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *InternalServerError) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("error")
		e.Str(s.Error)
	}
	{
		e.FieldStart("message")
		e.Str(s.Message)
	}
}

var jsonFieldsNameOfInternalServerError = [2]string{
	0: "error",
	1: "message",
}

// Decode decodes InternalServerError from json.
func (s *InternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode InternalServerError to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Error = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		case "message":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Message = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode InternalServerError")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfInternalServerError) {
					name = jsonFieldsNameOfInternalServerError[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *InternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *InternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o NilString) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *NilString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilString to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v string
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *NotFound) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *NotFound) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("error")
		e.Str(s.Error)
	}
}

var jsonFieldsNameOfNotFound = [1]string{
	0: "error",
}

// Decode decodes NotFound from json.
func (s *NotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NotFound to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Error = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode NotFound")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfNotFound) {
					name = jsonFieldsNameOfNotFound[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *NotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o OptBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBool to nil")
	}
	o.Set = true
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptDate) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptDate) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDate to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDate)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDate)
}

// Encode encodes time.Time as json.
func (o OptDateTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptDateTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDateTime to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDateTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDateTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDateTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDateTime)
}

// Encode encodes float32 as json.
func (o OptFloat32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float32(float32(o.Value))
}

// Decode decodes float32 from json.
func (o *OptFloat32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFloat32 to nil")
	}
	o.Set = true
	v, err := d.Float32()
	if err != nil {
		return err
	}
	o.Value = float32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFloat32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFloat32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o OptFloat64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *OptFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFloat64 to nil")
	}
	o.Set = true
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200ComponentPostCreatedPayload as json.
func (o OptGatewayCEDAR20Core20API200ComponentPostCreatedPayload) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GatewayCEDAR20Core20API200ComponentPostCreatedPayload from json.
func (o *OptGatewayCEDAR20Core20API200ComponentPostCreatedPayload) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGatewayCEDAR20Core20API200ComponentPostCreatedPayload to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGatewayCEDAR20Core20API200ComponentPostCreatedPayload) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGatewayCEDAR20Core20API200ComponentPostCreatedPayload) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentPutOKPayload as json.
func (o OptGatewayCEDAR20Core20API200DeploymentPutOKPayload) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPutOKPayload from json.
func (o *OptGatewayCEDAR20Core20API200DeploymentPutOKPayload) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGatewayCEDAR20Core20API200DeploymentPutOKPayload to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGatewayCEDAR20Core20API200DeploymentPutOKPayload) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGatewayCEDAR20Core20API200DeploymentPutOKPayload) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentPutOKResult as json.
func (o OptGatewayCEDAR20Core20API200DeploymentPutOKResult) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPutOKResult from json.
func (o *OptGatewayCEDAR20Core20API200DeploymentPutOKResult) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGatewayCEDAR20Core20API200DeploymentPutOKResult to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGatewayCEDAR20Core20API200DeploymentPutOKResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGatewayCEDAR20Core20API200DeploymentPutOKResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation as json.
func (o OptGatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation from json.
func (o *OptGatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHosting as json.
func (o OptGatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHosting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHosting from json.
func (o *OptGatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHosting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHosting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHosting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHosting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetails as json.
func (o OptGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetails) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetails from json.
func (o *OptGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetails) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetails to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetails) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetails) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformation as json.
func (o OptGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformation) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformation from json.
func (o *OptGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformation) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformation to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeployment as json.
func (o OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeployment) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeployment from json.
func (o *OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeployment) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeployment to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeployment) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeployment) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenter as json.
func (o OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenter) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenter from json.
func (o *OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenter) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenter to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenter) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenter) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterState as json.
func (o OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterState) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterState from json.
func (o *OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterState) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterState to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStatus as json.
func (o OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStatus from json.
func (o *OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDataCenterStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentType as json.
func (o OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentType from json.
func (o *OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentDeploymentType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentState as json.
func (o OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentState) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentState from json.
func (o *OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentState) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentState to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStatus as json.
func (o OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStatus from json.
func (o *OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGatewaySystem20Census20Core20API200PageDataCentersGetOKDeploymentsItemDeploymentStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchange as json.
func (o OptGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchange) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchange from json.
func (o *OptGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchange) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchange to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchange) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchange) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemStatus as json.
func (o OptGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemStatus from json.
func (o *OptGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItemProvidesAiCapability as json.
func (o OptGatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItemProvidesAiCapability) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItemProvidesAiCapability from json.
func (o *OptGatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItemProvidesAiCapability) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItemProvidesAiCapability to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItemProvidesAiCapability) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGatewaySystem20Census20Core20API200PageSoftwareProductsGetOKSoftwareProductsItemProvidesAiCapability) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200SystemAiUseGetOKRecord as json.
func (o OptGatewaySystem20Census20Core20API200SystemAiUseGetOKRecord) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GatewaySystem20Census20Core20API200SystemAiUseGetOKRecord from json.
func (o *OptGatewaySystem20Census20Core20API200SystemAiUseGetOKRecord) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGatewaySystem20Census20Core20API200SystemAiUseGetOKRecord to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGatewaySystem20Census20Core20API200SystemAiUseGetOKRecord) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGatewaySystem20Census20Core20API200SystemAiUseGetOKRecord) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayTechnopedia10SoftwareExtendedIDGetBadRequestResult as json.
func (o OptGatewayTechnopedia10SoftwareExtendedIDGetBadRequestResult) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayTechnopedia10SoftwareExtendedIDGetBadRequestResult from json.
func (o *OptGatewayTechnopedia10SoftwareExtendedIDGetBadRequestResult) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGatewayTechnopedia10SoftwareExtendedIDGetBadRequestResult to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGatewayTechnopedia10SoftwareExtendedIDGetBadRequestResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGatewayTechnopedia10SoftwareExtendedIDGetBadRequestResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayTechnopedia10SoftwareExtendedIDGetInternalServerErrorResult as json.
func (o OptGatewayTechnopedia10SoftwareExtendedIDGetInternalServerErrorResult) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayTechnopedia10SoftwareExtendedIDGetInternalServerErrorResult from json.
func (o *OptGatewayTechnopedia10SoftwareExtendedIDGetInternalServerErrorResult) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGatewayTechnopedia10SoftwareExtendedIDGetInternalServerErrorResult to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGatewayTechnopedia10SoftwareExtendedIDGetInternalServerErrorResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGatewayTechnopedia10SoftwareExtendedIDGetInternalServerErrorResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayTechnopedia10SoftwareExtendedIDGetOKResult as json.
func (o OptGatewayTechnopedia10SoftwareExtendedIDGetOKResult) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayTechnopedia10SoftwareExtendedIDGetOKResult from json.
func (o *OptGatewayTechnopedia10SoftwareExtendedIDGetOKResult) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGatewayTechnopedia10SoftwareExtendedIDGetOKResult to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGatewayTechnopedia10SoftwareExtendedIDGetOKResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGatewayTechnopedia10SoftwareExtendedIDGetOKResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt to nil")
	}
	o.Set = true
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int32 as json.
func (o OptInt32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int32(int32(o.Value))
}

// Decode decodes int32 from json.
func (o *OptInt32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt32 to nil")
	}
	o.Set = true
	v, err := d.Int32()
	if err != nil {
		return err
	}
	o.Value = int32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o OptNilBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptNilBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilBool to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v bool
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptNilDate) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptNilDate) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilDate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDate)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDate)
}

// Encode encodes time.Time as json.
func (o OptNilDateTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptNilDateTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilDateTime to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v time.Time
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilDateTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDateTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilDateTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDateTime)
}

// Encode encodes float32 as json.
func (o OptNilFloat32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Float32(float32(o.Value))
}

// Decode decodes float32 from json.
func (o *OptNilFloat32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilFloat32 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v float32
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Float32()
	if err != nil {
		return err
	}
	o.Value = float32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilFloat32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilFloat32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenter as json.
func (o OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenter) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenter from json.
func (o *OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenter) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenter to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenter
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenter) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenter) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterState as json.
func (o OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterState) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterState from json.
func (o *OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterState) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterState to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterState
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatus as json.
func (o OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatus from json.
func (o *OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatus to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatus
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDataCenterStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentType as json.
func (o OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentType from json.
func (o *OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemDeploymentType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemState as json.
func (o OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemState) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemState from json.
func (o *OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemState) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemState to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemState
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatus as json.
func (o OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatus from json.
func (o *OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatus to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatus
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200DeploymentGetOKDeploymentsItemStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclave as json.
func (o OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclave) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclave from json.
func (o *OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclave) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclave to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclave
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclave) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemAwsEnclave) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentType as json.
func (o OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentType from json.
func (o *OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemDeploymentType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemHasProductionData as json.
func (o OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemHasProductionData) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemHasProductionData from json.
func (o *OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemHasProductionData) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemHasProductionData to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemHasProductionData
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemHasProductionData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemHasProductionData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemIsHotSite as json.
func (o OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemIsHotSite) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemIsHotSite from json.
func (o *OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemIsHotSite) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemIsHotSite to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemIsHotSite
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemIsHotSite) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemIsHotSite) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemMovingToCloud as json.
func (o OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemMovingToCloud) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemMovingToCloud from json.
func (o *OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemMovingToCloud) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemMovingToCloud to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemMovingToCloud
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemMovingToCloud) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemMovingToCloud) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemState as json.
func (o OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemState) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemState from json.
func (o *OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemState) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemState to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemState
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatus as json.
func (o OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatus from json.
func (o *OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatus to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatus
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200DeploymentPutReqDeploymentsItemStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []GatewayCEDAR20Core20API200DomainModelListGetOKAreasItemCategoriesItem as json.
func (o OptNilGatewayCEDAR20Core20API200DomainModelListGetOKAreasItemCategoriesItemArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []GatewayCEDAR20Core20API200DomainModelListGetOKAreasItemCategoriesItem from json.
func (o *OptNilGatewayCEDAR20Core20API200DomainModelListGetOKAreasItemCategoriesItemArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200DomainModelListGetOKAreasItemCategoriesItemArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []GatewayCEDAR20Core20API200DomainModelListGetOKAreasItemCategoriesItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]GatewayCEDAR20Core20API200DomainModelListGetOKAreasItemCategoriesItem, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem GatewayCEDAR20Core20API200DomainModelListGetOKAreasItemCategoriesItem
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200DomainModelListGetOKAreasItemCategoriesItemArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200DomainModelListGetOKAreasItemCategoriesItemArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemFromOwnerType as json.
func (o OptNilGatewayCEDAR20Core20API200ExchangeGetOKExchangesItemFromOwnerType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemFromOwnerType from json.
func (o *OptNilGatewayCEDAR20Core20API200ExchangeGetOKExchangesItemFromOwnerType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200ExchangeGetOKExchangesItemFromOwnerType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemFromOwnerType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200ExchangeGetOKExchangesItemFromOwnerType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200ExchangeGetOKExchangesItemFromOwnerType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemToOwnerType as json.
func (o OptNilGatewayCEDAR20Core20API200ExchangeGetOKExchangesItemToOwnerType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemToOwnerType from json.
func (o *OptNilGatewayCEDAR20Core20API200ExchangeGetOKExchangesItemToOwnerType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200ExchangeGetOKExchangesItemToOwnerType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200ExchangeGetOKExchangesItemToOwnerType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200ExchangeGetOKExchangesItemToOwnerType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200ExchangeGetOKExchangesItemToOwnerType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []GatewayCEDAR20Core20API200ExchangePutReqExchangesItemTypeOfDataItem as json.
func (o OptNilGatewayCEDAR20Core20API200ExchangePutReqExchangesItemTypeOfDataItemArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []GatewayCEDAR20Core20API200ExchangePutReqExchangesItemTypeOfDataItem from json.
func (o *OptNilGatewayCEDAR20Core20API200ExchangePutReqExchangesItemTypeOfDataItemArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200ExchangePutReqExchangesItemTypeOfDataItemArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []GatewayCEDAR20Core20API200ExchangePutReqExchangesItemTypeOfDataItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]GatewayCEDAR20Core20API200ExchangePutReqExchangesItemTypeOfDataItem, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem GatewayCEDAR20Core20API200ExchangePutReqExchangesItemTypeOfDataItem
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200ExchangePutReqExchangesItemTypeOfDataItemArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200ExchangePutReqExchangesItemTypeOfDataItemArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []GatewayCEDAR20Core20API200SoftwareProductsGetOKSoftwareProductsItem as json.
func (o OptNilGatewayCEDAR20Core20API200SoftwareProductsGetOKSoftwareProductsItemArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []GatewayCEDAR20Core20API200SoftwareProductsGetOKSoftwareProductsItem from json.
func (o *OptNilGatewayCEDAR20Core20API200SoftwareProductsGetOKSoftwareProductsItemArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SoftwareProductsGetOKSoftwareProductsItemArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []GatewayCEDAR20Core20API200SoftwareProductsGetOKSoftwareProductsItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]GatewayCEDAR20Core20API200SoftwareProductsGetOKSoftwareProductsItem, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem GatewayCEDAR20Core20API200SoftwareProductsGetOKSoftwareProductsItem
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SoftwareProductsGetOKSoftwareProductsItemArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SoftwareProductsGetOKSoftwareProductsItemArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItem as json.
func (o OptNilGatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItem from json.
func (o *OptNilGatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItem, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItem
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem as json.
func (o OptNilGatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem from json.
func (o *OptNilGatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem GatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItem
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterface as json.
func (o OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterface) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterface from json.
func (o *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterface) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterface to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterface
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterface) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformation508UserInterface) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItem as json.
func (o OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItem from json.
func (o *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItem, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItem
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryAddressPurposeItemArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItem as json.
func (o OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItemArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItem from json.
func (o *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItemArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItemArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItem, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem GatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItem
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItemArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKBusinessOwnerInformationBeneficiaryInformationItemArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloud as json.
func (o OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloud) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloud from json.
func (o *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloud) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloud to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloud
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloud) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKDataCenterHostingMovingToCloud) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlan as json.
func (o OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlan) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlan from json.
func (o *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlan) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlan to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlan
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlan) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsAiPlan) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItem as json.
func (o OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItemArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItem from json.
func (o *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItemArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItemArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItem, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItem
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItemArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiDataAreaItemArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUse as json.
func (o OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUse) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUse from json.
func (o *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUse) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUse to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUse
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApiFHIRUse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibility as json.
func (o OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibility) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibility from json.
func (o *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibility) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibility to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibility
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibility) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisAccessibility) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDeveloped as json.
func (o OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDeveloped) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDeveloped from json.
func (o *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDeveloped) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDeveloped to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDeveloped
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDeveloped) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSoftwareProductDetailsApisDeveloped) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequency as json.
func (o OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequency) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequency from json.
func (o *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequency) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequency to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequency
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequency) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationAdHocAgileDeploymentFrequency) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagement as json.
func (o OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagement) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagement from json.
func (o *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagement) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagement to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagement
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDataAtRestEncryptionKeyManagement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequency as json.
func (o OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequency) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequency from json.
func (o *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequency) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequency to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequency
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequency) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationDeploymentFrequency) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessType as json.
func (o OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessType from json.
func (o *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationFrontendAccessType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercent as json.
func (o OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercent from json.
func (o *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercent to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercent
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6EnabledAssetPercent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlan as json.
func (o OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlan) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlan from json.
func (o *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlan) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlan to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlan
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlan) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationIp6TransitionPlan) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItem as json.
func (o OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItemArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItem from json.
func (o *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItemArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItemArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItem, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItem
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItemArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationMultifactorAuthenticationMethodItemArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibility as json.
func (o OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibility) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibility from json.
func (o *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibility) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibility to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibility
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibility) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetAccessibility) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagement as json.
func (o OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagement) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagement from json.
func (o *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagement) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagement to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagement
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationNetworkTrafficEncryptionKeyManagement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplace as json.
func (o OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplace) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplace from json.
func (o *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplace) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplace to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplace
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplace) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationPlansToRetireReplace) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomization as json.
func (o OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomization) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomization from json.
func (o *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomization) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomization to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomization
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomization) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemCustomization) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItem as json.
func (o OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItemArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItem from json.
func (o *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItemArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItemArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItem, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem GatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItem
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItemArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200SystemDetailIDGetOKSystemMaintainerInformationSystemDataLocationItemArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []GatewayCEDAR20Core20API200ThreatGetOKThreatsItem as json.
func (o OptNilGatewayCEDAR20Core20API200ThreatGetOKThreatsItemArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []GatewayCEDAR20Core20API200ThreatGetOKThreatsItem from json.
func (o *OptNilGatewayCEDAR20Core20API200ThreatGetOKThreatsItemArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200ThreatGetOKThreatsItemArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []GatewayCEDAR20Core20API200ThreatGetOKThreatsItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]GatewayCEDAR20Core20API200ThreatGetOKThreatsItem, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem GatewayCEDAR20Core20API200ThreatGetOKThreatsItem
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200ThreatGetOKThreatsItemArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200ThreatGetOKThreatsItemArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []GatewayCEDAR20Core20API200URLIDGetOKUrlListItem as json.
func (o OptNilGatewayCEDAR20Core20API200URLIDGetOKUrlListItemArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []GatewayCEDAR20Core20API200URLIDGetOKUrlListItem from json.
func (o *OptNilGatewayCEDAR20Core20API200URLIDGetOKUrlListItemArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20API200URLIDGetOKUrlListItemArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []GatewayCEDAR20Core20API200URLIDGetOKUrlListItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]GatewayCEDAR20Core20API200URLIDGetOKUrlListItem, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem GatewayCEDAR20Core20API200URLIDGetOKUrlListItem
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20API200URLIDGetOKUrlListItemArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20API200URLIDGetOKUrlListItemArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []GatewayCEDAR20Core20APIExchangePostReqExchangesItemTypeOfDataItem as json.
func (o OptNilGatewayCEDAR20Core20APIExchangePostReqExchangesItemTypeOfDataItemArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []GatewayCEDAR20Core20APIExchangePostReqExchangesItemTypeOfDataItem from json.
func (o *OptNilGatewayCEDAR20Core20APIExchangePostReqExchangesItemTypeOfDataItemArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewayCEDAR20Core20APIExchangePostReqExchangesItemTypeOfDataItemArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []GatewayCEDAR20Core20APIExchangePostReqExchangesItemTypeOfDataItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]GatewayCEDAR20Core20APIExchangePostReqExchangesItemTypeOfDataItem, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem GatewayCEDAR20Core20APIExchangePostReqExchangesItemTypeOfDataItem
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewayCEDAR20Core20APIExchangePostReqExchangesItemTypeOfDataItemArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewayCEDAR20Core20APIExchangePostReqExchangesItemTypeOfDataItemArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []GatewaySystem20Census20Core20API200BudgetAndContractsPostReqBudgetsItem as json.
func (o OptNilGatewaySystem20Census20Core20API200BudgetAndContractsPostReqBudgetsItemArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []GatewaySystem20Census20Core20API200BudgetAndContractsPostReqBudgetsItem from json.
func (o *OptNilGatewaySystem20Census20Core20API200BudgetAndContractsPostReqBudgetsItemArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200BudgetAndContractsPostReqBudgetsItemArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []GatewaySystem20Census20Core20API200BudgetAndContractsPostReqBudgetsItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]GatewaySystem20Census20Core20API200BudgetAndContractsPostReqBudgetsItem, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem GatewaySystem20Census20Core20API200BudgetAndContractsPostReqBudgetsItem
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200BudgetAndContractsPostReqBudgetsItemArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200BudgetAndContractsPostReqBudgetsItemArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []GatewaySystem20Census20Core20API200BudgetAndContractsPostReqContractsItem as json.
func (o OptNilGatewaySystem20Census20Core20API200BudgetAndContractsPostReqContractsItemArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []GatewaySystem20Census20Core20API200BudgetAndContractsPostReqContractsItem from json.
func (o *OptNilGatewaySystem20Census20Core20API200BudgetAndContractsPostReqContractsItemArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200BudgetAndContractsPostReqContractsItemArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []GatewaySystem20Census20Core20API200BudgetAndContractsPostReqContractsItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]GatewaySystem20Census20Core20API200BudgetAndContractsPostReqContractsItem, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem GatewaySystem20Census20Core20API200BudgetAndContractsPostReqContractsItem
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200BudgetAndContractsPostReqContractsItemArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200BudgetAndContractsPostReqContractsItemArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200DataExchangeNotesPostReqEmailFlags as json.
func (o OptNilGatewaySystem20Census20Core20API200DataExchangeNotesPostReqEmailFlags) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GatewaySystem20Census20Core20API200DataExchangeNotesPostReqEmailFlags from json.
func (o *OptNilGatewaySystem20Census20Core20API200DataExchangeNotesPostReqEmailFlags) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200DataExchangeNotesPostReqEmailFlags to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200DataExchangeNotesPostReqEmailFlags
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200DataExchangeNotesPostReqEmailFlags) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200DataExchangeNotesPostReqEmailFlags) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItemDirection as json.
func (o OptNilGatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItemDirection) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItemDirection from json.
func (o *OptNilGatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItemDirection) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItemDirection to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItemDirection
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItemDirection) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200DataExchangeStatusGetOKExchangeStatusItemDirection) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200NotePostReqEmailFlags as json.
func (o OptNilGatewaySystem20Census20Core20API200NotePostReqEmailFlags) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GatewaySystem20Census20Core20API200NotePostReqEmailFlags from json.
func (o *OptNilGatewaySystem20Census20Core20API200NotePostReqEmailFlags) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200NotePostReqEmailFlags to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200NotePostReqEmailFlags
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200NotePostReqEmailFlags) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200NotePostReqEmailFlags) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItem as json.
func (o OptNilGatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItemArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItem from json.
func (o *OptNilGatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItemArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItemArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItem, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItem
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItemArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItemArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItemDataCenter as json.
func (o OptNilGatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItemDataCenter) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItemDataCenter from json.
func (o *OptNilGatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItemDataCenter) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItemDataCenter to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItemDataCenter
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItemDataCenter) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200PageDataCentersPostReqDeploymentsItemDataCenter) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBankingData as json.
func (o OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBankingData) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBankingData from json.
func (o *OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBankingData) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBankingData to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBankingData
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBankingData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBankingData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBeneficiaryAddress as json.
func (o OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBeneficiaryAddress) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBeneficiaryAddress from json.
func (o *OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBeneficiaryAddress) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBeneficiaryAddress to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBeneficiaryAddress
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBeneficiaryAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsBeneficiaryAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPhi as json.
func (o OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPhi) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPhi from json.
func (o *OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPhi) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPhi to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPhi
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPhi) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPhi) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPii as json.
func (o OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPii) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPii from json.
func (o *OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPii) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPii to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPii
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPii) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeContainsPii) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeConnectionAuthenticated as json.
func (o OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeConnectionAuthenticated) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeConnectionAuthenticated from json.
func (o *OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeConnectionAuthenticated) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeConnectionAuthenticated to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeConnectionAuthenticated
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeConnectionAuthenticated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeConnectionAuthenticated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeContainsCUI as json.
func (o OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeContainsCUI) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeContainsCUI from json.
func (o *OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeContainsCUI) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeContainsCUI to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeContainsCUI
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeContainsCUI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeExchangeContainsCUI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsAddressEditable as json.
func (o OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsAddressEditable) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsAddressEditable from json.
func (o *OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsAddressEditable) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsAddressEditable to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsAddressEditable
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsAddressEditable) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsAddressEditable) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsBeneficiaryMailingFile as json.
func (o OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsBeneficiaryMailingFile) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsBeneficiaryMailingFile from json.
func (o *OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsBeneficiaryMailingFile) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsBeneficiaryMailingFile to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsBeneficiaryMailingFile
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsBeneficiaryMailingFile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeIsBeneficiaryMailingFile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeSharedViaApi as json.
func (o OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeSharedViaApi) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeSharedViaApi from json.
func (o *OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeSharedViaApi) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeSharedViaApi to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeSharedViaApi
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeSharedViaApi) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeSharedViaApi) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeTypeOfDataItem as json.
func (o OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeTypeOfDataItemArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeTypeOfDataItem from json.
func (o *OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeTypeOfDataItemArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeTypeOfDataItemArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeTypeOfDataItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeTypeOfDataItem, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem GatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeTypeOfDataItem
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeTypeOfDataItemArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200PageDataExchangeGetOKDataExchangesItemExchangeTypeOfDataItemArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBankingData as json.
func (o OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBankingData) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBankingData from json.
func (o *OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBankingData) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBankingData to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBankingData
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBankingData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBankingData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBeneficiaryAddress as json.
func (o OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBeneficiaryAddress) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBeneficiaryAddress from json.
func (o *OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBeneficiaryAddress) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBeneficiaryAddress to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBeneficiaryAddress
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBeneficiaryAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsBeneficiaryAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPhi as json.
func (o OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPhi) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPhi from json.
func (o *OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPhi) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPhi to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPhi
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPhi) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPhi) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPii as json.
func (o OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPii) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPii from json.
func (o *OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPii) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPii to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPii
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPii) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeContainsPii) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeConnectionAuthenticated as json.
func (o OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeConnectionAuthenticated) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeConnectionAuthenticated from json.
func (o *OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeConnectionAuthenticated) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeConnectionAuthenticated to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeConnectionAuthenticated
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeConnectionAuthenticated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeConnectionAuthenticated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeContainsCUI as json.
func (o OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeContainsCUI) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeContainsCUI from json.
func (o *OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeContainsCUI) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeContainsCUI to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeContainsCUI
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeContainsCUI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeExchangeContainsCUI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsAddressEditable as json.
func (o OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsAddressEditable) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsAddressEditable from json.
func (o *OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsAddressEditable) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsAddressEditable to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsAddressEditable
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsAddressEditable) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsAddressEditable) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsBeneficiaryMailingFile as json.
func (o OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsBeneficiaryMailingFile) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsBeneficiaryMailingFile from json.
func (o *OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsBeneficiaryMailingFile) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsBeneficiaryMailingFile to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsBeneficiaryMailingFile
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsBeneficiaryMailingFile) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeIsBeneficiaryMailingFile) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeSharedViaApi as json.
func (o OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeSharedViaApi) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeSharedViaApi from json.
func (o *OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeSharedViaApi) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeSharedViaApi to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeSharedViaApi
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeSharedViaApi) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeSharedViaApi) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeTypeOfDataItem as json.
func (o OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeTypeOfDataItemArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeTypeOfDataItem from json.
func (o *OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeTypeOfDataItemArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeTypeOfDataItemArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeTypeOfDataItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeTypeOfDataItem, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem GatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeTypeOfDataItem
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeTypeOfDataItemArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200PageDataExchangePostReqDataExchangesItemExchangeTypeOfDataItemArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItem as json.
func (o OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItem from json.
func (o *OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItem, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItem
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemIsSaasProduct as json.
func (o OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemIsSaasProduct) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemIsSaasProduct from json.
func (o *OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemIsSaasProduct) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemIsSaasProduct to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemIsSaasProduct
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemIsSaasProduct) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemIsSaasProduct) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemProvidesAiCapability as json.
func (o OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemProvidesAiCapability) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemProvidesAiCapability from json.
func (o *OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemProvidesAiCapability) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemProvidesAiCapability to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemProvidesAiCapability
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemProvidesAiCapability) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemProvidesAiCapability) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismType as json.
func (o OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismType from json.
func (o *OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemSoftwareLicenseMechanismType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemVendorOffersAIcapabilityviaSoftwareProduct as json.
func (o OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemVendorOffersAIcapabilityviaSoftwareProduct) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemVendorOffersAIcapabilityviaSoftwareProduct from json.
func (o *OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemVendorOffersAIcapabilityviaSoftwareProduct) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemVendorOffersAIcapabilityviaSoftwareProduct to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemVendorOffersAIcapabilityviaSoftwareProduct
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemVendorOffersAIcapabilityviaSoftwareProduct) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200SoftwareProductsPostReqSoftwareProductsItemProductsItemVendorOffersAIcapabilityviaSoftwareProduct) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatus as json.
func (o OptNilGatewaySystem20Census20Core20API200StatusPostReqStatusItemStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatus from json.
func (o *OptNilGatewaySystem20Census20Core20API200StatusPostReqStatusItemStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGatewaySystem20Census20Core20API200StatusPostReqStatusItemStatus to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GatewaySystem20Census20Core20API200StatusPostReqStatusItemStatus
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGatewaySystem20Census20Core20API200StatusPostReqStatusItemStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGatewaySystem20Census20Core20API200StatusPostReqStatusItemStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptNilInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptNilInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilInt to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int32 as json.
func (o OptNilInt32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int32(int32(o.Value))
}

// Decode decodes int32 from json.
func (o *OptNilInt32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilInt32 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int32
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Int32()
	if err != nil {
		return err
	}
	o.Value = int32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilInt32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilInt32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int64 as json.
func (o OptNilInt64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int64(int64(o.Value))
}

// Decode decodes int64 from json.
func (o *OptNilInt64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilInt64 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int64
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Int64()
	if err != nil {
		return err
	}
	o.Value = int64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilInt64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilInt64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []OrganizationSchema as json.
func (o OptNilOrganizationSchemaArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []OrganizationSchema from json.
func (o *OptNilOrganizationSchemaArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilOrganizationSchemaArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []OrganizationSchema
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]OrganizationSchema, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem OrganizationSchema
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilOrganizationSchemaArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilOrganizationSchemaArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptNilString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptNilString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilString to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v string
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []string as json.
func (o OptNilStringArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		e.Str(elem)
	}
	e.ArrEnd()
}

// Decode decodes []string from json.
func (o *OptNilStringArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStringArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []string
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]string, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem string
		v, err := d.Str()
		elem = string(v)
		if err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStringArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStringArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uuid.UUID as json.
func (o OptNilUUID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	json.EncodeUUID(e, o.Value)
}

// Decode decodes uuid.UUID from json.
func (o *OptNilUUID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilUUID to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v uuid.UUID
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := json.DecodeUUID(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilUUID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilUUID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RoleAssigneeType as json.
func (o OptRoleAssigneeType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RoleAssigneeType from json.
func (o *OptRoleAssigneeType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRoleAssigneeType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRoleAssigneeType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRoleAssigneeType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RoleTypeName as json.
func (o OptRoleTypeName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RoleTypeName from json.
func (o *OptRoleTypeName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRoleTypeName to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRoleTypeName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRoleTypeName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uuid.UUID as json.
func (o OptUUID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeUUID(e, o.Value)
}

// Decode decodes uuid.UUID from json.
func (o *OptUUID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUUID to nil")
	}
	o.Set = true
	v, err := json.DecodeUUID(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUUID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUUID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *OrganizationSchema) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *OrganizationSchema) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("id")
		e.Str(s.ID)
	}
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		if s.Acronym.Set {
			e.FieldStart("acronym")
			s.Acronym.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Component.Set {
			e.FieldStart("component")
			s.Component.Encode(e)
		}
	}
	{
		if s.FullPath.Set {
			e.FieldStart("fullPath")
			s.FullPath.Encode(e)
		}
	}
	{
		if s.ParentId.Set {
			e.FieldStart("parentId")
			s.ParentId.Encode(e)
		}
	}
	{
		if s.Organizations.Set {
			e.FieldStart("Organizations")
			s.Organizations.Encode(e)
		}
	}
}

var jsonFieldsNameOfOrganizationSchema = [8]string{
	0: "id",
	1: "name",
	2: "acronym",
	3: "description",
	4: "component",
	5: "fullPath",
	6: "parentId",
	7: "Organizations",
}

// Decode decodes OrganizationSchema from json.
func (s *OrganizationSchema) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OrganizationSchema to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.ID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "acronym":
			if err := func() error {
				s.Acronym.Reset()
				if err := s.Acronym.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"acronym\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "component":
			if err := func() error {
				s.Component.Reset()
				if err := s.Component.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"component\"")
			}
		case "fullPath":
			if err := func() error {
				s.FullPath.Reset()
				if err := s.FullPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fullPath\"")
			}
		case "parentId":
			if err := func() error {
				s.ParentId.Reset()
				if err := s.ParentId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"parentId\"")
			}
		case "Organizations":
			if err := func() error {
				s.Organizations.Reset()
				if err := s.Organizations.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Organizations\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode OrganizationSchema")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfOrganizationSchema) {
					name = jsonFieldsNameOfOrganizationSchema[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *OrganizationSchema) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OrganizationSchema) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Role) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Role) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("application")
		s.Application.Encode(e)
	}
	{
		if s.AssigneeDesc.Set {
			e.FieldStart("assigneeDesc")
			s.AssigneeDesc.Encode(e)
		}
	}
	{
		if s.AssigneeEmail.Set {
			e.FieldStart("assigneeEmail")
			s.AssigneeEmail.Encode(e)
		}
	}
	{
		if s.AssigneeFirstName.Set {
			e.FieldStart("assigneeFirstName")
			s.AssigneeFirstName.Encode(e)
		}
	}
	{
		if s.AssigneeId.Set {
			e.FieldStart("assigneeId")
			s.AssigneeId.Encode(e)
		}
	}
	{
		if s.AssigneeIsDeleted.Set {
			e.FieldStart("assigneeIsDeleted")
			s.AssigneeIsDeleted.Encode(e)
		}
	}
	{
		if s.AssigneeLastName.Set {
			e.FieldStart("assigneeLastName")
			s.AssigneeLastName.Encode(e)
		}
	}
	{
		if s.AssigneeOrgId.Set {
			e.FieldStart("assigneeOrgId")
			s.AssigneeOrgId.Encode(e)
		}
	}
	{
		if s.AssigneeOrgName.Set {
			e.FieldStart("assigneeOrgName")
			s.AssigneeOrgName.Encode(e)
		}
	}
	{
		if s.AssigneePhone.Set {
			e.FieldStart("assigneePhone")
			s.AssigneePhone.Encode(e)
		}
	}
	{
		if s.AssigneeType.Set {
			e.FieldStart("assigneeType")
			s.AssigneeType.Encode(e)
		}
	}
	{
		if s.AssigneeUserName.Set {
			e.FieldStart("assigneeUserName")
			s.AssigneeUserName.Encode(e)
		}
	}
	{
		e.FieldStart("objectId")
		e.Str(s.ObjectId)
	}
	{
		if s.ObjectType.Set {
			e.FieldStart("objectType")
			s.ObjectType.Encode(e)
		}
	}
	{
		if s.RoleId.Set {
			e.FieldStart("roleId")
			s.RoleId.Encode(e)
		}
	}
	{
		if s.RoleTypeDesc.Set {
			e.FieldStart("roleTypeDesc")
			s.RoleTypeDesc.Encode(e)
		}
	}
	{
		e.FieldStart("roleTypeId")
		e.Str(s.RoleTypeId)
	}
	{
		if s.RoleTypeName.Set {
			e.FieldStart("roleTypeName")
			s.RoleTypeName.Encode(e)
		}
	}
}

var jsonFieldsNameOfRole = [18]string{
	0:  "application",
	1:  "assigneeDesc",
	2:  "assigneeEmail",
	3:  "assigneeFirstName",
	4:  "assigneeId",
	5:  "assigneeIsDeleted",
	6:  "assigneeLastName",
	7:  "assigneeOrgId",
	8:  "assigneeOrgName",
	9:  "assigneePhone",
	10: "assigneeType",
	11: "assigneeUserName",
	12: "objectId",
	13: "objectType",
	14: "roleId",
	15: "roleTypeDesc",
	16: "roleTypeId",
	17: "roleTypeName",
}

// Decode decodes Role from json.
func (s *Role) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Role to nil")
	}
	var requiredBitSet [3]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "application":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.Application.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"application\"")
			}
		case "assigneeDesc":
			if err := func() error {
				s.AssigneeDesc.Reset()
				if err := s.AssigneeDesc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assigneeDesc\"")
			}
		case "assigneeEmail":
			if err := func() error {
				s.AssigneeEmail.Reset()
				if err := s.AssigneeEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assigneeEmail\"")
			}
		case "assigneeFirstName":
			if err := func() error {
				s.AssigneeFirstName.Reset()
				if err := s.AssigneeFirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assigneeFirstName\"")
			}
		case "assigneeId":
			if err := func() error {
				s.AssigneeId.Reset()
				if err := s.AssigneeId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assigneeId\"")
			}
		case "assigneeIsDeleted":
			if err := func() error {
				s.AssigneeIsDeleted.Reset()
				if err := s.AssigneeIsDeleted.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assigneeIsDeleted\"")
			}
		case "assigneeLastName":
			if err := func() error {
				s.AssigneeLastName.Reset()
				if err := s.AssigneeLastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assigneeLastName\"")
			}
		case "assigneeOrgId":
			if err := func() error {
				s.AssigneeOrgId.Reset()
				if err := s.AssigneeOrgId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assigneeOrgId\"")
			}
		case "assigneeOrgName":
			if err := func() error {
				s.AssigneeOrgName.Reset()
				if err := s.AssigneeOrgName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assigneeOrgName\"")
			}
		case "assigneePhone":
			if err := func() error {
				s.AssigneePhone.Reset()
				if err := s.AssigneePhone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assigneePhone\"")
			}
		case "assigneeType":
			if err := func() error {
				s.AssigneeType.Reset()
				if err := s.AssigneeType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assigneeType\"")
			}
		case "assigneeUserName":
			if err := func() error {
				s.AssigneeUserName.Reset()
				if err := s.AssigneeUserName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"assigneeUserName\"")
			}
		case "objectId":
			requiredBitSet[1] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.ObjectId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"objectId\"")
			}
		case "objectType":
			if err := func() error {
				s.ObjectType.Reset()
				if err := s.ObjectType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"objectType\"")
			}
		case "roleId":
			if err := func() error {
				s.RoleId.Reset()
				if err := s.RoleId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"roleId\"")
			}
		case "roleTypeDesc":
			if err := func() error {
				s.RoleTypeDesc.Reset()
				if err := s.RoleTypeDesc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"roleTypeDesc\"")
			}
		case "roleTypeId":
			requiredBitSet[2] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.RoleTypeId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"roleTypeId\"")
			}
		case "roleTypeName":
			if err := func() error {
				s.RoleTypeName.Reset()
				if err := s.RoleTypeName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"roleTypeName\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Role")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [3]uint8{
		0b00000001,
		0b00010000,
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfRole) {
					name = jsonFieldsNameOfRole[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Role) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Role) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RoleApplication as json.
func (s RoleApplication) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RoleApplication from json.
func (s *RoleApplication) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RoleApplication to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RoleApplication(v) {
	case RoleApplicationAlfabet:
		*s = RoleApplicationAlfabet
	case RoleApplicationAll:
		*s = RoleApplicationAll
	default:
		*s = RoleApplication(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RoleApplication) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RoleApplication) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RoleAssigneeType as json.
func (s RoleAssigneeType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RoleAssigneeType from json.
func (s *RoleAssigneeType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RoleAssigneeType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RoleAssigneeType(v) {
	case RoleAssigneeTypeOrganization:
		*s = RoleAssigneeTypeOrganization
	case RoleAssigneeTypePerson:
		*s = RoleAssigneeTypePerson
	default:
		*s = RoleAssigneeType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RoleAssigneeType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RoleAssigneeType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RoleType) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RoleType) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("application")
		s.Application.Encode(e)
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
}

var jsonFieldsNameOfRoleType = [4]string{
	0: "application",
	1: "name",
	2: "description",
	3: "id",
}

// Decode decodes RoleType from json.
func (s *RoleType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RoleType to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "application":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.Application.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"application\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RoleType")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfRoleType) {
					name = jsonFieldsNameOfRoleType[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RoleType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RoleType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RoleTypeApplication as json.
func (s RoleTypeApplication) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RoleTypeApplication from json.
func (s *RoleTypeApplication) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RoleTypeApplication to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RoleTypeApplication(v) {
	case RoleTypeApplicationAlfabet:
		*s = RoleTypeApplicationAlfabet
	case RoleTypeApplicationAll:
		*s = RoleTypeApplicationAll
	default:
		*s = RoleTypeApplication(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RoleTypeApplication) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RoleTypeApplication) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RoleTypeName as json.
func (s RoleTypeName) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RoleTypeName from json.
func (s *RoleTypeName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RoleTypeName to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RoleTypeName(v) {
	case RoleTypeNameAIContact:
		*s = RoleTypeNameAIContact
	case RoleTypeNameAPIContact:
		*s = RoleTypeNameAPIContact
	case RoleTypeNameBudgetAnalyst:
		*s = RoleTypeNameBudgetAnalyst
	case RoleTypeNameBusinessOwner:
		*s = RoleTypeNameBusinessOwner
	case RoleTypeNameBusinessQuestionContact:
		*s = RoleTypeNameBusinessQuestionContact
	case RoleTypeNameContractingOfficerSRepresentativeCOR:
		*s = RoleTypeNameContractingOfficerSRepresentativeCOR
	case RoleTypeNameDAReviewer:
		*s = RoleTypeNameDAReviewer
	case RoleTypeNameDataCenterContact:
		*s = RoleTypeNameDataCenterContact
	case RoleTypeNameISSOGovernmentTaskLeadGTL:
		*s = RoleTypeNameISSOGovernmentTaskLeadGTL
	case RoleTypeNameProjectLead:
		*s = RoleTypeNameProjectLead
	case RoleTypeNameQAReviewer:
		*s = RoleTypeNameQAReviewer
	case RoleTypeNameSystemMaintainer:
		*s = RoleTypeNameSystemMaintainer
	case RoleTypeNameSubjectMatterExpertSME:
		*s = RoleTypeNameSubjectMatterExpertSME
	case RoleTypeNameSupportStaff:
		*s = RoleTypeNameSupportStaff
	case RoleTypeNameSurveyPointOfContact:
		*s = RoleTypeNameSurveyPointOfContact
	case RoleTypeNameTechnicalSystemIssuesContact:
		*s = RoleTypeNameTechnicalSystemIssuesContact
	default:
		*s = RoleTypeName(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RoleTypeName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RoleTypeName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SparxPostForbidden) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SparxPostForbidden) encodeFields(e *jx.Encoder) {
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
}

var jsonFieldsNameOfSparxPostForbidden = [1]string{
	0: "message",
}

// Decode decodes SparxPostForbidden from json.
func (s *SparxPostForbidden) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SparxPostForbidden to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SparxPostForbidden")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SparxPostForbidden) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SparxPostForbidden) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SparxPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SparxPostReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("title")
		e.Str(s.Title)
	}
	{
		e.FieldStart("packageName")
		e.Str(s.PackageName)
	}
}

var jsonFieldsNameOfSparxPostReq = [2]string{
	0: "title",
	1: "packageName",
}

// Decode decodes SparxPostReq from json.
func (s *SparxPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SparxPostReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "title":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Title = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "packageName":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.PackageName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"packageName\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SparxPostReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfSparxPostReq) {
					name = jsonFieldsNameOfSparxPostReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SparxPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SparxPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Unauthorized) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Unauthorized) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("error")
		e.Str(s.Error)
	}
}

var jsonFieldsNameOfUnauthorized = [1]string{
	0: "error",
}

// Decode decodes Unauthorized from json.
func (s *Unauthorized) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Unauthorized to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Error = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Unauthorized")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfUnauthorized) {
					name = jsonFieldsNameOfUnauthorized[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Unauthorized) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Unauthorized) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
