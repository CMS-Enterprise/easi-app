// Code generated by ogen, DO NOT EDIT.

package cedarcoreclient

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// GatewayCEDAR20Core20API200AuthorityToOperateGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/authorityToOperate operation.
//
// Retrieve Authority to Operate (ATO) information. Can filter by system ID or search using various
// criteria including UUID, FISMA system acronym, TLC phase, PII/PHI flags, and disposition dates.
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/authorityToOperate
func (UnimplementedHandler) GatewayCEDAR20Core20API200AuthorityToOperateGet(ctx context.Context, params GatewayCEDAR20Core20API200AuthorityToOperateGetParams) (r GatewayCEDAR20Core20API200AuthorityToOperateGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200BudgetGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/budget operation.
//
// Retrieve a list of budgets based on query criteria listed in the parameters section. Passing a
// SystemId will cause the interface to return the budget(s) for just that system. Setting onlyIds to
// true will only return the id's, whereas if not set, the response will also include projectId,
// systemId, fundingId and funding. This interface has a limit of 5000 records.
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/budget
func (UnimplementedHandler) GatewayCEDAR20Core20API200BudgetGet(ctx context.Context, params GatewayCEDAR20Core20API200BudgetGetParams) (r GatewayCEDAR20Core20API200BudgetGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200BudgetListDelete implements DELETE /gateway/CEDAR%20Core%20API/2.0.0/budget/list operation.
//
// Delete a list of budget items based on their ID(s).
//
// DELETE /gateway/CEDAR%20Core%20API/2.0.0/budget/list
func (UnimplementedHandler) GatewayCEDAR20Core20API200BudgetListDelete(ctx context.Context, params GatewayCEDAR20Core20API200BudgetListDeleteParams) (r GatewayCEDAR20Core20API200BudgetListDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200BudgetPost implements POST /gateway/CEDAR%20Core%20API/2.0.0/budget operation.
//
// Add new budget(s) to the Alfabet system. This interface takes an array of one or more budgets.
//
// POST /gateway/CEDAR%20Core%20API/2.0.0/budget
func (UnimplementedHandler) GatewayCEDAR20Core20API200BudgetPost(ctx context.Context, req *GatewayCEDAR20Core20API200BudgetPostReq) (r GatewayCEDAR20Core20API200BudgetPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200BudgetPut implements PUT /gateway/CEDAR%20Core%20API/2.0.0/budget operation.
//
// Update one or more existing budgets for a system.
//
// PUT /gateway/CEDAR%20Core%20API/2.0.0/budget
func (UnimplementedHandler) GatewayCEDAR20Core20API200BudgetPut(ctx context.Context, req *GatewayCEDAR20Core20API200BudgetPutReq) (r GatewayCEDAR20Core20API200BudgetPutRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200BudgetSystemCostFindGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/budgetSystemCostFind operation.
//
// Retrieve budget system cost information by systemId. Returns actual system costs by fiscal year.
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/budgetSystemCostFind
func (UnimplementedHandler) GatewayCEDAR20Core20API200BudgetSystemCostFindGet(ctx context.Context, params GatewayCEDAR20Core20API200BudgetSystemCostFindGetParams) (r GatewayCEDAR20Core20API200BudgetSystemCostFindGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200ComponentPost implements POST /gateway/CEDAR%20Core%20API/2.0.0/component operation.
//
// Adds a new software component and related vendor information to Alfabet.
//
// POST /gateway/CEDAR%20Core%20API/2.0.0/component
func (UnimplementedHandler) GatewayCEDAR20Core20API200ComponentPost(ctx context.Context, req *GatewayCEDAR20Core20API200ComponentPostReq) (r GatewayCEDAR20Core20API200ComponentPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200ContractListDelete implements DELETE /gateway/CEDAR%20Core%20API/2.0.0/contract/list operation.
//
// Delete a list of contracts based on their ID(s).
//
// DELETE /gateway/CEDAR%20Core%20API/2.0.0/contract/list
func (UnimplementedHandler) GatewayCEDAR20Core20API200ContractListDelete(ctx context.Context, params GatewayCEDAR20Core20API200ContractListDeleteParams) (r GatewayCEDAR20Core20API200ContractListDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200ContractListGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/contract/list operation.
//
// Retrieve a list of contracts based on various query criteria. Can filter by system ID, keyword
// search, and other contract attributes.
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/contract/list
func (UnimplementedHandler) GatewayCEDAR20Core20API200ContractListGet(ctx context.Context, params GatewayCEDAR20Core20API200ContractListGetParams) (r GatewayCEDAR20Core20API200ContractListGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200ContractPost implements POST /gateway/CEDAR%20Core%20API/2.0.0/contract operation.
//
// Add new contract deliverables to the system.
//
// POST /gateway/CEDAR%20Core%20API/2.0.0/contract
func (UnimplementedHandler) GatewayCEDAR20Core20API200ContractPost(ctx context.Context, req *GatewayCEDAR20Core20API200ContractPostReq) (r GatewayCEDAR20Core20API200ContractPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200ContractPut implements PUT /gateway/CEDAR%20Core%20API/2.0.0/contract operation.
//
// Update one or more contracts in the Alfabet system. This interface takes an array of Contract
// documents. If the input `budgetsOnly` is set to `false`, this interface will also update any
// associated Contract Deliverable records.
//
// PUT /gateway/CEDAR%20Core%20API/2.0.0/contract
func (UnimplementedHandler) GatewayCEDAR20Core20API200ContractPut(ctx context.Context, req *GatewayCEDAR20Core20API200ContractPutReq) (r GatewayCEDAR20Core20API200ContractPutRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200CostTypeListGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/costType/list operation.
//
// Retrieve a list of cost types. Returns the "Internal Labor" cost type as highlighted fields (id,
// name) and all other cost types in the CostTypes array. Both application and name parameters are
// required but not used in filtering.
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/costType/list
func (UnimplementedHandler) GatewayCEDAR20Core20API200CostTypeListGet(ctx context.Context, params GatewayCEDAR20Core20API200CostTypeListGetParams) (r GatewayCEDAR20Core20API200CostTypeListGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200DeploymentDelete implements DELETE /gateway/CEDAR%20Core%20API/2.0.0/deployment operation.
//
// Delete a list of deployments based on their ID(s).
//
// DELETE /gateway/CEDAR%20Core%20API/2.0.0/deployment
func (UnimplementedHandler) GatewayCEDAR20Core20API200DeploymentDelete(ctx context.Context, params GatewayCEDAR20Core20API200DeploymentDeleteParams) (r GatewayCEDAR20Core20API200DeploymentDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200DeploymentGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/deployment operation.
//
// Retrieve a list of deployments based on query criteria (systemId, state, status and
// deploymentType).
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/deployment
func (UnimplementedHandler) GatewayCEDAR20Core20API200DeploymentGet(ctx context.Context, params GatewayCEDAR20Core20API200DeploymentGetParams) (r GatewayCEDAR20Core20API200DeploymentGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200DeploymentPost implements POST /gateway/CEDAR%20Core%20API/2.0.0/deployment operation.
//
// Add one or more deployment records to the system.
//
// POST /gateway/CEDAR%20Core%20API/2.0.0/deployment
func (UnimplementedHandler) GatewayCEDAR20Core20API200DeploymentPost(ctx context.Context, req *GatewayCEDAR20Core20API200DeploymentPostReq) (r GatewayCEDAR20Core20API200DeploymentPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200DeploymentPut implements PUT /gateway/CEDAR%20Core%20API/2.0.0/deployment operation.
//
// Update a list of existing deployment records in Alfabet. This interface processes all deployments
// in the request and returns detailed results for both successful and failed updates. Individual
// deployment failures do not stop processing of other deployments in the batch. Supports batch
// processing of up to 100 deployments per request for optimal performance.
//
// PUT /gateway/CEDAR%20Core%20API/2.0.0/deployment
func (UnimplementedHandler) GatewayCEDAR20Core20API200DeploymentPut(ctx context.Context, req *GatewayCEDAR20Core20API200DeploymentPutReq) (r GatewayCEDAR20Core20API200DeploymentPutRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200DomainModelLevelGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/domainModelLevel operation.
//
// Retrieve the hierarchy levels associated with a specific domain reference model.
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/domainModelLevel
func (UnimplementedHandler) GatewayCEDAR20Core20API200DomainModelLevelGet(ctx context.Context, params GatewayCEDAR20Core20API200DomainModelLevelGetParams) (r GatewayCEDAR20Core20API200DomainModelLevelGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200DomainModelListGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/domainModel/list operation.
//
// Retrieve a list of domain model entries. The model parameter is required but not used in filtering.
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/domainModel/list
func (UnimplementedHandler) GatewayCEDAR20Core20API200DomainModelListGet(ctx context.Context, params GatewayCEDAR20Core20API200DomainModelListGetParams) (r GatewayCEDAR20Core20API200DomainModelListGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200DomainModelNameGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/domainModelName operation.
//
// Retrieves a list of available domain reference models from a global configuration.
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/domainModelName
func (UnimplementedHandler) GatewayCEDAR20Core20API200DomainModelNameGet(ctx context.Context) (r GatewayCEDAR20Core20API200DomainModelNameGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200EnumerationGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/enumeration operation.
//
// Retrieve a list of enumerations based on their names.
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/enumeration
func (UnimplementedHandler) GatewayCEDAR20Core20API200EnumerationGet(ctx context.Context, params GatewayCEDAR20Core20API200EnumerationGetParams) (r GatewayCEDAR20Core20API200EnumerationGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200ExchangeGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/exchange operation.
//
// Exchange Find List.
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/exchange
func (UnimplementedHandler) GatewayCEDAR20Core20API200ExchangeGet(ctx context.Context, params GatewayCEDAR20Core20API200ExchangeGetParams) (r GatewayCEDAR20Core20API200ExchangeGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200ExchangeIDGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/exchange/{id} operation.
//
// Exchange by id.
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/exchange/{id}
func (UnimplementedHandler) GatewayCEDAR20Core20API200ExchangeIDGet(ctx context.Context, params GatewayCEDAR20Core20API200ExchangeIDGetParams) (r GatewayCEDAR20Core20API200ExchangeIDGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200ExchangePut implements PUT /gateway/CEDAR%20Core%20API/2.0.0/exchange operation.
//
// Update a list of data exchange records.
//
// PUT /gateway/CEDAR%20Core%20API/2.0.0/exchange
func (UnimplementedHandler) GatewayCEDAR20Core20API200ExchangePut(ctx context.Context, req *GatewayCEDAR20Core20API200ExchangePutReq) (r GatewayCEDAR20Core20API200ExchangePutRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200OrganizationGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/organization operation.
//
// Retrieve a list of organizations based on various criteria. If no criteria are provided, an empty
// list will be returned.
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/organization
func (UnimplementedHandler) GatewayCEDAR20Core20API200OrganizationGet(ctx context.Context, params GatewayCEDAR20Core20API200OrganizationGetParams) (r GatewayCEDAR20Core20API200OrganizationGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200RoleGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/role operation.
//
// Finds a list of role assignments based on an object's ID. If objectId and roleTypeId are both
// provided, a list of role assignments for only those specific role type IDs are returned. If roleId
// is provided, then objectId and roleTypeId should not be provided and a specific role assignment is
// returned.
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/role
func (UnimplementedHandler) GatewayCEDAR20Core20API200RoleGet(ctx context.Context, params GatewayCEDAR20Core20API200RoleGetParams) (r GatewayCEDAR20Core20API200RoleGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200RoleListDelete implements DELETE /gateway/CEDAR%20Core%20API/2.0.0/role/list operation.
//
// Deletes a list of role assignments by ID from SparxEA and the local database. Takes an application
// name and an array of role IDs.
//
// DELETE /gateway/CEDAR%20Core%20API/2.0.0/role/list
func (UnimplementedHandler) GatewayCEDAR20Core20API200RoleListDelete(ctx context.Context, params GatewayCEDAR20Core20API200RoleListDeleteParams) (r GatewayCEDAR20Core20API200RoleListDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200RolePost implements POST /gateway/CEDAR%20Core%20API/2.0.0/role operation.
//
// Add role assignments to a CEDAR application. This interface takes in objectId, roleTypeId AND
// either assigneeId, assigneeUserName or assigneeOrgId are required.
//
// POST /gateway/CEDAR%20Core%20API/2.0.0/role
func (UnimplementedHandler) GatewayCEDAR20Core20API200RolePost(ctx context.Context, req *GatewayCEDAR20Core20API200RolePostReq) (r GatewayCEDAR20Core20API200RolePostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200RoleTypeApplicationGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/role/type/{application} operation.
//
// Finds a list of role types available within an application. This interface takes in application.
// The list of current roles are: AI Contact API Contact Budget Analyst Business Owner Business
// Question Contact Contracting Officer's Representative (COR) DA Reviewer Data Center Contact ISSO
// Government Task Lead (GTL) Project Lead QA Reviewer System Maintainer Subject Matter Expert (SME)
// Support Staff Survey Point of Contact Technical System Issues Contact.
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/role/type/{application}
func (UnimplementedHandler) GatewayCEDAR20Core20API200RoleTypeApplicationGet(ctx context.Context, params GatewayCEDAR20Core20API200RoleTypeApplicationGetParams) (r GatewayCEDAR20Core20API200RoleTypeApplicationGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200SoftwareProductsGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/softwareProducts operation.
//
// SoftwareProductsList.
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/softwareProducts
func (UnimplementedHandler) GatewayCEDAR20Core20API200SoftwareProductsGet(ctx context.Context, params GatewayCEDAR20Core20API200SoftwareProductsGetParams) (r GatewayCEDAR20Core20API200SoftwareProductsGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200SoftwareProductsPost implements POST /gateway/CEDAR%20Core%20API/2.0.0/softwareProducts operation.
//
// Add, update, or delete software product and API/AI-related details for a system.
//
// POST /gateway/CEDAR%20Core%20API/2.0.0/softwareProducts
func (UnimplementedHandler) GatewayCEDAR20Core20API200SoftwareProductsPost(ctx context.Context, req *GatewayCEDAR20Core20API200SoftwareProductsPostReq) (r GatewayCEDAR20Core20API200SoftwareProductsPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200StakeholderGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/stakeholder operation.
//
// Retrieve a list of stakeholders based on various optional criteria.
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/stakeholder
func (UnimplementedHandler) GatewayCEDAR20Core20API200StakeholderGet(ctx context.Context, params GatewayCEDAR20Core20API200StakeholderGetParams) (r GatewayCEDAR20Core20API200StakeholderGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200SupportContactDelete implements DELETE /gateway/CEDAR%20Core%20API/2.0.0/supportContact operation.
//
// Delete a list of support contacts.
//
// DELETE /gateway/CEDAR%20Core%20API/2.0.0/supportContact
func (UnimplementedHandler) GatewayCEDAR20Core20API200SupportContactDelete(ctx context.Context, params GatewayCEDAR20Core20API200SupportContactDeleteParams) (r GatewayCEDAR20Core20API200SupportContactDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200SupportContactGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/supportContact operation.
//
// Retrieve a list of support contacts based on a system ID (application GUID).
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/supportContact
func (UnimplementedHandler) GatewayCEDAR20Core20API200SupportContactGet(ctx context.Context, params GatewayCEDAR20Core20API200SupportContactGetParams) (r GatewayCEDAR20Core20API200SupportContactGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200SupportContactPost implements POST /gateway/CEDAR%20Core%20API/2.0.0/supportContact operation.
//
// Add or update a list of support contacts in Alfabet and the underlying database.
//
// POST /gateway/CEDAR%20Core%20API/2.0.0/supportContact
func (UnimplementedHandler) GatewayCEDAR20Core20API200SupportContactPost(ctx context.Context, req *GatewayCEDAR20Core20API200SupportContactPostReq) (r GatewayCEDAR20Core20API200SupportContactPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200SystemDetailIDGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/system/detail/{id} operation.
//
// System Detail by id.
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/system/detail/{id}
func (UnimplementedHandler) GatewayCEDAR20Core20API200SystemDetailIDGet(ctx context.Context, params GatewayCEDAR20Core20API200SystemDetailIDGetParams) (r GatewayCEDAR20Core20API200SystemDetailIDGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200SystemSummaryGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/system/summary operation.
//
// System Summary list.
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/system/summary
func (UnimplementedHandler) GatewayCEDAR20Core20API200SystemSummaryGet(ctx context.Context, params GatewayCEDAR20Core20API200SystemSummaryGetParams) (r GatewayCEDAR20Core20API200SystemSummaryGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200SystemSummaryIDGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/system/summary/{id} operation.
//
// System Summary by id.
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/system/summary/{id}
func (UnimplementedHandler) GatewayCEDAR20Core20API200SystemSummaryIDGet(ctx context.Context, params GatewayCEDAR20Core20API200SystemSummaryIDGetParams) (r GatewayCEDAR20Core20API200SystemSummaryIDGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200ThreatGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/threat operation.
//
// Threat List.
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/threat
func (UnimplementedHandler) GatewayCEDAR20Core20API200ThreatGet(ctx context.Context, params GatewayCEDAR20Core20API200ThreatGetParams) (r GatewayCEDAR20Core20API200ThreatGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200URLIDGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/url/{id} operation.
//
// URL List.
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/url/{id}
func (UnimplementedHandler) GatewayCEDAR20Core20API200URLIDGet(ctx context.Context, params GatewayCEDAR20Core20API200URLIDGetParams) (r GatewayCEDAR20Core20API200URLIDGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200UserGet implements GET /gateway/CEDAR%20Core%20API/2.0.0/user operation.
//
// Retrieve a list of users based on various search criteria.
//
// GET /gateway/CEDAR%20Core%20API/2.0.0/user
func (UnimplementedHandler) GatewayCEDAR20Core20API200UserGet(ctx context.Context, params GatewayCEDAR20Core20API200UserGetParams) (r GatewayCEDAR20Core20API200UserGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20API200UserPost implements POST /gateway/CEDAR%20Core%20API/2.0.0/user operation.
//
// Add a list of users to a CEDAR application, optionally creating Sparx Person records if they do
// not exist.
//
// POST /gateway/CEDAR%20Core%20API/2.0.0/user
func (UnimplementedHandler) GatewayCEDAR20Core20API200UserPost(ctx context.Context, req *GatewayCEDAR20Core20API200UserPostReq) (r GatewayCEDAR20Core20API200UserPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDAR20Core20APIExchangePost implements POST /gateway/CEDAR%20Core%20API/exchange operation.
//
// Add a list of data exchange records to the system.
//
// POST /gateway/CEDAR%20Core%20API/exchange
func (UnimplementedHandler) GatewayCEDAR20Core20APIExchangePost(ctx context.Context, req *GatewayCEDAR20Core20APIExchangePostReq) (r GatewayCEDAR20Core20APIExchangePostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDARIntake10ClientIDGet implements GET /gateway/CEDARIntake/1.0/client/{id} operation.
//
// Retrieve intake request data by client ID. Returns intake information filtered by client status
// and version.
//
// GET /gateway/CEDARIntake/1.0/client/{id}
func (UnimplementedHandler) GatewayCEDARIntake10ClientIDGet(ctx context.Context, params GatewayCEDARIntake10ClientIDGetParams) (r GatewayCEDARIntake10ClientIDGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDARIntake10HealthCheckGet implements GET /gateway/CEDARIntake/1.0/healthCheck operation.
//
// Health check endpoint to verify that the CEDAR Intake service is running and operational.
//
// GET /gateway/CEDARIntake/1.0/healthCheck
func (UnimplementedHandler) GatewayCEDARIntake10HealthCheckGet(ctx context.Context) (r GatewayCEDARIntake10HealthCheckGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDARIntake10IntakeCedarIDGet implements GET /gateway/CEDARIntake/1.0/intake/cedar/{id} operation.
//
// Retrieve intake request data by CEDAR ID. Returns intake information for the specified CEDAR
// intake request ID.
//
// GET /gateway/CEDARIntake/1.0/intake/cedar/{id}
func (UnimplementedHandler) GatewayCEDARIntake10IntakeCedarIDGet(ctx context.Context, params GatewayCEDARIntake10IntakeCedarIDGetParams) (r GatewayCEDARIntake10IntakeCedarIDGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDARIntake10IntakePost implements POST /gateway/CEDARIntake/1.0/intake operation.
//
// Add an intake.
//
// POST /gateway/CEDARIntake/1.0/intake
func (UnimplementedHandler) GatewayCEDARIntake10IntakePost(ctx context.Context, req *GatewayCEDARIntake10IntakePostReq, params GatewayCEDARIntake10IntakePostParams) (r GatewayCEDARIntake10IntakePostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDARIntake10IntakeStatusGet implements GET /gateway/CEDARIntake/1.0/intake/status operation.
//
// Intake Status list.
//
// GET /gateway/CEDARIntake/1.0/intake/status
func (UnimplementedHandler) GatewayCEDARIntake10IntakeStatusGet(ctx context.Context, params GatewayCEDARIntake10IntakeStatusGetParams) (r GatewayCEDARIntake10IntakeStatusGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDARIntake10StatusCedarIDGet implements GET /gateway/CEDARIntake/1.0/status/cedar/{id} operation.
//
// Retrieve intake status information by CEDAR ID. Returns status details for the specified CEDAR
// intake request.
//
// GET /gateway/CEDARIntake/1.0/status/cedar/{id}
func (UnimplementedHandler) GatewayCEDARIntake10StatusCedarIDGet(ctx context.Context, params GatewayCEDARIntake10StatusCedarIDGetParams) (r GatewayCEDARIntake10StatusCedarIDGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayCEDARIntake10StatusClientIDGet implements GET /gateway/CEDARIntake/1.0/status/client/{id} operation.
//
// Retrieve intake status information by client ID. Returns status details for the specified client
// intake request filtered by client status and version.
//
// GET /gateway/CEDARIntake/1.0/status/client/{id}
func (UnimplementedHandler) GatewayCEDARIntake10StatusClientIDGet(ctx context.Context, params GatewayCEDARIntake10StatusClientIDGetParams) (r GatewayCEDARIntake10StatusClientIDGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayIntakeSchemaGet implements GET /gateway/intake-schema operation.
//
// Find all intake schemas.
//
// GET /gateway/intake-schema
func (UnimplementedHandler) GatewayIntakeSchemaGet(ctx context.Context) (r GatewayIntakeSchemaGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayIntakeSchemaIDDelete implements DELETE /gateway/intake-schema/{id} operation.
//
// Delete an intake schema by name.
//
// DELETE /gateway/intake-schema/{id}
func (UnimplementedHandler) GatewayIntakeSchemaIDDelete(ctx context.Context, params GatewayIntakeSchemaIDDeleteParams) (r GatewayIntakeSchemaIDDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayIntakeSchemaIDGet implements GET /gateway/intake-schema/{id} operation.
//
// Find an intake schema by name.
//
// GET /gateway/intake-schema/{id}
func (UnimplementedHandler) GatewayIntakeSchemaIDGet(ctx context.Context, params GatewayIntakeSchemaIDGetParams) (r GatewayIntakeSchemaIDGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayIntakeSchemaIDPut implements PUT /gateway/intake-schema/{id} operation.
//
// Update an intake schema by name.
//
// PUT /gateway/intake-schema/{id}
func (UnimplementedHandler) GatewayIntakeSchemaIDPut(ctx context.Context, req *GatewayIntakeSchemaIDPutReq, params GatewayIntakeSchemaIDPutParams) (r GatewayIntakeSchemaIDPutRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayIntakeSchemaPost implements POST /gateway/intake-schema operation.
//
// Create an intake schema by name.
//
// POST /gateway/intake-schema
func (UnimplementedHandler) GatewayIntakeSchemaPost(ctx context.Context, req *GatewayIntakeSchemaPostReq) (r GatewayIntakeSchemaPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayKeysGet implements GET /gateway/keys operation.
//
// Get a list of all gateway API keys.
//
// GET /gateway/keys
func (UnimplementedHandler) GatewayKeysGet(ctx context.Context) (r GatewayKeysGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayKeysIDDelete implements DELETE /gateway/keys/{id} operation.
//
// Remove a gateway API key by ID.
//
// DELETE /gateway/keys/{id}
func (UnimplementedHandler) GatewayKeysIDDelete(ctx context.Context, params GatewayKeysIDDeleteParams) (r GatewayKeysIDDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayKeysPost implements POST /gateway/keys operation.
//
// Create a new gateway API key.
//
// POST /gateway/keys
func (UnimplementedHandler) GatewayKeysPost(ctx context.Context) (r GatewayKeysPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayLDAP10AuthenticatePost implements POST /gateway/LDAP/1.0/authenticate operation.
//
// Authentication endpoint that validates user credentials and returns authentication status.
//
// POST /gateway/LDAP/1.0/authenticate
func (UnimplementedHandler) GatewayLDAP10AuthenticatePost(ctx context.Context, req *GatewayLDAP10AuthenticatePostReq) (r GatewayLDAP10AuthenticatePostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayLDAP10PersonGet implements GET /gateway/LDAP/1.0/person operation.
//
// Search for persons using various filter criteria. At least one search parameter must be provided.
//
// GET /gateway/LDAP/1.0/person
func (UnimplementedHandler) GatewayLDAP10PersonGet(ctx context.Context, params GatewayLDAP10PersonGetParams) (r GatewayLDAP10PersonGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayLDAP10PersonIDGet implements GET /gateway/LDAP/1.0/person/{id} operation.
//
// Get person details by ID.
//
// GET /gateway/LDAP/1.0/person/{id}
func (UnimplementedHandler) GatewayLDAP10PersonIDGet(ctx context.Context, params GatewayLDAP10PersonIDGetParams) (r GatewayLDAP10PersonIDGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200AdminReviewerDelete implements DELETE /gateway/System%20Census%20Core%20API/2.0.0/adminReviewer operation.
//
// Deletes one or more System Census Reviewer records based on their ID, Username, or Type. Records
// can be deleted individually, or a list of records can be provided in the request body.
//
// DELETE /gateway/System%20Census%20Core%20API/2.0.0/adminReviewer
func (UnimplementedHandler) GatewaySystem20Census20Core20API200AdminReviewerDelete(ctx context.Context, req *GatewaySystem20Census20Core20API200AdminReviewerDeleteReq) (r GatewaySystem20Census20Core20API200AdminReviewerDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200AdminReviewerGet implements GET /gateway/System%20Census%20Core%20API/2.0.0/admin/reviewer operation.
//
// Reviewers are CMS employees responsible for verifying the accuracy and completeness of the System
// Census Survey data each year. There are two types of reviewers, QA and DA. The list of potential
// reviewers is returned by this endpoint and can be filtered by 'type'.
//
// GET /gateway/System%20Census%20Core%20API/2.0.0/admin/reviewer
func (UnimplementedHandler) GatewaySystem20Census20Core20API200AdminReviewerGet(ctx context.Context, params GatewaySystem20Census20Core20API200AdminReviewerGetParams) (r GatewaySystem20Census20Core20API200AdminReviewerGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200AdminReviewerPost implements POST /gateway/System%20Census%20Core%20API/2.0.0/adminReviewer operation.
//
// Add one or more System Census Reviewers.
//
// POST /gateway/System%20Census%20Core%20API/2.0.0/adminReviewer
func (UnimplementedHandler) GatewaySystem20Census20Core20API200AdminReviewerPost(ctx context.Context, req *GatewaySystem20Census20Core20API200AdminReviewerPostReq) (r GatewaySystem20Census20Core20API200AdminReviewerPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200BudgetAndContractsGet implements GET /gateway/System%20Census%20Core%20API/2.0.0/budgetAndContracts operation.
//
// Retrieve budget and contract information for a specific system.
//
// GET /gateway/System%20Census%20Core%20API/2.0.0/budgetAndContracts
func (UnimplementedHandler) GatewaySystem20Census20Core20API200BudgetAndContractsGet(ctx context.Context, params GatewaySystem20Census20Core20API200BudgetAndContractsGetParams) (r GatewaySystem20Census20Core20API200BudgetAndContractsGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200BudgetAndContractsPost implements POST /gateway/System%20Census%20Core%20API/2.0.0/budgetAndContracts operation.
//
// Add or update budget and contract information for a system.
//
// POST /gateway/System%20Census%20Core%20API/2.0.0/budgetAndContracts
func (UnimplementedHandler) GatewaySystem20Census20Core20API200BudgetAndContractsPost(ctx context.Context, req *GatewaySystem20Census20Core20API200BudgetAndContractsPostReq) (r GatewaySystem20Census20Core20API200BudgetAndContractsPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200BusinessOwnerPost implements POST /gateway/System%20Census%20Core%20API/2.0.0/businessOwner operation.
//
// Add or update business owner basic information data for a system. If an update, ID is required.
//
// POST /gateway/System%20Census%20Core%20API/2.0.0/businessOwner
func (UnimplementedHandler) GatewaySystem20Census20Core20API200BusinessOwnerPost(ctx context.Context, req *GatewaySystem20Census20Core20API200BusinessOwnerPostReq) (r GatewaySystem20Census20Core20API200BusinessOwnerPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200DataExchangeNotesDelete implements DELETE /gateway/System%20Census%20Core%20API/2.0.0/dataExchange/notes operation.
//
// Deletes notes associated with specific data exchange IDs. This endpoint removes notes from the
// SYSTEM_SURVEY_EXCHANGE_NOTES table based on the provided exchange IDs. This implementation matches
// the webmethods flow pageDataExchangeNotesDelete.
//
// DELETE /gateway/System%20Census%20Core%20API/2.0.0/dataExchange/notes
func (UnimplementedHandler) GatewaySystem20Census20Core20API200DataExchangeNotesDelete(ctx context.Context, params GatewaySystem20Census20Core20API200DataExchangeNotesDeleteParams) (r GatewaySystem20Census20Core20API200DataExchangeNotesDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200DataExchangeNotesGet implements GET /gateway/System%20Census%20Core%20API/2.0.0/dataExchangeNotes operation.
//
// Get list of notes for a specific data exchange.
//
// GET /gateway/System%20Census%20Core%20API/2.0.0/dataExchangeNotes
func (UnimplementedHandler) GatewaySystem20Census20Core20API200DataExchangeNotesGet(ctx context.Context, params GatewaySystem20Census20Core20API200DataExchangeNotesGetParams) (r GatewaySystem20Census20Core20API200DataExchangeNotesGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200DataExchangeNotesPost implements POST /gateway/System%20Census%20Core%20API/2.0.0/dataExchangeNotes operation.
//
// Add a list of notes for a data exchange.
//
// POST /gateway/System%20Census%20Core%20API/2.0.0/dataExchangeNotes
func (UnimplementedHandler) GatewaySystem20Census20Core20API200DataExchangeNotesPost(ctx context.Context, req *GatewaySystem20Census20Core20API200DataExchangeNotesPostReq) (r GatewaySystem20Census20Core20API200DataExchangeNotesPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200DataExchangeStatusDelete implements DELETE /gateway/System%20Census%20Core%20API/2.0.0/dataExchange/status operation.
//
// Delete data exchange status records based on their exchange IDs.
//
// DELETE /gateway/System%20Census%20Core%20API/2.0.0/dataExchange/status
func (UnimplementedHandler) GatewaySystem20Census20Core20API200DataExchangeStatusDelete(ctx context.Context, req *GatewaySystem20Census20Core20API200DataExchangeStatusDeleteReq) (r GatewaySystem20Census20Core20API200DataExchangeStatusDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200DataExchangeStatusGet implements GET /gateway/System%20Census%20Core%20API/2.0.0/dataExchange/status operation.
//
// Retrieve data exchange status information by system ID and optionally direction.
//
// GET /gateway/System%20Census%20Core%20API/2.0.0/dataExchange/status
func (UnimplementedHandler) GatewaySystem20Census20Core20API200DataExchangeStatusGet(ctx context.Context, params GatewaySystem20Census20Core20API200DataExchangeStatusGetParams) (r GatewaySystem20Census20Core20API200DataExchangeStatusGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200DrmGet implements GET /gateway/System%20Census%20Core%20API/2.0.0/drm operation.
//
// Retrieves all Data Reference Model (DRM) flat hierarchy data for reference purposes.
//
// GET /gateway/System%20Census%20Core%20API/2.0.0/drm
func (UnimplementedHandler) GatewaySystem20Census20Core20API200DrmGet(ctx context.Context) (r GatewaySystem20Census20Core20API200DrmGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200NoteListDelete implements DELETE /gateway/System%20Census%20Core%20API/2.0.0/note/list operation.
//
// Delete a list of notes based on their ID(s).
//
// DELETE /gateway/System%20Census%20Core%20API/2.0.0/note/list
func (UnimplementedHandler) GatewaySystem20Census20Core20API200NoteListDelete(ctx context.Context, params GatewaySystem20Census20Core20API200NoteListDeleteParams) (r GatewaySystem20Census20Core20API200NoteListDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200NoteListGet implements GET /gateway/System%20Census%20Core%20API/2.0.0/note/list operation.
//
// Retrieve a list of notes based on a system ID and page name.
//
// GET /gateway/System%20Census%20Core%20API/2.0.0/note/list
func (UnimplementedHandler) GatewaySystem20Census20Core20API200NoteListGet(ctx context.Context, params GatewaySystem20Census20Core20API200NoteListGetParams) (r GatewaySystem20Census20Core20API200NoteListGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200NotePost implements POST /gateway/System%20Census%20Core%20API/2.0.0/note operation.
//
// Add one or more notes to a system in the census database. Notes are associated with specific pages
// within a system and can include optional email notifications to reviewers and respondents. Each
// note is automatically timestamped upon creation.
//
// POST /gateway/System%20Census%20Core%20API/2.0.0/note
func (UnimplementedHandler) GatewaySystem20Census20Core20API200NotePost(ctx context.Context, req *GatewaySystem20Census20Core20API200NotePostReq) (r GatewaySystem20Census20Core20API200NotePostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200NotePut implements PUT /gateway/System%20Census%20Core%20API/2.0.0/note operation.
//
// Update a specific note by its ID.
//
// PUT /gateway/System%20Census%20Core%20API/2.0.0/note
func (UnimplementedHandler) GatewaySystem20Census20Core20API200NotePut(ctx context.Context, req *GatewaySystem20Census20Core20API200NotePutReq, params GatewaySystem20Census20Core20API200NotePutParams) (r GatewaySystem20Census20Core20API200NotePutRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200PageBusinessOwnerGet implements GET /gateway/System%20Census%20Core%20API/2.0.0/page/businessOwner operation.
//
// Get business owner basic information for a system by system ID.
//
// GET /gateway/System%20Census%20Core%20API/2.0.0/page/businessOwner
func (UnimplementedHandler) GatewaySystem20Census20Core20API200PageBusinessOwnerGet(ctx context.Context, params GatewaySystem20Census20Core20API200PageBusinessOwnerGetParams) (r GatewaySystem20Census20Core20API200PageBusinessOwnerGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200PageDataCentersGet implements GET /gateway/System%20Census%20Core%20API/2.0.0/page/dataCenters operation.
//
// Retrieves the deployment information including the data center or cloud service provider
// information, for given System ID.
//
// GET /gateway/System%20Census%20Core%20API/2.0.0/page/dataCenters
func (UnimplementedHandler) GatewaySystem20Census20Core20API200PageDataCentersGet(ctx context.Context, params GatewaySystem20Census20Core20API200PageDataCentersGetParams) (r GatewaySystem20Census20Core20API200PageDataCentersGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200PageDataCentersPost implements POST /gateway/System%20Census%20Core%20API/2.0.0/page/dataCenters operation.
//
// Add, update, or delete system data center/deployment information. Supports full CRUD operations
// for deployment relationships and system-level cloud migration settings.
//
// POST /gateway/System%20Census%20Core%20API/2.0.0/page/dataCenters
func (UnimplementedHandler) GatewaySystem20Census20Core20API200PageDataCentersPost(ctx context.Context, req *GatewaySystem20Census20Core20API200PageDataCentersPostReq) (r GatewaySystem20Census20Core20API200PageDataCentersPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200PageDataExchangeGet implements GET /gateway/System%20Census%20Core%20API/2.0.0/page/dataExchange operation.
//
// Retrieve data exchange information by system ID and optionally version.
//
// GET /gateway/System%20Census%20Core%20API/2.0.0/page/dataExchange
func (UnimplementedHandler) GatewaySystem20Census20Core20API200PageDataExchangeGet(ctx context.Context, req *GatewaySystem20Census20Core20API200PageDataExchangeGetReq, params GatewaySystem20Census20Core20API200PageDataExchangeGetParams) (r GatewaySystem20Census20Core20API200PageDataExchangeGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200PageDataExchangePost implements POST /gateway/System%20Census%20Core%20API/2.0.0/page/dataExchange operation.
//
// Add or update data exchange information for a system. A data exchange can be between two CMS IT
// systems or between a CMS system and a non-CMS stakeholder.
//
// POST /gateway/System%20Census%20Core%20API/2.0.0/page/dataExchange
func (UnimplementedHandler) GatewaySystem20Census20Core20API200PageDataExchangePost(ctx context.Context, req *GatewaySystem20Census20Core20API200PageDataExchangePostReq) (r GatewaySystem20Census20Core20API200PageDataExchangePostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200PageSoftwareProductsGet implements GET /gateway/System%20Census%20Core%20API/2.0.0/page/softwareProducts operation.
//
// Get software products list for a system by system ID.
//
// GET /gateway/System%20Census%20Core%20API/2.0.0/page/softwareProducts
func (UnimplementedHandler) GatewaySystem20Census20Core20API200PageSoftwareProductsGet(ctx context.Context, params GatewaySystem20Census20Core20API200PageSoftwareProductsGetParams) (r GatewaySystem20Census20Core20API200PageSoftwareProductsGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200PageSystemDataGet implements GET /gateway/System%20Census%20Core%20API/2.0.0/page/systemData operation.
//
// Retrieves system data page census information for a given system or all systems.
//
// GET /gateway/System%20Census%20Core%20API/2.0.0/page/systemData
func (UnimplementedHandler) GatewaySystem20Census20Core20API200PageSystemDataGet(ctx context.Context, params GatewaySystem20Census20Core20API200PageSystemDataGetParams) (r GatewaySystem20Census20Core20API200PageSystemDataGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200PageSystemDataPost implements POST /gateway/System%20Census%20Core%20API/2.0.0/page/systemData operation.
//
// Adds or updates system data page census information for a given system.
//
// POST /gateway/System%20Census%20Core%20API/2.0.0/page/systemData
func (UnimplementedHandler) GatewaySystem20Census20Core20API200PageSystemDataPost(ctx context.Context, req *GatewaySystem20Census20Core20API200PageSystemDataPostReq) (r GatewaySystem20Census20Core20API200PageSystemDataPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200PageSystemMaintainerGet implements GET /gateway/System%20Census%20Core%20API/2.0.0/page/systemMaintainer operation.
//
// Retrieve system maintainer information for a given system ID.
//
// GET /gateway/System%20Census%20Core%20API/2.0.0/page/systemMaintainer
func (UnimplementedHandler) GatewaySystem20Census20Core20API200PageSystemMaintainerGet(ctx context.Context, params GatewaySystem20Census20Core20API200PageSystemMaintainerGetParams) (r GatewaySystem20Census20Core20API200PageSystemMaintainerGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200PageSystemsListGet implements GET /gateway/System%20Census%20Core%20API/2.0.0/page/systemsList operation.
//
// Retrieve a list of all systems in the System Census.
//
// GET /gateway/System%20Census%20Core%20API/2.0.0/page/systemsList
func (UnimplementedHandler) GatewaySystem20Census20Core20API200PageSystemsListGet(ctx context.Context) (r GatewaySystem20Census20Core20API200PageSystemsListGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200PageUrlsGet implements GET /gateway/System%20Census%20Core%20API/2.0.0/page/Urls operation.
//
// Retrieve the URLs that are used to access the system, for a given System ID.
//
// GET /gateway/System%20Census%20Core%20API/2.0.0/page/Urls
func (UnimplementedHandler) GatewaySystem20Census20Core20API200PageUrlsGet(ctx context.Context, params GatewaySystem20Census20Core20API200PageUrlsGetParams) (r GatewaySystem20Census20Core20API200PageUrlsGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200PageUrlsPost implements POST /gateway/System%20Census%20Core%20API/2.0.0/page/Urls operation.
//
// Creates, updates, or deletes URL records associated with a system.
//
// POST /gateway/System%20Census%20Core%20API/2.0.0/page/Urls
func (UnimplementedHandler) GatewaySystem20Census20Core20API200PageUrlsPost(ctx context.Context, req *GatewaySystem20Census20Core20API200PageUrlsPostReq) (r GatewaySystem20Census20Core20API200PageUrlsPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200PersonGet implements GET /gateway/System%20Census%20Core%20API/2.0.0/person operation.
//
// Retrieve a list of persons from LDAP based on query criteria. At least one parameter must be
// provided for the search.
//
// GET /gateway/System%20Census%20Core%20API/2.0.0/person
func (UnimplementedHandler) GatewaySystem20Census20Core20API200PersonGet(ctx context.Context, req *GatewaySystem20Census20Core20API200PersonGetReq, params GatewaySystem20Census20Core20API200PersonGetParams) (r GatewaySystem20Census20Core20API200PersonGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200SoftwareProductsPost implements POST /gateway/System%20Census%20Core%20API/2.0.0/softwareProducts operation.
//
// Add or update software product details and system-level API/AI information.
//
// POST /gateway/System%20Census%20Core%20API/2.0.0/softwareProducts
func (UnimplementedHandler) GatewaySystem20Census20Core20API200SoftwareProductsPost(ctx context.Context, req *GatewaySystem20Census20Core20API200SoftwareProductsPostReq) (r GatewaySystem20Census20Core20API200SoftwareProductsPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200StatusDelete implements DELETE /gateway/System%20Census%20Core%20API/2.0.0/status operation.
//
// Deletes one or more system status records by their IDs.
//
// DELETE /gateway/System%20Census%20Core%20API/2.0.0/status
func (UnimplementedHandler) GatewaySystem20Census20Core20API200StatusDelete(ctx context.Context, params GatewaySystem20Census20Core20API200StatusDeleteParams) (r GatewaySystem20Census20Core20API200StatusDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200StatusGet implements GET /gateway/System%20Census%20Core%20API/2.0.0/status operation.
//
// Retrieves system census status information for systems and pages.
//
// GET /gateway/System%20Census%20Core%20API/2.0.0/status
func (UnimplementedHandler) GatewaySystem20Census20Core20API200StatusGet(ctx context.Context, params GatewaySystem20Census20Core20API200StatusGetParams) (r GatewaySystem20Census20Core20API200StatusGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200StatusPost implements POST /gateway/System%20Census%20Core%20API/2.0.0/status operation.
//
// Adds or updates a list of system status records.
//
// POST /gateway/System%20Census%20Core%20API/2.0.0/status
func (UnimplementedHandler) GatewaySystem20Census20Core20API200StatusPost(ctx context.Context, req *GatewaySystem20Census20Core20API200StatusPostReq) (r GatewaySystem20Census20Core20API200StatusPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200SystemAiUseGet implements GET /gateway/System%20Census%20Core%20API/2.0.0/system/ai-use operation.
//
// Retrieves AI Use census data for a specific system by its GUID.
//
// GET /gateway/System%20Census%20Core%20API/2.0.0/system/ai-use
func (UnimplementedHandler) GatewaySystem20Census20Core20API200SystemAiUseGet(ctx context.Context, params GatewaySystem20Census20Core20API200SystemAiUseGetParams) (r GatewaySystem20Census20Core20API200SystemAiUseGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200SystemAiUsePost implements POST /gateway/System%20Census%20Core%20API/2.0.0/system/ai-use operation.
//
// Updates AI Use census information for a given system.
//
// POST /gateway/System%20Census%20Core%20API/2.0.0/system/ai-use
func (UnimplementedHandler) GatewaySystem20Census20Core20API200SystemAiUsePost(ctx context.Context, req *GatewaySystem20Census20Core20API200SystemAiUsePostReq) (r GatewaySystem20Census20Core20API200SystemAiUsePostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200SystemComponentsGet implements GET /gateway/System%20Census%20Core%20API/2.0.0/systemComponents operation.
//
// Retrieves a list of sub-systems or components that make up the overall system. If no components
// are found, an empty list is returned. This endpoint aligns with the Webmethods
// `pageSystemComponentsFind` service.
//
// GET /gateway/System%20Census%20Core%20API/2.0.0/systemComponents
func (UnimplementedHandler) GatewaySystem20Census20Core20API200SystemComponentsGet(ctx context.Context, params GatewaySystem20Census20Core20API200SystemComponentsGetParams) (r GatewaySystem20Census20Core20API200SystemComponentsGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200SystemComponentsPost implements POST /gateway/System%20Census%20Core%20API/2.0.0/systemComponents operation.
//
// Add, update or delete system components for a given system.
//
// POST /gateway/System%20Census%20Core%20API/2.0.0/systemComponents
func (UnimplementedHandler) GatewaySystem20Census20Core20API200SystemComponentsPost(ctx context.Context, req *GatewaySystem20Census20Core20API200SystemComponentsPostReq) (r GatewaySystem20Census20Core20API200SystemComponentsPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200SystemMaintainerPost implements POST /gateway/System%20Census%20Core%20API/2.0.0/systemMaintainer operation.
//
// Adds or updates system maintainer details for a given system.
//
// POST /gateway/System%20Census%20Core%20API/2.0.0/systemMaintainer
func (UnimplementedHandler) GatewaySystem20Census20Core20API200SystemMaintainerPost(ctx context.Context, req *GatewaySystem20Census20Core20API200SystemMaintainerPostReq) (r GatewaySystem20Census20Core20API200SystemMaintainerPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200SystemPropertyGet implements GET /gateway/System%20Census%20Core%20API/2.0.0/systemProperty operation.
//
// Retrieve a specific system property value for a given system ID and property name.
//
// GET /gateway/System%20Census%20Core%20API/2.0.0/systemProperty
func (UnimplementedHandler) GatewaySystem20Census20Core20API200SystemPropertyGet(ctx context.Context, params GatewaySystem20Census20Core20API200SystemPropertyGetParams) (r GatewaySystem20Census20Core20API200SystemPropertyGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewaySystem20Census20Core20API200SystemPropertyPost implements POST /gateway/System%20Census%20Core%20API/2.0.0/systemProperty operation.
//
// Add or update a system property value for a given system ID and property name.
//
// POST /gateway/System%20Census%20Core%20API/2.0.0/systemProperty
func (UnimplementedHandler) GatewaySystem20Census20Core20API200SystemPropertyPost(ctx context.Context, req *GatewaySystem20Census20Core20API200SystemPropertyPostReq) (r GatewaySystem20Census20Core20API200SystemPropertyPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayTechnopedia10SoftwareExtendedGet implements GET /gateway/Technopedia/1.0/softwareExtended operation.
//
// Retrieve software product information from Technopedia database. Supports multiple query modes:
// exact match by manufacturer, product name, version, and edition (update=true), fuzzy search with
// LIKE matching (update=false), or lookup by ID. All filter parameters are optional and can be
// combined.
//
// GET /gateway/Technopedia/1.0/softwareExtended
func (UnimplementedHandler) GatewayTechnopedia10SoftwareExtendedGet(ctx context.Context, params GatewayTechnopedia10SoftwareExtendedGetParams) (r GatewayTechnopedia10SoftwareExtendedGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GatewayTechnopedia10SoftwareExtendedIDGet implements GET /gateway/Technopedia/1.0/softwareExtended/{id} operation.
//
// Retrieve extended software information by ID from Technopedia database.
//
// GET /gateway/Technopedia/1.0/softwareExtended/{id}
func (UnimplementedHandler) GatewayTechnopedia10SoftwareExtendedIDGet(ctx context.Context, params GatewayTechnopedia10SoftwareExtendedIDGetParams) (r GatewayTechnopedia10SoftwareExtendedIDGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// HealthGet implements GET /health operation.
//
// Health check endpoint.
//
// GET /health
func (UnimplementedHandler) HealthGet(ctx context.Context) (r *HealthGetOK, _ error) {
	return r, ht.ErrNotImplemented
}

// SparxIDDelete implements DELETE /sparx/{id} operation.
//
// Delete SparxEA object by ID.
//
// DELETE /sparx/{id}
func (UnimplementedHandler) SparxIDDelete(ctx context.Context, params SparxIDDeleteParams) (r SparxIDDeleteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SparxIDGet implements GET /sparx/{id} operation.
//
// Get SparxEA object by ID.
//
// GET /sparx/{id}
func (UnimplementedHandler) SparxIDGet(ctx context.Context, params SparxIDGetParams) (r SparxIDGetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SparxPost implements POST /sparx operation.
//
// Create a new SparxEA object.
//
// POST /sparx
func (UnimplementedHandler) SparxPost(ctx context.Context, req *SparxPostReq) (r SparxPostRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SwaggerUIGet implements GET /swagger-ui operation.
//
// Loads the Swagger UI tool.
//
// GET /swagger-ui
func (UnimplementedHandler) SwaggerUIGet(ctx context.Context) (r SwaggerUIGetRes, _ error) {
	return r, ht.ErrNotImplemented
}
