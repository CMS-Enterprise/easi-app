// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// GatewayCEDAR20Core20API200AuthorityToOperateGetParams is parameters of GET /gateway/CEDAR%20Core%20API/2.0.0/authorityToOperate operation.
type GatewayCEDAR20Core20API200AuthorityToOperateGetParams struct {
	// System ID in UUID format (with curly braces).
	SystemId OptNilUUID `json:",omitempty,omitzero"`
	// CMS UUID for the system.
	UUID OptNilUUID `json:",omitempty,omitzero"`
	// FISMA system acronym.
	FismaSystemAcronym OptNilString `json:",omitempty,omitzero"`
	// Technology Life Cycle phase.
	TlcPhase OptNilString `json:",omitempty,omitzero"`
	// Whether the system contains personally identifiable information.
	ContainsPersonallyIdentifiableInformation OptNilGatewayCEDAR20Core20API200AuthorityToOperateGetContainsPersonallyIdentifiableInformation `json:",omitempty,omitzero"`
	// Whether the system contains protected health information.
	IsProtectedHealthInformation OptNilGatewayCEDAR20Core20API200AuthorityToOperateGetIsProtectedHealthInformation `json:",omitempty,omitzero"`
	// Filter for effective dates after this date (YYYY-MM-DD format).
	DispositionDateAfter OptNilDate `json:",omitempty,omitzero"`
	// Filter for expiration dates before this date (YYYY-MM-DD format).
	DispositionDateBefore OptNilDate `json:",omitempty,omitzero"`
}

func unpackGatewayCEDAR20Core20API200AuthorityToOperateGetParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200AuthorityToOperateGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "systemId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SystemId = v.(OptNilUUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "uuid",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UUID = v.(OptNilUUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "fismaSystemAcronym",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FismaSystemAcronym = v.(OptNilString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "tlcPhase",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.TlcPhase = v.(OptNilString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "containsPersonallyIdentifiableInformation",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ContainsPersonallyIdentifiableInformation = v.(OptNilGatewayCEDAR20Core20API200AuthorityToOperateGetContainsPersonallyIdentifiableInformation)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "isProtectedHealthInformation",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IsProtectedHealthInformation = v.(OptNilGatewayCEDAR20Core20API200AuthorityToOperateGetIsProtectedHealthInformation)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "dispositionDateAfter",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.DispositionDateAfter = v.(OptNilDate)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "dispositionDateBefore",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.DispositionDateBefore = v.(OptNilDate)
		}
	}
	return params
}

func decodeGatewayCEDAR20Core20API200AuthorityToOperateGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200AuthorityToOperateGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: systemId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "systemId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSystemIdVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotSystemIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SystemId.SetTo(paramsDotSystemIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "systemId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: uuid.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "uuid",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUUIDVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotUUIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.UUID.SetTo(paramsDotUUIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "uuid",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: fismaSystemAcronym.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fismaSystemAcronym",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFismaSystemAcronymVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFismaSystemAcronymVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FismaSystemAcronym.SetTo(paramsDotFismaSystemAcronymVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "fismaSystemAcronym",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: tlcPhase.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "tlcPhase",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTlcPhaseVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTlcPhaseVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TlcPhase.SetTo(paramsDotTlcPhaseVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tlcPhase",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: containsPersonallyIdentifiableInformation.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "containsPersonallyIdentifiableInformation",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContainsPersonallyIdentifiableInformationVal GatewayCEDAR20Core20API200AuthorityToOperateGetContainsPersonallyIdentifiableInformation
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContainsPersonallyIdentifiableInformationVal = GatewayCEDAR20Core20API200AuthorityToOperateGetContainsPersonallyIdentifiableInformation(c)
					return nil
				}(); err != nil {
					return err
				}
				params.ContainsPersonallyIdentifiableInformation.SetTo(paramsDotContainsPersonallyIdentifiableInformationVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.ContainsPersonallyIdentifiableInformation.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "containsPersonallyIdentifiableInformation",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: isProtectedHealthInformation.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "isProtectedHealthInformation",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIsProtectedHealthInformationVal GatewayCEDAR20Core20API200AuthorityToOperateGetIsProtectedHealthInformation
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIsProtectedHealthInformationVal = GatewayCEDAR20Core20API200AuthorityToOperateGetIsProtectedHealthInformation(c)
					return nil
				}(); err != nil {
					return err
				}
				params.IsProtectedHealthInformation.SetTo(paramsDotIsProtectedHealthInformationVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.IsProtectedHealthInformation.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "isProtectedHealthInformation",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: dispositionDateAfter.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "dispositionDateAfter",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDispositionDateAfterVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDate(val)
					if err != nil {
						return err
					}

					paramsDotDispositionDateAfterVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DispositionDateAfter.SetTo(paramsDotDispositionDateAfterVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "dispositionDateAfter",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: dispositionDateBefore.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "dispositionDateBefore",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDispositionDateBeforeVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDate(val)
					if err != nil {
						return err
					}

					paramsDotDispositionDateBeforeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.DispositionDateBefore.SetTo(paramsDotDispositionDateBeforeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "dispositionDateBefore",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200BudgetGetParams is parameters of GET /gateway/CEDAR%20Core%20API/2.0.0/budget operation.
type GatewayCEDAR20Core20API200BudgetGetParams struct {
	// ID of the system that the budget is associated with. Adding this parameter will only return the
	// system matching the systemId.
	SystemId OptString `json:",omitempty,omitzero"`
	// ID of the system that the budget is associated with. Adding this parameter will instruct the
	// interface to only return the system matching the systemId.
	ProjectTitle OptString `json:",omitempty,omitzero"`
	// Project Id string to search. Adding this parameter will instruct the interface to only return the
	// system matching the projectId.
	ProjectId OptString `json:",omitempty,omitzero"`
	// Whether the call will return simply the IDs. If not set, the response will also include projectId,
	// systemId, fundingId and funding.
	OnlyIds OptBool `json:",omitempty,omitzero"`
	// Whether the call will return simply the IDs. If not set, the response will also include projectId,
	// systemId, fundingId and funding.
	IdsOnly OptBool `json:",omitempty,omitzero"`
}

func unpackGatewayCEDAR20Core20API200BudgetGetParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200BudgetGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "systemId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SystemId = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "projectTitle",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ProjectTitle = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "projectId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ProjectId = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "onlyIds",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.OnlyIds = v.(OptBool)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "idsOnly",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IdsOnly = v.(OptBool)
		}
	}
	return params
}

func decodeGatewayCEDAR20Core20API200BudgetGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200BudgetGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: systemId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "systemId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSystemIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSystemIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SystemId.SetTo(paramsDotSystemIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "systemId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: projectTitle.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "projectTitle",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotProjectTitleVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotProjectTitleVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ProjectTitle.SetTo(paramsDotProjectTitleVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectTitle",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: projectId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "projectId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotProjectIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotProjectIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ProjectId.SetTo(paramsDotProjectIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "projectId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: onlyIds.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "onlyIds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOnlyIdsVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotOnlyIdsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.OnlyIds.SetTo(paramsDotOnlyIdsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "onlyIds",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: idsOnly.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "idsOnly",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIdsOnlyVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotIdsOnlyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IdsOnly.SetTo(paramsDotIdsOnlyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "idsOnly",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200BudgetListDeleteParams is parameters of DELETE /gateway/CEDAR%20Core%20API/2.0.0/budget/list operation.
type GatewayCEDAR20Core20API200BudgetListDeleteParams struct {
	// An array of one or more budget IDs to delete. Can be provided as repeated parameters
	// (id=ID1&id=ID2) or with bracket notation (id[]=ID1&id[]=ID2).
	ID []string `json:",omitempty"`
}

func unpackGatewayCEDAR20Core20API200BudgetListDeleteParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200BudgetListDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		params.ID = packed[key].([]string)
	}
	return params
}

func decodeGatewayCEDAR20Core20API200BudgetListDeleteParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200BudgetListDeleteParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIDVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotIDVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.ID = append(params.ID, paramsDotIDVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.ID == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200BudgetSystemCostFindGetParams is parameters of GET /gateway/CEDAR%20Core%20API/2.0.0/budgetSystemCostFind operation.
type GatewayCEDAR20Core20API200BudgetSystemCostFindGetParams struct {
	// ID of the system that the budget is associated with. Adding this parameter will instruct the
	// interface to only return the system matching the systemId.
	SystemId OptString `json:",omitempty,omitzero"`
}

func unpackGatewayCEDAR20Core20API200BudgetSystemCostFindGetParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200BudgetSystemCostFindGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "systemId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SystemId = v.(OptString)
		}
	}
	return params
}

func decodeGatewayCEDAR20Core20API200BudgetSystemCostFindGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200BudgetSystemCostFindGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: systemId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "systemId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSystemIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSystemIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SystemId.SetTo(paramsDotSystemIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "systemId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200ContractListDeleteParams is parameters of DELETE /gateway/CEDAR%20Core%20API/2.0.0/contract/list operation.
type GatewayCEDAR20Core20API200ContractListDeleteParams struct {
	// An array of one or more contract IDs to delete. Can be provided as repeated parameters
	// (id=123&id=456) or with bracket notation (id[]=123&id[]=456).
	ID []string `json:",omitempty"`
}

func unpackGatewayCEDAR20Core20API200ContractListDeleteParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200ContractListDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		params.ID = packed[key].([]string)
	}
	return params
}

func decodeGatewayCEDAR20Core20API200ContractListDeleteParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200ContractListDeleteParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIDVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotIDVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.ID = append(params.ID, paramsDotIDVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.ID == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200ContractListGetParams is parameters of GET /gateway/CEDAR%20Core%20API/2.0.0/contract/list operation.
type GatewayCEDAR20Core20API200ContractListGetParams struct {
	// ID of the system to get contracts for. Adding this parameter will filter contracts to only those
	// associated with the specified system.
	SystemId OptString `json:",omitempty,omitzero"`
	// Keyword to search for in contract names. Performs a LIKE search on contract names.
	Keyword OptString `json:",omitempty,omitzero"`
	// Filter contracts by Period of Performance start date.
	POPStartDate OptDate `json:",omitempty,omitzero"`
	// Filter contracts by Period of Performance end date.
	POPEndDate OptDate `json:",omitempty,omitzero"`
	// Filter contracts by exact contract name match.
	ContractName OptString `json:",omitempty,omitzero"`
}

func unpackGatewayCEDAR20Core20API200ContractListGetParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200ContractListGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "systemId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SystemId = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "keyword",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Keyword = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "POPStartDate",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.POPStartDate = v.(OptDate)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "POPEndDate",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.POPEndDate = v.(OptDate)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "contractName",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ContractName = v.(OptString)
		}
	}
	return params
}

func decodeGatewayCEDAR20Core20API200ContractListGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200ContractListGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: systemId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "systemId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSystemIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSystemIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SystemId.SetTo(paramsDotSystemIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "systemId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: keyword.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "keyword",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeywordVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeywordVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Keyword.SetTo(paramsDotKeywordVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "keyword",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: POPStartDate.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "POPStartDate",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPOPStartDateVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDate(val)
					if err != nil {
						return err
					}

					paramsDotPOPStartDateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.POPStartDate.SetTo(paramsDotPOPStartDateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "POPStartDate",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: POPEndDate.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "POPEndDate",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPOPEndDateVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDate(val)
					if err != nil {
						return err
					}

					paramsDotPOPEndDateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.POPEndDate.SetTo(paramsDotPOPEndDateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "POPEndDate",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: contractName.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "contractName",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContractNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotContractNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ContractName.SetTo(paramsDotContractNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contractName",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200CostTypeListGetParams is parameters of GET /gateway/CEDAR%20Core%20API/2.0.0/costType/list operation.
type GatewayCEDAR20Core20API200CostTypeListGetParams struct {
	// Application where the object or role exists.
	Application GatewayCEDAR20Core20API200CostTypeListGetApplication
	// The name of a specific group of cost types to filter by.
	Name string
}

func unpackGatewayCEDAR20Core20API200CostTypeListGetParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200CostTypeListGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "application",
			In:   "query",
		}
		params.Application = packed[key].(GatewayCEDAR20Core20API200CostTypeListGetApplication)
	}
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "query",
		}
		params.Name = packed[key].(string)
	}
	return params
}

func decodeGatewayCEDAR20Core20API200CostTypeListGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200CostTypeListGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: application.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "application",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Application = GatewayCEDAR20Core20API200CostTypeListGetApplication(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Application.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "application",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200DeploymentDeleteParams is parameters of DELETE /gateway/CEDAR%20Core%20API/2.0.0/deployment operation.
type GatewayCEDAR20Core20API200DeploymentDeleteParams struct {
	// An array of one or more deployment IDs to delete. Can be provided as repeated parameters
	// (id=123&id=456) or with bracket notation (id[]=123&id[]=456).
	ID []string `json:",omitempty"`
}

func unpackGatewayCEDAR20Core20API200DeploymentDeleteParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200DeploymentDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		params.ID = packed[key].([]string)
	}
	return params
}

func decodeGatewayCEDAR20Core20API200DeploymentDeleteParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200DeploymentDeleteParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIDVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotIDVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.ID = append(params.ID, paramsDotIDVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.ID == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200DeploymentGetParams is parameters of GET /gateway/CEDAR%20Core%20API/2.0.0/deployment operation.
type GatewayCEDAR20Core20API200DeploymentGetParams struct {
	// ID of the system that the deployment is associated with.
	SystemId string
	// Deployment state.
	State OptGatewayCEDAR20Core20API200DeploymentGetState `json:",omitempty,omitzero"`
	// Deployment status.
	Status OptGatewayCEDAR20Core20API200DeploymentGetStatus `json:",omitempty,omitzero"`
	// Deployment type.
	DeploymentType OptGatewayCEDAR20Core20API200DeploymentGetDeploymentType `json:",omitempty,omitzero"`
}

func unpackGatewayCEDAR20Core20API200DeploymentGetParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200DeploymentGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "systemId",
			In:   "query",
		}
		params.SystemId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "state",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.State = v.(OptGatewayCEDAR20Core20API200DeploymentGetState)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "status",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Status = v.(OptGatewayCEDAR20Core20API200DeploymentGetStatus)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "deploymentType",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.DeploymentType = v.(OptGatewayCEDAR20Core20API200DeploymentGetDeploymentType)
		}
	}
	return params
}

func decodeGatewayCEDAR20Core20API200DeploymentGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200DeploymentGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: systemId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "systemId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SystemId = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "systemId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: state.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStateVal GatewayCEDAR20Core20API200DeploymentGetState
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStateVal = GatewayCEDAR20Core20API200DeploymentGetState(c)
					return nil
				}(); err != nil {
					return err
				}
				params.State.SetTo(paramsDotStateVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.State.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: status.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "status",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStatusVal GatewayCEDAR20Core20API200DeploymentGetStatus
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStatusVal = GatewayCEDAR20Core20API200DeploymentGetStatus(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Status.SetTo(paramsDotStatusVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Status.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "status",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: deploymentType.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "deploymentType",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDeploymentTypeVal GatewayCEDAR20Core20API200DeploymentGetDeploymentType
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDeploymentTypeVal = GatewayCEDAR20Core20API200DeploymentGetDeploymentType(c)
					return nil
				}(); err != nil {
					return err
				}
				params.DeploymentType.SetTo(paramsDotDeploymentTypeVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.DeploymentType.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "deploymentType",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200DomainModelLevelGetParams is parameters of GET /gateway/CEDAR%20Core%20API/2.0.0/domainModelLevel operation.
type GatewayCEDAR20Core20API200DomainModelLevelGetParams struct {
	// The name of specific reference model to return. A value from the GET /domainModelName endpoint, e.
	// g., Architectural Domain, Business Capabilities, Information Domains.
	Model string
}

func unpackGatewayCEDAR20Core20API200DomainModelLevelGetParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200DomainModelLevelGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "model",
			In:   "query",
		}
		params.Model = packed[key].(string)
	}
	return params
}

func decodeGatewayCEDAR20Core20API200DomainModelLevelGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200DomainModelLevelGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: model.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "model",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Model = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "model",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200DomainModelListGetParams is parameters of GET /gateway/CEDAR%20Core%20API/2.0.0/domainModel/list operation.
type GatewayCEDAR20Core20API200DomainModelListGetParams struct {
	// The name of a specific model to return. Currently only "CmsDataReferenceModel" is supported.
	Model GatewayCEDAR20Core20API200DomainModelListGetModel
}

func unpackGatewayCEDAR20Core20API200DomainModelListGetParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200DomainModelListGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "model",
			In:   "query",
		}
		params.Model = packed[key].(GatewayCEDAR20Core20API200DomainModelListGetModel)
	}
	return params
}

func decodeGatewayCEDAR20Core20API200DomainModelListGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200DomainModelListGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: model.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "model",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Model = GatewayCEDAR20Core20API200DomainModelListGetModel(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Model.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "model",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200EnumerationGetParams is parameters of GET /gateway/CEDAR%20Core%20API/2.0.0/enumeration operation.
type GatewayCEDAR20Core20API200EnumerationGetParams struct {
	// The application identifier to retrieve enumerations for (e.g., "all", "alfabet").
	Application GatewayCEDAR20Core20API200EnumerationGetApplication
	// An array of enumeration names to retrieve. Can be provided as repeated parameters
	// (names=TypeA&names=TypeB) or with bracket notation (names[]=TypeA&names[]=TypeB).
	Names []string `json:",omitempty"`
}

func unpackGatewayCEDAR20Core20API200EnumerationGetParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200EnumerationGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "application",
			In:   "query",
		}
		params.Application = packed[key].(GatewayCEDAR20Core20API200EnumerationGetApplication)
	}
	{
		key := middleware.ParameterKey{
			Name: "names",
			In:   "query",
		}
		params.Names = packed[key].([]string)
	}
	return params
}

func decodeGatewayCEDAR20Core20API200EnumerationGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200EnumerationGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: application.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "application",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Application = GatewayCEDAR20Core20API200EnumerationGetApplication(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Application.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "application",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: names.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "names",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotNamesVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotNamesVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.Names = append(params.Names, paramsDotNamesVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.Names == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "names",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200ExchangeGetParams is parameters of GET /gateway/CEDAR%20Core%20API/2.0.0/exchange operation.
type GatewayCEDAR20Core20API200ExchangeGetParams struct {
	// ID of the system that the data exchange is associated with.
	SystemId string
	// The direction of the data exchange, either sender, receiver, or both.
	Direction GatewayCEDAR20Core20API200ExchangeGetDirection
	// Version of the data exchanges to be retrieved.
	Version string
}

func unpackGatewayCEDAR20Core20API200ExchangeGetParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200ExchangeGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "systemId",
			In:   "query",
		}
		params.SystemId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "direction",
			In:   "query",
		}
		params.Direction = packed[key].(GatewayCEDAR20Core20API200ExchangeGetDirection)
	}
	{
		key := middleware.ParameterKey{
			Name: "version",
			In:   "query",
		}
		params.Version = packed[key].(string)
	}
	return params
}

func decodeGatewayCEDAR20Core20API200ExchangeGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200ExchangeGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: systemId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "systemId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SystemId = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "systemId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: direction.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Direction = GatewayCEDAR20Core20API200ExchangeGetDirection(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Direction.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "direction",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: version.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "version",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Version = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "version",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200ExchangeIDGetParams is parameters of GET /gateway/CEDAR%20Core%20API/2.0.0/exchange/{id} operation.
type GatewayCEDAR20Core20API200ExchangeIDGetParams struct {
	// ID of exchange to retrieve.
	ID string
}

func unpackGatewayCEDAR20Core20API200ExchangeIDGetParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200ExchangeIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeGatewayCEDAR20Core20API200ExchangeIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200ExchangeIDGetParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200OrganizationGetParams is parameters of GET /gateway/CEDAR%20Core%20API/2.0.0/organization operation.
type GatewayCEDAR20Core20API200OrganizationGetParams struct {
	// The GUID of a specific organization to find. If provided, returns the organization and its
	// children.
	ID OptString `json:",omitempty,omitzero"`
	// The exact name of a specific organization to find. If provided, returns the organization and its
	// children.
	Name OptString `json:",omitempty,omitzero"`
	// The acronym of a specific organization to find. If provided, returns the organization and its
	// children.
	Acronym OptString `json:",omitempty,omitzero"`
}

func unpackGatewayCEDAR20Core20API200OrganizationGetParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200OrganizationGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ID = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Name = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "acronym",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Acronym = v.(OptString)
		}
	}
	return params
}

func decodeGatewayCEDAR20Core20API200OrganizationGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200OrganizationGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ID.SetTo(paramsDotIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name.SetTo(paramsDotNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: acronym.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "acronym",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAcronymVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAcronymVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Acronym.SetTo(paramsDotAcronymVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "acronym",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200RoleGetParams is parameters of GET /gateway/CEDAR%20Core%20API/2.0.0/role operation.
type GatewayCEDAR20Core20API200RoleGetParams struct {
	// Application where the object or role exists.
	Application GatewayCEDAR20Core20API200RoleGetApplication
	// ID of a specific role assignment.
	RoleId OptString `json:",omitempty,omitzero"`
	// ID of the object that roles are assigned to.
	ObjectId OptString `json:",omitempty,omitzero"`
	// ID of a specific role type to be returned. Used with objectId to limit results.
	RoleTypeId OptString `json:",omitempty,omitzero"`
}

func unpackGatewayCEDAR20Core20API200RoleGetParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200RoleGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "application",
			In:   "query",
		}
		params.Application = packed[key].(GatewayCEDAR20Core20API200RoleGetApplication)
	}
	{
		key := middleware.ParameterKey{
			Name: "roleId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.RoleId = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "objectId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ObjectId = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "roleTypeId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.RoleTypeId = v.(OptString)
		}
	}
	return params
}

func decodeGatewayCEDAR20Core20API200RoleGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200RoleGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: application.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "application",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Application = GatewayCEDAR20Core20API200RoleGetApplication(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Application.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "application",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: roleId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "roleId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotRoleIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotRoleIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.RoleId.SetTo(paramsDotRoleIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "roleId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: objectId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "objectId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotObjectIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotObjectIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ObjectId.SetTo(paramsDotObjectIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "objectId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: roleTypeId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "roleTypeId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotRoleTypeIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotRoleTypeIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.RoleTypeId.SetTo(paramsDotRoleTypeIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "roleTypeId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200RoleListDeleteParams is parameters of DELETE /gateway/CEDAR%20Core%20API/2.0.0/role/list operation.
type GatewayCEDAR20Core20API200RoleListDeleteParams struct {
	// The application where the role assignment should be deleted.
	Application GatewayCEDAR20Core20API200RoleListDeleteApplication
	// An array of one or more role assignment IDs to delete. Can be provided as repeated parameters
	// (id={guid1}&id={guid2}) or with bracket notation (id[]={guid1}&id[]={guid2}).
	ID []string `json:",omitempty"`
}

func unpackGatewayCEDAR20Core20API200RoleListDeleteParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200RoleListDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "application",
			In:   "query",
		}
		params.Application = packed[key].(GatewayCEDAR20Core20API200RoleListDeleteApplication)
	}
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		params.ID = packed[key].([]string)
	}
	return params
}

func decodeGatewayCEDAR20Core20API200RoleListDeleteParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200RoleListDeleteParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: application.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "application",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Application = GatewayCEDAR20Core20API200RoleListDeleteApplication(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Application.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "application",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIDVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotIDVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.ID = append(params.ID, paramsDotIDVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.ID == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200RoleTypeApplicationGetParams is parameters of GET /gateway/CEDAR%20Core%20API/2.0.0/role/type/{application} operation.
type GatewayCEDAR20Core20API200RoleTypeApplicationGetParams struct {
	// Application identifier to retrieve role types for.
	Application GatewayCEDAR20Core20API200RoleTypeApplicationGetApplication
}

func unpackGatewayCEDAR20Core20API200RoleTypeApplicationGetParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200RoleTypeApplicationGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "application",
			In:   "path",
		}
		params.Application = packed[key].(GatewayCEDAR20Core20API200RoleTypeApplicationGetApplication)
	}
	return params
}

func decodeGatewayCEDAR20Core20API200RoleTypeApplicationGetParams(args [1]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200RoleTypeApplicationGetParams, _ error) {
	// Decode path: application.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "application",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Application = GatewayCEDAR20Core20API200RoleTypeApplicationGetApplication(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Application.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "application",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200SoftwareProductsGetParams is parameters of GET /gateway/CEDAR%20Core%20API/2.0.0/softwareProducts operation.
type GatewayCEDAR20Core20API200SoftwareProductsGetParams struct {
	// Application ID.
	ID string
}

func unpackGatewayCEDAR20Core20API200SoftwareProductsGetParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200SoftwareProductsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeGatewayCEDAR20Core20API200SoftwareProductsGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200SoftwareProductsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200StakeholderGetParams is parameters of GET /gateway/CEDAR%20Core%20API/2.0.0/stakeholder operation.
type GatewayCEDAR20Core20API200StakeholderGetParams struct {
	// Stakeholder ID.
	ID OptString `json:",omitempty,omitzero"`
	// Stakeholder name.
	Name OptString `json:",omitempty,omitzero"`
	// Stakeholder version.
	Version OptString `json:",omitempty,omitzero"`
	// Stakeholder state.
	State OptString `json:",omitempty,omitzero"`
	// Stakeholder status.
	Status OptString `json:",omitempty,omitzero"`
	// Return only stakeholder IDs and names (boolean: "true", "false", "yes", "no", "1", "0").
	IdsOnly OptString `json:",omitempty,omitzero"`
}

func unpackGatewayCEDAR20Core20API200StakeholderGetParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200StakeholderGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ID = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Name = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "version",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Version = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "state",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.State = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "status",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Status = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "idsOnly",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IdsOnly = v.(OptString)
		}
	}
	return params
}

func decodeGatewayCEDAR20Core20API200StakeholderGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200StakeholderGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ID.SetTo(paramsDotIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name.SetTo(paramsDotNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: version.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "version",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Version.SetTo(paramsDotVersionVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "version",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: state.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStateVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.State.SetTo(paramsDotStateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: status.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "status",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStatusVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStatusVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Status.SetTo(paramsDotStatusVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "status",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: idsOnly.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "idsOnly",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIdsOnlyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIdsOnlyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IdsOnly.SetTo(paramsDotIdsOnlyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "idsOnly",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200SupportContactDeleteParams is parameters of DELETE /gateway/CEDAR%20Core%20API/2.0.0/supportContact operation.
type GatewayCEDAR20Core20API200SupportContactDeleteParams struct {
	// An array of one or more support contact IDs (GUIDs) to delete. Can be provided as repeated
	// parameters (id=guid1&id=guid2) or with bracket notation (id[]=guid1&id[]=guid2).
	ID []uuid.UUID `json:",omitempty"`
}

func unpackGatewayCEDAR20Core20API200SupportContactDeleteParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200SupportContactDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		params.ID = packed[key].([]uuid.UUID)
	}
	return params
}

func decodeGatewayCEDAR20Core20API200SupportContactDeleteParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200SupportContactDeleteParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIDVal uuid.UUID
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToUUID(val)
						if err != nil {
							return err
						}

						paramsDotIDVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.ID = append(params.ID, paramsDotIDVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.ID == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200SupportContactGetParams is parameters of GET /gateway/CEDAR%20Core%20API/2.0.0/supportContact operation.
type GatewayCEDAR20Core20API200SupportContactGetParams struct {
	// The GUID of the system for which to retrieve support contacts.
	Application string
}

func unpackGatewayCEDAR20Core20API200SupportContactGetParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200SupportContactGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "application",
			In:   "query",
		}
		params.Application = packed[key].(string)
	}
	return params
}

func decodeGatewayCEDAR20Core20API200SupportContactGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200SupportContactGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: application.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "application",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Application = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "application",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200SystemDetailIDGetParams is parameters of GET /gateway/CEDAR%20Core%20API/2.0.0/system/detail/{id} operation.
type GatewayCEDAR20Core20API200SystemDetailIDGetParams struct {
	// ID of the system (UUID string).
	ID string
}

func unpackGatewayCEDAR20Core20API200SystemDetailIDGetParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200SystemDetailIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeGatewayCEDAR20Core20API200SystemDetailIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200SystemDetailIDGetParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200SystemSummaryGetParams is parameters of GET /gateway/CEDAR%20Core%20API/2.0.0/system/summary operation.
type GatewayCEDAR20Core20API200SystemSummaryGetParams struct {
	// Filter by state.
	State OptString `json:",omitempty,omitzero"`
	// Filter by status.
	Status OptString `json:",omitempty,omitzero"`
	// API version.
	Version OptString `json:",omitempty,omitzero"`
	// Include in survey flag (true/false).
	IncludeInSurvey OptString `json:",omitempty,omitzero"`
	// Return only ID + name pairs (true/false).
	IdsOnly OptString `json:",omitempty,omitzero"`
	// Belongs to filter.
	BelongsTo OptString `json:",omitempty,omitzero"`
	// User name filter (triggers role-based filtering).
	UserName OptString `json:",omitempty,omitzero"`
	// Role type filter (used with userName).
	RoleType OptString `json:",omitempty,omitzero"`
}

func unpackGatewayCEDAR20Core20API200SystemSummaryGetParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200SystemSummaryGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "state",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.State = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "status",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Status = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "version",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Version = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "includeInSurvey",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IncludeInSurvey = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "idsOnly",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IdsOnly = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "belongsTo",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.BelongsTo = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "userName",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UserName = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "roleType",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.RoleType = v.(OptString)
		}
	}
	return params
}

func decodeGatewayCEDAR20Core20API200SystemSummaryGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200SystemSummaryGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: state.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStateVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.State.SetTo(paramsDotStateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: status.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "status",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStatusVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStatusVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Status.SetTo(paramsDotStatusVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "status",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: version.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "version",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Version.SetTo(paramsDotVersionVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "version",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: includeInSurvey.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "includeInSurvey",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIncludeInSurveyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIncludeInSurveyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IncludeInSurvey.SetTo(paramsDotIncludeInSurveyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "includeInSurvey",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: idsOnly.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "idsOnly",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIdsOnlyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIdsOnlyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IdsOnly.SetTo(paramsDotIdsOnlyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "idsOnly",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: belongsTo.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "belongsTo",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotBelongsToVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotBelongsToVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.BelongsTo.SetTo(paramsDotBelongsToVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "belongsTo",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: userName.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "userName",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUserNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUserNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.UserName.SetTo(paramsDotUserNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "userName",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: roleType.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "roleType",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotRoleTypeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotRoleTypeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.RoleType.SetTo(paramsDotRoleTypeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "roleType",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200SystemSummaryIDGetParams is parameters of GET /gateway/CEDAR%20Core%20API/2.0.0/system/summary/{id} operation.
type GatewayCEDAR20Core20API200SystemSummaryIDGetParams struct {
	// ID of the system (UUID string).
	ID string
}

func unpackGatewayCEDAR20Core20API200SystemSummaryIDGetParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200SystemSummaryIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeGatewayCEDAR20Core20API200SystemSummaryIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200SystemSummaryIDGetParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200ThreatGetParams is parameters of GET /gateway/CEDAR%20Core%20API/2.0.0/threat operation.
type GatewayCEDAR20Core20API200ThreatGetParams struct {
	// A comma delimited list of object IDs, for example, an ATO ID.
	Ids string
}

func unpackGatewayCEDAR20Core20API200ThreatGetParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200ThreatGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "ids",
			In:   "query",
		}
		params.Ids = packed[key].(string)
	}
	return params
}

func decodeGatewayCEDAR20Core20API200ThreatGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200ThreatGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: ids.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "ids",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Ids = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ids",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200URLIDGetParams is parameters of GET /gateway/CEDAR%20Core%20API/2.0.0/url/{id} operation.
type GatewayCEDAR20Core20API200URLIDGetParams struct {
	// ID of object the URLs are associated with.
	ID string
}

func unpackGatewayCEDAR20Core20API200URLIDGetParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200URLIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeGatewayCEDAR20Core20API200URLIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200URLIDGetParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDAR20Core20API200UserGetParams is parameters of GET /gateway/CEDAR%20Core%20API/2.0.0/user operation.
type GatewayCEDAR20Core20API200UserGetParams struct {
	// The application the user belongs to (e.g., "alfabet", "all").
	Application GatewayCEDAR20Core20API200UserGetApplication
	// A user's GUID (e.g., "{11111111-2222-3333-4444-555555555555}"). If provided, other parameters are
	// ignored.
	ID OptNilUUID `json:",omitempty,omitzero"`
	// A user's username. Requires at least 2 alpha characters; wildcards (*) are supported.
	UserName OptNilString `json:",omitempty,omitzero"`
	// A user's first name. Requires at least 2 alpha characters; wildcards (*) are supported.
	FirstName OptNilString `json:",omitempty,omitzero"`
	// A user's last name. Requires at least 2 alpha characters; wildcards (*) are supported.
	LastName OptNilString `json:",omitempty,omitzero"`
	// A user's phone number.
	Phone OptNilString `json:",omitempty,omitzero"`
	// A user's email address.
	Email OptNilString `json:",omitempty,omitzero"`
}

func unpackGatewayCEDAR20Core20API200UserGetParams(packed middleware.Parameters) (params GatewayCEDAR20Core20API200UserGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "application",
			In:   "query",
		}
		params.Application = packed[key].(GatewayCEDAR20Core20API200UserGetApplication)
	}
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ID = v.(OptNilUUID)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "userName",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UserName = v.(OptNilString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "firstName",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FirstName = v.(OptNilString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "lastName",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.LastName = v.(OptNilString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "phone",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Phone = v.(OptNilString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "email",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Email = v.(OptNilString)
		}
	}
	return params
}

func decodeGatewayCEDAR20Core20API200UserGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDAR20Core20API200UserGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: application.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "application",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Application = GatewayCEDAR20Core20API200UserGetApplication(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Application.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "application",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIDVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ID.SetTo(paramsDotIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: userName.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "userName",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUserNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUserNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.UserName.SetTo(paramsDotUserNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "userName",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: firstName.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "firstName",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFirstNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFirstNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FirstName.SetTo(paramsDotFirstNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "firstName",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: lastName.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "lastName",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLastNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLastNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LastName.SetTo(paramsDotLastNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "lastName",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: phone.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "phone",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPhoneVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPhoneVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Phone.SetTo(paramsDotPhoneVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "phone",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: email.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "email",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEmailVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotEmailVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Email.SetTo(paramsDotEmailVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Email.Get(); ok {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        true,
							Hostname:     false,
							Regex:        nil,
						}).Validate(string(value)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "email",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDARIntake10ClientIDGetParams is parameters of GET /gateway/CEDARIntake/1.0/client/{id} operation.
type GatewayCEDARIntake10ClientIDGetParams struct {
	// The client ID to search for.
	ID string
	// The client status to filter by.
	ClientStatus string
	// The client version to filter by.
	Version string
	// The name of the client making the request.
	CLIENTNAME string
}

func unpackGatewayCEDARIntake10ClientIDGetParams(packed middleware.Parameters) (params GatewayCEDARIntake10ClientIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "clientStatus",
			In:   "query",
		}
		params.ClientStatus = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "version",
			In:   "query",
		}
		params.Version = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "CLIENT_NAME",
			In:   "header",
		}
		params.CLIENTNAME = packed[key].(string)
	}
	return params
}

func decodeGatewayCEDARIntake10ClientIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params GatewayCEDARIntake10ClientIDGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	h := uri.NewHeaderDecoder(r.Header)
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: clientStatus.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "clientStatus",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ClientStatus = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "clientStatus",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: version.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "version",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Version = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "version",
			In:   "query",
			Err:  err,
		}
	}
	// Decode header: CLIENT_NAME.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "CLIENT_NAME",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.CLIENTNAME = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "CLIENT_NAME",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDARIntake10IntakeCedarIDGetParams is parameters of GET /gateway/CEDARIntake/1.0/intake/cedar/{id} operation.
type GatewayCEDARIntake10IntakeCedarIDGetParams struct {
	// The CEDAR intake request ID to search for.
	ID string
	// The name of the client making the request.
	CLIENTNAME string
}

func unpackGatewayCEDARIntake10IntakeCedarIDGetParams(packed middleware.Parameters) (params GatewayCEDARIntake10IntakeCedarIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "CLIENT_NAME",
			In:   "header",
		}
		params.CLIENTNAME = packed[key].(string)
	}
	return params
}

func decodeGatewayCEDARIntake10IntakeCedarIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params GatewayCEDARIntake10IntakeCedarIDGetParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode header: CLIENT_NAME.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "CLIENT_NAME",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.CLIENTNAME = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "CLIENT_NAME",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDARIntake10IntakePostParams is parameters of POST /gateway/CEDARIntake/1.0/intake operation.
type GatewayCEDARIntake10IntakePostParams struct {
	// The client name to associate to the request.
	CLIENTNAME string
	// Determines if schema validation of the payload is performed synchronously before persisting the
	// record or asynchronously after the record has been persisted.
	ValidatePayload OptGatewayCEDARIntake10IntakePostValidatePayload `json:",omitempty,omitzero"`
}

func unpackGatewayCEDARIntake10IntakePostParams(packed middleware.Parameters) (params GatewayCEDARIntake10IntakePostParams) {
	{
		key := middleware.ParameterKey{
			Name: "CLIENT_NAME",
			In:   "header",
		}
		params.CLIENTNAME = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "validatePayload",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ValidatePayload = v.(OptGatewayCEDARIntake10IntakePostValidatePayload)
		}
	}
	return params
}

func decodeGatewayCEDARIntake10IntakePostParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDARIntake10IntakePostParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: CLIENT_NAME.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "CLIENT_NAME",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.CLIENTNAME = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "CLIENT_NAME",
			In:   "header",
			Err:  err,
		}
	}
	// Decode query: validatePayload.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "validatePayload",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotValidatePayloadVal GatewayCEDARIntake10IntakePostValidatePayload
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotValidatePayloadVal = GatewayCEDARIntake10IntakePostValidatePayload(c)
					return nil
				}(); err != nil {
					return err
				}
				params.ValidatePayload.SetTo(paramsDotValidatePayloadVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.ValidatePayload.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "validatePayload",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDARIntake10IntakeStatusGetParams is parameters of GET /gateway/CEDARIntake/1.0/intake/status operation.
type GatewayCEDARIntake10IntakeStatusGetParams struct {
	// CEDAR status describing the outcome of validation, and mapping of the payload.
	CedarStatus GatewayCEDARIntake10IntakeStatusGetCedarStatus
	// The starting point searching for records using the clientCreatedDate value.
	ClientCreatedStartDate OptString `json:",omitempty,omitzero"`
	// Number of results to return per page. If used, pageNumber must also be provided.
	PageSize OptString `json:",omitempty,omitzero"`
	// Page number to return. If used, pageSize must also be provided.
	PageNumber OptString `json:",omitempty,omitzero"`
}

func unpackGatewayCEDARIntake10IntakeStatusGetParams(packed middleware.Parameters) (params GatewayCEDARIntake10IntakeStatusGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "cedarStatus",
			In:   "query",
		}
		params.CedarStatus = packed[key].(GatewayCEDARIntake10IntakeStatusGetCedarStatus)
	}
	{
		key := middleware.ParameterKey{
			Name: "clientCreatedStartDate",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ClientCreatedStartDate = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pageSize",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageSize = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pageNumber",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageNumber = v.(OptString)
		}
	}
	return params
}

func decodeGatewayCEDARIntake10IntakeStatusGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayCEDARIntake10IntakeStatusGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: cedarStatus.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "cedarStatus",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.CedarStatus = GatewayCEDARIntake10IntakeStatusGetCedarStatus(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.CedarStatus.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "cedarStatus",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: clientCreatedStartDate.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "clientCreatedStartDate",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotClientCreatedStartDateVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotClientCreatedStartDateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ClientCreatedStartDate.SetTo(paramsDotClientCreatedStartDateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "clientCreatedStartDate",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: pageSize.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageSize",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageSizeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPageSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageSize.SetTo(paramsDotPageSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageSize",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: pageNumber.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageNumber",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageNumberVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPageNumberVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageNumber.SetTo(paramsDotPageNumberVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageNumber",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDARIntake10StatusCedarIDGetParams is parameters of GET /gateway/CEDARIntake/1.0/status/cedar/{id} operation.
type GatewayCEDARIntake10StatusCedarIDGetParams struct {
	// The CEDAR intake request ID to get status for.
	ID string
	// The name of the client making the request.
	CLIENTNAME string
}

func unpackGatewayCEDARIntake10StatusCedarIDGetParams(packed middleware.Parameters) (params GatewayCEDARIntake10StatusCedarIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "CLIENT_NAME",
			In:   "header",
		}
		params.CLIENTNAME = packed[key].(string)
	}
	return params
}

func decodeGatewayCEDARIntake10StatusCedarIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params GatewayCEDARIntake10StatusCedarIDGetParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode header: CLIENT_NAME.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "CLIENT_NAME",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.CLIENTNAME = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "CLIENT_NAME",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayCEDARIntake10StatusClientIDGetParams is parameters of GET /gateway/CEDARIntake/1.0/status/client/{id} operation.
type GatewayCEDARIntake10StatusClientIDGetParams struct {
	// The client ID to get status for.
	ID string
	// The client status to filter by.
	ClientStatus string
	// The client version to filter by.
	Version string
	// The name of the client making the request.
	CLIENTNAME string
}

func unpackGatewayCEDARIntake10StatusClientIDGetParams(packed middleware.Parameters) (params GatewayCEDARIntake10StatusClientIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "clientStatus",
			In:   "query",
		}
		params.ClientStatus = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "version",
			In:   "query",
		}
		params.Version = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "CLIENT_NAME",
			In:   "header",
		}
		params.CLIENTNAME = packed[key].(string)
	}
	return params
}

func decodeGatewayCEDARIntake10StatusClientIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params GatewayCEDARIntake10StatusClientIDGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	h := uri.NewHeaderDecoder(r.Header)
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: clientStatus.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "clientStatus",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ClientStatus = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "clientStatus",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: version.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "version",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Version = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "version",
			In:   "query",
			Err:  err,
		}
	}
	// Decode header: CLIENT_NAME.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "CLIENT_NAME",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.CLIENTNAME = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "CLIENT_NAME",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayIntakeSchemaIDDeleteParams is parameters of DELETE /gateway/intake-schema/{id} operation.
type GatewayIntakeSchemaIDDeleteParams struct {
	// The name of the schema.
	ID string
}

func unpackGatewayIntakeSchemaIDDeleteParams(packed middleware.Parameters) (params GatewayIntakeSchemaIDDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeGatewayIntakeSchemaIDDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params GatewayIntakeSchemaIDDeleteParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayIntakeSchemaIDGetParams is parameters of GET /gateway/intake-schema/{id} operation.
type GatewayIntakeSchemaIDGetParams struct {
	// The name of the schema.
	ID string
}

func unpackGatewayIntakeSchemaIDGetParams(packed middleware.Parameters) (params GatewayIntakeSchemaIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeGatewayIntakeSchemaIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params GatewayIntakeSchemaIDGetParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayIntakeSchemaIDPutParams is parameters of PUT /gateway/intake-schema/{id} operation.
type GatewayIntakeSchemaIDPutParams struct {
	// The name of the schema.
	ID string
}

func unpackGatewayIntakeSchemaIDPutParams(packed middleware.Parameters) (params GatewayIntakeSchemaIDPutParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeGatewayIntakeSchemaIDPutParams(args [1]string, argsEscaped bool, r *http.Request) (params GatewayIntakeSchemaIDPutParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayKeysIDDeleteParams is parameters of DELETE /gateway/keys/{id} operation.
type GatewayKeysIDDeleteParams struct {
	// The ID of the gateway key to remove.
	ID string
}

func unpackGatewayKeysIDDeleteParams(packed middleware.Parameters) (params GatewayKeysIDDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeGatewayKeysIDDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params GatewayKeysIDDeleteParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayLDAP10PersonGetParams is parameters of GET /gateway/LDAP/1.0/person operation.
type GatewayLDAP10PersonGetParams struct {
	// First name of the person to search for.
	FirstName OptString `json:",omitempty,omitzero"`
	// Last name of the person to search for.
	LastName OptString `json:",omitempty,omitzero"`
	// Common name of the person to search for.
	CommonName OptString `json:",omitempty,omitzero"`
	// Email address of the person to search for.
	Email OptString `json:",omitempty,omitzero"`
	// Telephone number of the person to search for.
	Telephone OptString `json:",omitempty,omitzero"`
}

func unpackGatewayLDAP10PersonGetParams(packed middleware.Parameters) (params GatewayLDAP10PersonGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "first_name",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FirstName = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "last_name",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.LastName = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "commonName",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.CommonName = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "email",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Email = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "telephone",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Telephone = v.(OptString)
		}
	}
	return params
}

func decodeGatewayLDAP10PersonGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayLDAP10PersonGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: first_name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "first_name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFirstNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFirstNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FirstName.SetTo(paramsDotFirstNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "first_name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: last_name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "last_name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLastNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLastNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LastName.SetTo(paramsDotLastNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "last_name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: commonName.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "commonName",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCommonNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCommonNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.CommonName.SetTo(paramsDotCommonNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "commonName",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: email.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "email",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEmailVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotEmailVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Email.SetTo(paramsDotEmailVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Email.Get(); ok {
					if err := func() error {
						if err := (validate.String{
							MinLength:    0,
							MinLengthSet: false,
							MaxLength:    0,
							MaxLengthSet: false,
							Email:        true,
							Hostname:     false,
							Regex:        nil,
						}).Validate(string(value)); err != nil {
							return errors.Wrap(err, "string")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "email",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: telephone.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "telephone",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTelephoneVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTelephoneVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Telephone.SetTo(paramsDotTelephoneVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "telephone",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayLDAP10PersonIDGetParams is parameters of GET /gateway/LDAP/1.0/person/{id} operation.
type GatewayLDAP10PersonIDGetParams struct {
	// Person ID - 4 character alphanumeric string.
	ID string
}

func unpackGatewayLDAP10PersonIDGetParams(packed middleware.Parameters) (params GatewayLDAP10PersonIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeGatewayLDAP10PersonIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params GatewayLDAP10PersonIDGetParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    4,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^[a-zA-Z0-9]{4}$"],
				}).Validate(string(params.ID)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GatewaySystem20Census20Core20API200AdminReviewerGetParams is parameters of GET /gateway/System%20Census%20Core%20API/2.0.0/admin/reviewer operation.
type GatewaySystem20Census20Core20API200AdminReviewerGetParams struct {
	// The type of reviewers to be returned. Either 'QA', 'DA', or null/empty. Null/empty will return all
	// reviewers.
	Type OptNilGatewaySystem20Census20Core20API200AdminReviewerGetType `json:",omitempty,omitzero"`
}

func unpackGatewaySystem20Census20Core20API200AdminReviewerGetParams(packed middleware.Parameters) (params GatewaySystem20Census20Core20API200AdminReviewerGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "type",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Type = v.(OptNilGatewaySystem20Census20Core20API200AdminReviewerGetType)
		}
	}
	return params
}

func decodeGatewaySystem20Census20Core20API200AdminReviewerGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewaySystem20Census20Core20API200AdminReviewerGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: type.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTypeVal GatewaySystem20Census20Core20API200AdminReviewerGetType
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTypeVal = GatewaySystem20Census20Core20API200AdminReviewerGetType(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Type.SetTo(paramsDotTypeVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Type.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "type",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewaySystem20Census20Core20API200BudgetAndContractsGetParams is parameters of GET /gateway/System%20Census%20Core%20API/2.0.0/budgetAndContracts operation.
type GatewaySystem20Census20Core20API200BudgetAndContractsGetParams struct {
	// The unique identifier for the system.
	SystemId uuid.UUID
}

func unpackGatewaySystem20Census20Core20API200BudgetAndContractsGetParams(packed middleware.Parameters) (params GatewaySystem20Census20Core20API200BudgetAndContractsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "systemId",
			In:   "query",
		}
		params.SystemId = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGatewaySystem20Census20Core20API200BudgetAndContractsGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewaySystem20Census20Core20API200BudgetAndContractsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: systemId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "systemId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.SystemId = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "systemId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewaySystem20Census20Core20API200DataExchangeNotesDeleteParams is parameters of DELETE /gateway/System%20Census%20Core%20API/2.0.0/dataExchange/notes operation.
type GatewaySystem20Census20Core20API200DataExchangeNotesDeleteParams struct {
	// An array of one or more data exchange IDs whose associated notes should be deleted. Can be
	// provided as repeated parameters (id=123&id=456) or with bracket notation (id[]=123&id[]=456).
	ID []string `json:",omitempty"`
}

func unpackGatewaySystem20Census20Core20API200DataExchangeNotesDeleteParams(packed middleware.Parameters) (params GatewaySystem20Census20Core20API200DataExchangeNotesDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		params.ID = packed[key].([]string)
	}
	return params
}

func decodeGatewaySystem20Census20Core20API200DataExchangeNotesDeleteParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewaySystem20Census20Core20API200DataExchangeNotesDeleteParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIDVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotIDVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.ID = append(params.ID, paramsDotIDVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.ID == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewaySystem20Census20Core20API200DataExchangeNotesGetParams is parameters of GET /gateway/System%20Census%20Core%20API/2.0.0/dataExchangeNotes operation.
type GatewaySystem20Census20Core20API200DataExchangeNotesGetParams struct {
	// The ID of the data exchange whose notes to retrieve.
	ExchangeId string
}

func unpackGatewaySystem20Census20Core20API200DataExchangeNotesGetParams(packed middleware.Parameters) (params GatewaySystem20Census20Core20API200DataExchangeNotesGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "exchangeId",
			In:   "query",
		}
		params.ExchangeId = packed[key].(string)
	}
	return params
}

func decodeGatewaySystem20Census20Core20API200DataExchangeNotesGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewaySystem20Census20Core20API200DataExchangeNotesGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: exchangeId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "exchangeId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ExchangeId = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "exchangeId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewaySystem20Census20Core20API200DataExchangeStatusGetParams is parameters of GET /gateway/System%20Census%20Core%20API/2.0.0/dataExchange/status operation.
type GatewaySystem20Census20Core20API200DataExchangeStatusGetParams struct {
	// ID of the system to retrieve data exchange status information about.
	SystemId uuid.UUID
	// Direction of the data exchange.
	Direction OptGatewaySystem20Census20Core20API200DataExchangeStatusGetDirection `json:",omitempty,omitzero"`
}

func unpackGatewaySystem20Census20Core20API200DataExchangeStatusGetParams(packed middleware.Parameters) (params GatewaySystem20Census20Core20API200DataExchangeStatusGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "systemId",
			In:   "query",
		}
		params.SystemId = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "direction",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Direction = v.(OptGatewaySystem20Census20Core20API200DataExchangeStatusGetDirection)
		}
	}
	return params
}

func decodeGatewaySystem20Census20Core20API200DataExchangeStatusGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewaySystem20Census20Core20API200DataExchangeStatusGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: systemId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "systemId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.SystemId = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "systemId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: direction.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "direction",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDirectionVal GatewaySystem20Census20Core20API200DataExchangeStatusGetDirection
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotDirectionVal = GatewaySystem20Census20Core20API200DataExchangeStatusGetDirection(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Direction.SetTo(paramsDotDirectionVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Direction.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "direction",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewaySystem20Census20Core20API200NoteListDeleteParams is parameters of DELETE /gateway/System%20Census%20Core%20API/2.0.0/note/list operation.
type GatewaySystem20Census20Core20API200NoteListDeleteParams struct {
	// An array of one or more note IDs to delete. Can be provided as repeated parameters (id=123&id=456)
	// or with bracket notation (id[]=123&id[]=456).
	ID []string `json:",omitempty"`
}

func unpackGatewaySystem20Census20Core20API200NoteListDeleteParams(packed middleware.Parameters) (params GatewaySystem20Census20Core20API200NoteListDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		params.ID = packed[key].([]string)
	}
	return params
}

func decodeGatewaySystem20Census20Core20API200NoteListDeleteParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewaySystem20Census20Core20API200NoteListDeleteParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIDVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotIDVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.ID = append(params.ID, paramsDotIDVal)
					return nil
				})
			}); err != nil {
				return err
			}
			if err := func() error {
				if params.ID == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewaySystem20Census20Core20API200NoteListGetParams is parameters of GET /gateway/System%20Census%20Core%20API/2.0.0/note/list operation.
type GatewaySystem20Census20Core20API200NoteListGetParams struct {
	// A system's ID.
	ID string
	// The system census page name.
	PageName string
}

func unpackGatewaySystem20Census20Core20API200NoteListGetParams(packed middleware.Parameters) (params GatewaySystem20Census20Core20API200NoteListGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		params.ID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "pageName",
			In:   "query",
		}
		params.PageName = packed[key].(string)
	}
	return params
}

func decodeGatewaySystem20Census20Core20API200NoteListGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewaySystem20Census20Core20API200NoteListGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: pageName.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageName",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PageName = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageName",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewaySystem20Census20Core20API200NotePutParams is parameters of PUT /gateway/System%20Census%20Core%20API/2.0.0/note operation.
type GatewaySystem20Census20Core20API200NotePutParams struct {
	// The ID of the note to update.
	ID string
}

func unpackGatewaySystem20Census20Core20API200NotePutParams(packed middleware.Parameters) (params GatewaySystem20Census20Core20API200NotePutParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeGatewaySystem20Census20Core20API200NotePutParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewaySystem20Census20Core20API200NotePutParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewaySystem20Census20Core20API200PageBusinessOwnerGetParams is parameters of GET /gateway/System%20Census%20Core%20API/2.0.0/page/businessOwner operation.
type GatewaySystem20Census20Core20API200PageBusinessOwnerGetParams struct {
	// The GUID of the system for which to retrieve business owner information.
	ID string
}

func unpackGatewaySystem20Census20Core20API200PageBusinessOwnerGetParams(packed middleware.Parameters) (params GatewaySystem20Census20Core20API200PageBusinessOwnerGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeGatewaySystem20Census20Core20API200PageBusinessOwnerGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewaySystem20Census20Core20API200PageBusinessOwnerGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewaySystem20Census20Core20API200PageDataCentersGetParams is parameters of GET /gateway/System%20Census%20Core%20API/2.0.0/page/dataCenters operation.
type GatewaySystem20Census20Core20API200PageDataCentersGetParams struct {
	// ID of the system that the deployment(s) is associated with.
	SystemId string
	// Deployment state.
	State GatewaySystem20Census20Core20API200PageDataCentersGetState
	// Deployment status.
	Status GatewaySystem20Census20Core20API200PageDataCentersGetStatus
	// Deployment type.
	Type GatewaySystem20Census20Core20API200PageDataCentersGetType
}

func unpackGatewaySystem20Census20Core20API200PageDataCentersGetParams(packed middleware.Parameters) (params GatewaySystem20Census20Core20API200PageDataCentersGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "systemId",
			In:   "query",
		}
		params.SystemId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "state",
			In:   "query",
		}
		params.State = packed[key].(GatewaySystem20Census20Core20API200PageDataCentersGetState)
	}
	{
		key := middleware.ParameterKey{
			Name: "status",
			In:   "query",
		}
		params.Status = packed[key].(GatewaySystem20Census20Core20API200PageDataCentersGetStatus)
	}
	{
		key := middleware.ParameterKey{
			Name: "type",
			In:   "query",
		}
		params.Type = packed[key].(GatewaySystem20Census20Core20API200PageDataCentersGetType)
	}
	return params
}

func decodeGatewaySystem20Census20Core20API200PageDataCentersGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewaySystem20Census20Core20API200PageDataCentersGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: systemId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "systemId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SystemId = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "systemId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: state.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.State = GatewaySystem20Census20Core20API200PageDataCentersGetState(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.State.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: status.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "status",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Status = GatewaySystem20Census20Core20API200PageDataCentersGetStatus(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Status.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "status",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: type.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Type = GatewaySystem20Census20Core20API200PageDataCentersGetType(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Type.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "type",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewaySystem20Census20Core20API200PageDataExchangeGetParams is parameters of GET /gateway/System%20Census%20Core%20API/2.0.0/page/dataExchange operation.
type GatewaySystem20Census20Core20API200PageDataExchangeGetParams struct {
	// ID of the system to retrieve data exchange information about.
	SystemId string
	// Version of the data exchanges to be retrieved.
	Version OptString `json:",omitempty,omitzero"`
}

func unpackGatewaySystem20Census20Core20API200PageDataExchangeGetParams(packed middleware.Parameters) (params GatewaySystem20Census20Core20API200PageDataExchangeGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "systemId",
			In:   "query",
		}
		params.SystemId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "version",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Version = v.(OptString)
		}
	}
	return params
}

func decodeGatewaySystem20Census20Core20API200PageDataExchangeGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewaySystem20Census20Core20API200PageDataExchangeGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: systemId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "systemId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SystemId = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "systemId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: version.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "version",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Version.SetTo(paramsDotVersionVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "version",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewaySystem20Census20Core20API200PageSoftwareProductsGetParams is parameters of GET /gateway/System%20Census%20Core%20API/2.0.0/page/softwareProducts operation.
type GatewaySystem20Census20Core20API200PageSoftwareProductsGetParams struct {
	// The ID of the system to retrieve software products for.
	ID string
}

func unpackGatewaySystem20Census20Core20API200PageSoftwareProductsGetParams(packed middleware.Parameters) (params GatewaySystem20Census20Core20API200PageSoftwareProductsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeGatewaySystem20Census20Core20API200PageSoftwareProductsGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewaySystem20Census20Core20API200PageSoftwareProductsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewaySystem20Census20Core20API200PageSystemDataGetParams is parameters of GET /gateway/System%20Census%20Core%20API/2.0.0/page/systemData operation.
type GatewaySystem20Census20Core20API200PageSystemDataGetParams struct {
	// The unique identifier (GUID) of the system to retrieve data for.
	SystemGUID OptString `json:",omitempty,omitzero"`
	// The system ID to retrieve data for.
	SystemId OptString `json:",omitempty,omitzero"`
}

func unpackGatewaySystem20Census20Core20API200PageSystemDataGetParams(packed middleware.Parameters) (params GatewaySystem20Census20Core20API200PageSystemDataGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "systemGUID",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SystemGUID = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "systemId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SystemId = v.(OptString)
		}
	}
	return params
}

func decodeGatewaySystem20Census20Core20API200PageSystemDataGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewaySystem20Census20Core20API200PageSystemDataGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: systemGUID.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "systemGUID",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSystemGUIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSystemGUIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SystemGUID.SetTo(paramsDotSystemGUIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "systemGUID",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: systemId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "systemId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSystemIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSystemIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SystemId.SetTo(paramsDotSystemIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "systemId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewaySystem20Census20Core20API200PageSystemMaintainerGetParams is parameters of GET /gateway/System%20Census%20Core%20API/2.0.0/page/systemMaintainer operation.
type GatewaySystem20Census20Core20API200PageSystemMaintainerGetParams struct {
	// The unique identifier (GUID) of the system.
	ID string
}

func unpackGatewaySystem20Census20Core20API200PageSystemMaintainerGetParams(packed middleware.Parameters) (params GatewaySystem20Census20Core20API200PageSystemMaintainerGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeGatewaySystem20Census20Core20API200PageSystemMaintainerGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewaySystem20Census20Core20API200PageSystemMaintainerGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewaySystem20Census20Core20API200PageUrlsGetParams is parameters of GET /gateway/System%20Census%20Core%20API/2.0.0/page/Urls operation.
type GatewaySystem20Census20Core20API200PageUrlsGetParams struct {
	// ID of system to retrieve system component information about.
	SystemId string
}

func unpackGatewaySystem20Census20Core20API200PageUrlsGetParams(packed middleware.Parameters) (params GatewaySystem20Census20Core20API200PageUrlsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "systemId",
			In:   "query",
		}
		params.SystemId = packed[key].(string)
	}
	return params
}

func decodeGatewaySystem20Census20Core20API200PageUrlsGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewaySystem20Census20Core20API200PageUrlsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: systemId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "systemId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SystemId = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "systemId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewaySystem20Census20Core20API200PersonGetParams is parameters of GET /gateway/System%20Census%20Core%20API/2.0.0/person operation.
type GatewaySystem20Census20Core20API200PersonGetParams struct {
	// A person's unique identifier (e.g., UID). If provided, this will be the primary search criterion.
	ID OptNilString `json:",omitempty,omitzero"`
	// A person's username (often maps to commonName or uid in LDAP).
	UserName OptNilString `json:",omitempty,omitzero"`
	// A person's first name. LDAP searches require a minimum of 2 alpha-characters.
	FirstName OptNilString `json:",omitempty,omitzero"`
	// A person's last name. LDAP searches require a minimum of 2 alpha-characters.
	LastName OptNilString `json:",omitempty,omitzero"`
	// A person's phone number.
	Phone OptNilString `json:",omitempty,omitzero"`
	// A person's email address.
	Email OptNilString `json:",omitempty,omitzero"`
}

func unpackGatewaySystem20Census20Core20API200PersonGetParams(packed middleware.Parameters) (params GatewaySystem20Census20Core20API200PersonGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ID = v.(OptNilString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "userName",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.UserName = v.(OptNilString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "firstName",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FirstName = v.(OptNilString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "lastName",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.LastName = v.(OptNilString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "phone",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Phone = v.(OptNilString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "email",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Email = v.(OptNilString)
		}
	}
	return params
}

func decodeGatewaySystem20Census20Core20API200PersonGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewaySystem20Census20Core20API200PersonGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ID.SetTo(paramsDotIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: userName.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "userName",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotUserNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUserNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.UserName.SetTo(paramsDotUserNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "userName",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: firstName.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "firstName",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFirstNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFirstNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FirstName.SetTo(paramsDotFirstNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "firstName",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: lastName.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "lastName",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLastNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLastNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LastName.SetTo(paramsDotLastNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "lastName",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: phone.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "phone",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPhoneVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPhoneVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Phone.SetTo(paramsDotPhoneVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "phone",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: email.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "email",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEmailVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotEmailVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Email.SetTo(paramsDotEmailVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "email",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewaySystem20Census20Core20API200StatusDeleteParams is parameters of DELETE /gateway/System%20Census%20Core%20API/2.0.0/status operation.
type GatewaySystem20Census20Core20API200StatusDeleteParams struct {
	// Comma-separated list of status record IDs to delete.
	ID string
	// If true, performs a soft delete. If false or omitted, performs a hard delete.
	Soft OptBool `json:",omitempty,omitzero"`
}

func unpackGatewaySystem20Census20Core20API200StatusDeleteParams(packed middleware.Parameters) (params GatewaySystem20Census20Core20API200StatusDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		params.ID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "soft",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Soft = v.(OptBool)
		}
	}
	return params
}

func decodeGatewaySystem20Census20Core20API200StatusDeleteParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewaySystem20Census20Core20API200StatusDeleteParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d+(,\\d+)*$"],
				}).Validate(string(params.ID)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: soft.
	{
		val := bool(false)
		params.Soft.SetTo(val)
	}
	// Decode query: soft.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "soft",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSoftVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSoftVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Soft.SetTo(paramsDotSoftVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "soft",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewaySystem20Census20Core20API200StatusGetParams is parameters of GET /gateway/System%20Census%20Core%20API/2.0.0/status operation.
type GatewaySystem20Census20Core20API200StatusGetParams struct {
	// The unique identifier (GUID) of the system to filter by.
	ID OptString `json:",omitempty,omitzero"`
	// The specific census page name to filter by. Requires id parameter when provided.
	PageName OptString `json:",omitempty,omitzero"`
	// Whether to return a summarized list per system.
	Summarize OptBool `json:",omitempty,omitzero"`
}

func unpackGatewaySystem20Census20Core20API200StatusGetParams(packed middleware.Parameters) (params GatewaySystem20Census20Core20API200StatusGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ID = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pageName",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageName = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "summarize",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Summarize = v.(OptBool)
		}
	}
	return params
}

func decodeGatewaySystem20Census20Core20API200StatusGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewaySystem20Census20Core20API200StatusGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ID.SetTo(paramsDotIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: pageName.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageName",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPageNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageName.SetTo(paramsDotPageNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageName",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: summarize.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "summarize",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSummarizeVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					paramsDotSummarizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Summarize.SetTo(paramsDotSummarizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "summarize",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewaySystem20Census20Core20API200SystemAiUseGetParams is parameters of GET /gateway/System%20Census%20Core%20API/2.0.0/system/ai-use operation.
type GatewaySystem20Census20Core20API200SystemAiUseGetParams struct {
	// The unique identifier (GUID) of the system.
	ID string
}

func unpackGatewaySystem20Census20Core20API200SystemAiUseGetParams(packed middleware.Parameters) (params GatewaySystem20Census20Core20API200SystemAiUseGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "query",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeGatewaySystem20Census20Core20API200SystemAiUseGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewaySystem20Census20Core20API200SystemAiUseGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewaySystem20Census20Core20API200SystemComponentsGetParams is parameters of GET /gateway/System%20Census%20Core%20API/2.0.0/systemComponents operation.
type GatewaySystem20Census20Core20API200SystemComponentsGetParams struct {
	// ID of the system to retrieve system component information about.
	SystemId string
}

func unpackGatewaySystem20Census20Core20API200SystemComponentsGetParams(packed middleware.Parameters) (params GatewaySystem20Census20Core20API200SystemComponentsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "systemId",
			In:   "query",
		}
		params.SystemId = packed[key].(string)
	}
	return params
}

func decodeGatewaySystem20Census20Core20API200SystemComponentsGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewaySystem20Census20Core20API200SystemComponentsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: systemId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "systemId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SystemId = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "systemId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewaySystem20Census20Core20API200SystemPropertyGetParams is parameters of GET /gateway/System%20Census%20Core%20API/2.0.0/systemProperty operation.
type GatewaySystem20Census20Core20API200SystemPropertyGetParams struct {
	// The unique identifier (GUID) of the system.
	SystemId string
	// The name of the system property to retrieve.
	PropertyName string
}

func unpackGatewaySystem20Census20Core20API200SystemPropertyGetParams(packed middleware.Parameters) (params GatewaySystem20Census20Core20API200SystemPropertyGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "systemId",
			In:   "query",
		}
		params.SystemId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "propertyName",
			In:   "query",
		}
		params.PropertyName = packed[key].(string)
	}
	return params
}

func decodeGatewaySystem20Census20Core20API200SystemPropertyGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewaySystem20Census20Core20API200SystemPropertyGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: systemId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "systemId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SystemId = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "systemId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: propertyName.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "propertyName",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PropertyName = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "propertyName",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayTechnopedia10SoftwareExtendedGetParams is parameters of GET /gateway/Technopedia/1.0/softwareExtended operation.
type GatewayTechnopedia10SoftwareExtendedGetParams struct {
	// Software product name. Used for product matching.
	ProductName OptString `json:",omitempty,omitzero"`
	// Operation type for product name matching (e.g., exact, fuzzy).
	ProductNameOperation OptString `json:",omitempty,omitzero"`
	// Software vendor/manufacturer name. Used for vendor matching.
	Vendor OptString `json:",omitempty,omitzero"`
	// Operation type for vendor matching (e.g., exact, fuzzy).
	VendorOperation OptString `json:",omitempty,omitzero"`
	// Software version for filtering results. Uses exact match when update=true, LIKE match when
	// update=false.
	Version OptString `json:",omitempty,omitzero"`
	// Operation type for version matching (e.g., exact, fuzzy). NOTE: Currently not implemented - use
	// "update" parameter to control match type.
	VersionOperation OptString `json:",omitempty,omitzero"`
	// Software edition for filtering results (e.g., Professional, Enterprise, Standard). Uses exact
	// match when update=true, LIKE match when update=false.
	Edition OptString `json:",omitempty,omitzero"`
	// Operation type for edition matching (e.g., exact, fuzzy). NOTE: Currently not implemented - use
	// "update" parameter to control match type.
	EditionOperation OptString `json:",omitempty,omitzero"`
	// Controls the response mode. When "true", returns summary data.
	Summary GatewayTechnopedia10SoftwareExtendedGetSummary
	// Controls update behavior when summary is true. When "true", uses update mode.
	Update GatewayTechnopedia10SoftwareExtendedGetUpdate
	// Pagination offset for result sets.
	Offset OptString `json:",omitempty,omitzero"`
	// Maximum number of results to return. Defaults to 200.
	FetchLimit OptString `json:",omitempty,omitzero"`
}

func unpackGatewayTechnopedia10SoftwareExtendedGetParams(packed middleware.Parameters) (params GatewayTechnopedia10SoftwareExtendedGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "product_name",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ProductName = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "product_name_operation",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ProductNameOperation = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "vendor",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Vendor = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "vendor_operation",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.VendorOperation = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "version",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Version = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "version_operation",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.VersionOperation = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "edition",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Edition = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "edition_operation",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.EditionOperation = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "summary",
			In:   "query",
		}
		params.Summary = packed[key].(GatewayTechnopedia10SoftwareExtendedGetSummary)
	}
	{
		key := middleware.ParameterKey{
			Name: "update",
			In:   "query",
		}
		params.Update = packed[key].(GatewayTechnopedia10SoftwareExtendedGetUpdate)
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "fetch_limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FetchLimit = v.(OptString)
		}
	}
	return params
}

func decodeGatewayTechnopedia10SoftwareExtendedGetParams(args [0]string, argsEscaped bool, r *http.Request) (params GatewayTechnopedia10SoftwareExtendedGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: product_name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "product_name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotProductNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotProductNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ProductName.SetTo(paramsDotProductNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "product_name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: product_name_operation.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "product_name_operation",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotProductNameOperationVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotProductNameOperationVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ProductNameOperation.SetTo(paramsDotProductNameOperationVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "product_name_operation",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: vendor.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "vendor",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotVendorVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVendorVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Vendor.SetTo(paramsDotVendorVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "vendor",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: vendor_operation.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "vendor_operation",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotVendorOperationVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVendorOperationVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.VendorOperation.SetTo(paramsDotVendorOperationVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "vendor_operation",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: version.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "version",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotVersionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVersionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Version.SetTo(paramsDotVersionVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "version",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: version_operation.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "version_operation",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotVersionOperationVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVersionOperationVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.VersionOperation.SetTo(paramsDotVersionOperationVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "version_operation",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: edition.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "edition",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEditionVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotEditionVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Edition.SetTo(paramsDotEditionVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "edition",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: edition_operation.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "edition_operation",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEditionOperationVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotEditionOperationVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.EditionOperation.SetTo(paramsDotEditionOperationVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "edition_operation",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: summary.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "summary",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Summary = GatewayTechnopedia10SoftwareExtendedGetSummary(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Summary.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "summary",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: update.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "update",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Update = GatewayTechnopedia10SoftwareExtendedGetUpdate(c)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Update.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "update",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: fetch_limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "fetch_limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFetchLimitVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFetchLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.FetchLimit.SetTo(paramsDotFetchLimitVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "fetch_limit",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GatewayTechnopedia10SoftwareExtendedIDGetParams is parameters of GET /gateway/Technopedia/1.0/softwareExtended/{id} operation.
type GatewayTechnopedia10SoftwareExtendedIDGetParams struct {
	// The unique identifier of the software record to retrieve.
	ID int
}

func unpackGatewayTechnopedia10SoftwareExtendedIDGetParams(packed middleware.Parameters) (params GatewayTechnopedia10SoftwareExtendedIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(int)
	}
	return params
}

func decodeGatewayTechnopedia10SoftwareExtendedIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params GatewayTechnopedia10SoftwareExtendedIDGetParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SparxIDDeleteParams is parameters of DELETE /sparx/{id} operation.
type SparxIDDeleteParams struct {
	// Object ID - UUID format.
	ID uuid.UUID
}

func unpackSparxIDDeleteParams(packed middleware.Parameters) (params SparxIDDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeSparxIDDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params SparxIDDeleteParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SparxIDGetParams is parameters of GET /sparx/{id} operation.
type SparxIDGetParams struct {
	// Object ID - UUID format.
	ID uuid.UUID
}

func unpackSparxIDGetParams(packed middleware.Parameters) (params SparxIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeSparxIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params SparxIDGetParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
