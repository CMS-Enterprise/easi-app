// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewOrganizationFindListParams creates a new OrganizationFindListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewOrganizationFindListParams() *OrganizationFindListParams {
	return &OrganizationFindListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewOrganizationFindListParamsWithTimeout creates a new OrganizationFindListParams object
// with the ability to set a timeout on a request.
func NewOrganizationFindListParamsWithTimeout(timeout time.Duration) *OrganizationFindListParams {
	return &OrganizationFindListParams{
		timeout: timeout,
	}
}

// NewOrganizationFindListParamsWithContext creates a new OrganizationFindListParams object
// with the ability to set a context for a request.
func NewOrganizationFindListParamsWithContext(ctx context.Context) *OrganizationFindListParams {
	return &OrganizationFindListParams{
		Context: ctx,
	}
}

// NewOrganizationFindListParamsWithHTTPClient creates a new OrganizationFindListParams object
// with the ability to set a custom HTTPClient for a request.
func NewOrganizationFindListParamsWithHTTPClient(client *http.Client) *OrganizationFindListParams {
	return &OrganizationFindListParams{
		HTTPClient: client,
	}
}

/* OrganizationFindListParams contains all the parameters to send to the API endpoint
   for the organization find list operation.

   Typically these are written to a http.Request.
*/
type OrganizationFindListParams struct {

	/* Acronym.

	   Acronym of a specific organization. Will return the organization specified and all children of the organization.
	*/
	Acronym *string

	/* ID.

	   ID of a specific organization. Will return the organization specified and all children of the organization.
	*/
	ID *string

	/* Name.

	   Exact name of a specific organization. Will return the organization specified and all children of the organization.
	*/
	Name *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the organization find list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *OrganizationFindListParams) WithDefaults() *OrganizationFindListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the organization find list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *OrganizationFindListParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the organization find list params
func (o *OrganizationFindListParams) WithTimeout(timeout time.Duration) *OrganizationFindListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the organization find list params
func (o *OrganizationFindListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the organization find list params
func (o *OrganizationFindListParams) WithContext(ctx context.Context) *OrganizationFindListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the organization find list params
func (o *OrganizationFindListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the organization find list params
func (o *OrganizationFindListParams) WithHTTPClient(client *http.Client) *OrganizationFindListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the organization find list params
func (o *OrganizationFindListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAcronym adds the acronym to the organization find list params
func (o *OrganizationFindListParams) WithAcronym(acronym *string) *OrganizationFindListParams {
	o.SetAcronym(acronym)
	return o
}

// SetAcronym adds the acronym to the organization find list params
func (o *OrganizationFindListParams) SetAcronym(acronym *string) {
	o.Acronym = acronym
}

// WithID adds the id to the organization find list params
func (o *OrganizationFindListParams) WithID(id *string) *OrganizationFindListParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the organization find list params
func (o *OrganizationFindListParams) SetID(id *string) {
	o.ID = id
}

// WithName adds the name to the organization find list params
func (o *OrganizationFindListParams) WithName(name *string) *OrganizationFindListParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the organization find list params
func (o *OrganizationFindListParams) SetName(name *string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *OrganizationFindListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Acronym != nil {

		// query param acronym
		var qrAcronym string

		if o.Acronym != nil {
			qrAcronym = *o.Acronym
		}
		qAcronym := qrAcronym
		if qAcronym != "" {

			if err := r.SetQueryParam("acronym", qAcronym); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID string

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
