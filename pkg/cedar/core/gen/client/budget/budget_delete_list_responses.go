// Code generated by go-swagger; DO NOT EDIT.

package budget

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cms-enterprise/easi-app/pkg/cedar/core/gen/models"
)

// BudgetDeleteListReader is a Reader for the BudgetDeleteList structure.
type BudgetDeleteListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BudgetDeleteListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBudgetDeleteListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewBudgetDeleteListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewBudgetDeleteListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewBudgetDeleteListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewBudgetDeleteListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /budget] budgetDeleteList", response, response.Code())
	}
}

// NewBudgetDeleteListOK creates a BudgetDeleteListOK with default headers values
func NewBudgetDeleteListOK() *BudgetDeleteListOK {
	return &BudgetDeleteListOK{}
}

/*
BudgetDeleteListOK describes a response with status code 200, with default header values.

OK
*/
type BudgetDeleteListOK struct {
	Payload *models.Response
}

// IsSuccess returns true when this budget delete list o k response has a 2xx status code
func (o *BudgetDeleteListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this budget delete list o k response has a 3xx status code
func (o *BudgetDeleteListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this budget delete list o k response has a 4xx status code
func (o *BudgetDeleteListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this budget delete list o k response has a 5xx status code
func (o *BudgetDeleteListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this budget delete list o k response a status code equal to that given
func (o *BudgetDeleteListOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the budget delete list o k response
func (o *BudgetDeleteListOK) Code() int {
	return 200
}

func (o *BudgetDeleteListOK) Error() string {
	return fmt.Sprintf("[DELETE /budget][%d] budgetDeleteListOK  %+v", 200, o.Payload)
}

func (o *BudgetDeleteListOK) String() string {
	return fmt.Sprintf("[DELETE /budget][%d] budgetDeleteListOK  %+v", 200, o.Payload)
}

func (o *BudgetDeleteListOK) GetPayload() *models.Response {
	return o.Payload
}

func (o *BudgetDeleteListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBudgetDeleteListBadRequest creates a BudgetDeleteListBadRequest with default headers values
func NewBudgetDeleteListBadRequest() *BudgetDeleteListBadRequest {
	return &BudgetDeleteListBadRequest{}
}

/*
BudgetDeleteListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type BudgetDeleteListBadRequest struct {
	Payload *models.Response
}

// IsSuccess returns true when this budget delete list bad request response has a 2xx status code
func (o *BudgetDeleteListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this budget delete list bad request response has a 3xx status code
func (o *BudgetDeleteListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this budget delete list bad request response has a 4xx status code
func (o *BudgetDeleteListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this budget delete list bad request response has a 5xx status code
func (o *BudgetDeleteListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this budget delete list bad request response a status code equal to that given
func (o *BudgetDeleteListBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the budget delete list bad request response
func (o *BudgetDeleteListBadRequest) Code() int {
	return 400
}

func (o *BudgetDeleteListBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /budget][%d] budgetDeleteListBadRequest  %+v", 400, o.Payload)
}

func (o *BudgetDeleteListBadRequest) String() string {
	return fmt.Sprintf("[DELETE /budget][%d] budgetDeleteListBadRequest  %+v", 400, o.Payload)
}

func (o *BudgetDeleteListBadRequest) GetPayload() *models.Response {
	return o.Payload
}

func (o *BudgetDeleteListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBudgetDeleteListUnauthorized creates a BudgetDeleteListUnauthorized with default headers values
func NewBudgetDeleteListUnauthorized() *BudgetDeleteListUnauthorized {
	return &BudgetDeleteListUnauthorized{}
}

/*
BudgetDeleteListUnauthorized describes a response with status code 401, with default header values.

Access Denied
*/
type BudgetDeleteListUnauthorized struct {
	Payload *models.Response
}

// IsSuccess returns true when this budget delete list unauthorized response has a 2xx status code
func (o *BudgetDeleteListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this budget delete list unauthorized response has a 3xx status code
func (o *BudgetDeleteListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this budget delete list unauthorized response has a 4xx status code
func (o *BudgetDeleteListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this budget delete list unauthorized response has a 5xx status code
func (o *BudgetDeleteListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this budget delete list unauthorized response a status code equal to that given
func (o *BudgetDeleteListUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the budget delete list unauthorized response
func (o *BudgetDeleteListUnauthorized) Code() int {
	return 401
}

func (o *BudgetDeleteListUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /budget][%d] budgetDeleteListUnauthorized  %+v", 401, o.Payload)
}

func (o *BudgetDeleteListUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /budget][%d] budgetDeleteListUnauthorized  %+v", 401, o.Payload)
}

func (o *BudgetDeleteListUnauthorized) GetPayload() *models.Response {
	return o.Payload
}

func (o *BudgetDeleteListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBudgetDeleteListNotFound creates a BudgetDeleteListNotFound with default headers values
func NewBudgetDeleteListNotFound() *BudgetDeleteListNotFound {
	return &BudgetDeleteListNotFound{}
}

/*
BudgetDeleteListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type BudgetDeleteListNotFound struct {
	Payload *models.Response
}

// IsSuccess returns true when this budget delete list not found response has a 2xx status code
func (o *BudgetDeleteListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this budget delete list not found response has a 3xx status code
func (o *BudgetDeleteListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this budget delete list not found response has a 4xx status code
func (o *BudgetDeleteListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this budget delete list not found response has a 5xx status code
func (o *BudgetDeleteListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this budget delete list not found response a status code equal to that given
func (o *BudgetDeleteListNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the budget delete list not found response
func (o *BudgetDeleteListNotFound) Code() int {
	return 404
}

func (o *BudgetDeleteListNotFound) Error() string {
	return fmt.Sprintf("[DELETE /budget][%d] budgetDeleteListNotFound  %+v", 404, o.Payload)
}

func (o *BudgetDeleteListNotFound) String() string {
	return fmt.Sprintf("[DELETE /budget][%d] budgetDeleteListNotFound  %+v", 404, o.Payload)
}

func (o *BudgetDeleteListNotFound) GetPayload() *models.Response {
	return o.Payload
}

func (o *BudgetDeleteListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBudgetDeleteListInternalServerError creates a BudgetDeleteListInternalServerError with default headers values
func NewBudgetDeleteListInternalServerError() *BudgetDeleteListInternalServerError {
	return &BudgetDeleteListInternalServerError{}
}

/*
BudgetDeleteListInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type BudgetDeleteListInternalServerError struct {
	Payload *models.Response
}

// IsSuccess returns true when this budget delete list internal server error response has a 2xx status code
func (o *BudgetDeleteListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this budget delete list internal server error response has a 3xx status code
func (o *BudgetDeleteListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this budget delete list internal server error response has a 4xx status code
func (o *BudgetDeleteListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this budget delete list internal server error response has a 5xx status code
func (o *BudgetDeleteListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this budget delete list internal server error response a status code equal to that given
func (o *BudgetDeleteListInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the budget delete list internal server error response
func (o *BudgetDeleteListInternalServerError) Code() int {
	return 500
}

func (o *BudgetDeleteListInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /budget][%d] budgetDeleteListInternalServerError  %+v", 500, o.Payload)
}

func (o *BudgetDeleteListInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /budget][%d] budgetDeleteListInternalServerError  %+v", 500, o.Payload)
}

func (o *BudgetDeleteListInternalServerError) GetPayload() *models.Response {
	return o.Payload
}

func (o *BudgetDeleteListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
