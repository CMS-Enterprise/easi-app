// Code generated by go-swagger; DO NOT EDIT.

package enumeration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cmsgov/easi-app/pkg/cedar/core/gen/models"
)

// EnumerationFindListReader is a Reader for the EnumerationFindList structure.
type EnumerationFindListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnumerationFindListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEnumerationFindListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEnumerationFindListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEnumerationFindListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEnumerationFindListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /enumeration] enumerationFindList", response, response.Code())
	}
}

// NewEnumerationFindListOK creates a EnumerationFindListOK with default headers values
func NewEnumerationFindListOK() *EnumerationFindListOK {
	return &EnumerationFindListOK{}
}

/*
EnumerationFindListOK describes a response with status code 200, with default header values.

OK
*/
type EnumerationFindListOK struct {
	Payload *models.EnumerationFindResponse
}

// IsSuccess returns true when this enumeration find list o k response has a 2xx status code
func (o *EnumerationFindListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this enumeration find list o k response has a 3xx status code
func (o *EnumerationFindListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enumeration find list o k response has a 4xx status code
func (o *EnumerationFindListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this enumeration find list o k response has a 5xx status code
func (o *EnumerationFindListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this enumeration find list o k response a status code equal to that given
func (o *EnumerationFindListOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the enumeration find list o k response
func (o *EnumerationFindListOK) Code() int {
	return 200
}

func (o *EnumerationFindListOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /enumeration][%d] enumerationFindListOK %s", 200, payload)
}

func (o *EnumerationFindListOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /enumeration][%d] enumerationFindListOK %s", 200, payload)
}

func (o *EnumerationFindListOK) GetPayload() *models.EnumerationFindResponse {
	return o.Payload
}

func (o *EnumerationFindListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EnumerationFindResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnumerationFindListBadRequest creates a EnumerationFindListBadRequest with default headers values
func NewEnumerationFindListBadRequest() *EnumerationFindListBadRequest {
	return &EnumerationFindListBadRequest{}
}

/*
EnumerationFindListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type EnumerationFindListBadRequest struct {
	Payload *models.Response
}

// IsSuccess returns true when this enumeration find list bad request response has a 2xx status code
func (o *EnumerationFindListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enumeration find list bad request response has a 3xx status code
func (o *EnumerationFindListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enumeration find list bad request response has a 4xx status code
func (o *EnumerationFindListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this enumeration find list bad request response has a 5xx status code
func (o *EnumerationFindListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this enumeration find list bad request response a status code equal to that given
func (o *EnumerationFindListBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the enumeration find list bad request response
func (o *EnumerationFindListBadRequest) Code() int {
	return 400
}

func (o *EnumerationFindListBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /enumeration][%d] enumerationFindListBadRequest %s", 400, payload)
}

func (o *EnumerationFindListBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /enumeration][%d] enumerationFindListBadRequest %s", 400, payload)
}

func (o *EnumerationFindListBadRequest) GetPayload() *models.Response {
	return o.Payload
}

func (o *EnumerationFindListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnumerationFindListUnauthorized creates a EnumerationFindListUnauthorized with default headers values
func NewEnumerationFindListUnauthorized() *EnumerationFindListUnauthorized {
	return &EnumerationFindListUnauthorized{}
}

/*
EnumerationFindListUnauthorized describes a response with status code 401, with default header values.

Access Denied
*/
type EnumerationFindListUnauthorized struct {
	Payload *models.Response
}

// IsSuccess returns true when this enumeration find list unauthorized response has a 2xx status code
func (o *EnumerationFindListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enumeration find list unauthorized response has a 3xx status code
func (o *EnumerationFindListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enumeration find list unauthorized response has a 4xx status code
func (o *EnumerationFindListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this enumeration find list unauthorized response has a 5xx status code
func (o *EnumerationFindListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this enumeration find list unauthorized response a status code equal to that given
func (o *EnumerationFindListUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the enumeration find list unauthorized response
func (o *EnumerationFindListUnauthorized) Code() int {
	return 401
}

func (o *EnumerationFindListUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /enumeration][%d] enumerationFindListUnauthorized %s", 401, payload)
}

func (o *EnumerationFindListUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /enumeration][%d] enumerationFindListUnauthorized %s", 401, payload)
}

func (o *EnumerationFindListUnauthorized) GetPayload() *models.Response {
	return o.Payload
}

func (o *EnumerationFindListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnumerationFindListInternalServerError creates a EnumerationFindListInternalServerError with default headers values
func NewEnumerationFindListInternalServerError() *EnumerationFindListInternalServerError {
	return &EnumerationFindListInternalServerError{}
}

/*
EnumerationFindListInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type EnumerationFindListInternalServerError struct {
	Payload *models.Response
}

// IsSuccess returns true when this enumeration find list internal server error response has a 2xx status code
func (o *EnumerationFindListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enumeration find list internal server error response has a 3xx status code
func (o *EnumerationFindListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enumeration find list internal server error response has a 4xx status code
func (o *EnumerationFindListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this enumeration find list internal server error response has a 5xx status code
func (o *EnumerationFindListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this enumeration find list internal server error response a status code equal to that given
func (o *EnumerationFindListInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the enumeration find list internal server error response
func (o *EnumerationFindListInternalServerError) Code() int {
	return 500
}

func (o *EnumerationFindListInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /enumeration][%d] enumerationFindListInternalServerError %s", 500, payload)
}

func (o *EnumerationFindListInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /enumeration][%d] enumerationFindListInternalServerError %s", 500, payload)
}

func (o *EnumerationFindListInternalServerError) GetPayload() *models.Response {
	return o.Payload
}

func (o *EnumerationFindListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
