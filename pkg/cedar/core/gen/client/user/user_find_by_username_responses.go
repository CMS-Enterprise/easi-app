// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cms-enterprise/easi-app/pkg/cedar/core/gen/models"
)

// UserFindByUsernameReader is a Reader for the UserFindByUsername structure.
type UserFindByUsernameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserFindByUsernameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUserFindByUsernameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUserFindByUsernameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUserFindByUsernameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUserFindByUsernameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /user/username/{username}] userFindByUsername", response, response.Code())
	}
}

// NewUserFindByUsernameOK creates a UserFindByUsernameOK with default headers values
func NewUserFindByUsernameOK() *UserFindByUsernameOK {
	return &UserFindByUsernameOK{}
}

/*
UserFindByUsernameOK describes a response with status code 200, with default header values.

OK
*/
type UserFindByUsernameOK struct {
	Payload *models.User
}

// IsSuccess returns true when this user find by username o k response has a 2xx status code
func (o *UserFindByUsernameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this user find by username o k response has a 3xx status code
func (o *UserFindByUsernameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user find by username o k response has a 4xx status code
func (o *UserFindByUsernameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this user find by username o k response has a 5xx status code
func (o *UserFindByUsernameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this user find by username o k response a status code equal to that given
func (o *UserFindByUsernameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the user find by username o k response
func (o *UserFindByUsernameOK) Code() int {
	return 200
}

func (o *UserFindByUsernameOK) Error() string {
	return fmt.Sprintf("[GET /user/username/{username}][%d] userFindByUsernameOK  %+v", 200, o.Payload)
}

func (o *UserFindByUsernameOK) String() string {
	return fmt.Sprintf("[GET /user/username/{username}][%d] userFindByUsernameOK  %+v", 200, o.Payload)
}

func (o *UserFindByUsernameOK) GetPayload() *models.User {
	return o.Payload
}

func (o *UserFindByUsernameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserFindByUsernameBadRequest creates a UserFindByUsernameBadRequest with default headers values
func NewUserFindByUsernameBadRequest() *UserFindByUsernameBadRequest {
	return &UserFindByUsernameBadRequest{}
}

/*
UserFindByUsernameBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UserFindByUsernameBadRequest struct {
	Payload *models.Response
}

// IsSuccess returns true when this user find by username bad request response has a 2xx status code
func (o *UserFindByUsernameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user find by username bad request response has a 3xx status code
func (o *UserFindByUsernameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user find by username bad request response has a 4xx status code
func (o *UserFindByUsernameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this user find by username bad request response has a 5xx status code
func (o *UserFindByUsernameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this user find by username bad request response a status code equal to that given
func (o *UserFindByUsernameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the user find by username bad request response
func (o *UserFindByUsernameBadRequest) Code() int {
	return 400
}

func (o *UserFindByUsernameBadRequest) Error() string {
	return fmt.Sprintf("[GET /user/username/{username}][%d] userFindByUsernameBadRequest  %+v", 400, o.Payload)
}

func (o *UserFindByUsernameBadRequest) String() string {
	return fmt.Sprintf("[GET /user/username/{username}][%d] userFindByUsernameBadRequest  %+v", 400, o.Payload)
}

func (o *UserFindByUsernameBadRequest) GetPayload() *models.Response {
	return o.Payload
}

func (o *UserFindByUsernameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserFindByUsernameUnauthorized creates a UserFindByUsernameUnauthorized with default headers values
func NewUserFindByUsernameUnauthorized() *UserFindByUsernameUnauthorized {
	return &UserFindByUsernameUnauthorized{}
}

/*
UserFindByUsernameUnauthorized describes a response with status code 401, with default header values.

Access Denied
*/
type UserFindByUsernameUnauthorized struct {
	Payload *models.Response
}

// IsSuccess returns true when this user find by username unauthorized response has a 2xx status code
func (o *UserFindByUsernameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user find by username unauthorized response has a 3xx status code
func (o *UserFindByUsernameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user find by username unauthorized response has a 4xx status code
func (o *UserFindByUsernameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this user find by username unauthorized response has a 5xx status code
func (o *UserFindByUsernameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this user find by username unauthorized response a status code equal to that given
func (o *UserFindByUsernameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the user find by username unauthorized response
func (o *UserFindByUsernameUnauthorized) Code() int {
	return 401
}

func (o *UserFindByUsernameUnauthorized) Error() string {
	return fmt.Sprintf("[GET /user/username/{username}][%d] userFindByUsernameUnauthorized  %+v", 401, o.Payload)
}

func (o *UserFindByUsernameUnauthorized) String() string {
	return fmt.Sprintf("[GET /user/username/{username}][%d] userFindByUsernameUnauthorized  %+v", 401, o.Payload)
}

func (o *UserFindByUsernameUnauthorized) GetPayload() *models.Response {
	return o.Payload
}

func (o *UserFindByUsernameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserFindByUsernameInternalServerError creates a UserFindByUsernameInternalServerError with default headers values
func NewUserFindByUsernameInternalServerError() *UserFindByUsernameInternalServerError {
	return &UserFindByUsernameInternalServerError{}
}

/*
UserFindByUsernameInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UserFindByUsernameInternalServerError struct {
	Payload *models.Response
}

// IsSuccess returns true when this user find by username internal server error response has a 2xx status code
func (o *UserFindByUsernameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user find by username internal server error response has a 3xx status code
func (o *UserFindByUsernameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user find by username internal server error response has a 4xx status code
func (o *UserFindByUsernameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this user find by username internal server error response has a 5xx status code
func (o *UserFindByUsernameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this user find by username internal server error response a status code equal to that given
func (o *UserFindByUsernameInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the user find by username internal server error response
func (o *UserFindByUsernameInternalServerError) Code() int {
	return 500
}

func (o *UserFindByUsernameInternalServerError) Error() string {
	return fmt.Sprintf("[GET /user/username/{username}][%d] userFindByUsernameInternalServerError  %+v", 500, o.Payload)
}

func (o *UserFindByUsernameInternalServerError) String() string {
	return fmt.Sprintf("[GET /user/username/{username}][%d] userFindByUsernameInternalServerError  %+v", 500, o.Payload)
}

func (o *UserFindByUsernameInternalServerError) GetPayload() *models.Response {
	return o.Payload
}

func (o *UserFindByUsernameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
