// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cmsgov/easi-app/pkg/cedar/core/gen/models"
)

// UserNameUpdateReader is a Reader for the UserNameUpdate structure.
type UserNameUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserNameUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUserNameUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUserNameUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUserNameUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUserNameUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /user/username/{username}] userNameUpdate", response, response.Code())
	}
}

// NewUserNameUpdateOK creates a UserNameUpdateOK with default headers values
func NewUserNameUpdateOK() *UserNameUpdateOK {
	return &UserNameUpdateOK{}
}

/*
UserNameUpdateOK describes a response with status code 200, with default header values.

OK
*/
type UserNameUpdateOK struct {
	Payload *models.Response
}

// IsSuccess returns true when this user name update o k response has a 2xx status code
func (o *UserNameUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this user name update o k response has a 3xx status code
func (o *UserNameUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user name update o k response has a 4xx status code
func (o *UserNameUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this user name update o k response has a 5xx status code
func (o *UserNameUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this user name update o k response a status code equal to that given
func (o *UserNameUpdateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the user name update o k response
func (o *UserNameUpdateOK) Code() int {
	return 200
}

func (o *UserNameUpdateOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /user/username/{username}][%d] userNameUpdateOK %s", 200, payload)
}

func (o *UserNameUpdateOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /user/username/{username}][%d] userNameUpdateOK %s", 200, payload)
}

func (o *UserNameUpdateOK) GetPayload() *models.Response {
	return o.Payload
}

func (o *UserNameUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserNameUpdateBadRequest creates a UserNameUpdateBadRequest with default headers values
func NewUserNameUpdateBadRequest() *UserNameUpdateBadRequest {
	return &UserNameUpdateBadRequest{}
}

/*
UserNameUpdateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UserNameUpdateBadRequest struct {
	Payload *models.Response
}

// IsSuccess returns true when this user name update bad request response has a 2xx status code
func (o *UserNameUpdateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user name update bad request response has a 3xx status code
func (o *UserNameUpdateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user name update bad request response has a 4xx status code
func (o *UserNameUpdateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this user name update bad request response has a 5xx status code
func (o *UserNameUpdateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this user name update bad request response a status code equal to that given
func (o *UserNameUpdateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the user name update bad request response
func (o *UserNameUpdateBadRequest) Code() int {
	return 400
}

func (o *UserNameUpdateBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /user/username/{username}][%d] userNameUpdateBadRequest %s", 400, payload)
}

func (o *UserNameUpdateBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /user/username/{username}][%d] userNameUpdateBadRequest %s", 400, payload)
}

func (o *UserNameUpdateBadRequest) GetPayload() *models.Response {
	return o.Payload
}

func (o *UserNameUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserNameUpdateUnauthorized creates a UserNameUpdateUnauthorized with default headers values
func NewUserNameUpdateUnauthorized() *UserNameUpdateUnauthorized {
	return &UserNameUpdateUnauthorized{}
}

/*
UserNameUpdateUnauthorized describes a response with status code 401, with default header values.

Access Denied
*/
type UserNameUpdateUnauthorized struct {
	Payload *models.Response
}

// IsSuccess returns true when this user name update unauthorized response has a 2xx status code
func (o *UserNameUpdateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user name update unauthorized response has a 3xx status code
func (o *UserNameUpdateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user name update unauthorized response has a 4xx status code
func (o *UserNameUpdateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this user name update unauthorized response has a 5xx status code
func (o *UserNameUpdateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this user name update unauthorized response a status code equal to that given
func (o *UserNameUpdateUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the user name update unauthorized response
func (o *UserNameUpdateUnauthorized) Code() int {
	return 401
}

func (o *UserNameUpdateUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /user/username/{username}][%d] userNameUpdateUnauthorized %s", 401, payload)
}

func (o *UserNameUpdateUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /user/username/{username}][%d] userNameUpdateUnauthorized %s", 401, payload)
}

func (o *UserNameUpdateUnauthorized) GetPayload() *models.Response {
	return o.Payload
}

func (o *UserNameUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserNameUpdateInternalServerError creates a UserNameUpdateInternalServerError with default headers values
func NewUserNameUpdateInternalServerError() *UserNameUpdateInternalServerError {
	return &UserNameUpdateInternalServerError{}
}

/*
UserNameUpdateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UserNameUpdateInternalServerError struct {
	Payload *models.Response
}

// IsSuccess returns true when this user name update internal server error response has a 2xx status code
func (o *UserNameUpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user name update internal server error response has a 3xx status code
func (o *UserNameUpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user name update internal server error response has a 4xx status code
func (o *UserNameUpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this user name update internal server error response has a 5xx status code
func (o *UserNameUpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this user name update internal server error response a status code equal to that given
func (o *UserNameUpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the user name update internal server error response
func (o *UserNameUpdateInternalServerError) Code() int {
	return 500
}

func (o *UserNameUpdateInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /user/username/{username}][%d] userNameUpdateInternalServerError %s", 500, payload)
}

func (o *UserNameUpdateInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /user/username/{username}][%d] userNameUpdateInternalServerError %s", 500, payload)
}

func (o *UserNameUpdateInternalServerError) GetPayload() *models.Response {
	return o.Payload
}

func (o *UserNameUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
