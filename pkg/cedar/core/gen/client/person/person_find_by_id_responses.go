// Code generated by go-swagger; DO NOT EDIT.

package person

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cms-enterprise/easi-app/pkg/cedar/core/gen/models"
)

// PersonFindByIDReader is a Reader for the PersonFindByID structure.
type PersonFindByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PersonFindByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPersonFindByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPersonFindByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPersonFindByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPersonFindByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPersonFindByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /person/{id}] personFindById", response, response.Code())
	}
}

// NewPersonFindByIDOK creates a PersonFindByIDOK with default headers values
func NewPersonFindByIDOK() *PersonFindByIDOK {
	return &PersonFindByIDOK{}
}

/*
PersonFindByIDOK describes a response with status code 200, with default header values.

OK
*/
type PersonFindByIDOK struct {
	Payload *models.Person
}

// IsSuccess returns true when this person find by Id o k response has a 2xx status code
func (o *PersonFindByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this person find by Id o k response has a 3xx status code
func (o *PersonFindByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this person find by Id o k response has a 4xx status code
func (o *PersonFindByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this person find by Id o k response has a 5xx status code
func (o *PersonFindByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this person find by Id o k response a status code equal to that given
func (o *PersonFindByIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the person find by Id o k response
func (o *PersonFindByIDOK) Code() int {
	return 200
}

func (o *PersonFindByIDOK) Error() string {
	return fmt.Sprintf("[GET /person/{id}][%d] personFindByIdOK  %+v", 200, o.Payload)
}

func (o *PersonFindByIDOK) String() string {
	return fmt.Sprintf("[GET /person/{id}][%d] personFindByIdOK  %+v", 200, o.Payload)
}

func (o *PersonFindByIDOK) GetPayload() *models.Person {
	return o.Payload
}

func (o *PersonFindByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Person)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPersonFindByIDBadRequest creates a PersonFindByIDBadRequest with default headers values
func NewPersonFindByIDBadRequest() *PersonFindByIDBadRequest {
	return &PersonFindByIDBadRequest{}
}

/*
PersonFindByIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PersonFindByIDBadRequest struct {
	Payload *models.Response
}

// IsSuccess returns true when this person find by Id bad request response has a 2xx status code
func (o *PersonFindByIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this person find by Id bad request response has a 3xx status code
func (o *PersonFindByIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this person find by Id bad request response has a 4xx status code
func (o *PersonFindByIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this person find by Id bad request response has a 5xx status code
func (o *PersonFindByIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this person find by Id bad request response a status code equal to that given
func (o *PersonFindByIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the person find by Id bad request response
func (o *PersonFindByIDBadRequest) Code() int {
	return 400
}

func (o *PersonFindByIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /person/{id}][%d] personFindByIdBadRequest  %+v", 400, o.Payload)
}

func (o *PersonFindByIDBadRequest) String() string {
	return fmt.Sprintf("[GET /person/{id}][%d] personFindByIdBadRequest  %+v", 400, o.Payload)
}

func (o *PersonFindByIDBadRequest) GetPayload() *models.Response {
	return o.Payload
}

func (o *PersonFindByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPersonFindByIDUnauthorized creates a PersonFindByIDUnauthorized with default headers values
func NewPersonFindByIDUnauthorized() *PersonFindByIDUnauthorized {
	return &PersonFindByIDUnauthorized{}
}

/*
PersonFindByIDUnauthorized describes a response with status code 401, with default header values.

Access Denied
*/
type PersonFindByIDUnauthorized struct {
	Payload *models.Response
}

// IsSuccess returns true when this person find by Id unauthorized response has a 2xx status code
func (o *PersonFindByIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this person find by Id unauthorized response has a 3xx status code
func (o *PersonFindByIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this person find by Id unauthorized response has a 4xx status code
func (o *PersonFindByIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this person find by Id unauthorized response has a 5xx status code
func (o *PersonFindByIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this person find by Id unauthorized response a status code equal to that given
func (o *PersonFindByIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the person find by Id unauthorized response
func (o *PersonFindByIDUnauthorized) Code() int {
	return 401
}

func (o *PersonFindByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /person/{id}][%d] personFindByIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PersonFindByIDUnauthorized) String() string {
	return fmt.Sprintf("[GET /person/{id}][%d] personFindByIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PersonFindByIDUnauthorized) GetPayload() *models.Response {
	return o.Payload
}

func (o *PersonFindByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPersonFindByIDNotFound creates a PersonFindByIDNotFound with default headers values
func NewPersonFindByIDNotFound() *PersonFindByIDNotFound {
	return &PersonFindByIDNotFound{}
}

/*
PersonFindByIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PersonFindByIDNotFound struct {
	Payload *models.Response
}

// IsSuccess returns true when this person find by Id not found response has a 2xx status code
func (o *PersonFindByIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this person find by Id not found response has a 3xx status code
func (o *PersonFindByIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this person find by Id not found response has a 4xx status code
func (o *PersonFindByIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this person find by Id not found response has a 5xx status code
func (o *PersonFindByIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this person find by Id not found response a status code equal to that given
func (o *PersonFindByIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the person find by Id not found response
func (o *PersonFindByIDNotFound) Code() int {
	return 404
}

func (o *PersonFindByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /person/{id}][%d] personFindByIdNotFound  %+v", 404, o.Payload)
}

func (o *PersonFindByIDNotFound) String() string {
	return fmt.Sprintf("[GET /person/{id}][%d] personFindByIdNotFound  %+v", 404, o.Payload)
}

func (o *PersonFindByIDNotFound) GetPayload() *models.Response {
	return o.Payload
}

func (o *PersonFindByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPersonFindByIDInternalServerError creates a PersonFindByIDInternalServerError with default headers values
func NewPersonFindByIDInternalServerError() *PersonFindByIDInternalServerError {
	return &PersonFindByIDInternalServerError{}
}

/*
PersonFindByIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PersonFindByIDInternalServerError struct {
	Payload *models.Response
}

// IsSuccess returns true when this person find by Id internal server error response has a 2xx status code
func (o *PersonFindByIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this person find by Id internal server error response has a 3xx status code
func (o *PersonFindByIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this person find by Id internal server error response has a 4xx status code
func (o *PersonFindByIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this person find by Id internal server error response has a 5xx status code
func (o *PersonFindByIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this person find by Id internal server error response a status code equal to that given
func (o *PersonFindByIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the person find by Id internal server error response
func (o *PersonFindByIDInternalServerError) Code() int {
	return 500
}

func (o *PersonFindByIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /person/{id}][%d] personFindByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PersonFindByIDInternalServerError) String() string {
	return fmt.Sprintf("[GET /person/{id}][%d] personFindByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PersonFindByIDInternalServerError) GetPayload() *models.Response {
	return o.Payload
}

func (o *PersonFindByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
