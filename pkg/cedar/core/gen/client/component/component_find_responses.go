// Code generated by go-swagger; DO NOT EDIT.

package component

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cmsgov/easi-app/pkg/cedar/core/gen/models"
)

// ComponentFindReader is a Reader for the ComponentFind structure.
type ComponentFindReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ComponentFindReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewComponentFindOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewComponentFindBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewComponentFindUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewComponentFindInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /component] componentFind", response, response.Code())
	}
}

// NewComponentFindOK creates a ComponentFindOK with default headers values
func NewComponentFindOK() *ComponentFindOK {
	return &ComponentFindOK{}
}

/*
ComponentFindOK describes a response with status code 200, with default header values.

OK
*/
type ComponentFindOK struct {
	Payload *models.ComponentFindResponse
}

// IsSuccess returns true when this component find o k response has a 2xx status code
func (o *ComponentFindOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this component find o k response has a 3xx status code
func (o *ComponentFindOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this component find o k response has a 4xx status code
func (o *ComponentFindOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this component find o k response has a 5xx status code
func (o *ComponentFindOK) IsServerError() bool {
	return false
}

// IsCode returns true when this component find o k response a status code equal to that given
func (o *ComponentFindOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the component find o k response
func (o *ComponentFindOK) Code() int {
	return 200
}

func (o *ComponentFindOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /component][%d] componentFindOK %s", 200, payload)
}

func (o *ComponentFindOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /component][%d] componentFindOK %s", 200, payload)
}

func (o *ComponentFindOK) GetPayload() *models.ComponentFindResponse {
	return o.Payload
}

func (o *ComponentFindOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ComponentFindResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewComponentFindBadRequest creates a ComponentFindBadRequest with default headers values
func NewComponentFindBadRequest() *ComponentFindBadRequest {
	return &ComponentFindBadRequest{}
}

/*
ComponentFindBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ComponentFindBadRequest struct {
	Payload *models.Response
}

// IsSuccess returns true when this component find bad request response has a 2xx status code
func (o *ComponentFindBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this component find bad request response has a 3xx status code
func (o *ComponentFindBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this component find bad request response has a 4xx status code
func (o *ComponentFindBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this component find bad request response has a 5xx status code
func (o *ComponentFindBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this component find bad request response a status code equal to that given
func (o *ComponentFindBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the component find bad request response
func (o *ComponentFindBadRequest) Code() int {
	return 400
}

func (o *ComponentFindBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /component][%d] componentFindBadRequest %s", 400, payload)
}

func (o *ComponentFindBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /component][%d] componentFindBadRequest %s", 400, payload)
}

func (o *ComponentFindBadRequest) GetPayload() *models.Response {
	return o.Payload
}

func (o *ComponentFindBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewComponentFindUnauthorized creates a ComponentFindUnauthorized with default headers values
func NewComponentFindUnauthorized() *ComponentFindUnauthorized {
	return &ComponentFindUnauthorized{}
}

/*
ComponentFindUnauthorized describes a response with status code 401, with default header values.

Access Denied
*/
type ComponentFindUnauthorized struct {
	Payload *models.Response
}

// IsSuccess returns true when this component find unauthorized response has a 2xx status code
func (o *ComponentFindUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this component find unauthorized response has a 3xx status code
func (o *ComponentFindUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this component find unauthorized response has a 4xx status code
func (o *ComponentFindUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this component find unauthorized response has a 5xx status code
func (o *ComponentFindUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this component find unauthorized response a status code equal to that given
func (o *ComponentFindUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the component find unauthorized response
func (o *ComponentFindUnauthorized) Code() int {
	return 401
}

func (o *ComponentFindUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /component][%d] componentFindUnauthorized %s", 401, payload)
}

func (o *ComponentFindUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /component][%d] componentFindUnauthorized %s", 401, payload)
}

func (o *ComponentFindUnauthorized) GetPayload() *models.Response {
	return o.Payload
}

func (o *ComponentFindUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewComponentFindInternalServerError creates a ComponentFindInternalServerError with default headers values
func NewComponentFindInternalServerError() *ComponentFindInternalServerError {
	return &ComponentFindInternalServerError{}
}

/*
ComponentFindInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ComponentFindInternalServerError struct {
	Payload *models.Response
}

// IsSuccess returns true when this component find internal server error response has a 2xx status code
func (o *ComponentFindInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this component find internal server error response has a 3xx status code
func (o *ComponentFindInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this component find internal server error response has a 4xx status code
func (o *ComponentFindInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this component find internal server error response has a 5xx status code
func (o *ComponentFindInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this component find internal server error response a status code equal to that given
func (o *ComponentFindInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the component find internal server error response
func (o *ComponentFindInternalServerError) Code() int {
	return 500
}

func (o *ComponentFindInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /component][%d] componentFindInternalServerError %s", 500, payload)
}

func (o *ComponentFindInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /component][%d] componentFindInternalServerError %s", 500, payload)
}

func (o *ComponentFindInternalServerError) GetPayload() *models.Response {
	return o.Payload
}

func (o *ComponentFindInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
