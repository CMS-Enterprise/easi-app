// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new admin API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for admin API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AdminReviewerAddList(params *AdminReviewerAddListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminReviewerAddListOK, *AdminReviewerAddListMultiStatus, error)

	AdminReviewerDeleteList(params *AdminReviewerDeleteListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminReviewerDeleteListOK, *AdminReviewerDeleteListMultiStatus, error)

	AdminReviewerFindList(params *AdminReviewerFindListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminReviewerFindListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AdminReviewerAddList adds a list of potential reviewers

  Reviewers are CMS employees responsible for verifying the accuracy and completeness of the System Census Survey data each year. There are two types of reviewers, QA and DA. Additional reviewers may be added via this endpoint. 'id' is ignored for POSTs. 'userName' and 'fullName' are required.
*/
func (a *Client) AdminReviewerAddList(params *AdminReviewerAddListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminReviewerAddListOK, *AdminReviewerAddListMultiStatus, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminReviewerAddListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminReviewerAddList",
		Method:             "POST",
		PathPattern:        "/admin/reviewer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminReviewerAddListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AdminReviewerAddListOK:
		return value, nil, nil
	case *AdminReviewerAddListMultiStatus:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for admin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AdminReviewerDeleteList deletes a list of potential reviewers

  Reviewers are CMS employees responsible for verifying the accuracy and completeness of the System Census Survey data each year. There are two types of reviewers, QA and DA. One or more reviewers may be deleted via this endpoint. Either 'id' or 'userName' must be required. All else is ignored.
*/
func (a *Client) AdminReviewerDeleteList(params *AdminReviewerDeleteListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminReviewerDeleteListOK, *AdminReviewerDeleteListMultiStatus, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminReviewerDeleteListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminReviewerDeleteList",
		Method:             "DELETE",
		PathPattern:        "/admin/reviewer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminReviewerDeleteListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AdminReviewerDeleteListOK:
		return value, nil, nil
	case *AdminReviewerDeleteListMultiStatus:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for admin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AdminReviewerFindList retrieves a list of potential reviewers

  Reviewers are CMS employees responsible for verifying the accuracy and completeness of the System Census Survey data each year. There are two types of reviewers, QA and DA. The list of potential reviewers is returned by this endpoint and can be filtered by 'type'
*/
func (a *Client) AdminReviewerFindList(params *AdminReviewerFindListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminReviewerFindListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminReviewerFindListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminReviewerFindList",
		Method:             "GET",
		PathPattern:        "/admin/reviewer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminReviewerFindListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminReviewerFindListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for adminReviewerFindList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
