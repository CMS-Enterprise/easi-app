// Code generated by go-swagger; DO NOT EDIT.

package page

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new page API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for page API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PageBudgetAndContractsAdd(params *PageBudgetAndContractsAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageBudgetAndContractsAddOK, error)

	PageBudgetAndContractsFind(params *PageBudgetAndContractsFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageBudgetAndContractsFindOK, error)

	PageBusinessOwnerAdd(params *PageBusinessOwnerAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageBusinessOwnerAddOK, error)

	PageBusinessOwnerFind(params *PageBusinessOwnerFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageBusinessOwnerFindOK, error)

	PageDataCenterAdd(params *PageDataCenterAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageDataCenterAddOK, error)

	PageDataCentersFind(params *PageDataCentersFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageDataCentersFindOK, error)

	PageDataExchangeAdd(params *PageDataExchangeAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageDataExchangeAddOK, error)

	PageDataExchangeFind(params *PageDataExchangeFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageDataExchangeFindOK, error)

	PageDataExchangeNotesAdd(params *PageDataExchangeNotesAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageDataExchangeNotesAddOK, error)

	PageDataExchangeNotesDelete(params *PageDataExchangeNotesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageDataExchangeNotesDeleteOK, error)

	PageDataExchangeNotesFind(params *PageDataExchangeNotesFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageDataExchangeNotesFindOK, error)

	PageDataExchangeStatusAdd(params *PageDataExchangeStatusAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageDataExchangeStatusAddOK, error)

	PageDataExchangeStatusDelete(params *PageDataExchangeStatusDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageDataExchangeStatusDeleteOK, error)

	PageDataExchangeStatusFind(params *PageDataExchangeStatusFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageDataExchangeStatusFindOK, error)

	PageSoftwareProductsAdd(params *PageSoftwareProductsAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageSoftwareProductsAddOK, error)

	PageSoftwareProductsFind(params *PageSoftwareProductsFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageSoftwareProductsFindOK, error)

	PageSystemComponentsAdd(params *PageSystemComponentsAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageSystemComponentsAddOK, error)

	PageSystemComponentsFind(params *PageSystemComponentsFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageSystemComponentsFindOK, error)

	PageSystemLifecycleAdd(params *PageSystemLifecycleAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageSystemLifecycleAddOK, error)

	PageSystemLifecycleDelete(params *PageSystemLifecycleDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageSystemLifecycleDeleteOK, error)

	PageSystemLifecycleFind(params *PageSystemLifecycleFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageSystemLifecycleFindOK, error)

	PageSystemMaintainerAdd(params *PageSystemMaintainerAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageSystemMaintainerAddOK, error)

	PageSystemMaintainerFind(params *PageSystemMaintainerFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageSystemMaintainerFindOK, error)

	PageSystemsListFind(params *PageSystemsListFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageSystemsListFindOK, error)

	PageUrlsAdd(params *PageUrlsAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageUrlsAddOK, error)

	PageUrlsFind(params *PageUrlsFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageUrlsFindOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  PageBudgetAndContractsAdd adds or update budget and contracts data

  Add  (or update) budget and contracts information for a system.
*/
func (a *Client) PageBudgetAndContractsAdd(params *PageBudgetAndContractsAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageBudgetAndContractsAddOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageBudgetAndContractsAddParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageBudgetAndContractsAdd",
		Method:             "POST",
		PathPattern:        "/page/budgetAndContracts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageBudgetAndContractsAddReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageBudgetAndContractsAddOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageBudgetAndContractsAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageBudgetAndContractsFind retrieves budget and contracts data

  Retrieve budget and contracts information by system ID.
*/
func (a *Client) PageBudgetAndContractsFind(params *PageBudgetAndContractsFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageBudgetAndContractsFindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageBudgetAndContractsFindParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageBudgetAndContractsFind",
		Method:             "GET",
		PathPattern:        "/page/budgetAndContracts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageBudgetAndContractsFindReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageBudgetAndContractsFindOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageBudgetAndContractsFind: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageBusinessOwnerAdd adds or update business owner basic information data

  Add  (or update) business owner basic information data for a system. If an update, ID is required.
*/
func (a *Client) PageBusinessOwnerAdd(params *PageBusinessOwnerAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageBusinessOwnerAddOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageBusinessOwnerAddParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageBusinessOwnerAdd",
		Method:             "POST",
		PathPattern:        "/page/businessOwner",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageBusinessOwnerAddReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageBusinessOwnerAddOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageBusinessOwnerAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageBusinessOwnerFind retrieves business owner basic information data

  Retrieve business owner basic information by system ID.
*/
func (a *Client) PageBusinessOwnerFind(params *PageBusinessOwnerFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageBusinessOwnerFindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageBusinessOwnerFindParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageBusinessOwnerFind",
		Method:             "GET",
		PathPattern:        "/page/businessOwner",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageBusinessOwnerFindReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageBusinessOwnerFindOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageBusinessOwnerFind: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageDataCenterAdd adds or update data center deployment information

  Add (or update) the deployment information including the data center or cloud service provider. If an update, Deployment ID and Deployment Element ID are required.
*/
func (a *Client) PageDataCenterAdd(params *PageDataCenterAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageDataCenterAddOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageDataCenterAddParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageDataCenterAdd",
		Method:             "POST",
		PathPattern:        "/page/dataCenters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageDataCenterAddReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageDataCenterAddOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageDataCenterAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageDataCentersFind retrieves data center deployment information

  Retrieves the deployment information  including the data center or cloud service provider information, for given System ID
*/
func (a *Client) PageDataCentersFind(params *PageDataCentersFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageDataCentersFindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageDataCentersFindParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageDataCentersFind",
		Method:             "GET",
		PathPattern:        "/page/dataCenters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageDataCentersFindReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageDataCentersFindOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageDataCentersFind: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageDataExchangeAdd adds or update data exchange information

  Add  (or update) data exchange information for a system. A data exchange can be between two CMS IT systems or between a CMS system and a non-CMS stakeholder such as the Social Security Administration. For updates, exchangeId is required.
*/
func (a *Client) PageDataExchangeAdd(params *PageDataExchangeAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageDataExchangeAddOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageDataExchangeAddParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageDataExchangeAdd",
		Method:             "POST",
		PathPattern:        "/page/dataExchange",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageDataExchangeAddReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageDataExchangeAddOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageDataExchangeAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageDataExchangeFind retrieves data exchange information

  Retrieves data exchange information by system ID. A data exchange can be between two CMS IT systems or between a CMS system and a non-CMS stakeholder such as the Social Security Administration.
*/
func (a *Client) PageDataExchangeFind(params *PageDataExchangeFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageDataExchangeFindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageDataExchangeFindParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageDataExchangeFind",
		Method:             "GET",
		PathPattern:        "/page/dataExchange",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageDataExchangeFindReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageDataExchangeFindOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageDataExchangeFind: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageDataExchangeNotesAdd adds data exchange notes

  Add data exchange notes
*/
func (a *Client) PageDataExchangeNotesAdd(params *PageDataExchangeNotesAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageDataExchangeNotesAddOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageDataExchangeNotesAddParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageDataExchangeNotesAdd",
		Method:             "POST",
		PathPattern:        "/page/dataExchange/notes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageDataExchangeNotesAddReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageDataExchangeNotesAddOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageDataExchangeNotesAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageDataExchangeNotesDelete deletes a list of data exchange notes

  Delete a list of data exchange notes based on the exchange IDs
*/
func (a *Client) PageDataExchangeNotesDelete(params *PageDataExchangeNotesDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageDataExchangeNotesDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageDataExchangeNotesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageDataExchangeNotesDelete",
		Method:             "DELETE",
		PathPattern:        "/page/dataExchange/notes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageDataExchangeNotesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageDataExchangeNotesDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageDataExchangeNotesDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageDataExchangeNotesFind retrieves data exchange notes

  Retrieve data exchange notes by exchange ID
*/
func (a *Client) PageDataExchangeNotesFind(params *PageDataExchangeNotesFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageDataExchangeNotesFindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageDataExchangeNotesFindParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageDataExchangeNotesFind",
		Method:             "GET",
		PathPattern:        "/page/dataExchange/notes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageDataExchangeNotesFindReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageDataExchangeNotesFindOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageDataExchangeNotesFind: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageDataExchangeStatusAdd adds or update a list of data exhange status

  Add (or update) a list of data exchange status for a given system
*/
func (a *Client) PageDataExchangeStatusAdd(params *PageDataExchangeStatusAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageDataExchangeStatusAddOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageDataExchangeStatusAddParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageDataExchangeStatusAdd",
		Method:             "POST",
		PathPattern:        "/page/dataExchange/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageDataExchangeStatusAddReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageDataExchangeStatusAddOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageDataExchangeStatusAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageDataExchangeStatusDelete deletes a list of data exchange status

  Delete a list of data exchange status based on the exchange IDs
*/
func (a *Client) PageDataExchangeStatusDelete(params *PageDataExchangeStatusDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageDataExchangeStatusDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageDataExchangeStatusDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageDataExchangeStatusDelete",
		Method:             "DELETE",
		PathPattern:        "/page/dataExchange/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageDataExchangeStatusDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageDataExchangeStatusDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageDataExchangeStatusDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageDataExchangeStatusFind retrieves a list of data exhange status

  Retrieve a list of data exchange status based on query criteria
*/
func (a *Client) PageDataExchangeStatusFind(params *PageDataExchangeStatusFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageDataExchangeStatusFindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageDataExchangeStatusFindParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageDataExchangeStatusFind",
		Method:             "GET",
		PathPattern:        "/page/dataExchange/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageDataExchangeStatusFindReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageDataExchangeStatusFindOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageDataExchangeStatusFind: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageSoftwareProductsAdd adds a software product that is used by the system

  Add the software product and version details that is used by the system. Software produt can be operating sytems, database, middleware etc. that are needed to perform business function
*/
func (a *Client) PageSoftwareProductsAdd(params *PageSoftwareProductsAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageSoftwareProductsAddOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageSoftwareProductsAddParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageSoftwareProductsAdd",
		Method:             "POST",
		PathPattern:        "/page/softwareProducts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageSoftwareProductsAddReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageSoftwareProductsAddOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageSoftwareProductsAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageSoftwareProductsFind retrieves the software products

  Retrieves the list of software products such as operating sytems, database, middleware etc. and versions that are used by the system to perform business functions
*/
func (a *Client) PageSoftwareProductsFind(params *PageSoftwareProductsFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageSoftwareProductsFindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageSoftwareProductsFindParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageSoftwareProductsFind",
		Method:             "GET",
		PathPattern:        "/page/softwareProducts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageSoftwareProductsFindReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageSoftwareProductsFindOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageSoftwareProductsFind: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageSystemComponentsAdd adds update or delete system components

  Add, update or delete any of the sub-systems or components information of the system
*/
func (a *Client) PageSystemComponentsAdd(params *PageSystemComponentsAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageSystemComponentsAddOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageSystemComponentsAddParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageSystemComponentsAdd",
		Method:             "POST",
		PathPattern:        "/page/systemComponents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageSystemComponentsAddReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageSystemComponentsAddOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageSystemComponentsAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageSystemComponentsFind retrieves the sub systems or components information of the system

  Retrieves the information for list of sub-systems or components that make up the overall system
*/
func (a *Client) PageSystemComponentsFind(params *PageSystemComponentsFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageSystemComponentsFindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageSystemComponentsFindParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageSystemComponentsFind",
		Method:             "GET",
		PathPattern:        "/page/systemComponents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageSystemComponentsFindReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageSystemComponentsFindOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageSystemComponentsFind: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageSystemLifecycleAdd adds system lifecycle information for a system

  Add system lifecycle information such as development methodology, requirements management, state of development and deployment etc.
*/
func (a *Client) PageSystemLifecycleAdd(params *PageSystemLifecycleAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageSystemLifecycleAddOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageSystemLifecycleAddParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageSystemLifecycleAdd",
		Method:             "POST",
		PathPattern:        "/page/systemLifecycle",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageSystemLifecycleAddReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageSystemLifecycleAddOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageSystemLifecycleAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageSystemLifecycleDelete deletes the enterprise release and release item records

  Delete the Enterprise Release and Release Item records
*/
func (a *Client) PageSystemLifecycleDelete(params *PageSystemLifecycleDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageSystemLifecycleDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageSystemLifecycleDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageSystemLifecycleDelete",
		Method:             "DELETE",
		PathPattern:        "/page/systemLifecycle",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageSystemLifecycleDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageSystemLifecycleDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageSystemLifecycleDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageSystemLifecycleFind retrieves the system lifecycle

  Retrieve the system lifecycle information such as development methodology, requirements management, state of development and deployment etc.
*/
func (a *Client) PageSystemLifecycleFind(params *PageSystemLifecycleFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageSystemLifecycleFindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageSystemLifecycleFindParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageSystemLifecycleFind",
		Method:             "GET",
		PathPattern:        "/page/systemLifecycle",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageSystemLifecycleFindReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageSystemLifecycleFindOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageSystemLifecycleFind: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageSystemMaintainerAdd adds data from a given page

  Add data from a given page
*/
func (a *Client) PageSystemMaintainerAdd(params *PageSystemMaintainerAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageSystemMaintainerAddOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageSystemMaintainerAddParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageSystemMaintainerAdd",
		Method:             "POST",
		PathPattern:        "/page/systemMaintainer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageSystemMaintainerAddReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageSystemMaintainerAddOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageSystemMaintainerAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageSystemMaintainerFind retrieves the system maintainer

  Retrieve the system maintainer based on query criteria
*/
func (a *Client) PageSystemMaintainerFind(params *PageSystemMaintainerFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageSystemMaintainerFindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageSystemMaintainerFindParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageSystemMaintainerFind",
		Method:             "GET",
		PathPattern:        "/page/systemMaintainer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageSystemMaintainerFindReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageSystemMaintainerFindOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageSystemMaintainerFind: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageSystemsListFind retrieves the systems list

  Retreives the list of Systems that were collected as part of System Census till to date. It contains high-level information for each of the System including the point of contacts
*/
func (a *Client) PageSystemsListFind(params *PageSystemsListFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageSystemsListFindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageSystemsListFindParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageSystemsListFind",
		Method:             "GET",
		PathPattern:        "/page/systemsList",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageSystemsListFindReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageSystemsListFindOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageSystemsListFind: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageUrlsAdd adds update or delete urls

  Allows to update or delete the URLs from the existing list of URLs that are used to access the system
*/
func (a *Client) PageUrlsAdd(params *PageUrlsAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageUrlsAddOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageUrlsAddParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageUrlsAdd",
		Method:             "POST",
		PathPattern:        "/page/Urls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageUrlsAddReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageUrlsAddOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageUrlsAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PageUrlsFind retrieves Url information

  Retrieve the URLs that are used to access the system, for a given System ID
*/
func (a *Client) PageUrlsFind(params *PageUrlsFindParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PageUrlsFindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPageUrlsFindParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pageUrlsFind",
		Method:             "GET",
		PathPattern:        "/page/Urls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PageUrlsFindReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PageUrlsFindOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pageUrlsFind: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
