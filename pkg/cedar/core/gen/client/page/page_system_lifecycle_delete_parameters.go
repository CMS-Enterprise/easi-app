// Code generated by go-swagger; DO NOT EDIT.

package page

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPageSystemLifecycleDeleteParams creates a new PageSystemLifecycleDeleteParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPageSystemLifecycleDeleteParams() *PageSystemLifecycleDeleteParams {
	return &PageSystemLifecycleDeleteParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPageSystemLifecycleDeleteParamsWithTimeout creates a new PageSystemLifecycleDeleteParams object
// with the ability to set a timeout on a request.
func NewPageSystemLifecycleDeleteParamsWithTimeout(timeout time.Duration) *PageSystemLifecycleDeleteParams {
	return &PageSystemLifecycleDeleteParams{
		timeout: timeout,
	}
}

// NewPageSystemLifecycleDeleteParamsWithContext creates a new PageSystemLifecycleDeleteParams object
// with the ability to set a context for a request.
func NewPageSystemLifecycleDeleteParamsWithContext(ctx context.Context) *PageSystemLifecycleDeleteParams {
	return &PageSystemLifecycleDeleteParams{
		Context: ctx,
	}
}

// NewPageSystemLifecycleDeleteParamsWithHTTPClient creates a new PageSystemLifecycleDeleteParams object
// with the ability to set a custom HTTPClient for a request.
func NewPageSystemLifecycleDeleteParamsWithHTTPClient(client *http.Client) *PageSystemLifecycleDeleteParams {
	return &PageSystemLifecycleDeleteParams{
		HTTPClient: client,
	}
}

/* PageSystemLifecycleDeleteParams contains all the parameters to send to the API endpoint
   for the page system lifecycle delete operation.

   Typically these are written to a http.Request.
*/
type PageSystemLifecycleDeleteParams struct {

	/* EnterpriseReleaseRefstr.

	   EnterpriseRelease RefStr
	*/
	EnterpriseReleaseRefstr string

	/* ID.

	   Application RefStr
	*/
	ID string

	/* Version.

	   EnterpriseRelease version
	*/
	Version string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the page system lifecycle delete params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PageSystemLifecycleDeleteParams) WithDefaults() *PageSystemLifecycleDeleteParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the page system lifecycle delete params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PageSystemLifecycleDeleteParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the page system lifecycle delete params
func (o *PageSystemLifecycleDeleteParams) WithTimeout(timeout time.Duration) *PageSystemLifecycleDeleteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the page system lifecycle delete params
func (o *PageSystemLifecycleDeleteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the page system lifecycle delete params
func (o *PageSystemLifecycleDeleteParams) WithContext(ctx context.Context) *PageSystemLifecycleDeleteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the page system lifecycle delete params
func (o *PageSystemLifecycleDeleteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the page system lifecycle delete params
func (o *PageSystemLifecycleDeleteParams) WithHTTPClient(client *http.Client) *PageSystemLifecycleDeleteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the page system lifecycle delete params
func (o *PageSystemLifecycleDeleteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnterpriseReleaseRefstr adds the enterpriseReleaseRefstr to the page system lifecycle delete params
func (o *PageSystemLifecycleDeleteParams) WithEnterpriseReleaseRefstr(enterpriseReleaseRefstr string) *PageSystemLifecycleDeleteParams {
	o.SetEnterpriseReleaseRefstr(enterpriseReleaseRefstr)
	return o
}

// SetEnterpriseReleaseRefstr adds the enterpriseReleaseRefstr to the page system lifecycle delete params
func (o *PageSystemLifecycleDeleteParams) SetEnterpriseReleaseRefstr(enterpriseReleaseRefstr string) {
	o.EnterpriseReleaseRefstr = enterpriseReleaseRefstr
}

// WithID adds the id to the page system lifecycle delete params
func (o *PageSystemLifecycleDeleteParams) WithID(id string) *PageSystemLifecycleDeleteParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the page system lifecycle delete params
func (o *PageSystemLifecycleDeleteParams) SetID(id string) {
	o.ID = id
}

// WithVersion adds the version to the page system lifecycle delete params
func (o *PageSystemLifecycleDeleteParams) WithVersion(version string) *PageSystemLifecycleDeleteParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the page system lifecycle delete params
func (o *PageSystemLifecycleDeleteParams) SetVersion(version string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *PageSystemLifecycleDeleteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param enterpriseReleaseRefstr
	qrEnterpriseReleaseRefstr := o.EnterpriseReleaseRefstr
	qEnterpriseReleaseRefstr := qrEnterpriseReleaseRefstr
	if qEnterpriseReleaseRefstr != "" {

		if err := r.SetQueryParam("enterpriseReleaseRefstr", qEnterpriseReleaseRefstr); err != nil {
			return err
		}
	}

	// query param id
	qrID := o.ID
	qID := qrID
	if qID != "" {

		if err := r.SetQueryParam("id", qID); err != nil {
			return err
		}
	}

	// query param version
	qrVersion := o.Version
	qVersion := qrVersion
	if qVersion != "" {

		if err := r.SetQueryParam("version", qVersion); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
