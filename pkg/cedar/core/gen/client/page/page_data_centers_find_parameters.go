// Code generated by go-swagger; DO NOT EDIT.

package page

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPageDataCentersFindParams creates a new PageDataCentersFindParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPageDataCentersFindParams() *PageDataCentersFindParams {
	return &PageDataCentersFindParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPageDataCentersFindParamsWithTimeout creates a new PageDataCentersFindParams object
// with the ability to set a timeout on a request.
func NewPageDataCentersFindParamsWithTimeout(timeout time.Duration) *PageDataCentersFindParams {
	return &PageDataCentersFindParams{
		timeout: timeout,
	}
}

// NewPageDataCentersFindParamsWithContext creates a new PageDataCentersFindParams object
// with the ability to set a context for a request.
func NewPageDataCentersFindParamsWithContext(ctx context.Context) *PageDataCentersFindParams {
	return &PageDataCentersFindParams{
		Context: ctx,
	}
}

// NewPageDataCentersFindParamsWithHTTPClient creates a new PageDataCentersFindParams object
// with the ability to set a custom HTTPClient for a request.
func NewPageDataCentersFindParamsWithHTTPClient(client *http.Client) *PageDataCentersFindParams {
	return &PageDataCentersFindParams{
		HTTPClient: client,
	}
}

/* PageDataCentersFindParams contains all the parameters to send to the API endpoint
   for the page data centers find operation.

   Typically these are written to a http.Request.
*/
type PageDataCentersFindParams struct {

	/* State.

	   Deployment state
	*/
	State string

	/* Status.

	   Deployment status
	*/
	Status string

	/* SystemID.

	   ID of the system that the deployment(s) is associated with
	*/
	SystemID string

	/* Type.

	   Deployment type
	*/
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the page data centers find params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PageDataCentersFindParams) WithDefaults() *PageDataCentersFindParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the page data centers find params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PageDataCentersFindParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the page data centers find params
func (o *PageDataCentersFindParams) WithTimeout(timeout time.Duration) *PageDataCentersFindParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the page data centers find params
func (o *PageDataCentersFindParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the page data centers find params
func (o *PageDataCentersFindParams) WithContext(ctx context.Context) *PageDataCentersFindParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the page data centers find params
func (o *PageDataCentersFindParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the page data centers find params
func (o *PageDataCentersFindParams) WithHTTPClient(client *http.Client) *PageDataCentersFindParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the page data centers find params
func (o *PageDataCentersFindParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithState adds the state to the page data centers find params
func (o *PageDataCentersFindParams) WithState(state string) *PageDataCentersFindParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the page data centers find params
func (o *PageDataCentersFindParams) SetState(state string) {
	o.State = state
}

// WithStatus adds the status to the page data centers find params
func (o *PageDataCentersFindParams) WithStatus(status string) *PageDataCentersFindParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the page data centers find params
func (o *PageDataCentersFindParams) SetStatus(status string) {
	o.Status = status
}

// WithSystemID adds the systemID to the page data centers find params
func (o *PageDataCentersFindParams) WithSystemID(systemID string) *PageDataCentersFindParams {
	o.SetSystemID(systemID)
	return o
}

// SetSystemID adds the systemId to the page data centers find params
func (o *PageDataCentersFindParams) SetSystemID(systemID string) {
	o.SystemID = systemID
}

// WithType adds the typeVar to the page data centers find params
func (o *PageDataCentersFindParams) WithType(typeVar string) *PageDataCentersFindParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the page data centers find params
func (o *PageDataCentersFindParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *PageDataCentersFindParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param state
	qrState := o.State
	qState := qrState
	if qState != "" {

		if err := r.SetQueryParam("state", qState); err != nil {
			return err
		}
	}

	// query param status
	qrStatus := o.Status
	qStatus := qrStatus
	if qStatus != "" {

		if err := r.SetQueryParam("status", qStatus); err != nil {
			return err
		}
	}

	// query param systemId
	qrSystemID := o.SystemID
	qSystemID := qrSystemID
	if qSystemID != "" {

		if err := r.SetQueryParam("systemId", qSystemID); err != nil {
			return err
		}
	}

	// query param type
	qrType := o.Type
	qType := qrType
	if qType != "" {

		if err := r.SetQueryParam("type", qType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
