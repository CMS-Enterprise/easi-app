// Code generated by go-swagger; DO NOT EDIT.

package cost_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cmsgov/easi-app/pkg/cedar/core/gen/models"
)

// CostTypeFindListReader is a Reader for the CostTypeFindList structure.
type CostTypeFindListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CostTypeFindListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCostTypeFindListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCostTypeFindListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCostTypeFindListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCostTypeFindListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /costType] costTypeFindList", response, response.Code())
	}
}

// NewCostTypeFindListOK creates a CostTypeFindListOK with default headers values
func NewCostTypeFindListOK() *CostTypeFindListOK {
	return &CostTypeFindListOK{}
}

/*
CostTypeFindListOK describes a response with status code 200, with default header values.

OK
*/
type CostTypeFindListOK struct {
	Payload *models.CostTypeFindResponse
}

// IsSuccess returns true when this cost type find list o k response has a 2xx status code
func (o *CostTypeFindListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cost type find list o k response has a 3xx status code
func (o *CostTypeFindListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cost type find list o k response has a 4xx status code
func (o *CostTypeFindListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cost type find list o k response has a 5xx status code
func (o *CostTypeFindListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cost type find list o k response a status code equal to that given
func (o *CostTypeFindListOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the cost type find list o k response
func (o *CostTypeFindListOK) Code() int {
	return 200
}

func (o *CostTypeFindListOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /costType][%d] costTypeFindListOK %s", 200, payload)
}

func (o *CostTypeFindListOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /costType][%d] costTypeFindListOK %s", 200, payload)
}

func (o *CostTypeFindListOK) GetPayload() *models.CostTypeFindResponse {
	return o.Payload
}

func (o *CostTypeFindListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CostTypeFindResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCostTypeFindListBadRequest creates a CostTypeFindListBadRequest with default headers values
func NewCostTypeFindListBadRequest() *CostTypeFindListBadRequest {
	return &CostTypeFindListBadRequest{}
}

/*
CostTypeFindListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CostTypeFindListBadRequest struct {
	Payload *models.Response
}

// IsSuccess returns true when this cost type find list bad request response has a 2xx status code
func (o *CostTypeFindListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cost type find list bad request response has a 3xx status code
func (o *CostTypeFindListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cost type find list bad request response has a 4xx status code
func (o *CostTypeFindListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cost type find list bad request response has a 5xx status code
func (o *CostTypeFindListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cost type find list bad request response a status code equal to that given
func (o *CostTypeFindListBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the cost type find list bad request response
func (o *CostTypeFindListBadRequest) Code() int {
	return 400
}

func (o *CostTypeFindListBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /costType][%d] costTypeFindListBadRequest %s", 400, payload)
}

func (o *CostTypeFindListBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /costType][%d] costTypeFindListBadRequest %s", 400, payload)
}

func (o *CostTypeFindListBadRequest) GetPayload() *models.Response {
	return o.Payload
}

func (o *CostTypeFindListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCostTypeFindListUnauthorized creates a CostTypeFindListUnauthorized with default headers values
func NewCostTypeFindListUnauthorized() *CostTypeFindListUnauthorized {
	return &CostTypeFindListUnauthorized{}
}

/*
CostTypeFindListUnauthorized describes a response with status code 401, with default header values.

Access Denied
*/
type CostTypeFindListUnauthorized struct {
	Payload *models.Response
}

// IsSuccess returns true when this cost type find list unauthorized response has a 2xx status code
func (o *CostTypeFindListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cost type find list unauthorized response has a 3xx status code
func (o *CostTypeFindListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cost type find list unauthorized response has a 4xx status code
func (o *CostTypeFindListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this cost type find list unauthorized response has a 5xx status code
func (o *CostTypeFindListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this cost type find list unauthorized response a status code equal to that given
func (o *CostTypeFindListUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the cost type find list unauthorized response
func (o *CostTypeFindListUnauthorized) Code() int {
	return 401
}

func (o *CostTypeFindListUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /costType][%d] costTypeFindListUnauthorized %s", 401, payload)
}

func (o *CostTypeFindListUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /costType][%d] costTypeFindListUnauthorized %s", 401, payload)
}

func (o *CostTypeFindListUnauthorized) GetPayload() *models.Response {
	return o.Payload
}

func (o *CostTypeFindListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCostTypeFindListInternalServerError creates a CostTypeFindListInternalServerError with default headers values
func NewCostTypeFindListInternalServerError() *CostTypeFindListInternalServerError {
	return &CostTypeFindListInternalServerError{}
}

/*
CostTypeFindListInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CostTypeFindListInternalServerError struct {
	Payload *models.Response
}

// IsSuccess returns true when this cost type find list internal server error response has a 2xx status code
func (o *CostTypeFindListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cost type find list internal server error response has a 3xx status code
func (o *CostTypeFindListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cost type find list internal server error response has a 4xx status code
func (o *CostTypeFindListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cost type find list internal server error response has a 5xx status code
func (o *CostTypeFindListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cost type find list internal server error response a status code equal to that given
func (o *CostTypeFindListInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the cost type find list internal server error response
func (o *CostTypeFindListInternalServerError) Code() int {
	return 500
}

func (o *CostTypeFindListInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /costType][%d] costTypeFindListInternalServerError %s", 500, payload)
}

func (o *CostTypeFindListInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /costType][%d] costTypeFindListInternalServerError %s", 500, payload)
}

func (o *CostTypeFindListInternalServerError) GetPayload() *models.Response {
	return o.Payload
}

func (o *CostTypeFindListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
