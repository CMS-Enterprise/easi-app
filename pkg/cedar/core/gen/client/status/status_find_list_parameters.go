// Code generated by go-swagger; DO NOT EDIT.

package status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewStatusFindListParams creates a new StatusFindListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewStatusFindListParams() *StatusFindListParams {
	return &StatusFindListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewStatusFindListParamsWithTimeout creates a new StatusFindListParams object
// with the ability to set a timeout on a request.
func NewStatusFindListParamsWithTimeout(timeout time.Duration) *StatusFindListParams {
	return &StatusFindListParams{
		timeout: timeout,
	}
}

// NewStatusFindListParamsWithContext creates a new StatusFindListParams object
// with the ability to set a context for a request.
func NewStatusFindListParamsWithContext(ctx context.Context) *StatusFindListParams {
	return &StatusFindListParams{
		Context: ctx,
	}
}

// NewStatusFindListParamsWithHTTPClient creates a new StatusFindListParams object
// with the ability to set a custom HTTPClient for a request.
func NewStatusFindListParamsWithHTTPClient(client *http.Client) *StatusFindListParams {
	return &StatusFindListParams{
		HTTPClient: client,
	}
}

/* StatusFindListParams contains all the parameters to send to the API endpoint
   for the status find list operation.

   Typically these are written to a http.Request.
*/
type StatusFindListParams struct {

	/* ID.

	   A system's ID
	*/
	ID *string

	/* PageName.

	   The system census page name
	*/
	PageName *string

	/* Summarize.

	   Whether to return a summarized list per system
	*/
	Summarize *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the status find list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StatusFindListParams) WithDefaults() *StatusFindListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the status find list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StatusFindListParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the status find list params
func (o *StatusFindListParams) WithTimeout(timeout time.Duration) *StatusFindListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the status find list params
func (o *StatusFindListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the status find list params
func (o *StatusFindListParams) WithContext(ctx context.Context) *StatusFindListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the status find list params
func (o *StatusFindListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the status find list params
func (o *StatusFindListParams) WithHTTPClient(client *http.Client) *StatusFindListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the status find list params
func (o *StatusFindListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the status find list params
func (o *StatusFindListParams) WithID(id *string) *StatusFindListParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the status find list params
func (o *StatusFindListParams) SetID(id *string) {
	o.ID = id
}

// WithPageName adds the pageName to the status find list params
func (o *StatusFindListParams) WithPageName(pageName *string) *StatusFindListParams {
	o.SetPageName(pageName)
	return o
}

// SetPageName adds the pageName to the status find list params
func (o *StatusFindListParams) SetPageName(pageName *string) {
	o.PageName = pageName
}

// WithSummarize adds the summarize to the status find list params
func (o *StatusFindListParams) WithSummarize(summarize *bool) *StatusFindListParams {
	o.SetSummarize(summarize)
	return o
}

// SetSummarize adds the summarize to the status find list params
func (o *StatusFindListParams) SetSummarize(summarize *bool) {
	o.Summarize = summarize
}

// WriteToRequest writes these params to a swagger request
func (o *StatusFindListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ID != nil {

		// query param id
		var qrID string

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.PageName != nil {

		// query param pageName
		var qrPageName string

		if o.PageName != nil {
			qrPageName = *o.PageName
		}
		qPageName := qrPageName
		if qPageName != "" {

			if err := r.SetQueryParam("pageName", qPageName); err != nil {
				return err
			}
		}
	}

	if o.Summarize != nil {

		// query param summarize
		var qrSummarize bool

		if o.Summarize != nil {
			qrSummarize = *o.Summarize
		}
		qSummarize := swag.FormatBool(qrSummarize)
		if qSummarize != "" {

			if err := r.SetQueryParam("summarize", qSummarize); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
