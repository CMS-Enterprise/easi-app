// Code generated by go-swagger; DO NOT EDIT.

package exchange

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cms-enterprise/easi-app/pkg/cedar/core/gen/models"
)

// ExchangeDeleteListReader is a Reader for the ExchangeDeleteList structure.
type ExchangeDeleteListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExchangeDeleteListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExchangeDeleteListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExchangeDeleteListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExchangeDeleteListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExchangeDeleteListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExchangeDeleteListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /exchange] exchangeDeleteList", response, response.Code())
	}
}

// NewExchangeDeleteListOK creates a ExchangeDeleteListOK with default headers values
func NewExchangeDeleteListOK() *ExchangeDeleteListOK {
	return &ExchangeDeleteListOK{}
}

/*
ExchangeDeleteListOK describes a response with status code 200, with default header values.

OK
*/
type ExchangeDeleteListOK struct {
	Payload *models.Response
}

// IsSuccess returns true when this exchange delete list o k response has a 2xx status code
func (o *ExchangeDeleteListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this exchange delete list o k response has a 3xx status code
func (o *ExchangeDeleteListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this exchange delete list o k response has a 4xx status code
func (o *ExchangeDeleteListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this exchange delete list o k response has a 5xx status code
func (o *ExchangeDeleteListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this exchange delete list o k response a status code equal to that given
func (o *ExchangeDeleteListOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the exchange delete list o k response
func (o *ExchangeDeleteListOK) Code() int {
	return 200
}

func (o *ExchangeDeleteListOK) Error() string {
	return fmt.Sprintf("[DELETE /exchange][%d] exchangeDeleteListOK  %+v", 200, o.Payload)
}

func (o *ExchangeDeleteListOK) String() string {
	return fmt.Sprintf("[DELETE /exchange][%d] exchangeDeleteListOK  %+v", 200, o.Payload)
}

func (o *ExchangeDeleteListOK) GetPayload() *models.Response {
	return o.Payload
}

func (o *ExchangeDeleteListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExchangeDeleteListBadRequest creates a ExchangeDeleteListBadRequest with default headers values
func NewExchangeDeleteListBadRequest() *ExchangeDeleteListBadRequest {
	return &ExchangeDeleteListBadRequest{}
}

/*
ExchangeDeleteListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExchangeDeleteListBadRequest struct {
	Payload *models.Response
}

// IsSuccess returns true when this exchange delete list bad request response has a 2xx status code
func (o *ExchangeDeleteListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this exchange delete list bad request response has a 3xx status code
func (o *ExchangeDeleteListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this exchange delete list bad request response has a 4xx status code
func (o *ExchangeDeleteListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this exchange delete list bad request response has a 5xx status code
func (o *ExchangeDeleteListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this exchange delete list bad request response a status code equal to that given
func (o *ExchangeDeleteListBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the exchange delete list bad request response
func (o *ExchangeDeleteListBadRequest) Code() int {
	return 400
}

func (o *ExchangeDeleteListBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /exchange][%d] exchangeDeleteListBadRequest  %+v", 400, o.Payload)
}

func (o *ExchangeDeleteListBadRequest) String() string {
	return fmt.Sprintf("[DELETE /exchange][%d] exchangeDeleteListBadRequest  %+v", 400, o.Payload)
}

func (o *ExchangeDeleteListBadRequest) GetPayload() *models.Response {
	return o.Payload
}

func (o *ExchangeDeleteListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExchangeDeleteListUnauthorized creates a ExchangeDeleteListUnauthorized with default headers values
func NewExchangeDeleteListUnauthorized() *ExchangeDeleteListUnauthorized {
	return &ExchangeDeleteListUnauthorized{}
}

/*
ExchangeDeleteListUnauthorized describes a response with status code 401, with default header values.

Access Denied
*/
type ExchangeDeleteListUnauthorized struct {
	Payload *models.Response
}

// IsSuccess returns true when this exchange delete list unauthorized response has a 2xx status code
func (o *ExchangeDeleteListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this exchange delete list unauthorized response has a 3xx status code
func (o *ExchangeDeleteListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this exchange delete list unauthorized response has a 4xx status code
func (o *ExchangeDeleteListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this exchange delete list unauthorized response has a 5xx status code
func (o *ExchangeDeleteListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this exchange delete list unauthorized response a status code equal to that given
func (o *ExchangeDeleteListUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the exchange delete list unauthorized response
func (o *ExchangeDeleteListUnauthorized) Code() int {
	return 401
}

func (o *ExchangeDeleteListUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /exchange][%d] exchangeDeleteListUnauthorized  %+v", 401, o.Payload)
}

func (o *ExchangeDeleteListUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /exchange][%d] exchangeDeleteListUnauthorized  %+v", 401, o.Payload)
}

func (o *ExchangeDeleteListUnauthorized) GetPayload() *models.Response {
	return o.Payload
}

func (o *ExchangeDeleteListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExchangeDeleteListNotFound creates a ExchangeDeleteListNotFound with default headers values
func NewExchangeDeleteListNotFound() *ExchangeDeleteListNotFound {
	return &ExchangeDeleteListNotFound{}
}

/*
ExchangeDeleteListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ExchangeDeleteListNotFound struct {
	Payload *models.Response
}

// IsSuccess returns true when this exchange delete list not found response has a 2xx status code
func (o *ExchangeDeleteListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this exchange delete list not found response has a 3xx status code
func (o *ExchangeDeleteListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this exchange delete list not found response has a 4xx status code
func (o *ExchangeDeleteListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this exchange delete list not found response has a 5xx status code
func (o *ExchangeDeleteListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this exchange delete list not found response a status code equal to that given
func (o *ExchangeDeleteListNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the exchange delete list not found response
func (o *ExchangeDeleteListNotFound) Code() int {
	return 404
}

func (o *ExchangeDeleteListNotFound) Error() string {
	return fmt.Sprintf("[DELETE /exchange][%d] exchangeDeleteListNotFound  %+v", 404, o.Payload)
}

func (o *ExchangeDeleteListNotFound) String() string {
	return fmt.Sprintf("[DELETE /exchange][%d] exchangeDeleteListNotFound  %+v", 404, o.Payload)
}

func (o *ExchangeDeleteListNotFound) GetPayload() *models.Response {
	return o.Payload
}

func (o *ExchangeDeleteListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExchangeDeleteListInternalServerError creates a ExchangeDeleteListInternalServerError with default headers values
func NewExchangeDeleteListInternalServerError() *ExchangeDeleteListInternalServerError {
	return &ExchangeDeleteListInternalServerError{}
}

/*
ExchangeDeleteListInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ExchangeDeleteListInternalServerError struct {
	Payload *models.Response
}

// IsSuccess returns true when this exchange delete list internal server error response has a 2xx status code
func (o *ExchangeDeleteListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this exchange delete list internal server error response has a 3xx status code
func (o *ExchangeDeleteListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this exchange delete list internal server error response has a 4xx status code
func (o *ExchangeDeleteListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this exchange delete list internal server error response has a 5xx status code
func (o *ExchangeDeleteListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this exchange delete list internal server error response a status code equal to that given
func (o *ExchangeDeleteListInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the exchange delete list internal server error response
func (o *ExchangeDeleteListInternalServerError) Code() int {
	return 500
}

func (o *ExchangeDeleteListInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /exchange][%d] exchangeDeleteListInternalServerError  %+v", 500, o.Payload)
}

func (o *ExchangeDeleteListInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /exchange][%d] exchangeDeleteListInternalServerError  %+v", 500, o.Payload)
}

func (o *ExchangeDeleteListInternalServerError) GetPayload() *models.Response {
	return o.Payload
}

func (o *ExchangeDeleteListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
