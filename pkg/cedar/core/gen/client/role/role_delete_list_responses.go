// Code generated by go-swagger; DO NOT EDIT.

package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cms-enterprise/easi-app/pkg/cedar/core/gen/models"
)

// RoleDeleteListReader is a Reader for the RoleDeleteList structure.
type RoleDeleteListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RoleDeleteListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRoleDeleteListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRoleDeleteListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRoleDeleteListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRoleDeleteListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRoleDeleteListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /role] roleDeleteList", response, response.Code())
	}
}

// NewRoleDeleteListOK creates a RoleDeleteListOK with default headers values
func NewRoleDeleteListOK() *RoleDeleteListOK {
	return &RoleDeleteListOK{}
}

/*
RoleDeleteListOK describes a response with status code 200, with default header values.

OK
*/
type RoleDeleteListOK struct {
	Payload *models.Response
}

// IsSuccess returns true when this role delete list o k response has a 2xx status code
func (o *RoleDeleteListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this role delete list o k response has a 3xx status code
func (o *RoleDeleteListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this role delete list o k response has a 4xx status code
func (o *RoleDeleteListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this role delete list o k response has a 5xx status code
func (o *RoleDeleteListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this role delete list o k response a status code equal to that given
func (o *RoleDeleteListOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the role delete list o k response
func (o *RoleDeleteListOK) Code() int {
	return 200
}

func (o *RoleDeleteListOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /role][%d] roleDeleteListOK %s", 200, payload)
}

func (o *RoleDeleteListOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /role][%d] roleDeleteListOK %s", 200, payload)
}

func (o *RoleDeleteListOK) GetPayload() *models.Response {
	return o.Payload
}

func (o *RoleDeleteListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRoleDeleteListBadRequest creates a RoleDeleteListBadRequest with default headers values
func NewRoleDeleteListBadRequest() *RoleDeleteListBadRequest {
	return &RoleDeleteListBadRequest{}
}

/*
RoleDeleteListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RoleDeleteListBadRequest struct {
	Payload *models.Response
}

// IsSuccess returns true when this role delete list bad request response has a 2xx status code
func (o *RoleDeleteListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this role delete list bad request response has a 3xx status code
func (o *RoleDeleteListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this role delete list bad request response has a 4xx status code
func (o *RoleDeleteListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this role delete list bad request response has a 5xx status code
func (o *RoleDeleteListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this role delete list bad request response a status code equal to that given
func (o *RoleDeleteListBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the role delete list bad request response
func (o *RoleDeleteListBadRequest) Code() int {
	return 400
}

func (o *RoleDeleteListBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /role][%d] roleDeleteListBadRequest %s", 400, payload)
}

func (o *RoleDeleteListBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /role][%d] roleDeleteListBadRequest %s", 400, payload)
}

func (o *RoleDeleteListBadRequest) GetPayload() *models.Response {
	return o.Payload
}

func (o *RoleDeleteListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRoleDeleteListUnauthorized creates a RoleDeleteListUnauthorized with default headers values
func NewRoleDeleteListUnauthorized() *RoleDeleteListUnauthorized {
	return &RoleDeleteListUnauthorized{}
}

/*
RoleDeleteListUnauthorized describes a response with status code 401, with default header values.

Access Denied
*/
type RoleDeleteListUnauthorized struct {
	Payload *models.Response
}

// IsSuccess returns true when this role delete list unauthorized response has a 2xx status code
func (o *RoleDeleteListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this role delete list unauthorized response has a 3xx status code
func (o *RoleDeleteListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this role delete list unauthorized response has a 4xx status code
func (o *RoleDeleteListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this role delete list unauthorized response has a 5xx status code
func (o *RoleDeleteListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this role delete list unauthorized response a status code equal to that given
func (o *RoleDeleteListUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the role delete list unauthorized response
func (o *RoleDeleteListUnauthorized) Code() int {
	return 401
}

func (o *RoleDeleteListUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /role][%d] roleDeleteListUnauthorized %s", 401, payload)
}

func (o *RoleDeleteListUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /role][%d] roleDeleteListUnauthorized %s", 401, payload)
}

func (o *RoleDeleteListUnauthorized) GetPayload() *models.Response {
	return o.Payload
}

func (o *RoleDeleteListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRoleDeleteListNotFound creates a RoleDeleteListNotFound with default headers values
func NewRoleDeleteListNotFound() *RoleDeleteListNotFound {
	return &RoleDeleteListNotFound{}
}

/*
RoleDeleteListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RoleDeleteListNotFound struct {
	Payload *models.Response
}

// IsSuccess returns true when this role delete list not found response has a 2xx status code
func (o *RoleDeleteListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this role delete list not found response has a 3xx status code
func (o *RoleDeleteListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this role delete list not found response has a 4xx status code
func (o *RoleDeleteListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this role delete list not found response has a 5xx status code
func (o *RoleDeleteListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this role delete list not found response a status code equal to that given
func (o *RoleDeleteListNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the role delete list not found response
func (o *RoleDeleteListNotFound) Code() int {
	return 404
}

func (o *RoleDeleteListNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /role][%d] roleDeleteListNotFound %s", 404, payload)
}

func (o *RoleDeleteListNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /role][%d] roleDeleteListNotFound %s", 404, payload)
}

func (o *RoleDeleteListNotFound) GetPayload() *models.Response {
	return o.Payload
}

func (o *RoleDeleteListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRoleDeleteListInternalServerError creates a RoleDeleteListInternalServerError with default headers values
func NewRoleDeleteListInternalServerError() *RoleDeleteListInternalServerError {
	return &RoleDeleteListInternalServerError{}
}

/*
RoleDeleteListInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RoleDeleteListInternalServerError struct {
	Payload *models.Response
}

// IsSuccess returns true when this role delete list internal server error response has a 2xx status code
func (o *RoleDeleteListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this role delete list internal server error response has a 3xx status code
func (o *RoleDeleteListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this role delete list internal server error response has a 4xx status code
func (o *RoleDeleteListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this role delete list internal server error response has a 5xx status code
func (o *RoleDeleteListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this role delete list internal server error response a status code equal to that given
func (o *RoleDeleteListInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the role delete list internal server error response
func (o *RoleDeleteListInternalServerError) Code() int {
	return 500
}

func (o *RoleDeleteListInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /role][%d] roleDeleteListInternalServerError %s", 500, payload)
}

func (o *RoleDeleteListInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /role][%d] roleDeleteListInternalServerError %s", 500, payload)
}

func (o *RoleDeleteListInternalServerError) GetPayload() *models.Response {
	return o.Payload
}

func (o *RoleDeleteListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
