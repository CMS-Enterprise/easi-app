// Code generated by go-swagger; DO NOT EDIT.

package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cmsgov/easi-app/pkg/cedar/core/gen/models"
)

// RoleFindByIDReader is a Reader for the RoleFindByID structure.
type RoleFindByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RoleFindByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRoleFindByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRoleFindByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRoleFindByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRoleFindByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRoleFindByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /role] roleFindById", response, response.Code())
	}
}

// NewRoleFindByIDOK creates a RoleFindByIDOK with default headers values
func NewRoleFindByIDOK() *RoleFindByIDOK {
	return &RoleFindByIDOK{}
}

/*
RoleFindByIDOK describes a response with status code 200, with default header values.

OK
*/
type RoleFindByIDOK struct {
	Payload *models.RoleFindResponse
}

// IsSuccess returns true when this role find by Id o k response has a 2xx status code
func (o *RoleFindByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this role find by Id o k response has a 3xx status code
func (o *RoleFindByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this role find by Id o k response has a 4xx status code
func (o *RoleFindByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this role find by Id o k response has a 5xx status code
func (o *RoleFindByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this role find by Id o k response a status code equal to that given
func (o *RoleFindByIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the role find by Id o k response
func (o *RoleFindByIDOK) Code() int {
	return 200
}

func (o *RoleFindByIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /role][%d] roleFindByIdOK %s", 200, payload)
}

func (o *RoleFindByIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /role][%d] roleFindByIdOK %s", 200, payload)
}

func (o *RoleFindByIDOK) GetPayload() *models.RoleFindResponse {
	return o.Payload
}

func (o *RoleFindByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RoleFindResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRoleFindByIDBadRequest creates a RoleFindByIDBadRequest with default headers values
func NewRoleFindByIDBadRequest() *RoleFindByIDBadRequest {
	return &RoleFindByIDBadRequest{}
}

/*
RoleFindByIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RoleFindByIDBadRequest struct {
	Payload *models.Response
}

// IsSuccess returns true when this role find by Id bad request response has a 2xx status code
func (o *RoleFindByIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this role find by Id bad request response has a 3xx status code
func (o *RoleFindByIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this role find by Id bad request response has a 4xx status code
func (o *RoleFindByIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this role find by Id bad request response has a 5xx status code
func (o *RoleFindByIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this role find by Id bad request response a status code equal to that given
func (o *RoleFindByIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the role find by Id bad request response
func (o *RoleFindByIDBadRequest) Code() int {
	return 400
}

func (o *RoleFindByIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /role][%d] roleFindByIdBadRequest %s", 400, payload)
}

func (o *RoleFindByIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /role][%d] roleFindByIdBadRequest %s", 400, payload)
}

func (o *RoleFindByIDBadRequest) GetPayload() *models.Response {
	return o.Payload
}

func (o *RoleFindByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRoleFindByIDUnauthorized creates a RoleFindByIDUnauthorized with default headers values
func NewRoleFindByIDUnauthorized() *RoleFindByIDUnauthorized {
	return &RoleFindByIDUnauthorized{}
}

/*
RoleFindByIDUnauthorized describes a response with status code 401, with default header values.

Access Denied
*/
type RoleFindByIDUnauthorized struct {
	Payload *models.Response
}

// IsSuccess returns true when this role find by Id unauthorized response has a 2xx status code
func (o *RoleFindByIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this role find by Id unauthorized response has a 3xx status code
func (o *RoleFindByIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this role find by Id unauthorized response has a 4xx status code
func (o *RoleFindByIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this role find by Id unauthorized response has a 5xx status code
func (o *RoleFindByIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this role find by Id unauthorized response a status code equal to that given
func (o *RoleFindByIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the role find by Id unauthorized response
func (o *RoleFindByIDUnauthorized) Code() int {
	return 401
}

func (o *RoleFindByIDUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /role][%d] roleFindByIdUnauthorized %s", 401, payload)
}

func (o *RoleFindByIDUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /role][%d] roleFindByIdUnauthorized %s", 401, payload)
}

func (o *RoleFindByIDUnauthorized) GetPayload() *models.Response {
	return o.Payload
}

func (o *RoleFindByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRoleFindByIDNotFound creates a RoleFindByIDNotFound with default headers values
func NewRoleFindByIDNotFound() *RoleFindByIDNotFound {
	return &RoleFindByIDNotFound{}
}

/*
RoleFindByIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RoleFindByIDNotFound struct {
	Payload *models.Response
}

// IsSuccess returns true when this role find by Id not found response has a 2xx status code
func (o *RoleFindByIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this role find by Id not found response has a 3xx status code
func (o *RoleFindByIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this role find by Id not found response has a 4xx status code
func (o *RoleFindByIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this role find by Id not found response has a 5xx status code
func (o *RoleFindByIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this role find by Id not found response a status code equal to that given
func (o *RoleFindByIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the role find by Id not found response
func (o *RoleFindByIDNotFound) Code() int {
	return 404
}

func (o *RoleFindByIDNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /role][%d] roleFindByIdNotFound %s", 404, payload)
}

func (o *RoleFindByIDNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /role][%d] roleFindByIdNotFound %s", 404, payload)
}

func (o *RoleFindByIDNotFound) GetPayload() *models.Response {
	return o.Payload
}

func (o *RoleFindByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRoleFindByIDInternalServerError creates a RoleFindByIDInternalServerError with default headers values
func NewRoleFindByIDInternalServerError() *RoleFindByIDInternalServerError {
	return &RoleFindByIDInternalServerError{}
}

/*
RoleFindByIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RoleFindByIDInternalServerError struct {
	Payload *models.Response
}

// IsSuccess returns true when this role find by Id internal server error response has a 2xx status code
func (o *RoleFindByIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this role find by Id internal server error response has a 3xx status code
func (o *RoleFindByIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this role find by Id internal server error response has a 4xx status code
func (o *RoleFindByIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this role find by Id internal server error response has a 5xx status code
func (o *RoleFindByIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this role find by Id internal server error response a status code equal to that given
func (o *RoleFindByIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the role find by Id internal server error response
func (o *RoleFindByIDInternalServerError) Code() int {
	return 500
}

func (o *RoleFindByIDInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /role][%d] roleFindByIdInternalServerError %s", 500, payload)
}

func (o *RoleFindByIDInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /role][%d] roleFindByIdInternalServerError %s", 500, payload)
}

func (o *RoleFindByIDInternalServerError) GetPayload() *models.Response {
	return o.Payload
}

func (o *RoleFindByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
