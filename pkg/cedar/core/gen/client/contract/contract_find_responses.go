// Code generated by go-swagger; DO NOT EDIT.

package contract

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cmsgov/easi-app/pkg/cedar/core/gen/models"
)

// ContractFindReader is a Reader for the ContractFind structure.
type ContractFindReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ContractFindReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewContractFindOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewContractFindBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewContractFindUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewContractFindInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /contract] contractFind", response, response.Code())
	}
}

// NewContractFindOK creates a ContractFindOK with default headers values
func NewContractFindOK() *ContractFindOK {
	return &ContractFindOK{}
}

/*
ContractFindOK describes a response with status code 200, with default header values.

OK
*/
type ContractFindOK struct {
	Payload *models.ContractFindResponse
}

// IsSuccess returns true when this contract find o k response has a 2xx status code
func (o *ContractFindOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this contract find o k response has a 3xx status code
func (o *ContractFindOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this contract find o k response has a 4xx status code
func (o *ContractFindOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this contract find o k response has a 5xx status code
func (o *ContractFindOK) IsServerError() bool {
	return false
}

// IsCode returns true when this contract find o k response a status code equal to that given
func (o *ContractFindOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the contract find o k response
func (o *ContractFindOK) Code() int {
	return 200
}

func (o *ContractFindOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /contract][%d] contractFindOK %s", 200, payload)
}

func (o *ContractFindOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /contract][%d] contractFindOK %s", 200, payload)
}

func (o *ContractFindOK) GetPayload() *models.ContractFindResponse {
	return o.Payload
}

func (o *ContractFindOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ContractFindResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContractFindBadRequest creates a ContractFindBadRequest with default headers values
func NewContractFindBadRequest() *ContractFindBadRequest {
	return &ContractFindBadRequest{}
}

/*
ContractFindBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ContractFindBadRequest struct {
	Payload *models.Response
}

// IsSuccess returns true when this contract find bad request response has a 2xx status code
func (o *ContractFindBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this contract find bad request response has a 3xx status code
func (o *ContractFindBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this contract find bad request response has a 4xx status code
func (o *ContractFindBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this contract find bad request response has a 5xx status code
func (o *ContractFindBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this contract find bad request response a status code equal to that given
func (o *ContractFindBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the contract find bad request response
func (o *ContractFindBadRequest) Code() int {
	return 400
}

func (o *ContractFindBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /contract][%d] contractFindBadRequest %s", 400, payload)
}

func (o *ContractFindBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /contract][%d] contractFindBadRequest %s", 400, payload)
}

func (o *ContractFindBadRequest) GetPayload() *models.Response {
	return o.Payload
}

func (o *ContractFindBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContractFindUnauthorized creates a ContractFindUnauthorized with default headers values
func NewContractFindUnauthorized() *ContractFindUnauthorized {
	return &ContractFindUnauthorized{}
}

/*
ContractFindUnauthorized describes a response with status code 401, with default header values.

Access Denied
*/
type ContractFindUnauthorized struct {
	Payload *models.Response
}

// IsSuccess returns true when this contract find unauthorized response has a 2xx status code
func (o *ContractFindUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this contract find unauthorized response has a 3xx status code
func (o *ContractFindUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this contract find unauthorized response has a 4xx status code
func (o *ContractFindUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this contract find unauthorized response has a 5xx status code
func (o *ContractFindUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this contract find unauthorized response a status code equal to that given
func (o *ContractFindUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the contract find unauthorized response
func (o *ContractFindUnauthorized) Code() int {
	return 401
}

func (o *ContractFindUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /contract][%d] contractFindUnauthorized %s", 401, payload)
}

func (o *ContractFindUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /contract][%d] contractFindUnauthorized %s", 401, payload)
}

func (o *ContractFindUnauthorized) GetPayload() *models.Response {
	return o.Payload
}

func (o *ContractFindUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContractFindInternalServerError creates a ContractFindInternalServerError with default headers values
func NewContractFindInternalServerError() *ContractFindInternalServerError {
	return &ContractFindInternalServerError{}
}

/*
ContractFindInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ContractFindInternalServerError struct {
	Payload *models.Response
}

// IsSuccess returns true when this contract find internal server error response has a 2xx status code
func (o *ContractFindInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this contract find internal server error response has a 3xx status code
func (o *ContractFindInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this contract find internal server error response has a 4xx status code
func (o *ContractFindInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this contract find internal server error response has a 5xx status code
func (o *ContractFindInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this contract find internal server error response a status code equal to that given
func (o *ContractFindInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the contract find internal server error response
func (o *ContractFindInternalServerError) Code() int {
	return 500
}

func (o *ContractFindInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /contract][%d] contractFindInternalServerError %s", 500, payload)
}

func (o *ContractFindInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /contract][%d] contractFindInternalServerError %s", 500, payload)
}

func (o *ContractFindInternalServerError) GetPayload() *models.Response {
	return o.Payload
}

func (o *ContractFindInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
