// Code generated by go-swagger; DO NOT EDIT.

package contract

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cms-enterprise/easi-app/pkg/cedar/core/gen/models"
)

// ContractUpdateReader is a Reader for the ContractUpdate structure.
type ContractUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ContractUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewContractUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewContractUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewContractUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewContractUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /contract] contractUpdate", response, response.Code())
	}
}

// NewContractUpdateOK creates a ContractUpdateOK with default headers values
func NewContractUpdateOK() *ContractUpdateOK {
	return &ContractUpdateOK{}
}

/*
ContractUpdateOK describes a response with status code 200, with default header values.

OK
*/
type ContractUpdateOK struct {
	Payload *models.Response
}

// IsSuccess returns true when this contract update o k response has a 2xx status code
func (o *ContractUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this contract update o k response has a 3xx status code
func (o *ContractUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this contract update o k response has a 4xx status code
func (o *ContractUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this contract update o k response has a 5xx status code
func (o *ContractUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this contract update o k response a status code equal to that given
func (o *ContractUpdateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the contract update o k response
func (o *ContractUpdateOK) Code() int {
	return 200
}

func (o *ContractUpdateOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /contract][%d] contractUpdateOK %s", 200, payload)
}

func (o *ContractUpdateOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /contract][%d] contractUpdateOK %s", 200, payload)
}

func (o *ContractUpdateOK) GetPayload() *models.Response {
	return o.Payload
}

func (o *ContractUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContractUpdateBadRequest creates a ContractUpdateBadRequest with default headers values
func NewContractUpdateBadRequest() *ContractUpdateBadRequest {
	return &ContractUpdateBadRequest{}
}

/*
ContractUpdateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ContractUpdateBadRequest struct {
	Payload *models.Response
}

// IsSuccess returns true when this contract update bad request response has a 2xx status code
func (o *ContractUpdateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this contract update bad request response has a 3xx status code
func (o *ContractUpdateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this contract update bad request response has a 4xx status code
func (o *ContractUpdateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this contract update bad request response has a 5xx status code
func (o *ContractUpdateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this contract update bad request response a status code equal to that given
func (o *ContractUpdateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the contract update bad request response
func (o *ContractUpdateBadRequest) Code() int {
	return 400
}

func (o *ContractUpdateBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /contract][%d] contractUpdateBadRequest %s", 400, payload)
}

func (o *ContractUpdateBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /contract][%d] contractUpdateBadRequest %s", 400, payload)
}

func (o *ContractUpdateBadRequest) GetPayload() *models.Response {
	return o.Payload
}

func (o *ContractUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContractUpdateUnauthorized creates a ContractUpdateUnauthorized with default headers values
func NewContractUpdateUnauthorized() *ContractUpdateUnauthorized {
	return &ContractUpdateUnauthorized{}
}

/*
ContractUpdateUnauthorized describes a response with status code 401, with default header values.

Access Denied
*/
type ContractUpdateUnauthorized struct {
	Payload *models.Response
}

// IsSuccess returns true when this contract update unauthorized response has a 2xx status code
func (o *ContractUpdateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this contract update unauthorized response has a 3xx status code
func (o *ContractUpdateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this contract update unauthorized response has a 4xx status code
func (o *ContractUpdateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this contract update unauthorized response has a 5xx status code
func (o *ContractUpdateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this contract update unauthorized response a status code equal to that given
func (o *ContractUpdateUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the contract update unauthorized response
func (o *ContractUpdateUnauthorized) Code() int {
	return 401
}

func (o *ContractUpdateUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /contract][%d] contractUpdateUnauthorized %s", 401, payload)
}

func (o *ContractUpdateUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /contract][%d] contractUpdateUnauthorized %s", 401, payload)
}

func (o *ContractUpdateUnauthorized) GetPayload() *models.Response {
	return o.Payload
}

func (o *ContractUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewContractUpdateInternalServerError creates a ContractUpdateInternalServerError with default headers values
func NewContractUpdateInternalServerError() *ContractUpdateInternalServerError {
	return &ContractUpdateInternalServerError{}
}

/*
ContractUpdateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ContractUpdateInternalServerError struct {
	Payload *models.Response
}

// IsSuccess returns true when this contract update internal server error response has a 2xx status code
func (o *ContractUpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this contract update internal server error response has a 3xx status code
func (o *ContractUpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this contract update internal server error response has a 4xx status code
func (o *ContractUpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this contract update internal server error response has a 5xx status code
func (o *ContractUpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this contract update internal server error response a status code equal to that given
func (o *ContractUpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the contract update internal server error response
func (o *ContractUpdateInternalServerError) Code() int {
	return 500
}

func (o *ContractUpdateInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /contract][%d] contractUpdateInternalServerError %s", 500, payload)
}

func (o *ContractUpdateInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /contract][%d] contractUpdateInternalServerError %s", 500, payload)
}

func (o *ContractUpdateInternalServerError) GetPayload() *models.Response {
	return o.Payload
}

func (o *ContractUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Response)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
