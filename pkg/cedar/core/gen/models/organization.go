// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Organization organization
//
// swagger:model Organization
type Organization struct {

	// organization
	Organization []*Organization `json:"Organization"`

	// acronymn
	// Example: CMS
	Acronymn string `json:"acronymn,omitempty"`

	// component
	// Example: OFM
	Component string `json:"component,omitempty"`

	// description
	// Example: Formerly - Business Applications Management Group
	Description string `json:"description,omitempty"`

	// full path
	// Example: CMS/OA/OFM/Accounting Management Group
	FullPath string `json:"fullPath,omitempty"`

	// id
	// Example: 261-631-0
	// Required: true
	ID *string `json:"id"`

	// is component
	IsComponent bool `json:"isComponent,omitempty"`

	// level
	Level int32 `json:"level,omitempty"`

	// name
	// Example: Centers for Medicare and Medicaid Services
	// Required: true
	Name *string `json:"name"`

	// parent Id
	// Example: 261-631-0
	ParentID string `json:"parentId,omitempty"`
}

// Validate validates this organization
func (m *Organization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Organization) validateOrganization(formats strfmt.Registry) error {
	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	for i := 0; i < len(m.Organization); i++ {
		if swag.IsZero(m.Organization[i]) { // not required
			continue
		}

		if m.Organization[i] != nil {
			if err := m.Organization[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Organization" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Organization) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this organization based on the context it is used
func (m *Organization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrganization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Organization) contextValidateOrganization(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Organization); i++ {

		if m.Organization[i] != nil {
			if err := m.Organization[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Organization" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Organization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Organization) UnmarshalBinary(b []byte) error {
	var res Organization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
