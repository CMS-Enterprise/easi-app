// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataExchanges data exchanges
//
// swagger:model DataExchanges
type DataExchanges struct {

	// exchange
	Exchange *Exchange `json:"Exchange,omitempty"`

	// status
	Status *PageDataExchangeStatus `json:"Status,omitempty"`

	// deleted
	Deleted bool `json:"deleted,omitempty"`

	// direction
	// Enum: [sender receiver both]
	Direction string `json:"direction,omitempty"`

	// undeleted
	Undeleted bool `json:"undeleted,omitempty"`

	// updated
	Updated bool `json:"updated,omitempty"`
}

// Validate validates this data exchanges
func (m *DataExchanges) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExchange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataExchanges) validateExchange(formats strfmt.Registry) error {
	if swag.IsZero(m.Exchange) { // not required
		return nil
	}

	if m.Exchange != nil {
		if err := m.Exchange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Exchange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Exchange")
			}
			return err
		}
	}

	return nil
}

func (m *DataExchanges) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Status")
			}
			return err
		}
	}

	return nil
}

var dataExchangesTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sender","receiver","both"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataExchangesTypeDirectionPropEnum = append(dataExchangesTypeDirectionPropEnum, v)
	}
}

const (

	// DataExchangesDirectionSender captures enum value "sender"
	DataExchangesDirectionSender string = "sender"

	// DataExchangesDirectionReceiver captures enum value "receiver"
	DataExchangesDirectionReceiver string = "receiver"

	// DataExchangesDirectionBoth captures enum value "both"
	DataExchangesDirectionBoth string = "both"
)

// prop value enum
func (m *DataExchanges) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dataExchangesTypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DataExchanges) validateDirection(formats strfmt.Registry) error {
	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this data exchanges based on the context it is used
func (m *DataExchanges) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExchange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataExchanges) contextValidateExchange(ctx context.Context, formats strfmt.Registry) error {

	if m.Exchange != nil {
		if err := m.Exchange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Exchange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Exchange")
			}
			return err
		}
	}

	return nil
}

func (m *DataExchanges) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataExchanges) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataExchanges) UnmarshalBinary(b []byte) error {
	var res DataExchanges
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
