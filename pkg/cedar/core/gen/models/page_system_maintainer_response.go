// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PageSystemMaintainerResponse page system maintainer response
//
// swagger:model PageSystemMaintainerResponse
type PageSystemMaintainerResponse struct {

	// agile used
	// Example: true
	AgileUsed bool `json:"agileUsed,omitempty"`

	// business artifacts location
	// Example: CMS Enterprise Confluence
	BusinessArtifactsLocation string `json:"businessArtifactsLocation,omitempty"`

	// business artifacts on demand
	// Example: true
	BusinessArtifactsOnDemand bool `json:"businessArtifactsOnDemand,omitempty"`

	// can dispose records data
	// Example: true
	CanDisposeRecordsData bool `json:"canDisposeRecordsData,omitempty"`

	// deployment frequency
	// Example: Monthly
	DeploymentFrequency string `json:"deploymentFrequency,omitempty"`

	// dev work description
	// Example: The type of development work underway...
	DevWorkDescription string `json:"devWorkDescription,omitempty"`

	// frontend access type
	// Example: IPv4 and IPv6
	FrontendAccessType string `json:"frontendAccessType,omitempty"`

	// hard coded Ip address
	// Example: true
	HardCodedIPAddress bool `json:"hardCodedIpAddress,omitempty"`

	// has metadata glossary
	// Example: true
	HasMetadataGlossary bool `json:"hasMetadataGlossary,omitempty"`

	// have enterprise data lake plan
	// Example: Enumeration of (Now | In 1 Year | In 3 Years | No Plans | What is EDL)
	HaveEnterpriseDataLakePlan string `json:"haveEnterpriseDataLakePlan,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// identity management solution
	IdentityManagementSolution string `json:"identityManagementSolution,omitempty"`

	// identity management solution other
	IdentityManagementSolutionOther string `json:"identityManagementSolutionOther,omitempty"`

	// ip6 enabled asset percent
	// Example: Between 20% and 49%
	Ip6EnabledAssetPercent string `json:"ip6EnabledAssetPercent,omitempty"`

	// ip6 transition plan
	// Example: Yes, transition to IPv6
	Ip6TransitionPlan string `json:"ip6TransitionPlan,omitempty"`

	// ip enabled asset count
	// Example: 1
	IPEnabledAssetCount int32 `json:"ipEnabledAssetCount,omitempty"`

	// is record management schedule approved
	// Example: true
	IsRecordManagementScheduleApproved bool `json:"isRecordManagementScheduleApproved,omitempty"`

	// major refresh date
	// Format: date
	MajorRefreshDate strfmt.Date `json:"majorRefreshDate,omitempty"`

	// name
	// Example: CMS Enterprise Data Analytics Repository
	Name string `json:"name,omitempty"`

	// net accessibility
	// Example: Accessible to a CMS-internal network only
	NetAccessibility string `json:"netAccessibility,omitempty"`

	// next major refresh date
	// Format: date
	NextMajorRefreshDate strfmt.Date `json:"nextMajorRefreshDate,omitempty"`

	// om documentation location
	// Example: Sharepoint
	OmDocumentationLocation string `json:"omDocumentationLocation,omitempty"`

	// om documentation on demand
	// Example: true
	OmDocumentationOnDemand bool `json:"omDocumentationOnDemand,omitempty"`

	// page name
	// Example: SystemMaintainerBasicInfo
	PageName string `json:"pageName,omitempty"`

	// plans to retire replace
	// Example: Yes - Retire and Replace
	PlansToRetireReplace string `json:"plansToRetireReplace,omitempty"`

	// quarter to retire replace
	// Example: 3
	QuarterToRetireReplace string `json:"quarterToRetireReplace,omitempty"`

	// record management format
	RecordManagementFormat string `json:"recordManagementFormat,omitempty"`

	// record management format other
	RecordManagementFormatOther string `json:"recordManagementFormatOther,omitempty"`

	// record management metadata
	RecordManagementMetadata string `json:"recordManagementMetadata,omitempty"`

	// records management bucket
	RecordsManagementBucket []string `json:"recordsManagementBucket"`

	// source code loction
	// Example: CMS Github
	SourceCodeLoction string `json:"sourceCodeLoction,omitempty"`

	// source code on demand
	// Example: true
	SourceCodeOnDemand bool `json:"sourceCodeOnDemand,omitempty"`

	// store in central data catalog
	// Example: true
	StoreInCentralDataCatalog bool `json:"storeInCentralDataCatalog,omitempty"`

	// system customization
	// Example: Less Than 20% Customization
	SystemCustomization string `json:"systemCustomization,omitempty"`

	// system design location
	// Example: SharePoint
	SystemDesignLocation string `json:"systemDesignLocation,omitempty"`

	// system design on demand
	// Example: true
	SystemDesignOnDemand bool `json:"systemDesignOnDemand,omitempty"`

	// system production date
	// Format: date
	SystemProductionDate strfmt.Date `json:"systemProductionDate,omitempty"`

	// system requirements location
	// Example: Confluence
	SystemRequirementsLocation string `json:"systemRequirementsLocation,omitempty"`

	// system requirements on demand
	// Example: true
	SystemRequirementsOnDemand bool `json:"systemRequirementsOnDemand,omitempty"`

	// test plan location
	// Example: Sharepoint
	TestPlanLocation string `json:"testPlanLocation,omitempty"`

	// test plan on demand
	// Example: true
	TestPlanOnDemand bool `json:"testPlanOnDemand,omitempty"`

	// test reports location
	// Example: In Acumen's secure server
	TestReportsLocation string `json:"testReportsLocation,omitempty"`

	// test reports on demand
	// Example: true
	TestReportsOnDemand bool `json:"testReportsOnDemand,omitempty"`

	// test scripts location
	// Example: Github
	TestScriptsLocation string `json:"testScriptsLocation,omitempty"`

	// test scripts on demand
	// Example: true
	TestScriptsOnDemand bool `json:"testScriptsOnDemand,omitempty"`

	// version
	// Example: 22
	// Required: true
	Version *string `json:"version"`

	// year to retire replace
	// Example: 2023
	YearToRetireReplace string `json:"yearToRetireReplace,omitempty"`
}

// Validate validates this page system maintainer response
func (m *PageSystemMaintainerResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMajorRefreshDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextMajorRefreshDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemProductionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PageSystemMaintainerResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PageSystemMaintainerResponse) validateMajorRefreshDate(formats strfmt.Registry) error {
	if swag.IsZero(m.MajorRefreshDate) { // not required
		return nil
	}

	if err := validate.FormatOf("majorRefreshDate", "body", "date", m.MajorRefreshDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PageSystemMaintainerResponse) validateNextMajorRefreshDate(formats strfmt.Registry) error {
	if swag.IsZero(m.NextMajorRefreshDate) { // not required
		return nil
	}

	if err := validate.FormatOf("nextMajorRefreshDate", "body", "date", m.NextMajorRefreshDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PageSystemMaintainerResponse) validateSystemProductionDate(formats strfmt.Registry) error {
	if swag.IsZero(m.SystemProductionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("systemProductionDate", "body", "date", m.SystemProductionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PageSystemMaintainerResponse) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this page system maintainer response based on context it is used
func (m *PageSystemMaintainerResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PageSystemMaintainerResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PageSystemMaintainerResponse) UnmarshalBinary(b []byte) error {
	var res PageSystemMaintainerResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
