// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PageSystemLifecycle page system lifecycle
//
// swagger:model PageSystemLifecycle
type PageSystemLifecycle struct {

	// agile methodology use
	AgileMethodologyUse string `json:"agile_methodology_use,omitempty"`

	// bus artifacts on demand
	BusArtifactsOnDemand string `json:"bus_artifacts_on_demand,omitempty"`

	// dev complete percent
	DevCompletePercent string `json:"dev_complete_percent,omitempty"`

	// development work
	DevelopmentWork string `json:"development_work,omitempty"`

	// enterprise release
	EnterpriseRelease []*PageSystemLifecycleEnterpriseReleaseItems0 `json:"enterprise_release"`

	// id
	ID string `json:"id,omitempty"`

	// ops maint on demand
	OpsMaintOnDemand string `json:"ops_maint_on_demand,omitempty"`

	// planning retirement quart
	PlanningRetirementQuart string `json:"planning_retirement_quart,omitempty"`

	// release description
	ReleaseDescription string `json:"release_description,omitempty"`

	// req on demand
	ReqOnDemand string `json:"req_on_demand,omitempty"`

	// retire or replace
	RetireOrReplace string `json:"retire_or_replace,omitempty"`

	// retiredorreplace date
	RetiredorreplaceDate string `json:"retiredorreplace_date,omitempty"`

	// source code on demand
	SourceCodeOnDemand string `json:"source_code_on_demand,omitempty"`

	// system design on demand
	SystemDesignOnDemand string `json:"system_design_on_demand,omitempty"`

	// test plan on demand
	TestPlanOnDemand string `json:"test_plan_on_demand,omitempty"`

	// test reports on demand
	TestReportsOnDemand string `json:"test_reports_on_demand,omitempty"`

	// test script on demand
	TestScriptOnDemand string `json:"test_script_on_demand,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this page system lifecycle
func (m *PageSystemLifecycle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnterpriseRelease(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PageSystemLifecycle) validateEnterpriseRelease(formats strfmt.Registry) error {
	if swag.IsZero(m.EnterpriseRelease) { // not required
		return nil
	}

	for i := 0; i < len(m.EnterpriseRelease); i++ {
		if swag.IsZero(m.EnterpriseRelease[i]) { // not required
			continue
		}

		if m.EnterpriseRelease[i] != nil {
			if err := m.EnterpriseRelease[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("enterprise_release" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("enterprise_release" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this page system lifecycle based on the context it is used
func (m *PageSystemLifecycle) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEnterpriseRelease(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PageSystemLifecycle) contextValidateEnterpriseRelease(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EnterpriseRelease); i++ {

		if m.EnterpriseRelease[i] != nil {
			if err := m.EnterpriseRelease[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("enterprise_release" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("enterprise_release" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PageSystemLifecycle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PageSystemLifecycle) UnmarshalBinary(b []byte) error {
	var res PageSystemLifecycle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PageSystemLifecycleEnterpriseReleaseItems0 page system lifecycle enterprise release items0
//
// swagger:model PageSystemLifecycleEnterpriseReleaseItems0
type PageSystemLifecycleEnterpriseReleaseItems0 struct {

	// description
	Description string `json:"description,omitempty"`

	// enterprise release refstr
	EnterpriseReleaseRefstr string `json:"enterprise_release_refstr,omitempty"`

	// major release
	MajorRelease string `json:"major_release,omitempty"`

	// start date
	StartDate string `json:"start_date,omitempty"`
}

// Validate validates this page system lifecycle enterprise release items0
func (m *PageSystemLifecycleEnterpriseReleaseItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this page system lifecycle enterprise release items0 based on context it is used
func (m *PageSystemLifecycleEnterpriseReleaseItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PageSystemLifecycleEnterpriseReleaseItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PageSystemLifecycleEnterpriseReleaseItems0) UnmarshalBinary(b []byte) error {
	var res PageSystemLifecycleEnterpriseReleaseItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
