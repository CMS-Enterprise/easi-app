// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Urls urls
//
// swagger:model Urls
type Urls struct {

	// List of URLs that are to be updated or deleted based on the above flags
	URL []*URL `json:"Url"`

	// Boolean indicator for deleting the URL entry
	// Example: false
	Deleted bool `json:"deleted,omitempty"`

	// Boolean indicator for updating the URL entry
	// Example: false
	Updated bool `json:"updated,omitempty"`
}

// Validate validates this urls
func (m *Urls) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Urls) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	for i := 0; i < len(m.URL); i++ {
		if swag.IsZero(m.URL[i]) { // not required
			continue
		}

		if m.URL[i] != nil {
			if err := m.URL[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Url" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Url" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this urls based on the context it is used
func (m *Urls) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Urls) contextValidateURL(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.URL); i++ {

		if m.URL[i] != nil {
			if err := m.URL[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Url" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Url" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Urls) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Urls) UnmarshalBinary(b []byte) error {
	var res Urls
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
