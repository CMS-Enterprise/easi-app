// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PageSystemComponents page system components
//
// swagger:model PageSystemComponents
type PageSystemComponents struct {

	// system components
	SystemComponents []*SystemComponents `json:"SystemComponents"`

	// count
	// Example: 123
	// Required: true
	Count *int32 `json:"count"`

	// page name
	// Example: System Components
	PageName string `json:"pageName,omitempty"`

	// parent system Id
	// Example: 326-1550-0
	ParentSystemID string `json:"parentSystemId,omitempty"`

	// sub system
	// Example: Yes/No
	SubSystem string `json:"subSystem,omitempty"`

	// system Id
	// Example: 326-1100-0
	SystemID string `json:"systemId,omitempty"`
}

// Validate validates this page system components
func (m *PageSystemComponents) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSystemComponents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PageSystemComponents) validateSystemComponents(formats strfmt.Registry) error {
	if swag.IsZero(m.SystemComponents) { // not required
		return nil
	}

	for i := 0; i < len(m.SystemComponents); i++ {
		if swag.IsZero(m.SystemComponents[i]) { // not required
			continue
		}

		if m.SystemComponents[i] != nil {
			if err := m.SystemComponents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SystemComponents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SystemComponents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PageSystemComponents) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("count", "body", m.Count); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this page system components based on the context it is used
func (m *PageSystemComponents) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSystemComponents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PageSystemComponents) contextValidateSystemComponents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SystemComponents); i++ {

		if m.SystemComponents[i] != nil {
			if err := m.SystemComponents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SystemComponents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SystemComponents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PageSystemComponents) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PageSystemComponents) UnmarshalBinary(b []byte) error {
	var res PageSystemComponents
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
