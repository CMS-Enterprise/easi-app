// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RoleType role type
//
// swagger:model RoleType
type RoleType struct {

	// application
	// Required: true
	// Enum: [all alfabet]
	Application *string `json:"application"`

	// description
	Description string `json:"description,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	// Enum: [AI Contact API Contact Budget Analyst Business Owner Business Question Contact Contracting Officer's Representative (COR) DA Reviewer Data Center Contact ISSO Government Task Lead (GTL) Project Lead QA Reviewer System Maintainer Subject Matter Expert (SME) Support Staff Survey Point of Contact Technical System Issues Contact]
	Name *string `json:"name"`
}

// Validate validates this role type
func (m *RoleType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var roleTypeTypeApplicationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["all","alfabet"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		roleTypeTypeApplicationPropEnum = append(roleTypeTypeApplicationPropEnum, v)
	}
}

const (

	// RoleTypeApplicationAll captures enum value "all"
	RoleTypeApplicationAll string = "all"

	// RoleTypeApplicationAlfabet captures enum value "alfabet"
	RoleTypeApplicationAlfabet string = "alfabet"
)

// prop value enum
func (m *RoleType) validateApplicationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, roleTypeTypeApplicationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RoleType) validateApplication(formats strfmt.Registry) error {

	if err := validate.Required("application", "body", m.Application); err != nil {
		return err
	}

	// value enum
	if err := m.validateApplicationEnum("application", "body", *m.Application); err != nil {
		return err
	}

	return nil
}

func (m *RoleType) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var roleTypeTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AI Contact","API Contact","Budget Analyst","Business Owner","Business Question Contact","Contracting Officer's Representative (COR)","DA Reviewer","Data Center Contact","ISSO Government Task Lead (GTL)","Project Lead","QA Reviewer","System Maintainer","Subject Matter Expert (SME)","Support Staff","Survey Point of Contact","Technical System Issues Contact"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		roleTypeTypeNamePropEnum = append(roleTypeTypeNamePropEnum, v)
	}
}

const (

	// RoleTypeNameAIContact captures enum value "AI Contact"
	RoleTypeNameAIContact string = "AI Contact"

	// RoleTypeNameAPIContact captures enum value "API Contact"
	RoleTypeNameAPIContact string = "API Contact"

	// RoleTypeNameBudgetAnalyst captures enum value "Budget Analyst"
	RoleTypeNameBudgetAnalyst string = "Budget Analyst"

	// RoleTypeNameBusinessOwner captures enum value "Business Owner"
	RoleTypeNameBusinessOwner string = "Business Owner"

	// RoleTypeNameBusinessQuestionContact captures enum value "Business Question Contact"
	RoleTypeNameBusinessQuestionContact string = "Business Question Contact"

	// RoleTypeNameContractingOfficersRepresentativeCOR captures enum value "Contracting Officer's Representative (COR)"
	RoleTypeNameContractingOfficersRepresentativeCOR string = "Contracting Officer's Representative (COR)"

	// RoleTypeNameDAReviewer captures enum value "DA Reviewer"
	RoleTypeNameDAReviewer string = "DA Reviewer"

	// RoleTypeNameDataCenterContact captures enum value "Data Center Contact"
	RoleTypeNameDataCenterContact string = "Data Center Contact"

	// RoleTypeNameISSOGovernmentTaskLeadGTL captures enum value "ISSO Government Task Lead (GTL)"
	RoleTypeNameISSOGovernmentTaskLeadGTL string = "ISSO Government Task Lead (GTL)"

	// RoleTypeNameProjectLead captures enum value "Project Lead"
	RoleTypeNameProjectLead string = "Project Lead"

	// RoleTypeNameQAReviewer captures enum value "QA Reviewer"
	RoleTypeNameQAReviewer string = "QA Reviewer"

	// RoleTypeNameSystemMaintainer captures enum value "System Maintainer"
	RoleTypeNameSystemMaintainer string = "System Maintainer"

	// RoleTypeNameSubjectMatterExpertSME captures enum value "Subject Matter Expert (SME)"
	RoleTypeNameSubjectMatterExpertSME string = "Subject Matter Expert (SME)"

	// RoleTypeNameSupportStaff captures enum value "Support Staff"
	RoleTypeNameSupportStaff string = "Support Staff"

	// RoleTypeNameSurveyPointOfContact captures enum value "Survey Point of Contact"
	RoleTypeNameSurveyPointOfContact string = "Survey Point of Contact"

	// RoleTypeNameTechnicalSystemIssuesContact captures enum value "Technical System Issues Contact"
	RoleTypeNameTechnicalSystemIssuesContact string = "Technical System Issues Contact"
)

// prop value enum
func (m *RoleType) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, roleTypeTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RoleType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	// value enum
	if err := m.validateNameEnum("name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this role type based on context it is used
func (m *RoleType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RoleType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoleType) UnmarshalBinary(b []byte) error {
	var res RoleType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
