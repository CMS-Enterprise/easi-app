// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Note note
//
// swagger:model Note
type Note struct {

	// created on
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"createdOn,omitempty"`

	// note
	// Example: This is a note
	// Required: true
	Note *string `json:"note"`

	// note Id
	// Example: 9999
	NoteID string `json:"noteId,omitempty"`

	// page name
	// Example: PageName
	// Required: true
	PageName *string `json:"pageName"`

	// system Id
	// Example: 326-1-0
	// Required: true
	SystemID *string `json:"systemId"`

	// user first
	// Example: John
	UserFirst string `json:"userFirst,omitempty"`

	// user Id
	// Example: ABCD
	// Required: true
	UserID *string `json:"userId"`

	// user last
	// Example: Doe
	UserLast string `json:"userLast,omitempty"`

	// user role
	// Example: requestor
	UserRole string `json:"userRole,omitempty"`
}

// Validate validates this note
func (m *Note) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePageName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Note) validateCreatedOn(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("createdOn", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Note) validateNote(formats strfmt.Registry) error {

	if err := validate.Required("note", "body", m.Note); err != nil {
		return err
	}

	return nil
}

func (m *Note) validatePageName(formats strfmt.Registry) error {

	if err := validate.Required("pageName", "body", m.PageName); err != nil {
		return err
	}

	return nil
}

func (m *Note) validateSystemID(formats strfmt.Registry) error {

	if err := validate.Required("systemId", "body", m.SystemID); err != nil {
		return err
	}

	return nil
}

func (m *Note) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this note based on context it is used
func (m *Note) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Note) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Note) UnmarshalBinary(b []byte) error {
	var res Note
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
