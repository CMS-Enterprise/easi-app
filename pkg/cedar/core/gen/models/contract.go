// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Contract contract
//
// swagger:model Contract
type Contract struct {

	// p o p end date
	POPEndDate string `json:"POPEndDate,omitempty"`

	// p o p start date
	POPStartDate string `json:"POPStartDate,omitempty"`

	// Contract number
	// Example: HHSM500201600052I
	// Required: true
	AwardID *string `json:"awardId"`

	// Is ADO Parent Contract, Yes/No
	// Example: yes
	ContractADO string `json:"contractADO,omitempty"`

	// contract deliverable Id
	// Example: 11-22-333
	ContractDeliverableID string `json:"contractDeliverableId,omitempty"`

	// contract name
	ContractName string `json:"contractName,omitempty"`

	// Contract description
	// Example: Strategic partners acquisition readiness
	Description string `json:"description,omitempty"`

	// id
	// Example: 18-3-0
	// Required: true
	ID *string `json:"id"`

	// Parent contract number
	// Example: HHSM500201600052I
	// Required: true
	ParentAwardID *string `json:"parentAwardId"`

	// System which this budget funds
	// Example: 123-45-678
	SystemID string `json:"systemId,omitempty"`
}

// Validate validates this contract
func (m *Contract) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwardID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentAwardID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Contract) validateAwardID(formats strfmt.Registry) error {

	if err := validate.Required("awardId", "body", m.AwardID); err != nil {
		return err
	}

	return nil
}

func (m *Contract) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Contract) validateParentAwardID(formats strfmt.Registry) error {

	if err := validate.Required("parentAwardId", "body", m.ParentAwardID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this contract based on context it is used
func (m *Contract) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Contract) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Contract) UnmarshalBinary(b []byte) error {
	var res Contract
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
