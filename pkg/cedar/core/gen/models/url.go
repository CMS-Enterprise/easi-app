// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// URL Url
//
// swagger:model Url
type URL struct {

	// A valid and full URL
	Address string `json:"address,omitempty"`

	// A boolean flag to indicate whether URL is an API Endpoint
	IsAPIEndpoint bool `json:"isApiEndpoint,omitempty"`

	// A boolean flag to indicate whether the application is behind a Web Application Firewall (WAF)
	IsBehindWebApplicationFirewall bool `json:"isBehindWebApplicationFirewall,omitempty"`

	// A boolean flag to indicate if this URL provides access to a versioned code repository?
	IsVersionCodeRepository bool `json:"isVersionCodeRepository,omitempty"`

	// The hosting environment associated with a specific URL
	// Example: Production
	URLHostingEnv string `json:"urlHostingEnv,omitempty"`

	// Unique key that uniquely identified the URL in database
	// Example: 218-10-0
	// Required: true
	URLID *string `json:"urlId"`
}

// Validate validates this Url
func (m *URL) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateURLID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *URL) validateURLID(formats strfmt.Registry) error {

	if err := validate.Required("urlId", "body", m.URLID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this Url based on context it is used
func (m *URL) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *URL) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *URL) UnmarshalBinary(b []byte) error {
	var res URL
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
