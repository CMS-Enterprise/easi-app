// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Budget budget
//
// swagger:model Budget
type Budget struct {

	// Flag indicating whether this budget was deleted by the user
	Deleted bool `json:"deleted,omitempty"`

	// Description of the allocation of this budget to the system in question
	// Example: Most of this funding is directly and only for this system (over 80%)
	Funding string `json:"funding,omitempty"`

	// Cross-reference ID for relationship between budget project and application in system of record
	// Example: 123-45-678
	FundingID string `json:"fundingId,omitempty"`

	// OFM budget internal ID in system of record
	// Example: 589-329-0
	ID string `json:"id,omitempty"`

	// OFM budget project ID in system of record
	// Example: 000010
	// Required: true
	ProjectID *string `json:"projectId"`

	// Project Title in system of record
	// Example: Consolidated Information Technology Infrastructure Contract (CITIC) - Baltimore Data Center Operations
	ProjectTitle string `json:"projectTitle,omitempty"`

	// Flag indicating whether this budget was added or updated by the user
	Updated bool `json:"updated,omitempty"`
}

// Validate validates this budget
func (m *Budget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Budget) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("projectId", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this budget based on context it is used
func (m *Budget) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Budget) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Budget) UnmarshalBinary(b []byte) error {
	var res Budget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
