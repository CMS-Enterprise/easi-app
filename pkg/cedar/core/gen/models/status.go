// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Status status
//
// swagger:model Status
type Status struct {

	// display page name
	// Example: Page Name
	DisplayPageName string `json:"displayPageName,omitempty"`

	// last updated by first name
	// Example: John
	LastUpdatedByFirstName string `json:"lastUpdatedByFirstName,omitempty"`

	// last updated by Id
	// Example: ABCD
	LastUpdatedByID string `json:"lastUpdatedById,omitempty"`

	// last updated by last name
	// Example: Smith
	LastUpdatedByLastName string `json:"lastUpdatedByLastName,omitempty"`

	// last updated date
	// Example: 2020-11-03T00:00:00.000Z
	// Format: date-time
	LastUpdatedDate strfmt.DateTime `json:"lastUpdatedDate,omitempty"`

	// page name
	// Example: PageName
	PageName string `json:"pageName,omitempty"`

	// percent complete
	// Example: 100
	PercentComplete int32 `json:"percentComplete,omitempty"`

	// respondent first name
	// Example: John
	RespondentFirstName string `json:"respondentFirstName,omitempty"`

	// respondent Id
	// Example: ABCD
	RespondentID string `json:"respondentId,omitempty"`

	// respondent last name
	// Example: Smith
	RespondentLastName string `json:"respondentLastName,omitempty"`

	// status
	// Example: Not Started
	// Required: true
	Status *string `json:"status"`

	// status Id
	// Example: 9999
	StatusID string `json:"statusId,omitempty"`

	// system Id
	// Example: 326-1-0
	// Required: true
	SystemID *string `json:"systemId"`
}

// Validate validates this status
func (m *Status) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastUpdatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Status) validateLastUpdatedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdatedDate", "body", "date-time", m.LastUpdatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Status) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Status) validateSystemID(formats strfmt.Registry) error {

	if err := validate.Required("systemId", "body", m.SystemID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this status based on context it is used
func (m *Status) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Status) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Status) UnmarshalBinary(b []byte) error {
	var res Status
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
