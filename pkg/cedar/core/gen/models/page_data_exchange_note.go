// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PageDataExchangeNote page data exchange note
//
// swagger:model PageDataExchangeNote
type PageDataExchangeNote struct {

	// date
	// Example: 2020-09-29T10:34:00.000Z
	// Format: date-time
	Date strfmt.DateTime `json:"date,omitempty"`

	// exchange Id
	// Example: 139-186-0
	// Required: true
	ExchangeID *string `json:"exchangeId"`

	// note
	// Example: Sample note
	// Required: true
	Note *string `json:"note"`

	// role
	// Example: Reviewer
	Role string `json:"role,omitempty"`

	// user
	// Example: John Smith
	// Required: true
	User *string `json:"user"`
}

// Validate validates this page data exchange note
func (m *PageDataExchangeNote) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExchangeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PageDataExchangeNote) validateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PageDataExchangeNote) validateExchangeID(formats strfmt.Registry) error {

	if err := validate.Required("exchangeId", "body", m.ExchangeID); err != nil {
		return err
	}

	return nil
}

func (m *PageDataExchangeNote) validateNote(formats strfmt.Registry) error {

	if err := validate.Required("note", "body", m.Note); err != nil {
		return err
	}

	return nil
}

func (m *PageDataExchangeNote) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this page data exchange note based on context it is used
func (m *PageDataExchangeNote) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PageDataExchangeNote) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PageDataExchangeNote) UnmarshalBinary(b []byte) error {
	var res PageDataExchangeNote
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
