// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PageDataExchangeStatus page data exchange status
//
// swagger:model PageDataExchangeStatus
type PageDataExchangeStatus struct {

	// deleted
	Deleted bool `json:"deleted,omitempty"`

	// direction
	// Required: true
	// Enum: [sender receiver both]
	Direction *string `json:"direction"`

	// exchange Id
	// Example: 139-6353-0
	// Required: true
	ExchangeID *string `json:"exchangeId"`

	// partner Id
	// Example: 326-1001-0
	// Required: true
	PartnerID *string `json:"partnerId"`

	// partner status
	// Example: Requires Response
	// Required: true
	PartnerStatus *string `json:"partnerStatus"`

	// reviewer status
	// Example: Issues Found
	// Required: true
	ReviewerStatus *string `json:"reviewerStatus"`

	// system Id
	// Example: 326-1091-0
	// Required: true
	SystemID *string `json:"systemId"`

	// system status
	// Example: Requires Response
	// Required: true
	SystemStatus *string `json:"systemStatus"`
}

// Validate validates this page data exchange status
func (m *PageDataExchangeStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExchangeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartnerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartnerStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReviewerStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var pageDataExchangeStatusTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sender","receiver","both"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pageDataExchangeStatusTypeDirectionPropEnum = append(pageDataExchangeStatusTypeDirectionPropEnum, v)
	}
}

const (

	// PageDataExchangeStatusDirectionSender captures enum value "sender"
	PageDataExchangeStatusDirectionSender string = "sender"

	// PageDataExchangeStatusDirectionReceiver captures enum value "receiver"
	PageDataExchangeStatusDirectionReceiver string = "receiver"

	// PageDataExchangeStatusDirectionBoth captures enum value "both"
	PageDataExchangeStatusDirectionBoth string = "both"
)

// prop value enum
func (m *PageDataExchangeStatus) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, pageDataExchangeStatusTypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PageDataExchangeStatus) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("direction", "body", m.Direction); err != nil {
		return err
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", *m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *PageDataExchangeStatus) validateExchangeID(formats strfmt.Registry) error {

	if err := validate.Required("exchangeId", "body", m.ExchangeID); err != nil {
		return err
	}

	return nil
}

func (m *PageDataExchangeStatus) validatePartnerID(formats strfmt.Registry) error {

	if err := validate.Required("partnerId", "body", m.PartnerID); err != nil {
		return err
	}

	return nil
}

func (m *PageDataExchangeStatus) validatePartnerStatus(formats strfmt.Registry) error {

	if err := validate.Required("partnerStatus", "body", m.PartnerStatus); err != nil {
		return err
	}

	return nil
}

func (m *PageDataExchangeStatus) validateReviewerStatus(formats strfmt.Registry) error {

	if err := validate.Required("reviewerStatus", "body", m.ReviewerStatus); err != nil {
		return err
	}

	return nil
}

func (m *PageDataExchangeStatus) validateSystemID(formats strfmt.Registry) error {

	if err := validate.Required("systemId", "body", m.SystemID); err != nil {
		return err
	}

	return nil
}

func (m *PageDataExchangeStatus) validateSystemStatus(formats strfmt.Registry) error {

	if err := validate.Required("systemStatus", "body", m.SystemStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this page data exchange status based on context it is used
func (m *PageDataExchangeStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PageDataExchangeStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PageDataExchangeStatus) UnmarshalBinary(b []byte) error {
	var res PageDataExchangeStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
