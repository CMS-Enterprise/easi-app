// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PageDataCenters page data centers
//
// swagger:model PageDataCenters
type PageDataCenters struct {

	// deployments
	Deployments []*Deployments `json:"Deployments"`

	// count
	// Required: true
	Count *int32 `json:"count"`

	// moving to cloud
	// Example: Yes
	MovingToCloud string `json:"movingToCloud,omitempty"`

	// moving to cloud date
	// Example: 2021-10-01
	// Format: date
	MovingToCloudDate strfmt.Date `json:"movingToCloudDate,omitempty"`

	// page name
	// Example: DataCenterHostingEnvironments
	PageName string `json:"pageName,omitempty"`

	// system Id
	// Example: 123-45-67
	SystemID string `json:"systemId,omitempty"`
}

// Validate validates this page data centers
func (m *PageDataCenters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeployments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMovingToCloudDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PageDataCenters) validateDeployments(formats strfmt.Registry) error {
	if swag.IsZero(m.Deployments) { // not required
		return nil
	}

	for i := 0; i < len(m.Deployments); i++ {
		if swag.IsZero(m.Deployments[i]) { // not required
			continue
		}

		if m.Deployments[i] != nil {
			if err := m.Deployments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Deployments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Deployments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PageDataCenters) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("count", "body", m.Count); err != nil {
		return err
	}

	return nil
}

func (m *PageDataCenters) validateMovingToCloudDate(formats strfmt.Registry) error {
	if swag.IsZero(m.MovingToCloudDate) { // not required
		return nil
	}

	if err := validate.FormatOf("movingToCloudDate", "body", "date", m.MovingToCloudDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this page data centers based on the context it is used
func (m *PageDataCenters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeployments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PageDataCenters) contextValidateDeployments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Deployments); i++ {

		if m.Deployments[i] != nil {
			if err := m.Deployments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Deployments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Deployments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PageDataCenters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PageDataCenters) UnmarshalBinary(b []byte) error {
	var res PageDataCenters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
