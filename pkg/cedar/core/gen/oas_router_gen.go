// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'g': // Prefix: "gateway/"

				if l := len("gateway/"); len(elem) >= l && elem[0:l] == "gateway/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'C': // Prefix: "CEDAR"

					if l := len("CEDAR"); len(elem) >= l && elem[0:l] == "CEDAR" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '%': // Prefix: "%20Core%20API/"

						if l := len("%20Core%20API/"); len(elem) >= l && elem[0:l] == "%20Core%20API/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '2': // Prefix: "2.0.0/"

							if l := len("2.0.0/"); len(elem) >= l && elem[0:l] == "2.0.0/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "authorityToOperate"

								if l := len("authorityToOperate"); len(elem) >= l && elem[0:l] == "authorityToOperate" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGatewayCEDAR20Core20API200AuthorityToOperateGetRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

							case 'b': // Prefix: "budget"

								if l := len("budget"); len(elem) >= l && elem[0:l] == "budget" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGatewayCEDAR20Core20API200BudgetGetRequest([0]string{}, elemIsEscaped, w, r)
									case "POST":
										s.handleGatewayCEDAR20Core20API200BudgetPostRequest([0]string{}, elemIsEscaped, w, r)
									case "PUT":
										s.handleGatewayCEDAR20Core20API200BudgetPutRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,POST,PUT")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/list"

									if l := len("/list"); len(elem) >= l && elem[0:l] == "/list" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleGatewayCEDAR20Core20API200BudgetListDeleteRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE")
										}

										return
									}

								case 'S': // Prefix: "SystemCostFind"

									if l := len("SystemCostFind"); len(elem) >= l && elem[0:l] == "SystemCostFind" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGatewayCEDAR20Core20API200BudgetSystemCostFindGetRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

								}

							case 'c': // Prefix: "co"

								if l := len("co"); len(elem) >= l && elem[0:l] == "co" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'm': // Prefix: "mponent"

									if l := len("mponent"); len(elem) >= l && elem[0:l] == "mponent" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleGatewayCEDAR20Core20API200ComponentPostRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								case 'n': // Prefix: "ntract"

									if l := len("ntract"); len(elem) >= l && elem[0:l] == "ntract" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleGatewayCEDAR20Core20API200ContractPostRequest([0]string{}, elemIsEscaped, w, r)
										case "PUT":
											s.handleGatewayCEDAR20Core20API200ContractPutRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST,PUT")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/list"

										if l := len("/list"); len(elem) >= l && elem[0:l] == "/list" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "DELETE":
												s.handleGatewayCEDAR20Core20API200ContractListDeleteRequest([0]string{}, elemIsEscaped, w, r)
											case "GET":
												s.handleGatewayCEDAR20Core20API200ContractListGetRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "DELETE,GET")
											}

											return
										}

									}

								case 's': // Prefix: "stType/list"

									if l := len("stType/list"); len(elem) >= l && elem[0:l] == "stType/list" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGatewayCEDAR20Core20API200CostTypeListGetRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

								}

							case 'd': // Prefix: "d"

								if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'e': // Prefix: "eployment"

									if l := len("eployment"); len(elem) >= l && elem[0:l] == "eployment" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleGatewayCEDAR20Core20API200DeploymentDeleteRequest([0]string{}, elemIsEscaped, w, r)
										case "GET":
											s.handleGatewayCEDAR20Core20API200DeploymentGetRequest([0]string{}, elemIsEscaped, w, r)
										case "POST":
											s.handleGatewayCEDAR20Core20API200DeploymentPostRequest([0]string{}, elemIsEscaped, w, r)
										case "PUT":
											s.handleGatewayCEDAR20Core20API200DeploymentPutRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,GET,POST,PUT")
										}

										return
									}

								case 'o': // Prefix: "omainModel"

									if l := len("omainModel"); len(elem) >= l && elem[0:l] == "omainModel" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/list"

										if l := len("/list"); len(elem) >= l && elem[0:l] == "/list" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGatewayCEDAR20Core20API200DomainModelListGetRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

									case 'L': // Prefix: "Level"

										if l := len("Level"); len(elem) >= l && elem[0:l] == "Level" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGatewayCEDAR20Core20API200DomainModelLevelGetRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

									case 'N': // Prefix: "Name"

										if l := len("Name"); len(elem) >= l && elem[0:l] == "Name" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGatewayCEDAR20Core20API200DomainModelNameGetRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

									}

								}

							case 'e': // Prefix: "e"

								if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'n': // Prefix: "numeration"

									if l := len("numeration"); len(elem) >= l && elem[0:l] == "numeration" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGatewayCEDAR20Core20API200EnumerationGetRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

								case 'x': // Prefix: "xchange"

									if l := len("xchange"); len(elem) >= l && elem[0:l] == "xchange" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGatewayCEDAR20Core20API200ExchangeGetRequest([0]string{}, elemIsEscaped, w, r)
										case "PUT":
											s.handleGatewayCEDAR20Core20API200ExchangePutRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET,PUT")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"

										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "id"
										// Leaf parameter, slashes are prohibited
										idx := strings.IndexByte(elem, '/')
										if idx >= 0 {
											break
										}
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGatewayCEDAR20Core20API200ExchangeIDGetRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

									}

								}

							case 'o': // Prefix: "organization"

								if l := len("organization"); len(elem) >= l && elem[0:l] == "organization" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGatewayCEDAR20Core20API200OrganizationGetRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

							case 'r': // Prefix: "role"

								if l := len("role"); len(elem) >= l && elem[0:l] == "role" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGatewayCEDAR20Core20API200RoleGetRequest([0]string{}, elemIsEscaped, w, r)
									case "POST":
										s.handleGatewayCEDAR20Core20API200RolePostRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"

									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'l': // Prefix: "list"

										if l := len("list"); len(elem) >= l && elem[0:l] == "list" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "DELETE":
												s.handleGatewayCEDAR20Core20API200RoleListDeleteRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "DELETE")
											}

											return
										}

									case 't': // Prefix: "type/"

										if l := len("type/"); len(elem) >= l && elem[0:l] == "type/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "application"
										// Leaf parameter, slashes are prohibited
										idx := strings.IndexByte(elem, '/')
										if idx >= 0 {
											break
										}
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGatewayCEDAR20Core20API200RoleTypeApplicationGetRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

									}

								}

							case 's': // Prefix: "s"

								if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'o': // Prefix: "oftwareProducts"

									if l := len("oftwareProducts"); len(elem) >= l && elem[0:l] == "oftwareProducts" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGatewayCEDAR20Core20API200SoftwareProductsGetRequest([0]string{}, elemIsEscaped, w, r)
										case "POST":
											s.handleGatewayCEDAR20Core20API200SoftwareProductsPostRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET,POST")
										}

										return
									}

								case 't': // Prefix: "takeholder"

									if l := len("takeholder"); len(elem) >= l && elem[0:l] == "takeholder" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGatewayCEDAR20Core20API200StakeholderGetRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

								case 'u': // Prefix: "upportContact"

									if l := len("upportContact"); len(elem) >= l && elem[0:l] == "upportContact" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleGatewayCEDAR20Core20API200SupportContactDeleteRequest([0]string{}, elemIsEscaped, w, r)
										case "GET":
											s.handleGatewayCEDAR20Core20API200SupportContactGetRequest([0]string{}, elemIsEscaped, w, r)
										case "POST":
											s.handleGatewayCEDAR20Core20API200SupportContactPostRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,GET,POST")
										}

										return
									}

								case 'y': // Prefix: "ystem/"

									if l := len("ystem/"); len(elem) >= l && elem[0:l] == "ystem/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'd': // Prefix: "detail/"

										if l := len("detail/"); len(elem) >= l && elem[0:l] == "detail/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "id"
										// Leaf parameter, slashes are prohibited
										idx := strings.IndexByte(elem, '/')
										if idx >= 0 {
											break
										}
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGatewayCEDAR20Core20API200SystemDetailIDGetRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

									case 's': // Prefix: "summary"

										if l := len("summary"); len(elem) >= l && elem[0:l] == "summary" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleGatewayCEDAR20Core20API200SystemSummaryGetRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"

											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "id"
											// Leaf parameter, slashes are prohibited
											idx := strings.IndexByte(elem, '/')
											if idx >= 0 {
												break
											}
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleGatewayCEDAR20Core20API200SystemSummaryIDGetRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET")
												}

												return
											}

										}

									}

								}

							case 't': // Prefix: "threat"

								if l := len("threat"); len(elem) >= l && elem[0:l] == "threat" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGatewayCEDAR20Core20API200ThreatGetRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

							case 'u': // Prefix: "u"

								if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'r': // Prefix: "rl/"

									if l := len("rl/"); len(elem) >= l && elem[0:l] == "rl/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "id"
									// Leaf parameter, slashes are prohibited
									idx := strings.IndexByte(elem, '/')
									if idx >= 0 {
										break
									}
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGatewayCEDAR20Core20API200URLIDGetRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

								case 's': // Prefix: "ser"

									if l := len("ser"); len(elem) >= l && elem[0:l] == "ser" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGatewayCEDAR20Core20API200UserGetRequest([0]string{}, elemIsEscaped, w, r)
										case "POST":
											s.handleGatewayCEDAR20Core20API200UserPostRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET,POST")
										}

										return
									}

								}

							}

						case 'e': // Prefix: "exchange"

							if l := len("exchange"); len(elem) >= l && elem[0:l] == "exchange" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleGatewayCEDAR20Core20APIExchangePostRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						}

					case 'I': // Prefix: "Intake/1.0/"

						if l := len("Intake/1.0/"); len(elem) >= l && elem[0:l] == "Intake/1.0/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "client/"

							if l := len("client/"); len(elem) >= l && elem[0:l] == "client/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGatewayCEDARIntake10ClientIDGetRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						case 'h': // Prefix: "healthCheck"

							if l := len("healthCheck"); len(elem) >= l && elem[0:l] == "healthCheck" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGatewayCEDARIntake10HealthCheckGetRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						case 'i': // Prefix: "intake"

							if l := len("intake"); len(elem) >= l && elem[0:l] == "intake" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleGatewayCEDARIntake10IntakePostRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "cedar/"

									if l := len("cedar/"); len(elem) >= l && elem[0:l] == "cedar/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "id"
									// Leaf parameter, slashes are prohibited
									idx := strings.IndexByte(elem, '/')
									if idx >= 0 {
										break
									}
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGatewayCEDARIntake10IntakeCedarIDGetRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

								case 's': // Prefix: "status"

									if l := len("status"); len(elem) >= l && elem[0:l] == "status" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGatewayCEDARIntake10IntakeStatusGetRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

								}

							}

						case 's': // Prefix: "status/c"

							if l := len("status/c"); len(elem) >= l && elem[0:l] == "status/c" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "edar/"

								if l := len("edar/"); len(elem) >= l && elem[0:l] == "edar/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Leaf parameter, slashes are prohibited
								idx := strings.IndexByte(elem, '/')
								if idx >= 0 {
									break
								}
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGatewayCEDARIntake10StatusCedarIDGetRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

							case 'l': // Prefix: "lient/"

								if l := len("lient/"); len(elem) >= l && elem[0:l] == "lient/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Leaf parameter, slashes are prohibited
								idx := strings.IndexByte(elem, '/')
								if idx >= 0 {
									break
								}
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGatewayCEDARIntake10StatusClientIDGetRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

							}

						}

					}

				case 'L': // Prefix: "LDAP/1.0/"

					if l := len("LDAP/1.0/"); len(elem) >= l && elem[0:l] == "LDAP/1.0/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "authenticate"

						if l := len("authenticate"); len(elem) >= l && elem[0:l] == "authenticate" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleGatewayLDAP10AuthenticatePostRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'p': // Prefix: "person"

						if l := len("person"); len(elem) >= l && elem[0:l] == "person" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGatewayLDAP10PersonGetRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGatewayLDAP10PersonIDGetRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						}

					}

				case 'S': // Prefix: "System%20Census%20Core%20API/2.0.0/"

					if l := len("System%20Census%20Core%20API/2.0.0/"); len(elem) >= l && elem[0:l] == "System%20Census%20Core%20API/2.0.0/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "admin"

						if l := len("admin"); len(elem) >= l && elem[0:l] == "admin" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/reviewer"

							if l := len("/reviewer"); len(elem) >= l && elem[0:l] == "/reviewer" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGatewaySystem20Census20Core20API200AdminReviewerGetRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						case 'R': // Prefix: "Reviewer"

							if l := len("Reviewer"); len(elem) >= l && elem[0:l] == "Reviewer" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleGatewaySystem20Census20Core20API200AdminReviewerDeleteRequest([0]string{}, elemIsEscaped, w, r)
								case "POST":
									s.handleGatewaySystem20Census20Core20API200AdminReviewerPostRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,POST")
								}

								return
							}

						}

					case 'b': // Prefix: "bu"

						if l := len("bu"); len(elem) >= l && elem[0:l] == "bu" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'd': // Prefix: "dgetAndContracts"

							if l := len("dgetAndContracts"); len(elem) >= l && elem[0:l] == "dgetAndContracts" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGatewaySystem20Census20Core20API200BudgetAndContractsGetRequest([0]string{}, elemIsEscaped, w, r)
								case "POST":
									s.handleGatewaySystem20Census20Core20API200BudgetAndContractsPostRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,POST")
								}

								return
							}

						case 's': // Prefix: "sinessOwner"

							if l := len("sinessOwner"); len(elem) >= l && elem[0:l] == "sinessOwner" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleGatewaySystem20Census20Core20API200BusinessOwnerPostRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						}

					case 'd': // Prefix: "d"

						if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "ataExchange"

							if l := len("ataExchange"); len(elem) >= l && elem[0:l] == "ataExchange" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'n': // Prefix: "notes"

									if l := len("notes"); len(elem) >= l && elem[0:l] == "notes" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleGatewaySystem20Census20Core20API200DataExchangeNotesDeleteRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE")
										}

										return
									}

								case 's': // Prefix: "status"

									if l := len("status"); len(elem) >= l && elem[0:l] == "status" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleGatewaySystem20Census20Core20API200DataExchangeStatusDeleteRequest([0]string{}, elemIsEscaped, w, r)
										case "GET":
											s.handleGatewaySystem20Census20Core20API200DataExchangeStatusGetRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,GET")
										}

										return
									}

								}

							case 'N': // Prefix: "Notes"

								if l := len("Notes"); len(elem) >= l && elem[0:l] == "Notes" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGatewaySystem20Census20Core20API200DataExchangeNotesGetRequest([0]string{}, elemIsEscaped, w, r)
									case "POST":
										s.handleGatewaySystem20Census20Core20API200DataExchangeNotesPostRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,POST")
									}

									return
								}

							}

						case 'r': // Prefix: "rm"

							if l := len("rm"); len(elem) >= l && elem[0:l] == "rm" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGatewaySystem20Census20Core20API200DrmGetRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						}

					case 'n': // Prefix: "note"

						if l := len("note"); len(elem) >= l && elem[0:l] == "note" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleGatewaySystem20Census20Core20API200NotePostRequest([0]string{}, elemIsEscaped, w, r)
							case "PUT":
								s.handleGatewaySystem20Census20Core20API200NotePutRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST,PUT")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/list"

							if l := len("/list"); len(elem) >= l && elem[0:l] == "/list" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleGatewaySystem20Census20Core20API200NoteListDeleteRequest([0]string{}, elemIsEscaped, w, r)
								case "GET":
									s.handleGatewaySystem20Census20Core20API200NoteListGetRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET")
								}

								return
							}

						}

					case 'p': // Prefix: "p"

						if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "age/"

							if l := len("age/"); len(elem) >= l && elem[0:l] == "age/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'U': // Prefix: "Urls"

								if l := len("Urls"); len(elem) >= l && elem[0:l] == "Urls" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGatewaySystem20Census20Core20API200PageUrlsGetRequest([0]string{}, elemIsEscaped, w, r)
									case "POST":
										s.handleGatewaySystem20Census20Core20API200PageUrlsPostRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,POST")
									}

									return
								}

							case 'b': // Prefix: "businessOwner"

								if l := len("businessOwner"); len(elem) >= l && elem[0:l] == "businessOwner" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGatewaySystem20Census20Core20API200PageBusinessOwnerGetRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

							case 'd': // Prefix: "data"

								if l := len("data"); len(elem) >= l && elem[0:l] == "data" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'C': // Prefix: "Centers"

									if l := len("Centers"); len(elem) >= l && elem[0:l] == "Centers" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGatewaySystem20Census20Core20API200PageDataCentersGetRequest([0]string{}, elemIsEscaped, w, r)
										case "POST":
											s.handleGatewaySystem20Census20Core20API200PageDataCentersPostRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET,POST")
										}

										return
									}

								case 'E': // Prefix: "Exchange"

									if l := len("Exchange"); len(elem) >= l && elem[0:l] == "Exchange" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGatewaySystem20Census20Core20API200PageDataExchangeGetRequest([0]string{}, elemIsEscaped, w, r)
										case "POST":
											s.handleGatewaySystem20Census20Core20API200PageDataExchangePostRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET,POST")
										}

										return
									}

								}

							case 's': // Prefix: "s"

								if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'o': // Prefix: "oftwareProducts"

									if l := len("oftwareProducts"); len(elem) >= l && elem[0:l] == "oftwareProducts" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGatewaySystem20Census20Core20API200PageSoftwareProductsGetRequest([0]string{}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

								case 'y': // Prefix: "ystem"

									if l := len("ystem"); len(elem) >= l && elem[0:l] == "ystem" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'D': // Prefix: "Data"

										if l := len("Data"); len(elem) >= l && elem[0:l] == "Data" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGatewaySystem20Census20Core20API200PageSystemDataGetRequest([0]string{}, elemIsEscaped, w, r)
											case "POST":
												s.handleGatewaySystem20Census20Core20API200PageSystemDataPostRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET,POST")
											}

											return
										}

									case 'M': // Prefix: "Maintainer"

										if l := len("Maintainer"); len(elem) >= l && elem[0:l] == "Maintainer" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGatewaySystem20Census20Core20API200PageSystemMaintainerGetRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

									case 's': // Prefix: "sList"

										if l := len("sList"); len(elem) >= l && elem[0:l] == "sList" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGatewaySystem20Census20Core20API200PageSystemsListGetRequest([0]string{}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

									}

								}

							}

						case 'e': // Prefix: "erson"

							if l := len("erson"); len(elem) >= l && elem[0:l] == "erson" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGatewaySystem20Census20Core20API200PersonGetRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						}

					case 's': // Prefix: "s"

						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'o': // Prefix: "oftwareProducts"

							if l := len("oftwareProducts"); len(elem) >= l && elem[0:l] == "oftwareProducts" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleGatewaySystem20Census20Core20API200SoftwareProductsPostRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 't': // Prefix: "tatus"

							if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleGatewaySystem20Census20Core20API200StatusDeleteRequest([0]string{}, elemIsEscaped, w, r)
								case "GET":
									s.handleGatewaySystem20Census20Core20API200StatusGetRequest([0]string{}, elemIsEscaped, w, r)
								case "POST":
									s.handleGatewaySystem20Census20Core20API200StatusPostRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,POST")
								}

								return
							}

						case 'y': // Prefix: "ystem"

							if l := len("ystem"); len(elem) >= l && elem[0:l] == "ystem" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/ai-use"

								if l := len("/ai-use"); len(elem) >= l && elem[0:l] == "/ai-use" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGatewaySystem20Census20Core20API200SystemAiUseGetRequest([0]string{}, elemIsEscaped, w, r)
									case "POST":
										s.handleGatewaySystem20Census20Core20API200SystemAiUsePostRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,POST")
									}

									return
								}

							case 'C': // Prefix: "Components"

								if l := len("Components"); len(elem) >= l && elem[0:l] == "Components" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGatewaySystem20Census20Core20API200SystemComponentsGetRequest([0]string{}, elemIsEscaped, w, r)
									case "POST":
										s.handleGatewaySystem20Census20Core20API200SystemComponentsPostRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,POST")
									}

									return
								}

							case 'M': // Prefix: "Maintainer"

								if l := len("Maintainer"); len(elem) >= l && elem[0:l] == "Maintainer" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleGatewaySystem20Census20Core20API200SystemMaintainerPostRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							case 'P': // Prefix: "Property"

								if l := len("Property"); len(elem) >= l && elem[0:l] == "Property" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleGatewaySystem20Census20Core20API200SystemPropertyGetRequest([0]string{}, elemIsEscaped, w, r)
									case "POST":
										s.handleGatewaySystem20Census20Core20API200SystemPropertyPostRequest([0]string{}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,POST")
									}

									return
								}

							}

						}

					}

				case 'T': // Prefix: "Technopedia/1.0/softwareExtended"

					if l := len("Technopedia/1.0/softwareExtended"); len(elem) >= l && elem[0:l] == "Technopedia/1.0/softwareExtended" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGatewayTechnopedia10SoftwareExtendedGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGatewayTechnopedia10SoftwareExtendedIDGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					}

				case 'i': // Prefix: "intake-schema"

					if l := len("intake-schema"); len(elem) >= l && elem[0:l] == "intake-schema" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGatewayIntakeSchemaGetRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleGatewayIntakeSchemaPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleGatewayIntakeSchemaIDDeleteRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGatewayIntakeSchemaIDGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleGatewayIntakeSchemaIDPutRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PUT")
							}

							return
						}

					}

				case 'k': // Prefix: "keys"

					if l := len("keys"); len(elem) >= l && elem[0:l] == "keys" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGatewayKeysGetRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleGatewayKeysPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleGatewayKeysIDDeleteRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE")
							}

							return
						}

					}

				}

			case 'h': // Prefix: "health"

				if l := len("health"); len(elem) >= l && elem[0:l] == "health" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleHealthGetRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

			case 's': // Prefix: "s"

				if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "parx"

					if l := len("parx"); len(elem) >= l && elem[0:l] == "parx" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "POST":
							s.handleSparxPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleSparxIDDeleteRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleSparxIDGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET")
							}

							return
						}

					}

				case 'w': // Prefix: "wagger-ui"

					if l := len("wagger-ui"); len(elem) >= l && elem[0:l] == "wagger-ui" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleSwaggerUIGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'g': // Prefix: "gateway/"

				if l := len("gateway/"); len(elem) >= l && elem[0:l] == "gateway/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'C': // Prefix: "CEDAR"

					if l := len("CEDAR"); len(elem) >= l && elem[0:l] == "CEDAR" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '%': // Prefix: "%20Core%20API/"

						if l := len("%20Core%20API/"); len(elem) >= l && elem[0:l] == "%20Core%20API/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '2': // Prefix: "2.0.0/"

							if l := len("2.0.0/"); len(elem) >= l && elem[0:l] == "2.0.0/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "authorityToOperate"

								if l := len("authorityToOperate"); len(elem) >= l && elem[0:l] == "authorityToOperate" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = GatewayCEDAR20Core20API200AuthorityToOperateGetOperation
										r.summary = ""
										r.operationID = ""
										r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/authorityToOperate"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							case 'b': // Prefix: "budget"

								if l := len("budget"); len(elem) >= l && elem[0:l] == "budget" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = GatewayCEDAR20Core20API200BudgetGetOperation
										r.summary = "Retrieve a list of budgets based on query criteria listed in the parameters section. Passing a SystemId will cause the interface to return the budget(s) for just that system. Setting onlyIds to true will only return the id's, whereas if not set, the response will also include projectId, systemId, fundingId and funding. This interface has a limit of 5000 records"
										r.operationID = ""
										r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/budget"
										r.args = args
										r.count = 0
										return r, true
									case "POST":
										r.name = GatewayCEDAR20Core20API200BudgetPostOperation
										r.summary = ""
										r.operationID = ""
										r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/budget"
										r.args = args
										r.count = 0
										return r, true
									case "PUT":
										r.name = GatewayCEDAR20Core20API200BudgetPutOperation
										r.summary = ""
										r.operationID = ""
										r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/budget"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/list"

									if l := len("/list"); len(elem) >= l && elem[0:l] == "/list" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = GatewayCEDAR20Core20API200BudgetListDeleteOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/budget/list"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								case 'S': // Prefix: "SystemCostFind"

									if l := len("SystemCostFind"); len(elem) >= l && elem[0:l] == "SystemCostFind" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GatewayCEDAR20Core20API200BudgetSystemCostFindGetOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/budgetSystemCostFind"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								}

							case 'c': // Prefix: "co"

								if l := len("co"); len(elem) >= l && elem[0:l] == "co" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'm': // Prefix: "mponent"

									if l := len("mponent"); len(elem) >= l && elem[0:l] == "mponent" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = GatewayCEDAR20Core20API200ComponentPostOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/component"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								case 'n': // Prefix: "ntract"

									if l := len("ntract"); len(elem) >= l && elem[0:l] == "ntract" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = GatewayCEDAR20Core20API200ContractPostOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/contract"
											r.args = args
											r.count = 0
											return r, true
										case "PUT":
											r.name = GatewayCEDAR20Core20API200ContractPutOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/contract"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/list"

										if l := len("/list"); len(elem) >= l && elem[0:l] == "/list" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "DELETE":
												r.name = GatewayCEDAR20Core20API200ContractListDeleteOperation
												r.summary = ""
												r.operationID = ""
												r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/contract/list"
												r.args = args
												r.count = 0
												return r, true
											case "GET":
												r.name = GatewayCEDAR20Core20API200ContractListGetOperation
												r.summary = ""
												r.operationID = ""
												r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/contract/list"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

									}

								case 's': // Prefix: "stType/list"

									if l := len("stType/list"); len(elem) >= l && elem[0:l] == "stType/list" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GatewayCEDAR20Core20API200CostTypeListGetOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/costType/list"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								}

							case 'd': // Prefix: "d"

								if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'e': // Prefix: "eployment"

									if l := len("eployment"); len(elem) >= l && elem[0:l] == "eployment" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = GatewayCEDAR20Core20API200DeploymentDeleteOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/deployment"
											r.args = args
											r.count = 0
											return r, true
										case "GET":
											r.name = GatewayCEDAR20Core20API200DeploymentGetOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/deployment"
											r.args = args
											r.count = 0
											return r, true
										case "POST":
											r.name = GatewayCEDAR20Core20API200DeploymentPostOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/deployment"
											r.args = args
											r.count = 0
											return r, true
										case "PUT":
											r.name = GatewayCEDAR20Core20API200DeploymentPutOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/deployment"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								case 'o': // Prefix: "omainModel"

									if l := len("omainModel"); len(elem) >= l && elem[0:l] == "omainModel" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case '/': // Prefix: "/list"

										if l := len("/list"); len(elem) >= l && elem[0:l] == "/list" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = GatewayCEDAR20Core20API200DomainModelListGetOperation
												r.summary = ""
												r.operationID = ""
												r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/domainModel/list"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

									case 'L': // Prefix: "Level"

										if l := len("Level"); len(elem) >= l && elem[0:l] == "Level" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = GatewayCEDAR20Core20API200DomainModelLevelGetOperation
												r.summary = ""
												r.operationID = ""
												r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/domainModelLevel"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

									case 'N': // Prefix: "Name"

										if l := len("Name"); len(elem) >= l && elem[0:l] == "Name" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = GatewayCEDAR20Core20API200DomainModelNameGetOperation
												r.summary = ""
												r.operationID = ""
												r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/domainModelName"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

									}

								}

							case 'e': // Prefix: "e"

								if l := len("e"); len(elem) >= l && elem[0:l] == "e" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'n': // Prefix: "numeration"

									if l := len("numeration"); len(elem) >= l && elem[0:l] == "numeration" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GatewayCEDAR20Core20API200EnumerationGetOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/enumeration"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								case 'x': // Prefix: "xchange"

									if l := len("xchange"); len(elem) >= l && elem[0:l] == "xchange" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = GatewayCEDAR20Core20API200ExchangeGetOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/exchange"
											r.args = args
											r.count = 0
											return r, true
										case "PUT":
											r.name = GatewayCEDAR20Core20API200ExchangePutOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/exchange"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"

										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "id"
										// Leaf parameter, slashes are prohibited
										idx := strings.IndexByte(elem, '/')
										if idx >= 0 {
											break
										}
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = GatewayCEDAR20Core20API200ExchangeIDGetOperation
												r.summary = ""
												r.operationID = ""
												r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/exchange/{id}"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

									}

								}

							case 'o': // Prefix: "organization"

								if l := len("organization"); len(elem) >= l && elem[0:l] == "organization" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = GatewayCEDAR20Core20API200OrganizationGetOperation
										r.summary = ""
										r.operationID = ""
										r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/organization"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							case 'r': // Prefix: "role"

								if l := len("role"); len(elem) >= l && elem[0:l] == "role" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = GatewayCEDAR20Core20API200RoleGetOperation
										r.summary = "Finds a list of role assignments based on an object's ID and/or role type."
										r.operationID = ""
										r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/role"
										r.args = args
										r.count = 0
										return r, true
									case "POST":
										r.name = GatewayCEDAR20Core20API200RolePostOperation
										r.summary = "Add role assignments to a CEDAR application. This interface takes in objectId, roleTypeId AND either assigneeId, assigneeUserName or assigneeOrgId are required."
										r.operationID = ""
										r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/role"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"

									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'l': // Prefix: "list"

										if l := len("list"); len(elem) >= l && elem[0:l] == "list" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "DELETE":
												r.name = GatewayCEDAR20Core20API200RoleListDeleteOperation
												r.summary = ""
												r.operationID = ""
												r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/role/list"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

									case 't': // Prefix: "type/"

										if l := len("type/"); len(elem) >= l && elem[0:l] == "type/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "application"
										// Leaf parameter, slashes are prohibited
										idx := strings.IndexByte(elem, '/')
										if idx >= 0 {
											break
										}
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = GatewayCEDAR20Core20API200RoleTypeApplicationGetOperation
												r.summary = "Finds a list of role types available within an application. This interface takes in application."
												r.operationID = ""
												r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/role/type/{application}"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

									}

								}

							case 's': // Prefix: "s"

								if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'o': // Prefix: "oftwareProducts"

									if l := len("oftwareProducts"); len(elem) >= l && elem[0:l] == "oftwareProducts" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GatewayCEDAR20Core20API200SoftwareProductsGetOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/softwareProducts"
											r.args = args
											r.count = 0
											return r, true
										case "POST":
											r.name = GatewayCEDAR20Core20API200SoftwareProductsPostOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/softwareProducts"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								case 't': // Prefix: "takeholder"

									if l := len("takeholder"); len(elem) >= l && elem[0:l] == "takeholder" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GatewayCEDAR20Core20API200StakeholderGetOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/stakeholder"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								case 'u': // Prefix: "upportContact"

									if l := len("upportContact"); len(elem) >= l && elem[0:l] == "upportContact" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = GatewayCEDAR20Core20API200SupportContactDeleteOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/supportContact"
											r.args = args
											r.count = 0
											return r, true
										case "GET":
											r.name = GatewayCEDAR20Core20API200SupportContactGetOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/supportContact"
											r.args = args
											r.count = 0
											return r, true
										case "POST":
											r.name = GatewayCEDAR20Core20API200SupportContactPostOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/supportContact"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								case 'y': // Prefix: "ystem/"

									if l := len("ystem/"); len(elem) >= l && elem[0:l] == "ystem/" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'd': // Prefix: "detail/"

										if l := len("detail/"); len(elem) >= l && elem[0:l] == "detail/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "id"
										// Leaf parameter, slashes are prohibited
										idx := strings.IndexByte(elem, '/')
										if idx >= 0 {
											break
										}
										args[0] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = GatewayCEDAR20Core20API200SystemDetailIDGetOperation
												r.summary = ""
												r.operationID = ""
												r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/system/detail/{id}"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

									case 's': // Prefix: "summary"

										if l := len("summary"); len(elem) >= l && elem[0:l] == "summary" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = GatewayCEDAR20Core20API200SystemSummaryGetOperation
												r.summary = ""
												r.operationID = ""
												r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/system/summary"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"

											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "id"
											// Leaf parameter, slashes are prohibited
											idx := strings.IndexByte(elem, '/')
											if idx >= 0 {
												break
											}
											args[0] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "GET":
													r.name = GatewayCEDAR20Core20API200SystemSummaryIDGetOperation
													r.summary = ""
													r.operationID = ""
													r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/system/summary/{id}"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}

										}

									}

								}

							case 't': // Prefix: "threat"

								if l := len("threat"); len(elem) >= l && elem[0:l] == "threat" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = GatewayCEDAR20Core20API200ThreatGetOperation
										r.summary = ""
										r.operationID = ""
										r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/threat"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							case 'u': // Prefix: "u"

								if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'r': // Prefix: "rl/"

									if l := len("rl/"); len(elem) >= l && elem[0:l] == "rl/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "id"
									// Leaf parameter, slashes are prohibited
									idx := strings.IndexByte(elem, '/')
									if idx >= 0 {
										break
									}
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GatewayCEDAR20Core20API200URLIDGetOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/url/{id}"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								case 's': // Prefix: "ser"

									if l := len("ser"); len(elem) >= l && elem[0:l] == "ser" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GatewayCEDAR20Core20API200UserGetOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/user"
											r.args = args
											r.count = 0
											return r, true
										case "POST":
											r.name = GatewayCEDAR20Core20API200UserPostOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDAR%20Core%20API/2.0.0/user"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								}

							}

						case 'e': // Prefix: "exchange"

							if l := len("exchange"); len(elem) >= l && elem[0:l] == "exchange" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = GatewayCEDAR20Core20APIExchangePostOperation
									r.summary = ""
									r.operationID = ""
									r.pathPattern = "/gateway/CEDAR%20Core%20API/exchange"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					case 'I': // Prefix: "Intake/1.0/"

						if l := len("Intake/1.0/"); len(elem) >= l && elem[0:l] == "Intake/1.0/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'c': // Prefix: "client/"

							if l := len("client/"); len(elem) >= l && elem[0:l] == "client/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GatewayCEDARIntake10ClientIDGetOperation
									r.summary = ""
									r.operationID = ""
									r.pathPattern = "/gateway/CEDARIntake/1.0/client/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						case 'h': // Prefix: "healthCheck"

							if l := len("healthCheck"); len(elem) >= l && elem[0:l] == "healthCheck" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GatewayCEDARIntake10HealthCheckGetOperation
									r.summary = ""
									r.operationID = ""
									r.pathPattern = "/gateway/CEDARIntake/1.0/healthCheck"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'i': // Prefix: "intake"

							if l := len("intake"); len(elem) >= l && elem[0:l] == "intake" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = GatewayCEDARIntake10IntakePostOperation
									r.summary = ""
									r.operationID = ""
									r.pathPattern = "/gateway/CEDARIntake/1.0/intake"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "cedar/"

									if l := len("cedar/"); len(elem) >= l && elem[0:l] == "cedar/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "id"
									// Leaf parameter, slashes are prohibited
									idx := strings.IndexByte(elem, '/')
									if idx >= 0 {
										break
									}
									args[0] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GatewayCEDARIntake10IntakeCedarIDGetOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDARIntake/1.0/intake/cedar/{id}"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								case 's': // Prefix: "status"

									if l := len("status"); len(elem) >= l && elem[0:l] == "status" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GatewayCEDARIntake10IntakeStatusGetOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/CEDARIntake/1.0/intake/status"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								}

							}

						case 's': // Prefix: "status/c"

							if l := len("status/c"); len(elem) >= l && elem[0:l] == "status/c" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "edar/"

								if l := len("edar/"); len(elem) >= l && elem[0:l] == "edar/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Leaf parameter, slashes are prohibited
								idx := strings.IndexByte(elem, '/')
								if idx >= 0 {
									break
								}
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = GatewayCEDARIntake10StatusCedarIDGetOperation
										r.summary = ""
										r.operationID = ""
										r.pathPattern = "/gateway/CEDARIntake/1.0/status/cedar/{id}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

							case 'l': // Prefix: "lient/"

								if l := len("lient/"); len(elem) >= l && elem[0:l] == "lient/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "id"
								// Leaf parameter, slashes are prohibited
								idx := strings.IndexByte(elem, '/')
								if idx >= 0 {
									break
								}
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = GatewayCEDARIntake10StatusClientIDGetOperation
										r.summary = ""
										r.operationID = ""
										r.pathPattern = "/gateway/CEDARIntake/1.0/status/client/{id}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

							}

						}

					}

				case 'L': // Prefix: "LDAP/1.0/"

					if l := len("LDAP/1.0/"); len(elem) >= l && elem[0:l] == "LDAP/1.0/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "authenticate"

						if l := len("authenticate"); len(elem) >= l && elem[0:l] == "authenticate" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = GatewayLDAP10AuthenticatePostOperation
								r.summary = "Authentication endpoint, accepts username/password or principal/credentials."
								r.operationID = ""
								r.pathPattern = "/gateway/LDAP/1.0/authenticate"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'p': // Prefix: "person"

						if l := len("person"); len(elem) >= l && elem[0:l] == "person" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = GatewayLDAP10PersonGetOperation
								r.summary = ""
								r.operationID = ""
								r.pathPattern = "/gateway/LDAP/1.0/person"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GatewayLDAP10PersonIDGetOperation
									r.summary = ""
									r.operationID = ""
									r.pathPattern = "/gateway/LDAP/1.0/person/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						}

					}

				case 'S': // Prefix: "System%20Census%20Core%20API/2.0.0/"

					if l := len("System%20Census%20Core%20API/2.0.0/"); len(elem) >= l && elem[0:l] == "System%20Census%20Core%20API/2.0.0/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "admin"

						if l := len("admin"); len(elem) >= l && elem[0:l] == "admin" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/reviewer"

							if l := len("/reviewer"); len(elem) >= l && elem[0:l] == "/reviewer" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GatewaySystem20Census20Core20API200AdminReviewerGetOperation
									r.summary = ""
									r.operationID = ""
									r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/admin/reviewer"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'R': // Prefix: "Reviewer"

							if l := len("Reviewer"); len(elem) >= l && elem[0:l] == "Reviewer" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = GatewaySystem20Census20Core20API200AdminReviewerDeleteOperation
									r.summary = ""
									r.operationID = ""
									r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/adminReviewer"
									r.args = args
									r.count = 0
									return r, true
								case "POST":
									r.name = GatewaySystem20Census20Core20API200AdminReviewerPostOperation
									r.summary = ""
									r.operationID = ""
									r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/adminReviewer"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					case 'b': // Prefix: "bu"

						if l := len("bu"); len(elem) >= l && elem[0:l] == "bu" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'd': // Prefix: "dgetAndContracts"

							if l := len("dgetAndContracts"); len(elem) >= l && elem[0:l] == "dgetAndContracts" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GatewaySystem20Census20Core20API200BudgetAndContractsGetOperation
									r.summary = ""
									r.operationID = ""
									r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/budgetAndContracts"
									r.args = args
									r.count = 0
									return r, true
								case "POST":
									r.name = GatewaySystem20Census20Core20API200BudgetAndContractsPostOperation
									r.summary = ""
									r.operationID = ""
									r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/budgetAndContracts"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 's': // Prefix: "sinessOwner"

							if l := len("sinessOwner"); len(elem) >= l && elem[0:l] == "sinessOwner" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = GatewaySystem20Census20Core20API200BusinessOwnerPostOperation
									r.summary = ""
									r.operationID = ""
									r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/businessOwner"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					case 'd': // Prefix: "d"

						if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "ataExchange"

							if l := len("ataExchange"); len(elem) >= l && elem[0:l] == "ataExchange" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'n': // Prefix: "notes"

									if l := len("notes"); len(elem) >= l && elem[0:l] == "notes" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = GatewaySystem20Census20Core20API200DataExchangeNotesDeleteOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/dataExchange/notes"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								case 's': // Prefix: "status"

									if l := len("status"); len(elem) >= l && elem[0:l] == "status" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = GatewaySystem20Census20Core20API200DataExchangeStatusDeleteOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/dataExchange/status"
											r.args = args
											r.count = 0
											return r, true
										case "GET":
											r.name = GatewaySystem20Census20Core20API200DataExchangeStatusGetOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/dataExchange/status"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								}

							case 'N': // Prefix: "Notes"

								if l := len("Notes"); len(elem) >= l && elem[0:l] == "Notes" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = GatewaySystem20Census20Core20API200DataExchangeNotesGetOperation
										r.summary = ""
										r.operationID = ""
										r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/dataExchangeNotes"
										r.args = args
										r.count = 0
										return r, true
									case "POST":
										r.name = GatewaySystem20Census20Core20API200DataExchangeNotesPostOperation
										r.summary = ""
										r.operationID = ""
										r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/dataExchangeNotes"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							}

						case 'r': // Prefix: "rm"

							if l := len("rm"); len(elem) >= l && elem[0:l] == "rm" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GatewaySystem20Census20Core20API200DrmGetOperation
									r.summary = ""
									r.operationID = ""
									r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/drm"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					case 'n': // Prefix: "note"

						if l := len("note"); len(elem) >= l && elem[0:l] == "note" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = GatewaySystem20Census20Core20API200NotePostOperation
								r.summary = "Add Notes to System Census"
								r.operationID = ""
								r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/note"
								r.args = args
								r.count = 0
								return r, true
							case "PUT":
								r.name = GatewaySystem20Census20Core20API200NotePutOperation
								r.summary = ""
								r.operationID = ""
								r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/note"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/list"

							if l := len("/list"); len(elem) >= l && elem[0:l] == "/list" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = GatewaySystem20Census20Core20API200NoteListDeleteOperation
									r.summary = ""
									r.operationID = ""
									r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/note/list"
									r.args = args
									r.count = 0
									return r, true
								case "GET":
									r.name = GatewaySystem20Census20Core20API200NoteListGetOperation
									r.summary = ""
									r.operationID = ""
									r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/note/list"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					case 'p': // Prefix: "p"

						if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "age/"

							if l := len("age/"); len(elem) >= l && elem[0:l] == "age/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'U': // Prefix: "Urls"

								if l := len("Urls"); len(elem) >= l && elem[0:l] == "Urls" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = GatewaySystem20Census20Core20API200PageUrlsGetOperation
										r.summary = ""
										r.operationID = ""
										r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/page/Urls"
										r.args = args
										r.count = 0
										return r, true
									case "POST":
										r.name = GatewaySystem20Census20Core20API200PageUrlsPostOperation
										r.summary = ""
										r.operationID = ""
										r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/page/Urls"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							case 'b': // Prefix: "businessOwner"

								if l := len("businessOwner"); len(elem) >= l && elem[0:l] == "businessOwner" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = GatewaySystem20Census20Core20API200PageBusinessOwnerGetOperation
										r.summary = ""
										r.operationID = ""
										r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/page/businessOwner"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							case 'd': // Prefix: "data"

								if l := len("data"); len(elem) >= l && elem[0:l] == "data" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'C': // Prefix: "Centers"

									if l := len("Centers"); len(elem) >= l && elem[0:l] == "Centers" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GatewaySystem20Census20Core20API200PageDataCentersGetOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/page/dataCenters"
											r.args = args
											r.count = 0
											return r, true
										case "POST":
											r.name = GatewaySystem20Census20Core20API200PageDataCentersPostOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/page/dataCenters"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								case 'E': // Prefix: "Exchange"

									if l := len("Exchange"); len(elem) >= l && elem[0:l] == "Exchange" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GatewaySystem20Census20Core20API200PageDataExchangeGetOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/page/dataExchange"
											r.args = args
											r.count = 0
											return r, true
										case "POST":
											r.name = GatewaySystem20Census20Core20API200PageDataExchangePostOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/page/dataExchange"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								}

							case 's': // Prefix: "s"

								if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'o': // Prefix: "oftwareProducts"

									if l := len("oftwareProducts"); len(elem) >= l && elem[0:l] == "oftwareProducts" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GatewaySystem20Census20Core20API200PageSoftwareProductsGetOperation
											r.summary = ""
											r.operationID = ""
											r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/page/softwareProducts"
											r.args = args
											r.count = 0
											return r, true
										default:
											return
										}
									}

								case 'y': // Prefix: "ystem"

									if l := len("ystem"); len(elem) >= l && elem[0:l] == "ystem" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'D': // Prefix: "Data"

										if l := len("Data"); len(elem) >= l && elem[0:l] == "Data" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = GatewaySystem20Census20Core20API200PageSystemDataGetOperation
												r.summary = ""
												r.operationID = ""
												r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/page/systemData"
												r.args = args
												r.count = 0
												return r, true
											case "POST":
												r.name = GatewaySystem20Census20Core20API200PageSystemDataPostOperation
												r.summary = ""
												r.operationID = ""
												r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/page/systemData"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

									case 'M': // Prefix: "Maintainer"

										if l := len("Maintainer"); len(elem) >= l && elem[0:l] == "Maintainer" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = GatewaySystem20Census20Core20API200PageSystemMaintainerGetOperation
												r.summary = ""
												r.operationID = ""
												r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/page/systemMaintainer"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

									case 's': // Prefix: "sList"

										if l := len("sList"); len(elem) >= l && elem[0:l] == "sList" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = GatewaySystem20Census20Core20API200PageSystemsListGetOperation
												r.summary = ""
												r.operationID = ""
												r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/page/systemsList"
												r.args = args
												r.count = 0
												return r, true
											default:
												return
											}
										}

									}

								}

							}

						case 'e': // Prefix: "erson"

							if l := len("erson"); len(elem) >= l && elem[0:l] == "erson" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GatewaySystem20Census20Core20API200PersonGetOperation
									r.summary = ""
									r.operationID = ""
									r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/person"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					case 's': // Prefix: "s"

						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'o': // Prefix: "oftwareProducts"

							if l := len("oftwareProducts"); len(elem) >= l && elem[0:l] == "oftwareProducts" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = GatewaySystem20Census20Core20API200SoftwareProductsPostOperation
									r.summary = ""
									r.operationID = ""
									r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/softwareProducts"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 't': // Prefix: "tatus"

							if l := len("tatus"); len(elem) >= l && elem[0:l] == "tatus" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = GatewaySystem20Census20Core20API200StatusDeleteOperation
									r.summary = ""
									r.operationID = ""
									r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/status"
									r.args = args
									r.count = 0
									return r, true
								case "GET":
									r.name = GatewaySystem20Census20Core20API200StatusGetOperation
									r.summary = ""
									r.operationID = ""
									r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/status"
									r.args = args
									r.count = 0
									return r, true
								case "POST":
									r.name = GatewaySystem20Census20Core20API200StatusPostOperation
									r.summary = ""
									r.operationID = ""
									r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/status"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'y': // Prefix: "ystem"

							if l := len("ystem"); len(elem) >= l && elem[0:l] == "ystem" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/ai-use"

								if l := len("/ai-use"); len(elem) >= l && elem[0:l] == "/ai-use" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = GatewaySystem20Census20Core20API200SystemAiUseGetOperation
										r.summary = ""
										r.operationID = ""
										r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/system/ai-use"
										r.args = args
										r.count = 0
										return r, true
									case "POST":
										r.name = GatewaySystem20Census20Core20API200SystemAiUsePostOperation
										r.summary = ""
										r.operationID = ""
										r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/system/ai-use"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							case 'C': // Prefix: "Components"

								if l := len("Components"); len(elem) >= l && elem[0:l] == "Components" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = GatewaySystem20Census20Core20API200SystemComponentsGetOperation
										r.summary = ""
										r.operationID = ""
										r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/systemComponents"
										r.args = args
										r.count = 0
										return r, true
									case "POST":
										r.name = GatewaySystem20Census20Core20API200SystemComponentsPostOperation
										r.summary = ""
										r.operationID = ""
										r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/systemComponents"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							case 'M': // Prefix: "Maintainer"

								if l := len("Maintainer"); len(elem) >= l && elem[0:l] == "Maintainer" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = GatewaySystem20Census20Core20API200SystemMaintainerPostOperation
										r.summary = ""
										r.operationID = ""
										r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/systemMaintainer"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							case 'P': // Prefix: "Property"

								if l := len("Property"); len(elem) >= l && elem[0:l] == "Property" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = GatewaySystem20Census20Core20API200SystemPropertyGetOperation
										r.summary = ""
										r.operationID = ""
										r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/systemProperty"
										r.args = args
										r.count = 0
										return r, true
									case "POST":
										r.name = GatewaySystem20Census20Core20API200SystemPropertyPostOperation
										r.summary = ""
										r.operationID = ""
										r.pathPattern = "/gateway/System%20Census%20Core%20API/2.0.0/systemProperty"
										r.args = args
										r.count = 0
										return r, true
									default:
										return
									}
								}

							}

						}

					}

				case 'T': // Prefix: "Technopedia/1.0/softwareExtended"

					if l := len("Technopedia/1.0/softwareExtended"); len(elem) >= l && elem[0:l] == "Technopedia/1.0/softwareExtended" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = GatewayTechnopedia10SoftwareExtendedGetOperation
							r.summary = ""
							r.operationID = ""
							r.pathPattern = "/gateway/Technopedia/1.0/softwareExtended"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GatewayTechnopedia10SoftwareExtendedIDGetOperation
								r.summary = ""
								r.operationID = ""
								r.pathPattern = "/gateway/Technopedia/1.0/softwareExtended/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				case 'i': // Prefix: "intake-schema"

					if l := len("intake-schema"); len(elem) >= l && elem[0:l] == "intake-schema" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = GatewayIntakeSchemaGetOperation
							r.summary = ""
							r.operationID = ""
							r.pathPattern = "/gateway/intake-schema"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = GatewayIntakeSchemaPostOperation
							r.summary = ""
							r.operationID = ""
							r.pathPattern = "/gateway/intake-schema"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = GatewayIntakeSchemaIDDeleteOperation
								r.summary = ""
								r.operationID = ""
								r.pathPattern = "/gateway/intake-schema/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = GatewayIntakeSchemaIDGetOperation
								r.summary = ""
								r.operationID = ""
								r.pathPattern = "/gateway/intake-schema/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = GatewayIntakeSchemaIDPutOperation
								r.summary = ""
								r.operationID = ""
								r.pathPattern = "/gateway/intake-schema/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				case 'k': // Prefix: "keys"

					if l := len("keys"); len(elem) >= l && elem[0:l] == "keys" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = GatewayKeysGetOperation
							r.summary = ""
							r.operationID = ""
							r.pathPattern = "/gateway/keys"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = GatewayKeysPostOperation
							r.summary = ""
							r.operationID = ""
							r.pathPattern = "/gateway/keys"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = GatewayKeysIDDeleteOperation
								r.summary = ""
								r.operationID = ""
								r.pathPattern = "/gateway/keys/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				}

			case 'h': // Prefix: "health"

				if l := len("health"); len(elem) >= l && elem[0:l] == "health" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = HealthGetOperation
						r.summary = ""
						r.operationID = ""
						r.pathPattern = "/health"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 's': // Prefix: "s"

				if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "parx"

					if l := len("parx"); len(elem) >= l && elem[0:l] == "parx" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							r.name = SparxPostOperation
							r.summary = ""
							r.operationID = ""
							r.pathPattern = "/sparx"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "id"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = SparxIDDeleteOperation
								r.summary = ""
								r.operationID = ""
								r.pathPattern = "/sparx/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = SparxIDGetOperation
								r.summary = ""
								r.operationID = ""
								r.pathPattern = "/sparx/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				case 'w': // Prefix: "wagger-ui"

					if l := len("wagger-ui"); len(elem) >= l && elem[0:l] == "wagger-ui" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = SwaggerUIGetOperation
							r.summary = ""
							r.operationID = ""
							r.pathPattern = "/swagger-ui"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				}

			}

		}
	}
	return r, false
}
