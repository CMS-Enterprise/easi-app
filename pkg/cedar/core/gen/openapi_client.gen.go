// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"context"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	GatewayApikeyScopes = "GatewayApikey.Scopes"
	JWTKeyScopes        = "JWTKey.Scopes"
)

// Defines values for RoleApplication.
const (
	RoleApplicationAlfabet RoleApplication = "alfabet"
	RoleApplicationAll     RoleApplication = "all"
)

// Defines values for RoleAssigneeType.
const (
	Organization RoleAssigneeType = "organization"
	Person       RoleAssigneeType = "person"
)

// Defines values for RoleTypeApplication.
const (
	RoleTypeApplicationAlfabet RoleTypeApplication = "alfabet"
	RoleTypeApplicationAll     RoleTypeApplication = "all"
)

// Defines values for RoleTypeName.
const (
	AIContact                            RoleTypeName = "AI Contact"
	APIContact                           RoleTypeName = "API Contact"
	BudgetAnalyst                        RoleTypeName = "Budget Analyst"
	BusinessOwner                        RoleTypeName = "Business Owner"
	BusinessQuestionContact              RoleTypeName = "Business Question Contact"
	ContractingOfficersRepresentativeCOR RoleTypeName = "Contracting Officer's Representative (COR)"
	DAReviewer                           RoleTypeName = "DA Reviewer"
	DataCenterContact                    RoleTypeName = "Data Center Contact"
	ISSOGovernmentTaskLeadGTL            RoleTypeName = "ISSO Government Task Lead (GTL)"
	ProjectLead                          RoleTypeName = "Project Lead"
	QAReviewer                           RoleTypeName = "QA Reviewer"
	SubjectMatterExpertSME               RoleTypeName = "Subject Matter Expert (SME)"
	SupportStaff                         RoleTypeName = "Support Staff"
	SurveyPointOfContact                 RoleTypeName = "Survey Point of Contact"
	SystemMaintainer                     RoleTypeName = "System Maintainer"
	TechnicalSystemIssuesContact         RoleTypeName = "Technical System Issues Contact"
)

// Defines values for GetGatewayCEDAR20Core20API200AuthorityToOperateParamsContainsPersonallyIdentifiableInformation.
const (
	GetGatewayCEDAR20Core20API200AuthorityToOperateParamsContainsPersonallyIdentifiableInformationFALSE  GetGatewayCEDAR20Core20API200AuthorityToOperateParamsContainsPersonallyIdentifiableInformation = "FALSE"
	GetGatewayCEDAR20Core20API200AuthorityToOperateParamsContainsPersonallyIdentifiableInformationFalse  GetGatewayCEDAR20Core20API200AuthorityToOperateParamsContainsPersonallyIdentifiableInformation = "false"
	GetGatewayCEDAR20Core20API200AuthorityToOperateParamsContainsPersonallyIdentifiableInformationFalse1 GetGatewayCEDAR20Core20API200AuthorityToOperateParamsContainsPersonallyIdentifiableInformation = "False"
	GetGatewayCEDAR20Core20API200AuthorityToOperateParamsContainsPersonallyIdentifiableInformationTRUE   GetGatewayCEDAR20Core20API200AuthorityToOperateParamsContainsPersonallyIdentifiableInformation = "TRUE"
	GetGatewayCEDAR20Core20API200AuthorityToOperateParamsContainsPersonallyIdentifiableInformationTrue   GetGatewayCEDAR20Core20API200AuthorityToOperateParamsContainsPersonallyIdentifiableInformation = "true"
	GetGatewayCEDAR20Core20API200AuthorityToOperateParamsContainsPersonallyIdentifiableInformationTrue1  GetGatewayCEDAR20Core20API200AuthorityToOperateParamsContainsPersonallyIdentifiableInformation = "True"
)

// Defines values for GetGatewayCEDAR20Core20API200AuthorityToOperateParamsIsProtectedHealthInformation.
const (
	GetGatewayCEDAR20Core20API200AuthorityToOperateParamsIsProtectedHealthInformationFALSE  GetGatewayCEDAR20Core20API200AuthorityToOperateParamsIsProtectedHealthInformation = "FALSE"
	GetGatewayCEDAR20Core20API200AuthorityToOperateParamsIsProtectedHealthInformationFalse  GetGatewayCEDAR20Core20API200AuthorityToOperateParamsIsProtectedHealthInformation = "false"
	GetGatewayCEDAR20Core20API200AuthorityToOperateParamsIsProtectedHealthInformationFalse1 GetGatewayCEDAR20Core20API200AuthorityToOperateParamsIsProtectedHealthInformation = "False"
	GetGatewayCEDAR20Core20API200AuthorityToOperateParamsIsProtectedHealthInformationTRUE   GetGatewayCEDAR20Core20API200AuthorityToOperateParamsIsProtectedHealthInformation = "TRUE"
	GetGatewayCEDAR20Core20API200AuthorityToOperateParamsIsProtectedHealthInformationTrue   GetGatewayCEDAR20Core20API200AuthorityToOperateParamsIsProtectedHealthInformation = "true"
	GetGatewayCEDAR20Core20API200AuthorityToOperateParamsIsProtectedHealthInformationTrue1  GetGatewayCEDAR20Core20API200AuthorityToOperateParamsIsProtectedHealthInformation = "True"
)

// Defines values for GetGatewayCEDAR20Core20API200CostTypeListParamsApplication.
const (
	GetGatewayCEDAR20Core20API200CostTypeListParamsApplicationAlfabet GetGatewayCEDAR20Core20API200CostTypeListParamsApplication = "alfabet"
	GetGatewayCEDAR20Core20API200CostTypeListParamsApplicationAll     GetGatewayCEDAR20Core20API200CostTypeListParamsApplication = "all"
)

// Defines values for GetGatewayCEDAR20Core20API200DeploymentParamsState.
const (
	GetGatewayCEDAR20Core20API200DeploymentParamsStateActive  GetGatewayCEDAR20Core20API200DeploymentParamsState = "active"
	GetGatewayCEDAR20Core20API200DeploymentParamsStatePlanned GetGatewayCEDAR20Core20API200DeploymentParamsState = "planned"
	GetGatewayCEDAR20Core20API200DeploymentParamsStateRetired GetGatewayCEDAR20Core20API200DeploymentParamsState = "retired"
)

// Defines values for GetGatewayCEDAR20Core20API200DeploymentParamsStatus.
const (
	GetGatewayCEDAR20Core20API200DeploymentParamsStatusActive  GetGatewayCEDAR20Core20API200DeploymentParamsStatus = "active"
	GetGatewayCEDAR20Core20API200DeploymentParamsStatusPlanned GetGatewayCEDAR20Core20API200DeploymentParamsStatus = "planned"
	GetGatewayCEDAR20Core20API200DeploymentParamsStatusRetired GetGatewayCEDAR20Core20API200DeploymentParamsStatus = "retired"
)

// Defines values for GetGatewayCEDAR20Core20API200DeploymentParamsDeploymentType.
const (
	GetGatewayCEDAR20Core20API200DeploymentParamsDeploymentTypeCOOPDR         GetGatewayCEDAR20Core20API200DeploymentParamsDeploymentType = "COOP DR"
	GetGatewayCEDAR20Core20API200DeploymentParamsDeploymentTypeDevelopment    GetGatewayCEDAR20Core20API200DeploymentParamsDeploymentType = "Development"
	GetGatewayCEDAR20Core20API200DeploymentParamsDeploymentTypeImplementation GetGatewayCEDAR20Core20API200DeploymentParamsDeploymentType = "Implementation"
	GetGatewayCEDAR20Core20API200DeploymentParamsDeploymentTypeIntegration    GetGatewayCEDAR20Core20API200DeploymentParamsDeploymentType = "Integration"
	GetGatewayCEDAR20Core20API200DeploymentParamsDeploymentTypeOther          GetGatewayCEDAR20Core20API200DeploymentParamsDeploymentType = "Other"
	GetGatewayCEDAR20Core20API200DeploymentParamsDeploymentTypeProduction     GetGatewayCEDAR20Core20API200DeploymentParamsDeploymentType = "Production"
	GetGatewayCEDAR20Core20API200DeploymentParamsDeploymentTypeTesting        GetGatewayCEDAR20Core20API200DeploymentParamsDeploymentType = "Testing"
	GetGatewayCEDAR20Core20API200DeploymentParamsDeploymentTypeTraining       GetGatewayCEDAR20Core20API200DeploymentParamsDeploymentType = "Training"
	GetGatewayCEDAR20Core20API200DeploymentParamsDeploymentTypeValidation     GetGatewayCEDAR20Core20API200DeploymentParamsDeploymentType = "Validation"
)

// Defines values for PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsAwsEnclave.
const (
	Commercial PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsAwsEnclave = "Commercial"
	GovCloud   PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsAwsEnclave = "GovCloud"
	Private    PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsAwsEnclave = "Private"
	Public     PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsAwsEnclave = "Public"
)

// Defines values for PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsDeploymentType.
const (
	Cloud      PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsDeploymentType = "Cloud"
	CoLocation PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsDeploymentType = "Co-location"
	Hybrid     PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsDeploymentType = "Hybrid"
	OnPremise  PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsDeploymentType = "On-Premise"
	SaaS       PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsDeploymentType = "SaaS"
)

// Defines values for PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsHasProductionData.
const (
	PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsHasProductionDataFalse PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsHasProductionData = "false"
	PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsHasProductionDataTrue  PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsHasProductionData = "true"
)

// Defines values for PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsIsHotSite.
const (
	PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsIsHotSiteFalse PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsIsHotSite = "false"
	PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsIsHotSiteTrue  PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsIsHotSite = "true"
)

// Defines values for PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsMovingToCloud.
const (
	PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsMovingToCloudFalse PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsMovingToCloud = "false"
	PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsMovingToCloudTrue  PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsMovingToCloud = "true"
)

// Defines values for PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsState.
const (
	PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsStateMaintenance    PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsState = "Maintenance"
	PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsStateNonOperational PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsState = "Non-Operational"
	PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsStateOperational    PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsState = "Operational"
	PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsStateTesting        PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsState = "Testing"
)

// Defines values for PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsStatus.
const (
	PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsStatusActive           PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsStatus = "Active"
	PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsStatusInactive         PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsStatus = "Inactive"
	PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsStatusPlanned          PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsStatus = "Planned"
	PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsStatusRetired          PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsStatus = "Retired"
	PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsStatusUnderDevelopment PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsStatus = "Under Development"
)

// Defines values for GetGatewayCEDAR20Core20API200DomainModelListParamsModel.
const (
	CmsApplicationReferenceModel GetGatewayCEDAR20Core20API200DomainModelListParamsModel = "CmsApplicationReferenceModel"
	CmsBusinessReferenceModel    GetGatewayCEDAR20Core20API200DomainModelListParamsModel = "CmsBusinessReferenceModel"
	CmsDataReferenceModel        GetGatewayCEDAR20Core20API200DomainModelListParamsModel = "CmsDataReferenceModel"
)

// Defines values for GetGatewayCEDAR20Core20API200EnumerationParamsApplication.
const (
	GetGatewayCEDAR20Core20API200EnumerationParamsApplicationAlfabet GetGatewayCEDAR20Core20API200EnumerationParamsApplication = "alfabet"
	GetGatewayCEDAR20Core20API200EnumerationParamsApplicationAll     GetGatewayCEDAR20Core20API200EnumerationParamsApplication = "all"
)

// Defines values for GetGatewayCEDAR20Core20API200ExchangeParamsDirection.
const (
	GetGatewayCEDAR20Core20API200ExchangeParamsDirectionBoth     GetGatewayCEDAR20Core20API200ExchangeParamsDirection = "both"
	GetGatewayCEDAR20Core20API200ExchangeParamsDirectionReceiver GetGatewayCEDAR20Core20API200ExchangeParamsDirection = "receiver"
	GetGatewayCEDAR20Core20API200ExchangeParamsDirectionSender   GetGatewayCEDAR20Core20API200ExchangeParamsDirection = "sender"
)

// Defines values for GetGatewayCEDAR20Core20API200RoleParamsApplication.
const (
	GetGatewayCEDAR20Core20API200RoleParamsApplicationAlfabet GetGatewayCEDAR20Core20API200RoleParamsApplication = "alfabet"
	GetGatewayCEDAR20Core20API200RoleParamsApplicationAll     GetGatewayCEDAR20Core20API200RoleParamsApplication = "all"
)

// Defines values for PostGatewayCEDAR20Core20API200RoleJSONBodyApplication.
const (
	PostGatewayCEDAR20Core20API200RoleJSONBodyApplicationAlfabet PostGatewayCEDAR20Core20API200RoleJSONBodyApplication = "alfabet"
	PostGatewayCEDAR20Core20API200RoleJSONBodyApplicationAll     PostGatewayCEDAR20Core20API200RoleJSONBodyApplication = "all"
)

// Defines values for DeleteGatewayCEDAR20Core20API200RoleListParamsApplication.
const (
	DeleteGatewayCEDAR20Core20API200RoleListParamsApplicationAlfabet DeleteGatewayCEDAR20Core20API200RoleListParamsApplication = "alfabet"
	DeleteGatewayCEDAR20Core20API200RoleListParamsApplicationAll     DeleteGatewayCEDAR20Core20API200RoleListParamsApplication = "all"
)

// Defines values for GetGatewayCEDAR20Core20API200RoleTypeApplicationParamsApplication.
const (
	GetGatewayCEDAR20Core20API200RoleTypeApplicationParamsApplicationAlfabet GetGatewayCEDAR20Core20API200RoleTypeApplicationParamsApplication = "alfabet"
	GetGatewayCEDAR20Core20API200RoleTypeApplicationParamsApplicationAll     GetGatewayCEDAR20Core20API200RoleTypeApplicationParamsApplication = "all"
)

// Defines values for GetGatewayCEDAR20Core20API200UserParamsApplication.
const (
	GetGatewayCEDAR20Core20API200UserParamsApplicationAlfabet GetGatewayCEDAR20Core20API200UserParamsApplication = "alfabet"
	GetGatewayCEDAR20Core20API200UserParamsApplicationAll     GetGatewayCEDAR20Core20API200UserParamsApplication = "all"
)

// Defines values for PostGatewayCEDAR20Core20API200UserJSONBodyApplication.
const (
	PostGatewayCEDAR20Core20API200UserJSONBodyApplicationAlfabet PostGatewayCEDAR20Core20API200UserJSONBodyApplication = "alfabet"
	PostGatewayCEDAR20Core20API200UserJSONBodyApplicationAll     PostGatewayCEDAR20Core20API200UserJSONBodyApplication = "all"
)

// Defines values for PostGatewayCEDARIntake10IntakeParamsValidatePayload.
const (
	PostGatewayCEDARIntake10IntakeParamsValidatePayloadFalse PostGatewayCEDARIntake10IntakeParamsValidatePayload = "false"
	PostGatewayCEDARIntake10IntakeParamsValidatePayloadTrue  PostGatewayCEDARIntake10IntakeParamsValidatePayload = "true"
)

// Defines values for PostGatewayCEDARIntake10IntakeJSONBodyBodyFormat.
const (
	JSON PostGatewayCEDARIntake10IntakeJSONBodyBodyFormat = "JSON"
	XML  PostGatewayCEDARIntake10IntakeJSONBodyBodyFormat = "XML"
)

// Defines values for GetGatewayCEDARIntake10IntakeStatusParamsCedarStatus.
const (
	Error     GetGatewayCEDARIntake10IntakeStatusParamsCedarStatus = "Error"
	InProcess GetGatewayCEDARIntake10IntakeStatusParamsCedarStatus = "In Process"
	New       GetGatewayCEDARIntake10IntakeStatusParamsCedarStatus = "New"
	OnHold    GetGatewayCEDARIntake10IntakeStatusParamsCedarStatus = "On Hold"
	Processed GetGatewayCEDARIntake10IntakeStatusParamsCedarStatus = "Processed"
)

// Defines values for GetGatewaySystem20Census20Core20API200AdminReviewerParamsType.
const (
	DA GetGatewaySystem20Census20Core20API200AdminReviewerParamsType = "DA"
	QA GetGatewaySystem20Census20Core20API200AdminReviewerParamsType = "QA"
)

// Defines values for GetGatewaySystem20Census20Core20API200DataExchangeStatusParamsDirection.
const (
	GetGatewaySystem20Census20Core20API200DataExchangeStatusParamsDirectionBoth     GetGatewaySystem20Census20Core20API200DataExchangeStatusParamsDirection = "both"
	GetGatewaySystem20Census20Core20API200DataExchangeStatusParamsDirectionReceiver GetGatewaySystem20Census20Core20API200DataExchangeStatusParamsDirection = "receiver"
	GetGatewaySystem20Census20Core20API200DataExchangeStatusParamsDirectionSender   GetGatewaySystem20Census20Core20API200DataExchangeStatusParamsDirection = "sender"
)

// Defines values for GetGatewaySystem20Census20Core20API200PageDataCentersParamsState.
const (
	GetGatewaySystem20Census20Core20API200PageDataCentersParamsStateActive  GetGatewaySystem20Census20Core20API200PageDataCentersParamsState = "active"
	GetGatewaySystem20Census20Core20API200PageDataCentersParamsStatePlanned GetGatewaySystem20Census20Core20API200PageDataCentersParamsState = "planned"
	GetGatewaySystem20Census20Core20API200PageDataCentersParamsStateRetired GetGatewaySystem20Census20Core20API200PageDataCentersParamsState = "retired"
)

// Defines values for GetGatewaySystem20Census20Core20API200PageDataCentersParamsStatus.
const (
	Approved GetGatewaySystem20Census20Core20API200PageDataCentersParamsStatus = "approved"
	Draft    GetGatewaySystem20Census20Core20API200PageDataCentersParamsStatus = "draft"
)

// Defines values for GetGatewaySystem20Census20Core20API200PageDataCentersParamsType.
const (
	GetGatewaySystem20Census20Core20API200PageDataCentersParamsTypeDevelopment    GetGatewaySystem20Census20Core20API200PageDataCentersParamsType = "Development"
	GetGatewaySystem20Census20Core20API200PageDataCentersParamsTypeImplementation GetGatewaySystem20Census20Core20API200PageDataCentersParamsType = "Implementation"
	GetGatewaySystem20Census20Core20API200PageDataCentersParamsTypeIntegration    GetGatewaySystem20Census20Core20API200PageDataCentersParamsType = "Integration"
	GetGatewaySystem20Census20Core20API200PageDataCentersParamsTypeOther          GetGatewaySystem20Census20Core20API200PageDataCentersParamsType = "Other"
	GetGatewaySystem20Census20Core20API200PageDataCentersParamsTypeProduction     GetGatewaySystem20Census20Core20API200PageDataCentersParamsType = "Production"
	GetGatewaySystem20Census20Core20API200PageDataCentersParamsTypeTesting        GetGatewaySystem20Census20Core20API200PageDataCentersParamsType = "Testing"
	GetGatewaySystem20Census20Core20API200PageDataCentersParamsTypeTraining       GetGatewaySystem20Census20Core20API200PageDataCentersParamsType = "Training"
	GetGatewaySystem20Census20Core20API200PageDataCentersParamsTypeValidation     GetGatewaySystem20Census20Core20API200PageDataCentersParamsType = "Validation"
)

// Defines values for PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsBankingData.
const (
	PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsBankingDataNo  PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsBankingData = "No"
	PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsBankingDataYes PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsBankingData = "Yes"
)

// Defines values for PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsBeneficiaryAddress.
const (
	PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsBeneficiaryAddressNo  PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsBeneficiaryAddress = "No"
	PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsBeneficiaryAddressYes PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsBeneficiaryAddress = "Yes"
)

// Defines values for PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsPhi.
const (
	PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsPhiNo  PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsPhi = "No"
	PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsPhiYes PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsPhi = "Yes"
)

// Defines values for PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsPii.
const (
	PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsPiiNo  PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsPii = "No"
	PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsPiiYes PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsPii = "Yes"
)

// Defines values for PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeExchangeConnectionAuthenticated.
const (
	PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeExchangeConnectionAuthenticatedNo  PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeExchangeConnectionAuthenticated = "No"
	PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeExchangeConnectionAuthenticatedYes PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeExchangeConnectionAuthenticated = "Yes"
)

// Defines values for PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeExchangeContainsCUI.
const (
	PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeExchangeContainsCUINo  PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeExchangeContainsCUI = "No"
	PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeExchangeContainsCUIYes PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeExchangeContainsCUI = "Yes"
)

// Defines values for PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeIsAddressEditable.
const (
	PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeIsAddressEditableNo  PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeIsAddressEditable = "No"
	PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeIsAddressEditableYes PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeIsAddressEditable = "Yes"
)

// Defines values for PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeIsBeneficiaryMailingFile.
const (
	PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeIsBeneficiaryMailingFileNo  PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeIsBeneficiaryMailingFile = "No"
	PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeIsBeneficiaryMailingFileYes PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeIsBeneficiaryMailingFile = "Yes"
)

// Defines values for PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeSharedViaApi.
const (
	PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeSharedViaApiNo  PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeSharedViaApi = "No"
	PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeSharedViaApiYes PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeSharedViaApi = "Yes"
)

// Defines values for PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsIsSaasProduct.
const (
	PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsIsSaasProductNo  PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsIsSaasProduct = "No"
	PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsIsSaasProductYes PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsIsSaasProduct = "Yes"
)

// Defines values for PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsProvidesAiCapability.
const (
	PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsProvidesAiCapabilityNo  PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsProvidesAiCapability = "No"
	PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsProvidesAiCapabilityYes PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsProvidesAiCapability = "Yes"
)

// Defines values for PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsSoftwareLicenseMechanismType.
const (
	PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsSoftwareLicenseMechanismTypeConcurrentUser PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsSoftwareLicenseMechanismType = "Concurrent User"
	PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsSoftwareLicenseMechanismTypeNamedUser      PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsSoftwareLicenseMechanismType = "Named User"
	PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsSoftwareLicenseMechanismTypeOther          PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsSoftwareLicenseMechanismType = "Other"
	PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsSoftwareLicenseMechanismTypeProcessor      PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsSoftwareLicenseMechanismType = "Processor"
	PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsSoftwareLicenseMechanismTypeSiteLicense    PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsSoftwareLicenseMechanismType = "Site License"
)

// Defines values for PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsVendorOffersAIcapabilityviaSoftwareProduct.
const (
	PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsVendorOffersAIcapabilityviaSoftwareProductNo  PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsVendorOffersAIcapabilityviaSoftwareProduct = "No"
	PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsVendorOffersAIcapabilityviaSoftwareProductYes PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsVendorOffersAIcapabilityviaSoftwareProduct = "Yes"
)

// Defines values for PostGatewaySystem20Census20Core20API200StatusJSONBodyStatusStatus.
const (
	Complete    PostGatewaySystem20Census20Core20API200StatusJSONBodyStatusStatus = "Complete"
	InProgress  PostGatewaySystem20Census20Core20API200StatusJSONBodyStatusStatus = "In Progress"
	IssuesFound PostGatewaySystem20Census20Core20API200StatusJSONBodyStatusStatus = "Issues Found"
	NotRequired PostGatewaySystem20Census20Core20API200StatusJSONBodyStatusStatus = "Not Required"
	NotStarted  PostGatewaySystem20Census20Core20API200StatusJSONBodyStatusStatus = "Not Started"
	Passed      PostGatewaySystem20Census20Core20API200StatusJSONBodyStatusStatus = "Passed"
)

// Defines values for GetGatewayTechnopedia10SoftwareExtendedParamsSummary.
const (
	GetGatewayTechnopedia10SoftwareExtendedParamsSummaryFalse GetGatewayTechnopedia10SoftwareExtendedParamsSummary = "false"
	GetGatewayTechnopedia10SoftwareExtendedParamsSummaryTrue  GetGatewayTechnopedia10SoftwareExtendedParamsSummary = "true"
)

// Defines values for GetGatewayTechnopedia10SoftwareExtendedParamsUpdate.
const (
	GetGatewayTechnopedia10SoftwareExtendedParamsUpdateFalse GetGatewayTechnopedia10SoftwareExtendedParamsUpdate = "false"
	GetGatewayTechnopedia10SoftwareExtendedParamsUpdateTrue  GetGatewayTechnopedia10SoftwareExtendedParamsUpdate = "true"
)

// BadRequest defines model for BadRequest.
type BadRequest struct {
	Message string `json:"message"`
}

// Conflict defines model for Conflict.
type Conflict struct {
	Error string `json:"error"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error   string `json:"error"`
	Message string `json:"message"`
}

// Forbidden defines model for Forbidden.
type Forbidden struct {
	Error string `json:"error"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	Error   string `json:"error"`
	Message string `json:"message"`
}

// NotFound defines model for NotFound.
type NotFound struct {
	Error string `json:"error"`
}

// OrganizationSchema defines model for OrganizationSchema.
type OrganizationSchema struct {
	// Organizations Child organizations (recursive structure)
	Organizations *[]OrganizationSchema `json:"Organizations"`

	// Acronym Acronym of the organization
	Acronym *string `json:"acronym"`

	// Component Component type of the organization
	Component *string `json:"component"`

	// Description Description of the organization
	Description *string `json:"description"`

	// FullPath Full hierarchical path of the organization
	FullPath *string `json:"fullPath"`

	// Id Unique identifier for the organization
	Id string `json:"id"`

	// Name Name of the organization
	Name string `json:"name"`

	// ParentId ID of the parent organization
	ParentId *string `json:"parentId"`
}

// Role defines model for Role.
type Role struct {
	// Application Application where the role assignment exists
	Application       RoleApplication `json:"application"`
	AssigneeDesc      *string         `json:"assigneeDesc,omitempty"`
	AssigneeEmail     *string         `json:"assigneeEmail,omitempty"`
	AssigneeFirstName *string         `json:"assigneeFirstName,omitempty"`

	// AssigneeId ID of the role assignee, if a person
	AssigneeId *string `json:"assigneeId,omitempty"`

	// AssigneeIsDeleted Indicated the person assigned the role is marked for deletion
	AssigneeIsDeleted *string `json:"assigneeIsDeleted,omitempty"`
	AssigneeLastName  *string `json:"assigneeLastName,omitempty"`

	// AssigneeOrgId ID of the role assignee, if an organization
	AssigneeOrgId   *string           `json:"assigneeOrgId,omitempty"`
	AssigneeOrgName *string           `json:"assigneeOrgName,omitempty"`
	AssigneePhone   *string           `json:"assigneePhone,omitempty"`
	AssigneeType    *RoleAssigneeType `json:"assigneeType,omitempty"`

	// AssigneeUserName Username of the role assignee, if a person
	AssigneeUserName *string `json:"assigneeUserName,omitempty"`

	// ObjectId ID of the object the role is assigned to
	ObjectId string `json:"objectId"`

	// ObjectType The type of object the role is assigned to
	ObjectType *string `json:"objectType,omitempty"`

	// RoleId ID of the role assignment
	RoleId *string `json:"roleId,omitempty"`

	// RoleTypeDesc Description of the role type
	RoleTypeDesc *string `json:"roleTypeDesc,omitempty"`

	// RoleTypeId ID of the role type
	RoleTypeId string `json:"roleTypeId"`

	// RoleTypeName Name of the role type
	RoleTypeName *string `json:"roleTypeName,omitempty"`
}

// RoleApplication Application where the role assignment exists
type RoleApplication string

// RoleAssigneeType defines model for Role.AssigneeType.
type RoleAssigneeType string

// RoleType defines model for RoleType.
type RoleType struct {
	// Application Application where the role assignment exists
	Application RoleTypeApplication `json:"application"`
	Description *string             `json:"description,omitempty"`
	Id          *string             `json:"id,omitempty"`
	Name        *RoleTypeName       `json:"name,omitempty"`
}

// RoleTypeApplication Application where the role assignment exists
type RoleTypeApplication string

// RoleTypeName defines model for RoleType.Name.
type RoleTypeName string

// Unauthorized defines model for Unauthorized.
type Unauthorized struct {
	Error string `json:"error"`
}

// GetGatewayCEDAR20Core20API200AuthorityToOperateParams defines parameters for GetGatewayCEDAR20Core20API200AuthorityToOperate.
type GetGatewayCEDAR20Core20API200AuthorityToOperateParams struct {
	// SystemId System ID in UUID format (with curly braces)
	SystemId *openapi_types.UUID `form:"systemId,omitempty" json:"systemId,omitempty"`

	// Uuid CMS UUID for the system
	Uuid *openapi_types.UUID `form:"uuid,omitempty" json:"uuid,omitempty"`

	// FismaSystemAcronym FISMA system acronym
	FismaSystemAcronym *string `form:"fismaSystemAcronym,omitempty" json:"fismaSystemAcronym,omitempty"`

	// TlcPhase Technology Life Cycle phase
	TlcPhase *string `form:"tlcPhase,omitempty" json:"tlcPhase,omitempty"`

	// ContainsPersonallyIdentifiableInformation Whether the system contains personally identifiable information
	ContainsPersonallyIdentifiableInformation *GetGatewayCEDAR20Core20API200AuthorityToOperateParamsContainsPersonallyIdentifiableInformation `form:"containsPersonallyIdentifiableInformation,omitempty" json:"containsPersonallyIdentifiableInformation,omitempty"`

	// IsProtectedHealthInformation Whether the system contains protected health information
	IsProtectedHealthInformation *GetGatewayCEDAR20Core20API200AuthorityToOperateParamsIsProtectedHealthInformation `form:"isProtectedHealthInformation,omitempty" json:"isProtectedHealthInformation,omitempty"`

	// DispositionDateAfter Filter for effective dates after this date (YYYY-MM-DD format)
	DispositionDateAfter *openapi_types.Date `form:"dispositionDateAfter,omitempty" json:"dispositionDateAfter,omitempty"`

	// DispositionDateBefore Filter for expiration dates before this date (YYYY-MM-DD format)
	DispositionDateBefore *openapi_types.Date `form:"dispositionDateBefore,omitempty" json:"dispositionDateBefore,omitempty"`
}

// GetGatewayCEDAR20Core20API200AuthorityToOperateParamsContainsPersonallyIdentifiableInformation defines parameters for GetGatewayCEDAR20Core20API200AuthorityToOperate.
type GetGatewayCEDAR20Core20API200AuthorityToOperateParamsContainsPersonallyIdentifiableInformation string

// GetGatewayCEDAR20Core20API200AuthorityToOperateParamsIsProtectedHealthInformation defines parameters for GetGatewayCEDAR20Core20API200AuthorityToOperate.
type GetGatewayCEDAR20Core20API200AuthorityToOperateParamsIsProtectedHealthInformation string

// GetGatewayCEDAR20Core20API200BudgetParams defines parameters for GetGatewayCEDAR20Core20API200Budget.
type GetGatewayCEDAR20Core20API200BudgetParams struct {
	// SystemId ID of the system that the budget is associated with. Adding this parameter will only return the system matching the systemId
	SystemId *string `form:"systemId,omitempty" json:"systemId,omitempty"`

	// ProjectTitle ID of the system that the budget is associated with. Adding this parameter will instruct the interface to only return the system matching the systemId.
	ProjectTitle *string `form:"projectTitle,omitempty" json:"projectTitle,omitempty"`

	// ProjectId Project Id string to search. Adding this parameter will instruct the interface to only return the system matching the projectId.
	ProjectId *string `form:"projectId,omitempty" json:"projectId,omitempty"`

	// OnlyIds Whether the call will return simply the IDs. If not set, the response will also include projectId, systemId, fundingId and funding.
	OnlyIds *bool `form:"onlyIds,omitempty" json:"onlyIds,omitempty"`

	// IdsOnly Whether the call will return simply the IDs. If not set, the response will also include projectId, systemId, fundingId and funding.
	IdsOnly *bool `form:"idsOnly,omitempty" json:"idsOnly,omitempty"`
}

// PostGatewayCEDAR20Core20API200BudgetJSONBody defines parameters for PostGatewayCEDAR20Core20API200Budget.
type PostGatewayCEDAR20Core20API200BudgetJSONBody struct {
	// Budgets List of budgets to be added to CEDAR.
	Budgets []struct {
		// FiscalYear The fiscal year for the budget.
		FiscalYear *string `json:"FiscalYear"`

		// FundingSource The source of funding for the budget.
		FundingSource *string `json:"FundingSource"`

		// Name Name of the budget item (optional).
		Name *string `json:"Name"`

		// Funding Description of the allocation of this budget to the system in question (optional).
		Funding *string `json:"funding"`

		// FundingId Cross-reference ID for relationship between budget project and application (optional).
		FundingId *string `json:"fundingId"`

		// Id OFM budget internal ID in system of record (optional on add).
		Id *string `json:"id"`

		// ProjectId OFM budget project ID in system of record (required).
		ProjectId string `json:"projectId"`

		// ProjectTitle Title of this project (optional).
		ProjectTitle *string `json:"projectTitle"`

		// SystemId ID of the system which this budget funds (optional).
		SystemId *string `json:"systemId"`
	} `json:"Budgets"`
}

// PutGatewayCEDAR20Core20API200BudgetJSONBody defines parameters for PutGatewayCEDAR20Core20API200Budget.
type PutGatewayCEDAR20Core20API200BudgetJSONBody struct {
	// Budgets List of budgets to update for a system.
	Budgets []struct {
		// FiscalYear Fiscal year of the budget.
		FiscalYear *string `json:"FiscalYear"`

		// FundingSource Source of the budget funding.
		FundingSource *string `json:"FundingSource"`

		// Name Name of the budget.
		Name *string `json:"Name"`

		// Funding Description of the allocation of this budget to the system in question (optional).
		Funding *string `json:"funding"`

		// FundingId Cross-reference ID for relationship between budget project and application in system of record.
		FundingId string `json:"fundingId"`

		// Id OFM budget internal ID in system of record (optional).
		Id *string `json:"id"`

		// ProjectId OFM budget project ID in system of record.
		ProjectId string `json:"projectId"`

		// ProjectTitle Title of this project (optional).
		ProjectTitle *string `json:"projectTitle"`

		// SystemId System which this budget funds (optional).
		SystemId *string `json:"systemId"`
	} `json:"Budgets"`
}

// DeleteGatewayCEDAR20Core20API200BudgetListParams defines parameters for DeleteGatewayCEDAR20Core20API200BudgetList.
type DeleteGatewayCEDAR20Core20API200BudgetListParams struct {
	// Id An array of one or more budget IDs to delete. Can be provided as repeated parameters (id=ID1&id=ID2) or with bracket notation (id[]=ID1&id[]=ID2).
	Id []string `form:"id" json:"id"`
}

// GetGatewayCEDAR20Core20API200BudgetSystemCostFindParams defines parameters for GetGatewayCEDAR20Core20API200BudgetSystemCostFind.
type GetGatewayCEDAR20Core20API200BudgetSystemCostFindParams struct {
	// SystemId ID of the system that the budget is associated with. Adding this parameter will instruct the interface to only return the system matching the systemId.
	SystemId *string `form:"systemId,omitempty" json:"systemId,omitempty"`
}

// PostGatewayCEDAR20Core20API200ComponentJSONBody defines parameters for PostGatewayCEDAR20Core20API200Component.
type PostGatewayCEDAR20Core20API200ComponentJSONBody struct {
	// Category The software category name (e.g., "Operating System").
	Category string `json:"category"`

	// CmsEndOfSupportDate End of support date from Technopedia (YYYY-MM-DD).
	CmsEndOfSupportDate *openapi_types.Date `json:"cmsEndOfSupportDate"`

	// CmsTechnopediaBuildVersion Build version from Technopedia.
	CmsTechnopediaBuildVersion *string `json:"cmsTechnopediaBuildVersion"`

	// CmsTechnopediaComponent The Technopedia component name for the software.
	CmsTechnopediaComponent string `json:"cmsTechnopediaComponent"`

	// CmsTechnopediaEdition Edition from Technopedia (e.g., "Enterprise").
	CmsTechnopediaEdition *string `json:"cmsTechnopediaEdition"`

	// CmsTechnopediaLicensable Indicates if the software is licensable (e.g., "Yes").
	CmsTechnopediaLicensable *string `json:"cmsTechnopediaLicensable"`

	// CmsTechnopediaRelease Release version from Technopedia.
	CmsTechnopediaRelease *string `json:"cmsTechnopediaRelease"`

	// CmsTechnopediaReleaseId Release ID from Technopedia.
	CmsTechnopediaReleaseId *string `json:"cmsTechnopediaReleaseId"`

	// CmsTechnopediaVersion Version from Technopedia (e.g., "1.2").
	CmsTechnopediaVersion *string `json:"cmsTechnopediaVersion"`

	// CmsTechnopediaVersionGroup Version group from Technopedia.
	CmsTechnopediaVersionGroup *string `json:"cmsTechnopediaVersionGroup"`

	// Description A description of the software component.
	Description *string `json:"description"`

	// EndDate The end date of the component (YYYY-MM-DD).
	EndDate *openapi_types.Date `json:"endDate"`

	// Name The name of the software component.
	Name string `json:"name"`

	// StartDate The start date of the component (YYYY-MM-DD).
	StartDate *openapi_types.Date `json:"startDate"`

	// Vendor The name of the vendor providing the software.
	Vendor string `json:"vendor"`
}

// PostGatewayCEDAR20Core20API200ContractJSONBody defines parameters for PostGatewayCEDAR20Core20API200Contract.
type PostGatewayCEDAR20Core20API200ContractJSONBody struct {
	// Contracts List of contract objects to be added as deliverables.
	Contracts []struct {
		// ContractNumber The contract number.
		ContractNumber *string `json:"ContractNumber"`

		// IsDeliveryOrg Indicates if it is a delivery organization. Expected values: "Yes" or "No".
		IsDeliveryOrg *string `json:"IsDeliveryOrg"`

		// OrderNumber The order number associated with the contract.
		OrderNumber *string `json:"OrderNumber"`

		// POPEndDate Period of Performance (POP) end date.
		POPEndDate *openapi_types.Date `json:"POPEndDate"`

		// POPStartDate Period of Performance (POP) start date.
		POPStartDate *openapi_types.Date `json:"POPStartDate"`

		// ProductServiceDescription Description of the product or service provided.
		ProductServiceDescription *string `json:"ProductServiceDescription"`

		// ProjectTitle Title of the project associated with the contract.
		ProjectTitle *string `json:"ProjectTitle"`

		// ServiceProvided Detailed description of the service provided.
		ServiceProvided *string `json:"ServiceProvided"`

		// AwardId The award ID or main contract identifier.
		AwardId *string `json:"awardId"`

		// ContractADO Indicates if it is an ADO Parent Contract. Expected values: "Yes" or "No".
		ContractADO *string `json:"contractADO"`

		// ContractName The name of the contract.
		ContractName *string `json:"contractName"`

		// Description General description of the contract.
		Description *string `json:"description"`

		// Id The ID of the existing contract in Sparx that this deliverable relates to.
		Id string `json:"id"`

		// ParentAwardId The ID of the parent award/contract, if applicable.
		ParentAwardId *string `json:"parentAwardId"`

		// SystemId The ID of the system (architecture element) that this contract deliverable is associated with.
		SystemId string `json:"systemId"`
	} `json:"Contracts"`
}

// PutGatewayCEDAR20Core20API200ContractJSONBody defines parameters for PutGatewayCEDAR20Core20API200Contract.
type PutGatewayCEDAR20Core20API200ContractJSONBody struct {
	// Contracts An array of contracts to be updated in Alfabet.
	Contracts *[]struct {
		// ContractNumber The contract number (optional).
		ContractNumber *string `json:"ContractNumber"`

		// IsDeliveryOrg Indicates if it is a delivery organization (optional).
		IsDeliveryOrg *string `json:"IsDeliveryOrg"`

		// OrderNumber The order number (optional).
		OrderNumber *string `json:"OrderNumber"`

		// POPEndDate Period of Performance End Date (optional, YYYY-MM-DD).
		POPEndDate *openapi_types.Date `json:"POPEndDate"`

		// POPStartDate Period of Performance Start Date (optional, YYYY-MM-DD).
		POPStartDate *openapi_types.Date `json:"POPStartDate"`

		// ProductServiceDescription Description of the product or service (optional).
		ProductServiceDescription *string `json:"ProductServiceDescription"`

		// ProjectTitle The title of the project (optional).
		ProjectTitle *string `json:"ProjectTitle"`

		// ServiceProvided Description of the service provided (optional).
		ServiceProvided *string `json:"ServiceProvided"`

		// AwardId The award ID of the contract (required).
		AwardId string `json:"awardId"`

		// ContractADO Is ADO Parent Contract, Yes/No (optional).
		ContractADO *string `json:"contractADO"`

		// ContractDeliverableId The ID of the associated contract deliverable (optional).
		ContractDeliverableId *string `json:"contractDeliverableId"`

		// ContractName The name of the contract (optional).
		ContractName *string `json:"contractName"`

		// Description Description of the contract (optional).
		Description *string `json:"description"`

		// Id The unique identifier of the contract.
		Id string `json:"id"`

		// ParentAwardId The parent contract number.
		ParentAwardId string `json:"parentAwardId"`

		// SystemId System which this contract funds (optional).
		SystemId *string `json:"systemId"`
	} `json:"Contracts,omitempty"`

	// BudgetsOnly Whether only the budgets portion of the contract should be updated (true) or if set to false (or omitted), the Contract Deliverable records will also be updated.
	BudgetsOnly *bool `json:"budgetsOnly"`
}

// DeleteGatewayCEDAR20Core20API200ContractListParams defines parameters for DeleteGatewayCEDAR20Core20API200ContractList.
type DeleteGatewayCEDAR20Core20API200ContractListParams struct {
	// Id An array of one or more contract IDs to delete. Can be provided as repeated parameters (id=123&id=456) or with bracket notation (id[]=123&id[]=456).
	Id []string `form:"id" json:"id"`
}

// GetGatewayCEDAR20Core20API200ContractListParams defines parameters for GetGatewayCEDAR20Core20API200ContractList.
type GetGatewayCEDAR20Core20API200ContractListParams struct {
	// SystemId ID of the system to get contracts for. Adding this parameter will filter contracts to only those associated with the specified system.
	SystemId *string `form:"systemId,omitempty" json:"systemId,omitempty"`

	// Keyword Keyword to search for in contract names. Performs a LIKE search on contract names.
	Keyword *string `form:"keyword,omitempty" json:"keyword,omitempty"`

	// POPStartDate Filter contracts by Period of Performance start date.
	POPStartDate *openapi_types.Date `form:"POPStartDate,omitempty" json:"POPStartDate,omitempty"`

	// POPEndDate Filter contracts by Period of Performance end date.
	POPEndDate *openapi_types.Date `form:"POPEndDate,omitempty" json:"POPEndDate,omitempty"`

	// ContractName Filter contracts by exact contract name match.
	ContractName *string `form:"contractName,omitempty" json:"contractName,omitempty"`
}

// GetGatewayCEDAR20Core20API200CostTypeListParams defines parameters for GetGatewayCEDAR20Core20API200CostTypeList.
type GetGatewayCEDAR20Core20API200CostTypeListParams struct {
	// Application Application where the object or role exists.
	Application GetGatewayCEDAR20Core20API200CostTypeListParamsApplication `form:"application" json:"application"`

	// Name The name of a specific group of cost types to filter by.
	Name string `form:"name" json:"name"`
}

// GetGatewayCEDAR20Core20API200CostTypeListParamsApplication defines parameters for GetGatewayCEDAR20Core20API200CostTypeList.
type GetGatewayCEDAR20Core20API200CostTypeListParamsApplication string

// DeleteGatewayCEDAR20Core20API200DeploymentParams defines parameters for DeleteGatewayCEDAR20Core20API200Deployment.
type DeleteGatewayCEDAR20Core20API200DeploymentParams struct {
	// Id An array of one or more deployment IDs to delete. Can be provided as repeated parameters (id=123&id=456) or with bracket notation (id[]=123&id[]=456).
	Id []string `form:"id" json:"id"`
}

// GetGatewayCEDAR20Core20API200DeploymentParams defines parameters for GetGatewayCEDAR20Core20API200Deployment.
type GetGatewayCEDAR20Core20API200DeploymentParams struct {
	// SystemId ID of the system that the deployment is associated with.
	SystemId string `form:"systemId" json:"systemId"`

	// State Deployment state.
	State *GetGatewayCEDAR20Core20API200DeploymentParamsState `form:"state,omitempty" json:"state,omitempty"`

	// Status Deployment status.
	Status *GetGatewayCEDAR20Core20API200DeploymentParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// DeploymentType Deployment type.
	DeploymentType *GetGatewayCEDAR20Core20API200DeploymentParamsDeploymentType `form:"deploymentType,omitempty" json:"deploymentType,omitempty"`
}

// GetGatewayCEDAR20Core20API200DeploymentParamsState defines parameters for GetGatewayCEDAR20Core20API200Deployment.
type GetGatewayCEDAR20Core20API200DeploymentParamsState string

// GetGatewayCEDAR20Core20API200DeploymentParamsStatus defines parameters for GetGatewayCEDAR20Core20API200Deployment.
type GetGatewayCEDAR20Core20API200DeploymentParamsStatus string

// GetGatewayCEDAR20Core20API200DeploymentParamsDeploymentType defines parameters for GetGatewayCEDAR20Core20API200Deployment.
type GetGatewayCEDAR20Core20API200DeploymentParamsDeploymentType string

// PostGatewayCEDAR20Core20API200DeploymentJSONBody defines parameters for PostGatewayCEDAR20Core20API200Deployment.
type PostGatewayCEDAR20Core20API200DeploymentJSONBody struct {
	// Deployments List of deployment records to add to the system.
	Deployments []struct {
		// DataCenter Details of the associated data center. Only the ID is used for insertion.
		DataCenter struct {
			// Id ID of the data center (UUID format)
			Id string `json:"id"`
		} `json:"DataCenter"`

		// AwsEnclave AWS enclave used for the deployment (e.g., "Standard", "GovCloud", "C2S")
		AwsEnclave *string `json:"awsEnclave"`

		// AwsEnclaveOther Other AWS enclave if "Other" is selected for awsEnclave
		AwsEnclaveOther *string `json:"awsEnclaveOther"`

		// ContractorName Name of the contractor associated with the deployment
		ContractorName *string `json:"contractorName"`

		// DeploymentType Type of deployment (e.g., "Development", "Production", "Disaster Recovery")
		DeploymentType string `json:"deploymentType"`

		// HasProductionData Indicates if the deployment handles production data ("Yes" or "No")
		HasProductionData *string `json:"hasProductionData"`

		// Id Deployment ID (should not be provided for add operations)
		Id *string `json:"id"`

		// IsHotSite Indicates if the deployment is a hot site ("Yes" or "No")
		IsHotSite *string `json:"isHotSite"`

		// NetworkEncryption Indicates if network encryption is used ("Yes" or "No")
		NetworkEncryption *string `json:"networkEncryption"`

		// OtherSpecialUsers Description of other special users
		OtherSpecialUsers *string `json:"otherSpecialUsers"`

		// ReplicatedSystemElements List of replicated system elements (e.g., "Data", "System Software", "Application Software")
		ReplicatedSystemElements *[]string `json:"replicatedSystemElements"`

		// Status Current status of the deployment (e.g., "Active", "Inactive", "Planned")
		Status *string `json:"status"`

		// SystemId The ID of the system this deployment belongs to (UUID format)
		SystemId string `json:"systemId"`

		// UsersRequiringMFA Indicates if users require multi-factor authentication ("Yes" or "No")
		UsersRequiringMFA *string `json:"usersRequiringMFA"`

		// WanType Type of WAN connection (e.g., "Internet", "MPLS", "WAN")
		WanType *string `json:"wanType"`

		// WanTypeOther Other WAN type if "Other" is selected for wanType
		WanTypeOther *string `json:"wanTypeOther"`
	} `json:"Deployments"`
}

// PutGatewayCEDAR20Core20API200DeploymentJSONBody defines parameters for PutGatewayCEDAR20Core20API200Deployment.
type PutGatewayCEDAR20Core20API200DeploymentJSONBody struct {
	// Deployments List of deployments to update in Alfabet.
	Deployments []struct {
		// AwsEnclave AWS enclave type for cloud deployments.
		AwsEnclave *PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsAwsEnclave `json:"awsEnclave"`

		// AwsEnclaveOther Other AWS enclave type, if applicable.
		AwsEnclaveOther *string `json:"awsEnclaveOther"`

		// ContractorName Name of the contractor responsible for this deployment.
		ContractorName *string `json:"contractorName"`

		// DeploymentElementId ID of the specific deployment element.
		DeploymentElementId *string `json:"deploymentElementId"`

		// DeploymentType Type of deployment environment. Common values include "Cloud", "On-Premise", "Hybrid".
		DeploymentType *PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsDeploymentType `json:"deploymentType"`

		// Description Description of the deployment.
		Description *string `json:"description"`

		// EndDate Date when the deployment ended or is planned to end.
		EndDate *time.Time `json:"endDate"`

		// HasProductionData Indicates if the deployment handles production data. Must be "true" or "false" as a string.
		HasProductionData *PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsHasProductionData `json:"hasProductionData"`

		// Id Unique identifier of the deployment. Must be a valid GUID format enclosed in curly braces.
		Id string `json:"id"`

		// IsHotSite Indicates if the deployment is a hot site for disaster recovery. Must be "true" or "false" as a string.
		IsHotSite *PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsIsHotSite `json:"isHotSite"`

		// MovingToCloud Indicates if the system is scheduled to move to cloud infrastructure. Must be "true" or "false" as a string.
		MovingToCloud *PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsMovingToCloud `json:"movingToCloud"`

		// MovingToCloudDate Planned date for moving to cloud.
		MovingToCloudDate *time.Time `json:"movingToCloudDate"`

		// Name Name of the deployment.
		Name *string `json:"name"`

		// NetworkEncryption Description of network encryption in use.
		NetworkEncryption *string `json:"networkEncryption"`

		// OtherSpecialUsers Description of other special user categories.
		OtherSpecialUsers *string `json:"otherSpecialUsers"`

		// ReplicatedSystemElements List of replicated system elements (e.g., "Data", "Application Software", "System Server Software").
		ReplicatedSystemElements *[]string `json:"replicatedSystemElements"`

		// StartDate Date when the deployment started.
		StartDate *time.Time `json:"startDate"`

		// State Operational state of the deployment.
		State *PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsState `json:"state"`

		// Status Current operational status of the deployment.
		Status *PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsStatus `json:"status"`

		// SystemId The ID of the system associated with this deployment. Must be a valid GUID format enclosed in curly braces.
		SystemId string `json:"systemId"`

		// SystemName Name of the system associated with this deployment.
		SystemName *string `json:"systemName"`

		// SystemVersion Version of the system associated with this deployment.
		SystemVersion *string `json:"systemVersion"`

		// UsersRequiringMFA Description of users requiring multi-factor authentication.
		UsersRequiringMFA *string `json:"usersRequiringMFA"`

		// WanType Type of WAN connection (e.g., "VPN", "Dedicated Line").
		WanType *string `json:"wanType"`

		// WanTypeOther Other WAN type, if applicable.
		WanTypeOther *string `json:"wanTypeOther"`
	} `json:"Deployments"`
}

// PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsAwsEnclave defines parameters for PutGatewayCEDAR20Core20API200Deployment.
type PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsAwsEnclave string

// PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsDeploymentType defines parameters for PutGatewayCEDAR20Core20API200Deployment.
type PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsDeploymentType string

// PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsHasProductionData defines parameters for PutGatewayCEDAR20Core20API200Deployment.
type PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsHasProductionData string

// PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsIsHotSite defines parameters for PutGatewayCEDAR20Core20API200Deployment.
type PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsIsHotSite string

// PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsMovingToCloud defines parameters for PutGatewayCEDAR20Core20API200Deployment.
type PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsMovingToCloud string

// PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsState defines parameters for PutGatewayCEDAR20Core20API200Deployment.
type PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsState string

// PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsStatus defines parameters for PutGatewayCEDAR20Core20API200Deployment.
type PutGatewayCEDAR20Core20API200DeploymentJSONBodyDeploymentsStatus string

// GetGatewayCEDAR20Core20API200DomainModelListParams defines parameters for GetGatewayCEDAR20Core20API200DomainModelList.
type GetGatewayCEDAR20Core20API200DomainModelListParams struct {
	// Model The name of a specific model to return. Currently only "CmsDataReferenceModel" is supported.
	Model GetGatewayCEDAR20Core20API200DomainModelListParamsModel `form:"model" json:"model"`
}

// GetGatewayCEDAR20Core20API200DomainModelListParamsModel defines parameters for GetGatewayCEDAR20Core20API200DomainModelList.
type GetGatewayCEDAR20Core20API200DomainModelListParamsModel string

// GetGatewayCEDAR20Core20API200DomainModelLevelParams defines parameters for GetGatewayCEDAR20Core20API200DomainModelLevel.
type GetGatewayCEDAR20Core20API200DomainModelLevelParams struct {
	// Model The name of specific reference model to return. A value from the GET /domainModelName endpoint, e.g., Architectural Domain, Business Capabilities, Information Domains.
	Model string `form:"model" json:"model"`
}

// GetGatewayCEDAR20Core20API200EnumerationParams defines parameters for GetGatewayCEDAR20Core20API200Enumeration.
type GetGatewayCEDAR20Core20API200EnumerationParams struct {
	// Application The application identifier to retrieve enumerations for (e.g., "all", "alfabet").
	Application GetGatewayCEDAR20Core20API200EnumerationParamsApplication `form:"application" json:"application"`

	// Names An array of enumeration names to retrieve. Can be provided as repeated parameters (names=TypeA&names=TypeB) or with bracket notation (names[]=TypeA&names[]=TypeB).
	Names []string `form:"names" json:"names"`
}

// GetGatewayCEDAR20Core20API200EnumerationParamsApplication defines parameters for GetGatewayCEDAR20Core20API200Enumeration.
type GetGatewayCEDAR20Core20API200EnumerationParamsApplication string

// GetGatewayCEDAR20Core20API200ExchangeParams defines parameters for GetGatewayCEDAR20Core20API200Exchange.
type GetGatewayCEDAR20Core20API200ExchangeParams struct {
	// SystemId ID of the system that the data exchange is associated with
	SystemId string `form:"systemId" json:"systemId"`

	// Direction The direction of the data exchange, either sender, receiver, or both
	Direction GetGatewayCEDAR20Core20API200ExchangeParamsDirection `form:"direction" json:"direction"`

	// Version Version of the data exchanges to be retrieved
	Version string `form:"version" json:"version"`
}

// GetGatewayCEDAR20Core20API200ExchangeParamsDirection defines parameters for GetGatewayCEDAR20Core20API200Exchange.
type GetGatewayCEDAR20Core20API200ExchangeParamsDirection string

// PutGatewayCEDAR20Core20API200ExchangeJSONBody defines parameters for PutGatewayCEDAR20Core20API200Exchange.
type PutGatewayCEDAR20Core20API200ExchangeJSONBody struct {
	// Exchanges List of data exchanges to update
	Exchanges *[]struct {
		// ApiOwnership Ownership details if shared via API
		ApiOwnership *string `json:"apiOwnership"`

		// BusinessPurposeOfAddress Business purpose for address data
		BusinessPurposeOfAddress *[]string `json:"businessPurposeOfAddress"`

		// ConnectionFrequency Frequency of data connection (e.g., Daily, Weekly)
		ConnectionFrequency *[]string `json:"connectionFrequency"`

		// ContainsBankingData Indicates if exchange contains banking data
		ContainsBankingData *bool `json:"containsBankingData"`

		// ContainsBeneficiaryAddress Indicates if exchange contains beneficiary address
		ContainsBeneficiaryAddress *bool `json:"containsBeneficiaryAddress"`

		// ContainsPhi Indicates if exchange contains PHI
		ContainsPhi *bool `json:"containsPhi"`

		// ContainsPii Indicates if exchange contains PII
		ContainsPii *bool `json:"containsPii"`

		// DataExchangeAgreement Details of data exchange agreement
		DataExchangeAgreement *string `json:"dataExchangeAgreement"`

		// DataFormat Format of the data (e.g., XML, JSON, CSV)
		DataFormat *string `json:"dataFormat"`

		// DataFormatOther Other data format if not listed
		DataFormatOther *string `json:"dataFormatOther"`

		// ExchangeCUIDescription Description of CUI data
		ExchangeCUIDescription *string `json:"exchangeCUIDescription"`

		// ExchangeCUIType Type of CUI data
		ExchangeCUIType *[]string `json:"exchangeCUIType"`

		// ExchangeConnectionAuthenticated Indicates if exchange connection is authenticated
		ExchangeConnectionAuthenticated *bool `json:"exchangeConnectionAuthenticated"`

		// ExchangeContainsCUI Indicates if exchange contains CUI
		ExchangeContainsCUI *bool `json:"exchangeContainsCUI"`

		// ExchangeDescription Description of the data exchange
		ExchangeDescription *string `json:"exchangeDescription"`

		// ExchangeEndDate End date of the data exchange (MM/dd/yyyy)
		ExchangeEndDate *time.Time `json:"exchangeEndDate"`

		// ExchangeId The unique identifier for the data exchange record (GUID)
		ExchangeId string `json:"exchangeId"`

		// ExchangeName Name of the data exchange
		ExchangeName *string `json:"exchangeName"`

		// ExchangeNetworkProtocol Network protocols used for exchange (e.g., SFTP, HTTPS)
		ExchangeNetworkProtocol *[]string `json:"exchangeNetworkProtocol"`

		// ExchangeNetworkProtocolOther Other network protocol if not listed
		ExchangeNetworkProtocolOther *string `json:"exchangeNetworkProtocolOther"`

		// ExchangeRetiredDate Date the data exchange was retired (MM/dd/yyyy)
		ExchangeRetiredDate *time.Time `json:"exchangeRetiredDate"`

		// ExchangeStartDate Start date of the data exchange (MM/dd/yyyy)
		ExchangeStartDate *time.Time `json:"exchangeStartDate"`

		// ExchangeState State of the data exchange (e.g., Active, Retired)
		ExchangeState *string `json:"exchangeState"`

		// ExchangeVersion Version of the data exchange
		ExchangeVersion *string `json:"exchangeVersion"`

		// FromOwnerId ID of the source system owner
		FromOwnerId *string `json:"fromOwnerId"`

		// FromOwnerName Name of the source system owner
		FromOwnerName *string `json:"fromOwnerName"`

		// FromOwnerType Type of the source system owner (e.g., System, Organization)
		FromOwnerType *string `json:"fromOwnerType"`

		// IsAddressEditable Indicates if address data is editable
		IsAddressEditable *bool `json:"isAddressEditable"`

		// IsBeneficiaryMailingFile Indicates if it is a beneficiary mailing file
		IsBeneficiaryMailingFile *bool `json:"isBeneficiaryMailingFile"`

		// NumOfRecords Number of records exchanged
		NumOfRecords *string `json:"numOfRecords"`

		// SharedViaApi Indicates if data is shared via API
		SharedViaApi *bool `json:"sharedViaApi"`

		// ToOwnerId ID of the target system owner
		ToOwnerId *string `json:"toOwnerId"`

		// ToOwnerName Name of the target system owner
		ToOwnerName *string `json:"toOwnerName"`

		// ToOwnerType Type of the target system owner (e.g., System, Organization)
		ToOwnerType *string `json:"toOwnerType"`

		// TypeOfData Types of data exchanged
		TypeOfData *[]struct {
			Id   *string `json:"id"`
			Name *string `json:"name"`
		} `json:"typeOfData"`
	} `json:"Exchanges,omitempty"`
}

// GetGatewayCEDAR20Core20API200OrganizationParams defines parameters for GetGatewayCEDAR20Core20API200Organization.
type GetGatewayCEDAR20Core20API200OrganizationParams struct {
	// Id The GUID of a specific organization to find. If provided, returns the organization and its children.
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Name The exact name of a specific organization to find. If provided, returns the organization and its children.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Acronym The acronym of a specific organization to find. If provided, returns the organization and its children.
	Acronym *string `form:"acronym,omitempty" json:"acronym,omitempty"`
}

// GetGatewayCEDAR20Core20API200RoleParams defines parameters for GetGatewayCEDAR20Core20API200Role.
type GetGatewayCEDAR20Core20API200RoleParams struct {
	// Application Application where the object or role exists.
	Application GetGatewayCEDAR20Core20API200RoleParamsApplication `form:"application" json:"application"`

	// RoleId ID of a specific role assignment
	RoleId *string `form:"roleId,omitempty" json:"roleId,omitempty"`

	// ObjectId ID of the object that roles are assigned to
	ObjectId *string `form:"objectId,omitempty" json:"objectId,omitempty"`

	// RoleTypeId ID of a specific role type to be returned. Used with objectId to limit results
	RoleTypeId *string `form:"roleTypeId,omitempty" json:"roleTypeId,omitempty"`
}

// GetGatewayCEDAR20Core20API200RoleParamsApplication defines parameters for GetGatewayCEDAR20Core20API200Role.
type GetGatewayCEDAR20Core20API200RoleParamsApplication string

// PostGatewayCEDAR20Core20API200RoleJSONBody defines parameters for PostGatewayCEDAR20Core20API200Role.
type PostGatewayCEDAR20Core20API200RoleJSONBody struct {
	// Roles Array of role objects to be added
	Roles []Role `json:"Roles"`

	// Application Application where the role assignments will be added
	Application PostGatewayCEDAR20Core20API200RoleJSONBodyApplication `json:"application"`
}

// PostGatewayCEDAR20Core20API200RoleJSONBodyApplication defines parameters for PostGatewayCEDAR20Core20API200Role.
type PostGatewayCEDAR20Core20API200RoleJSONBodyApplication string

// DeleteGatewayCEDAR20Core20API200RoleListParams defines parameters for DeleteGatewayCEDAR20Core20API200RoleList.
type DeleteGatewayCEDAR20Core20API200RoleListParams struct {
	// Application The application where the role assignment should be deleted.
	Application DeleteGatewayCEDAR20Core20API200RoleListParamsApplication `form:"application" json:"application"`

	// Id An array of one or more role assignment IDs to delete. Can be provided as repeated parameters (id={guid1}&id={guid2}) or with bracket notation (id[]={guid1}&id[]={guid2}).
	Id []string `form:"id" json:"id"`
}

// DeleteGatewayCEDAR20Core20API200RoleListParamsApplication defines parameters for DeleteGatewayCEDAR20Core20API200RoleList.
type DeleteGatewayCEDAR20Core20API200RoleListParamsApplication string

// GetGatewayCEDAR20Core20API200RoleTypeApplicationParamsApplication defines parameters for GetGatewayCEDAR20Core20API200RoleTypeApplication.
type GetGatewayCEDAR20Core20API200RoleTypeApplicationParamsApplication string

// GetGatewayCEDAR20Core20API200SoftwareProductsParams defines parameters for GetGatewayCEDAR20Core20API200SoftwareProducts.
type GetGatewayCEDAR20Core20API200SoftwareProductsParams struct {
	// Id Application ID
	Id string `form:"id" json:"id"`
}

// PostGatewayCEDAR20Core20API200SoftwareProductsJSONBody defines parameters for PostGatewayCEDAR20Core20API200SoftwareProducts.
type PostGatewayCEDAR20Core20API200SoftwareProductsJSONBody struct {
	// SoftwareProducts List of software product operations (add, update, delete). Each item represents a batch of products to process.
	SoftwareProducts *[]struct {
		// Products List of individual software products for this operation batch.
		Products *[]struct {
			// ApiGatewayUse Indicates if this software product is used as an API gateway.
			ApiGatewayUse *bool `json:"api_gateway_use"`

			// ElaOrganization Organization managing the ELA.
			ElaOrganization *string `json:"ela_organization"`

			// ElaPurchase Details about Enterprise License Agreement purchase.
			ElaPurchase *string `json:"ela_purchase"`

			// ProvidesAiCapability Indicates if this software product provides AI/ML capabilities.
			ProvidesAiCapability *bool `json:"provides_ai_capability"`

			// SoftwareCatagoryConnectionGuid Connection GUID for software category.
			SoftwareCatagoryConnectionGuid *string `json:"softwareCatagoryConnectionGuid"`

			// SoftwareProductId Unique identifier for an existing software product. Required for update and delete operations.
			SoftwareProductId *string `json:"softwareProductId"`

			// SoftwareVendorConnectionGuid Connection GUID for software vendor.
			SoftwareVendorConnectionGuid *string `json:"softwareVendorConnectionGuid"`

			// SoftwareCost The cost associated with the software product.
			SoftwareCost *string `json:"software_cost"`

			// SystemSoftwareConnectionGuid Connection GUID between the system and this software.
			SystemSoftwareConnectionGuid *string `json:"systemSoftwareConnectionGuid"`

			// TechnopediaId The Technopedia ID of the software product. Required for all product operations.
			TechnopediaId string `json:"technopedia_id"`
		} `json:"Products"`

		// Deleted Set to true if all products in this batch are to be deleted. Conflicts with `updated`.
		Deleted *bool `json:"deleted"`

		// Updated Set to true if all products in this batch are to be updated. Conflicts with `deleted`.
		Updated *bool `json:"updated"`
	} `json:"SoftwareProducts"`

	// AiSolnCatg Categories of AI solutions used. Stored as a comma-separated string.
	AiSolnCatg *[]string `json:"aiSolnCatg"`

	// AiSolnCatgOther Other AI solution categories not listed.
	AiSolnCatgOther *string `json:"aiSolnCatgOther"`

	// AiLifeCycleStage Current stage in the AI life cycle (e.g., Development, Production).
	AiLifeCycleStage *string `json:"ai_life_cycle_stage"`

	// ApiDataArea List of data areas covered by the APIs. Stored as a comma-separated string.
	ApiDataArea *[]string `json:"apiDataArea"`

	// ApiDescPubLocation Location where API descriptions are published.
	ApiDescPubLocation *string `json:"apiDescPubLocation"`

	// ApiDescPublished Indicates if API descriptions are published.
	ApiDescPublished *string `json:"apiDescPublished"`

	// ApiFHIRUse Indicates if FHIR standards are used for APIs.
	ApiFHIRUse *string `json:"apiFHIRUse"`

	// ApiFHIRUseOther Other details about FHIR usage if applicable.
	ApiFHIRUseOther *string `json:"apiFHIRUseOther"`

	// ApiHasPortal Boolean indicating if the API has a developer portal.
	ApiHasPortal *bool `json:"apiHasPortal"`

	// ApisAccessibility Accessibility level of the APIs (e.g., Internal, External).
	ApisAccessibility *string `json:"apisAccessibility"`

	// ApisDeveloped Indicates if APIs are developed for the system.
	ApisDeveloped *string `json:"apisDeveloped"`

	// ApplicationId The unique identifier of the system to which the software products and API/AI details belong.
	ApplicationId string `json:"applicationId"`

	// SystemHasApiGateway Boolean indicating if the system uses an API gateway.
	SystemHasApiGateway *bool `json:"systemHasApiGateway"`

	// UsesAiTech Indicates if the system uses AI/ML technologies.
	UsesAiTech *string `json:"usesAiTech"`
}

// GetGatewayCEDAR20Core20API200StakeholderParams defines parameters for GetGatewayCEDAR20Core20API200Stakeholder.
type GetGatewayCEDAR20Core20API200StakeholderParams struct {
	// Id Stakeholder ID.
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Name Stakeholder name.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Version Stakeholder version.
	Version *string `form:"version,omitempty" json:"version,omitempty"`

	// State Stakeholder state.
	State *string `form:"state,omitempty" json:"state,omitempty"`

	// Status Stakeholder status.
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// IdsOnly Return only stakeholder IDs and names (boolean: "true", "false", "yes", "no", "1", "0").
	IdsOnly *string `form:"idsOnly,omitempty" json:"idsOnly,omitempty"`
}

// DeleteGatewayCEDAR20Core20API200SupportContactParams defines parameters for DeleteGatewayCEDAR20Core20API200SupportContact.
type DeleteGatewayCEDAR20Core20API200SupportContactParams struct {
	// Id An array of one or more support contact IDs (GUIDs) to delete. Can be provided as repeated parameters (id=guid1&id=guid2) or with bracket notation (id[]=guid1&id[]=guid2).
	Id []openapi_types.UUID `form:"id" json:"id"`
}

// GetGatewayCEDAR20Core20API200SupportContactParams defines parameters for GetGatewayCEDAR20Core20API200SupportContact.
type GetGatewayCEDAR20Core20API200SupportContactParams struct {
	// Application The GUID of the system for which to retrieve support contacts.
	Application string `form:"application" json:"application"`
}

// PostGatewayCEDAR20Core20API200SupportContactJSONBody defines parameters for PostGatewayCEDAR20Core20API200SupportContact.
type PostGatewayCEDAR20Core20API200SupportContactJSONBody struct {
	// SupportContacts List of support contacts to add or update.
	SupportContacts *[]struct {
		// Application The GUID of the system/application this contact is associated with.
		Application string `json:"application"`

		// Email The email address of the support contact.
		Email *string `json:"email"`

		// Id The ID of the support contact (GUID). Required for updates, omit for new contacts.
		Id *string `json:"id"`

		// Name The full name of the support contact. Either `name` or `title` must be provided.
		Name *string `json:"name"`

		// Phone The phone number of the support contact.
		Phone *string `json:"phone"`

		// Title The job title of the support contact. Either `name` or `title` must be provided.
		Title *string `json:"title"`

		// Url A URL related to the support contact (e.g., department page).
		Url *string `json:"url"`
	} `json:"SupportContacts,omitempty"`
}

// GetGatewayCEDAR20Core20API200SystemSummaryParams defines parameters for GetGatewayCEDAR20Core20API200SystemSummary.
type GetGatewayCEDAR20Core20API200SystemSummaryParams struct {
	// State Filter by state
	State *string `form:"state,omitempty" json:"state,omitempty"`

	// Status Filter by status
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// Version API version
	Version *string `form:"version,omitempty" json:"version,omitempty"`

	// IncludeInSurvey Include in survey flag (true/false)
	IncludeInSurvey *string `form:"includeInSurvey,omitempty" json:"includeInSurvey,omitempty"`

	// IdsOnly Return only ID + name pairs (true/false)
	IdsOnly *string `form:"idsOnly,omitempty" json:"idsOnly,omitempty"`

	// BelongsTo Belongs to filter
	BelongsTo *string `form:"belongsTo,omitempty" json:"belongsTo,omitempty"`

	// UserName User name filter (triggers role-based filtering)
	UserName *string `form:"userName,omitempty" json:"userName,omitempty"`

	// RoleType Role type filter (used with userName)
	RoleType *string `form:"roleType,omitempty" json:"roleType,omitempty"`
}

// GetGatewayCEDAR20Core20API200ThreatParams defines parameters for GetGatewayCEDAR20Core20API200Threat.
type GetGatewayCEDAR20Core20API200ThreatParams struct {
	// Ids A comma delimited list of object IDs, for example, an ATO ID.
	Ids string `form:"ids" json:"ids"`
}

// GetGatewayCEDAR20Core20API200UserParams defines parameters for GetGatewayCEDAR20Core20API200User.
type GetGatewayCEDAR20Core20API200UserParams struct {
	// Application The application the user belongs to (e.g., "alfabet", "all").
	Application GetGatewayCEDAR20Core20API200UserParamsApplication `form:"application" json:"application"`

	// Id A user's GUID (e.g., "{11111111-2222-3333-4444-555555555555}"). If provided, other parameters are ignored.
	Id *openapi_types.UUID `form:"id,omitempty" json:"id,omitempty"`

	// UserName A user's username. Requires at least 2 alpha characters; wildcards (*) are supported.
	UserName *string `form:"userName,omitempty" json:"userName,omitempty"`

	// FirstName A user's first name. Requires at least 2 alpha characters; wildcards (*) are supported.
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty"`

	// LastName A user's last name. Requires at least 2 alpha characters; wildcards (*) are supported.
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty"`

	// Phone A user's phone number.
	Phone *string `form:"phone,omitempty" json:"phone,omitempty"`

	// Email A user's email address.
	Email *openapi_types.Email `form:"email,omitempty" json:"email,omitempty"`
}

// GetGatewayCEDAR20Core20API200UserParamsApplication defines parameters for GetGatewayCEDAR20Core20API200User.
type GetGatewayCEDAR20Core20API200UserParamsApplication string

// PostGatewayCEDAR20Core20API200UserJSONBody defines parameters for PostGatewayCEDAR20Core20API200User.
type PostGatewayCEDAR20Core20API200UserJSONBody struct {
	// Users List of users to add to the application.
	Users []struct {
		// Email Optional. Email address of the user.
		Email *openapi_types.Email `json:"email"`

		// FirstName Optional. First name of the user, used for Sparx creation if needed.
		FirstName *string `json:"firstName"`

		// Id Optional. Existing Sparx GUID for the user. If provided, lookup/creation in SparxEA is skipped.
		Id *openapi_types.UUID `json:"id"`

		// IsDeleted Optional. Flag indicating if the user is deleted (not explicitly used by this endpoint for logic).
		IsDeleted *bool `json:"isDeleted"`

		// LastName Optional. Last name of the user, used for Sparx creation if needed.
		LastName *string `json:"lastName"`

		// Phone Optional. Phone number of the user.
		Phone *string `json:"phone"`

		// UserName The unique identifier for the user (e.g., LDAP uid).
		UserName string `json:"userName"`
	} `json:"Users"`

	// Application The target application for user addition. Currently supported: "alfabet", "all" (no-op).
	Application PostGatewayCEDAR20Core20API200UserJSONBodyApplication `json:"application"`
}

// PostGatewayCEDAR20Core20API200UserJSONBodyApplication defines parameters for PostGatewayCEDAR20Core20API200User.
type PostGatewayCEDAR20Core20API200UserJSONBodyApplication string

// PostGatewayCEDAR20Core20APIExchangeJSONBody defines parameters for PostGatewayCEDAR20Core20APIExchange.
type PostGatewayCEDAR20Core20APIExchangeJSONBody struct {
	// Exchanges List of data exchange objects to add.
	Exchanges []struct {
		// ApiOwnership Ownership of the API (e.g., "Internal", "External").
		ApiOwnership *string `json:"apiOwnership"`

		// BusinessPurposeOfAddress Business purpose(s) for address data.
		BusinessPurposeOfAddress *[]string `json:"businessPurposeOfAddress"`

		// ConnectionFrequency Frequency of data connection (e.g., "Daily", "Weekly").
		ConnectionFrequency *[]string `json:"connectionFrequency"`

		// ContainsBankingData Indicates if the exchange contains banking data.
		ContainsBankingData *bool `json:"containsBankingData"`

		// ContainsBeneficiaryAddress Indicates if the exchange contains beneficiary address data.
		ContainsBeneficiaryAddress *bool `json:"containsBeneficiaryAddress"`

		// ContainsPhi Indicates if the exchange contains PHI (Protected Health Information).
		ContainsPhi *bool `json:"containsPhi"`

		// ContainsPii Indicates if the exchange contains PII (Personally Identifiable Information).
		ContainsPii *bool `json:"containsPii"`

		// DataExchangeAgreement Data exchange agreement details.
		DataExchangeAgreement *string `json:"dataExchangeAgreement"`

		// DataFormat Format of the data exchanged (e.g., "JSON", "XML", "CSV").
		DataFormat *string `json:"dataFormat"`

		// DataFormatOther Other data format if not listed.
		DataFormatOther *string `json:"dataFormatOther"`

		// ExchangeCUIDescription Description of the CUI.
		ExchangeCUIDescription *string `json:"exchangeCUIDescription"`

		// ExchangeCUIType Type(s) of CUI involved.
		ExchangeCUIType *[]string `json:"exchangeCUIType"`

		// ExchangeConnectionAuthenticated Indicates if the exchange connection is authenticated.
		ExchangeConnectionAuthenticated *bool `json:"exchangeConnectionAuthenticated"`

		// ExchangeContainsCUI Indicates if the exchange contains CUI (Controlled Unclassified Information).
		ExchangeContainsCUI *bool `json:"exchangeContainsCUI"`

		// ExchangeDescription Description of the data exchange.
		ExchangeDescription *string `json:"exchangeDescription"`

		// ExchangeEndDate End date of the data exchange.
		ExchangeEndDate *time.Time `json:"exchangeEndDate"`

		// ExchangeId Unique identifier for the data exchange (should not be provided for add operations).
		ExchangeId *string `json:"exchangeId"`

		// ExchangeName Name of the data exchange.
		ExchangeName string `json:"exchangeName"`

		// ExchangeNetworkProtocol Network protocol(s) used for exchange (e.g., "HTTPS", "SFTP").
		ExchangeNetworkProtocol *[]string `json:"exchangeNetworkProtocol"`

		// ExchangeNetworkProtocolOther Other network protocol if not listed.
		ExchangeNetworkProtocolOther *string `json:"exchangeNetworkProtocolOther"`

		// ExchangeRetiredDate Date the data exchange was retired (MM/dd/yyyy format).
		ExchangeRetiredDate *openapi_types.Date `json:"exchangeRetiredDate"`

		// ExchangeStartDate Start date of the data exchange.
		ExchangeStartDate *time.Time `json:"exchangeStartDate"`

		// ExchangeState Current state of the data exchange (e.g., "Active", "Retired").
		ExchangeState *string `json:"exchangeState"`

		// ExchangeVersion Version of the data exchange.
		ExchangeVersion *string `json:"exchangeVersion"`

		// FromOwnerId ID of the source system or owner.
		FromOwnerId string `json:"fromOwnerId"`

		// FromOwnerName Name of the source system or owner.
		FromOwnerName *string `json:"fromOwnerName"`

		// FromOwnerType Type of the source owner (e.g., "System").
		FromOwnerType *string `json:"fromOwnerType"`

		// IsAddressEditable Indicates if address data is editable.
		IsAddressEditable *bool `json:"isAddressEditable"`

		// IsBeneficiaryMailingFile Indicates if it is a beneficiary mailing file.
		IsBeneficiaryMailingFile *bool `json:"isBeneficiaryMailingFile"`

		// NumOfRecords Number of records exchanged (e.g., "1000", "50000+").
		NumOfRecords *string `json:"numOfRecords"`

		// SharedViaApi Indicates if data is shared via API.
		SharedViaApi *bool `json:"sharedViaApi"`

		// ToOwnerId ID of the target system or owner.
		ToOwnerId string `json:"toOwnerId"`

		// ToOwnerName Name of the target system or owner.
		ToOwnerName *string `json:"toOwnerName"`

		// ToOwnerType Type of the target owner (e.g., "System").
		ToOwnerType *string `json:"toOwnerType"`

		// TypeOfData List of data types exchanged.
		TypeOfData *[]struct {
			// Id ID of the type of data.
			Id *string `json:"id,omitempty"`

			// Name Name of the type of data.
			Name *string `json:"name,omitempty"`
		} `json:"typeOfData"`
	} `json:"Exchanges"`
}

// GetGatewayCEDARIntake10ClientIdParams defines parameters for GetGatewayCEDARIntake10ClientId.
type GetGatewayCEDARIntake10ClientIdParams struct {
	// ClientStatus The client status to filter by
	ClientStatus string `form:"clientStatus" json:"clientStatus"`

	// Version The client version to filter by
	Version string `form:"version" json:"version"`

	// CLIENTNAME The name of the client making the request
	CLIENTNAME string `json:"CLIENT_NAME"`
}

// PostGatewayCEDARIntake10IntakeJSONBody defines parameters for PostGatewayCEDARIntake10Intake.
type PostGatewayCEDARIntake10IntakeJSONBody struct {
	// Body The encoded, string representation of the object being transmitted
	Body       string                                           `json:"body"`
	BodyFormat PostGatewayCEDARIntake10IntakeJSONBodyBodyFormat `json:"bodyFormat"`

	// ClientCreatedDate Creation date associated with the object being transmitted
	ClientCreatedDate time.Time `json:"clientCreatedDate"`

	// ClientId Unique ID associated with the object in body
	ClientId string `json:"clientId"`

	// ClientLastUpdatedDate Last update date associated with the object being transmitted
	ClientLastUpdatedDate *time.Time `json:"clientLastUpdatedDate,omitempty"`

	// ClientStatus Client's status associated with the object being transmitted, i.e. Initiated, Final, etc.
	ClientStatus string `json:"clientStatus"`

	// Schema The name and version of the schema associated with the object being transmitted, i.e. SystemIntake_v01
	Schema string `json:"schema"`

	// Type The type of object being transmitted, i.e. SystemIntake, BusinessCase, etc
	Type string `json:"type"`

	// Version The version associated with the object in the body. This value can be incremented in the event a transaction needs to be resubmitted.
	Version string `json:"version"`
}

// PostGatewayCEDARIntake10IntakeParams defines parameters for PostGatewayCEDARIntake10Intake.
type PostGatewayCEDARIntake10IntakeParams struct {
	// ValidatePayload Determines if schema validation of the payload is performed synchronously before persisting the record or asynchronously after the record has been persisted
	ValidatePayload *PostGatewayCEDARIntake10IntakeParamsValidatePayload `form:"validatePayload,omitempty" json:"validatePayload,omitempty"`

	// CLIENTNAME The client name to associate to the request
	CLIENTNAME string `json:"CLIENT_NAME"`
}

// PostGatewayCEDARIntake10IntakeParamsValidatePayload defines parameters for PostGatewayCEDARIntake10Intake.
type PostGatewayCEDARIntake10IntakeParamsValidatePayload string

// PostGatewayCEDARIntake10IntakeJSONBodyBodyFormat defines parameters for PostGatewayCEDARIntake10Intake.
type PostGatewayCEDARIntake10IntakeJSONBodyBodyFormat string

// GetGatewayCEDARIntake10IntakeCedarIdParams defines parameters for GetGatewayCEDARIntake10IntakeCedarId.
type GetGatewayCEDARIntake10IntakeCedarIdParams struct {
	// CLIENTNAME The name of the client making the request
	CLIENTNAME string `json:"CLIENT_NAME"`
}

// GetGatewayCEDARIntake10IntakeStatusParams defines parameters for GetGatewayCEDARIntake10IntakeStatus.
type GetGatewayCEDARIntake10IntakeStatusParams struct {
	// CedarStatus CEDAR status describing the outcome of validation, and mapping of the payload
	CedarStatus GetGatewayCEDARIntake10IntakeStatusParamsCedarStatus `form:"cedarStatus" json:"cedarStatus"`

	// ClientCreatedStartDate The starting point searching for records using the clientCreatedDate value.
	ClientCreatedStartDate *string `form:"clientCreatedStartDate,omitempty" json:"clientCreatedStartDate,omitempty"`

	// PageSize Number of results to return per page. If used, pageNumber must also be provided.
	PageSize *string `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// PageNumber Page number to return. If used, pageSize must also be provided.
	PageNumber *string `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`
}

// GetGatewayCEDARIntake10IntakeStatusParamsCedarStatus defines parameters for GetGatewayCEDARIntake10IntakeStatus.
type GetGatewayCEDARIntake10IntakeStatusParamsCedarStatus string

// GetGatewayCEDARIntake10StatusCedarIdParams defines parameters for GetGatewayCEDARIntake10StatusCedarId.
type GetGatewayCEDARIntake10StatusCedarIdParams struct {
	// CLIENTNAME The name of the client making the request
	CLIENTNAME string `json:"CLIENT_NAME"`
}

// GetGatewayCEDARIntake10StatusClientIdParams defines parameters for GetGatewayCEDARIntake10StatusClientId.
type GetGatewayCEDARIntake10StatusClientIdParams struct {
	// ClientStatus The client status to filter by
	ClientStatus string `form:"clientStatus" json:"clientStatus"`

	// Version The client version to filter by
	Version string `form:"version" json:"version"`

	// CLIENTNAME The name of the client making the request
	CLIENTNAME string `json:"CLIENT_NAME"`
}

// PostGatewayLDAP10AuthenticateJSONBody defines parameters for PostGatewayLDAP10Authenticate.
type PostGatewayLDAP10AuthenticateJSONBody struct {
	// Credentials Username (4 alphanumeric characters)
	Credentials *string `json:"credentials,omitempty"`

	// Password Password (8 characters)
	Password string `json:"password"`

	// Principal Username (4 alphanumeric characters)
	Principal *string `json:"principal,omitempty"`

	// Username Username (4 alphanumeric characters)
	Username string `json:"username"`
}

// GetGatewayLDAP10PersonParams defines parameters for GetGatewayLDAP10Person.
type GetGatewayLDAP10PersonParams struct {
	// FirstName First name of the person to search for
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty"`

	// LastName Last name of the person to search for
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty"`

	// CommonName Common name of the person to search for
	CommonName *string `form:"commonName,omitempty" json:"commonName,omitempty"`

	// Email Email address of the person to search for
	Email *openapi_types.Email `form:"email,omitempty" json:"email,omitempty"`

	// Telephone Telephone number of the person to search for
	Telephone *string `form:"telephone,omitempty" json:"telephone,omitempty"`
}

// GetGatewaySystem20Census20Core20API200AdminReviewerParams defines parameters for GetGatewaySystem20Census20Core20API200AdminReviewer.
type GetGatewaySystem20Census20Core20API200AdminReviewerParams struct {
	// Type The type of reviewers to be returned. Either 'QA', 'DA', or null/empty. Null/empty will return all reviewers.
	Type *GetGatewaySystem20Census20Core20API200AdminReviewerParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// GetGatewaySystem20Census20Core20API200AdminReviewerParamsType defines parameters for GetGatewaySystem20Census20Core20API200AdminReviewer.
type GetGatewaySystem20Census20Core20API200AdminReviewerParamsType string

// DeleteGatewaySystem20Census20Core20API200AdminReviewerJSONBody defines parameters for DeleteGatewaySystem20Census20Core20API200AdminReviewer.
type DeleteGatewaySystem20Census20Core20API200AdminReviewerJSONBody struct {
	// Reviewers List of reviewer objects to delete. Each object must contain at least `id` or `userName`.
	Reviewers []struct {
		// Id The unique ID of the reviewer to delete.
		Id *string `json:"id"`

		// Type The type of the reviewer (e.g., "QA", "DA"). Used in conjunction with ID or Username for a more specific deletion target.
		Type *string `json:"type"`

		// UserName The username of the reviewer to delete.
		UserName *string `json:"userName"`
	} `json:"Reviewers"`
}

// PostGatewaySystem20Census20Core20API200AdminReviewerJSONBody defines parameters for PostGatewaySystem20Census20Core20API200AdminReviewer.
type PostGatewaySystem20Census20Core20API200AdminReviewerJSONBody struct {
	// Reviewers List of reviewers to add.
	Reviewers *[]struct {
		// FullName The full name of the reviewer.
		FullName string `json:"fullName"`

		// Id Reviewer ID (should not be provided for add operations as it is auto-generated).
		Id *string `json:"id"`

		// Type The type of the reviewer (e.g., QA, DA).
		Type string `json:"type"`

		// UserName The username of the reviewer.
		UserName string `json:"userName"`
	} `json:"Reviewers,omitempty"`
}

// GetGatewaySystem20Census20Core20API200BudgetAndContractsParams defines parameters for GetGatewaySystem20Census20Core20API200BudgetAndContracts.
type GetGatewaySystem20Census20Core20API200BudgetAndContractsParams struct {
	// SystemId The unique identifier for the system.
	SystemId openapi_types.UUID `form:"systemId" json:"systemId"`
}

// PostGatewaySystem20Census20Core20API200BudgetAndContractsJSONBody defines parameters for PostGatewaySystem20Census20Core20API200BudgetAndContracts.
type PostGatewaySystem20Census20Core20API200BudgetAndContractsJSONBody struct {
	// Budgets List of budget items to add, update, or delete.
	Budgets *[]struct {
		// Deleted Flag indicating whether this budget was deleted by the user.
		Deleted *bool `json:"deleted"`

		// Funding Description of the allocation of this budget to the system in question.
		Funding *string `json:"funding"`

		// FundingId Cross-reference ID for relationship between budget project and application in system of record (Sparx ProjectArch GUID). Required if 'updated' is true.
		FundingId *string `json:"fundingId"`

		// Id OFM budget internal ID in system of record. Optional for new budgets, required if 'updated' or 'deleted' is true.
		Id *string `json:"id"`

		// ProjectId OFM budget project ID in system of record.
		ProjectId string `json:"projectId"`

		// ProjectTitle Project Title in system of record.
		ProjectTitle *string `json:"projectTitle"`

		// Updated Flag indicating whether this budget was added or updated by the user.
		Updated *bool `json:"updated"`
	} `json:"Budgets"`

	// Contracts List of contract items to add, update, or delete.
	Contracts *[]struct {
		// POPEndDate Period of Performance End Date (YYYY-MM-DD).
		POPEndDate *openapi_types.Date `json:"POPEndDate"`

		// POPStartDate Period of Performance Start Date (YYYY-MM-DD).
		POPStartDate *openapi_types.Date `json:"POPStartDate"`

		// AwardId Contract number.
		AwardId string `json:"awardId"`

		// ContractADO Is ADO Parent Contract, Yes/No.
		ContractADO *string `json:"contractADO"`

		// ContractDeliverableId Internal ID for the contract deliverable (Sparx ContractDeliverable GUID). Required if 'updated' is true.
		ContractDeliverableId *string `json:"contractDeliverableId"`

		// ContractName Name of the contract.
		ContractName *string `json:"contractName"`

		// Deleted Flag indicating whether this contract was deleted by the user.
		Deleted *bool `json:"deleted"`

		// Description Contract description.
		Description *string `json:"description"`

		// Id Internal ID for the contract in system of record (Sparx Contract GUID).
		Id string `json:"id"`

		// ParentAwardId Parent contract number.
		ParentAwardId string `json:"parentAwardId"`

		// SystemId System ID related to this contract.
		SystemId *string `json:"systemId"`

		// Updated Flag indicating whether this contract was added or updated by the user.
		Updated *bool `json:"updated"`
	} `json:"Contracts"`

	// PageName The name of the page this data belongs to (e.g., "BudgetAndContracts").
	PageName string `json:"pageName"`

	// SystemId The ID of the system the budgets and contracts are for.
	SystemId string `json:"systemId"`
}

// PostGatewaySystem20Census20Core20API200BusinessOwnerJSONBody defines parameters for PostGatewaySystem20Census20Core20API200BusinessOwner.
type PostGatewaySystem20Census20Core20API200BusinessOwnerJSONBody struct {
	// N508UserInterface 508 compliance status of the user interface (optional).
	N508UserInterface *string `json:"508UserInterface"`

	// SystemOwnership System ownership status (optional).
	SystemOwnership *string `json:"SystemOwnership"`

	// BeneficiaryInformation List of beneficiary information types (optional).
	BeneficiaryInformation *[]string `json:"beneficiaryInformation"`

	// CostPerYear Annual cost of the system (optional).
	CostPerYear *string `json:"costPerYear"`

	// Description Description of the system (optional).
	Description *string `json:"description"`

	// EditBeneficiaryInformation Indicates if beneficiary information can be edited (optional).
	EditBeneficiaryInformation *bool `json:"editBeneficiaryInformation"`

	// Id The GUID of the system for which to add/update business owner information.
	Id string `json:"id"`

	// NumberOfContractorFte Number of contractor FTEs (optional).
	NumberOfContractorFte *string `json:"numberOfContractorFte"`

	// NumberOfContractorFteId ID for number of contractor FTEs (optional).
	NumberOfContractorFteId *string `json:"numberOfContractorFteId"`

	// NumberOfFederalFte Number of federal FTEs (optional).
	NumberOfFederalFte *string `json:"numberOfFederalFte"`

	// NumberOfFederalFteId ID for number of federal FTEs (optional).
	NumberOfFederalFteId *string `json:"numberOfFederalFteId"`

	// NumberOfSupportedUsersPerMonth Number of supported users per month (optional).
	NumberOfSupportedUsersPerMonth *string `json:"numberOfSupportedUsersPerMonth"`

	// NumberOfSupportedUsersPerMonthId ID for number of supported users per month (optional).
	NumberOfSupportedUsersPerMonthId *string `json:"numberOfSupportedUsersPerMonthId"`

	// PageName The name of the page, e.g., "BusinessOwnerBasicInformation" (optional).
	PageName *string `json:"pageName"`

	// StoresBankingData Indicates if the system stores banking data (optional).
	StoresBankingData *bool `json:"storesBankingData"`

	// StoresBeneficiaryAddress Indicates if the system stores beneficiary addresses (optional).
	StoresBeneficiaryAddress *bool `json:"storesBeneficiaryAddress"`

	// StoresHealthDisparityData Indicates if the system stores health disparity data (optional).
	StoresHealthDisparityData *bool `json:"storesHealthDisparityData"`

	// SystemUIAccessibility List of system UI accessibility features (optional).
	SystemUIAccessibility *[]string `json:"systemUIAccessibility"`

	// Version Version of the system (optional).
	Version *string `json:"version"`
}

// DeleteGatewaySystem20Census20Core20API200DataExchangeNotesParams defines parameters for DeleteGatewaySystem20Census20Core20API200DataExchangeNotes.
type DeleteGatewaySystem20Census20Core20API200DataExchangeNotesParams struct {
	// Id An array of one or more data exchange IDs whose associated notes should be deleted. Can be provided as repeated parameters (id=123&id=456) or with bracket notation (id[]=123&id[]=456).
	Id []string `form:"id" json:"id"`
}

// DeleteGatewaySystem20Census20Core20API200DataExchangeStatusJSONBody defines parameters for DeleteGatewaySystem20Census20Core20API200DataExchangeStatus.
type DeleteGatewaySystem20Census20Core20API200DataExchangeStatusJSONBody struct {
	// ExchangeIds An array of exchange IDs to delete
	ExchangeIds []openapi_types.UUID `json:"exchangeIds"`
}

// GetGatewaySystem20Census20Core20API200DataExchangeStatusParams defines parameters for GetGatewaySystem20Census20Core20API200DataExchangeStatus.
type GetGatewaySystem20Census20Core20API200DataExchangeStatusParams struct {
	// SystemId ID of the system to retrieve data exchange status information about.
	SystemId openapi_types.UUID `form:"systemId" json:"systemId"`

	// Direction Direction of the data exchange.
	Direction *GetGatewaySystem20Census20Core20API200DataExchangeStatusParamsDirection `form:"direction,omitempty" json:"direction,omitempty"`
}

// GetGatewaySystem20Census20Core20API200DataExchangeStatusParamsDirection defines parameters for GetGatewaySystem20Census20Core20API200DataExchangeStatus.
type GetGatewaySystem20Census20Core20API200DataExchangeStatusParamsDirection string

// GetGatewaySystem20Census20Core20API200DataExchangeNotesParams defines parameters for GetGatewaySystem20Census20Core20API200DataExchangeNotes.
type GetGatewaySystem20Census20Core20API200DataExchangeNotesParams struct {
	// ExchangeId The ID of the data exchange whose notes to retrieve.
	ExchangeId string `form:"exchangeId" json:"exchangeId"`
}

// PostGatewaySystem20Census20Core20API200DataExchangeNotesJSONBody defines parameters for PostGatewaySystem20Census20Core20API200DataExchangeNotes.
type PostGatewaySystem20Census20Core20API200DataExchangeNotesJSONBody struct {
	// EmailFlags Flags for email notifications
	EmailFlags *struct {
		// IncludeHistory Whether to include note history in the email (defaults to false if not provided for this specific service).
		IncludeHistory *bool `json:"includeHistory,omitempty"`

		// NotifyRespondent Whether to notify respondents (defaults to false if not provided).
		NotifyRespondent *bool `json:"notifyRespondent,omitempty"`

		// NotifyReviewer Whether to notify reviewers (defaults to false if not provided).
		NotifyReviewer *bool `json:"notifyReviewer,omitempty"`
	} `json:"EmailFlags"`

	// ExchangeNotes List of data exchange notes to add.
	ExchangeNotes *[]struct {
		// Date Timestamp when the note was created (will be set by server, should not be provided).
		Date *time.Time `json:"date"`

		// ExchangeId The ID of the data exchange system the note is for (maps to System_ID).
		ExchangeId string `json:"exchangeId"`

		// Note The content of the note (maps to NOTES).
		Note string `json:"note"`

		// Role Role of the user (optional, maps to NOTES_USER_ROLE).
		Role *string `json:"role"`

		// User The ID of the user adding the note (maps to NOTES_USER).
		User string `json:"user"`
	} `json:"ExchangeNotes,omitempty"`
}

// PostGatewaySystem20Census20Core20API200NoteJSONBody defines parameters for PostGatewaySystem20Census20Core20API200Note.
type PostGatewaySystem20Census20Core20API200NoteJSONBody struct {
	// EmailFlags Optional configuration for email notifications when notes are added. If not provided, no email notifications will be sent.
	EmailFlags *struct {
		// IncludeHistory Include previous note history in the email notification. Only applies when notifications are enabled. Defaults to true if not specified.
		IncludeHistory *bool `json:"includeHistory,omitempty"`

		// NotifyRespondent Send email notification to system respondents when notes are added. Defaults to false if not specified.
		NotifyRespondent *bool `json:"notifyRespondent,omitempty"`

		// NotifyReviewer Send email notification to system reviewers when notes are added. Defaults to false if not specified.
		NotifyReviewer *bool `json:"notifyReviewer,omitempty"`
	} `json:"EmailFlags"`

	// Notes Array of note objects to add to the system. Each note will be associated with a specific system and page.
	Notes []struct {
		// CreatedOn Timestamp when the note was created. This field is automatically set by the server and should NOT be provided in requests.
		CreatedOn *time.Time `json:"createdOn"`

		// Note The actual content/text of the note. This field contains the message or comment being added to the system.
		Note string `json:"note"`

		// NoteId Unique identifier for the note. This field should NOT be provided when adding new notes as it will be auto-generated by the system.
		NoteId *string `json:"noteId"`

		// PageName Name of the specific page or section within the system census where this note applies (e.g., "Urls", "DataExchange", "Contracts").
		PageName string `json:"pageName"`

		// SystemId Unique identifier of the system in GUID format. This identifies which system census record the note belongs to.
		SystemId string `json:"systemId"`

		// UserFirst First name of the user creating the note. Optional field that can be provided for display purposes.
		UserFirst *string `json:"userFirst"`

		// UserId User identifier of the person creating the note. This should match the authenticated user's ID.
		UserId string `json:"userId"`

		// UserLast Last name of the user creating the note. Optional field that can be provided for display purposes.
		UserLast *string `json:"userLast"`

		// UserRole Role or job title of the user creating the note. Optional field for organizational context.
		UserRole *string `json:"userRole"`
	} `json:"Notes"`
}

// PutGatewaySystem20Census20Core20API200NoteJSONBody defines parameters for PutGatewaySystem20Census20Core20API200Note.
type PutGatewaySystem20Census20Core20API200NoteJSONBody struct {
	// Note The updated content of the note
	Note string `json:"note"`
}

// PutGatewaySystem20Census20Core20API200NoteParams defines parameters for PutGatewaySystem20Census20Core20API200Note.
type PutGatewaySystem20Census20Core20API200NoteParams struct {
	// Id The ID of the note to update
	Id string `form:"id" json:"id"`
}

// DeleteGatewaySystem20Census20Core20API200NoteListParams defines parameters for DeleteGatewaySystem20Census20Core20API200NoteList.
type DeleteGatewaySystem20Census20Core20API200NoteListParams struct {
	// Id An array of one or more note IDs to delete. Can be provided as repeated parameters (id=123&id=456) or with bracket notation (id[]=123&id[]=456).
	Id []string `form:"id" json:"id"`
}

// GetGatewaySystem20Census20Core20API200NoteListParams defines parameters for GetGatewaySystem20Census20Core20API200NoteList.
type GetGatewaySystem20Census20Core20API200NoteListParams struct {
	// Id A system's ID
	Id string `form:"id" json:"id"`

	// PageName The system census page name
	PageName string `form:"pageName" json:"pageName"`
}

// GetGatewaySystem20Census20Core20API200PageUrlsParams defines parameters for GetGatewaySystem20Census20Core20API200PageUrls.
type GetGatewaySystem20Census20Core20API200PageUrlsParams struct {
	// SystemId ID of system to retrieve system component information about.
	SystemId string `form:"systemId" json:"systemId"`
}

// PostGatewaySystem20Census20Core20API200PageUrlsJSONBody defines parameters for PostGatewaySystem20Census20Core20API200PageUrls.
type PostGatewaySystem20Census20Core20API200PageUrlsJSONBody struct {
	// Urls Array of URL containers with operation flags.
	Urls []struct {
		// Url Array of URL objects to process.
		Url []struct {
			// ConfidenceLevel Confidence level of the URL information.
			ConfidenceLevel *string `json:"confidenceLevel"`

			// IsIntranetOnly Indicates if URL is intranet only.
			IsIntranetOnly *string `json:"isIntranetOnly"`

			// Link The URL link (required for create/update operations).
			Link *string `json:"link"`

			// PortalServicesUsed Portal services used by the URL.
			PortalServicesUsed *string `json:"portalServicesUsed"`

			// ProvidesVerCodeAccess Indicates if URL provides version code repository access.
			ProvidesVerCodeAccess *string `json:"providesVerCodeAccess"`

			// UrlApiEndpoint API endpoint URL.
			UrlApiEndpoint *string `json:"urlApiEndpoint"`

			// UrlApiWaf Web Application Firewall for the API.
			UrlApiWaf *string `json:"urlApiWaf"`

			// UrlHostingEnv The hosting environment of the URL.
			UrlHostingEnv *string `json:"urlHostingEnv"`

			// UrlId The unique identifier of the URL (required for update/delete operations).
			UrlId *string `json:"urlId"`

			// UsedforBeneficiary Indicates if URL is used for beneficiary access.
			UsedforBeneficiary *string `json:"usedforBeneficiary"`

			// UsesHTTPS Indicates if URL uses HTTPS.
			UsesHTTPS *string `json:"usesHTTPS"`
		} `json:"Url"`

		// Deleted Flag indicating if URLs should be deleted.
		Deleted *bool `json:"deleted"`

		// Updated Flag indicating if URLs should be updated.
		Updated *bool `json:"updated"`
	} `json:"Urls"`

	// SystemId The unique identifier (GUID) of the system.
	SystemId string `json:"systemId"`
}

// GetGatewaySystem20Census20Core20API200PageBusinessOwnerParams defines parameters for GetGatewaySystem20Census20Core20API200PageBusinessOwner.
type GetGatewaySystem20Census20Core20API200PageBusinessOwnerParams struct {
	// Id The GUID of the system for which to retrieve business owner information.
	Id string `form:"id" json:"id"`
}

// GetGatewaySystem20Census20Core20API200PageDataCentersParams defines parameters for GetGatewaySystem20Census20Core20API200PageDataCenters.
type GetGatewaySystem20Census20Core20API200PageDataCentersParams struct {
	// SystemId ID of the system that the deployment(s) is associated with
	SystemId string `form:"systemId" json:"systemId"`

	// State Deployment state
	State GetGatewaySystem20Census20Core20API200PageDataCentersParamsState `form:"state" json:"state"`

	// Status Deployment status
	Status GetGatewaySystem20Census20Core20API200PageDataCentersParamsStatus `form:"status" json:"status"`

	// Type Deployment type
	Type GetGatewaySystem20Census20Core20API200PageDataCentersParamsType `form:"type" json:"type"`
}

// GetGatewaySystem20Census20Core20API200PageDataCentersParamsState defines parameters for GetGatewaySystem20Census20Core20API200PageDataCenters.
type GetGatewaySystem20Census20Core20API200PageDataCentersParamsState string

// GetGatewaySystem20Census20Core20API200PageDataCentersParamsStatus defines parameters for GetGatewaySystem20Census20Core20API200PageDataCenters.
type GetGatewaySystem20Census20Core20API200PageDataCentersParamsStatus string

// GetGatewaySystem20Census20Core20API200PageDataCentersParamsType defines parameters for GetGatewaySystem20Census20Core20API200PageDataCenters.
type GetGatewaySystem20Census20Core20API200PageDataCentersParamsType string

// PostGatewaySystem20Census20Core20API200PageDataCentersJSONBody defines parameters for PostGatewaySystem20Census20Core20API200PageDataCenters.
type PostGatewaySystem20Census20Core20API200PageDataCentersJSONBody struct {
	// Deployments List of deployments to add, update, or delete. Only deployments with matching systemId and valid DataCenter.id will be processed.
	Deployments *[]struct {
		// DataCenter Associated Data Center information. The id field is required for deployments to be processed.
		DataCenter *struct {
			// Address1 Data Center Address Line 1.
			Address1 *string `json:"address1"`

			// Address2 Data Center Address Line 2.
			Address2 *string `json:"address2"`

			// AddressState Data Center State (full name or abbreviation).
			AddressState *string `json:"addressState"`

			// City Data Center City.
			City *string `json:"city"`

			// Description Data Center Description.
			Description *string `json:"description"`

			// EndDate Data Center End Date.
			EndDate *time.Time `json:"endDate"`

			// Id Data Center ID (required for deployment processing). Must exist in the Output_DataCenter table.
			Id *string `json:"id,omitempty"`

			// Name Data Center Name.
			Name *string `json:"name"`

			// StartDate Data Center Start Date.
			StartDate *time.Time `json:"startDate"`

			// State Data Center State.
			State *string `json:"state"`

			// Status Data Center Status.
			Status *string `json:"status"`

			// Version Data Center Version.
			Version *string `json:"version"`

			// Zip Data Center Zip Code.
			Zip *string `json:"zip"`
		} `json:"DataCenter"`

		// AwsEnclave AWS enclave information.
		AwsEnclave *string `json:"awsEnclave"`

		// AwsEnclaveOther Other AWS enclave details.
		AwsEnclaveOther *string `json:"awsEnclaveOther"`

		// ContractorName Name of the contractor managing the deployment. Maps to ContractorName field.
		ContractorName *string `json:"contractorName"`

		// Deleted Set to true to mark this deployment for deletion. Requires id field to be present.
		Deleted *bool `json:"deleted"`

		// DeploymentElementId ID of the deployment element in Alfabet.
		DeploymentElementId *string `json:"deploymentElementId"`

		// DeploymentType Type of deployment environment. Maps to both DataCenterType and Environment fields in the database.
		DeploymentType *string `json:"deploymentType"`

		// Description Deployment description.
		Description *string `json:"description"`

		// EndDate End date of the deployment.
		EndDate *time.Time `json:"endDate"`

		// HasProductionData Indicates if the deployment has production data (Yes/No). Maps to ProductionDataUseFlag field. Defaults to "No".
		HasProductionData *string `json:"hasProductionData"`

		// Id Deployment GUID (required for update/delete operations, must be null for new deployments).
		Id *string `json:"id"`

		// Name Deployment name.
		Name *string `json:"name"`

		// NetworkEncryption Details about network encryption.
		NetworkEncryption *string `json:"networkEncryption"`

		// OtherSpecialUsers Description of other special users.
		OtherSpecialUsers *string `json:"otherSpecialUsers"`

		// StartDate Start date of the deployment.
		StartDate *time.Time `json:"startDate"`

		// State State of the deployment.
		State *string `json:"state"`

		// Status Status of the deployment relationship. Maps to RelationshipStatus field.
		Status *string `json:"status"`

		// SystemId The ID of the system this deployment belongs to. Must match the top-level systemId.
		SystemId *string `json:"systemId,omitempty"`

		// SystemName Name of the system.
		SystemName *string `json:"systemName"`

		// SystemVersion Version of the system.
		SystemVersion *string `json:"systemVersion"`

		// Updated Set to true to mark this deployment for update. Requires id field to be present.
		Updated *bool `json:"updated"`

		// UsersRequiringMFA Number or description of users requiring MFA. Maps to both MultiFactorAuthentication and UsersRequiringMultifactorAuthentication fields. Defaults to "No".
		UsersRequiringMFA *string `json:"usersRequiringMFA"`

		// WanType Type of WAN connection.
		WanType *string `json:"wanType"`

		// WanTypeOther Other WAN type if not in enum.
		WanTypeOther *string `json:"wanTypeOther"`
	} `json:"Deployments"`

	// MovingToCloud System-level cloud migration plan indicator (Yes/No). Updates the CloudMigrationPlan field.
	MovingToCloud *string `json:"movingToCloud"`

	// MovingToCloudDate System-level planned date for moving to cloud. Updates the CloudMigratedDate field.
	MovingToCloudDate *string `json:"movingToCloudDate"`

	// PageName The name of the page (e.g., "DataCenterHostingEnvironments"). Optional field for UI context.
	PageName *string `json:"pageName"`

	// SystemId The ID of the system the data center/deployment is for. This field is required.
	SystemId string `json:"systemId"`
}

// GetGatewaySystem20Census20Core20API200PageDataExchangeJSONBody defines parameters for GetGatewaySystem20Census20Core20API200PageDataExchange.
type GetGatewaySystem20Census20Core20API200PageDataExchangeJSONBody = map[string]interface{}

// GetGatewaySystem20Census20Core20API200PageDataExchangeParams defines parameters for GetGatewaySystem20Census20Core20API200PageDataExchange.
type GetGatewaySystem20Census20Core20API200PageDataExchangeParams struct {
	// SystemId ID of the system to retrieve data exchange information about.
	SystemId string `form:"systemId" json:"systemId"`

	// Version Version of the data exchanges to be retrieved.
	Version *string `form:"version,omitempty" json:"version,omitempty"`
}

// PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBody defines parameters for PostGatewaySystem20Census20Core20API200PageDataExchange.
type PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBody struct {
	// DataExchanges List of data exchange records to add or update.
	DataExchanges []struct {
		// Exchange Detailed data exchange information.
		Exchange struct {
			// ApiOwnership API ownership information.
			ApiOwnership *string `json:"apiOwnership"`

			// BusinessPurposeOfAddress Business purpose of address data.
			BusinessPurposeOfAddress *[]string `json:"businessPurposeOfAddress"`

			// ConnectionFrequency Frequency of data connection (e.g., "Daily", "Weekly").
			ConnectionFrequency *[]string `json:"connectionFrequency"`

			// ContainsBankingData Indicates if the exchange contains banking data.
			ContainsBankingData *PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsBankingData `json:"containsBankingData"`

			// ContainsBeneficiaryAddress Indicates if the exchange contains beneficiary address.
			ContainsBeneficiaryAddress *PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsBeneficiaryAddress `json:"containsBeneficiaryAddress"`

			// ContainsPhi Indicates if the exchange contains PHI.
			ContainsPhi *PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsPhi `json:"containsPhi"`

			// ContainsPii Indicates if the exchange contains PII.
			ContainsPii *PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsPii `json:"containsPii"`

			// DataExchangeAgreement Data exchange agreement status.
			DataExchangeAgreement *string `json:"dataExchangeAgreement"`

			// DataFormat Format of the data.
			DataFormat *string `json:"dataFormat"`

			// DataFormatOther Other data format details.
			DataFormatOther *string `json:"dataFormatOther"`

			// EchangesState State of the data exchange (e.g., "Active").
			EchangesState *string `json:"echangesState"`

			// ExchangeCUIDescription Description of CUI.
			ExchangeCUIDescription *string `json:"exchangeCUIDescription"`

			// ExchangeConnectionAuthenticated Indicates if exchange connection is authenticated.
			ExchangeConnectionAuthenticated *PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeExchangeConnectionAuthenticated `json:"exchangeConnectionAuthenticated"`

			// ExchangeContainsCUI Indicates if exchange contains CUI.
			ExchangeContainsCUI *PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeExchangeContainsCUI `json:"exchangeContainsCUI"`

			// ExchangeDescription Description of the data exchange.
			ExchangeDescription *string `json:"exchangeDescription"`

			// ExchangeEndDate End date of the exchange.
			ExchangeEndDate *time.Time `json:"exchangeEndDate"`

			// ExchangeId Unique identifier for the data exchange. Required for updates, null for adds.
			ExchangeId *string `json:"exchangeId"`

			// ExchangeName Name of the data exchange.
			ExchangeName *string `json:"exchangeName"`

			// ExchangeNetworkProtocol Network protocol used.
			ExchangeNetworkProtocol *[]string `json:"exchangeNetworkProtocol"`

			// ExchangeNetworkProtocolOther Other network protocol details.
			ExchangeNetworkProtocolOther *string `json:"exchangeNetworkProtocolOther"`

			// ExchangePrimaryDataArea The primary Data Reference Model (DRM) for the exchange.
			ExchangePrimaryDataArea *string `json:"exchangePrimaryDataArea"`

			// ExchangeRetiredDate Retired date of the exchange.
			ExchangeRetiredDate *time.Time `json:"exchangeRetiredDate"`

			// ExchangeSecondaryDataArea Array of secondary Data Reference Models (DRMs) for the exchange. The exchangePrimaryDataArea must be included in this array.
			ExchangeSecondaryDataArea *[]string `json:"exchangeSecondaryDataArea"`

			// ExchangeStartDate Start date of the exchange.
			ExchangeStartDate *time.Time `json:"exchangeStartDate"`

			// ExchangeVersion Version of the data exchange.
			ExchangeVersion *string `json:"exchangeVersion"`

			// FromOwnerId ID of the system/owner from which data flows.
			FromOwnerId *string `json:"fromOwnerId"`

			// FromOwnerName Name of the system/owner from which data flows.
			FromOwnerName *string `json:"fromOwnerName"`

			// FromOwnerType Type of the source owner (e.g., "application").
			FromOwnerType *string `json:"fromOwnerType"`

			// IsAddressEditable Indicates if the address is editable.
			IsAddressEditable *PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeIsAddressEditable `json:"isAddressEditable"`

			// IsBeneficiaryMailingFile Indicates if it is a beneficiary mailing file.
			IsBeneficiaryMailingFile *PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeIsBeneficiaryMailingFile `json:"isBeneficiaryMailingFile"`

			// NumOfRecords Number of records in the exchange.
			NumOfRecords *string `json:"numOfRecords"`

			// SharedViaApi Indicates if shared via API.
			SharedViaApi *PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeSharedViaApi `json:"sharedViaApi"`

			// ToOwnerId ID of the system/owner to which data flows.
			ToOwnerId *string `json:"toOwnerId"`

			// ToOwnerName Name of the system/owner to which data flows.
			ToOwnerName *string `json:"toOwnerName"`

			// ToOwnerType Type of the target owner (e.g., "application").
			ToOwnerType *string `json:"toOwnerType"`

			// TypeOfData Type of data exchanged.
			TypeOfData *[]struct {
				Id   *string `json:"id,omitempty"`
				Name *string `json:"name,omitempty"`
			} `json:"typeOfData"`
		} `json:"Exchange"`

		// Status Status information for the data exchange.
		Status struct {
			// Deleted Flag indicating if the status record is logically deleted.
			Deleted *bool `json:"deleted"`

			// Direction Direction of the exchange for status tracking (e.g., "receiver", "sender").
			Direction string `json:"direction"`

			// ExchangeId Unique identifier for the data exchange (populated for existing exchanges).
			ExchangeId *string `json:"exchangeId"`

			// PartnerId ID of the partner.
			PartnerId *string `json:"partnerId"`

			// PartnerStatus Status of the partner side of the exchange.
			PartnerStatus string `json:"partnerStatus"`

			// ReviewerStatus Status assigned by the reviewer.
			ReviewerStatus string `json:"reviewerStatus"`

			// SystemId ID of the system.
			SystemId string `json:"systemId"`

			// SystemStatus Status of the system side of the exchange.
			SystemStatus string `json:"systemStatus"`
		} `json:"Status"`

		// Deleted Flag indicating if the record is logically deleted.
		Deleted *bool `json:"deleted"`

		// Direction Direction of the exchange (e.g., "receiver", "sender").
		Direction *string `json:"direction"`

		// Updated Flag indicating if the record is updated (must be true for updates, false for adds).
		Updated *bool `json:"updated"`
	} `json:"DataExchanges"`

	// Count Count of data exchanges in the list (optional, derived from array length).
	Count *int32 `json:"count"`

	// PageName The name of the page this data is associated with (should be "DataExchange").
	PageName string `json:"pageName"`

	// SystemId The ID of the system the data exchanges are for.
	SystemId string `json:"systemId"`
}

// PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsBankingData defines parameters for PostGatewaySystem20Census20Core20API200PageDataExchange.
type PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsBankingData string

// PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsBeneficiaryAddress defines parameters for PostGatewaySystem20Census20Core20API200PageDataExchange.
type PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsBeneficiaryAddress string

// PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsPhi defines parameters for PostGatewaySystem20Census20Core20API200PageDataExchange.
type PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsPhi string

// PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsPii defines parameters for PostGatewaySystem20Census20Core20API200PageDataExchange.
type PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeContainsPii string

// PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeExchangeConnectionAuthenticated defines parameters for PostGatewaySystem20Census20Core20API200PageDataExchange.
type PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeExchangeConnectionAuthenticated string

// PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeExchangeContainsCUI defines parameters for PostGatewaySystem20Census20Core20API200PageDataExchange.
type PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeExchangeContainsCUI string

// PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeIsAddressEditable defines parameters for PostGatewaySystem20Census20Core20API200PageDataExchange.
type PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeIsAddressEditable string

// PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeIsBeneficiaryMailingFile defines parameters for PostGatewaySystem20Census20Core20API200PageDataExchange.
type PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeIsBeneficiaryMailingFile string

// PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeSharedViaApi defines parameters for PostGatewaySystem20Census20Core20API200PageDataExchange.
type PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBodyDataExchangesExchangeSharedViaApi string

// GetGatewaySystem20Census20Core20API200PageSoftwareProductsParams defines parameters for GetGatewaySystem20Census20Core20API200PageSoftwareProducts.
type GetGatewaySystem20Census20Core20API200PageSoftwareProductsParams struct {
	// Id The ID of the system to retrieve software products for.
	Id string `form:"id" json:"id"`
}

// GetGatewaySystem20Census20Core20API200PageSystemDataParams defines parameters for GetGatewaySystem20Census20Core20API200PageSystemData.
type GetGatewaySystem20Census20Core20API200PageSystemDataParams struct {
	// SystemGUID The unique identifier (GUID) of the system to retrieve data for.
	SystemGUID *string `form:"systemGUID,omitempty" json:"systemGUID,omitempty"`

	// SystemId The system ID to retrieve data for.
	SystemId *string `form:"systemId,omitempty" json:"systemId,omitempty"`
}

// PostGatewaySystem20Census20Core20API200PageSystemDataJSONBody defines parameters for PostGatewaySystem20Census20Core20API200PageSystemData.
type PostGatewaySystem20Census20Core20API200PageSystemDataJSONBody struct {
	// AmountofData Amount or volume of data managed by the system.
	AmountofData *string `json:"amountofData"`

	// ApiDeveloped Whether APIs have been developed for the system.
	ApiDeveloped *string `json:"apiDeveloped"`

	// BeneficiaryInformation Information about beneficiaries associated with the system data.
	BeneficiaryInformation *string `json:"beneficiaryInformation"`

	// DoestheAPIuseFHIR Whether the API uses FHIR (Fast Healthcare Interoperability Resources) standards.
	DoestheAPIuseFHIR *string `json:"doestheAPIuseFHIR"`

	// DoestheAPIuseFHIROther Other FHIR-related information or specifications.
	DoestheAPIuseFHIROther *string `json:"doestheAPIuseFHIROther"`

	// EditBeneficiaryInformation Whether beneficiary information can be edited in the system.
	EditBeneficiaryInformation *string `json:"editBeneficiaryInformation"`

	// ExternalUserSensitiveDataAccess Whether external users have access to sensitive data.
	ExternalUserSensitiveDataAccess *string `json:"externalUserSensitiveDataAccess"`

	// PermitsDataTransferOutsideUS Whether the system permits data transfer outside the United States.
	PermitsDataTransferOutsideUS *string `json:"permitsDataTransferOutsideUS"`

	// PrimaryDRM The primary Data Reference Model (DRM) for the system.
	PrimaryDRM *string `json:"primaryDRM"`

	// SecondaryDRM Array of secondary Data Reference Models (DRMs) for the system. If primaryDRM is also provided, it must be included in this array.
	SecondaryDRM *[]string `json:"secondaryDRM"`

	// SystemDataAuthoritativeSource The authoritative source for the system data.
	SystemDataAuthoritativeSource *string `json:"systemDataAuthoritativeSource"`

	// SystemDataInvolvement Description of how the system is involved with data management.
	SystemDataInvolvement *string `json:"systemDataInvolvement"`

	// SystemDataLocation Physical or logical location of the system data.
	SystemDataLocation *string `json:"systemDataLocation"`

	// SystemDataLocationNotes Additional notes about the system data location.
	SystemDataLocationNotes *string `json:"systemDataLocationNotes"`

	// SystemDataSummary Summary of the system data.
	SystemDataSummary *string `json:"systemDataSummary"`

	// SystemGUID The unique identifier (GUID) of the system.
	SystemGUID string `json:"systemGUID"`
}

// GetGatewaySystem20Census20Core20API200PageSystemMaintainerParams defines parameters for GetGatewaySystem20Census20Core20API200PageSystemMaintainer.
type GetGatewaySystem20Census20Core20API200PageSystemMaintainerParams struct {
	// Id The unique identifier (GUID) of the system.
	Id string `form:"id" json:"id"`
}

// GetGatewaySystem20Census20Core20API200PersonJSONBody defines parameters for GetGatewaySystem20Census20Core20API200Person.
type GetGatewaySystem20Census20Core20API200PersonJSONBody = map[string]interface{}

// GetGatewaySystem20Census20Core20API200PersonParams defines parameters for GetGatewaySystem20Census20Core20API200Person.
type GetGatewaySystem20Census20Core20API200PersonParams struct {
	// Id A person's unique identifier (e.g., UID). If provided, this will be the primary search criterion.
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// UserName A person's username (often maps to commonName or uid in LDAP).
	UserName *string `form:"userName,omitempty" json:"userName,omitempty"`

	// FirstName A person's first name. LDAP searches require a minimum of 2 alpha-characters.
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty"`

	// LastName A person's last name. LDAP searches require a minimum of 2 alpha-characters.
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty"`

	// Phone A person's phone number.
	Phone *string `form:"phone,omitempty" json:"phone,omitempty"`

	// Email A person's email address.
	Email *string `form:"email,omitempty" json:"email,omitempty"`
}

// PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBody defines parameters for PostGatewaySystem20Census20Core20API200SoftwareProducts.
type PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBody struct {
	// SoftwareProducts List of software product updates/additions/deletions.
	SoftwareProducts *[]struct {
		// Products Details of the software product(s).
		Products []struct {
			// ActualVersion Actual version of the software deployed/installed (may differ from Technopedia version).
			ActualVersion *string `json:"actualVersion"`

			// ApiGatewayUse Indicates if this software product is used as an API Gateway.
			ApiGatewayUse *bool `json:"api_gateway_use"`

			// Category Category of the software product (e.g., Operating System, Database) (required if adding a new product).
			Category *string `json:"category"`

			// ClosestVersion If the exact version is not found, this indicates the closest available version.
			ClosestVersion *string `json:"closestVersion"`

			// ElaOrganization Organization name for ELA.
			ElaOrganization *string `json:"ela_organization"`

			// ElaPurchase Details about Enterprise License Agreement purchase.
			ElaPurchase *string `json:"ela_purchase"`

			// IsSaasProduct Indicates if this is a Software as a Service (SaaS) product.
			IsSaasProduct *PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsIsSaasProduct `json:"isSaasProduct"`

			// NumberOfLicensesBought Total number of licenses purchased for this software.
			NumberOfLicensesBought *string `json:"numberOfLicensesBought"`

			// NumberOfLicensesUtilized Number of licenses currently in use.
			NumberOfLicensesUtilized *string `json:"numberOfLicensesUtilized"`

			// ProvidesAiCapability Indicates if this software product provides AI capabilities.
			ProvidesAiCapability *PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsProvidesAiCapability `json:"provides_ai_capability"`

			// SoftwareLicenseMechanismType Type of software license mechanism.
			SoftwareLicenseMechanismType *PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsSoftwareLicenseMechanismType `json:"softwareLicenseMechanismType"`

			// SoftwareLicenseMechanismTypeOther Custom license mechanism type description (used when softwareLicenseMechanismType is "Other").
			SoftwareLicenseMechanismTypeOther *string `json:"softwareLicenseMechanismTypeOther"`

			// SoftwareLicenseNotes Free-text notes about software licensing.
			SoftwareLicenseNotes *string `json:"softwareLicenseNotes"`

			// SoftwareNonELAPurchaseNotes Notes about how software was procured if not purchased under an ELA.
			SoftwareNonELAPurchaseNotes *string `json:"softwareNonELAPurchaseNotes"`

			// SoftwareProductId ID of the software product. If null, a new product will be created.
			SoftwareProductId *string `json:"softwareProductId"`

			// SoftwarePurchaseContractNumber Contract or purchase order number associated with the software purchase.
			SoftwarePurchaseContractNumber *string `json:"softwarePurchaseContractNumber"`

			// SoftwareCost Cost associated with the software. Null values will be converted to empty string before saving.
			SoftwareCost *string `json:"software_cost"`

			// SoftwareName Name of the software product (required if adding a new product).
			SoftwareName *string `json:"software_name"`

			// SystemSoftwareConnectionGuid GUID of the system-software connection. Required for update/delete operations.
			SystemSoftwareConnectionGuid *string `json:"systemSoftwareConnectionGuid"`

			// TechnopediaId Technopedia ID for the software product (required if adding a new product).
			TechnopediaId *string `json:"technopedia_id"`

			// VendorOffersAIcapabilityviaSoftwareProduct Indicates if the software vendor currently offers AI capabilities through this software product.
			VendorOffersAIcapabilityviaSoftwareProduct *PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsVendorOffersAIcapabilityviaSoftwareProduct `json:"vendorOffersAIcapabilityviaSoftwareProduct"`

			// VendorName Vendor name for the software product (required if adding a new product).
			VendorName *string `json:"vendor_name"`
		} `json:"Products"`

		// Deleted Set to true to delete the associated software product connections. If true, only `systemSoftwareConnectionGuid` within `Products` is required for deletion.
		Deleted *bool `json:"deleted"`
	} `json:"SoftwareProducts"`

	// AiSolnCatg AI solution category.
	AiSolnCatg *[]string `json:"aiSolnCatg"`

	// AiSolnCatgOther Other details for AI solution category.
	AiSolnCatgOther *string `json:"aiSolnCatgOther"`

	// ApiDataArea The data area(s) of the API.
	ApiDataArea *[]string `json:"apiDataArea"`

	// ApiDescPubLocation Location where API descriptions are published.
	ApiDescPubLocation *string `json:"apiDescPubLocation"`

	// ApiDescPublished Indicates if API descriptions are published.
	ApiDescPublished *string `json:"apiDescPublished"`

	// ApiFHIRUse Indicates if FHIR is used in the API.
	ApiFHIRUse *string `json:"apiFHIRUse"`

	// ApiFHIRUseOther Other details if FHIR is used.
	ApiFHIRUseOther *string `json:"apiFHIRUseOther"`

	// ApiHasPortal Indicates if the API has a portal.
	ApiHasPortal *bool `json:"apiHasPortal"`

	// ApisAccessibility Accessibility of the APIs (e.g., Public, Private).
	ApisAccessibility *string `json:"apisAccessibility"`

	// ApisDeveloped Indicates if APIs are developed for the system.
	ApisDeveloped *string `json:"apisDeveloped"`

	// ApplicationId The ID of the system the software products are for.
	ApplicationId string `json:"applicationId"`

	// DevelopmentStage The development stage of AI technology.
	DevelopmentStage *string `json:"developmentStage"`

	// ProductOnly If true, only process SoftwareProducts section, skip system API/AI updates. Defaults to false.
	ProductOnly *bool `json:"productOnly"`

	// SystemHasApiGateway Indicates if the system uses an API Gateway.
	SystemHasApiGateway *bool `json:"systemHasApiGateway"`

	// UsesAiTech Indicates if the system uses AI technology.
	UsesAiTech *string `json:"usesAiTech"`
}

// PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsIsSaasProduct defines parameters for PostGatewaySystem20Census20Core20API200SoftwareProducts.
type PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsIsSaasProduct string

// PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsProvidesAiCapability defines parameters for PostGatewaySystem20Census20Core20API200SoftwareProducts.
type PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsProvidesAiCapability string

// PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsSoftwareLicenseMechanismType defines parameters for PostGatewaySystem20Census20Core20API200SoftwareProducts.
type PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsSoftwareLicenseMechanismType string

// PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsVendorOffersAIcapabilityviaSoftwareProduct defines parameters for PostGatewaySystem20Census20Core20API200SoftwareProducts.
type PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBodySoftwareProductsProductsVendorOffersAIcapabilityviaSoftwareProduct string

// DeleteGatewaySystem20Census20Core20API200StatusParams defines parameters for DeleteGatewaySystem20Census20Core20API200Status.
type DeleteGatewaySystem20Census20Core20API200StatusParams struct {
	// Id Comma-separated list of status record IDs to delete
	Id string `form:"id" json:"id"`

	// Soft If true, performs a soft delete. If false or omitted, performs a hard delete.
	Soft *bool `form:"soft,omitempty" json:"soft,omitempty"`
}

// GetGatewaySystem20Census20Core20API200StatusParams defines parameters for GetGatewaySystem20Census20Core20API200Status.
type GetGatewaySystem20Census20Core20API200StatusParams struct {
	// Id The unique identifier (GUID) of the system to filter by.
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// PageName The specific census page name to filter by. Requires id parameter when provided.
	PageName *string `form:"pageName,omitempty" json:"pageName,omitempty"`

	// Summarize Whether to return a summarized list per system.
	Summarize *bool `form:"summarize,omitempty" json:"summarize,omitempty"`
}

// PostGatewaySystem20Census20Core20API200StatusJSONBody defines parameters for PostGatewaySystem20Census20Core20API200Status.
type PostGatewaySystem20Census20Core20API200StatusJSONBody struct {
	// Status Array of status records to add or update
	Status []struct {
		// DisplayPageName Display name of the page/survey section.
		DisplayPageName *string `json:"displayPageName"`

		// LastUpdatedByFirstName First name of the person who last updated this record.
		LastUpdatedByFirstName *string `json:"lastUpdatedByFirstName"`

		// LastUpdatedById ID of the person who last updated this record.
		LastUpdatedById *string `json:"lastUpdatedById"`

		// LastUpdatedByLastName Last name of the person who last updated this record.
		LastUpdatedByLastName *string `json:"lastUpdatedByLastName"`

		// LastUpdatedDate Date and time when the record was last updated.
		LastUpdatedDate *time.Time `json:"lastUpdatedDate"`

		// PageName Name of the page/survey section.
		PageName string `json:"pageName"`

		// PercentComplete Percentage of completion for this page.
		PercentComplete *float32 `json:"percentComplete"`

		// RespondentFirstName First name of the page respondent.
		RespondentFirstName *string `json:"respondentFirstName"`

		// RespondentId ID of the person responsible for this page.
		RespondentId *string `json:"respondentId"`

		// RespondentLastName Last name of the page respondent.
		RespondentLastName *string `json:"respondentLastName"`

		// Status Current status of the page.
		Status *PostGatewaySystem20Census20Core20API200StatusJSONBodyStatusStatus `json:"status"`

		// StatusId The unique identifier of the status record (for updates)
		StatusId *string `json:"statusId"`

		// SystemId The unique identifier (GUID) of the system.
		SystemId string `json:"systemId"`
	} `json:"Status"`
}

// PostGatewaySystem20Census20Core20API200StatusJSONBodyStatusStatus defines parameters for PostGatewaySystem20Census20Core20API200Status.
type PostGatewaySystem20Census20Core20API200StatusJSONBodyStatusStatus string

// GetGatewaySystem20Census20Core20API200SystemAiUseParams defines parameters for GetGatewaySystem20Census20Core20API200SystemAiUse.
type GetGatewaySystem20Census20Core20API200SystemAiUseParams struct {
	// Id The unique identifier (GUID) of the system.
	Id string `form:"id" json:"id"`
}

// PostGatewaySystem20Census20Core20API200SystemAiUseJSONBody defines parameters for PostGatewaySystem20Census20Core20API200SystemAiUse.
type PostGatewaySystem20Census20Core20API200SystemAiUseJSONBody struct {
	// AiCapabilityITGRLifecycleAssigned Lifecycle phase assigned for ITGR (e.g., Development, Production)
	AiCapabilityITGRLifecycleAssigned *string `json:"aiCapabilityITGRLifecycleAssigned"`

	// AiCapabilityITGRLifecycleMissing Whether lifecycle assignment is missing (Yes/No/Plans)
	AiCapabilityITGRLifecycleMissing *string `json:"aiCapabilityITGRLifecycleMissing"`

	// AiCapabilityITGRReviewed Whether ITGR (IT Governance Review) has been completed (Yes/No)
	AiCapabilityITGRReviewed *string `json:"aiCapabilityITGRReviewed"`

	// AiCapabilityITGRSubmissionDate Date when ITGR was submitted (YYYY-MM-DD)
	AiCapabilityITGRSubmissionDate *string `json:"aiCapabilityITGRSubmissionDate"`

	// AiCapabilityImpact Impact level of AI capability (e.g., High, Medium, Low)
	AiCapabilityImpact *string `json:"aiCapabilityImpact"`

	// AiCapabilitySensitiveInformationInvolved Types of sensitive information involved (e.g., PII, PHI, Financial)
	AiCapabilitySensitiveInformationInvolved *[]string `json:"aiCapabilitySensitiveInformationInvolved"`

	// AiCapabilitySystemDataCategory Categories of system data (e.g., Healthcare, Financial)
	AiCapabilitySystemDataCategory *[]string `json:"aiCapabilitySystemDataCategory"`

	// AiProjectLifeCycleStage Current stage of AI project lifecycle (e.g., Planning, Development, Testing, Production)
	AiProjectLifeCycleStage *string `json:"aiProjectLifeCycleStage"`

	// ArtificialIntelligence Types of artificial intelligence used (e.g., Machine Learning, Natural Language Processing, Computer Vision)
	ArtificialIntelligence *[]string `json:"artificialIntelligence"`

	// ArtificialIntelligenceOtherDescription Description of other AI types not listed in the standard options (supports longer text)
	ArtificialIntelligenceOtherDescription *string `json:"artificialIntelligenceOtherDescription"`

	// Id The unique identifier (GUID) of the system.
	Id string `json:"id"`

	// UsesAITechnology Whether the system uses AI technology (Yes/No)
	UsesAITechnology *string `json:"usesAITechnology"`
}

// GetGatewaySystem20Census20Core20API200SystemComponentsParams defines parameters for GetGatewaySystem20Census20Core20API200SystemComponents.
type GetGatewaySystem20Census20Core20API200SystemComponentsParams struct {
	// SystemId ID of the system to retrieve system component information about.
	SystemId string `form:"systemId" json:"systemId"`
}

// PostGatewaySystem20Census20Core20API200SystemComponentsJSONBody defines parameters for PostGatewaySystem20Census20Core20API200SystemComponents.
type PostGatewaySystem20Census20Core20API200SystemComponentsJSONBody struct {
	// SystemComponents An array of operations (add, update, or delete) for system components.
	SystemComponents []struct {
		// Components List of system components to be processed.
		Components *[]struct {
			// ComponentAcronym Acronym of the component.
			ComponentAcronym *string `json:"componentAcronym"`

			// ComponentId The ID of the component (required for update/delete, omitted for add).
			ComponentId *string `json:"componentId"`

			// ComponentName Name of the component (required for add).
			ComponentName *string `json:"componentName"`

			// ComponentRetirementQuarter Planned retirement quarter of the component.
			ComponentRetirementQuarter *string `json:"componentRetirementQuarter"`

			// ComponentRetirementYear Planned retirement year of the component.
			ComponentRetirementYear *string `json:"componentRetirementYear"`

			// Description Description of the component.
			Description *string `json:"description"`
		} `json:"Components,omitempty"`

		// Deleted Set to true for delete operations (soft delete).
		Deleted *bool `json:"deleted"`

		// Updated Set to true for add/update operations.
		Updated *bool `json:"updated"`
	} `json:"SystemComponents"`

	// SystemId The ID of the parent system.
	SystemId string `json:"systemId"`
}

// PostGatewaySystem20Census20Core20API200SystemMaintainerJSONBody defines parameters for PostGatewaySystem20Census20Core20API200SystemMaintainer.
type PostGatewaySystem20Census20Core20API200SystemMaintainerJSONBody struct {
	// AdHocAgileDeploymentFrequency Ad-hoc Agile deployment frequency.
	AdHocAgileDeploymentFrequency *string `json:"adHocAgileDeploymentFrequency"`

	// AgileUsed Indicates if Agile methodology is used.
	AgileUsed *bool `json:"agileUsed"`

	// AuthoritativeDatasource Authoritative data source details.
	AuthoritativeDatasource *string `json:"authoritativeDatasource"`

	// BusinessArtifactsLocation Location of business artifacts.
	BusinessArtifactsLocation *string `json:"businessArtifactsLocation"`

	// BusinessArtifactsOnDemand Are business artifacts available on demand?
	BusinessArtifactsOnDemand *bool `json:"businessArtifactsOnDemand"`

	// DataAtRestEncryptionKeyManagement Data at rest encryption key management details.
	DataAtRestEncryptionKeyManagement *string `json:"dataAtRestEncryptionKeyManagement"`

	// DeploymentFrequency Frequency of deployments.
	DeploymentFrequency *string `json:"deploymentFrequency"`

	// DevWorkDescription Description of development work.
	DevWorkDescription *string `json:"devWorkDescription"`

	// FrontendAccessType Type of frontend access.
	FrontendAccessType *string `json:"frontendAccessType"`

	// HasMetadataGlossary Does the system have a metadata glossary?
	HasMetadataGlossary *bool `json:"hasMetadataGlossary"`

	// HaveEnterpriseDataLakePlan Enterprise Data Lake plan details.
	HaveEnterpriseDataLakePlan *string `json:"haveEnterpriseDataLakePlan"`

	// Id The unique identifier (GUID) of the system.
	Id string `json:"id"`

	// IdentityManagementSolution Identity management solution(s).
	IdentityManagementSolution *[]string `json:"identityManagementSolution"`

	// IdentityManagementSolutionOther Other identity management solutions.
	IdentityManagementSolutionOther *string `json:"identityManagementSolutionOther"`

	// Ip6EnabledAssetPercent Percentage of IPv6 enabled assets.
	Ip6EnabledAssetPercent *string `json:"ip6EnabledAssetPercent"`

	// Ip6TransitionPlan IPv6 transition plan details.
	Ip6TransitionPlan *string `json:"ip6TransitionPlan"`

	// IpEnabledAssetCount Count of IP enabled assets.
	IpEnabledAssetCount *int32 `json:"ipEnabledAssetCount"`

	// IsRecordManagementScheduleApproved Is records management schedule approved?
	IsRecordManagementScheduleApproved *bool `json:"isRecordManagementScheduleApproved"`

	// LegalHoldCaseName Legal hold case name.
	LegalHoldCaseName *string `json:"legalHoldCaseName"`

	// LocallyStoredUserInformation Is user information stored locally?
	LocallyStoredUserInformation *string `json:"locallyStoredUserInformation"`

	// MajorRefreshDate Date of last major refresh (MM/DD/YYYY).
	MajorRefreshDate *openapi_types.Date `json:"majorRefreshDate"`

	// MultifactorAuthenticationMethod Multi-factor authentication method(s).
	MultifactorAuthenticationMethod *[]string `json:"multifactorAuthenticationMethod"`

	// MultifactorAuthenticationMethodOther Other multi-factor authentication methods.
	MultifactorAuthenticationMethodOther *string `json:"multifactorAuthenticationMethodOther"`

	// Name Name of the system.
	Name *string `json:"name"`

	// NetAccessibility Network accessibility type.
	NetAccessibility *string `json:"netAccessibility"`

	// NetworkTrafficEncryptionKeyManagement Network traffic encryption key management details.
	NetworkTrafficEncryptionKeyManagement *string `json:"networkTrafficEncryptionKeyManagement"`

	// NextMajorRefreshDate Date of next major refresh (MM/DD/YYYY).
	NextMajorRefreshDate *openapi_types.Date `json:"nextMajorRefreshDate"`

	// NoMajorRefresh No major refresh planned?
	NoMajorRefresh *bool `json:"noMajorRefresh"`

	// NoPersistentRecordsFlag No persistent records flag.
	NoPersistentRecordsFlag *bool `json:"noPersistentRecordsFlag"`

	// NoPlannedMajorRefresh No planned major refresh?
	NoPlannedMajorRefresh *bool `json:"noPlannedMajorRefresh"`

	// OmDocumentationLocation Location of O&M documentation.
	OmDocumentationLocation *string `json:"omDocumentationLocation"`

	// OmDocumentationOnDemand Is O&M documentation available on demand?
	OmDocumentationOnDemand *bool `json:"omDocumentationOnDemand"`

	// PageName Name of the page being updated (e.g., "SystemMaintainerBasicInfo").
	PageName *string `json:"pageName"`

	// PlansToRetireReplace Plans to retire or replace the system.
	PlansToRetireReplace *string `json:"plansToRetireReplace"`

	// QuarterToRetireReplace Quarter planned for retirement or replacement.
	QuarterToRetireReplace *string `json:"quarterToRetireReplace"`

	// RecordsManagementBucket Records management bucket(s).
	RecordsManagementBucket *[]string `json:"recordsManagementBucket"`

	// RecordsUnderLegalHold Are records under legal hold?
	RecordsUnderLegalHold *bool `json:"recordsUnderLegalHold"`

	// SourceCodeLoction Location of source code.
	SourceCodeLoction *string `json:"sourceCodeLoction"`

	// SourceCodeOnDemand Is source code available on demand?
	SourceCodeOnDemand *bool `json:"sourceCodeOnDemand"`

	// StoreInCentralDataCatalog Is data stored in central data catalog?
	StoreInCentralDataCatalog *bool `json:"storeInCentralDataCatalog"`

	// SystemCustomization Description of system customizations.
	SystemCustomization *string `json:"systemCustomization"`

	// SystemDataLocation System data location(s).
	SystemDataLocation *[]string `json:"systemDataLocation"`

	// SystemDataLocationNotes Notes regarding system data location.
	SystemDataLocationNotes *string `json:"systemDataLocationNotes"`

	// SystemDesignLocation Location of system design documentation.
	SystemDesignLocation *string `json:"systemDesignLocation"`

	// SystemDesignOnDemand Is system design available on demand?
	SystemDesignOnDemand *bool `json:"systemDesignOnDemand"`

	// SystemProductionDate Date system went into production (YYYY-MM-DD).
	SystemProductionDate *openapi_types.Date `json:"systemProductionDate"`

	// SystemRequirementsLocation Location of system requirements.
	SystemRequirementsLocation *string `json:"systemRequirementsLocation"`

	// SystemRequirementsOnDemand Are system requirements available on demand?
	SystemRequirementsOnDemand *bool `json:"systemRequirementsOnDemand"`

	// TestPlanLocation Location of test plan.
	TestPlanLocation *string `json:"testPlanLocation"`

	// TestPlanOnDemand Is test plan available on demand?
	TestPlanOnDemand *bool `json:"testPlanOnDemand"`

	// TestReportsLocation Location of test reports.
	TestReportsLocation *string `json:"testReportsLocation"`

	// TestReportsOnDemand Are test reports available on demand?
	TestReportsOnDemand *bool `json:"testReportsOnDemand"`

	// TestScriptsLocation Location of test scripts.
	TestScriptsLocation *string `json:"testScriptsLocation"`

	// TestScriptsOnDemand Are test scripts available on demand?
	TestScriptsOnDemand *bool `json:"testScriptsOnDemand"`

	// Version Version of the system.
	Version *string `json:"version"`

	// YearToRetireReplace Year planned for retirement or replacement.
	YearToRetireReplace *string `json:"yearToRetireReplace"`
}

// GetGatewaySystem20Census20Core20API200SystemPropertyParams defines parameters for GetGatewaySystem20Census20Core20API200SystemProperty.
type GetGatewaySystem20Census20Core20API200SystemPropertyParams struct {
	// SystemId The unique identifier (GUID) of the system.
	SystemId string `form:"systemId" json:"systemId"`

	// PropertyName The name of the system property to retrieve.
	PropertyName string `form:"propertyName" json:"propertyName"`
}

// PostGatewaySystem20Census20Core20API200SystemPropertyJSONBody defines parameters for PostGatewaySystem20Census20Core20API200SystemProperty.
type PostGatewaySystem20Census20Core20API200SystemPropertyJSONBody struct {
	// PropertyName The name of the system property to add or update.
	PropertyName *string `json:"propertyName,omitempty"`

	// PropertyValue The value of the system property.
	PropertyValue *string `json:"propertyValue"`

	// SystemId The unique identifier (GUID) of the system.
	SystemId *string `json:"systemId,omitempty"`
}

// GetGatewayTechnopedia10SoftwareExtendedParams defines parameters for GetGatewayTechnopedia10SoftwareExtended.
type GetGatewayTechnopedia10SoftwareExtendedParams struct {
	// ProductName Software product name. Used for product matching.
	ProductName *string `form:"product_name,omitempty" json:"product_name,omitempty"`

	// ProductNameOperation Operation type for product name matching (e.g., exact, fuzzy).
	ProductNameOperation *string `form:"product_name_operation,omitempty" json:"product_name_operation,omitempty"`

	// Vendor Software vendor/manufacturer name. Used for vendor matching.
	Vendor *string `form:"vendor,omitempty" json:"vendor,omitempty"`

	// VendorOperation Operation type for vendor matching (e.g., exact, fuzzy).
	VendorOperation *string `form:"vendor_operation,omitempty" json:"vendor_operation,omitempty"`

	// Version Software version for filtering results. Uses exact match when update=true, LIKE match when update=false.
	Version *string `form:"version,omitempty" json:"version,omitempty"`

	// VersionOperation Operation type for version matching (e.g., exact, fuzzy). NOTE: Currently not implemented - use "update" parameter to control match type.
	VersionOperation *string `form:"version_operation,omitempty" json:"version_operation,omitempty"`

	// Edition Software edition for filtering results (e.g., Professional, Enterprise, Standard). Uses exact match when update=true, LIKE match when update=false.
	Edition *string `form:"edition,omitempty" json:"edition,omitempty"`

	// EditionOperation Operation type for edition matching (e.g., exact, fuzzy). NOTE: Currently not implemented - use "update" parameter to control match type.
	EditionOperation *string `form:"edition_operation,omitempty" json:"edition_operation,omitempty"`

	// Summary Controls the response mode. When "true", returns summary data.
	Summary GetGatewayTechnopedia10SoftwareExtendedParamsSummary `form:"summary" json:"summary"`

	// Update Controls update behavior when summary is true. When "true", uses update mode.
	Update GetGatewayTechnopedia10SoftwareExtendedParamsUpdate `form:"update" json:"update"`

	// Offset Pagination offset for result sets.
	Offset *string `form:"offset,omitempty" json:"offset,omitempty"`

	// FetchLimit Maximum number of results to return. Defaults to 200.
	FetchLimit *string `form:"fetch_limit,omitempty" json:"fetch_limit,omitempty"`
}

// GetGatewayTechnopedia10SoftwareExtendedParamsSummary defines parameters for GetGatewayTechnopedia10SoftwareExtended.
type GetGatewayTechnopedia10SoftwareExtendedParamsSummary string

// GetGatewayTechnopedia10SoftwareExtendedParamsUpdate defines parameters for GetGatewayTechnopedia10SoftwareExtended.
type GetGatewayTechnopedia10SoftwareExtendedParamsUpdate string

// PostGatewayIntakeSchemaJSONBody defines parameters for PostGatewayIntakeSchema.
type PostGatewayIntakeSchemaJSONBody struct {
	Name   string `json:"name"`
	Schema string `json:"schema"`
}

// PutGatewayIntakeSchemaIdJSONBody defines parameters for PutGatewayIntakeSchemaId.
type PutGatewayIntakeSchemaIdJSONBody struct {
	Schema string `json:"schema"`
}

// PostSparxJSONBody defines parameters for PostSparx.
type PostSparxJSONBody struct {
	// PackageName Name of the package where the object will be created
	PackageName string `json:"packageName"`

	// Title Title of the object to create
	Title string `json:"title"`
}

// PostGatewayCEDAR20Core20API200BudgetJSONRequestBody defines body for PostGatewayCEDAR20Core20API200Budget for application/json ContentType.
type PostGatewayCEDAR20Core20API200BudgetJSONRequestBody PostGatewayCEDAR20Core20API200BudgetJSONBody

// PutGatewayCEDAR20Core20API200BudgetJSONRequestBody defines body for PutGatewayCEDAR20Core20API200Budget for application/json ContentType.
type PutGatewayCEDAR20Core20API200BudgetJSONRequestBody PutGatewayCEDAR20Core20API200BudgetJSONBody

// PostGatewayCEDAR20Core20API200ComponentJSONRequestBody defines body for PostGatewayCEDAR20Core20API200Component for application/json ContentType.
type PostGatewayCEDAR20Core20API200ComponentJSONRequestBody PostGatewayCEDAR20Core20API200ComponentJSONBody

// PostGatewayCEDAR20Core20API200ContractJSONRequestBody defines body for PostGatewayCEDAR20Core20API200Contract for application/json ContentType.
type PostGatewayCEDAR20Core20API200ContractJSONRequestBody PostGatewayCEDAR20Core20API200ContractJSONBody

// PutGatewayCEDAR20Core20API200ContractJSONRequestBody defines body for PutGatewayCEDAR20Core20API200Contract for application/json ContentType.
type PutGatewayCEDAR20Core20API200ContractJSONRequestBody PutGatewayCEDAR20Core20API200ContractJSONBody

// PostGatewayCEDAR20Core20API200DeploymentJSONRequestBody defines body for PostGatewayCEDAR20Core20API200Deployment for application/json ContentType.
type PostGatewayCEDAR20Core20API200DeploymentJSONRequestBody PostGatewayCEDAR20Core20API200DeploymentJSONBody

// PutGatewayCEDAR20Core20API200DeploymentJSONRequestBody defines body for PutGatewayCEDAR20Core20API200Deployment for application/json ContentType.
type PutGatewayCEDAR20Core20API200DeploymentJSONRequestBody PutGatewayCEDAR20Core20API200DeploymentJSONBody

// PutGatewayCEDAR20Core20API200ExchangeJSONRequestBody defines body for PutGatewayCEDAR20Core20API200Exchange for application/json ContentType.
type PutGatewayCEDAR20Core20API200ExchangeJSONRequestBody PutGatewayCEDAR20Core20API200ExchangeJSONBody

// PostGatewayCEDAR20Core20API200RoleJSONRequestBody defines body for PostGatewayCEDAR20Core20API200Role for application/json ContentType.
type PostGatewayCEDAR20Core20API200RoleJSONRequestBody PostGatewayCEDAR20Core20API200RoleJSONBody

// PostGatewayCEDAR20Core20API200SoftwareProductsJSONRequestBody defines body for PostGatewayCEDAR20Core20API200SoftwareProducts for application/json ContentType.
type PostGatewayCEDAR20Core20API200SoftwareProductsJSONRequestBody PostGatewayCEDAR20Core20API200SoftwareProductsJSONBody

// PostGatewayCEDAR20Core20API200SupportContactJSONRequestBody defines body for PostGatewayCEDAR20Core20API200SupportContact for application/json ContentType.
type PostGatewayCEDAR20Core20API200SupportContactJSONRequestBody PostGatewayCEDAR20Core20API200SupportContactJSONBody

// PostGatewayCEDAR20Core20API200UserJSONRequestBody defines body for PostGatewayCEDAR20Core20API200User for application/json ContentType.
type PostGatewayCEDAR20Core20API200UserJSONRequestBody PostGatewayCEDAR20Core20API200UserJSONBody

// PostGatewayCEDAR20Core20APIExchangeJSONRequestBody defines body for PostGatewayCEDAR20Core20APIExchange for application/json ContentType.
type PostGatewayCEDAR20Core20APIExchangeJSONRequestBody PostGatewayCEDAR20Core20APIExchangeJSONBody

// PostGatewayCEDARIntake10IntakeJSONRequestBody defines body for PostGatewayCEDARIntake10Intake for application/json ContentType.
type PostGatewayCEDARIntake10IntakeJSONRequestBody PostGatewayCEDARIntake10IntakeJSONBody

// PostGatewayLDAP10AuthenticateJSONRequestBody defines body for PostGatewayLDAP10Authenticate for application/json ContentType.
type PostGatewayLDAP10AuthenticateJSONRequestBody PostGatewayLDAP10AuthenticateJSONBody

// DeleteGatewaySystem20Census20Core20API200AdminReviewerJSONRequestBody defines body for DeleteGatewaySystem20Census20Core20API200AdminReviewer for application/json ContentType.
type DeleteGatewaySystem20Census20Core20API200AdminReviewerJSONRequestBody DeleteGatewaySystem20Census20Core20API200AdminReviewerJSONBody

// PostGatewaySystem20Census20Core20API200AdminReviewerJSONRequestBody defines body for PostGatewaySystem20Census20Core20API200AdminReviewer for application/json ContentType.
type PostGatewaySystem20Census20Core20API200AdminReviewerJSONRequestBody PostGatewaySystem20Census20Core20API200AdminReviewerJSONBody

// PostGatewaySystem20Census20Core20API200BudgetAndContractsJSONRequestBody defines body for PostGatewaySystem20Census20Core20API200BudgetAndContracts for application/json ContentType.
type PostGatewaySystem20Census20Core20API200BudgetAndContractsJSONRequestBody PostGatewaySystem20Census20Core20API200BudgetAndContractsJSONBody

// PostGatewaySystem20Census20Core20API200BusinessOwnerJSONRequestBody defines body for PostGatewaySystem20Census20Core20API200BusinessOwner for application/json ContentType.
type PostGatewaySystem20Census20Core20API200BusinessOwnerJSONRequestBody PostGatewaySystem20Census20Core20API200BusinessOwnerJSONBody

// DeleteGatewaySystem20Census20Core20API200DataExchangeStatusJSONRequestBody defines body for DeleteGatewaySystem20Census20Core20API200DataExchangeStatus for application/json ContentType.
type DeleteGatewaySystem20Census20Core20API200DataExchangeStatusJSONRequestBody DeleteGatewaySystem20Census20Core20API200DataExchangeStatusJSONBody

// PostGatewaySystem20Census20Core20API200DataExchangeNotesJSONRequestBody defines body for PostGatewaySystem20Census20Core20API200DataExchangeNotes for application/json ContentType.
type PostGatewaySystem20Census20Core20API200DataExchangeNotesJSONRequestBody PostGatewaySystem20Census20Core20API200DataExchangeNotesJSONBody

// PostGatewaySystem20Census20Core20API200NoteJSONRequestBody defines body for PostGatewaySystem20Census20Core20API200Note for application/json ContentType.
type PostGatewaySystem20Census20Core20API200NoteJSONRequestBody PostGatewaySystem20Census20Core20API200NoteJSONBody

// PutGatewaySystem20Census20Core20API200NoteJSONRequestBody defines body for PutGatewaySystem20Census20Core20API200Note for application/json ContentType.
type PutGatewaySystem20Census20Core20API200NoteJSONRequestBody PutGatewaySystem20Census20Core20API200NoteJSONBody

// PostGatewaySystem20Census20Core20API200PageUrlsJSONRequestBody defines body for PostGatewaySystem20Census20Core20API200PageUrls for application/json ContentType.
type PostGatewaySystem20Census20Core20API200PageUrlsJSONRequestBody PostGatewaySystem20Census20Core20API200PageUrlsJSONBody

// PostGatewaySystem20Census20Core20API200PageDataCentersJSONRequestBody defines body for PostGatewaySystem20Census20Core20API200PageDataCenters for application/json ContentType.
type PostGatewaySystem20Census20Core20API200PageDataCentersJSONRequestBody PostGatewaySystem20Census20Core20API200PageDataCentersJSONBody

// GetGatewaySystem20Census20Core20API200PageDataExchangeJSONRequestBody defines body for GetGatewaySystem20Census20Core20API200PageDataExchange for application/json ContentType.
type GetGatewaySystem20Census20Core20API200PageDataExchangeJSONRequestBody = GetGatewaySystem20Census20Core20API200PageDataExchangeJSONBody

// PostGatewaySystem20Census20Core20API200PageDataExchangeJSONRequestBody defines body for PostGatewaySystem20Census20Core20API200PageDataExchange for application/json ContentType.
type PostGatewaySystem20Census20Core20API200PageDataExchangeJSONRequestBody PostGatewaySystem20Census20Core20API200PageDataExchangeJSONBody

// PostGatewaySystem20Census20Core20API200PageSystemDataJSONRequestBody defines body for PostGatewaySystem20Census20Core20API200PageSystemData for application/json ContentType.
type PostGatewaySystem20Census20Core20API200PageSystemDataJSONRequestBody PostGatewaySystem20Census20Core20API200PageSystemDataJSONBody

// GetGatewaySystem20Census20Core20API200PersonJSONRequestBody defines body for GetGatewaySystem20Census20Core20API200Person for application/json ContentType.
type GetGatewaySystem20Census20Core20API200PersonJSONRequestBody = GetGatewaySystem20Census20Core20API200PersonJSONBody

// PostGatewaySystem20Census20Core20API200SoftwareProductsJSONRequestBody defines body for PostGatewaySystem20Census20Core20API200SoftwareProducts for application/json ContentType.
type PostGatewaySystem20Census20Core20API200SoftwareProductsJSONRequestBody PostGatewaySystem20Census20Core20API200SoftwareProductsJSONBody

// PostGatewaySystem20Census20Core20API200StatusJSONRequestBody defines body for PostGatewaySystem20Census20Core20API200Status for application/json ContentType.
type PostGatewaySystem20Census20Core20API200StatusJSONRequestBody PostGatewaySystem20Census20Core20API200StatusJSONBody

// PostGatewaySystem20Census20Core20API200SystemAiUseJSONRequestBody defines body for PostGatewaySystem20Census20Core20API200SystemAiUse for application/json ContentType.
type PostGatewaySystem20Census20Core20API200SystemAiUseJSONRequestBody PostGatewaySystem20Census20Core20API200SystemAiUseJSONBody

// PostGatewaySystem20Census20Core20API200SystemComponentsJSONRequestBody defines body for PostGatewaySystem20Census20Core20API200SystemComponents for application/json ContentType.
type PostGatewaySystem20Census20Core20API200SystemComponentsJSONRequestBody PostGatewaySystem20Census20Core20API200SystemComponentsJSONBody

// PostGatewaySystem20Census20Core20API200SystemMaintainerJSONRequestBody defines body for PostGatewaySystem20Census20Core20API200SystemMaintainer for application/json ContentType.
type PostGatewaySystem20Census20Core20API200SystemMaintainerJSONRequestBody PostGatewaySystem20Census20Core20API200SystemMaintainerJSONBody

// PostGatewaySystem20Census20Core20API200SystemPropertyJSONRequestBody defines body for PostGatewaySystem20Census20Core20API200SystemProperty for application/json ContentType.
type PostGatewaySystem20Census20Core20API200SystemPropertyJSONRequestBody PostGatewaySystem20Census20Core20API200SystemPropertyJSONBody

// PostGatewayIntakeSchemaJSONRequestBody defines body for PostGatewayIntakeSchema for application/json ContentType.
type PostGatewayIntakeSchemaJSONRequestBody PostGatewayIntakeSchemaJSONBody

// PutGatewayIntakeSchemaIdJSONRequestBody defines body for PutGatewayIntakeSchemaId for application/json ContentType.
type PutGatewayIntakeSchemaIdJSONRequestBody PutGatewayIntakeSchemaIdJSONBody

// PostSparxJSONRequestBody defines body for PostSparx for application/json ContentType.
type PostSparxJSONRequestBody PostSparxJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetGatewayCEDAR20Core20API200AuthorityToOperate request
	GetGatewayCEDAR20Core20API200AuthorityToOperate(ctx context.Context, params *GetGatewayCEDAR20Core20API200AuthorityToOperateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDAR20Core20API200Budget request
	GetGatewayCEDAR20Core20API200Budget(ctx context.Context, params *GetGatewayCEDAR20Core20API200BudgetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewayCEDAR20Core20API200BudgetWithBody request with any body
	PostGatewayCEDAR20Core20API200BudgetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewayCEDAR20Core20API200Budget(ctx context.Context, body PostGatewayCEDAR20Core20API200BudgetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutGatewayCEDAR20Core20API200BudgetWithBody request with any body
	PutGatewayCEDAR20Core20API200BudgetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutGatewayCEDAR20Core20API200Budget(ctx context.Context, body PutGatewayCEDAR20Core20API200BudgetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGatewayCEDAR20Core20API200BudgetList request
	DeleteGatewayCEDAR20Core20API200BudgetList(ctx context.Context, params *DeleteGatewayCEDAR20Core20API200BudgetListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDAR20Core20API200BudgetSystemCostFind request
	GetGatewayCEDAR20Core20API200BudgetSystemCostFind(ctx context.Context, params *GetGatewayCEDAR20Core20API200BudgetSystemCostFindParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewayCEDAR20Core20API200ComponentWithBody request with any body
	PostGatewayCEDAR20Core20API200ComponentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewayCEDAR20Core20API200Component(ctx context.Context, body PostGatewayCEDAR20Core20API200ComponentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewayCEDAR20Core20API200ContractWithBody request with any body
	PostGatewayCEDAR20Core20API200ContractWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewayCEDAR20Core20API200Contract(ctx context.Context, body PostGatewayCEDAR20Core20API200ContractJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutGatewayCEDAR20Core20API200ContractWithBody request with any body
	PutGatewayCEDAR20Core20API200ContractWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutGatewayCEDAR20Core20API200Contract(ctx context.Context, body PutGatewayCEDAR20Core20API200ContractJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGatewayCEDAR20Core20API200ContractList request
	DeleteGatewayCEDAR20Core20API200ContractList(ctx context.Context, params *DeleteGatewayCEDAR20Core20API200ContractListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDAR20Core20API200ContractList request
	GetGatewayCEDAR20Core20API200ContractList(ctx context.Context, params *GetGatewayCEDAR20Core20API200ContractListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDAR20Core20API200CostTypeList request
	GetGatewayCEDAR20Core20API200CostTypeList(ctx context.Context, params *GetGatewayCEDAR20Core20API200CostTypeListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGatewayCEDAR20Core20API200Deployment request
	DeleteGatewayCEDAR20Core20API200Deployment(ctx context.Context, params *DeleteGatewayCEDAR20Core20API200DeploymentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDAR20Core20API200Deployment request
	GetGatewayCEDAR20Core20API200Deployment(ctx context.Context, params *GetGatewayCEDAR20Core20API200DeploymentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewayCEDAR20Core20API200DeploymentWithBody request with any body
	PostGatewayCEDAR20Core20API200DeploymentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewayCEDAR20Core20API200Deployment(ctx context.Context, body PostGatewayCEDAR20Core20API200DeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutGatewayCEDAR20Core20API200DeploymentWithBody request with any body
	PutGatewayCEDAR20Core20API200DeploymentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutGatewayCEDAR20Core20API200Deployment(ctx context.Context, body PutGatewayCEDAR20Core20API200DeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDAR20Core20API200DomainModelList request
	GetGatewayCEDAR20Core20API200DomainModelList(ctx context.Context, params *GetGatewayCEDAR20Core20API200DomainModelListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDAR20Core20API200DomainModelLevel request
	GetGatewayCEDAR20Core20API200DomainModelLevel(ctx context.Context, params *GetGatewayCEDAR20Core20API200DomainModelLevelParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDAR20Core20API200DomainModelName request
	GetGatewayCEDAR20Core20API200DomainModelName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDAR20Core20API200Enumeration request
	GetGatewayCEDAR20Core20API200Enumeration(ctx context.Context, params *GetGatewayCEDAR20Core20API200EnumerationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDAR20Core20API200Exchange request
	GetGatewayCEDAR20Core20API200Exchange(ctx context.Context, params *GetGatewayCEDAR20Core20API200ExchangeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutGatewayCEDAR20Core20API200ExchangeWithBody request with any body
	PutGatewayCEDAR20Core20API200ExchangeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutGatewayCEDAR20Core20API200Exchange(ctx context.Context, body PutGatewayCEDAR20Core20API200ExchangeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDAR20Core20API200ExchangeId request
	GetGatewayCEDAR20Core20API200ExchangeId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDAR20Core20API200Organization request
	GetGatewayCEDAR20Core20API200Organization(ctx context.Context, params *GetGatewayCEDAR20Core20API200OrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDAR20Core20API200Role request
	GetGatewayCEDAR20Core20API200Role(ctx context.Context, params *GetGatewayCEDAR20Core20API200RoleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewayCEDAR20Core20API200RoleWithBody request with any body
	PostGatewayCEDAR20Core20API200RoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewayCEDAR20Core20API200Role(ctx context.Context, body PostGatewayCEDAR20Core20API200RoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGatewayCEDAR20Core20API200RoleList request
	DeleteGatewayCEDAR20Core20API200RoleList(ctx context.Context, params *DeleteGatewayCEDAR20Core20API200RoleListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDAR20Core20API200RoleTypeApplication request
	GetGatewayCEDAR20Core20API200RoleTypeApplication(ctx context.Context, application GetGatewayCEDAR20Core20API200RoleTypeApplicationParamsApplication, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDAR20Core20API200SoftwareProducts request
	GetGatewayCEDAR20Core20API200SoftwareProducts(ctx context.Context, params *GetGatewayCEDAR20Core20API200SoftwareProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewayCEDAR20Core20API200SoftwareProductsWithBody request with any body
	PostGatewayCEDAR20Core20API200SoftwareProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewayCEDAR20Core20API200SoftwareProducts(ctx context.Context, body PostGatewayCEDAR20Core20API200SoftwareProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDAR20Core20API200Stakeholder request
	GetGatewayCEDAR20Core20API200Stakeholder(ctx context.Context, params *GetGatewayCEDAR20Core20API200StakeholderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGatewayCEDAR20Core20API200SupportContact request
	DeleteGatewayCEDAR20Core20API200SupportContact(ctx context.Context, params *DeleteGatewayCEDAR20Core20API200SupportContactParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDAR20Core20API200SupportContact request
	GetGatewayCEDAR20Core20API200SupportContact(ctx context.Context, params *GetGatewayCEDAR20Core20API200SupportContactParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewayCEDAR20Core20API200SupportContactWithBody request with any body
	PostGatewayCEDAR20Core20API200SupportContactWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewayCEDAR20Core20API200SupportContact(ctx context.Context, body PostGatewayCEDAR20Core20API200SupportContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDAR20Core20API200SystemDetailId request
	GetGatewayCEDAR20Core20API200SystemDetailId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDAR20Core20API200SystemSummary request
	GetGatewayCEDAR20Core20API200SystemSummary(ctx context.Context, params *GetGatewayCEDAR20Core20API200SystemSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDAR20Core20API200SystemSummaryId request
	GetGatewayCEDAR20Core20API200SystemSummaryId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDAR20Core20API200Threat request
	GetGatewayCEDAR20Core20API200Threat(ctx context.Context, params *GetGatewayCEDAR20Core20API200ThreatParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDAR20Core20API200UrlId request
	GetGatewayCEDAR20Core20API200UrlId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDAR20Core20API200User request
	GetGatewayCEDAR20Core20API200User(ctx context.Context, params *GetGatewayCEDAR20Core20API200UserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewayCEDAR20Core20API200UserWithBody request with any body
	PostGatewayCEDAR20Core20API200UserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewayCEDAR20Core20API200User(ctx context.Context, body PostGatewayCEDAR20Core20API200UserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewayCEDAR20Core20APIExchangeWithBody request with any body
	PostGatewayCEDAR20Core20APIExchangeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewayCEDAR20Core20APIExchange(ctx context.Context, body PostGatewayCEDAR20Core20APIExchangeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDARIntake10ClientId request
	GetGatewayCEDARIntake10ClientId(ctx context.Context, id string, params *GetGatewayCEDARIntake10ClientIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDARIntake10HealthCheck request
	GetGatewayCEDARIntake10HealthCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewayCEDARIntake10IntakeWithBody request with any body
	PostGatewayCEDARIntake10IntakeWithBody(ctx context.Context, params *PostGatewayCEDARIntake10IntakeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewayCEDARIntake10Intake(ctx context.Context, params *PostGatewayCEDARIntake10IntakeParams, body PostGatewayCEDARIntake10IntakeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDARIntake10IntakeCedarId request
	GetGatewayCEDARIntake10IntakeCedarId(ctx context.Context, id string, params *GetGatewayCEDARIntake10IntakeCedarIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDARIntake10IntakeStatus request
	GetGatewayCEDARIntake10IntakeStatus(ctx context.Context, params *GetGatewayCEDARIntake10IntakeStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDARIntake10StatusCedarId request
	GetGatewayCEDARIntake10StatusCedarId(ctx context.Context, id string, params *GetGatewayCEDARIntake10StatusCedarIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayCEDARIntake10StatusClientId request
	GetGatewayCEDARIntake10StatusClientId(ctx context.Context, id string, params *GetGatewayCEDARIntake10StatusClientIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewayLDAP10AuthenticateWithBody request with any body
	PostGatewayLDAP10AuthenticateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewayLDAP10Authenticate(ctx context.Context, body PostGatewayLDAP10AuthenticateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayLDAP10Person request
	GetGatewayLDAP10Person(ctx context.Context, params *GetGatewayLDAP10PersonParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayLDAP10PersonId request
	GetGatewayLDAP10PersonId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewaySystem20Census20Core20API200AdminReviewer request
	GetGatewaySystem20Census20Core20API200AdminReviewer(ctx context.Context, params *GetGatewaySystem20Census20Core20API200AdminReviewerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGatewaySystem20Census20Core20API200AdminReviewerWithBody request with any body
	DeleteGatewaySystem20Census20Core20API200AdminReviewerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteGatewaySystem20Census20Core20API200AdminReviewer(ctx context.Context, body DeleteGatewaySystem20Census20Core20API200AdminReviewerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewaySystem20Census20Core20API200AdminReviewerWithBody request with any body
	PostGatewaySystem20Census20Core20API200AdminReviewerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewaySystem20Census20Core20API200AdminReviewer(ctx context.Context, body PostGatewaySystem20Census20Core20API200AdminReviewerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewaySystem20Census20Core20API200BudgetAndContracts request
	GetGatewaySystem20Census20Core20API200BudgetAndContracts(ctx context.Context, params *GetGatewaySystem20Census20Core20API200BudgetAndContractsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewaySystem20Census20Core20API200BudgetAndContractsWithBody request with any body
	PostGatewaySystem20Census20Core20API200BudgetAndContractsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewaySystem20Census20Core20API200BudgetAndContracts(ctx context.Context, body PostGatewaySystem20Census20Core20API200BudgetAndContractsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewaySystem20Census20Core20API200BusinessOwnerWithBody request with any body
	PostGatewaySystem20Census20Core20API200BusinessOwnerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewaySystem20Census20Core20API200BusinessOwner(ctx context.Context, body PostGatewaySystem20Census20Core20API200BusinessOwnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGatewaySystem20Census20Core20API200DataExchangeNotes request
	DeleteGatewaySystem20Census20Core20API200DataExchangeNotes(ctx context.Context, params *DeleteGatewaySystem20Census20Core20API200DataExchangeNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGatewaySystem20Census20Core20API200DataExchangeStatusWithBody request with any body
	DeleteGatewaySystem20Census20Core20API200DataExchangeStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteGatewaySystem20Census20Core20API200DataExchangeStatus(ctx context.Context, body DeleteGatewaySystem20Census20Core20API200DataExchangeStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewaySystem20Census20Core20API200DataExchangeStatus request
	GetGatewaySystem20Census20Core20API200DataExchangeStatus(ctx context.Context, params *GetGatewaySystem20Census20Core20API200DataExchangeStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewaySystem20Census20Core20API200DataExchangeNotes request
	GetGatewaySystem20Census20Core20API200DataExchangeNotes(ctx context.Context, params *GetGatewaySystem20Census20Core20API200DataExchangeNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewaySystem20Census20Core20API200DataExchangeNotesWithBody request with any body
	PostGatewaySystem20Census20Core20API200DataExchangeNotesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewaySystem20Census20Core20API200DataExchangeNotes(ctx context.Context, body PostGatewaySystem20Census20Core20API200DataExchangeNotesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewaySystem20Census20Core20API200Drm request
	GetGatewaySystem20Census20Core20API200Drm(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewaySystem20Census20Core20API200NoteWithBody request with any body
	PostGatewaySystem20Census20Core20API200NoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewaySystem20Census20Core20API200Note(ctx context.Context, body PostGatewaySystem20Census20Core20API200NoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutGatewaySystem20Census20Core20API200NoteWithBody request with any body
	PutGatewaySystem20Census20Core20API200NoteWithBody(ctx context.Context, params *PutGatewaySystem20Census20Core20API200NoteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutGatewaySystem20Census20Core20API200Note(ctx context.Context, params *PutGatewaySystem20Census20Core20API200NoteParams, body PutGatewaySystem20Census20Core20API200NoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGatewaySystem20Census20Core20API200NoteList request
	DeleteGatewaySystem20Census20Core20API200NoteList(ctx context.Context, params *DeleteGatewaySystem20Census20Core20API200NoteListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewaySystem20Census20Core20API200NoteList request
	GetGatewaySystem20Census20Core20API200NoteList(ctx context.Context, params *GetGatewaySystem20Census20Core20API200NoteListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewaySystem20Census20Core20API200PageUrls request
	GetGatewaySystem20Census20Core20API200PageUrls(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageUrlsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewaySystem20Census20Core20API200PageUrlsWithBody request with any body
	PostGatewaySystem20Census20Core20API200PageUrlsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewaySystem20Census20Core20API200PageUrls(ctx context.Context, body PostGatewaySystem20Census20Core20API200PageUrlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewaySystem20Census20Core20API200PageBusinessOwner request
	GetGatewaySystem20Census20Core20API200PageBusinessOwner(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageBusinessOwnerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewaySystem20Census20Core20API200PageDataCenters request
	GetGatewaySystem20Census20Core20API200PageDataCenters(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageDataCentersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewaySystem20Census20Core20API200PageDataCentersWithBody request with any body
	PostGatewaySystem20Census20Core20API200PageDataCentersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewaySystem20Census20Core20API200PageDataCenters(ctx context.Context, body PostGatewaySystem20Census20Core20API200PageDataCentersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewaySystem20Census20Core20API200PageDataExchangeWithBody request with any body
	GetGatewaySystem20Census20Core20API200PageDataExchangeWithBody(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageDataExchangeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetGatewaySystem20Census20Core20API200PageDataExchange(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageDataExchangeParams, body GetGatewaySystem20Census20Core20API200PageDataExchangeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewaySystem20Census20Core20API200PageDataExchangeWithBody request with any body
	PostGatewaySystem20Census20Core20API200PageDataExchangeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewaySystem20Census20Core20API200PageDataExchange(ctx context.Context, body PostGatewaySystem20Census20Core20API200PageDataExchangeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewaySystem20Census20Core20API200PageSoftwareProducts request
	GetGatewaySystem20Census20Core20API200PageSoftwareProducts(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageSoftwareProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewaySystem20Census20Core20API200PageSystemData request
	GetGatewaySystem20Census20Core20API200PageSystemData(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageSystemDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewaySystem20Census20Core20API200PageSystemDataWithBody request with any body
	PostGatewaySystem20Census20Core20API200PageSystemDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewaySystem20Census20Core20API200PageSystemData(ctx context.Context, body PostGatewaySystem20Census20Core20API200PageSystemDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewaySystem20Census20Core20API200PageSystemMaintainer request
	GetGatewaySystem20Census20Core20API200PageSystemMaintainer(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageSystemMaintainerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewaySystem20Census20Core20API200PageSystemsList request
	GetGatewaySystem20Census20Core20API200PageSystemsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewaySystem20Census20Core20API200PersonWithBody request with any body
	GetGatewaySystem20Census20Core20API200PersonWithBody(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PersonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetGatewaySystem20Census20Core20API200Person(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PersonParams, body GetGatewaySystem20Census20Core20API200PersonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewaySystem20Census20Core20API200SoftwareProductsWithBody request with any body
	PostGatewaySystem20Census20Core20API200SoftwareProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewaySystem20Census20Core20API200SoftwareProducts(ctx context.Context, body PostGatewaySystem20Census20Core20API200SoftwareProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGatewaySystem20Census20Core20API200Status request
	DeleteGatewaySystem20Census20Core20API200Status(ctx context.Context, params *DeleteGatewaySystem20Census20Core20API200StatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewaySystem20Census20Core20API200Status request
	GetGatewaySystem20Census20Core20API200Status(ctx context.Context, params *GetGatewaySystem20Census20Core20API200StatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewaySystem20Census20Core20API200StatusWithBody request with any body
	PostGatewaySystem20Census20Core20API200StatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewaySystem20Census20Core20API200Status(ctx context.Context, body PostGatewaySystem20Census20Core20API200StatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewaySystem20Census20Core20API200SystemAiUse request
	GetGatewaySystem20Census20Core20API200SystemAiUse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200SystemAiUseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewaySystem20Census20Core20API200SystemAiUseWithBody request with any body
	PostGatewaySystem20Census20Core20API200SystemAiUseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewaySystem20Census20Core20API200SystemAiUse(ctx context.Context, body PostGatewaySystem20Census20Core20API200SystemAiUseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewaySystem20Census20Core20API200SystemComponents request
	GetGatewaySystem20Census20Core20API200SystemComponents(ctx context.Context, params *GetGatewaySystem20Census20Core20API200SystemComponentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewaySystem20Census20Core20API200SystemComponentsWithBody request with any body
	PostGatewaySystem20Census20Core20API200SystemComponentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewaySystem20Census20Core20API200SystemComponents(ctx context.Context, body PostGatewaySystem20Census20Core20API200SystemComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewaySystem20Census20Core20API200SystemMaintainerWithBody request with any body
	PostGatewaySystem20Census20Core20API200SystemMaintainerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewaySystem20Census20Core20API200SystemMaintainer(ctx context.Context, body PostGatewaySystem20Census20Core20API200SystemMaintainerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewaySystem20Census20Core20API200SystemProperty request
	GetGatewaySystem20Census20Core20API200SystemProperty(ctx context.Context, params *GetGatewaySystem20Census20Core20API200SystemPropertyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewaySystem20Census20Core20API200SystemPropertyWithBody request with any body
	PostGatewaySystem20Census20Core20API200SystemPropertyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewaySystem20Census20Core20API200SystemProperty(ctx context.Context, body PostGatewaySystem20Census20Core20API200SystemPropertyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayTechnopedia10SoftwareExtended request
	GetGatewayTechnopedia10SoftwareExtended(ctx context.Context, params *GetGatewayTechnopedia10SoftwareExtendedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayTechnopedia10SoftwareExtendedId request
	GetGatewayTechnopedia10SoftwareExtendedId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayIntakeSchema request
	GetGatewayIntakeSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewayIntakeSchemaWithBody request with any body
	PostGatewayIntakeSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGatewayIntakeSchema(ctx context.Context, body PostGatewayIntakeSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGatewayIntakeSchemaId request
	DeleteGatewayIntakeSchemaId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayIntakeSchemaId request
	GetGatewayIntakeSchemaId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutGatewayIntakeSchemaIdWithBody request with any body
	PutGatewayIntakeSchemaIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutGatewayIntakeSchemaId(ctx context.Context, id string, body PutGatewayIntakeSchemaIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGatewayKeys request
	GetGatewayKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGatewayKeys request
	PostGatewayKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGatewayKeysId request
	DeleteGatewayKeysId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHealth request
	GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSparxWithBody request with any body
	PostSparxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSparx(ctx context.Context, body PostSparxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSparxId request
	DeleteSparxId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSparxId request
	GetSparxId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwaggerUi request
	GetSwaggerUi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetGatewayCEDAR20Core20API200AuthorityToOperate(ctx context.Context, params *GetGatewayCEDAR20Core20API200AuthorityToOperateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200AuthorityToOperateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDAR20Core20API200Budget(ctx context.Context, params *GetGatewayCEDAR20Core20API200BudgetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200BudgetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayCEDAR20Core20API200BudgetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayCEDAR20Core20API200BudgetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayCEDAR20Core20API200Budget(ctx context.Context, body PostGatewayCEDAR20Core20API200BudgetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayCEDAR20Core20API200BudgetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGatewayCEDAR20Core20API200BudgetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGatewayCEDAR20Core20API200BudgetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGatewayCEDAR20Core20API200Budget(ctx context.Context, body PutGatewayCEDAR20Core20API200BudgetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGatewayCEDAR20Core20API200BudgetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGatewayCEDAR20Core20API200BudgetList(ctx context.Context, params *DeleteGatewayCEDAR20Core20API200BudgetListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGatewayCEDAR20Core20API200BudgetListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDAR20Core20API200BudgetSystemCostFind(ctx context.Context, params *GetGatewayCEDAR20Core20API200BudgetSystemCostFindParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200BudgetSystemCostFindRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayCEDAR20Core20API200ComponentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayCEDAR20Core20API200ComponentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayCEDAR20Core20API200Component(ctx context.Context, body PostGatewayCEDAR20Core20API200ComponentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayCEDAR20Core20API200ComponentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayCEDAR20Core20API200ContractWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayCEDAR20Core20API200ContractRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayCEDAR20Core20API200Contract(ctx context.Context, body PostGatewayCEDAR20Core20API200ContractJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayCEDAR20Core20API200ContractRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGatewayCEDAR20Core20API200ContractWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGatewayCEDAR20Core20API200ContractRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGatewayCEDAR20Core20API200Contract(ctx context.Context, body PutGatewayCEDAR20Core20API200ContractJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGatewayCEDAR20Core20API200ContractRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGatewayCEDAR20Core20API200ContractList(ctx context.Context, params *DeleteGatewayCEDAR20Core20API200ContractListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGatewayCEDAR20Core20API200ContractListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDAR20Core20API200ContractList(ctx context.Context, params *GetGatewayCEDAR20Core20API200ContractListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200ContractListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDAR20Core20API200CostTypeList(ctx context.Context, params *GetGatewayCEDAR20Core20API200CostTypeListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200CostTypeListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGatewayCEDAR20Core20API200Deployment(ctx context.Context, params *DeleteGatewayCEDAR20Core20API200DeploymentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGatewayCEDAR20Core20API200DeploymentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDAR20Core20API200Deployment(ctx context.Context, params *GetGatewayCEDAR20Core20API200DeploymentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200DeploymentRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayCEDAR20Core20API200DeploymentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayCEDAR20Core20API200DeploymentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayCEDAR20Core20API200Deployment(ctx context.Context, body PostGatewayCEDAR20Core20API200DeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayCEDAR20Core20API200DeploymentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGatewayCEDAR20Core20API200DeploymentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGatewayCEDAR20Core20API200DeploymentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGatewayCEDAR20Core20API200Deployment(ctx context.Context, body PutGatewayCEDAR20Core20API200DeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGatewayCEDAR20Core20API200DeploymentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDAR20Core20API200DomainModelList(ctx context.Context, params *GetGatewayCEDAR20Core20API200DomainModelListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200DomainModelListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDAR20Core20API200DomainModelLevel(ctx context.Context, params *GetGatewayCEDAR20Core20API200DomainModelLevelParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200DomainModelLevelRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDAR20Core20API200DomainModelName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200DomainModelNameRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDAR20Core20API200Enumeration(ctx context.Context, params *GetGatewayCEDAR20Core20API200EnumerationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200EnumerationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDAR20Core20API200Exchange(ctx context.Context, params *GetGatewayCEDAR20Core20API200ExchangeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200ExchangeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGatewayCEDAR20Core20API200ExchangeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGatewayCEDAR20Core20API200ExchangeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGatewayCEDAR20Core20API200Exchange(ctx context.Context, body PutGatewayCEDAR20Core20API200ExchangeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGatewayCEDAR20Core20API200ExchangeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDAR20Core20API200ExchangeId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200ExchangeIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDAR20Core20API200Organization(ctx context.Context, params *GetGatewayCEDAR20Core20API200OrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200OrganizationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDAR20Core20API200Role(ctx context.Context, params *GetGatewayCEDAR20Core20API200RoleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200RoleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayCEDAR20Core20API200RoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayCEDAR20Core20API200RoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayCEDAR20Core20API200Role(ctx context.Context, body PostGatewayCEDAR20Core20API200RoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayCEDAR20Core20API200RoleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGatewayCEDAR20Core20API200RoleList(ctx context.Context, params *DeleteGatewayCEDAR20Core20API200RoleListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGatewayCEDAR20Core20API200RoleListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDAR20Core20API200RoleTypeApplication(ctx context.Context, application GetGatewayCEDAR20Core20API200RoleTypeApplicationParamsApplication, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200RoleTypeApplicationRequest(c.Server, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDAR20Core20API200SoftwareProducts(ctx context.Context, params *GetGatewayCEDAR20Core20API200SoftwareProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200SoftwareProductsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayCEDAR20Core20API200SoftwareProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayCEDAR20Core20API200SoftwareProductsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayCEDAR20Core20API200SoftwareProducts(ctx context.Context, body PostGatewayCEDAR20Core20API200SoftwareProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayCEDAR20Core20API200SoftwareProductsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDAR20Core20API200Stakeholder(ctx context.Context, params *GetGatewayCEDAR20Core20API200StakeholderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200StakeholderRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGatewayCEDAR20Core20API200SupportContact(ctx context.Context, params *DeleteGatewayCEDAR20Core20API200SupportContactParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGatewayCEDAR20Core20API200SupportContactRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDAR20Core20API200SupportContact(ctx context.Context, params *GetGatewayCEDAR20Core20API200SupportContactParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200SupportContactRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayCEDAR20Core20API200SupportContactWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayCEDAR20Core20API200SupportContactRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayCEDAR20Core20API200SupportContact(ctx context.Context, body PostGatewayCEDAR20Core20API200SupportContactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayCEDAR20Core20API200SupportContactRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDAR20Core20API200SystemDetailId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200SystemDetailIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDAR20Core20API200SystemSummary(ctx context.Context, params *GetGatewayCEDAR20Core20API200SystemSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200SystemSummaryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDAR20Core20API200SystemSummaryId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200SystemSummaryIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDAR20Core20API200Threat(ctx context.Context, params *GetGatewayCEDAR20Core20API200ThreatParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200ThreatRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDAR20Core20API200UrlId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200UrlIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDAR20Core20API200User(ctx context.Context, params *GetGatewayCEDAR20Core20API200UserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDAR20Core20API200UserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayCEDAR20Core20API200UserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayCEDAR20Core20API200UserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayCEDAR20Core20API200User(ctx context.Context, body PostGatewayCEDAR20Core20API200UserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayCEDAR20Core20API200UserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayCEDAR20Core20APIExchangeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayCEDAR20Core20APIExchangeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayCEDAR20Core20APIExchange(ctx context.Context, body PostGatewayCEDAR20Core20APIExchangeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayCEDAR20Core20APIExchangeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDARIntake10ClientId(ctx context.Context, id string, params *GetGatewayCEDARIntake10ClientIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDARIntake10ClientIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDARIntake10HealthCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDARIntake10HealthCheckRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayCEDARIntake10IntakeWithBody(ctx context.Context, params *PostGatewayCEDARIntake10IntakeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayCEDARIntake10IntakeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayCEDARIntake10Intake(ctx context.Context, params *PostGatewayCEDARIntake10IntakeParams, body PostGatewayCEDARIntake10IntakeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayCEDARIntake10IntakeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDARIntake10IntakeCedarId(ctx context.Context, id string, params *GetGatewayCEDARIntake10IntakeCedarIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDARIntake10IntakeCedarIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDARIntake10IntakeStatus(ctx context.Context, params *GetGatewayCEDARIntake10IntakeStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDARIntake10IntakeStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDARIntake10StatusCedarId(ctx context.Context, id string, params *GetGatewayCEDARIntake10StatusCedarIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDARIntake10StatusCedarIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayCEDARIntake10StatusClientId(ctx context.Context, id string, params *GetGatewayCEDARIntake10StatusClientIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayCEDARIntake10StatusClientIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayLDAP10AuthenticateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayLDAP10AuthenticateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayLDAP10Authenticate(ctx context.Context, body PostGatewayLDAP10AuthenticateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayLDAP10AuthenticateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayLDAP10Person(ctx context.Context, params *GetGatewayLDAP10PersonParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayLDAP10PersonRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayLDAP10PersonId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayLDAP10PersonIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewaySystem20Census20Core20API200AdminReviewer(ctx context.Context, params *GetGatewaySystem20Census20Core20API200AdminReviewerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewaySystem20Census20Core20API200AdminReviewerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGatewaySystem20Census20Core20API200AdminReviewerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGatewaySystem20Census20Core20API200AdminReviewerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGatewaySystem20Census20Core20API200AdminReviewer(ctx context.Context, body DeleteGatewaySystem20Census20Core20API200AdminReviewerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGatewaySystem20Census20Core20API200AdminReviewerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200AdminReviewerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200AdminReviewerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200AdminReviewer(ctx context.Context, body PostGatewaySystem20Census20Core20API200AdminReviewerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200AdminReviewerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewaySystem20Census20Core20API200BudgetAndContracts(ctx context.Context, params *GetGatewaySystem20Census20Core20API200BudgetAndContractsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewaySystem20Census20Core20API200BudgetAndContractsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200BudgetAndContractsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200BudgetAndContractsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200BudgetAndContracts(ctx context.Context, body PostGatewaySystem20Census20Core20API200BudgetAndContractsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200BudgetAndContractsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200BusinessOwnerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200BusinessOwnerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200BusinessOwner(ctx context.Context, body PostGatewaySystem20Census20Core20API200BusinessOwnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200BusinessOwnerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGatewaySystem20Census20Core20API200DataExchangeNotes(ctx context.Context, params *DeleteGatewaySystem20Census20Core20API200DataExchangeNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGatewaySystem20Census20Core20API200DataExchangeNotesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGatewaySystem20Census20Core20API200DataExchangeStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGatewaySystem20Census20Core20API200DataExchangeStatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGatewaySystem20Census20Core20API200DataExchangeStatus(ctx context.Context, body DeleteGatewaySystem20Census20Core20API200DataExchangeStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGatewaySystem20Census20Core20API200DataExchangeStatusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewaySystem20Census20Core20API200DataExchangeStatus(ctx context.Context, params *GetGatewaySystem20Census20Core20API200DataExchangeStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewaySystem20Census20Core20API200DataExchangeStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewaySystem20Census20Core20API200DataExchangeNotes(ctx context.Context, params *GetGatewaySystem20Census20Core20API200DataExchangeNotesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewaySystem20Census20Core20API200DataExchangeNotesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200DataExchangeNotesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200DataExchangeNotesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200DataExchangeNotes(ctx context.Context, body PostGatewaySystem20Census20Core20API200DataExchangeNotesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200DataExchangeNotesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewaySystem20Census20Core20API200Drm(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewaySystem20Census20Core20API200DrmRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200NoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200NoteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200Note(ctx context.Context, body PostGatewaySystem20Census20Core20API200NoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200NoteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGatewaySystem20Census20Core20API200NoteWithBody(ctx context.Context, params *PutGatewaySystem20Census20Core20API200NoteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGatewaySystem20Census20Core20API200NoteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGatewaySystem20Census20Core20API200Note(ctx context.Context, params *PutGatewaySystem20Census20Core20API200NoteParams, body PutGatewaySystem20Census20Core20API200NoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGatewaySystem20Census20Core20API200NoteRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGatewaySystem20Census20Core20API200NoteList(ctx context.Context, params *DeleteGatewaySystem20Census20Core20API200NoteListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGatewaySystem20Census20Core20API200NoteListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewaySystem20Census20Core20API200NoteList(ctx context.Context, params *GetGatewaySystem20Census20Core20API200NoteListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewaySystem20Census20Core20API200NoteListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewaySystem20Census20Core20API200PageUrls(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageUrlsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewaySystem20Census20Core20API200PageUrlsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200PageUrlsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200PageUrlsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200PageUrls(ctx context.Context, body PostGatewaySystem20Census20Core20API200PageUrlsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200PageUrlsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewaySystem20Census20Core20API200PageBusinessOwner(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageBusinessOwnerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewaySystem20Census20Core20API200PageBusinessOwnerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewaySystem20Census20Core20API200PageDataCenters(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageDataCentersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewaySystem20Census20Core20API200PageDataCentersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200PageDataCentersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200PageDataCentersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200PageDataCenters(ctx context.Context, body PostGatewaySystem20Census20Core20API200PageDataCentersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200PageDataCentersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewaySystem20Census20Core20API200PageDataExchangeWithBody(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageDataExchangeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewaySystem20Census20Core20API200PageDataExchangeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewaySystem20Census20Core20API200PageDataExchange(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageDataExchangeParams, body GetGatewaySystem20Census20Core20API200PageDataExchangeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewaySystem20Census20Core20API200PageDataExchangeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200PageDataExchangeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200PageDataExchangeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200PageDataExchange(ctx context.Context, body PostGatewaySystem20Census20Core20API200PageDataExchangeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200PageDataExchangeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewaySystem20Census20Core20API200PageSoftwareProducts(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageSoftwareProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewaySystem20Census20Core20API200PageSoftwareProductsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewaySystem20Census20Core20API200PageSystemData(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageSystemDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewaySystem20Census20Core20API200PageSystemDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200PageSystemDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200PageSystemDataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200PageSystemData(ctx context.Context, body PostGatewaySystem20Census20Core20API200PageSystemDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200PageSystemDataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewaySystem20Census20Core20API200PageSystemMaintainer(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageSystemMaintainerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewaySystem20Census20Core20API200PageSystemMaintainerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewaySystem20Census20Core20API200PageSystemsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewaySystem20Census20Core20API200PageSystemsListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewaySystem20Census20Core20API200PersonWithBody(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PersonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewaySystem20Census20Core20API200PersonRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewaySystem20Census20Core20API200Person(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PersonParams, body GetGatewaySystem20Census20Core20API200PersonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewaySystem20Census20Core20API200PersonRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200SoftwareProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200SoftwareProductsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200SoftwareProducts(ctx context.Context, body PostGatewaySystem20Census20Core20API200SoftwareProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200SoftwareProductsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGatewaySystem20Census20Core20API200Status(ctx context.Context, params *DeleteGatewaySystem20Census20Core20API200StatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGatewaySystem20Census20Core20API200StatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewaySystem20Census20Core20API200Status(ctx context.Context, params *GetGatewaySystem20Census20Core20API200StatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewaySystem20Census20Core20API200StatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200StatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200StatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200Status(ctx context.Context, body PostGatewaySystem20Census20Core20API200StatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200StatusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewaySystem20Census20Core20API200SystemAiUse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200SystemAiUseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewaySystem20Census20Core20API200SystemAiUseRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200SystemAiUseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200SystemAiUseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200SystemAiUse(ctx context.Context, body PostGatewaySystem20Census20Core20API200SystemAiUseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200SystemAiUseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewaySystem20Census20Core20API200SystemComponents(ctx context.Context, params *GetGatewaySystem20Census20Core20API200SystemComponentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewaySystem20Census20Core20API200SystemComponentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200SystemComponentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200SystemComponentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200SystemComponents(ctx context.Context, body PostGatewaySystem20Census20Core20API200SystemComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200SystemComponentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200SystemMaintainerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200SystemMaintainerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200SystemMaintainer(ctx context.Context, body PostGatewaySystem20Census20Core20API200SystemMaintainerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200SystemMaintainerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewaySystem20Census20Core20API200SystemProperty(ctx context.Context, params *GetGatewaySystem20Census20Core20API200SystemPropertyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewaySystem20Census20Core20API200SystemPropertyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200SystemPropertyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200SystemPropertyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewaySystem20Census20Core20API200SystemProperty(ctx context.Context, body PostGatewaySystem20Census20Core20API200SystemPropertyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewaySystem20Census20Core20API200SystemPropertyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayTechnopedia10SoftwareExtended(ctx context.Context, params *GetGatewayTechnopedia10SoftwareExtendedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayTechnopedia10SoftwareExtendedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayTechnopedia10SoftwareExtendedId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayTechnopedia10SoftwareExtendedIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayIntakeSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayIntakeSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayIntakeSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayIntakeSchemaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayIntakeSchema(ctx context.Context, body PostGatewayIntakeSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayIntakeSchemaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGatewayIntakeSchemaId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGatewayIntakeSchemaIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayIntakeSchemaId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayIntakeSchemaIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGatewayIntakeSchemaIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGatewayIntakeSchemaIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGatewayIntakeSchemaId(ctx context.Context, id string, body PutGatewayIntakeSchemaIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGatewayIntakeSchemaIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGatewayKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGatewayKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGatewayKeys(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGatewayKeysRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGatewayKeysId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGatewayKeysIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSparxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSparxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSparx(ctx context.Context, body PostSparxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSparxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSparxId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSparxIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSparxId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSparxIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwaggerUi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwaggerUiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetGatewayCEDAR20Core20API200AuthorityToOperateRequest generates requests for GetGatewayCEDAR20Core20API200AuthorityToOperate
func NewGetGatewayCEDAR20Core20API200AuthorityToOperateRequest(server string, params *GetGatewayCEDAR20Core20API200AuthorityToOperateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/authorityToOperate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SystemId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "systemId", runtime.ParamLocationQuery, *params.SystemId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Uuid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uuid", runtime.ParamLocationQuery, *params.Uuid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FismaSystemAcronym != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fismaSystemAcronym", runtime.ParamLocationQuery, *params.FismaSystemAcronym); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TlcPhase != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tlcPhase", runtime.ParamLocationQuery, *params.TlcPhase); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContainsPersonallyIdentifiableInformation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "containsPersonallyIdentifiableInformation", runtime.ParamLocationQuery, *params.ContainsPersonallyIdentifiableInformation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsProtectedHealthInformation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isProtectedHealthInformation", runtime.ParamLocationQuery, *params.IsProtectedHealthInformation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DispositionDateAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dispositionDateAfter", runtime.ParamLocationQuery, *params.DispositionDateAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DispositionDateBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dispositionDateBefore", runtime.ParamLocationQuery, *params.DispositionDateBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayCEDAR20Core20API200BudgetRequest generates requests for GetGatewayCEDAR20Core20API200Budget
func NewGetGatewayCEDAR20Core20API200BudgetRequest(server string, params *GetGatewayCEDAR20Core20API200BudgetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/budget")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SystemId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "systemId", runtime.ParamLocationQuery, *params.SystemId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectTitle != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectTitle", runtime.ParamLocationQuery, *params.ProjectTitle); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "projectId", runtime.ParamLocationQuery, *params.ProjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnlyIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "onlyIds", runtime.ParamLocationQuery, *params.OnlyIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdsOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idsOnly", runtime.ParamLocationQuery, *params.IdsOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGatewayCEDAR20Core20API200BudgetRequest calls the generic PostGatewayCEDAR20Core20API200Budget builder with application/json body
func NewPostGatewayCEDAR20Core20API200BudgetRequest(server string, body PostGatewayCEDAR20Core20API200BudgetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewayCEDAR20Core20API200BudgetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewayCEDAR20Core20API200BudgetRequestWithBody generates requests for PostGatewayCEDAR20Core20API200Budget with any type of body
func NewPostGatewayCEDAR20Core20API200BudgetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/budget")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutGatewayCEDAR20Core20API200BudgetRequest calls the generic PutGatewayCEDAR20Core20API200Budget builder with application/json body
func NewPutGatewayCEDAR20Core20API200BudgetRequest(server string, body PutGatewayCEDAR20Core20API200BudgetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutGatewayCEDAR20Core20API200BudgetRequestWithBody(server, "application/json", bodyReader)
}

// NewPutGatewayCEDAR20Core20API200BudgetRequestWithBody generates requests for PutGatewayCEDAR20Core20API200Budget with any type of body
func NewPutGatewayCEDAR20Core20API200BudgetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/budget")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGatewayCEDAR20Core20API200BudgetListRequest generates requests for DeleteGatewayCEDAR20Core20API200BudgetList
func NewDeleteGatewayCEDAR20Core20API200BudgetListRequest(server string, params *DeleteGatewayCEDAR20Core20API200BudgetListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/budget/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayCEDAR20Core20API200BudgetSystemCostFindRequest generates requests for GetGatewayCEDAR20Core20API200BudgetSystemCostFind
func NewGetGatewayCEDAR20Core20API200BudgetSystemCostFindRequest(server string, params *GetGatewayCEDAR20Core20API200BudgetSystemCostFindParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/budgetSystemCostFind")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SystemId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "systemId", runtime.ParamLocationQuery, *params.SystemId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGatewayCEDAR20Core20API200ComponentRequest calls the generic PostGatewayCEDAR20Core20API200Component builder with application/json body
func NewPostGatewayCEDAR20Core20API200ComponentRequest(server string, body PostGatewayCEDAR20Core20API200ComponentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewayCEDAR20Core20API200ComponentRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewayCEDAR20Core20API200ComponentRequestWithBody generates requests for PostGatewayCEDAR20Core20API200Component with any type of body
func NewPostGatewayCEDAR20Core20API200ComponentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/component")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGatewayCEDAR20Core20API200ContractRequest calls the generic PostGatewayCEDAR20Core20API200Contract builder with application/json body
func NewPostGatewayCEDAR20Core20API200ContractRequest(server string, body PostGatewayCEDAR20Core20API200ContractJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewayCEDAR20Core20API200ContractRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewayCEDAR20Core20API200ContractRequestWithBody generates requests for PostGatewayCEDAR20Core20API200Contract with any type of body
func NewPostGatewayCEDAR20Core20API200ContractRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/contract")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutGatewayCEDAR20Core20API200ContractRequest calls the generic PutGatewayCEDAR20Core20API200Contract builder with application/json body
func NewPutGatewayCEDAR20Core20API200ContractRequest(server string, body PutGatewayCEDAR20Core20API200ContractJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutGatewayCEDAR20Core20API200ContractRequestWithBody(server, "application/json", bodyReader)
}

// NewPutGatewayCEDAR20Core20API200ContractRequestWithBody generates requests for PutGatewayCEDAR20Core20API200Contract with any type of body
func NewPutGatewayCEDAR20Core20API200ContractRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/contract")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGatewayCEDAR20Core20API200ContractListRequest generates requests for DeleteGatewayCEDAR20Core20API200ContractList
func NewDeleteGatewayCEDAR20Core20API200ContractListRequest(server string, params *DeleteGatewayCEDAR20Core20API200ContractListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/contract/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayCEDAR20Core20API200ContractListRequest generates requests for GetGatewayCEDAR20Core20API200ContractList
func NewGetGatewayCEDAR20Core20API200ContractListRequest(server string, params *GetGatewayCEDAR20Core20API200ContractListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/contract/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SystemId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "systemId", runtime.ParamLocationQuery, *params.SystemId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Keyword != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keyword", runtime.ParamLocationQuery, *params.Keyword); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.POPStartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "POPStartDate", runtime.ParamLocationQuery, *params.POPStartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.POPEndDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "POPEndDate", runtime.ParamLocationQuery, *params.POPEndDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContractName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contractName", runtime.ParamLocationQuery, *params.ContractName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayCEDAR20Core20API200CostTypeListRequest generates requests for GetGatewayCEDAR20Core20API200CostTypeList
func NewGetGatewayCEDAR20Core20API200CostTypeListRequest(server string, params *GetGatewayCEDAR20Core20API200CostTypeListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/costType/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application", runtime.ParamLocationQuery, params.Application); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteGatewayCEDAR20Core20API200DeploymentRequest generates requests for DeleteGatewayCEDAR20Core20API200Deployment
func NewDeleteGatewayCEDAR20Core20API200DeploymentRequest(server string, params *DeleteGatewayCEDAR20Core20API200DeploymentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/deployment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayCEDAR20Core20API200DeploymentRequest generates requests for GetGatewayCEDAR20Core20API200Deployment
func NewGetGatewayCEDAR20Core20API200DeploymentRequest(server string, params *GetGatewayCEDAR20Core20API200DeploymentParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/deployment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "systemId", runtime.ParamLocationQuery, params.SystemId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeploymentType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deploymentType", runtime.ParamLocationQuery, *params.DeploymentType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGatewayCEDAR20Core20API200DeploymentRequest calls the generic PostGatewayCEDAR20Core20API200Deployment builder with application/json body
func NewPostGatewayCEDAR20Core20API200DeploymentRequest(server string, body PostGatewayCEDAR20Core20API200DeploymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewayCEDAR20Core20API200DeploymentRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewayCEDAR20Core20API200DeploymentRequestWithBody generates requests for PostGatewayCEDAR20Core20API200Deployment with any type of body
func NewPostGatewayCEDAR20Core20API200DeploymentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/deployment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutGatewayCEDAR20Core20API200DeploymentRequest calls the generic PutGatewayCEDAR20Core20API200Deployment builder with application/json body
func NewPutGatewayCEDAR20Core20API200DeploymentRequest(server string, body PutGatewayCEDAR20Core20API200DeploymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutGatewayCEDAR20Core20API200DeploymentRequestWithBody(server, "application/json", bodyReader)
}

// NewPutGatewayCEDAR20Core20API200DeploymentRequestWithBody generates requests for PutGatewayCEDAR20Core20API200Deployment with any type of body
func NewPutGatewayCEDAR20Core20API200DeploymentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/deployment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGatewayCEDAR20Core20API200DomainModelListRequest generates requests for GetGatewayCEDAR20Core20API200DomainModelList
func NewGetGatewayCEDAR20Core20API200DomainModelListRequest(server string, params *GetGatewayCEDAR20Core20API200DomainModelListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/domainModel/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "model", runtime.ParamLocationQuery, params.Model); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayCEDAR20Core20API200DomainModelLevelRequest generates requests for GetGatewayCEDAR20Core20API200DomainModelLevel
func NewGetGatewayCEDAR20Core20API200DomainModelLevelRequest(server string, params *GetGatewayCEDAR20Core20API200DomainModelLevelParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/domainModelLevel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "model", runtime.ParamLocationQuery, params.Model); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayCEDAR20Core20API200DomainModelNameRequest generates requests for GetGatewayCEDAR20Core20API200DomainModelName
func NewGetGatewayCEDAR20Core20API200DomainModelNameRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/domainModelName")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayCEDAR20Core20API200EnumerationRequest generates requests for GetGatewayCEDAR20Core20API200Enumeration
func NewGetGatewayCEDAR20Core20API200EnumerationRequest(server string, params *GetGatewayCEDAR20Core20API200EnumerationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/enumeration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application", runtime.ParamLocationQuery, params.Application); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "names", runtime.ParamLocationQuery, params.Names); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayCEDAR20Core20API200ExchangeRequest generates requests for GetGatewayCEDAR20Core20API200Exchange
func NewGetGatewayCEDAR20Core20API200ExchangeRequest(server string, params *GetGatewayCEDAR20Core20API200ExchangeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/exchange")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "systemId", runtime.ParamLocationQuery, params.SystemId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "direction", runtime.ParamLocationQuery, params.Direction); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutGatewayCEDAR20Core20API200ExchangeRequest calls the generic PutGatewayCEDAR20Core20API200Exchange builder with application/json body
func NewPutGatewayCEDAR20Core20API200ExchangeRequest(server string, body PutGatewayCEDAR20Core20API200ExchangeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutGatewayCEDAR20Core20API200ExchangeRequestWithBody(server, "application/json", bodyReader)
}

// NewPutGatewayCEDAR20Core20API200ExchangeRequestWithBody generates requests for PutGatewayCEDAR20Core20API200Exchange with any type of body
func NewPutGatewayCEDAR20Core20API200ExchangeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/exchange")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGatewayCEDAR20Core20API200ExchangeIdRequest generates requests for GetGatewayCEDAR20Core20API200ExchangeId
func NewGetGatewayCEDAR20Core20API200ExchangeIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/exchange/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayCEDAR20Core20API200OrganizationRequest generates requests for GetGatewayCEDAR20Core20API200Organization
func NewGetGatewayCEDAR20Core20API200OrganizationRequest(server string, params *GetGatewayCEDAR20Core20API200OrganizationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/organization")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Acronym != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "acronym", runtime.ParamLocationQuery, *params.Acronym); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayCEDAR20Core20API200RoleRequest generates requests for GetGatewayCEDAR20Core20API200Role
func NewGetGatewayCEDAR20Core20API200RoleRequest(server string, params *GetGatewayCEDAR20Core20API200RoleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/role")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application", runtime.ParamLocationQuery, params.Application); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.RoleId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "roleId", runtime.ParamLocationQuery, *params.RoleId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ObjectId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "objectId", runtime.ParamLocationQuery, *params.ObjectId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RoleTypeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "roleTypeId", runtime.ParamLocationQuery, *params.RoleTypeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGatewayCEDAR20Core20API200RoleRequest calls the generic PostGatewayCEDAR20Core20API200Role builder with application/json body
func NewPostGatewayCEDAR20Core20API200RoleRequest(server string, body PostGatewayCEDAR20Core20API200RoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewayCEDAR20Core20API200RoleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewayCEDAR20Core20API200RoleRequestWithBody generates requests for PostGatewayCEDAR20Core20API200Role with any type of body
func NewPostGatewayCEDAR20Core20API200RoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/role")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGatewayCEDAR20Core20API200RoleListRequest generates requests for DeleteGatewayCEDAR20Core20API200RoleList
func NewDeleteGatewayCEDAR20Core20API200RoleListRequest(server string, params *DeleteGatewayCEDAR20Core20API200RoleListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/role/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application", runtime.ParamLocationQuery, params.Application); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayCEDAR20Core20API200RoleTypeApplicationRequest generates requests for GetGatewayCEDAR20Core20API200RoleTypeApplication
func NewGetGatewayCEDAR20Core20API200RoleTypeApplicationRequest(server string, application GetGatewayCEDAR20Core20API200RoleTypeApplicationParamsApplication) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/role/type/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayCEDAR20Core20API200SoftwareProductsRequest generates requests for GetGatewayCEDAR20Core20API200SoftwareProducts
func NewGetGatewayCEDAR20Core20API200SoftwareProductsRequest(server string, params *GetGatewayCEDAR20Core20API200SoftwareProductsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/softwareProducts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGatewayCEDAR20Core20API200SoftwareProductsRequest calls the generic PostGatewayCEDAR20Core20API200SoftwareProducts builder with application/json body
func NewPostGatewayCEDAR20Core20API200SoftwareProductsRequest(server string, body PostGatewayCEDAR20Core20API200SoftwareProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewayCEDAR20Core20API200SoftwareProductsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewayCEDAR20Core20API200SoftwareProductsRequestWithBody generates requests for PostGatewayCEDAR20Core20API200SoftwareProducts with any type of body
func NewPostGatewayCEDAR20Core20API200SoftwareProductsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/softwareProducts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGatewayCEDAR20Core20API200StakeholderRequest generates requests for GetGatewayCEDAR20Core20API200Stakeholder
func NewGetGatewayCEDAR20Core20API200StakeholderRequest(server string, params *GetGatewayCEDAR20Core20API200StakeholderParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/stakeholder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdsOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idsOnly", runtime.ParamLocationQuery, *params.IdsOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteGatewayCEDAR20Core20API200SupportContactRequest generates requests for DeleteGatewayCEDAR20Core20API200SupportContact
func NewDeleteGatewayCEDAR20Core20API200SupportContactRequest(server string, params *DeleteGatewayCEDAR20Core20API200SupportContactParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/supportContact")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayCEDAR20Core20API200SupportContactRequest generates requests for GetGatewayCEDAR20Core20API200SupportContact
func NewGetGatewayCEDAR20Core20API200SupportContactRequest(server string, params *GetGatewayCEDAR20Core20API200SupportContactParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/supportContact")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application", runtime.ParamLocationQuery, params.Application); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGatewayCEDAR20Core20API200SupportContactRequest calls the generic PostGatewayCEDAR20Core20API200SupportContact builder with application/json body
func NewPostGatewayCEDAR20Core20API200SupportContactRequest(server string, body PostGatewayCEDAR20Core20API200SupportContactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewayCEDAR20Core20API200SupportContactRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewayCEDAR20Core20API200SupportContactRequestWithBody generates requests for PostGatewayCEDAR20Core20API200SupportContact with any type of body
func NewPostGatewayCEDAR20Core20API200SupportContactRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/supportContact")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGatewayCEDAR20Core20API200SystemDetailIdRequest generates requests for GetGatewayCEDAR20Core20API200SystemDetailId
func NewGetGatewayCEDAR20Core20API200SystemDetailIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/system/detail/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayCEDAR20Core20API200SystemSummaryRequest generates requests for GetGatewayCEDAR20Core20API200SystemSummary
func NewGetGatewayCEDAR20Core20API200SystemSummaryRequest(server string, params *GetGatewayCEDAR20Core20API200SystemSummaryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/system/summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeInSurvey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeInSurvey", runtime.ParamLocationQuery, *params.IncludeInSurvey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdsOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idsOnly", runtime.ParamLocationQuery, *params.IdsOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BelongsTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "belongsTo", runtime.ParamLocationQuery, *params.BelongsTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userName", runtime.ParamLocationQuery, *params.UserName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RoleType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "roleType", runtime.ParamLocationQuery, *params.RoleType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayCEDAR20Core20API200SystemSummaryIdRequest generates requests for GetGatewayCEDAR20Core20API200SystemSummaryId
func NewGetGatewayCEDAR20Core20API200SystemSummaryIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/system/summary/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayCEDAR20Core20API200ThreatRequest generates requests for GetGatewayCEDAR20Core20API200Threat
func NewGetGatewayCEDAR20Core20API200ThreatRequest(server string, params *GetGatewayCEDAR20Core20API200ThreatParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/threat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, params.Ids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayCEDAR20Core20API200UrlIdRequest generates requests for GetGatewayCEDAR20Core20API200UrlId
func NewGetGatewayCEDAR20Core20API200UrlIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/url/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayCEDAR20Core20API200UserRequest generates requests for GetGatewayCEDAR20Core20API200User
func NewGetGatewayCEDAR20Core20API200UserRequest(server string, params *GetGatewayCEDAR20Core20API200UserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "application", runtime.ParamLocationQuery, params.Application); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userName", runtime.ParamLocationQuery, *params.UserName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FirstName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "firstName", runtime.ParamLocationQuery, *params.FirstName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastName", runtime.ParamLocationQuery, *params.LastName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Phone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone", runtime.ParamLocationQuery, *params.Phone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGatewayCEDAR20Core20API200UserRequest calls the generic PostGatewayCEDAR20Core20API200User builder with application/json body
func NewPostGatewayCEDAR20Core20API200UserRequest(server string, body PostGatewayCEDAR20Core20API200UserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewayCEDAR20Core20API200UserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewayCEDAR20Core20API200UserRequestWithBody generates requests for PostGatewayCEDAR20Core20API200User with any type of body
func NewPostGatewayCEDAR20Core20API200UserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/2.0.0/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGatewayCEDAR20Core20APIExchangeRequest calls the generic PostGatewayCEDAR20Core20APIExchange builder with application/json body
func NewPostGatewayCEDAR20Core20APIExchangeRequest(server string, body PostGatewayCEDAR20Core20APIExchangeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewayCEDAR20Core20APIExchangeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewayCEDAR20Core20APIExchangeRequestWithBody generates requests for PostGatewayCEDAR20Core20APIExchange with any type of body
func NewPostGatewayCEDAR20Core20APIExchangeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDAR%20Core%20API/exchange")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGatewayCEDARIntake10ClientIdRequest generates requests for GetGatewayCEDARIntake10ClientId
func NewGetGatewayCEDARIntake10ClientIdRequest(server string, id string, params *GetGatewayCEDARIntake10ClientIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDARIntake/1.0/client/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientStatus", runtime.ParamLocationQuery, params.ClientStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "CLIENT_NAME", runtime.ParamLocationHeader, params.CLIENTNAME)
		if err != nil {
			return nil, err
		}

		req.Header.Set("CLIENT_NAME", headerParam0)

	}

	return req, nil
}

// NewGetGatewayCEDARIntake10HealthCheckRequest generates requests for GetGatewayCEDARIntake10HealthCheck
func NewGetGatewayCEDARIntake10HealthCheckRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDARIntake/1.0/healthCheck")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGatewayCEDARIntake10IntakeRequest calls the generic PostGatewayCEDARIntake10Intake builder with application/json body
func NewPostGatewayCEDARIntake10IntakeRequest(server string, params *PostGatewayCEDARIntake10IntakeParams, body PostGatewayCEDARIntake10IntakeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewayCEDARIntake10IntakeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostGatewayCEDARIntake10IntakeRequestWithBody generates requests for PostGatewayCEDARIntake10Intake with any type of body
func NewPostGatewayCEDARIntake10IntakeRequestWithBody(server string, params *PostGatewayCEDARIntake10IntakeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDARIntake/1.0/intake")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ValidatePayload != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "validatePayload", runtime.ParamLocationQuery, *params.ValidatePayload); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "CLIENT_NAME", runtime.ParamLocationHeader, params.CLIENTNAME)
		if err != nil {
			return nil, err
		}

		req.Header.Set("CLIENT_NAME", headerParam0)

	}

	return req, nil
}

// NewGetGatewayCEDARIntake10IntakeCedarIdRequest generates requests for GetGatewayCEDARIntake10IntakeCedarId
func NewGetGatewayCEDARIntake10IntakeCedarIdRequest(server string, id string, params *GetGatewayCEDARIntake10IntakeCedarIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDARIntake/1.0/intake/cedar/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "CLIENT_NAME", runtime.ParamLocationHeader, params.CLIENTNAME)
		if err != nil {
			return nil, err
		}

		req.Header.Set("CLIENT_NAME", headerParam0)

	}

	return req, nil
}

// NewGetGatewayCEDARIntake10IntakeStatusRequest generates requests for GetGatewayCEDARIntake10IntakeStatus
func NewGetGatewayCEDARIntake10IntakeStatusRequest(server string, params *GetGatewayCEDARIntake10IntakeStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDARIntake/1.0/intake/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cedarStatus", runtime.ParamLocationQuery, params.CedarStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ClientCreatedStartDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientCreatedStartDate", runtime.ParamLocationQuery, *params.ClientCreatedStartDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayCEDARIntake10StatusCedarIdRequest generates requests for GetGatewayCEDARIntake10StatusCedarId
func NewGetGatewayCEDARIntake10StatusCedarIdRequest(server string, id string, params *GetGatewayCEDARIntake10StatusCedarIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDARIntake/1.0/status/cedar/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "CLIENT_NAME", runtime.ParamLocationHeader, params.CLIENTNAME)
		if err != nil {
			return nil, err
		}

		req.Header.Set("CLIENT_NAME", headerParam0)

	}

	return req, nil
}

// NewGetGatewayCEDARIntake10StatusClientIdRequest generates requests for GetGatewayCEDARIntake10StatusClientId
func NewGetGatewayCEDARIntake10StatusClientIdRequest(server string, id string, params *GetGatewayCEDARIntake10StatusClientIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/CEDARIntake/1.0/status/client/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientStatus", runtime.ParamLocationQuery, params.ClientStatus); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "CLIENT_NAME", runtime.ParamLocationHeader, params.CLIENTNAME)
		if err != nil {
			return nil, err
		}

		req.Header.Set("CLIENT_NAME", headerParam0)

	}

	return req, nil
}

// NewPostGatewayLDAP10AuthenticateRequest calls the generic PostGatewayLDAP10Authenticate builder with application/json body
func NewPostGatewayLDAP10AuthenticateRequest(server string, body PostGatewayLDAP10AuthenticateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewayLDAP10AuthenticateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewayLDAP10AuthenticateRequestWithBody generates requests for PostGatewayLDAP10Authenticate with any type of body
func NewPostGatewayLDAP10AuthenticateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/LDAP/1.0/authenticate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGatewayLDAP10PersonRequest generates requests for GetGatewayLDAP10Person
func NewGetGatewayLDAP10PersonRequest(server string, params *GetGatewayLDAP10PersonParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/LDAP/1.0/person")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FirstName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first_name", runtime.ParamLocationQuery, *params.FirstName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_name", runtime.ParamLocationQuery, *params.LastName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CommonName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "commonName", runtime.ParamLocationQuery, *params.CommonName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Telephone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "telephone", runtime.ParamLocationQuery, *params.Telephone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayLDAP10PersonIdRequest generates requests for GetGatewayLDAP10PersonId
func NewGetGatewayLDAP10PersonIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/LDAP/1.0/person/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewaySystem20Census20Core20API200AdminReviewerRequest generates requests for GetGatewaySystem20Census20Core20API200AdminReviewer
func NewGetGatewaySystem20Census20Core20API200AdminReviewerRequest(server string, params *GetGatewaySystem20Census20Core20API200AdminReviewerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/admin/reviewer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteGatewaySystem20Census20Core20API200AdminReviewerRequest calls the generic DeleteGatewaySystem20Census20Core20API200AdminReviewer builder with application/json body
func NewDeleteGatewaySystem20Census20Core20API200AdminReviewerRequest(server string, body DeleteGatewaySystem20Census20Core20API200AdminReviewerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteGatewaySystem20Census20Core20API200AdminReviewerRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteGatewaySystem20Census20Core20API200AdminReviewerRequestWithBody generates requests for DeleteGatewaySystem20Census20Core20API200AdminReviewer with any type of body
func NewDeleteGatewaySystem20Census20Core20API200AdminReviewerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/adminReviewer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGatewaySystem20Census20Core20API200AdminReviewerRequest calls the generic PostGatewaySystem20Census20Core20API200AdminReviewer builder with application/json body
func NewPostGatewaySystem20Census20Core20API200AdminReviewerRequest(server string, body PostGatewaySystem20Census20Core20API200AdminReviewerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewaySystem20Census20Core20API200AdminReviewerRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewaySystem20Census20Core20API200AdminReviewerRequestWithBody generates requests for PostGatewaySystem20Census20Core20API200AdminReviewer with any type of body
func NewPostGatewaySystem20Census20Core20API200AdminReviewerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/adminReviewer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGatewaySystem20Census20Core20API200BudgetAndContractsRequest generates requests for GetGatewaySystem20Census20Core20API200BudgetAndContracts
func NewGetGatewaySystem20Census20Core20API200BudgetAndContractsRequest(server string, params *GetGatewaySystem20Census20Core20API200BudgetAndContractsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/budgetAndContracts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "systemId", runtime.ParamLocationQuery, params.SystemId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGatewaySystem20Census20Core20API200BudgetAndContractsRequest calls the generic PostGatewaySystem20Census20Core20API200BudgetAndContracts builder with application/json body
func NewPostGatewaySystem20Census20Core20API200BudgetAndContractsRequest(server string, body PostGatewaySystem20Census20Core20API200BudgetAndContractsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewaySystem20Census20Core20API200BudgetAndContractsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewaySystem20Census20Core20API200BudgetAndContractsRequestWithBody generates requests for PostGatewaySystem20Census20Core20API200BudgetAndContracts with any type of body
func NewPostGatewaySystem20Census20Core20API200BudgetAndContractsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/budgetAndContracts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGatewaySystem20Census20Core20API200BusinessOwnerRequest calls the generic PostGatewaySystem20Census20Core20API200BusinessOwner builder with application/json body
func NewPostGatewaySystem20Census20Core20API200BusinessOwnerRequest(server string, body PostGatewaySystem20Census20Core20API200BusinessOwnerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewaySystem20Census20Core20API200BusinessOwnerRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewaySystem20Census20Core20API200BusinessOwnerRequestWithBody generates requests for PostGatewaySystem20Census20Core20API200BusinessOwner with any type of body
func NewPostGatewaySystem20Census20Core20API200BusinessOwnerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/businessOwner")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGatewaySystem20Census20Core20API200DataExchangeNotesRequest generates requests for DeleteGatewaySystem20Census20Core20API200DataExchangeNotes
func NewDeleteGatewaySystem20Census20Core20API200DataExchangeNotesRequest(server string, params *DeleteGatewaySystem20Census20Core20API200DataExchangeNotesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/dataExchange/notes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteGatewaySystem20Census20Core20API200DataExchangeStatusRequest calls the generic DeleteGatewaySystem20Census20Core20API200DataExchangeStatus builder with application/json body
func NewDeleteGatewaySystem20Census20Core20API200DataExchangeStatusRequest(server string, body DeleteGatewaySystem20Census20Core20API200DataExchangeStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteGatewaySystem20Census20Core20API200DataExchangeStatusRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteGatewaySystem20Census20Core20API200DataExchangeStatusRequestWithBody generates requests for DeleteGatewaySystem20Census20Core20API200DataExchangeStatus with any type of body
func NewDeleteGatewaySystem20Census20Core20API200DataExchangeStatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/dataExchange/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGatewaySystem20Census20Core20API200DataExchangeStatusRequest generates requests for GetGatewaySystem20Census20Core20API200DataExchangeStatus
func NewGetGatewaySystem20Census20Core20API200DataExchangeStatusRequest(server string, params *GetGatewaySystem20Census20Core20API200DataExchangeStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/dataExchange/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "systemId", runtime.ParamLocationQuery, params.SystemId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Direction != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "direction", runtime.ParamLocationQuery, *params.Direction); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewaySystem20Census20Core20API200DataExchangeNotesRequest generates requests for GetGatewaySystem20Census20Core20API200DataExchangeNotes
func NewGetGatewaySystem20Census20Core20API200DataExchangeNotesRequest(server string, params *GetGatewaySystem20Census20Core20API200DataExchangeNotesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/dataExchangeNotes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exchangeId", runtime.ParamLocationQuery, params.ExchangeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGatewaySystem20Census20Core20API200DataExchangeNotesRequest calls the generic PostGatewaySystem20Census20Core20API200DataExchangeNotes builder with application/json body
func NewPostGatewaySystem20Census20Core20API200DataExchangeNotesRequest(server string, body PostGatewaySystem20Census20Core20API200DataExchangeNotesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewaySystem20Census20Core20API200DataExchangeNotesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewaySystem20Census20Core20API200DataExchangeNotesRequestWithBody generates requests for PostGatewaySystem20Census20Core20API200DataExchangeNotes with any type of body
func NewPostGatewaySystem20Census20Core20API200DataExchangeNotesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/dataExchangeNotes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGatewaySystem20Census20Core20API200DrmRequest generates requests for GetGatewaySystem20Census20Core20API200Drm
func NewGetGatewaySystem20Census20Core20API200DrmRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/drm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGatewaySystem20Census20Core20API200NoteRequest calls the generic PostGatewaySystem20Census20Core20API200Note builder with application/json body
func NewPostGatewaySystem20Census20Core20API200NoteRequest(server string, body PostGatewaySystem20Census20Core20API200NoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewaySystem20Census20Core20API200NoteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewaySystem20Census20Core20API200NoteRequestWithBody generates requests for PostGatewaySystem20Census20Core20API200Note with any type of body
func NewPostGatewaySystem20Census20Core20API200NoteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/note")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutGatewaySystem20Census20Core20API200NoteRequest calls the generic PutGatewaySystem20Census20Core20API200Note builder with application/json body
func NewPutGatewaySystem20Census20Core20API200NoteRequest(server string, params *PutGatewaySystem20Census20Core20API200NoteParams, body PutGatewaySystem20Census20Core20API200NoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutGatewaySystem20Census20Core20API200NoteRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPutGatewaySystem20Census20Core20API200NoteRequestWithBody generates requests for PutGatewaySystem20Census20Core20API200Note with any type of body
func NewPutGatewaySystem20Census20Core20API200NoteRequestWithBody(server string, params *PutGatewaySystem20Census20Core20API200NoteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/note")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGatewaySystem20Census20Core20API200NoteListRequest generates requests for DeleteGatewaySystem20Census20Core20API200NoteList
func NewDeleteGatewaySystem20Census20Core20API200NoteListRequest(server string, params *DeleteGatewaySystem20Census20Core20API200NoteListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/note/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewaySystem20Census20Core20API200NoteListRequest generates requests for GetGatewaySystem20Census20Core20API200NoteList
func NewGetGatewaySystem20Census20Core20API200NoteListRequest(server string, params *GetGatewaySystem20Census20Core20API200NoteListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/note/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageName", runtime.ParamLocationQuery, params.PageName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewaySystem20Census20Core20API200PageUrlsRequest generates requests for GetGatewaySystem20Census20Core20API200PageUrls
func NewGetGatewaySystem20Census20Core20API200PageUrlsRequest(server string, params *GetGatewaySystem20Census20Core20API200PageUrlsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/page/Urls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "systemId", runtime.ParamLocationQuery, params.SystemId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGatewaySystem20Census20Core20API200PageUrlsRequest calls the generic PostGatewaySystem20Census20Core20API200PageUrls builder with application/json body
func NewPostGatewaySystem20Census20Core20API200PageUrlsRequest(server string, body PostGatewaySystem20Census20Core20API200PageUrlsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewaySystem20Census20Core20API200PageUrlsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewaySystem20Census20Core20API200PageUrlsRequestWithBody generates requests for PostGatewaySystem20Census20Core20API200PageUrls with any type of body
func NewPostGatewaySystem20Census20Core20API200PageUrlsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/page/Urls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGatewaySystem20Census20Core20API200PageBusinessOwnerRequest generates requests for GetGatewaySystem20Census20Core20API200PageBusinessOwner
func NewGetGatewaySystem20Census20Core20API200PageBusinessOwnerRequest(server string, params *GetGatewaySystem20Census20Core20API200PageBusinessOwnerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/page/businessOwner")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewaySystem20Census20Core20API200PageDataCentersRequest generates requests for GetGatewaySystem20Census20Core20API200PageDataCenters
func NewGetGatewaySystem20Census20Core20API200PageDataCentersRequest(server string, params *GetGatewaySystem20Census20Core20API200PageDataCentersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/page/dataCenters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "systemId", runtime.ParamLocationQuery, params.SystemId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGatewaySystem20Census20Core20API200PageDataCentersRequest calls the generic PostGatewaySystem20Census20Core20API200PageDataCenters builder with application/json body
func NewPostGatewaySystem20Census20Core20API200PageDataCentersRequest(server string, body PostGatewaySystem20Census20Core20API200PageDataCentersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewaySystem20Census20Core20API200PageDataCentersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewaySystem20Census20Core20API200PageDataCentersRequestWithBody generates requests for PostGatewaySystem20Census20Core20API200PageDataCenters with any type of body
func NewPostGatewaySystem20Census20Core20API200PageDataCentersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/page/dataCenters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGatewaySystem20Census20Core20API200PageDataExchangeRequest calls the generic GetGatewaySystem20Census20Core20API200PageDataExchange builder with application/json body
func NewGetGatewaySystem20Census20Core20API200PageDataExchangeRequest(server string, params *GetGatewaySystem20Census20Core20API200PageDataExchangeParams, body GetGatewaySystem20Census20Core20API200PageDataExchangeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetGatewaySystem20Census20Core20API200PageDataExchangeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetGatewaySystem20Census20Core20API200PageDataExchangeRequestWithBody generates requests for GetGatewaySystem20Census20Core20API200PageDataExchange with any type of body
func NewGetGatewaySystem20Census20Core20API200PageDataExchangeRequestWithBody(server string, params *GetGatewaySystem20Census20Core20API200PageDataExchangeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/page/dataExchange")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "systemId", runtime.ParamLocationQuery, params.SystemId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGatewaySystem20Census20Core20API200PageDataExchangeRequest calls the generic PostGatewaySystem20Census20Core20API200PageDataExchange builder with application/json body
func NewPostGatewaySystem20Census20Core20API200PageDataExchangeRequest(server string, body PostGatewaySystem20Census20Core20API200PageDataExchangeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewaySystem20Census20Core20API200PageDataExchangeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewaySystem20Census20Core20API200PageDataExchangeRequestWithBody generates requests for PostGatewaySystem20Census20Core20API200PageDataExchange with any type of body
func NewPostGatewaySystem20Census20Core20API200PageDataExchangeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/page/dataExchange")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGatewaySystem20Census20Core20API200PageSoftwareProductsRequest generates requests for GetGatewaySystem20Census20Core20API200PageSoftwareProducts
func NewGetGatewaySystem20Census20Core20API200PageSoftwareProductsRequest(server string, params *GetGatewaySystem20Census20Core20API200PageSoftwareProductsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/page/softwareProducts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewaySystem20Census20Core20API200PageSystemDataRequest generates requests for GetGatewaySystem20Census20Core20API200PageSystemData
func NewGetGatewaySystem20Census20Core20API200PageSystemDataRequest(server string, params *GetGatewaySystem20Census20Core20API200PageSystemDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/page/systemData")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SystemGUID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "systemGUID", runtime.ParamLocationQuery, *params.SystemGUID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SystemId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "systemId", runtime.ParamLocationQuery, *params.SystemId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGatewaySystem20Census20Core20API200PageSystemDataRequest calls the generic PostGatewaySystem20Census20Core20API200PageSystemData builder with application/json body
func NewPostGatewaySystem20Census20Core20API200PageSystemDataRequest(server string, body PostGatewaySystem20Census20Core20API200PageSystemDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewaySystem20Census20Core20API200PageSystemDataRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewaySystem20Census20Core20API200PageSystemDataRequestWithBody generates requests for PostGatewaySystem20Census20Core20API200PageSystemData with any type of body
func NewPostGatewaySystem20Census20Core20API200PageSystemDataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/page/systemData")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGatewaySystem20Census20Core20API200PageSystemMaintainerRequest generates requests for GetGatewaySystem20Census20Core20API200PageSystemMaintainer
func NewGetGatewaySystem20Census20Core20API200PageSystemMaintainerRequest(server string, params *GetGatewaySystem20Census20Core20API200PageSystemMaintainerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/page/systemMaintainer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewaySystem20Census20Core20API200PageSystemsListRequest generates requests for GetGatewaySystem20Census20Core20API200PageSystemsList
func NewGetGatewaySystem20Census20Core20API200PageSystemsListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/page/systemsList")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewaySystem20Census20Core20API200PersonRequest calls the generic GetGatewaySystem20Census20Core20API200Person builder with application/json body
func NewGetGatewaySystem20Census20Core20API200PersonRequest(server string, params *GetGatewaySystem20Census20Core20API200PersonParams, body GetGatewaySystem20Census20Core20API200PersonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetGatewaySystem20Census20Core20API200PersonRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetGatewaySystem20Census20Core20API200PersonRequestWithBody generates requests for GetGatewaySystem20Census20Core20API200Person with any type of body
func NewGetGatewaySystem20Census20Core20API200PersonRequestWithBody(server string, params *GetGatewaySystem20Census20Core20API200PersonParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/person")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userName", runtime.ParamLocationQuery, *params.UserName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FirstName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "firstName", runtime.ParamLocationQuery, *params.FirstName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastName", runtime.ParamLocationQuery, *params.LastName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Phone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phone", runtime.ParamLocationQuery, *params.Phone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGatewaySystem20Census20Core20API200SoftwareProductsRequest calls the generic PostGatewaySystem20Census20Core20API200SoftwareProducts builder with application/json body
func NewPostGatewaySystem20Census20Core20API200SoftwareProductsRequest(server string, body PostGatewaySystem20Census20Core20API200SoftwareProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewaySystem20Census20Core20API200SoftwareProductsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewaySystem20Census20Core20API200SoftwareProductsRequestWithBody generates requests for PostGatewaySystem20Census20Core20API200SoftwareProducts with any type of body
func NewPostGatewaySystem20Census20Core20API200SoftwareProductsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/softwareProducts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGatewaySystem20Census20Core20API200StatusRequest generates requests for DeleteGatewaySystem20Census20Core20API200Status
func NewDeleteGatewaySystem20Census20Core20API200StatusRequest(server string, params *DeleteGatewaySystem20Census20Core20API200StatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Soft != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "soft", runtime.ParamLocationQuery, *params.Soft); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewaySystem20Census20Core20API200StatusRequest generates requests for GetGatewaySystem20Census20Core20API200Status
func NewGetGatewaySystem20Census20Core20API200StatusRequest(server string, params *GetGatewaySystem20Census20Core20API200StatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageName", runtime.ParamLocationQuery, *params.PageName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Summarize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "summarize", runtime.ParamLocationQuery, *params.Summarize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGatewaySystem20Census20Core20API200StatusRequest calls the generic PostGatewaySystem20Census20Core20API200Status builder with application/json body
func NewPostGatewaySystem20Census20Core20API200StatusRequest(server string, body PostGatewaySystem20Census20Core20API200StatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewaySystem20Census20Core20API200StatusRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewaySystem20Census20Core20API200StatusRequestWithBody generates requests for PostGatewaySystem20Census20Core20API200Status with any type of body
func NewPostGatewaySystem20Census20Core20API200StatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGatewaySystem20Census20Core20API200SystemAiUseRequest generates requests for GetGatewaySystem20Census20Core20API200SystemAiUse
func NewGetGatewaySystem20Census20Core20API200SystemAiUseRequest(server string, params *GetGatewaySystem20Census20Core20API200SystemAiUseParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/system/ai-use")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGatewaySystem20Census20Core20API200SystemAiUseRequest calls the generic PostGatewaySystem20Census20Core20API200SystemAiUse builder with application/json body
func NewPostGatewaySystem20Census20Core20API200SystemAiUseRequest(server string, body PostGatewaySystem20Census20Core20API200SystemAiUseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewaySystem20Census20Core20API200SystemAiUseRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewaySystem20Census20Core20API200SystemAiUseRequestWithBody generates requests for PostGatewaySystem20Census20Core20API200SystemAiUse with any type of body
func NewPostGatewaySystem20Census20Core20API200SystemAiUseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/system/ai-use")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGatewaySystem20Census20Core20API200SystemComponentsRequest generates requests for GetGatewaySystem20Census20Core20API200SystemComponents
func NewGetGatewaySystem20Census20Core20API200SystemComponentsRequest(server string, params *GetGatewaySystem20Census20Core20API200SystemComponentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/systemComponents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "systemId", runtime.ParamLocationQuery, params.SystemId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGatewaySystem20Census20Core20API200SystemComponentsRequest calls the generic PostGatewaySystem20Census20Core20API200SystemComponents builder with application/json body
func NewPostGatewaySystem20Census20Core20API200SystemComponentsRequest(server string, body PostGatewaySystem20Census20Core20API200SystemComponentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewaySystem20Census20Core20API200SystemComponentsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewaySystem20Census20Core20API200SystemComponentsRequestWithBody generates requests for PostGatewaySystem20Census20Core20API200SystemComponents with any type of body
func NewPostGatewaySystem20Census20Core20API200SystemComponentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/systemComponents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGatewaySystem20Census20Core20API200SystemMaintainerRequest calls the generic PostGatewaySystem20Census20Core20API200SystemMaintainer builder with application/json body
func NewPostGatewaySystem20Census20Core20API200SystemMaintainerRequest(server string, body PostGatewaySystem20Census20Core20API200SystemMaintainerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewaySystem20Census20Core20API200SystemMaintainerRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewaySystem20Census20Core20API200SystemMaintainerRequestWithBody generates requests for PostGatewaySystem20Census20Core20API200SystemMaintainer with any type of body
func NewPostGatewaySystem20Census20Core20API200SystemMaintainerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/systemMaintainer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGatewaySystem20Census20Core20API200SystemPropertyRequest generates requests for GetGatewaySystem20Census20Core20API200SystemProperty
func NewGetGatewaySystem20Census20Core20API200SystemPropertyRequest(server string, params *GetGatewaySystem20Census20Core20API200SystemPropertyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/systemProperty")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "systemId", runtime.ParamLocationQuery, params.SystemId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "propertyName", runtime.ParamLocationQuery, params.PropertyName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGatewaySystem20Census20Core20API200SystemPropertyRequest calls the generic PostGatewaySystem20Census20Core20API200SystemProperty builder with application/json body
func NewPostGatewaySystem20Census20Core20API200SystemPropertyRequest(server string, body PostGatewaySystem20Census20Core20API200SystemPropertyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewaySystem20Census20Core20API200SystemPropertyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewaySystem20Census20Core20API200SystemPropertyRequestWithBody generates requests for PostGatewaySystem20Census20Core20API200SystemProperty with any type of body
func NewPostGatewaySystem20Census20Core20API200SystemPropertyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/System%20Census%20Core%20API/2.0.0/systemProperty")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGatewayTechnopedia10SoftwareExtendedRequest generates requests for GetGatewayTechnopedia10SoftwareExtended
func NewGetGatewayTechnopedia10SoftwareExtendedRequest(server string, params *GetGatewayTechnopedia10SoftwareExtendedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/Technopedia/1.0/softwareExtended")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ProductName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_name", runtime.ParamLocationQuery, *params.ProductName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductNameOperation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product_name_operation", runtime.ParamLocationQuery, *params.ProductNameOperation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Vendor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vendor", runtime.ParamLocationQuery, *params.Vendor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VendorOperation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "vendor_operation", runtime.ParamLocationQuery, *params.VendorOperation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Version != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version", runtime.ParamLocationQuery, *params.Version); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VersionOperation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "version_operation", runtime.ParamLocationQuery, *params.VersionOperation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Edition != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "edition", runtime.ParamLocationQuery, *params.Edition); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EditionOperation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "edition_operation", runtime.ParamLocationQuery, *params.EditionOperation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "summary", runtime.ParamLocationQuery, params.Summary); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "update", runtime.ParamLocationQuery, params.Update); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FetchLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fetch_limit", runtime.ParamLocationQuery, *params.FetchLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayTechnopedia10SoftwareExtendedIdRequest generates requests for GetGatewayTechnopedia10SoftwareExtendedId
func NewGetGatewayTechnopedia10SoftwareExtendedIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/Technopedia/1.0/softwareExtended/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayIntakeSchemaRequest generates requests for GetGatewayIntakeSchema
func NewGetGatewayIntakeSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/intake-schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGatewayIntakeSchemaRequest calls the generic PostGatewayIntakeSchema builder with application/json body
func NewPostGatewayIntakeSchemaRequest(server string, body PostGatewayIntakeSchemaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGatewayIntakeSchemaRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGatewayIntakeSchemaRequestWithBody generates requests for PostGatewayIntakeSchema with any type of body
func NewPostGatewayIntakeSchemaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/intake-schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGatewayIntakeSchemaIdRequest generates requests for DeleteGatewayIntakeSchemaId
func NewDeleteGatewayIntakeSchemaIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/intake-schema/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGatewayIntakeSchemaIdRequest generates requests for GetGatewayIntakeSchemaId
func NewGetGatewayIntakeSchemaIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/intake-schema/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutGatewayIntakeSchemaIdRequest calls the generic PutGatewayIntakeSchemaId builder with application/json body
func NewPutGatewayIntakeSchemaIdRequest(server string, id string, body PutGatewayIntakeSchemaIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutGatewayIntakeSchemaIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutGatewayIntakeSchemaIdRequestWithBody generates requests for PutGatewayIntakeSchemaId with any type of body
func NewPutGatewayIntakeSchemaIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/intake-schema/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGatewayKeysRequest generates requests for GetGatewayKeys
func NewGetGatewayKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGatewayKeysRequest generates requests for PostGatewayKeys
func NewPostGatewayKeysRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteGatewayKeysIdRequest generates requests for DeleteGatewayKeysId
func NewDeleteGatewayKeysIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gateway/keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHealthRequest generates requests for GetHealth
func NewGetHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSparxRequest calls the generic PostSparx builder with application/json body
func NewPostSparxRequest(server string, body PostSparxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSparxRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSparxRequestWithBody generates requests for PostSparx with any type of body
func NewPostSparxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sparx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSparxIdRequest generates requests for DeleteSparxId
func NewDeleteSparxIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sparx/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSparxIdRequest generates requests for GetSparxId
func NewGetSparxIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sparx/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSwaggerUiRequest generates requests for GetSwaggerUi
func NewGetSwaggerUiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/swagger-ui")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetGatewayCEDAR20Core20API200AuthorityToOperateWithResponse request
	GetGatewayCEDAR20Core20API200AuthorityToOperateWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200AuthorityToOperateParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200AuthorityToOperateResponse, error)

	// GetGatewayCEDAR20Core20API200BudgetWithResponse request
	GetGatewayCEDAR20Core20API200BudgetWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200BudgetParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200BudgetResponse, error)

	// PostGatewayCEDAR20Core20API200BudgetWithBodyWithResponse request with any body
	PostGatewayCEDAR20Core20API200BudgetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200BudgetResponse, error)

	PostGatewayCEDAR20Core20API200BudgetWithResponse(ctx context.Context, body PostGatewayCEDAR20Core20API200BudgetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200BudgetResponse, error)

	// PutGatewayCEDAR20Core20API200BudgetWithBodyWithResponse request with any body
	PutGatewayCEDAR20Core20API200BudgetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGatewayCEDAR20Core20API200BudgetResponse, error)

	PutGatewayCEDAR20Core20API200BudgetWithResponse(ctx context.Context, body PutGatewayCEDAR20Core20API200BudgetJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGatewayCEDAR20Core20API200BudgetResponse, error)

	// DeleteGatewayCEDAR20Core20API200BudgetListWithResponse request
	DeleteGatewayCEDAR20Core20API200BudgetListWithResponse(ctx context.Context, params *DeleteGatewayCEDAR20Core20API200BudgetListParams, reqEditors ...RequestEditorFn) (*DeleteGatewayCEDAR20Core20API200BudgetListResponse, error)

	// GetGatewayCEDAR20Core20API200BudgetSystemCostFindWithResponse request
	GetGatewayCEDAR20Core20API200BudgetSystemCostFindWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200BudgetSystemCostFindParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200BudgetSystemCostFindResponse, error)

	// PostGatewayCEDAR20Core20API200ComponentWithBodyWithResponse request with any body
	PostGatewayCEDAR20Core20API200ComponentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200ComponentResponse, error)

	PostGatewayCEDAR20Core20API200ComponentWithResponse(ctx context.Context, body PostGatewayCEDAR20Core20API200ComponentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200ComponentResponse, error)

	// PostGatewayCEDAR20Core20API200ContractWithBodyWithResponse request with any body
	PostGatewayCEDAR20Core20API200ContractWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200ContractResponse, error)

	PostGatewayCEDAR20Core20API200ContractWithResponse(ctx context.Context, body PostGatewayCEDAR20Core20API200ContractJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200ContractResponse, error)

	// PutGatewayCEDAR20Core20API200ContractWithBodyWithResponse request with any body
	PutGatewayCEDAR20Core20API200ContractWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGatewayCEDAR20Core20API200ContractResponse, error)

	PutGatewayCEDAR20Core20API200ContractWithResponse(ctx context.Context, body PutGatewayCEDAR20Core20API200ContractJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGatewayCEDAR20Core20API200ContractResponse, error)

	// DeleteGatewayCEDAR20Core20API200ContractListWithResponse request
	DeleteGatewayCEDAR20Core20API200ContractListWithResponse(ctx context.Context, params *DeleteGatewayCEDAR20Core20API200ContractListParams, reqEditors ...RequestEditorFn) (*DeleteGatewayCEDAR20Core20API200ContractListResponse, error)

	// GetGatewayCEDAR20Core20API200ContractListWithResponse request
	GetGatewayCEDAR20Core20API200ContractListWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200ContractListParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200ContractListResponse, error)

	// GetGatewayCEDAR20Core20API200CostTypeListWithResponse request
	GetGatewayCEDAR20Core20API200CostTypeListWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200CostTypeListParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200CostTypeListResponse, error)

	// DeleteGatewayCEDAR20Core20API200DeploymentWithResponse request
	DeleteGatewayCEDAR20Core20API200DeploymentWithResponse(ctx context.Context, params *DeleteGatewayCEDAR20Core20API200DeploymentParams, reqEditors ...RequestEditorFn) (*DeleteGatewayCEDAR20Core20API200DeploymentResponse, error)

	// GetGatewayCEDAR20Core20API200DeploymentWithResponse request
	GetGatewayCEDAR20Core20API200DeploymentWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200DeploymentParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200DeploymentResponse, error)

	// PostGatewayCEDAR20Core20API200DeploymentWithBodyWithResponse request with any body
	PostGatewayCEDAR20Core20API200DeploymentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200DeploymentResponse, error)

	PostGatewayCEDAR20Core20API200DeploymentWithResponse(ctx context.Context, body PostGatewayCEDAR20Core20API200DeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200DeploymentResponse, error)

	// PutGatewayCEDAR20Core20API200DeploymentWithBodyWithResponse request with any body
	PutGatewayCEDAR20Core20API200DeploymentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGatewayCEDAR20Core20API200DeploymentResponse, error)

	PutGatewayCEDAR20Core20API200DeploymentWithResponse(ctx context.Context, body PutGatewayCEDAR20Core20API200DeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGatewayCEDAR20Core20API200DeploymentResponse, error)

	// GetGatewayCEDAR20Core20API200DomainModelListWithResponse request
	GetGatewayCEDAR20Core20API200DomainModelListWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200DomainModelListParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200DomainModelListResponse, error)

	// GetGatewayCEDAR20Core20API200DomainModelLevelWithResponse request
	GetGatewayCEDAR20Core20API200DomainModelLevelWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200DomainModelLevelParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200DomainModelLevelResponse, error)

	// GetGatewayCEDAR20Core20API200DomainModelNameWithResponse request
	GetGatewayCEDAR20Core20API200DomainModelNameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200DomainModelNameResponse, error)

	// GetGatewayCEDAR20Core20API200EnumerationWithResponse request
	GetGatewayCEDAR20Core20API200EnumerationWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200EnumerationParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200EnumerationResponse, error)

	// GetGatewayCEDAR20Core20API200ExchangeWithResponse request
	GetGatewayCEDAR20Core20API200ExchangeWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200ExchangeParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200ExchangeResponse, error)

	// PutGatewayCEDAR20Core20API200ExchangeWithBodyWithResponse request with any body
	PutGatewayCEDAR20Core20API200ExchangeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGatewayCEDAR20Core20API200ExchangeResponse, error)

	PutGatewayCEDAR20Core20API200ExchangeWithResponse(ctx context.Context, body PutGatewayCEDAR20Core20API200ExchangeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGatewayCEDAR20Core20API200ExchangeResponse, error)

	// GetGatewayCEDAR20Core20API200ExchangeIdWithResponse request
	GetGatewayCEDAR20Core20API200ExchangeIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200ExchangeIdResponse, error)

	// GetGatewayCEDAR20Core20API200OrganizationWithResponse request
	GetGatewayCEDAR20Core20API200OrganizationWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200OrganizationParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200OrganizationResponse, error)

	// GetGatewayCEDAR20Core20API200RoleWithResponse request
	GetGatewayCEDAR20Core20API200RoleWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200RoleParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200RoleResponse, error)

	// PostGatewayCEDAR20Core20API200RoleWithBodyWithResponse request with any body
	PostGatewayCEDAR20Core20API200RoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200RoleResponse, error)

	PostGatewayCEDAR20Core20API200RoleWithResponse(ctx context.Context, body PostGatewayCEDAR20Core20API200RoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200RoleResponse, error)

	// DeleteGatewayCEDAR20Core20API200RoleListWithResponse request
	DeleteGatewayCEDAR20Core20API200RoleListWithResponse(ctx context.Context, params *DeleteGatewayCEDAR20Core20API200RoleListParams, reqEditors ...RequestEditorFn) (*DeleteGatewayCEDAR20Core20API200RoleListResponse, error)

	// GetGatewayCEDAR20Core20API200RoleTypeApplicationWithResponse request
	GetGatewayCEDAR20Core20API200RoleTypeApplicationWithResponse(ctx context.Context, application GetGatewayCEDAR20Core20API200RoleTypeApplicationParamsApplication, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200RoleTypeApplicationResponse, error)

	// GetGatewayCEDAR20Core20API200SoftwareProductsWithResponse request
	GetGatewayCEDAR20Core20API200SoftwareProductsWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200SoftwareProductsParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200SoftwareProductsResponse, error)

	// PostGatewayCEDAR20Core20API200SoftwareProductsWithBodyWithResponse request with any body
	PostGatewayCEDAR20Core20API200SoftwareProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200SoftwareProductsResponse, error)

	PostGatewayCEDAR20Core20API200SoftwareProductsWithResponse(ctx context.Context, body PostGatewayCEDAR20Core20API200SoftwareProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200SoftwareProductsResponse, error)

	// GetGatewayCEDAR20Core20API200StakeholderWithResponse request
	GetGatewayCEDAR20Core20API200StakeholderWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200StakeholderParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200StakeholderResponse, error)

	// DeleteGatewayCEDAR20Core20API200SupportContactWithResponse request
	DeleteGatewayCEDAR20Core20API200SupportContactWithResponse(ctx context.Context, params *DeleteGatewayCEDAR20Core20API200SupportContactParams, reqEditors ...RequestEditorFn) (*DeleteGatewayCEDAR20Core20API200SupportContactResponse, error)

	// GetGatewayCEDAR20Core20API200SupportContactWithResponse request
	GetGatewayCEDAR20Core20API200SupportContactWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200SupportContactParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200SupportContactResponse, error)

	// PostGatewayCEDAR20Core20API200SupportContactWithBodyWithResponse request with any body
	PostGatewayCEDAR20Core20API200SupportContactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200SupportContactResponse, error)

	PostGatewayCEDAR20Core20API200SupportContactWithResponse(ctx context.Context, body PostGatewayCEDAR20Core20API200SupportContactJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200SupportContactResponse, error)

	// GetGatewayCEDAR20Core20API200SystemDetailIdWithResponse request
	GetGatewayCEDAR20Core20API200SystemDetailIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200SystemDetailIdResponse, error)

	// GetGatewayCEDAR20Core20API200SystemSummaryWithResponse request
	GetGatewayCEDAR20Core20API200SystemSummaryWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200SystemSummaryParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200SystemSummaryResponse, error)

	// GetGatewayCEDAR20Core20API200SystemSummaryIdWithResponse request
	GetGatewayCEDAR20Core20API200SystemSummaryIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200SystemSummaryIdResponse, error)

	// GetGatewayCEDAR20Core20API200ThreatWithResponse request
	GetGatewayCEDAR20Core20API200ThreatWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200ThreatParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200ThreatResponse, error)

	// GetGatewayCEDAR20Core20API200UrlIdWithResponse request
	GetGatewayCEDAR20Core20API200UrlIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200UrlIdResponse, error)

	// GetGatewayCEDAR20Core20API200UserWithResponse request
	GetGatewayCEDAR20Core20API200UserWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200UserParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200UserResponse, error)

	// PostGatewayCEDAR20Core20API200UserWithBodyWithResponse request with any body
	PostGatewayCEDAR20Core20API200UserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200UserResponse, error)

	PostGatewayCEDAR20Core20API200UserWithResponse(ctx context.Context, body PostGatewayCEDAR20Core20API200UserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200UserResponse, error)

	// PostGatewayCEDAR20Core20APIExchangeWithBodyWithResponse request with any body
	PostGatewayCEDAR20Core20APIExchangeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20APIExchangeResponse, error)

	PostGatewayCEDAR20Core20APIExchangeWithResponse(ctx context.Context, body PostGatewayCEDAR20Core20APIExchangeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20APIExchangeResponse, error)

	// GetGatewayCEDARIntake10ClientIdWithResponse request
	GetGatewayCEDARIntake10ClientIdWithResponse(ctx context.Context, id string, params *GetGatewayCEDARIntake10ClientIdParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDARIntake10ClientIdResponse, error)

	// GetGatewayCEDARIntake10HealthCheckWithResponse request
	GetGatewayCEDARIntake10HealthCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGatewayCEDARIntake10HealthCheckResponse, error)

	// PostGatewayCEDARIntake10IntakeWithBodyWithResponse request with any body
	PostGatewayCEDARIntake10IntakeWithBodyWithResponse(ctx context.Context, params *PostGatewayCEDARIntake10IntakeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayCEDARIntake10IntakeResponse, error)

	PostGatewayCEDARIntake10IntakeWithResponse(ctx context.Context, params *PostGatewayCEDARIntake10IntakeParams, body PostGatewayCEDARIntake10IntakeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayCEDARIntake10IntakeResponse, error)

	// GetGatewayCEDARIntake10IntakeCedarIdWithResponse request
	GetGatewayCEDARIntake10IntakeCedarIdWithResponse(ctx context.Context, id string, params *GetGatewayCEDARIntake10IntakeCedarIdParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDARIntake10IntakeCedarIdResponse, error)

	// GetGatewayCEDARIntake10IntakeStatusWithResponse request
	GetGatewayCEDARIntake10IntakeStatusWithResponse(ctx context.Context, params *GetGatewayCEDARIntake10IntakeStatusParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDARIntake10IntakeStatusResponse, error)

	// GetGatewayCEDARIntake10StatusCedarIdWithResponse request
	GetGatewayCEDARIntake10StatusCedarIdWithResponse(ctx context.Context, id string, params *GetGatewayCEDARIntake10StatusCedarIdParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDARIntake10StatusCedarIdResponse, error)

	// GetGatewayCEDARIntake10StatusClientIdWithResponse request
	GetGatewayCEDARIntake10StatusClientIdWithResponse(ctx context.Context, id string, params *GetGatewayCEDARIntake10StatusClientIdParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDARIntake10StatusClientIdResponse, error)

	// PostGatewayLDAP10AuthenticateWithBodyWithResponse request with any body
	PostGatewayLDAP10AuthenticateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayLDAP10AuthenticateResponse, error)

	PostGatewayLDAP10AuthenticateWithResponse(ctx context.Context, body PostGatewayLDAP10AuthenticateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayLDAP10AuthenticateResponse, error)

	// GetGatewayLDAP10PersonWithResponse request
	GetGatewayLDAP10PersonWithResponse(ctx context.Context, params *GetGatewayLDAP10PersonParams, reqEditors ...RequestEditorFn) (*GetGatewayLDAP10PersonResponse, error)

	// GetGatewayLDAP10PersonIdWithResponse request
	GetGatewayLDAP10PersonIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGatewayLDAP10PersonIdResponse, error)

	// GetGatewaySystem20Census20Core20API200AdminReviewerWithResponse request
	GetGatewaySystem20Census20Core20API200AdminReviewerWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200AdminReviewerParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200AdminReviewerResponse, error)

	// DeleteGatewaySystem20Census20Core20API200AdminReviewerWithBodyWithResponse request with any body
	DeleteGatewaySystem20Census20Core20API200AdminReviewerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteGatewaySystem20Census20Core20API200AdminReviewerResponse, error)

	DeleteGatewaySystem20Census20Core20API200AdminReviewerWithResponse(ctx context.Context, body DeleteGatewaySystem20Census20Core20API200AdminReviewerJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteGatewaySystem20Census20Core20API200AdminReviewerResponse, error)

	// PostGatewaySystem20Census20Core20API200AdminReviewerWithBodyWithResponse request with any body
	PostGatewaySystem20Census20Core20API200AdminReviewerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200AdminReviewerResponse, error)

	PostGatewaySystem20Census20Core20API200AdminReviewerWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200AdminReviewerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200AdminReviewerResponse, error)

	// GetGatewaySystem20Census20Core20API200BudgetAndContractsWithResponse request
	GetGatewaySystem20Census20Core20API200BudgetAndContractsWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200BudgetAndContractsParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200BudgetAndContractsResponse, error)

	// PostGatewaySystem20Census20Core20API200BudgetAndContractsWithBodyWithResponse request with any body
	PostGatewaySystem20Census20Core20API200BudgetAndContractsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200BudgetAndContractsResponse, error)

	PostGatewaySystem20Census20Core20API200BudgetAndContractsWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200BudgetAndContractsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200BudgetAndContractsResponse, error)

	// PostGatewaySystem20Census20Core20API200BusinessOwnerWithBodyWithResponse request with any body
	PostGatewaySystem20Census20Core20API200BusinessOwnerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200BusinessOwnerResponse, error)

	PostGatewaySystem20Census20Core20API200BusinessOwnerWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200BusinessOwnerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200BusinessOwnerResponse, error)

	// DeleteGatewaySystem20Census20Core20API200DataExchangeNotesWithResponse request
	DeleteGatewaySystem20Census20Core20API200DataExchangeNotesWithResponse(ctx context.Context, params *DeleteGatewaySystem20Census20Core20API200DataExchangeNotesParams, reqEditors ...RequestEditorFn) (*DeleteGatewaySystem20Census20Core20API200DataExchangeNotesResponse, error)

	// DeleteGatewaySystem20Census20Core20API200DataExchangeStatusWithBodyWithResponse request with any body
	DeleteGatewaySystem20Census20Core20API200DataExchangeStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteGatewaySystem20Census20Core20API200DataExchangeStatusResponse, error)

	DeleteGatewaySystem20Census20Core20API200DataExchangeStatusWithResponse(ctx context.Context, body DeleteGatewaySystem20Census20Core20API200DataExchangeStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteGatewaySystem20Census20Core20API200DataExchangeStatusResponse, error)

	// GetGatewaySystem20Census20Core20API200DataExchangeStatusWithResponse request
	GetGatewaySystem20Census20Core20API200DataExchangeStatusWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200DataExchangeStatusParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200DataExchangeStatusResponse, error)

	// GetGatewaySystem20Census20Core20API200DataExchangeNotesWithResponse request
	GetGatewaySystem20Census20Core20API200DataExchangeNotesWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200DataExchangeNotesParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200DataExchangeNotesResponse, error)

	// PostGatewaySystem20Census20Core20API200DataExchangeNotesWithBodyWithResponse request with any body
	PostGatewaySystem20Census20Core20API200DataExchangeNotesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200DataExchangeNotesResponse, error)

	PostGatewaySystem20Census20Core20API200DataExchangeNotesWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200DataExchangeNotesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200DataExchangeNotesResponse, error)

	// GetGatewaySystem20Census20Core20API200DrmWithResponse request
	GetGatewaySystem20Census20Core20API200DrmWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200DrmResponse, error)

	// PostGatewaySystem20Census20Core20API200NoteWithBodyWithResponse request with any body
	PostGatewaySystem20Census20Core20API200NoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200NoteResponse, error)

	PostGatewaySystem20Census20Core20API200NoteWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200NoteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200NoteResponse, error)

	// PutGatewaySystem20Census20Core20API200NoteWithBodyWithResponse request with any body
	PutGatewaySystem20Census20Core20API200NoteWithBodyWithResponse(ctx context.Context, params *PutGatewaySystem20Census20Core20API200NoteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGatewaySystem20Census20Core20API200NoteResponse, error)

	PutGatewaySystem20Census20Core20API200NoteWithResponse(ctx context.Context, params *PutGatewaySystem20Census20Core20API200NoteParams, body PutGatewaySystem20Census20Core20API200NoteJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGatewaySystem20Census20Core20API200NoteResponse, error)

	// DeleteGatewaySystem20Census20Core20API200NoteListWithResponse request
	DeleteGatewaySystem20Census20Core20API200NoteListWithResponse(ctx context.Context, params *DeleteGatewaySystem20Census20Core20API200NoteListParams, reqEditors ...RequestEditorFn) (*DeleteGatewaySystem20Census20Core20API200NoteListResponse, error)

	// GetGatewaySystem20Census20Core20API200NoteListWithResponse request
	GetGatewaySystem20Census20Core20API200NoteListWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200NoteListParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200NoteListResponse, error)

	// GetGatewaySystem20Census20Core20API200PageUrlsWithResponse request
	GetGatewaySystem20Census20Core20API200PageUrlsWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageUrlsParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200PageUrlsResponse, error)

	// PostGatewaySystem20Census20Core20API200PageUrlsWithBodyWithResponse request with any body
	PostGatewaySystem20Census20Core20API200PageUrlsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200PageUrlsResponse, error)

	PostGatewaySystem20Census20Core20API200PageUrlsWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200PageUrlsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200PageUrlsResponse, error)

	// GetGatewaySystem20Census20Core20API200PageBusinessOwnerWithResponse request
	GetGatewaySystem20Census20Core20API200PageBusinessOwnerWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageBusinessOwnerParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200PageBusinessOwnerResponse, error)

	// GetGatewaySystem20Census20Core20API200PageDataCentersWithResponse request
	GetGatewaySystem20Census20Core20API200PageDataCentersWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageDataCentersParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200PageDataCentersResponse, error)

	// PostGatewaySystem20Census20Core20API200PageDataCentersWithBodyWithResponse request with any body
	PostGatewaySystem20Census20Core20API200PageDataCentersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200PageDataCentersResponse, error)

	PostGatewaySystem20Census20Core20API200PageDataCentersWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200PageDataCentersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200PageDataCentersResponse, error)

	// GetGatewaySystem20Census20Core20API200PageDataExchangeWithBodyWithResponse request with any body
	GetGatewaySystem20Census20Core20API200PageDataExchangeWithBodyWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageDataExchangeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200PageDataExchangeResponse, error)

	GetGatewaySystem20Census20Core20API200PageDataExchangeWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageDataExchangeParams, body GetGatewaySystem20Census20Core20API200PageDataExchangeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200PageDataExchangeResponse, error)

	// PostGatewaySystem20Census20Core20API200PageDataExchangeWithBodyWithResponse request with any body
	PostGatewaySystem20Census20Core20API200PageDataExchangeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200PageDataExchangeResponse, error)

	PostGatewaySystem20Census20Core20API200PageDataExchangeWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200PageDataExchangeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200PageDataExchangeResponse, error)

	// GetGatewaySystem20Census20Core20API200PageSoftwareProductsWithResponse request
	GetGatewaySystem20Census20Core20API200PageSoftwareProductsWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageSoftwareProductsParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200PageSoftwareProductsResponse, error)

	// GetGatewaySystem20Census20Core20API200PageSystemDataWithResponse request
	GetGatewaySystem20Census20Core20API200PageSystemDataWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageSystemDataParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200PageSystemDataResponse, error)

	// PostGatewaySystem20Census20Core20API200PageSystemDataWithBodyWithResponse request with any body
	PostGatewaySystem20Census20Core20API200PageSystemDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200PageSystemDataResponse, error)

	PostGatewaySystem20Census20Core20API200PageSystemDataWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200PageSystemDataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200PageSystemDataResponse, error)

	// GetGatewaySystem20Census20Core20API200PageSystemMaintainerWithResponse request
	GetGatewaySystem20Census20Core20API200PageSystemMaintainerWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageSystemMaintainerParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200PageSystemMaintainerResponse, error)

	// GetGatewaySystem20Census20Core20API200PageSystemsListWithResponse request
	GetGatewaySystem20Census20Core20API200PageSystemsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200PageSystemsListResponse, error)

	// GetGatewaySystem20Census20Core20API200PersonWithBodyWithResponse request with any body
	GetGatewaySystem20Census20Core20API200PersonWithBodyWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PersonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200PersonResponse, error)

	GetGatewaySystem20Census20Core20API200PersonWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PersonParams, body GetGatewaySystem20Census20Core20API200PersonJSONRequestBody, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200PersonResponse, error)

	// PostGatewaySystem20Census20Core20API200SoftwareProductsWithBodyWithResponse request with any body
	PostGatewaySystem20Census20Core20API200SoftwareProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200SoftwareProductsResponse, error)

	PostGatewaySystem20Census20Core20API200SoftwareProductsWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200SoftwareProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200SoftwareProductsResponse, error)

	// DeleteGatewaySystem20Census20Core20API200StatusWithResponse request
	DeleteGatewaySystem20Census20Core20API200StatusWithResponse(ctx context.Context, params *DeleteGatewaySystem20Census20Core20API200StatusParams, reqEditors ...RequestEditorFn) (*DeleteGatewaySystem20Census20Core20API200StatusResponse, error)

	// GetGatewaySystem20Census20Core20API200StatusWithResponse request
	GetGatewaySystem20Census20Core20API200StatusWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200StatusParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200StatusResponse, error)

	// PostGatewaySystem20Census20Core20API200StatusWithBodyWithResponse request with any body
	PostGatewaySystem20Census20Core20API200StatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200StatusResponse, error)

	PostGatewaySystem20Census20Core20API200StatusWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200StatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200StatusResponse, error)

	// GetGatewaySystem20Census20Core20API200SystemAiUseWithResponse request
	GetGatewaySystem20Census20Core20API200SystemAiUseWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200SystemAiUseParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200SystemAiUseResponse, error)

	// PostGatewaySystem20Census20Core20API200SystemAiUseWithBodyWithResponse request with any body
	PostGatewaySystem20Census20Core20API200SystemAiUseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200SystemAiUseResponse, error)

	PostGatewaySystem20Census20Core20API200SystemAiUseWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200SystemAiUseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200SystemAiUseResponse, error)

	// GetGatewaySystem20Census20Core20API200SystemComponentsWithResponse request
	GetGatewaySystem20Census20Core20API200SystemComponentsWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200SystemComponentsParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200SystemComponentsResponse, error)

	// PostGatewaySystem20Census20Core20API200SystemComponentsWithBodyWithResponse request with any body
	PostGatewaySystem20Census20Core20API200SystemComponentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200SystemComponentsResponse, error)

	PostGatewaySystem20Census20Core20API200SystemComponentsWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200SystemComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200SystemComponentsResponse, error)

	// PostGatewaySystem20Census20Core20API200SystemMaintainerWithBodyWithResponse request with any body
	PostGatewaySystem20Census20Core20API200SystemMaintainerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200SystemMaintainerResponse, error)

	PostGatewaySystem20Census20Core20API200SystemMaintainerWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200SystemMaintainerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200SystemMaintainerResponse, error)

	// GetGatewaySystem20Census20Core20API200SystemPropertyWithResponse request
	GetGatewaySystem20Census20Core20API200SystemPropertyWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200SystemPropertyParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200SystemPropertyResponse, error)

	// PostGatewaySystem20Census20Core20API200SystemPropertyWithBodyWithResponse request with any body
	PostGatewaySystem20Census20Core20API200SystemPropertyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200SystemPropertyResponse, error)

	PostGatewaySystem20Census20Core20API200SystemPropertyWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200SystemPropertyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200SystemPropertyResponse, error)

	// GetGatewayTechnopedia10SoftwareExtendedWithResponse request
	GetGatewayTechnopedia10SoftwareExtendedWithResponse(ctx context.Context, params *GetGatewayTechnopedia10SoftwareExtendedParams, reqEditors ...RequestEditorFn) (*GetGatewayTechnopedia10SoftwareExtendedResponse, error)

	// GetGatewayTechnopedia10SoftwareExtendedIdWithResponse request
	GetGatewayTechnopedia10SoftwareExtendedIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetGatewayTechnopedia10SoftwareExtendedIdResponse, error)

	// GetGatewayIntakeSchemaWithResponse request
	GetGatewayIntakeSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGatewayIntakeSchemaResponse, error)

	// PostGatewayIntakeSchemaWithBodyWithResponse request with any body
	PostGatewayIntakeSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayIntakeSchemaResponse, error)

	PostGatewayIntakeSchemaWithResponse(ctx context.Context, body PostGatewayIntakeSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayIntakeSchemaResponse, error)

	// DeleteGatewayIntakeSchemaIdWithResponse request
	DeleteGatewayIntakeSchemaIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteGatewayIntakeSchemaIdResponse, error)

	// GetGatewayIntakeSchemaIdWithResponse request
	GetGatewayIntakeSchemaIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGatewayIntakeSchemaIdResponse, error)

	// PutGatewayIntakeSchemaIdWithBodyWithResponse request with any body
	PutGatewayIntakeSchemaIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGatewayIntakeSchemaIdResponse, error)

	PutGatewayIntakeSchemaIdWithResponse(ctx context.Context, id string, body PutGatewayIntakeSchemaIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGatewayIntakeSchemaIdResponse, error)

	// GetGatewayKeysWithResponse request
	GetGatewayKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGatewayKeysResponse, error)

	// PostGatewayKeysWithResponse request
	PostGatewayKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostGatewayKeysResponse, error)

	// DeleteGatewayKeysIdWithResponse request
	DeleteGatewayKeysIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteGatewayKeysIdResponse, error)

	// GetHealthWithResponse request
	GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error)

	// PostSparxWithBodyWithResponse request with any body
	PostSparxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSparxResponse, error)

	PostSparxWithResponse(ctx context.Context, body PostSparxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSparxResponse, error)

	// DeleteSparxIdWithResponse request
	DeleteSparxIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteSparxIdResponse, error)

	// GetSparxIdWithResponse request
	GetSparxIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSparxIdResponse, error)

	// GetSwaggerUiWithResponse request
	GetSwaggerUiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwaggerUiResponse, error)
}

type GetGatewayCEDAR20Core20API200AuthorityToOperateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// AuthorityToOperateList List of Authority to Operate records.
		AuthorityToOperateList *[]struct {
			// ActualDispositionDate Actual disposition date.
			ActualDispositionDate *string `json:"actualDispositionDate"`

			// CedarId Cedar system ID.
			CedarId *string `json:"cedarId,omitempty"`

			// ContainsPersonallyIdentifiableInformation Whether system contains PII.
			ContainsPersonallyIdentifiableInformation *bool `json:"containsPersonallyIdentifiableInformation,omitempty"`

			// CountOfOpenPoams Count of open POAMs.
			CountOfOpenPoams *int `json:"countOfOpenPoams,omitempty"`

			// CountOfTotalNonPrivilegedUserPopulation Count of non-privileged users.
			CountOfTotalNonPrivilegedUserPopulation *int `json:"countOfTotalNonPrivilegedUserPopulation,omitempty"`

			// CountOfTotalPrivilegedUserPopulation Count of privileged users.
			CountOfTotalPrivilegedUserPopulation *int `json:"countOfTotalPrivilegedUserPopulation,omitempty"`

			// DateAuthorizationMemoExpires Date authorization memo expires.
			DateAuthorizationMemoExpires *string `json:"dateAuthorizationMemoExpires,omitempty"`

			// DateAuthorizationMemoSigned Date authorization memo was signed.
			DateAuthorizationMemoSigned *string `json:"dateAuthorizationMemoSigned,omitempty"`

			// EAuthenticationLevel E-Authentication level.
			EAuthenticationLevel *string `json:"eAuthenticationLevel,omitempty"`

			// Fips199OverallImpactRating FIPS 199 overall impact rating.
			Fips199OverallImpactRating *int `json:"fips199OverallImpactRating,omitempty"`

			// FismaSystemAcronym FISMA system acronym.
			FismaSystemAcronym *string `json:"fismaSystemAcronym,omitempty"`

			// FismaSystemName FISMA system name.
			FismaSystemName *string `json:"fismaSystemName,omitempty"`

			// IsAccessedByNonOrganizationalUsers Whether accessed by non-organizational users.
			IsAccessedByNonOrganizationalUsers *bool `json:"isAccessedByNonOrganizationalUsers,omitempty"`

			// IsPiiLimitedToUserNameAndPass Whether PII is limited to username and password.
			IsPiiLimitedToUserNameAndPass *bool `json:"isPiiLimitedToUserNameAndPass,omitempty"`

			// IsProtectedHealthInformation Whether system contains PHI.
			IsProtectedHealthInformation *bool `json:"isProtectedHealthInformation,omitempty"`

			// LastActScaDate Last ACT SCA date.
			LastActScaDate *string `json:"lastActScaDate,omitempty"`

			// LastAssessmentDate Last assessment date.
			LastAssessmentDate *string `json:"lastAssessmentDate,omitempty"`

			// LastContingencyPlanCompletionDate Last contingency plan completion date.
			LastContingencyPlanCompletionDate *string `json:"lastContingencyPlanCompletionDate,omitempty"`

			// LastPenTestDate Last penetration test date.
			LastPenTestDate *string `json:"lastPenTestDate,omitempty"`

			// OaStatus Operating Authority status.
			OaStatus *string `json:"oaStatus,omitempty"`

			// PiaCompletionDate PIA completion date.
			PiaCompletionDate *string `json:"piaCompletionDate,omitempty"`

			// PrimaryCyberRiskAdvisor Primary cyber risk advisor.
			PrimaryCyberRiskAdvisor *string `json:"primaryCyberRiskAdvisor,omitempty"`

			// PrivacySubjectMatterExpert Privacy subject matter expert.
			PrivacySubjectMatterExpert *string `json:"privacySubjectMatterExpert"`

			// RecoveryPointObjective Recovery point objective.
			RecoveryPointObjective *int `json:"recoveryPointObjective,omitempty"`

			// RecoveryTimeObjective Recovery time objective.
			RecoveryTimeObjective *int `json:"recoveryTimeObjective,omitempty"`

			// SystemOfRecordsNotice System of Records Notice.
			SystemOfRecordsNotice *[]string `json:"systemOfRecordsNotice,omitempty"`

			// TlcPhase Technology Life Cycle phase.
			TlcPhase *string `json:"tlcPhase,omitempty"`

			// Uuid CMS UUID.
			Uuid *string `json:"uuid,omitempty"`

			// XlcPhase Extended Life Cycle phase.
			XlcPhase *string `json:"xlcPhase"`
		} `json:"AuthorityToOperateList,omitempty"`

		// Count The number of ATO records returned.
		Count *int `json:"count,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200AuthorityToOperateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200AuthorityToOperateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDAR20Core20API200BudgetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Budgets List of budget records.
		Budgets *[]struct {
			// FiscalYear The fiscal year for the budget.
			FiscalYear *string `json:"FiscalYear"`

			// FundingSource The source of funding for the budget.
			FundingSource *string `json:"FundingSource"`

			// Name Name of the budget item.
			Name *string `json:"Name"`

			// Funding Description of the allocation of this budget to the system in question
			Funding *string `json:"funding"`

			// FundingId Cross-reference ID for relationship between budget project and application in system of record
			FundingId *string `json:"fundingId"`

			// Id OFM budget internal ID in system of record
			Id *string `json:"id"`

			// ProjectId OFM budget project ID in system of record
			ProjectId string `json:"projectId"`

			// ProjectTitle Title of this project
			ProjectTitle *string `json:"projectTitle"`

			// SystemId System which this budget funds
			SystemId *string `json:"systemId"`
		} `json:"Budgets,omitempty"`

		// Count The number of budget records returned.
		Count int `json:"count"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200BudgetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200BudgetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewayCEDAR20Core20API200BudgetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGatewayCEDAR20Core20API200BudgetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewayCEDAR20Core20API200BudgetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutGatewayCEDAR20Core20API200BudgetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutGatewayCEDAR20Core20API200BudgetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutGatewayCEDAR20Core20API200BudgetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGatewayCEDAR20Core20API200BudgetListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteGatewayCEDAR20Core20API200BudgetListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGatewayCEDAR20Core20API200BudgetListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDAR20Core20API200BudgetSystemCostFindResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// BudgetActualCost List of budget actual cost records.
		BudgetActualCost *[]struct {
			// ActualSystemCost The actual cost for the system in the given fiscal year.
			ActualSystemCost *string `json:"ActualSystemCost,omitempty"`

			// FiscalYear The fiscal year for the cost data.
			FiscalYear *string `json:"FiscalYear,omitempty"`

			// SystemId System identifier.
			SystemId *string `json:"systemId,omitempty"`
		} `json:"BudgetActualCost,omitempty"`

		// Count The number of budget cost records returned.
		Count int32 `json:"count"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200BudgetSystemCostFindResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200BudgetSystemCostFindResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewayCEDAR20Core20API200ComponentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Message *[]string `json:"message,omitempty"`
		Payload *struct {
			// Refstr The GUID of the newly created software product in Sparx.
			Refstr *string `json:"refstr,omitempty"`
		} `json:"payload,omitempty"`
		Result *string `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGatewayCEDAR20Core20API200ComponentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewayCEDAR20Core20API200ComponentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewayCEDAR20Core20API200ContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Message GUID of the newly created contract deliverable.
		Message *string `json:"message,omitempty"`
		Result  *string `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGatewayCEDAR20Core20API200ContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewayCEDAR20Core20API200ContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutGatewayCEDAR20Core20API200ContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutGatewayCEDAR20Core20API200ContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutGatewayCEDAR20Core20API200ContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGatewayCEDAR20Core20API200ContractListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteGatewayCEDAR20Core20API200ContractListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGatewayCEDAR20Core20API200ContractListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDAR20Core20API200ContractListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Contracts List of contract records.
		Contracts *[]struct {
			// ContractName Contract Name.
			ContractName *string `json:"ContractName,omitempty"`

			// ContractNumber Contract Number.
			ContractNumber *string `json:"ContractNumber,omitempty"`

			// Cost Contract Amount.
			Cost *string `json:"Cost,omitempty"`

			// OrderNumber Order Number.
			OrderNumber *string `json:"OrderNumber,omitempty"`

			// POPEndDate Period of Performance end date.
			POPEndDate *string `json:"POPEndDate,omitempty"`

			// POPStartDate Period of Performance start date.
			POPStartDate *string `json:"POPStartDate,omitempty"`

			// ProductServiceDescription Product Service Description.
			ProductServiceDescription *string `json:"ProductServiceDescription,omitempty"`

			// ProjectTitle Project Title.
			ProjectTitle *string `json:"ProjectTitle,omitempty"`

			// ServiceProvided Service Provided.
			ServiceProvided *string `json:"ServiceProvided,omitempty"`

			// AwardId Order Number (award ID).
			AwardId *string `json:"awardId,omitempty"`

			// ContractADO Contract ADO flag (same as isDeliveryOrg).
			ContractADO *string `json:"contractADO,omitempty"`

			// ContractDeliverableId Connection GUID (contract deliverable ID).
			ContractDeliverableId *string `json:"contractDeliverableId,omitempty"`

			// Id Sparx Contract GUID.
			Id *string `json:"id,omitempty"`

			// IsDeliveryOrg Is Delivery Organization flag.
			IsDeliveryOrg *string `json:"isDeliveryOrg,omitempty"`

			// ParentAwardId Contract Number (parent award ID).
			ParentAwardId *string `json:"parentAwardId,omitempty"`

			// SystemId Sparx System GUID.
			SystemId *string `json:"systemId,omitempty"`
		} `json:"Contracts,omitempty"`

		// Count The number of contract records returned (only present for non-keyword searches).
		Count *int `json:"count"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200ContractListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200ContractListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDAR20Core20API200CostTypeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// CostTypes List of cost types (excluding the highlighted cost type).
		CostTypes *[]struct {
			// Id Cost type ID.
			Id *string `json:"id,omitempty"`

			// Name Cost type name.
			Name *string `json:"name,omitempty"`
		} `json:"CostTypes,omitempty"`

		// Id ID of the "Internal Labor" cost type (if found)
		Id *string `json:"id"`

		// Name Name of the "Internal Labor" cost type (if found)
		Name *string `json:"name"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200CostTypeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200CostTypeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGatewayCEDAR20Core20API200DeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON401 *Unauthorized
	JSON404 *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON500 *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteGatewayCEDAR20Core20API200DeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGatewayCEDAR20Core20API200DeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDAR20Core20API200DeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Deployments List of deployment records.
		Deployments *[]struct {
			// DataCenter Associated data center information.
			DataCenter *struct {
				// Address1 Address line 1.
				Address1 *string `json:"address1"`

				// Address2 Address line 2.
				Address2 *string `json:"address2"`

				// AddressState State.
				AddressState *string `json:"addressState"`

				// City City.
				City *string `json:"city"`

				// Description Data center description.
				Description *string `json:"description"`

				// EndDate Data center end date.
				EndDate *openapi_types.Date `json:"endDate"`

				// Id Data center ID.
				Id *string `json:"id,omitempty"`

				// Name Data center name.
				Name *string `json:"name,omitempty"`

				// StartDate Data center start date.
				StartDate *openapi_types.Date `json:"startDate"`

				// State Data center state.
				State *GetGatewayCEDAR20Core20API200Deployment200DeploymentsDataCenterState `json:"state"`

				// Status Data center status.
				Status *GetGatewayCEDAR20Core20API200Deployment200DeploymentsDataCenterStatus `json:"status"`

				// Version Data center version.
				Version *string `json:"version,omitempty"`

				// Zip ZIP code.
				Zip *string `json:"zip"`
			} `json:"DataCenter"`

			// AwsEnclave AWS enclave.
			AwsEnclave *string `json:"awsEnclave"`

			// AwsEnclaveOther Other AWS enclave.
			AwsEnclaveOther *string `json:"awsEnclaveOther"`

			// ContractorName Contractor name.
			ContractorName *string `json:"contractorName"`

			// DeploymentElementId Deployment element ID.
			DeploymentElementId *string `json:"deploymentElementId"`

			// DeploymentType Type of deployment.
			DeploymentType *GetGatewayCEDAR20Core20API200Deployment200DeploymentsDeploymentType `json:"deploymentType"`

			// Description Deployment description.
			Description *string `json:"description"`

			// EndDate End date.
			EndDate *openapi_types.Date `json:"endDate"`

			// HasProductionData Has production data flag.
			HasProductionData *string `json:"hasProductionData"`

			// Id Deployment ID.
			Id string `json:"id"`

			// IsHotSite Is hot site flag.
			IsHotSite *string `json:"isHotSite"`

			// MovingToCloud Moving to cloud flag.
			MovingToCloud *string `json:"movingToCloud"`

			// MovingToCloudDate Moving to cloud date.
			MovingToCloudDate *openapi_types.Date `json:"movingToCloudDate"`

			// Name Deployment name.
			Name string `json:"name"`

			// NetworkEncryption Network encryption details.
			NetworkEncryption *string `json:"networkEncryption"`

			// OtherSpecialUsers Other special users.
			OtherSpecialUsers *string `json:"otherSpecialUsers"`

			// ReplicatedSystemElements Replicated system elements.
			ReplicatedSystemElements *[]string `json:"replicatedSystemElements"`

			// StartDate Start date.
			StartDate *openapi_types.Date `json:"startDate"`

			// State Deployment state.
			State *GetGatewayCEDAR20Core20API200Deployment200DeploymentsState `json:"state"`

			// Status Deployment status.
			Status *GetGatewayCEDAR20Core20API200Deployment200DeploymentsStatus `json:"status"`

			// SystemId System ID.
			SystemId string `json:"systemId"`

			// SystemName System name.
			SystemName *string `json:"systemName"`

			// SystemVersion System version.
			SystemVersion *string `json:"systemVersion"`

			// UsersRequiringMFA Users requiring MFA.
			UsersRequiringMFA *string `json:"usersRequiringMFA"`

			// WanType WAN type.
			WanType *string `json:"wanType"`

			// WanTypeOther Other WAN type.
			WanTypeOther *string `json:"wanTypeOther"`
		} `json:"Deployments,omitempty"`

		// Count The number of deployment records returned.
		Count int `json:"count"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}
type GetGatewayCEDAR20Core20API200Deployment200DeploymentsDataCenterState string
type GetGatewayCEDAR20Core20API200Deployment200DeploymentsDataCenterStatus string
type GetGatewayCEDAR20Core20API200Deployment200DeploymentsDeploymentType string
type GetGatewayCEDAR20Core20API200Deployment200DeploymentsState string
type GetGatewayCEDAR20Core20API200Deployment200DeploymentsStatus string

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200DeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200DeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewayCEDAR20Core20API200DeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result *string `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGatewayCEDAR20Core20API200DeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewayCEDAR20Core20API200DeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutGatewayCEDAR20Core20API200DeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Message Summary messages about the operation results
		Message *[]string `json:"message,omitempty"`
		Payload *struct {
			// Failed Array of deployments that failed to update with detailed error information to help with troubleshooting
			Failed *[]struct {
				// Error Error message explaining why the update failed
				Error *string `json:"error,omitempty"`

				// Id ID of the deployment that failed to update
				Id *string `json:"id,omitempty"`
			} `json:"failed,omitempty"`

			// Successful Array of deployment IDs that were updated successfully
			Successful *[]string `json:"successful,omitempty"`
		} `json:"payload,omitempty"`

		// Result Operation result status
		Result *PutGatewayCEDAR20Core20API200Deployment200Result `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}
type PutGatewayCEDAR20Core20API200Deployment200Result string

// Status returns HTTPResponse.Status
func (r PutGatewayCEDAR20Core20API200DeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutGatewayCEDAR20Core20API200DeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDAR20Core20API200DomainModelListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Areas List of domain model areas.
		Areas *[]struct {
			// Categories Categories within the area.
			Categories *[]struct {
				// Id Category ID.
				Id *string `json:"id,omitempty"`

				// Name Category name.
				Name *string `json:"name,omitempty"`
			} `json:"Categories"`

			// Id Area ID.
			Id *string `json:"id,omitempty"`

			// Name Area name.
			Name *string `json:"name,omitempty"`
		} `json:"Areas,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200DomainModelListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200DomainModelListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDAR20Core20API200DomainModelLevelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// DomainModelLevels Array of domain model level names
		DomainModelLevels []string `json:"DomainModelLevels"`

		// Count Number of domain model levels returned
		Count int `json:"count"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200DomainModelLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200DomainModelLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDAR20Core20API200DomainModelNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// DomainModelNames An array of domain model names.
		DomainModelNames []string `json:"DomainModelNames"`

		// Count The number of domain model names found.
		Count int32 `json:"count"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200DomainModelNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200DomainModelNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDAR20Core20API200EnumerationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Enumerations Array of enumeration objects with their values.
		Enumerations []struct {
			// Caption A display caption for the enumeration.
			Caption     *string `json:"caption"`
			Description *string `json:"description"`

			// Name The name of the enumeration.
			Name string `json:"name"`

			// Values List of values for this enumeration.
			Values []struct {
				// Description A human-readable description for the enumeration value.
				Description string `json:"description"`

				// Value The literal value of the enumeration entry.
				Value string `json:"value"`
			} `json:"values"`
		} `json:"Enumerations"`

		// Count The number of enumerations returned.
		Count int32 `json:"count"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200EnumerationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200EnumerationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDAR20Core20API200ExchangeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Exchanges Array of exchange objects
		Exchanges []struct {
			// ApiOwnership API ownership information
			ApiOwnership *string `json:"apiOwnership"`

			// BusinessPurposeOfAddress Business purposes for address data usage
			BusinessPurposeOfAddress []string `json:"businessPurposeOfAddress"`

			// ConnectionFrequency Frequency of data exchange connections
			ConnectionFrequency []string `json:"connectionFrequency"`

			// ContainsBankingData Whether the exchange includes banking data
			ContainsBankingData *bool `json:"containsBankingData"`

			// ContainsBeneficiaryAddress Whether the exchange contains beneficiary address data
			ContainsBeneficiaryAddress *bool `json:"containsBeneficiaryAddress"`

			// ContainsPhi Whether the exchange contains Protected Health Information
			ContainsPhi *bool `json:"containsPhi"`

			// ContainsPii Whether the exchange contains Personally Identifiable Information
			ContainsPii *bool `json:"containsPii"`

			// DataExchangeAgreement Data exchange agreement information
			DataExchangeAgreement *string `json:"dataExchangeAgreement"`

			// DataFormat Data format used in the exchange
			DataFormat *string `json:"dataFormat"`

			// DataFormatOther Other data format if not in standard list
			DataFormatOther *string `json:"dataFormatOther"`

			// ExchangeCUIDescription Description of CUI in the exchange
			ExchangeCUIDescription *string `json:"exchangeCUIDescription"`

			// ExchangeCUIType Types of CUI in the exchange
			ExchangeCUIType []string `json:"exchangeCUIType"`

			// ExchangeConnectionAuthenticated Whether the exchange connection is authenticated
			ExchangeConnectionAuthenticated *bool `json:"exchangeConnectionAuthenticated"`

			// ExchangeContainsCUI Whether the exchange contains Controlled Unclassified Information
			ExchangeContainsCUI *bool `json:"exchangeContainsCUI"`

			// ExchangeDescription Description of the data exchange
			ExchangeDescription *string `json:"exchangeDescription"`

			// ExchangeEndDate End date of the exchange
			ExchangeEndDate *openapi_types.Date `json:"exchangeEndDate"`

			// ExchangeId Unique identifier for the exchange
			ExchangeId *string `json:"exchangeId,omitempty"`

			// ExchangeName Name of the data exchange
			ExchangeName *string `json:"exchangeName,omitempty"`

			// ExchangeNetworkProtocol Network protocols used for the exchange
			ExchangeNetworkProtocol []string `json:"exchangeNetworkProtocol"`

			// ExchangeNetworkProtocolOther Other network protocol if not in standard list
			ExchangeNetworkProtocolOther *string `json:"exchangeNetworkProtocolOther"`

			// ExchangeRetiredDate Retirement date of the exchange
			ExchangeRetiredDate *openapi_types.Date `json:"exchangeRetiredDate"`

			// ExchangeStartDate Start date of the exchange
			ExchangeStartDate *openapi_types.Date `json:"exchangeStartDate"`

			// ExchangeState Current state of the exchange
			ExchangeState *string `json:"exchangeState"`

			// ExchangeVersion Version of the exchange
			ExchangeVersion *string `json:"exchangeVersion"`

			// FromOwnerId ID of the sender/source system
			FromOwnerId *string `json:"fromOwnerId"`

			// FromOwnerName Name of the sender/source system
			FromOwnerName *string `json:"fromOwnerName"`

			// FromOwnerType Type of the sender/source system
			FromOwnerType *GetGatewayCEDAR20Core20API200Exchange200ExchangesFromOwnerType `json:"fromOwnerType"`

			// IsAddressEditable Whether address data is editable
			IsAddressEditable *bool `json:"isAddressEditable"`

			// IsBeneficiaryMailingFile Whether this supports mailing to beneficiaries
			IsBeneficiaryMailingFile *bool `json:"isBeneficiaryMailingFile"`

			// NumOfRecords Number of records exchanged
			NumOfRecords *string `json:"numOfRecords"`

			// SharedViaApi Whether data is shared via API
			SharedViaApi *bool `json:"sharedViaApi"`

			// ToOwnerId ID of the receiver/destination system
			ToOwnerId *string `json:"toOwnerId"`

			// ToOwnerName Name of the receiver/destination system
			ToOwnerName *string `json:"toOwnerName"`

			// ToOwnerType Type of the receiver/destination system
			ToOwnerType *GetGatewayCEDAR20Core20API200Exchange200ExchangesToOwnerType `json:"toOwnerType"`

			// TypeOfData Types of data being exchanged
			TypeOfData []struct {
				// Id Type of data ID
				Id *string `json:"id"`

				// Name Type of data name
				Name *string `json:"name"`
			} `json:"typeOfData"`
		} `json:"Exchanges"`

		// Count Number of exchanges returned
		Count int32 `json:"count"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}
type GetGatewayCEDAR20Core20API200Exchange200ExchangesFromOwnerType string
type GetGatewayCEDAR20Core20API200Exchange200ExchangesToOwnerType string

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200ExchangeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200ExchangeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutGatewayCEDAR20Core20API200ExchangeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutGatewayCEDAR20Core20API200ExchangeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutGatewayCEDAR20Core20API200ExchangeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDAR20Core20API200ExchangeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// BusinessPurposeOfAddress Business purposes for address data usage
		BusinessPurposeOfAddress []string `json:"businessPurposeOfAddress"`

		// ConnectionFrequency Frequency of data exchange connections
		ConnectionFrequency []string `json:"connectionFrequency"`

		// ExchangeCUIDescription Description of CUI in the exchange
		ExchangeCUIDescription *string `json:"exchangeCUIDescription"`

		// ExchangeContainsCUI Whether the exchange contains Controlled Unclassified Information
		ExchangeContainsCUI *bool `json:"exchangeContainsCUI"`

		// ExchangeEndDate End date of the exchange
		ExchangeEndDate *openapi_types.Date `json:"exchangeEndDate"`

		// ExchangeId Unique identifier for the exchange
		ExchangeId string `json:"exchangeId"`

		// ExchangeName Name of the data exchange
		ExchangeName string `json:"exchangeName"`

		// ExchangeNetworkProtocol Network protocols used for the exchange
		ExchangeNetworkProtocol []string `json:"exchangeNetworkProtocol"`

		// ExchangeNetworkProtocolOther Other network protocol if not in standard list
		ExchangeNetworkProtocolOther *string `json:"exchangeNetworkProtocolOther"`

		// ExchangeRetiredDate Retirement date of the exchange
		ExchangeRetiredDate *openapi_types.Date `json:"exchangeRetiredDate"`

		// ExchangeStartDate Start date of the exchange
		ExchangeStartDate *openapi_types.Date `json:"exchangeStartDate"`

		// ExchangeState Current state of the exchange
		ExchangeState *string `json:"exchangeState,omitempty"`

		// ExchangeVersion Version of the exchange
		ExchangeVersion *string `json:"exchangeVersion,omitempty"`

		// FromOwnerId ID of the sender/source system
		FromOwnerId string `json:"fromOwnerId"`

		// FromOwnerName Name of the sender/source system
		FromOwnerName string `json:"fromOwnerName"`

		// FromOwnerType Type of the sender/source system
		FromOwnerType GetGatewayCEDAR20Core20API200ExchangeId200FromOwnerType `json:"fromOwnerType"`

		// ToOwnerId ID of the receiver/destination system
		ToOwnerId string `json:"toOwnerId"`

		// ToOwnerName Name of the receiver/destination system
		ToOwnerName string `json:"toOwnerName"`

		// ToOwnerType Type of the receiver/destination system
		ToOwnerType GetGatewayCEDAR20Core20API200ExchangeId200ToOwnerType `json:"toOwnerType"`

		// TypeOfData Types of data being exchanged
		TypeOfData []string `json:"typeOfData"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}
type GetGatewayCEDAR20Core20API200ExchangeId200FromOwnerType string
type GetGatewayCEDAR20Core20API200ExchangeId200ToOwnerType string

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200ExchangeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200ExchangeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDAR20Core20API200OrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Organizations Array of organizations (single organization tree when no filter, array with one filtered organization when filter is provided)
		Organizations *[]OrganizationSchema `json:"Organizations"`

		// Count Number of organizations returned (only present when no filter is provided or no match found)
		Count *int `json:"count"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200OrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200OrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDAR20Core20API200RoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Roles Array of role assignment objects
		Roles []Role `json:"Roles"`

		// Count Number of role assignments returned
		Count int32 `json:"count"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON404 *NotFound
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200RoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200RoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewayCEDAR20Core20API200RoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Message Array of GUIDs for the created role assignments
		Message []string `json:"message"`

		// Result Result status of the operation
		Result string `json:"result"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGatewayCEDAR20Core20API200RoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewayCEDAR20Core20API200RoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGatewayCEDAR20Core20API200RoleListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteGatewayCEDAR20Core20API200RoleListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGatewayCEDAR20Core20API200RoleListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDAR20Core20API200RoleTypeApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// RoleTypes Array of role type objects
		RoleTypes []RoleType `json:"RoleTypes"`

		// Count Number of role types returned
		Count int32 `json:"count"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200RoleTypeApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200RoleTypeApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDAR20Core20API200SoftwareProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// AiSolnCatg AI solution categories
		AiSolnCatg *[]string `json:"aiSolnCatg"`

		// AiSolnCatgOther Other AI solution category
		AiSolnCatgOther *string `json:"aiSolnCatgOther"`

		// ApiDataArea API data areas
		ApiDataArea *[]string `json:"apiDataArea"`

		// ApiDescPubLocation API description publication location
		ApiDescPubLocation *string `json:"apiDescPubLocation"`

		// ApiDescPublished API description published status
		ApiDescPublished *string `json:"apiDescPublished"`

		// ApiFHIRUse API FHIR usage
		ApiFHIRUse *string `json:"apiFHIRUse"`

		// ApiFHIRUseOther Other API FHIR usage
		ApiFHIRUseOther *string `json:"apiFHIRUseOther"`

		// ApiHasPortal Whether API has portal
		ApiHasPortal *bool `json:"apiHasPortal"`

		// ApisAccessibility APIs accessibility
		ApisAccessibility *string `json:"apisAccessibility"`

		// ApisDeveloped APIs developed status
		ApisDeveloped *string `json:"apisDeveloped"`

		// DevelopmentStage Development stage
		DevelopmentStage *string `json:"developmentStage"`

		// HostingInfrastructureSystem Whether the system is a hosting infrastructure system
		HostingInfrastructureSystem *bool `json:"hostingInfrastructureSystem,omitempty"`

		// SoftwareProducts Array of software products
		SoftwareProducts *[]struct {
			// ApiGatewayUse Whether API gateway is used
			ApiGatewayUse *bool `json:"api_gateway_use"`

			// ElaPurchase ELA purchase information
			ElaPurchase *string `json:"ela_purchase"`

			// ElaVendorId ELA vendor ID
			ElaVendorId *string `json:"ela_vendor_id"`

			// ProvidesAiCapability Whether provides AI capability
			ProvidesAiCapability *bool `json:"provides_ai_capability"`

			// Refstr Reference string
			Refstr *string `json:"refstr"`

			// SoftwareCatagoryConnectionGuid Software category connection GUID
			SoftwareCatagoryConnectionGuid *string `json:"softwareCatagoryConnectionGuid"`

			// SoftwareVendorConnectionGuid Software vendor connection GUID
			SoftwareVendorConnectionGuid *string `json:"softwareVendorConnectionGuid"`

			// SoftwareCost Software cost
			SoftwareCost *string `json:"software_cost"`

			// SoftwareElaOrganization Software ELA organization
			SoftwareElaOrganization *string `json:"software_ela_organization"`

			// SoftwareName Software name
			SoftwareName *string `json:"software_name"`

			// SystemSoftwareConnectionGuid System software connection GUID
			SystemSoftwareConnectionGuid *string `json:"systemSoftwareConnectionGuid"`

			// TechnopediaCategory Technopedia category
			TechnopediaCategory *string `json:"technopedia_category"`

			// TechnopediaId Technopedia ID
			TechnopediaId *string `json:"technopedia_id"`

			// VendorName Vendor name
			VendorName *string `json:"vendor_name"`
		} `json:"softwareProducts"`

		// SystemHasApiGateway Whether system has API gateway
		SystemHasApiGateway *bool `json:"systemHasApiGateway"`

		// UsesAiTech Uses AI technology
		UsesAiTech *string `json:"usesAiTech"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200SoftwareProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200SoftwareProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewayCEDAR20Core20API200SoftwareProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGatewayCEDAR20Core20API200SoftwareProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewayCEDAR20Core20API200SoftwareProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDAR20Core20API200StakeholderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Stakeholders Array of stakeholder objects
		Stakeholders []struct {
			// Id Stakeholder ID
			Id string `json:"id"`

			// Name Stakeholder name
			Name string `json:"name"`

			// State Stakeholder state (only included when idsOnly is false)
			State *string `json:"state"`

			// Version Stakeholder version (only included when idsOnly is false)
			Version *string `json:"version"`
		} `json:"Stakeholders"`

		// Count Number of stakeholders returned
		Count int `json:"count"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200StakeholderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200StakeholderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGatewayCEDAR20Core20API200SupportContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *[]string `json:"message,omitempty"`
	}
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteGatewayCEDAR20Core20API200SupportContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGatewayCEDAR20Core20API200SupportContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDAR20Core20API200SupportContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// SupportContacts Array of support contact objects
		SupportContacts []struct {
			// Application Application/System GUID
			Application *string `json:"application"`

			// Email Support contact email address
			Email *string `json:"email"`

			// Id Support contact ID (GUID)
			Id *string `json:"id"`

			// Name Support contact name
			Name *string `json:"name"`

			// Phone Support contact phone number
			Phone *string `json:"phone"`

			// Title Support contact job title
			Title *string `json:"title"`

			// Url Support contact URL
			Url *string `json:"url"`
		} `json:"SupportContacts"`

		// Count Number of support contacts returned
		Count int `json:"count"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200SupportContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200SupportContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewayCEDAR20Core20API200SupportContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGatewayCEDAR20Core20API200SupportContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewayCEDAR20Core20API200SupportContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDAR20Core20API200SystemDetailIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		BusinessOwnerInformation *struct {
			N508UserInterface              *GetGatewayCEDAR20Core20API200SystemDetailId200BusinessOwnerInformation508UserInterface            `json:"508UserInterface"`
			BeneficiaryAddressPurpose      *[]GetGatewayCEDAR20Core20API200SystemDetailId200BusinessOwnerInformationBeneficiaryAddressPurpose `json:"beneficiaryAddressPurpose"`
			BeneficiaryAddressPurposeOther *string                                                                                            `json:"beneficiaryAddressPurposeOther"`
			BeneficiaryAddressSource       *[]string                                                                                          `json:"beneficiaryAddressSource"`
			BeneficiaryAddressSourceOther  *string                                                                                            `json:"beneficiaryAddressSourceOther"`
			BeneficiaryInformation         *[]GetGatewayCEDAR20Core20API200SystemDetailId200BusinessOwnerInformationBeneficiaryInformation    `json:"beneficiaryInformation"`
			CostPerYear                    *string                                                                                            `json:"costPerYear"`
			EditBeneficiaryInformation     *bool                                                                                              `json:"editBeneficiaryInformation"`
			IsCmsOwned                     *bool                                                                                              `json:"isCmsOwned"`
			NumberOfContractorFte          *string                                                                                            `json:"numberOfContractorFte"`
			NumberOfFederalFte             *string                                                                                            `json:"numberOfFederalFte"`
			NumberOfSupportedUsersPerMonth *string                                                                                            `json:"numberOfSupportedUsersPerMonth"`
			StoresBankingData              *bool                                                                                              `json:"storesBankingData"`
			StoresBeneficiaryAddress       *bool                                                                                              `json:"storesBeneficiaryAddress"`
			SystemOwnership                *string                                                                                            `json:"systemOwnership"`
		} `json:"BusinessOwnerInformation,omitempty"`
		DataCenterHosting *struct {
			MovingToCloud     *GetGatewayCEDAR20Core20API200SystemDetailId200DataCenterHostingMovingToCloud `json:"movingToCloud"`
			MovingToCloudDate *openapi_types.Date                                                           `json:"movingToCloudDate"`
		} `json:"DataCenterHosting,omitempty"`
		SoftwareProductDetails *struct {
			AiPlan              *GetGatewayCEDAR20Core20API200SystemDetailId200SoftwareProductDetailsAiPlan            `json:"aiPlan"`
			ApiDataArea         *[]GetGatewayCEDAR20Core20API200SystemDetailId200SoftwareProductDetailsApiDataArea     `json:"apiDataArea"`
			ApiFHIRUse          *GetGatewayCEDAR20Core20API200SystemDetailId200SoftwareProductDetailsApiFHIRUse        `json:"apiFHIRUse"`
			ApiFHIRUseOther     *string                                                                                `json:"apiFHIRUseOther"`
			ApisAccessibility   *GetGatewayCEDAR20Core20API200SystemDetailId200SoftwareProductDetailsApisAccessibility `json:"apisAccessibility"`
			ApisDeveloped       *GetGatewayCEDAR20Core20API200SystemDetailId200SoftwareProductDetailsApisDeveloped     `json:"apisDeveloped"`
			SystemAiType        *string                                                                                `json:"systemAiType"`
			SystemAiTypeOther   *string                                                                                `json:"systemAiTypeOther"`
			SystemHasApiGateway *bool                                                                                  `json:"systemHasApiGateway"`
		} `json:"SoftwareProductDetails,omitempty"`
		SystemMaintainerInformation *struct {
			AdHocAgileDeploymentFrequency         *GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationAdHocAgileDeploymentFrequency         `json:"adHocAgileDeploymentFrequency"`
			AgileUsed                             *bool                                                                                                           `json:"agileUsed"`
			AuthoritativeDatasource               *string                                                                                                         `json:"authoritativeDatasource"`
			BusinessArtifactsOnDemand             *bool                                                                                                           `json:"businessArtifactsOnDemand"`
			DataAtRestEncryptionKeyManagement     *GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationDataAtRestEncryptionKeyManagement     `json:"dataAtRestEncryptionKeyManagement"`
			DeploymentFrequency                   *GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationDeploymentFrequency                   `json:"deploymentFrequency"`
			DevCompletionPercent                  *string                                                                                                         `json:"devCompletionPercent"`
			DevWorkDescription                    *string                                                                                                         `json:"devWorkDescription"`
			EcapParticipation                     *bool                                                                                                           `json:"ecapParticipation"`
			FrontendAccessType                    *GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationFrontendAccessType                    `json:"frontendAccessType"`
			HardCodedIpAddress                    *bool                                                                                                           `json:"hardCodedIpAddress"`
			Ip6EnabledAssetPercent                *GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationIp6EnabledAssetPercent                `json:"ip6EnabledAssetPercent"`
			Ip6TransitionPlan                     *GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationIp6TransitionPlan                     `json:"ip6TransitionPlan"`
			IpEnabledAssetCount                   *int32                                                                                                          `json:"ipEnabledAssetCount"`
			LegalHoldCaseName                     *string                                                                                                         `json:"legalHoldCaseName"`
			LocallyStoredUserInformation          *string                                                                                                         `json:"locallyStoredUserInformation"`
			MajorRefreshDate                      *openapi_types.Date                                                                                             `json:"majorRefreshDate"`
			MultifactorAuthenticationMethod       *[]GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationMultifactorAuthenticationMethod     `json:"multifactorAuthenticationMethod"`
			MultifactorAuthenticationMethodOther  *string                                                                                                         `json:"multifactorAuthenticationMethodOther"`
			NetAccessibility                      *GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationNetAccessibility                      `json:"netAccessibility"`
			NetworkTrafficEncryptionKeyManagement *GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationNetworkTrafficEncryptionKeyManagement `json:"networkTrafficEncryptionKeyManagement"`
			NoMajorRefresh                        *bool                                                                                                           `json:"noMajorRefresh"`
			NoPersistentRecordsFlag               *bool                                                                                                           `json:"noPersistentRecordsFlag"`
			NoPlannedMajorRefresh                 *bool                                                                                                           `json:"noPlannedMajorRefresh"`
			OmDocumentationOnDemand               *bool                                                                                                           `json:"omDocumentationOnDemand"`
			PlansToRetireReplace                  *GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationPlansToRetireReplace                  `json:"plansToRetireReplace"`
			QuarterToRetireReplace                *string                                                                                                         `json:"quarterToRetireReplace"`
			RecordsManagementBucket               *[]string                                                                                                       `json:"recordsManagementBucket"`
			RecordsManagementDisposalLocation     *string                                                                                                         `json:"recordsManagementDisposalLocation"`
			RecordsManagementDisposalPlan         *string                                                                                                         `json:"recordsManagementDisposalPlan"`
			RecordsUnderLegalHold                 *bool                                                                                                           `json:"recordsUnderLegalHold"`
			SourceCodeOnDemand                    *bool                                                                                                           `json:"sourceCodeOnDemand"`
			SystemCustomization                   *GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationSystemCustomization                   `json:"systemCustomization"`
			SystemDataLocation                    *[]GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationSystemDataLocation                  `json:"systemDataLocation"`
			SystemDataLocationNotes               *string                                                                                                         `json:"systemDataLocationNotes"`
			SystemDesignOnDemand                  *bool                                                                                                           `json:"systemDesignOnDemand"`
			SystemProductionDate                  *openapi_types.Date                                                                                             `json:"systemProductionDate"`
			SystemRequirementsOnDemand            *bool                                                                                                           `json:"systemRequirementsOnDemand"`
			TestPlanOnDemand                      *bool                                                                                                           `json:"testPlanOnDemand"`
			TestReportsOnDemand                   *bool                                                                                                           `json:"testReportsOnDemand"`
			TestScriptsOnDemand                   *bool                                                                                                           `json:"testScriptsOnDemand"`
			YearToRetireReplace                   *string                                                                                                         `json:"yearToRetireReplace"`
		} `json:"SystemMaintainerInformation,omitempty"`
		Acronym                 *string             `json:"acronym"`
		AtoEffectiveDate        *openapi_types.Date `json:"atoEffectiveDate"`
		AtoExpirationDate       *openapi_types.Date `json:"atoExpirationDate"`
		BelongsTo               *string             `json:"belongsTo"`
		BusinessOwnerOrg        *string             `json:"businessOwnerOrg"`
		BusinessOwnerOrgComp    *string             `json:"businessOwnerOrgComp"`
		Description             *string             `json:"description"`
		IctObjectId             *string             `json:"ictObjectId"`
		Id                      *string             `json:"id"`
		Name                    *string             `json:"name"`
		NextVersionId           *string             `json:"nextVersionId"`
		PreviousVersionId       *string             `json:"previousVersionId"`
		State                   *string             `json:"state"`
		Status                  *string             `json:"status"`
		SystemMaintainerOrg     *string             `json:"systemMaintainerOrg"`
		SystemMaintainerOrgComp *string             `json:"systemMaintainerOrgComp"`
		Uuid                    *string             `json:"uuid"`
		Version                 *string             `json:"version"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}
type GetGatewayCEDAR20Core20API200SystemDetailId200BusinessOwnerInformation508UserInterface string
type GetGatewayCEDAR20Core20API200SystemDetailId200BusinessOwnerInformationBeneficiaryAddressPurpose string
type GetGatewayCEDAR20Core20API200SystemDetailId200BusinessOwnerInformationBeneficiaryInformation string
type GetGatewayCEDAR20Core20API200SystemDetailId200DataCenterHostingMovingToCloud string
type GetGatewayCEDAR20Core20API200SystemDetailId200SoftwareProductDetailsAiPlan string
type GetGatewayCEDAR20Core20API200SystemDetailId200SoftwareProductDetailsApiDataArea string
type GetGatewayCEDAR20Core20API200SystemDetailId200SoftwareProductDetailsApiFHIRUse string
type GetGatewayCEDAR20Core20API200SystemDetailId200SoftwareProductDetailsApisAccessibility string
type GetGatewayCEDAR20Core20API200SystemDetailId200SoftwareProductDetailsApisDeveloped string
type GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationAdHocAgileDeploymentFrequency string
type GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationDataAtRestEncryptionKeyManagement string
type GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationDeploymentFrequency string
type GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationFrontendAccessType string
type GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationIp6EnabledAssetPercent string
type GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationIp6TransitionPlan string
type GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationMultifactorAuthenticationMethod string
type GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationNetAccessibility string
type GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationNetworkTrafficEncryptionKeyManagement string
type GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationPlansToRetireReplace string
type GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationSystemCustomization string
type GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationSystemDataLocation string

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200SystemDetailIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200SystemDetailIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDAR20Core20API200SystemSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// SystemSummary Array of system summary objects
		SystemSummary []struct {
			// AtoEffectiveDate ATO effective date (only present when idsOnly is false)
			AtoEffectiveDate *openapi_types.Date `json:"atoEffectiveDate"`

			// AtoExpirationDate ATO expiration date (only present when idsOnly is false)
			AtoExpirationDate *openapi_types.Date `json:"atoExpirationDate"`

			// BusinessOwnerOrgComp Business owner organization component (only present when idsOnly is false)
			BusinessOwnerOrgComp *string `json:"businessOwnerOrgComp"`

			// Id System ID
			Id *string `json:"id"`

			// Name System name
			Name *string `json:"name"`

			// State System state (only present when idsOnly is false)
			State *string `json:"state"`

			// SystemMaintainerOrgComp System maintainer organization component (only present when idsOnly is false)
			SystemMaintainerOrgComp *string `json:"systemMaintainerOrgComp"`
		} `json:"SystemSummary"`

		// Count Number of items returned
		Count int `json:"count"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200SystemSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200SystemSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDAR20Core20API200SystemSummaryIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// SystemSummary Array of system summary records
		SystemSummary []struct {
			// Acronym System acronym
			Acronym *string `json:"acronym"`

			// Id System GUID
			Id *string `json:"id"`

			// NextVersionId Next version ID
			NextVersionId *string `json:"nextVersionId"`

			// PreviousVersionId Previous version ID
			PreviousVersionId *string `json:"previousVersionId"`
		} `json:"SystemSummary"`

		// Count Number of summary items returned
		Count int `json:"count"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200SystemSummaryIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200SystemSummaryIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDAR20Core20API200ThreatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Threats Array of threat objects (empty array when no threats found)
		Threats *[]struct {
			// AlternativeId ID assigned by a source system. For example, POA&M ID from CFACTS
			AlternativeId *string `json:"alternativeId"`
			ControlFamily *string `json:"controlFamily"`

			// DaysOpen Number of days the threat has been open
			DaysOpen int32 `json:"daysOpen"`

			// Id ID assigned by CEDAR
			Id *string `json:"id"`

			// ParentId ID of the object the threat is assigned to
			ParentId *string `json:"parentId"`

			// Type Type of threat (always POA&M)
			Type              string  `json:"type"`
			WeaknessRiskLevel *string `json:"weaknessRiskLevel"`
		} `json:"Threats"`

		// Count Number of threats returned (0 when no threats found)
		Count int32 `json:"count"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200ThreatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200ThreatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDAR20Core20API200UrlIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// UrlList Array of URL objects (only present when URLs are found)
		UrlList *[]struct {
			// Address A valid and full URL
			Address *string `json:"address"`

			// IsApiEndpoint A boolean flag to indicate whether URL is an API Endpoint
			IsApiEndpoint *bool `json:"isApiEndpoint"`

			// IsBehindWebApplicationFirewall A boolean flag to indicate whether the application is behind a Web Application Firewall (WAF)
			IsBehindWebApplicationFirewall *bool `json:"isBehindWebApplicationFirewall"`

			// IsVersionCodeRepository A boolean flag to indicate if this URL provides access to a versioned code repository?
			IsVersionCodeRepository *bool `json:"isVersionCodeRepository"`

			// UrlHostingEnv The hosting environment associated with a specific URL
			UrlHostingEnv *string `json:"urlHostingEnv"`

			// UrlId Unique key that uniquely identified the URL in database
			UrlId *string `json:"urlId"`
		} `json:"UrlList"`

		// Count Number of items returned (0 when no URLs found)
		Count int `json:"count"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200UrlIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200UrlIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDAR20Core20API200UserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Users *[]struct {
			// Application The application the user belongs to.
			Application *string `json:"application,omitempty"`

			// Email The user's email address.
			Email *openapi_types.Email `json:"email"`

			// FirstName The user's first name.
			FirstName *string `json:"firstName"`

			// Id The unique ID (GUID) of the user.
			Id *openapi_types.UUID `json:"id,omitempty"`

			// LastName The user's last name.
			LastName *string `json:"lastName"`

			// Phone The user's phone number.
			Phone *string `json:"phone"`

			// UserName The user's username.
			UserName *string `json:"userName"`
		} `json:"Users,omitempty"`
		Count *int32 `json:"count,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDAR20Core20API200UserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDAR20Core20API200UserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewayCEDAR20Core20API200UserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGatewayCEDAR20Core20API200UserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewayCEDAR20Core20API200UserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewayCEDAR20Core20APIExchangeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGatewayCEDAR20Core20APIExchangeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewayCEDAR20Core20APIExchangeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDARIntake10ClientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Body The request data body
		Body *string `json:"body,omitempty"`

		// BodyFormat The format of the request data
		BodyFormat *string `json:"bodyFormat,omitempty"`

		// CedarCreatedDate When CEDAR created the request record
		CedarCreatedDate *time.Time `json:"cedarCreatedDate,omitempty"`

		// CedarId The CEDAR intake request ID
		CedarId *string `json:"cedarId,omitempty"`

		// CedarLastUpdatedDate When CEDAR last updated the request record
		CedarLastUpdatedDate *time.Time `json:"cedarLastUpdatedDate,omitempty"`

		// CedarStatus The CEDAR status of the request
		CedarStatus *string `json:"cedarStatus,omitempty"`

		// CedarStatusMessage Status message from CEDAR (currently hardcoded as empty string for backwards compatibility)
		CedarStatusMessage *string `json:"cedarStatusMessage,omitempty"`

		// ClientCreatedDate When the client created the request
		ClientCreatedDate *time.Time `json:"clientCreatedDate,omitempty"`

		// ClientId The client ID
		ClientId *string `json:"clientId,omitempty"`

		// ClientLastUpdatedDate When the client last updated the request
		ClientLastUpdatedDate *time.Time `json:"clientLastUpdatedDate,omitempty"`

		// ClientStatus The client status of the request
		ClientStatus *string `json:"clientStatus,omitempty"`

		// Schema The request type schema
		Schema *string `json:"schema,omitempty"`

		// Type The request type
		Type *string `json:"type,omitempty"`

		// Version The client version
		Version *string `json:"version,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDARIntake10ClientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDARIntake10ClientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDARIntake10HealthCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Datetime Current datetime in YYYY-MM-DD HH:mm:ss format
		Datetime string `json:"datetime"`

		// Status Health status of the service
		Status string `json:"status"`

		// Timestamp Unix timestamp of the current time
		Timestamp int `json:"timestamp"`

		// Version API version
		Version string `json:"version"`
	}
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDARIntake10HealthCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDARIntake10HealthCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewayCEDARIntake10IntakeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message []string `json:"message"`
		Result  string   `json:"result"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGatewayCEDARIntake10IntakeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewayCEDARIntake10IntakeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDARIntake10IntakeCedarIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Body The request data body
		Body *string `json:"body,omitempty"`

		// BodyFormat The format of the request data
		BodyFormat *string `json:"bodyFormat,omitempty"`

		// CedarCreatedDate When CEDAR created the request record
		CedarCreatedDate *time.Time `json:"cedarCreatedDate,omitempty"`

		// CedarId The CEDAR intake request ID
		CedarId *string `json:"cedarId,omitempty"`

		// CedarLastUpdatedDate When CEDAR last updated the request record
		CedarLastUpdatedDate *time.Time `json:"cedarLastUpdatedDate,omitempty"`

		// CedarStatus The CEDAR status of the request
		CedarStatus *string `json:"cedarStatus,omitempty"`

		// CedarStatusMessage Status message from CEDAR (currently hardcoded as empty string for backwards compatibility)
		CedarStatusMessage *string `json:"cedarStatusMessage,omitempty"`

		// ClientCreatedDate When the client created the request
		ClientCreatedDate *time.Time `json:"clientCreatedDate,omitempty"`

		// ClientId The client ID
		ClientId *string `json:"clientId,omitempty"`

		// ClientLastUpdatedDate When the client last updated the request
		ClientLastUpdatedDate *time.Time `json:"clientLastUpdatedDate,omitempty"`

		// ClientStatus The client status of the request
		ClientStatus *string `json:"clientStatus,omitempty"`

		// Schema The request type schema
		Schema *string `json:"schema,omitempty"`

		// Type The request type
		Type *string `json:"type,omitempty"`

		// Version The client version
		Version *string `json:"version,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDARIntake10IntakeCedarIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDARIntake10IntakeCedarIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDARIntake10IntakeStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Statuses *[]struct {
			// CedarId Unique ID associated with the object in body
			CedarId *string `json:"cedarId,omitempty"`

			// CedarStatus CEDAR status describing the outcome of parsing, validation, and mapping of the payload
			CedarStatus *string `json:"cedarStatus,omitempty"`

			// CedarStatusMessage Message related to errors with the parsing, validation, and mapping of the payload (if applicable)
			CedarStatusMessage *string `json:"cedarStatusMessage,omitempty"`

			// ClientId Unique ID assigned by CEDAR
			ClientId *string `json:"clientId,omitempty"`

			// Version The version associated with the object in the body. This value can be incremented in the event a transaction needs to be resubmitted.
			Version *string `json:"version,omitempty"`
		} `json:"Statuses,omitempty"`
		Count *int `json:"count,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDARIntake10IntakeStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDARIntake10IntakeStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDARIntake10StatusCedarIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// CedarId The CEDAR intake request ID
		CedarId *string `json:"cedarId,omitempty"`

		// CedarStatus The CEDAR status of the request
		CedarStatus *string `json:"cedarStatus,omitempty"`

		// CedarStatusMessage Status message from CEDAR (currently hardcoded as empty string for backwards compatibility)
		CedarStatusMessage *string `json:"cedarStatusMessage,omitempty"`

		// ClientId The client ID
		ClientId *string `json:"clientId,omitempty"`

		// Version The client version
		Version *string `json:"version,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDARIntake10StatusCedarIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDARIntake10StatusCedarIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayCEDARIntake10StatusClientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// CedarId The CEDAR intake request ID
		CedarId *string `json:"cedarId,omitempty"`

		// CedarStatus The CEDAR status of the request
		CedarStatus *string `json:"cedarStatus,omitempty"`

		// CedarStatusMessage Status message from CEDAR (currently hardcoded as empty string for backwards compatibility)
		CedarStatusMessage *string `json:"cedarStatusMessage,omitempty"`

		// ClientId The client ID
		ClientId *string `json:"clientId,omitempty"`

		// Version The client version
		Version *string `json:"version,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetGatewayCEDARIntake10StatusClientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayCEDARIntake10StatusClientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewayLDAP10AuthenticateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGatewayLDAP10AuthenticateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewayLDAP10AuthenticateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayLDAP10PersonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayLDAP10PersonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayLDAP10PersonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayLDAP10PersonIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayLDAP10PersonIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayLDAP10PersonIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewaySystem20Census20Core20API200AdminReviewerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Reviewers List of reviewers.
		Reviewers *[]struct {
			// FullName The full name of the reviewer.
			FullName *string `json:"fullName,omitempty"`

			// Id Unique identifier for the reviewer.
			Id *string `json:"id,omitempty"`

			// Type The type of reviewer (e.g., QA, DA).
			Type *string `json:"type,omitempty"`

			// UserName The username of the reviewer.
			UserName *string `json:"userName,omitempty"`
		} `json:"Reviewers,omitempty"`

		// Count The number of reviewers returned.
		Count *int `json:"count,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewaySystem20Census20Core20API200AdminReviewerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewaySystem20Census20Core20API200AdminReviewerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGatewaySystem20Census20Core20API200AdminReviewerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON207 *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteGatewaySystem20Census20Core20API200AdminReviewerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGatewaySystem20Census20Core20API200AdminReviewerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewaySystem20Census20Core20API200AdminReviewerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON207 *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGatewaySystem20Census20Core20API200AdminReviewerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewaySystem20Census20Core20API200AdminReviewerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewaySystem20Census20Core20API200BudgetAndContractsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Budgets List of budgets for the system.
		Budgets *[]map[string]interface{} `json:"Budgets,omitempty"`

		// Contracts List of contracts for the system.
		Contracts *[]map[string]interface{} `json:"Contracts,omitempty"`

		// SystemId The system identifier.
		SystemId *openapi_types.UUID `json:"systemId,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewaySystem20Census20Core20API200BudgetAndContractsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewaySystem20Census20Core20API200BudgetAndContractsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewaySystem20Census20Core20API200BudgetAndContractsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGatewaySystem20Census20Core20API200BudgetAndContractsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewaySystem20Census20Core20API200BudgetAndContractsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewaySystem20Census20Core20API200BusinessOwnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGatewaySystem20Census20Core20API200BusinessOwnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewaySystem20Census20Core20API200BusinessOwnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGatewaySystem20Census20Core20API200DataExchangeNotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteGatewaySystem20Census20Core20API200DataExchangeNotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGatewaySystem20Census20Core20API200DataExchangeNotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGatewaySystem20Census20Core20API200DataExchangeStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *[]string `json:"message,omitempty"`
	}
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteGatewaySystem20Census20Core20API200DataExchangeStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGatewaySystem20Census20Core20API200DataExchangeStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewaySystem20Census20Core20API200DataExchangeStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// ExchangeStatus List of exchange statuses.
		ExchangeStatus *[]struct {
			// Direction Direction of the data exchange.
			Direction *GetGatewaySystem20Census20Core20API200DataExchangeStatus200ExchangeStatusDirection `json:"direction"`

			// ExchangeId The exchange identifier.
			ExchangeId *string `json:"exchangeId"`

			// PartnerId The partner identifier.
			PartnerId *string `json:"partnerId"`

			// PartnerStatus Status of the partner.
			PartnerStatus *string `json:"partnerStatus"`

			// ReviewerStatus Status from reviewer.
			ReviewerStatus *string `json:"reviewerStatus"`

			// SystemId The system identifier.
			SystemId *string `json:"systemId"`

			// SystemStatus Status of the system.
			SystemStatus *string `json:"systemStatus"`
		} `json:"ExchangeStatus,omitempty"`

		// Count Number of exchange statuses returned.
		Count *int `json:"count,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}
type GetGatewaySystem20Census20Core20API200DataExchangeStatus200ExchangeStatusDirection string

// Status returns HTTPResponse.Status
func (r GetGatewaySystem20Census20Core20API200DataExchangeStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewaySystem20Census20Core20API200DataExchangeStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewaySystem20Census20Core20API200DataExchangeNotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ExchangeNotes *[]struct {
			CreatedOn  *time.Time `json:"createdOn,omitempty"`
			ExchangeId *string    `json:"exchangeId,omitempty"`
			Note       *string    `json:"note,omitempty"`
			NoteId     *string    `json:"noteId,omitempty"`
			UserId     *string    `json:"userId,omitempty"`
			UserRole   *string    `json:"userRole,omitempty"`
		} `json:"ExchangeNotes,omitempty"`
		Count *int `json:"count,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewaySystem20Census20Core20API200DataExchangeNotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewaySystem20Census20Core20API200DataExchangeNotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewaySystem20Census20Core20API200DataExchangeNotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// Inserted Number of notes inserted
		Inserted *int `json:"inserted,omitempty"`

		// Updated Number of notes updated (always 0 for add operation)
		Updated *int `json:"updated,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGatewaySystem20Census20Core20API200DataExchangeNotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewaySystem20Census20Core20API200DataExchangeNotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewaySystem20Census20Core20API200DrmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Records List of DRM flat hierarchy records.
		Records *[]struct {
			// DrmCategory The name of the DRM category (mapped from DRM Category Name).
			DrmCategory *string `json:"drmCategory"`

			// DrmName The name of the DRM area (mapped from DRM Area Name).
			DrmName *string `json:"drmName"`
		} `json:"records,omitempty"`
		Result *string `json:"result,omitempty"`
	}
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON500 *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetGatewaySystem20Census20Core20API200DrmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewaySystem20Census20Core20API200DrmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewaySystem20Census20Core20API200NoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Message Array of descriptive messages about the operation results, including count of notes inserted.
		Message []string `json:"message"`

		// Result Operation result status. Always "success" for successful operations.
		Result PostGatewaySystem20Census20Core20API200Note200Result `json:"result"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON500 *InternalServerError
}
type PostGatewaySystem20Census20Core20API200Note200Result string

// Status returns HTTPResponse.Status
func (r PostGatewaySystem20Census20Core20API200NoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewaySystem20Census20Core20API200NoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutGatewaySystem20Census20Core20API200NoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutGatewaySystem20Census20Core20API200NoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutGatewaySystem20Census20Core20API200NoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGatewaySystem20Census20Core20API200NoteListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteGatewaySystem20Census20Core20API200NoteListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGatewaySystem20Census20Core20API200NoteListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewaySystem20Census20Core20API200NoteListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Notes *[]struct {
			CreatedOn *time.Time `json:"createdOn,omitempty"`
			Note      *string    `json:"note,omitempty"`
			NoteId    *string    `json:"noteId,omitempty"`
			PageName  *string    `json:"pageName,omitempty"`
			SystemId  *string    `json:"systemId,omitempty"`
			UserFirst *string    `json:"userFirst,omitempty"`
			UserId    *string    `json:"userId,omitempty"`
			UserLast  *string    `json:"userLast,omitempty"`
			UserRole  *string    `json:"userRole,omitempty"`
		} `json:"Notes,omitempty"`
		Count *int `json:"count,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewaySystem20Census20Core20API200NoteListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewaySystem20Census20Core20API200NoteListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewaySystem20Census20Core20API200PageUrlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Urls List of URLs associated with the system.
		Urls *[]struct {
			// Link A valid and full system URL.
			Link *string `json:"link,omitempty"`

			// ProvidesVerCodeAccess A boolean flag to indicate if this URL provides access to a versioned code repository.
			ProvidesVerCodeAccess *string `json:"providesVerCodeAccess,omitempty"`

			// UrlApiEndpoint A boolean flag to indicate whether URL is an API Endpoint.
			UrlApiEndpoint *string `json:"urlApiEndpoint,omitempty"`

			// UrlApiWaf A boolean flag to indicate whether application is behind a Web Application Firewall (WAF).
			UrlApiWaf *string `json:"urlApiWaf,omitempty"`

			// UrlHostingEnv A string that contains what hosting environment this URL is for.
			UrlHostingEnv *string `json:"urlHostingEnv,omitempty"`

			// UrlId Unique key that uniquely identifies the URL in database.
			UrlId *string `json:"urlId,omitempty"`
		} `json:"Urls,omitempty"`

		// Count Number of URLs returned (as string).
		Count string `json:"count"`

		// NoURLsFlag Flag indicating no URLs are available.
		NoURLsFlag *bool `json:"noURLsFlag"`

		// PageName The page name, only present when count is 0.
		PageName *string `json:"pageName"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewaySystem20Census20Core20API200PageUrlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewaySystem20Census20Core20API200PageUrlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewaySystem20Census20Core20API200PageUrlsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGatewaySystem20Census20Core20API200PageUrlsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewaySystem20Census20Core20API200PageUrlsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewaySystem20Census20Core20API200PageBusinessOwnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// SystemOwnership Overall ownership of the system (e.g., "Federal", "Contractor").
		SystemOwnership *string `json:"SystemOwnership"`

		// CostPerYear Annual cost of the system.
		CostPerYear *string `json:"costPerYear"`

		// Description Description of the system.
		Description *string `json:"description"`

		// EditBeneficiaryInformation Indicates if beneficiary information can be edited.
		EditBeneficiaryInformation *bool `json:"editBeneficiaryInformation"`

		// Id The GUID of the system.
		Id *string `json:"id,omitempty"`

		// NumberOfContractorFte Number of Contractor FTEs supporting the system.
		NumberOfContractorFte *string `json:"numberOfContractorFte"`

		// NumberOfFederalFte Number of Federal FTEs supporting the system.
		NumberOfFederalFte *string `json:"numberOfFederalFte"`

		// NumberOfSupportedUsersPerMonth Number of direct system users per month.
		NumberOfSupportedUsersPerMonth *string `json:"numberOfSupportedUsersPerMonth"`

		// PageName The page name for the business owner information.
		PageName *string `json:"pageName,omitempty"`

		// StoresHealthDisparityData Indicates if the system stores health disparity data.
		StoresHealthDisparityData *bool `json:"storesHealthDisparityData"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewaySystem20Census20Core20API200PageBusinessOwnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewaySystem20Census20Core20API200PageBusinessOwnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewaySystem20Census20Core20API200PageDataCentersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Deployments *[]struct {
			Deployment *struct {
				DataCenter *struct {
					Address1     *string                                                                                        `json:"address1,omitempty"`
					Address2     *string                                                                                        `json:"address2,omitempty"`
					AddressState *string                                                                                        `json:"addressState,omitempty"`
					City         *string                                                                                        `json:"city,omitempty"`
					Description  *string                                                                                        `json:"description,omitempty"`
					EndDate      *openapi_types.Date                                                                            `json:"endDate,omitempty"`
					Id           *string                                                                                        `json:"id,omitempty"`
					Name         *string                                                                                        `json:"name,omitempty"`
					StartDate    *openapi_types.Date                                                                            `json:"startDate,omitempty"`
					State        *GetGatewaySystem20Census20Core20API200PageDataCenters200DeploymentsDeploymentDataCenterState  `json:"state,omitempty"`
					Status       *GetGatewaySystem20Census20Core20API200PageDataCenters200DeploymentsDeploymentDataCenterStatus `json:"status,omitempty"`
					Version      *string                                                                                        `json:"version,omitempty"`
					Zip          *string                                                                                        `json:"zip,omitempty"`
				} `json:"DataCenter,omitempty"`
				AwsEnclave          *string                                                                                      `json:"awsEnclave,omitempty"`
				AwsEnclaveOther     *string                                                                                      `json:"awsEnclaveOther,omitempty"`
				ContractorName      *string                                                                                      `json:"contractorName,omitempty"`
				DeploymentElementId *string                                                                                      `json:"deploymentElementId,omitempty"`
				DeploymentType      *GetGatewaySystem20Census20Core20API200PageDataCenters200DeploymentsDeploymentDeploymentType `json:"deploymentType,omitempty"`
				Description         *string                                                                                      `json:"description,omitempty"`
				EndDate             *openapi_types.Date                                                                          `json:"endDate,omitempty"`
				HasProductionData   *string                                                                                      `json:"hasProductionData,omitempty"`
				Id                  string                                                                                       `json:"id"`
				Name                string                                                                                       `json:"name"`
				NetworkEncryption   *string                                                                                      `json:"networkEncryption,omitempty"`
				OtherSpecialUsers   *string                                                                                      `json:"otherSpecialUsers,omitempty"`
				StartDate           *openapi_types.Date                                                                          `json:"startDate,omitempty"`
				State               *GetGatewaySystem20Census20Core20API200PageDataCenters200DeploymentsDeploymentState          `json:"state,omitempty"`
				Status              *GetGatewaySystem20Census20Core20API200PageDataCenters200DeploymentsDeploymentStatus         `json:"status,omitempty"`
				SystemId            string                                                                                       `json:"systemId"`
				SystemName          *string                                                                                      `json:"systemName,omitempty"`
				SystemVersion       *string                                                                                      `json:"systemVersion,omitempty"`
				UsersRequiringMFA   *string                                                                                      `json:"usersRequiringMFA,omitempty"`
				WanType             *string                                                                                      `json:"wanType,omitempty"`
				WanTypeOther        *string                                                                                      `json:"wanTypeOther,omitempty"`
			} `json:"Deployment,omitempty"`
			Deleted *bool `json:"deleted,omitempty"`
			Updated *bool `json:"updated,omitempty"`
		} `json:"Deployments,omitempty"`
		Count             int                 `json:"count"`
		MovingToCloud     *string             `json:"movingToCloud,omitempty"`
		MovingToCloudDate *openapi_types.Date `json:"movingToCloudDate,omitempty"`
		PageName          *string             `json:"pageName,omitempty"`
		SystemId          *string             `json:"systemId,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}
type GetGatewaySystem20Census20Core20API200PageDataCenters200DeploymentsDeploymentDataCenterState string
type GetGatewaySystem20Census20Core20API200PageDataCenters200DeploymentsDeploymentDataCenterStatus string
type GetGatewaySystem20Census20Core20API200PageDataCenters200DeploymentsDeploymentDeploymentType string
type GetGatewaySystem20Census20Core20API200PageDataCenters200DeploymentsDeploymentState string
type GetGatewaySystem20Census20Core20API200PageDataCenters200DeploymentsDeploymentStatus string

// Status returns HTTPResponse.Status
func (r GetGatewaySystem20Census20Core20API200PageDataCentersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewaySystem20Census20Core20API200PageDataCentersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewaySystem20Census20Core20API200PageDataCentersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGatewaySystem20Census20Core20API200PageDataCentersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewaySystem20Census20Core20API200PageDataCentersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewaySystem20Census20Core20API200PageDataExchangeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DataExchanges *[]struct {
			Exchange *struct {
				ApiOwnership                    *string                                                                                                        `json:"apiOwnership"`
				BusinessPurposeOfAddress        *[]string                                                                                                      `json:"businessPurposeOfAddress"`
				ConnectionFrequency             *[]string                                                                                                      `json:"connectionFrequency"`
				ContainsBankingData             *GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeContainsBankingData             `json:"containsBankingData"`
				ContainsBeneficiaryAddress      *GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeContainsBeneficiaryAddress      `json:"containsBeneficiaryAddress"`
				ContainsPhi                     *GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeContainsPhi                     `json:"containsPhi"`
				ContainsPii                     *GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeContainsPii                     `json:"containsPii"`
				DataExchangeAgreement           *string                                                                                                        `json:"dataExchangeAgreement"`
				DataFormat                      *string                                                                                                        `json:"dataFormat"`
				DataFormatOther                 *string                                                                                                        `json:"dataFormatOther"`
				ExchangeCUIDescription          *string                                                                                                        `json:"exchangeCUIDescription"`
				ExchangeCUIType                 *[]string                                                                                                      `json:"exchangeCUIType"`
				ExchangeConnectionAuthenticated *GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeExchangeConnectionAuthenticated `json:"exchangeConnectionAuthenticated"`
				ExchangeContainsCUI             *GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeExchangeContainsCUI             `json:"exchangeContainsCUI"`
				ExchangeDescription             *string                                                                                                        `json:"exchangeDescription"`
				ExchangeEndDate                 *openapi_types.Date                                                                                            `json:"exchangeEndDate"`
				ExchangeId                      *string                                                                                                        `json:"exchangeId"`
				ExchangeName                    *string                                                                                                        `json:"exchangeName"`
				ExchangeNetworkProtocol         *[]string                                                                                                      `json:"exchangeNetworkProtocol"`
				ExchangeNetworkProtocolOther    *string                                                                                                        `json:"exchangeNetworkProtocolOther"`

				// ExchangePrimaryDataArea The primary Data Reference Model (DRM) for the exchange.
				ExchangePrimaryDataArea *string             `json:"exchangePrimaryDataArea"`
				ExchangeRetiredDate     *openapi_types.Date `json:"exchangeRetiredDate"`

				// ExchangeSecondaryDataArea Array of secondary Data Reference Models (DRMs) for the exchange.
				ExchangeSecondaryDataArea *[]string                                                                                               `json:"exchangeSecondaryDataArea"`
				ExchangeStartDate         *openapi_types.Date                                                                                     `json:"exchangeStartDate"`
				ExchangeState             *string                                                                                                 `json:"exchangeState"`
				ExchangeVersion           *string                                                                                                 `json:"exchangeVersion"`
				FromOwnerId               *string                                                                                                 `json:"fromOwnerId"`
				FromOwnerName             *string                                                                                                 `json:"fromOwnerName"`
				FromOwnerType             *string                                                                                                 `json:"fromOwnerType"`
				IsAddressEditable         *GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeIsAddressEditable        `json:"isAddressEditable"`
				IsBeneficiaryMailingFile  *GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeIsBeneficiaryMailingFile `json:"isBeneficiaryMailingFile"`
				NumOfRecords              *string                                                                                                 `json:"numOfRecords"`
				SharedViaApi              *GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeSharedViaApi             `json:"sharedViaApi"`
				ToOwnerId                 *string                                                                                                 `json:"toOwnerId"`
				ToOwnerName               *string                                                                                                 `json:"toOwnerName"`
				ToOwnerType               *string                                                                                                 `json:"toOwnerType"`
				TypeOfData                *[]struct {
					Id   *string `json:"id"`
					Name *string `json:"name"`
				} `json:"typeOfData"`
			} `json:"Exchange,omitempty"`
			Status *struct {
				Deleted        *bool   `json:"deleted"`
				Direction      *string `json:"direction"`
				ExchangeId     *string `json:"exchangeId"`
				PartnerId      *string `json:"partnerId"`
				PartnerStatus  *string `json:"partnerStatus"`
				ReviewerStatus *string `json:"reviewerStatus"`
				SystemId       *string `json:"systemId"`
				SystemStatus   *string `json:"systemStatus"`
			} `json:"Status,omitempty"`
			Deleted   *bool   `json:"deleted"`
			Direction *string `json:"direction"`
		} `json:"DataExchanges,omitempty"`
		Count    *int    `json:"count,omitempty"`
		PageName *string `json:"pageName,omitempty"`
		SystemId *string `json:"systemId,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}
type GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeContainsBankingData string
type GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeContainsBeneficiaryAddress string
type GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeContainsPhi string
type GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeContainsPii string
type GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeExchangeConnectionAuthenticated string
type GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeExchangeContainsCUI string
type GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeIsAddressEditable string
type GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeIsBeneficiaryMailingFile string
type GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeSharedViaApi string

// Status returns HTTPResponse.Status
func (r GetGatewaySystem20Census20Core20API200PageDataExchangeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewaySystem20Census20Core20API200PageDataExchangeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewaySystem20Census20Core20API200PageDataExchangeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGatewaySystem20Census20Core20API200PageDataExchangeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewaySystem20Census20Core20API200PageDataExchangeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewaySystem20Census20Core20API200PageSoftwareProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// SoftwareProducts Array of software products associated with the system
		SoftwareProducts *[]struct {
			// ActualVersion FY26: Actual version deployed/installed
			ActualVersion *string `json:"actualVersion,omitempty"`

			// ApiGatewayUse Whether software is used as API gateway
			ApiGatewayUse *bool `json:"api_gateway_use,omitempty"`

			// ClosestVersion FY26: Closest available version if exact match not found
			ClosestVersion *string `json:"closestVersion,omitempty"`

			// Edition Technopedia edition (e.g., Professional, Enterprise)
			Edition *string `json:"edition,omitempty"`

			// ProvidesAiCapability Whether software provides AI capabilities
			ProvidesAiCapability *GetGatewaySystem20Census20Core20API200PageSoftwareProducts200SoftwareProductsProvidesAiCapability `json:"provides_ai_capability,omitempty"`

			// SoftwareCost Software cost
			SoftwareCost *string `json:"software_cost,omitempty"`

			// SoftwareName Name of the software product
			SoftwareName *string `json:"software_name,omitempty"`

			// TechnopediaCategory Software category from Technopedia
			TechnopediaCategory *string `json:"technopedia_category,omitempty"`

			// TechnopediaId Technopedia Release ID
			TechnopediaId *string `json:"technopedia_id,omitempty"`

			// VendorName Vendor/manufacturer name
			VendorName *string `json:"vendor_name,omitempty"`

			// Version Technopedia version
			Version *string `json:"version,omitempty"`
		} `json:"softwareProducts,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}
type GetGatewaySystem20Census20Core20API200PageSoftwareProducts200SoftwareProductsProvidesAiCapability string

// Status returns HTTPResponse.Status
func (r GetGatewaySystem20Census20Core20API200PageSoftwareProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewaySystem20Census20Core20API200PageSoftwareProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewaySystem20Census20Core20API200PageSystemDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Records List of system data page census records.
		Records *[]struct {
			// Acronym The acronym of the system.
			Acronym *string `json:"acronym"`

			// AmountOfData Amount or volume of data managed by the system.
			AmountOfData *string `json:"amountOfData"`

			// ApiDeveloped Whether APIs have been developed for the system.
			ApiDeveloped *string `json:"apiDeveloped"`

			// BeneficiaryInformation Information about beneficiaries associated with the system data (converted from comma-separated string).
			BeneficiaryInformation *[]string `json:"beneficiaryInformation,omitempty"`

			// DoesTheApiUseFhir Whether the API uses FHIR standards.
			DoesTheApiUseFhir *string `json:"doesTheApiUseFhir"`

			// DoesTheApiUseFhirOther Other FHIR-related information.
			DoesTheApiUseFhirOther *string `json:"doesTheApiUseFhirOther"`

			// EditBeneficiaryInformation Whether beneficiary information can be edited.
			EditBeneficiaryInformation *string `json:"editBeneficiaryInformation"`

			// ExternalUserSensitiveDataAccess Whether external users have access to sensitive data.
			ExternalUserSensitiveDataAccess *string `json:"externalUserSensitiveDataAccess"`

			// PermitsDataTransferOutsideUS Whether the system permits data transfer outside the United States.
			PermitsDataTransferOutsideUS *string `json:"permitsDataTransferOutsideUS"`

			// PrimaryDRM The primary Data Reference Model (DRM) for the system.
			PrimaryDRM *string `json:"primaryDRM"`

			// SecondaryDRM Array of all Data Reference Models (DRMs) for the system, including the primary DRM.
			SecondaryDRM *[]string `json:"secondaryDRM,omitempty"`

			// SparxSystemGuid The Sparx system GUID.
			SparxSystemGuid *string `json:"sparxSystemGuid"`

			// SparxSystemId The Sparx system ID.
			SparxSystemId *int `json:"sparxSystemId"`

			// SystemDataAuthoritativeSource The authoritative source for the system data.
			SystemDataAuthoritativeSource *string `json:"systemDataAuthoritativeSource"`

			// SystemDataInvolvement Description of how the system is involved with data management (converted from comma-separated string).
			SystemDataInvolvement *[]string `json:"systemDataInvolvement,omitempty"`

			// SystemDataLocation Physical or logical locations of the system data (converted from comma-separated string).
			SystemDataLocation *[]string `json:"systemDataLocation,omitempty"`

			// SystemDataLocationNotes Additional notes about the system data location.
			SystemDataLocationNotes *string `json:"systemDataLocationNotes"`

			// SystemDataSummary Summary of the system data.
			SystemDataSummary *string `json:"systemDataSummary"`

			// SystemName The name of the system.
			SystemName *string `json:"systemName"`
		} `json:"records,omitempty"`
		Result *string `json:"result,omitempty"`
	}
	JSON400 *struct {
		// Error Error message describing the parameter validation failure.
		Error *string `json:"error,omitempty"`
	}
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON500 *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetGatewaySystem20Census20Core20API200PageSystemDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewaySystem20Census20Core20API200PageSystemDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewaySystem20Census20Core20API200PageSystemDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Message Success message.
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *struct {
		// Error Error message describing the validation failure.
		Error *string `json:"error,omitempty"`
	}
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON500 *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PostGatewaySystem20Census20Core20API200PageSystemDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewaySystem20Census20Core20API200PageSystemDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewaySystem20Census20Core20API200PageSystemMaintainerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// AdHocAgileDeploymentFrequency Ad-hoc agile deployment frequency.
		AdHocAgileDeploymentFrequency *string `json:"adHocAgileDeploymentFrequency"`

		// AgileUsed Indicates if Agile methodology is used for development.
		AgileUsed *bool `json:"agileUsed"`

		// AnotherCMSsystem Indicates if it is another CMS system.
		AnotherCMSsystem *bool `json:"anotherCMSsystem"`

		// AuthoritativeDatasource Authoritative data source for the system.
		AuthoritativeDatasource *string `json:"authoritativeDatasource"`

		// BusinessArtifactsLocation Location of business artifacts.
		BusinessArtifactsLocation *string `json:"businessArtifactsLocation"`

		// BusinessArtifactsOnDemand Availability of business artifacts on demand.
		BusinessArtifactsOnDemand *bool `json:"businessArtifactsOnDemand"`

		// DataAtRestEncryptionKeyManagement Data at rest encryption key management details.
		DataAtRestEncryptionKeyManagement *string `json:"dataAtRestEncryptionKeyManagement"`

		// DeploymentFrequency Frequency of system deployments.
		DeploymentFrequency *string `json:"deploymentFrequency"`

		// DevWorkDescription Description of ongoing development work.
		DevWorkDescription *string `json:"devWorkDescription"`

		// FrontendAccessType Type of frontend access.
		FrontendAccessType *string `json:"frontendAccessType"`

		// HardCodedIpAddress Indicates if the system uses hardcoded IP addresses.
		HardCodedIpAddress *bool `json:"hardCodedIpAddress"`

		// HasMetadataGlossary Indicates if the system has a metadata glossary.
		HasMetadataGlossary *bool `json:"hasMetadataGlossary"`

		// HaveEnterpriseDataLakePlan Status of Enterprise Data Lake plan.
		HaveEnterpriseDataLakePlan *string `json:"haveEnterpriseDataLakePlan"`

		// Id The unique identifier (GUID) of the system.
		Id *string `json:"id,omitempty"`

		// IdentityManagementSolution Identity management solutions used.
		IdentityManagementSolution *[]string `json:"identityManagementSolution"`

		// IdentityManagementSolutionOther Other identity management solutions.
		IdentityManagementSolutionOther *string `json:"identityManagementSolutionOther"`

		// Ip6EnabledAssetPercent Percentage of IPV6 enabled assets.
		Ip6EnabledAssetPercent *string `json:"ip6EnabledAssetPercent"`

		// Ip6TransitionPlan Long-term IPV6 transition plan.
		Ip6TransitionPlan *string `json:"ip6TransitionPlan"`

		// IpEnabledAssetCount Count of IP enabled assets.
		IpEnabledAssetCount *int64 `json:"ipEnabledAssetCount"`

		// IsRecordManagementScheduleApproved Indicates if the record management schedule is approved.
		IsRecordManagementScheduleApproved *bool `json:"isRecordManagementScheduleApproved"`

		// LegalHoldCaseName Name of the legal hold case.
		LegalHoldCaseName *string `json:"legalHoldCaseName"`

		// LocallyStoredUserInformation Indicates if user information is stored locally.
		LocallyStoredUserInformation *bool `json:"locallyStoredUserInformation"`

		// MajorRefreshDate Date of the last major technology refresh.
		MajorRefreshDate *string `json:"majorRefreshDate"`

		// MultifactorAuthenticationMethod Methods of multifactor authentication used.
		MultifactorAuthenticationMethod *[]string `json:"multifactorAuthenticationMethod"`

		// MultifactorAuthenticationMethodOther Other multifactor authentication methods.
		MultifactorAuthenticationMethodOther *string `json:"multifactorAuthenticationMethodOther"`

		// Name The name of the system.
		Name *string `json:"name"`

		// NetAccessibility Network accessibility of the system.
		NetAccessibility *string `json:"netAccessibility"`

		// NetworkTrafficEncryptionKeyManagement Network traffic encryption key management details.
		NetworkTrafficEncryptionKeyManagement *string `json:"networkTrafficEncryptionKeyManagement"`

		// NextMajorRefreshDate Date of the next planned major technology refresh.
		NextMajorRefreshDate *string `json:"nextMajorRefreshDate"`

		// NoMajorRefresh Indicates if there has been no major refresh.
		NoMajorRefresh *bool `json:"noMajorRefresh"`

		// NoPersistentRecordsFlag Indicates if there are no persistent records.
		NoPersistentRecordsFlag *bool `json:"noPersistentRecordsFlag"`

		// NoPlannedMajorRefresh Indicates if there is no planned major refresh.
		NoPlannedMajorRefresh *bool `json:"noPlannedMajorRefresh"`

		// OmDocumentationLocation Location of O&M documentation.
		OmDocumentationLocation *string `json:"omDocumentationLocation"`

		// OmDocumentationOnDemand Availability of O&M documentation on demand.
		OmDocumentationOnDemand *bool `json:"omDocumentationOnDemand"`

		// PageName The name of the page, always "SystemMaintainerBasicInfo".
		PageName *string `json:"pageName,omitempty"`

		// PlansToRetireReplace Plans to retire or replace the system.
		PlansToRetireReplace *string `json:"plansToRetireReplace"`

		// QuarterToRetireReplace Quarter planned for retirement or replacement.
		QuarterToRetireReplace *string `json:"quarterToRetireReplace"`

		// RecordManagementFormatOther Other records management formats.
		RecordManagementFormatOther *string `json:"recordManagementFormatOther"`

		// RecordsManagementBucket List of records management buckets.
		RecordsManagementBucket *[]string `json:"recordsManagementBucket"`

		// RecordsManagementDisposalLocation Location for records management disposal.
		RecordsManagementDisposalLocation *string `json:"recordsManagementDisposalLocation"`

		// RecordsManagementDisposalPlan Indicates if a records management disposal plan exists.
		RecordsManagementDisposalPlan *bool `json:"recordsManagementDisposalPlan"`

		// RecordsManagementFormat Formats of records management.
		RecordsManagementFormat *[]string `json:"recordsManagementFormat"`

		// RecordsUnderLegalHold Indicates if records are under legal hold.
		RecordsUnderLegalHold *bool `json:"recordsUnderLegalHold"`

		// SourceCodeLoction Location of source code.
		SourceCodeLoction *string `json:"sourceCodeLoction"`

		// SourceCodeOnDemand Availability of source code on demand.
		SourceCodeOnDemand *bool `json:"sourceCodeOnDemand"`

		// StoreInCentralDataCatalog Indicates if data is stored in a central data catalog.
		StoreInCentralDataCatalog *bool `json:"storeInCentralDataCatalog"`

		// SystemCustomization Description of system customization.
		SystemCustomization *string `json:"systemCustomization"`

		// SystemDataLocation Locations where system data is stored.
		SystemDataLocation *[]string `json:"systemDataLocation"`

		// SystemDataLocationNotes Notes regarding system data locations.
		SystemDataLocationNotes *string `json:"systemDataLocationNotes"`

		// SystemDesignLocation Location of system design documents.
		SystemDesignLocation *string `json:"systemDesignLocation"`

		// SystemDesignOnDemand Availability of system design on demand.
		SystemDesignOnDemand *bool `json:"systemDesignOnDemand"`

		// SystemProductionDate Date when the system went into production.
		SystemProductionDate *string `json:"systemProductionDate"`

		// SystemRequirementsLocation Location of system requirements.
		SystemRequirementsLocation *string `json:"systemRequirementsLocation"`

		// SystemRequirementsOnDemand Availability of system requirements on demand.
		SystemRequirementsOnDemand *bool `json:"systemRequirementsOnDemand"`

		// TestPlanLocation Location of test plans.
		TestPlanLocation *string `json:"testPlanLocation"`

		// TestPlanOnDemand Availability of test plans on demand.
		TestPlanOnDemand *bool `json:"testPlanOnDemand"`

		// TestReportsLocation Location of test reports.
		TestReportsLocation *string `json:"testReportsLocation"`

		// TestReportsOnDemand Availability of test reports on demand.
		TestReportsOnDemand *bool `json:"testReportsOnDemand"`

		// TestScriptsLocation Location of test scripts.
		TestScriptsLocation *string `json:"testScriptsLocation"`

		// TestScriptsOnDemand Availability of test scripts on demand.
		TestScriptsOnDemand *bool `json:"testScriptsOnDemand"`

		// Version Version of the system.
		Version *string `json:"version"`

		// YearToRetireReplace Year planned for retirement or replacement.
		YearToRetireReplace *string `json:"yearToRetireReplace"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON404 *NotFound
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewaySystem20Census20Core20API200PageSystemMaintainerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewaySystem20Census20Core20API200PageSystemMaintainerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewaySystem20Census20Core20API200PageSystemsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// SystemsList List of systems.
		SystemsList *[]struct {
			// Acronym The acronym of the system.
			Acronym *string `json:"acronym"`

			// BelongsTo The organization the system belongs to.
			BelongsTo *string `json:"belongsTo"`

			// BusinessOwnerOrg The business owner organization.
			BusinessOwnerOrg *string `json:"businessOwnerOrg"`

			// BusinessOwnerOrgComp The business owner organization component.
			BusinessOwnerOrgComp *string `json:"businessOwnerOrgComp"`

			// CensusStatus The census status of the system.
			CensusStatus *string `json:"censusStatus"`

			// DaReviewerAssignmentId The DA reviewer assignment ID.
			DaReviewerAssignmentId *string `json:"daReviewerAssignmentId"`

			// DaReviewerFirstName The first name of the DA reviewer.
			DaReviewerFirstName *string `json:"daReviewerFirstName"`

			// DaReviewerLastName The last name of the DA reviewer.
			DaReviewerLastName *string `json:"daReviewerLastName"`

			// DaReviewerUserName The username of the DA reviewer.
			DaReviewerUserName *string `json:"daReviewerUserName"`

			// Description The description of the system.
			Description *string `json:"description"`

			// IctObjectId The ICT object identifier.
			IctObjectId *string `json:"ictObjectId"`

			// Id The unique identifier of the system.
			Id *string `json:"id,omitempty"`

			// Name The name of the system.
			Name *string `json:"name"`

			// NextVersionId The ID of the next version of the system.
			NextVersionId *string `json:"nextVersionId"`

			// ObjectState The current state of the system object.
			ObjectState *string `json:"objectState"`

			// PercentComplete The percentage completion of the system census.
			PercentComplete *string `json:"percentComplete"`

			// PreviousVersionId The ID of the previous version of the system.
			PreviousVersionId *string `json:"previousVersionId"`

			// QaReviewerAssignmentId The QA reviewer assignment ID.
			QaReviewerAssignmentId *string `json:"qaReviewerAssignmentId"`

			// QaReviewerFirstName The first name of the QA reviewer.
			QaReviewerFirstName *string `json:"qaReviewerFirstName"`

			// QaReviewerLastName The last name of the QA reviewer.
			QaReviewerLastName *string `json:"qaReviewerLastName"`

			// QaReviewerUserName The username of the QA reviewer.
			QaReviewerUserName *string `json:"qaReviewerUserName"`

			// Status The status of the system.
			Status *string `json:"status"`

			// SystemMaintainerOrg The system maintainer organization.
			SystemMaintainerOrg *string `json:"systemMaintainerOrg"`

			// SystemMaintainerOrgComp The system maintainer organization component.
			SystemMaintainerOrgComp *string `json:"systemMaintainerOrgComp"`

			// Uuid The UUID of the system.
			Uuid *string `json:"uuid"`

			// Version The version of the system.
			Version *string `json:"version"`
		} `json:"SystemsList,omitempty"`

		// Count The number of systems returned.
		Count *int `json:"count,omitempty"`

		// PageName The name of the page, always "SystemsList".
		PageName *string `json:"pageName,omitempty"`
	}
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewaySystem20Census20Core20API200PageSystemsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewaySystem20Census20Core20API200PageSystemsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewaySystem20Census20Core20API200PersonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Users A list of person objects matching the search criteria.
		Users []struct {
			// Email The email address of the person.
			Email *string `json:"email"`

			// FirstName The first name of the person.
			FirstName *string `json:"firstName"`

			// Id The unique identifier of the person.
			Id *string `json:"id"`

			// LastName The last name of the person.
			LastName *string `json:"lastName"`

			// Phone The phone number of the person.
			Phone *string `json:"phone"`

			// UserName The username of the person.
			UserName *string `json:"userName"`
		} `json:"Users"`

		// Count The number of persons found.
		Count int `json:"count"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewaySystem20Census20Core20API200PersonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewaySystem20Census20Core20API200PersonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewaySystem20Census20Core20API200SoftwareProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGatewaySystem20Census20Core20API200SoftwareProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewaySystem20Census20Core20API200SoftwareProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGatewaySystem20Census20Core20API200StatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Message Success message indicating number of records deleted.
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Result  *string `json:"result,omitempty"`
	}
	JSON401 *Unauthorized
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Result  *string `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteGatewaySystem20Census20Core20API200StatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGatewaySystem20Census20Core20API200StatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewaySystem20Census20Core20API200StatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Count Total number of status records returned.
		Count *int `json:"count,omitempty"`

		// Status Array of system status records.
		Status *[]struct {
			// APPLICATIONREFSTR Application reference string.
			APPLICATIONREFSTR *string `json:"APPLICATION_REFSTR,omitempty"`

			// DISPLAYPAGENAME Display-friendly name of the page.
			DISPLAYPAGENAME *string `json:"DISPLAY_PAGE_NAME,omitempty"`

			// LASTCOMMUNICATIONDATE Date and time of last communication.
			LASTCOMMUNICATIONDATE *time.Time `json:"LAST_COMMUNICATION_DATE,omitempty"`

			// LASTRESPONDENTDATE Date and time when respondent last accessed.
			LASTRESPONDENTDATE *time.Time `json:"LAST_RESPONDENT_DATE,omitempty"`

			// LASTUPDATEDBY Username of the person who last updated the page.
			LASTUPDATEDBY *string `json:"LAST_UPDATED_BY,omitempty"`

			// LASTUPDATEDDATE Date and time when the page was last updated.
			LASTUPDATEDDATE *time.Time `json:"LAST_UPDATED_DATE,omitempty"`

			// LASTUPDATEDFIRSTNAME First name of the person who last updated the page.
			LASTUPDATEDFIRSTNAME *string `json:"LAST_UPDATED_FIRST_NAME,omitempty"`

			// LASTUPDATEDLASTNAME Last name of the person who last updated the page.
			LASTUPDATEDLASTNAME *string `json:"LAST_UPDATED_LAST_NAME,omitempty"`

			// PAGENAME Name of the census page.
			PAGENAME *string `json:"PAGE_NAME,omitempty"`

			// PAGERESPONDENT Username of the page respondent.
			PAGERESPONDENT *string `json:"PAGE_RESPONDENT,omitempty"`

			// PAGERESPONDENTFIRSTNAME First name of the page respondent.
			PAGERESPONDENTFIRSTNAME *string `json:"PAGE_RESPONDENT_FIRST_NAME,omitempty"`

			// PAGERESPONDENTLASTNAME Last name of the page respondent.
			PAGERESPONDENTLASTNAME *string `json:"PAGE_RESPONDENT_LAST_NAME,omitempty"`

			// PERCENTCOMPLETE Percentage completion of the page.
			PERCENTCOMPLETE *float32 `json:"PERCENT_COMPLETE,omitempty"`

			// STATUS Current status of the page.
			STATUS *string `json:"STATUS,omitempty"`

			// SYSTEMSURVEYPAGESTATUSID Unique identifier for the system survey page status.
			SYSTEMSURVEYPAGESTATUSID *int `json:"SYSTEM_SURVEY_PAGE_STATUS_ID,omitempty"`

			// SystemID System identifier.
			SystemID *string `json:"System_ID,omitempty"`
		} `json:"status,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewaySystem20Census20Core20API200StatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewaySystem20Census20Core20API200StatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewaySystem20Census20Core20API200StatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Inserted Number of new records inserted.
		Inserted *int    `json:"inserted,omitempty"`
		Result   *string `json:"result,omitempty"`

		// Updated Number of existing records updated.
		Updated *int `json:"updated,omitempty"`
	}
	JSON400 *struct {
		Message *string `json:"message,omitempty"`
		Result  *string `json:"result,omitempty"`
	}
	JSON401 *Unauthorized
	JSON500 *struct {
		Message *string `json:"message,omitempty"`
		Result  *string `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostGatewaySystem20Census20Core20API200StatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewaySystem20Census20Core20API200StatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewaySystem20Census20Core20API200SystemAiUseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Record *struct {
			Acronym *string `json:"acronym"`

			// AiCapabilityITGRLifecycleAssigned Assigned lifecycle phase for ITGR
			AiCapabilityITGRLifecycleAssigned *string `json:"aiCapabilityITGRLifecycleAssigned"`

			// AiCapabilityITGRLifecycleMissing Whether lifecycle assignment is missing (Yes/No)
			AiCapabilityITGRLifecycleMissing *string `json:"aiCapabilityITGRLifecycleMissing"`

			// AiCapabilityITGRReviewed Whether ITGR review has been completed
			AiCapabilityITGRReviewed *bool `json:"aiCapabilityITGRReviewed"`

			// AiCapabilityITGRSubmissionDate ITGR submission date
			AiCapabilityITGRSubmissionDate *string `json:"aiCapabilityITGRSubmissionDate"`

			// AiCapabilityImpact Impact level of AI capability
			AiCapabilityImpact *string `json:"aiCapabilityImpact"`

			// AiCapabilitySensitiveInformationInvolved Types of sensitive information involved
			AiCapabilitySensitiveInformationInvolved *[]string `json:"aiCapabilitySensitiveInformationInvolved"`

			// AiCapabilitySystemDataCategory System data categories
			AiCapabilitySystemDataCategory *[]string `json:"aiCapabilitySystemDataCategory"`

			// AiProjectLifeCycleStage Current stage of AI project lifecycle
			AiProjectLifeCycleStage *string `json:"aiProjectLifeCycleStage"`

			// ArtificialIntelligence Types of artificial intelligence used
			ArtificialIntelligence *[]string `json:"artificialIntelligence"`

			// ArtificialIntelligenceOtherDescription Description of other AI types not listed (supports longer text)
			ArtificialIntelligenceOtherDescription *string `json:"artificialIntelligenceOtherDescription"`
			CmsUUID                                *string `json:"cmsUUID"`
			Description                            *string `json:"description"`

			// Id System GUID
			Id          *string `json:"id,omitempty"`
			ObjectState *string `json:"objectState"`
			PageName    *string `json:"pageName,omitempty"`

			// SystemId Sparx System ID
			SystemId   *float32 `json:"systemId,omitempty"`
			SystemName *string  `json:"systemName,omitempty"`

			// UsesAITechnology Whether the system uses AI technology
			UsesAITechnology *string `json:"usesAITechnology"`
		} `json:"record,omitempty"`
		Result *string `json:"result,omitempty"`
	}
	JSON400 *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON500 *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetGatewaySystem20Census20Core20API200SystemAiUseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewaySystem20Census20Core20API200SystemAiUseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewaySystem20Census20Core20API200SystemAiUseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Message Success message.
		Message *string `json:"message,omitempty"`
		Result  *string `json:"result,omitempty"`
	}
	JSON400 *struct {
		// Message Error message describing the validation failure.
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON500 *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostGatewaySystem20Census20Core20API200SystemAiUseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewaySystem20Census20Core20API200SystemAiUseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewaySystem20Census20Core20API200SystemComponentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// SystemComponents List of system components (subsystems).
		SystemComponents *[]struct {
			// ComponentAcronym The acronym of the subsystem component.
			ComponentAcronym *string `json:"componentAcronym"`

			// ComponentId The GUID of the subsystem component.
			ComponentId *string `json:"componentId,omitempty"`

			// ComponentName The name of the subsystem component.
			ComponentName *string `json:"componentName,omitempty"`

			// ComponentObjectState The object state of the subsystem component.
			ComponentObjectState *string `json:"componentObjectState"`

			// ComponentRetirementQuarter The planned retirement quarter of the subsystem component.
			ComponentRetirementQuarter *string `json:"componentRetirementQuarter"`

			// ComponentRetirementYear The planned retirement year of the subsystem component.
			ComponentRetirementYear *string `json:"componentRetirementYear"`

			// Description A description of the subsystem component.
			Description *string `json:"description"`
		} `json:"SystemComponents,omitempty"`
		Count *int `json:"count,omitempty"`

		// IsSubsystem The object state of the system being queried, indicating if it acts as a subsystem to another.
		IsSubsystem *string `json:"isSubsystem"`

		// NoSubsystemFlag A flag indicating no subsystems exist. In the original Webmethods service, this field was defined but not populated by the service logic.
		NoSubsystemFlag *bool `json:"noSubsystemFlag"`

		// ParentSystem The name of the parent system.
		ParentSystem *string `json:"parentSystem"`

		// ParentSystemId The GUID of the parent system.
		ParentSystemId *string `json:"parentSystemId"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewaySystem20Census20Core20API200SystemComponentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewaySystem20Census20Core20API200SystemComponentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewaySystem20Census20Core20API200SystemComponentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGatewaySystem20Census20Core20API200SystemComponentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewaySystem20Census20Core20API200SystemComponentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewaySystem20Census20Core20API200SystemMaintainerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Message The system ID that was processed.
		Message *string `json:"message,omitempty"`
		Result  *string `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON403 *Forbidden
	JSON404 *NotFound
	JSON500 *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PostGatewaySystem20Census20Core20API200SystemMaintainerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewaySystem20Census20Core20API200SystemMaintainerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewaySystem20Census20Core20API200SystemPropertyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// PropertyValue The value of the requested system property. Can be string, number, or null.
		PropertyValue *string `json:"propertyValue"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewaySystem20Census20Core20API200SystemPropertyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewaySystem20Census20Core20API200SystemPropertyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewaySystem20Census20Core20API200SystemPropertyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *[]string `json:"message,omitempty"`
		Result  *string   `json:"result,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGatewaySystem20Census20Core20API200SystemPropertyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewaySystem20Census20Core20API200SystemPropertyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayTechnopedia10SoftwareExtendedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Count Number of records returned.
		Count *float32 `json:"count,omitempty"`

		// Data Array of software product records.
		Data *[]struct {
			// Category Software category classification.
			Category *string `json:"category,omitempty"`

			// Edition Software edition details.
			Edition *string `json:"edition,omitempty"`

			// EndOfLifeDate End of life date for the software.
			EndOfLifeDate *string `json:"end_of_life_date,omitempty"`

			// GeneralAvailabilityDate General availability release date.
			GeneralAvailabilityDate *string `json:"general_availability_date,omitempty"`

			// Id Unique identifier for the software product.
			Id *string `json:"id,omitempty"`

			// Manufacturer Software manufacturer or vendor.
			Manufacturer *string `json:"manufacturer,omitempty"`

			// ProductName Name of the software product.
			ProductName *string `json:"product_name,omitempty"`

			// Version Software version information.
			Version *string `json:"version,omitempty"`
		} `json:"data,omitempty"`

		// Success Indicates if the request was successful.
		Success *bool `json:"success,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayTechnopedia10SoftwareExtendedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayTechnopedia10SoftwareExtendedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayTechnopedia10SoftwareExtendedIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Message Array of Technopedia software extended records matching the ID.
		Message *[]struct {
			// BelongsToSuite Whether belongs to a suite
			BelongsToSuite *string `json:"belongs_to_suite"`

			// BrandFamily Brand family
			BrandFamily *string `json:"brand_family"`

			// CatManufacturerId Category manufacturer ID
			CatManufacturerId *int `json:"cat_manufacturer_id"`

			// CatSwProductId Category software product ID
			CatSwProductId *int `json:"cat_sw_product_id"`

			// CatSwReleaseId Category software release ID
			CatSwReleaseId *int `json:"cat_sw_release_id"`

			// CatSwVersionId Category software version ID
			CatSwVersionId *int `json:"cat_sw_version_id"`

			// Category Software category
			Category *string `json:"category"`

			// CreateDate Record creation date
			CreateDate *time.Time `json:"create_date"`

			// Edition Software edition
			Edition *string `json:"edition"`

			// EndOfLifeDate End of life date
			EndOfLifeDate *time.Time `json:"end_of_life_date"`

			// EndOfLifeStr End of life date as string
			EndOfLifeStr *string `json:"end_of_life_str"`

			// EndOfLifeSupportLevel End of life support level
			EndOfLifeSupportLevel *string `json:"end_of_life_support_level"`

			// GeneralAvailabilityDate General availability date
			GeneralAvailabilityDate *time.Time `json:"general_availability_date"`

			// GeneralAvailabilityStr General availability date as string
			GeneralAvailabilityStr *string `json:"general_availability_str"`

			// Id Software identifier
			Id *int `json:"id"`

			// IsMajorRelease Whether this is a major release
			IsMajorRelease *string `json:"is_major_release"`

			// IsMajorVersion Whether this is a major version
			IsMajorVersion *string `json:"is_major_version"`

			// LastModifiedDate Last modified date
			LastModifiedDate *time.Time `json:"last_modified_date"`

			// Licensable Whether the software is licensable
			Licensable *string `json:"licensable"`

			// Manufacturer Software manufacturer
			Manufacturer *string `json:"manufacturer"`

			// ObsoleteDate Obsolete date
			ObsoleteDate *time.Time `json:"obsolete_date"`

			// ObsoleteStr Obsolete date as string
			ObsoleteStr *string `json:"obsolete_str"`

			// ProductAlias Product alias
			ProductAlias *string `json:"product_alias"`

			// ProductName Software product name
			ProductName *string `json:"product_name"`

			// Release Software release name
			Release *string `json:"release"`

			// ResourceUri Resource URI for the software
			ResourceUri *string `json:"resource_uri"`

			// Status Software status
			Status *string `json:"status"`

			// SubCategory Software sub-category
			SubCategory *string `json:"sub_category"`

			// SuiteName Suite name if part of a suite
			SuiteName *string `json:"suite_name"`

			// Tier Software tier
			Tier *int `json:"tier"`

			// Version Software version
			Version *string `json:"version"`

			// VersionGroup Version group
			VersionGroup *string `json:"version_group"`
		} `json:"message,omitempty"`

		// Result Indicates if the request was successful.
		Result *GetGatewayTechnopedia10SoftwareExtendedId200Result `json:"result,omitempty"`
	}
	JSON400 *struct {
		// Message Error message describing what went wrong.
		Message *string                                             `json:"message,omitempty"`
		Result  *GetGatewayTechnopedia10SoftwareExtendedId400Result `json:"result,omitempty"`
	}
	JSON401 *Unauthorized
	JSON500 *struct {
		// Message Error message describing what went wrong.
		Message *string                                             `json:"message,omitempty"`
		Result  *GetGatewayTechnopedia10SoftwareExtendedId500Result `json:"result,omitempty"`
	}
}
type GetGatewayTechnopedia10SoftwareExtendedId200Result string
type GetGatewayTechnopedia10SoftwareExtendedId400Result string
type GetGatewayTechnopedia10SoftwareExtendedId500Result string

// Status returns HTTPResponse.Status
func (r GetGatewayTechnopedia10SoftwareExtendedIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayTechnopedia10SoftwareExtendedIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayIntakeSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Schemas *[]struct {
			CreatedBy   string  `json:"createdBy"`
			CreatedDate string  `json:"createdDate"`
			Id          float32 `json:"id"`
			Name        string  `json:"name"`
			Schema      string  `json:"schema"`
			UpdatedBy   string  `json:"updatedBy"`
			UpdatedDate string  `json:"updatedDate"`
		} `json:"schemas,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayIntakeSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayIntakeSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewayIntakeSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// Name The name of the created schema
		Name string `json:"name"`

		// SchemaId The ID of the created schema
		SchemaId float32 `json:"schemaId"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON409 *Conflict
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGatewayIntakeSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewayIntakeSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGatewayIntakeSchemaIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteGatewayIntakeSchemaIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGatewayIntakeSchemaIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayIntakeSchemaIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedBy   string  `json:"createdBy"`
		CreatedDate string  `json:"createdDate"`
		Id          float32 `json:"id"`
		Name        string  `json:"name"`
		Schema      string  `json:"schema"`
		UpdatedBy   string  `json:"updatedBy"`
		UpdatedDate string  `json:"updatedDate"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON404 *NotFound
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayIntakeSchemaIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayIntakeSchemaIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutGatewayIntakeSchemaIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedBy   string  `json:"createdBy"`
		CreatedDate string  `json:"createdDate"`
		Id          float32 `json:"id"`
		Name        string  `json:"name"`
		Schema      string  `json:"schema"`
		UpdatedBy   string  `json:"updatedBy"`
		UpdatedDate string  `json:"updatedDate"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON404 *NotFound
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutGatewayIntakeSchemaIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutGatewayIntakeSchemaIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGatewayKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Results List of gateway keys
		Results *[]struct {
			// CreatedBy User who created the key
			CreatedBy *string `json:"createdBy,omitempty"`

			// CreatedDate Date when the key was created
			CreatedDate *time.Time `json:"createdDate,omitempty"`

			// Id The gateway key ID
			Id *string `json:"id,omitempty"`

			// IsActive Whether the key is active
			IsActive *bool `json:"isActive,omitempty"`

			// Key The gateway API key
			Key *string `json:"key,omitempty"`
		} `json:"results,omitempty"`
	}
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGatewayKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGatewayKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGatewayKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Key The generated gateway API key
		Key *string `json:"key,omitempty"`
	}
	JSON401 *Unauthorized
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostGatewayKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGatewayKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGatewayKeysIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteGatewayKeysIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGatewayKeysIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Message Health status message
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSparxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	XML200       *string
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostSparxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSparxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSparxIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	XML200       *string
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteSparxIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSparxIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSparxIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	XML200       *string
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSparxIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSparxIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwaggerUiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSwaggerUiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwaggerUiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetGatewayCEDAR20Core20API200AuthorityToOperateWithResponse request returning *GetGatewayCEDAR20Core20API200AuthorityToOperateResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200AuthorityToOperateWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200AuthorityToOperateParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200AuthorityToOperateResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200AuthorityToOperate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200AuthorityToOperateResponse(rsp)
}

// GetGatewayCEDAR20Core20API200BudgetWithResponse request returning *GetGatewayCEDAR20Core20API200BudgetResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200BudgetWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200BudgetParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200BudgetResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200Budget(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200BudgetResponse(rsp)
}

// PostGatewayCEDAR20Core20API200BudgetWithBodyWithResponse request with arbitrary body returning *PostGatewayCEDAR20Core20API200BudgetResponse
func (c *ClientWithResponses) PostGatewayCEDAR20Core20API200BudgetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200BudgetResponse, error) {
	rsp, err := c.PostGatewayCEDAR20Core20API200BudgetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayCEDAR20Core20API200BudgetResponse(rsp)
}

func (c *ClientWithResponses) PostGatewayCEDAR20Core20API200BudgetWithResponse(ctx context.Context, body PostGatewayCEDAR20Core20API200BudgetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200BudgetResponse, error) {
	rsp, err := c.PostGatewayCEDAR20Core20API200Budget(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayCEDAR20Core20API200BudgetResponse(rsp)
}

// PutGatewayCEDAR20Core20API200BudgetWithBodyWithResponse request with arbitrary body returning *PutGatewayCEDAR20Core20API200BudgetResponse
func (c *ClientWithResponses) PutGatewayCEDAR20Core20API200BudgetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGatewayCEDAR20Core20API200BudgetResponse, error) {
	rsp, err := c.PutGatewayCEDAR20Core20API200BudgetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGatewayCEDAR20Core20API200BudgetResponse(rsp)
}

func (c *ClientWithResponses) PutGatewayCEDAR20Core20API200BudgetWithResponse(ctx context.Context, body PutGatewayCEDAR20Core20API200BudgetJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGatewayCEDAR20Core20API200BudgetResponse, error) {
	rsp, err := c.PutGatewayCEDAR20Core20API200Budget(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGatewayCEDAR20Core20API200BudgetResponse(rsp)
}

// DeleteGatewayCEDAR20Core20API200BudgetListWithResponse request returning *DeleteGatewayCEDAR20Core20API200BudgetListResponse
func (c *ClientWithResponses) DeleteGatewayCEDAR20Core20API200BudgetListWithResponse(ctx context.Context, params *DeleteGatewayCEDAR20Core20API200BudgetListParams, reqEditors ...RequestEditorFn) (*DeleteGatewayCEDAR20Core20API200BudgetListResponse, error) {
	rsp, err := c.DeleteGatewayCEDAR20Core20API200BudgetList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGatewayCEDAR20Core20API200BudgetListResponse(rsp)
}

// GetGatewayCEDAR20Core20API200BudgetSystemCostFindWithResponse request returning *GetGatewayCEDAR20Core20API200BudgetSystemCostFindResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200BudgetSystemCostFindWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200BudgetSystemCostFindParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200BudgetSystemCostFindResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200BudgetSystemCostFind(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200BudgetSystemCostFindResponse(rsp)
}

// PostGatewayCEDAR20Core20API200ComponentWithBodyWithResponse request with arbitrary body returning *PostGatewayCEDAR20Core20API200ComponentResponse
func (c *ClientWithResponses) PostGatewayCEDAR20Core20API200ComponentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200ComponentResponse, error) {
	rsp, err := c.PostGatewayCEDAR20Core20API200ComponentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayCEDAR20Core20API200ComponentResponse(rsp)
}

func (c *ClientWithResponses) PostGatewayCEDAR20Core20API200ComponentWithResponse(ctx context.Context, body PostGatewayCEDAR20Core20API200ComponentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200ComponentResponse, error) {
	rsp, err := c.PostGatewayCEDAR20Core20API200Component(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayCEDAR20Core20API200ComponentResponse(rsp)
}

// PostGatewayCEDAR20Core20API200ContractWithBodyWithResponse request with arbitrary body returning *PostGatewayCEDAR20Core20API200ContractResponse
func (c *ClientWithResponses) PostGatewayCEDAR20Core20API200ContractWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200ContractResponse, error) {
	rsp, err := c.PostGatewayCEDAR20Core20API200ContractWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayCEDAR20Core20API200ContractResponse(rsp)
}

func (c *ClientWithResponses) PostGatewayCEDAR20Core20API200ContractWithResponse(ctx context.Context, body PostGatewayCEDAR20Core20API200ContractJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200ContractResponse, error) {
	rsp, err := c.PostGatewayCEDAR20Core20API200Contract(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayCEDAR20Core20API200ContractResponse(rsp)
}

// PutGatewayCEDAR20Core20API200ContractWithBodyWithResponse request with arbitrary body returning *PutGatewayCEDAR20Core20API200ContractResponse
func (c *ClientWithResponses) PutGatewayCEDAR20Core20API200ContractWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGatewayCEDAR20Core20API200ContractResponse, error) {
	rsp, err := c.PutGatewayCEDAR20Core20API200ContractWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGatewayCEDAR20Core20API200ContractResponse(rsp)
}

func (c *ClientWithResponses) PutGatewayCEDAR20Core20API200ContractWithResponse(ctx context.Context, body PutGatewayCEDAR20Core20API200ContractJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGatewayCEDAR20Core20API200ContractResponse, error) {
	rsp, err := c.PutGatewayCEDAR20Core20API200Contract(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGatewayCEDAR20Core20API200ContractResponse(rsp)
}

// DeleteGatewayCEDAR20Core20API200ContractListWithResponse request returning *DeleteGatewayCEDAR20Core20API200ContractListResponse
func (c *ClientWithResponses) DeleteGatewayCEDAR20Core20API200ContractListWithResponse(ctx context.Context, params *DeleteGatewayCEDAR20Core20API200ContractListParams, reqEditors ...RequestEditorFn) (*DeleteGatewayCEDAR20Core20API200ContractListResponse, error) {
	rsp, err := c.DeleteGatewayCEDAR20Core20API200ContractList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGatewayCEDAR20Core20API200ContractListResponse(rsp)
}

// GetGatewayCEDAR20Core20API200ContractListWithResponse request returning *GetGatewayCEDAR20Core20API200ContractListResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200ContractListWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200ContractListParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200ContractListResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200ContractList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200ContractListResponse(rsp)
}

// GetGatewayCEDAR20Core20API200CostTypeListWithResponse request returning *GetGatewayCEDAR20Core20API200CostTypeListResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200CostTypeListWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200CostTypeListParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200CostTypeListResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200CostTypeList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200CostTypeListResponse(rsp)
}

// DeleteGatewayCEDAR20Core20API200DeploymentWithResponse request returning *DeleteGatewayCEDAR20Core20API200DeploymentResponse
func (c *ClientWithResponses) DeleteGatewayCEDAR20Core20API200DeploymentWithResponse(ctx context.Context, params *DeleteGatewayCEDAR20Core20API200DeploymentParams, reqEditors ...RequestEditorFn) (*DeleteGatewayCEDAR20Core20API200DeploymentResponse, error) {
	rsp, err := c.DeleteGatewayCEDAR20Core20API200Deployment(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGatewayCEDAR20Core20API200DeploymentResponse(rsp)
}

// GetGatewayCEDAR20Core20API200DeploymentWithResponse request returning *GetGatewayCEDAR20Core20API200DeploymentResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200DeploymentWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200DeploymentParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200DeploymentResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200Deployment(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200DeploymentResponse(rsp)
}

// PostGatewayCEDAR20Core20API200DeploymentWithBodyWithResponse request with arbitrary body returning *PostGatewayCEDAR20Core20API200DeploymentResponse
func (c *ClientWithResponses) PostGatewayCEDAR20Core20API200DeploymentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200DeploymentResponse, error) {
	rsp, err := c.PostGatewayCEDAR20Core20API200DeploymentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayCEDAR20Core20API200DeploymentResponse(rsp)
}

func (c *ClientWithResponses) PostGatewayCEDAR20Core20API200DeploymentWithResponse(ctx context.Context, body PostGatewayCEDAR20Core20API200DeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200DeploymentResponse, error) {
	rsp, err := c.PostGatewayCEDAR20Core20API200Deployment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayCEDAR20Core20API200DeploymentResponse(rsp)
}

// PutGatewayCEDAR20Core20API200DeploymentWithBodyWithResponse request with arbitrary body returning *PutGatewayCEDAR20Core20API200DeploymentResponse
func (c *ClientWithResponses) PutGatewayCEDAR20Core20API200DeploymentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGatewayCEDAR20Core20API200DeploymentResponse, error) {
	rsp, err := c.PutGatewayCEDAR20Core20API200DeploymentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGatewayCEDAR20Core20API200DeploymentResponse(rsp)
}

func (c *ClientWithResponses) PutGatewayCEDAR20Core20API200DeploymentWithResponse(ctx context.Context, body PutGatewayCEDAR20Core20API200DeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGatewayCEDAR20Core20API200DeploymentResponse, error) {
	rsp, err := c.PutGatewayCEDAR20Core20API200Deployment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGatewayCEDAR20Core20API200DeploymentResponse(rsp)
}

// GetGatewayCEDAR20Core20API200DomainModelListWithResponse request returning *GetGatewayCEDAR20Core20API200DomainModelListResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200DomainModelListWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200DomainModelListParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200DomainModelListResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200DomainModelList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200DomainModelListResponse(rsp)
}

// GetGatewayCEDAR20Core20API200DomainModelLevelWithResponse request returning *GetGatewayCEDAR20Core20API200DomainModelLevelResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200DomainModelLevelWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200DomainModelLevelParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200DomainModelLevelResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200DomainModelLevel(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200DomainModelLevelResponse(rsp)
}

// GetGatewayCEDAR20Core20API200DomainModelNameWithResponse request returning *GetGatewayCEDAR20Core20API200DomainModelNameResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200DomainModelNameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200DomainModelNameResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200DomainModelName(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200DomainModelNameResponse(rsp)
}

// GetGatewayCEDAR20Core20API200EnumerationWithResponse request returning *GetGatewayCEDAR20Core20API200EnumerationResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200EnumerationWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200EnumerationParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200EnumerationResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200Enumeration(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200EnumerationResponse(rsp)
}

// GetGatewayCEDAR20Core20API200ExchangeWithResponse request returning *GetGatewayCEDAR20Core20API200ExchangeResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200ExchangeWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200ExchangeParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200ExchangeResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200Exchange(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200ExchangeResponse(rsp)
}

// PutGatewayCEDAR20Core20API200ExchangeWithBodyWithResponse request with arbitrary body returning *PutGatewayCEDAR20Core20API200ExchangeResponse
func (c *ClientWithResponses) PutGatewayCEDAR20Core20API200ExchangeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGatewayCEDAR20Core20API200ExchangeResponse, error) {
	rsp, err := c.PutGatewayCEDAR20Core20API200ExchangeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGatewayCEDAR20Core20API200ExchangeResponse(rsp)
}

func (c *ClientWithResponses) PutGatewayCEDAR20Core20API200ExchangeWithResponse(ctx context.Context, body PutGatewayCEDAR20Core20API200ExchangeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGatewayCEDAR20Core20API200ExchangeResponse, error) {
	rsp, err := c.PutGatewayCEDAR20Core20API200Exchange(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGatewayCEDAR20Core20API200ExchangeResponse(rsp)
}

// GetGatewayCEDAR20Core20API200ExchangeIdWithResponse request returning *GetGatewayCEDAR20Core20API200ExchangeIdResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200ExchangeIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200ExchangeIdResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200ExchangeId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200ExchangeIdResponse(rsp)
}

// GetGatewayCEDAR20Core20API200OrganizationWithResponse request returning *GetGatewayCEDAR20Core20API200OrganizationResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200OrganizationWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200OrganizationParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200OrganizationResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200Organization(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200OrganizationResponse(rsp)
}

// GetGatewayCEDAR20Core20API200RoleWithResponse request returning *GetGatewayCEDAR20Core20API200RoleResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200RoleWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200RoleParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200RoleResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200Role(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200RoleResponse(rsp)
}

// PostGatewayCEDAR20Core20API200RoleWithBodyWithResponse request with arbitrary body returning *PostGatewayCEDAR20Core20API200RoleResponse
func (c *ClientWithResponses) PostGatewayCEDAR20Core20API200RoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200RoleResponse, error) {
	rsp, err := c.PostGatewayCEDAR20Core20API200RoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayCEDAR20Core20API200RoleResponse(rsp)
}

func (c *ClientWithResponses) PostGatewayCEDAR20Core20API200RoleWithResponse(ctx context.Context, body PostGatewayCEDAR20Core20API200RoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200RoleResponse, error) {
	rsp, err := c.PostGatewayCEDAR20Core20API200Role(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayCEDAR20Core20API200RoleResponse(rsp)
}

// DeleteGatewayCEDAR20Core20API200RoleListWithResponse request returning *DeleteGatewayCEDAR20Core20API200RoleListResponse
func (c *ClientWithResponses) DeleteGatewayCEDAR20Core20API200RoleListWithResponse(ctx context.Context, params *DeleteGatewayCEDAR20Core20API200RoleListParams, reqEditors ...RequestEditorFn) (*DeleteGatewayCEDAR20Core20API200RoleListResponse, error) {
	rsp, err := c.DeleteGatewayCEDAR20Core20API200RoleList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGatewayCEDAR20Core20API200RoleListResponse(rsp)
}

// GetGatewayCEDAR20Core20API200RoleTypeApplicationWithResponse request returning *GetGatewayCEDAR20Core20API200RoleTypeApplicationResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200RoleTypeApplicationWithResponse(ctx context.Context, application GetGatewayCEDAR20Core20API200RoleTypeApplicationParamsApplication, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200RoleTypeApplicationResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200RoleTypeApplication(ctx, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200RoleTypeApplicationResponse(rsp)
}

// GetGatewayCEDAR20Core20API200SoftwareProductsWithResponse request returning *GetGatewayCEDAR20Core20API200SoftwareProductsResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200SoftwareProductsWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200SoftwareProductsParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200SoftwareProductsResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200SoftwareProducts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200SoftwareProductsResponse(rsp)
}

// PostGatewayCEDAR20Core20API200SoftwareProductsWithBodyWithResponse request with arbitrary body returning *PostGatewayCEDAR20Core20API200SoftwareProductsResponse
func (c *ClientWithResponses) PostGatewayCEDAR20Core20API200SoftwareProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200SoftwareProductsResponse, error) {
	rsp, err := c.PostGatewayCEDAR20Core20API200SoftwareProductsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayCEDAR20Core20API200SoftwareProductsResponse(rsp)
}

func (c *ClientWithResponses) PostGatewayCEDAR20Core20API200SoftwareProductsWithResponse(ctx context.Context, body PostGatewayCEDAR20Core20API200SoftwareProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200SoftwareProductsResponse, error) {
	rsp, err := c.PostGatewayCEDAR20Core20API200SoftwareProducts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayCEDAR20Core20API200SoftwareProductsResponse(rsp)
}

// GetGatewayCEDAR20Core20API200StakeholderWithResponse request returning *GetGatewayCEDAR20Core20API200StakeholderResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200StakeholderWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200StakeholderParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200StakeholderResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200Stakeholder(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200StakeholderResponse(rsp)
}

// DeleteGatewayCEDAR20Core20API200SupportContactWithResponse request returning *DeleteGatewayCEDAR20Core20API200SupportContactResponse
func (c *ClientWithResponses) DeleteGatewayCEDAR20Core20API200SupportContactWithResponse(ctx context.Context, params *DeleteGatewayCEDAR20Core20API200SupportContactParams, reqEditors ...RequestEditorFn) (*DeleteGatewayCEDAR20Core20API200SupportContactResponse, error) {
	rsp, err := c.DeleteGatewayCEDAR20Core20API200SupportContact(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGatewayCEDAR20Core20API200SupportContactResponse(rsp)
}

// GetGatewayCEDAR20Core20API200SupportContactWithResponse request returning *GetGatewayCEDAR20Core20API200SupportContactResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200SupportContactWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200SupportContactParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200SupportContactResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200SupportContact(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200SupportContactResponse(rsp)
}

// PostGatewayCEDAR20Core20API200SupportContactWithBodyWithResponse request with arbitrary body returning *PostGatewayCEDAR20Core20API200SupportContactResponse
func (c *ClientWithResponses) PostGatewayCEDAR20Core20API200SupportContactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200SupportContactResponse, error) {
	rsp, err := c.PostGatewayCEDAR20Core20API200SupportContactWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayCEDAR20Core20API200SupportContactResponse(rsp)
}

func (c *ClientWithResponses) PostGatewayCEDAR20Core20API200SupportContactWithResponse(ctx context.Context, body PostGatewayCEDAR20Core20API200SupportContactJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200SupportContactResponse, error) {
	rsp, err := c.PostGatewayCEDAR20Core20API200SupportContact(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayCEDAR20Core20API200SupportContactResponse(rsp)
}

// GetGatewayCEDAR20Core20API200SystemDetailIdWithResponse request returning *GetGatewayCEDAR20Core20API200SystemDetailIdResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200SystemDetailIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200SystemDetailIdResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200SystemDetailId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200SystemDetailIdResponse(rsp)
}

// GetGatewayCEDAR20Core20API200SystemSummaryWithResponse request returning *GetGatewayCEDAR20Core20API200SystemSummaryResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200SystemSummaryWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200SystemSummaryParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200SystemSummaryResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200SystemSummary(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200SystemSummaryResponse(rsp)
}

// GetGatewayCEDAR20Core20API200SystemSummaryIdWithResponse request returning *GetGatewayCEDAR20Core20API200SystemSummaryIdResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200SystemSummaryIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200SystemSummaryIdResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200SystemSummaryId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200SystemSummaryIdResponse(rsp)
}

// GetGatewayCEDAR20Core20API200ThreatWithResponse request returning *GetGatewayCEDAR20Core20API200ThreatResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200ThreatWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200ThreatParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200ThreatResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200Threat(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200ThreatResponse(rsp)
}

// GetGatewayCEDAR20Core20API200UrlIdWithResponse request returning *GetGatewayCEDAR20Core20API200UrlIdResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200UrlIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200UrlIdResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200UrlId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200UrlIdResponse(rsp)
}

// GetGatewayCEDAR20Core20API200UserWithResponse request returning *GetGatewayCEDAR20Core20API200UserResponse
func (c *ClientWithResponses) GetGatewayCEDAR20Core20API200UserWithResponse(ctx context.Context, params *GetGatewayCEDAR20Core20API200UserParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDAR20Core20API200UserResponse, error) {
	rsp, err := c.GetGatewayCEDAR20Core20API200User(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDAR20Core20API200UserResponse(rsp)
}

// PostGatewayCEDAR20Core20API200UserWithBodyWithResponse request with arbitrary body returning *PostGatewayCEDAR20Core20API200UserResponse
func (c *ClientWithResponses) PostGatewayCEDAR20Core20API200UserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200UserResponse, error) {
	rsp, err := c.PostGatewayCEDAR20Core20API200UserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayCEDAR20Core20API200UserResponse(rsp)
}

func (c *ClientWithResponses) PostGatewayCEDAR20Core20API200UserWithResponse(ctx context.Context, body PostGatewayCEDAR20Core20API200UserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20API200UserResponse, error) {
	rsp, err := c.PostGatewayCEDAR20Core20API200User(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayCEDAR20Core20API200UserResponse(rsp)
}

// PostGatewayCEDAR20Core20APIExchangeWithBodyWithResponse request with arbitrary body returning *PostGatewayCEDAR20Core20APIExchangeResponse
func (c *ClientWithResponses) PostGatewayCEDAR20Core20APIExchangeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20APIExchangeResponse, error) {
	rsp, err := c.PostGatewayCEDAR20Core20APIExchangeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayCEDAR20Core20APIExchangeResponse(rsp)
}

func (c *ClientWithResponses) PostGatewayCEDAR20Core20APIExchangeWithResponse(ctx context.Context, body PostGatewayCEDAR20Core20APIExchangeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayCEDAR20Core20APIExchangeResponse, error) {
	rsp, err := c.PostGatewayCEDAR20Core20APIExchange(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayCEDAR20Core20APIExchangeResponse(rsp)
}

// GetGatewayCEDARIntake10ClientIdWithResponse request returning *GetGatewayCEDARIntake10ClientIdResponse
func (c *ClientWithResponses) GetGatewayCEDARIntake10ClientIdWithResponse(ctx context.Context, id string, params *GetGatewayCEDARIntake10ClientIdParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDARIntake10ClientIdResponse, error) {
	rsp, err := c.GetGatewayCEDARIntake10ClientId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDARIntake10ClientIdResponse(rsp)
}

// GetGatewayCEDARIntake10HealthCheckWithResponse request returning *GetGatewayCEDARIntake10HealthCheckResponse
func (c *ClientWithResponses) GetGatewayCEDARIntake10HealthCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGatewayCEDARIntake10HealthCheckResponse, error) {
	rsp, err := c.GetGatewayCEDARIntake10HealthCheck(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDARIntake10HealthCheckResponse(rsp)
}

// PostGatewayCEDARIntake10IntakeWithBodyWithResponse request with arbitrary body returning *PostGatewayCEDARIntake10IntakeResponse
func (c *ClientWithResponses) PostGatewayCEDARIntake10IntakeWithBodyWithResponse(ctx context.Context, params *PostGatewayCEDARIntake10IntakeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayCEDARIntake10IntakeResponse, error) {
	rsp, err := c.PostGatewayCEDARIntake10IntakeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayCEDARIntake10IntakeResponse(rsp)
}

func (c *ClientWithResponses) PostGatewayCEDARIntake10IntakeWithResponse(ctx context.Context, params *PostGatewayCEDARIntake10IntakeParams, body PostGatewayCEDARIntake10IntakeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayCEDARIntake10IntakeResponse, error) {
	rsp, err := c.PostGatewayCEDARIntake10Intake(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayCEDARIntake10IntakeResponse(rsp)
}

// GetGatewayCEDARIntake10IntakeCedarIdWithResponse request returning *GetGatewayCEDARIntake10IntakeCedarIdResponse
func (c *ClientWithResponses) GetGatewayCEDARIntake10IntakeCedarIdWithResponse(ctx context.Context, id string, params *GetGatewayCEDARIntake10IntakeCedarIdParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDARIntake10IntakeCedarIdResponse, error) {
	rsp, err := c.GetGatewayCEDARIntake10IntakeCedarId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDARIntake10IntakeCedarIdResponse(rsp)
}

// GetGatewayCEDARIntake10IntakeStatusWithResponse request returning *GetGatewayCEDARIntake10IntakeStatusResponse
func (c *ClientWithResponses) GetGatewayCEDARIntake10IntakeStatusWithResponse(ctx context.Context, params *GetGatewayCEDARIntake10IntakeStatusParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDARIntake10IntakeStatusResponse, error) {
	rsp, err := c.GetGatewayCEDARIntake10IntakeStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDARIntake10IntakeStatusResponse(rsp)
}

// GetGatewayCEDARIntake10StatusCedarIdWithResponse request returning *GetGatewayCEDARIntake10StatusCedarIdResponse
func (c *ClientWithResponses) GetGatewayCEDARIntake10StatusCedarIdWithResponse(ctx context.Context, id string, params *GetGatewayCEDARIntake10StatusCedarIdParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDARIntake10StatusCedarIdResponse, error) {
	rsp, err := c.GetGatewayCEDARIntake10StatusCedarId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDARIntake10StatusCedarIdResponse(rsp)
}

// GetGatewayCEDARIntake10StatusClientIdWithResponse request returning *GetGatewayCEDARIntake10StatusClientIdResponse
func (c *ClientWithResponses) GetGatewayCEDARIntake10StatusClientIdWithResponse(ctx context.Context, id string, params *GetGatewayCEDARIntake10StatusClientIdParams, reqEditors ...RequestEditorFn) (*GetGatewayCEDARIntake10StatusClientIdResponse, error) {
	rsp, err := c.GetGatewayCEDARIntake10StatusClientId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayCEDARIntake10StatusClientIdResponse(rsp)
}

// PostGatewayLDAP10AuthenticateWithBodyWithResponse request with arbitrary body returning *PostGatewayLDAP10AuthenticateResponse
func (c *ClientWithResponses) PostGatewayLDAP10AuthenticateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayLDAP10AuthenticateResponse, error) {
	rsp, err := c.PostGatewayLDAP10AuthenticateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayLDAP10AuthenticateResponse(rsp)
}

func (c *ClientWithResponses) PostGatewayLDAP10AuthenticateWithResponse(ctx context.Context, body PostGatewayLDAP10AuthenticateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayLDAP10AuthenticateResponse, error) {
	rsp, err := c.PostGatewayLDAP10Authenticate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayLDAP10AuthenticateResponse(rsp)
}

// GetGatewayLDAP10PersonWithResponse request returning *GetGatewayLDAP10PersonResponse
func (c *ClientWithResponses) GetGatewayLDAP10PersonWithResponse(ctx context.Context, params *GetGatewayLDAP10PersonParams, reqEditors ...RequestEditorFn) (*GetGatewayLDAP10PersonResponse, error) {
	rsp, err := c.GetGatewayLDAP10Person(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayLDAP10PersonResponse(rsp)
}

// GetGatewayLDAP10PersonIdWithResponse request returning *GetGatewayLDAP10PersonIdResponse
func (c *ClientWithResponses) GetGatewayLDAP10PersonIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGatewayLDAP10PersonIdResponse, error) {
	rsp, err := c.GetGatewayLDAP10PersonId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayLDAP10PersonIdResponse(rsp)
}

// GetGatewaySystem20Census20Core20API200AdminReviewerWithResponse request returning *GetGatewaySystem20Census20Core20API200AdminReviewerResponse
func (c *ClientWithResponses) GetGatewaySystem20Census20Core20API200AdminReviewerWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200AdminReviewerParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200AdminReviewerResponse, error) {
	rsp, err := c.GetGatewaySystem20Census20Core20API200AdminReviewer(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewaySystem20Census20Core20API200AdminReviewerResponse(rsp)
}

// DeleteGatewaySystem20Census20Core20API200AdminReviewerWithBodyWithResponse request with arbitrary body returning *DeleteGatewaySystem20Census20Core20API200AdminReviewerResponse
func (c *ClientWithResponses) DeleteGatewaySystem20Census20Core20API200AdminReviewerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteGatewaySystem20Census20Core20API200AdminReviewerResponse, error) {
	rsp, err := c.DeleteGatewaySystem20Census20Core20API200AdminReviewerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGatewaySystem20Census20Core20API200AdminReviewerResponse(rsp)
}

func (c *ClientWithResponses) DeleteGatewaySystem20Census20Core20API200AdminReviewerWithResponse(ctx context.Context, body DeleteGatewaySystem20Census20Core20API200AdminReviewerJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteGatewaySystem20Census20Core20API200AdminReviewerResponse, error) {
	rsp, err := c.DeleteGatewaySystem20Census20Core20API200AdminReviewer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGatewaySystem20Census20Core20API200AdminReviewerResponse(rsp)
}

// PostGatewaySystem20Census20Core20API200AdminReviewerWithBodyWithResponse request with arbitrary body returning *PostGatewaySystem20Census20Core20API200AdminReviewerResponse
func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200AdminReviewerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200AdminReviewerResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200AdminReviewerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200AdminReviewerResponse(rsp)
}

func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200AdminReviewerWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200AdminReviewerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200AdminReviewerResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200AdminReviewer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200AdminReviewerResponse(rsp)
}

// GetGatewaySystem20Census20Core20API200BudgetAndContractsWithResponse request returning *GetGatewaySystem20Census20Core20API200BudgetAndContractsResponse
func (c *ClientWithResponses) GetGatewaySystem20Census20Core20API200BudgetAndContractsWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200BudgetAndContractsParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200BudgetAndContractsResponse, error) {
	rsp, err := c.GetGatewaySystem20Census20Core20API200BudgetAndContracts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewaySystem20Census20Core20API200BudgetAndContractsResponse(rsp)
}

// PostGatewaySystem20Census20Core20API200BudgetAndContractsWithBodyWithResponse request with arbitrary body returning *PostGatewaySystem20Census20Core20API200BudgetAndContractsResponse
func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200BudgetAndContractsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200BudgetAndContractsResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200BudgetAndContractsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200BudgetAndContractsResponse(rsp)
}

func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200BudgetAndContractsWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200BudgetAndContractsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200BudgetAndContractsResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200BudgetAndContracts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200BudgetAndContractsResponse(rsp)
}

// PostGatewaySystem20Census20Core20API200BusinessOwnerWithBodyWithResponse request with arbitrary body returning *PostGatewaySystem20Census20Core20API200BusinessOwnerResponse
func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200BusinessOwnerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200BusinessOwnerResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200BusinessOwnerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200BusinessOwnerResponse(rsp)
}

func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200BusinessOwnerWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200BusinessOwnerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200BusinessOwnerResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200BusinessOwner(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200BusinessOwnerResponse(rsp)
}

// DeleteGatewaySystem20Census20Core20API200DataExchangeNotesWithResponse request returning *DeleteGatewaySystem20Census20Core20API200DataExchangeNotesResponse
func (c *ClientWithResponses) DeleteGatewaySystem20Census20Core20API200DataExchangeNotesWithResponse(ctx context.Context, params *DeleteGatewaySystem20Census20Core20API200DataExchangeNotesParams, reqEditors ...RequestEditorFn) (*DeleteGatewaySystem20Census20Core20API200DataExchangeNotesResponse, error) {
	rsp, err := c.DeleteGatewaySystem20Census20Core20API200DataExchangeNotes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGatewaySystem20Census20Core20API200DataExchangeNotesResponse(rsp)
}

// DeleteGatewaySystem20Census20Core20API200DataExchangeStatusWithBodyWithResponse request with arbitrary body returning *DeleteGatewaySystem20Census20Core20API200DataExchangeStatusResponse
func (c *ClientWithResponses) DeleteGatewaySystem20Census20Core20API200DataExchangeStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteGatewaySystem20Census20Core20API200DataExchangeStatusResponse, error) {
	rsp, err := c.DeleteGatewaySystem20Census20Core20API200DataExchangeStatusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGatewaySystem20Census20Core20API200DataExchangeStatusResponse(rsp)
}

func (c *ClientWithResponses) DeleteGatewaySystem20Census20Core20API200DataExchangeStatusWithResponse(ctx context.Context, body DeleteGatewaySystem20Census20Core20API200DataExchangeStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteGatewaySystem20Census20Core20API200DataExchangeStatusResponse, error) {
	rsp, err := c.DeleteGatewaySystem20Census20Core20API200DataExchangeStatus(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGatewaySystem20Census20Core20API200DataExchangeStatusResponse(rsp)
}

// GetGatewaySystem20Census20Core20API200DataExchangeStatusWithResponse request returning *GetGatewaySystem20Census20Core20API200DataExchangeStatusResponse
func (c *ClientWithResponses) GetGatewaySystem20Census20Core20API200DataExchangeStatusWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200DataExchangeStatusParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200DataExchangeStatusResponse, error) {
	rsp, err := c.GetGatewaySystem20Census20Core20API200DataExchangeStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewaySystem20Census20Core20API200DataExchangeStatusResponse(rsp)
}

// GetGatewaySystem20Census20Core20API200DataExchangeNotesWithResponse request returning *GetGatewaySystem20Census20Core20API200DataExchangeNotesResponse
func (c *ClientWithResponses) GetGatewaySystem20Census20Core20API200DataExchangeNotesWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200DataExchangeNotesParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200DataExchangeNotesResponse, error) {
	rsp, err := c.GetGatewaySystem20Census20Core20API200DataExchangeNotes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewaySystem20Census20Core20API200DataExchangeNotesResponse(rsp)
}

// PostGatewaySystem20Census20Core20API200DataExchangeNotesWithBodyWithResponse request with arbitrary body returning *PostGatewaySystem20Census20Core20API200DataExchangeNotesResponse
func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200DataExchangeNotesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200DataExchangeNotesResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200DataExchangeNotesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200DataExchangeNotesResponse(rsp)
}

func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200DataExchangeNotesWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200DataExchangeNotesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200DataExchangeNotesResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200DataExchangeNotes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200DataExchangeNotesResponse(rsp)
}

// GetGatewaySystem20Census20Core20API200DrmWithResponse request returning *GetGatewaySystem20Census20Core20API200DrmResponse
func (c *ClientWithResponses) GetGatewaySystem20Census20Core20API200DrmWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200DrmResponse, error) {
	rsp, err := c.GetGatewaySystem20Census20Core20API200Drm(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewaySystem20Census20Core20API200DrmResponse(rsp)
}

// PostGatewaySystem20Census20Core20API200NoteWithBodyWithResponse request with arbitrary body returning *PostGatewaySystem20Census20Core20API200NoteResponse
func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200NoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200NoteResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200NoteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200NoteResponse(rsp)
}

func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200NoteWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200NoteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200NoteResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200Note(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200NoteResponse(rsp)
}

// PutGatewaySystem20Census20Core20API200NoteWithBodyWithResponse request with arbitrary body returning *PutGatewaySystem20Census20Core20API200NoteResponse
func (c *ClientWithResponses) PutGatewaySystem20Census20Core20API200NoteWithBodyWithResponse(ctx context.Context, params *PutGatewaySystem20Census20Core20API200NoteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGatewaySystem20Census20Core20API200NoteResponse, error) {
	rsp, err := c.PutGatewaySystem20Census20Core20API200NoteWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGatewaySystem20Census20Core20API200NoteResponse(rsp)
}

func (c *ClientWithResponses) PutGatewaySystem20Census20Core20API200NoteWithResponse(ctx context.Context, params *PutGatewaySystem20Census20Core20API200NoteParams, body PutGatewaySystem20Census20Core20API200NoteJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGatewaySystem20Census20Core20API200NoteResponse, error) {
	rsp, err := c.PutGatewaySystem20Census20Core20API200Note(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGatewaySystem20Census20Core20API200NoteResponse(rsp)
}

// DeleteGatewaySystem20Census20Core20API200NoteListWithResponse request returning *DeleteGatewaySystem20Census20Core20API200NoteListResponse
func (c *ClientWithResponses) DeleteGatewaySystem20Census20Core20API200NoteListWithResponse(ctx context.Context, params *DeleteGatewaySystem20Census20Core20API200NoteListParams, reqEditors ...RequestEditorFn) (*DeleteGatewaySystem20Census20Core20API200NoteListResponse, error) {
	rsp, err := c.DeleteGatewaySystem20Census20Core20API200NoteList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGatewaySystem20Census20Core20API200NoteListResponse(rsp)
}

// GetGatewaySystem20Census20Core20API200NoteListWithResponse request returning *GetGatewaySystem20Census20Core20API200NoteListResponse
func (c *ClientWithResponses) GetGatewaySystem20Census20Core20API200NoteListWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200NoteListParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200NoteListResponse, error) {
	rsp, err := c.GetGatewaySystem20Census20Core20API200NoteList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewaySystem20Census20Core20API200NoteListResponse(rsp)
}

// GetGatewaySystem20Census20Core20API200PageUrlsWithResponse request returning *GetGatewaySystem20Census20Core20API200PageUrlsResponse
func (c *ClientWithResponses) GetGatewaySystem20Census20Core20API200PageUrlsWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageUrlsParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200PageUrlsResponse, error) {
	rsp, err := c.GetGatewaySystem20Census20Core20API200PageUrls(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewaySystem20Census20Core20API200PageUrlsResponse(rsp)
}

// PostGatewaySystem20Census20Core20API200PageUrlsWithBodyWithResponse request with arbitrary body returning *PostGatewaySystem20Census20Core20API200PageUrlsResponse
func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200PageUrlsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200PageUrlsResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200PageUrlsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200PageUrlsResponse(rsp)
}

func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200PageUrlsWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200PageUrlsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200PageUrlsResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200PageUrls(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200PageUrlsResponse(rsp)
}

// GetGatewaySystem20Census20Core20API200PageBusinessOwnerWithResponse request returning *GetGatewaySystem20Census20Core20API200PageBusinessOwnerResponse
func (c *ClientWithResponses) GetGatewaySystem20Census20Core20API200PageBusinessOwnerWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageBusinessOwnerParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200PageBusinessOwnerResponse, error) {
	rsp, err := c.GetGatewaySystem20Census20Core20API200PageBusinessOwner(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewaySystem20Census20Core20API200PageBusinessOwnerResponse(rsp)
}

// GetGatewaySystem20Census20Core20API200PageDataCentersWithResponse request returning *GetGatewaySystem20Census20Core20API200PageDataCentersResponse
func (c *ClientWithResponses) GetGatewaySystem20Census20Core20API200PageDataCentersWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageDataCentersParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200PageDataCentersResponse, error) {
	rsp, err := c.GetGatewaySystem20Census20Core20API200PageDataCenters(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewaySystem20Census20Core20API200PageDataCentersResponse(rsp)
}

// PostGatewaySystem20Census20Core20API200PageDataCentersWithBodyWithResponse request with arbitrary body returning *PostGatewaySystem20Census20Core20API200PageDataCentersResponse
func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200PageDataCentersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200PageDataCentersResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200PageDataCentersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200PageDataCentersResponse(rsp)
}

func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200PageDataCentersWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200PageDataCentersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200PageDataCentersResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200PageDataCenters(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200PageDataCentersResponse(rsp)
}

// GetGatewaySystem20Census20Core20API200PageDataExchangeWithBodyWithResponse request with arbitrary body returning *GetGatewaySystem20Census20Core20API200PageDataExchangeResponse
func (c *ClientWithResponses) GetGatewaySystem20Census20Core20API200PageDataExchangeWithBodyWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageDataExchangeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200PageDataExchangeResponse, error) {
	rsp, err := c.GetGatewaySystem20Census20Core20API200PageDataExchangeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewaySystem20Census20Core20API200PageDataExchangeResponse(rsp)
}

func (c *ClientWithResponses) GetGatewaySystem20Census20Core20API200PageDataExchangeWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageDataExchangeParams, body GetGatewaySystem20Census20Core20API200PageDataExchangeJSONRequestBody, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200PageDataExchangeResponse, error) {
	rsp, err := c.GetGatewaySystem20Census20Core20API200PageDataExchange(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewaySystem20Census20Core20API200PageDataExchangeResponse(rsp)
}

// PostGatewaySystem20Census20Core20API200PageDataExchangeWithBodyWithResponse request with arbitrary body returning *PostGatewaySystem20Census20Core20API200PageDataExchangeResponse
func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200PageDataExchangeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200PageDataExchangeResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200PageDataExchangeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200PageDataExchangeResponse(rsp)
}

func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200PageDataExchangeWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200PageDataExchangeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200PageDataExchangeResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200PageDataExchange(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200PageDataExchangeResponse(rsp)
}

// GetGatewaySystem20Census20Core20API200PageSoftwareProductsWithResponse request returning *GetGatewaySystem20Census20Core20API200PageSoftwareProductsResponse
func (c *ClientWithResponses) GetGatewaySystem20Census20Core20API200PageSoftwareProductsWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageSoftwareProductsParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200PageSoftwareProductsResponse, error) {
	rsp, err := c.GetGatewaySystem20Census20Core20API200PageSoftwareProducts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewaySystem20Census20Core20API200PageSoftwareProductsResponse(rsp)
}

// GetGatewaySystem20Census20Core20API200PageSystemDataWithResponse request returning *GetGatewaySystem20Census20Core20API200PageSystemDataResponse
func (c *ClientWithResponses) GetGatewaySystem20Census20Core20API200PageSystemDataWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageSystemDataParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200PageSystemDataResponse, error) {
	rsp, err := c.GetGatewaySystem20Census20Core20API200PageSystemData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewaySystem20Census20Core20API200PageSystemDataResponse(rsp)
}

// PostGatewaySystem20Census20Core20API200PageSystemDataWithBodyWithResponse request with arbitrary body returning *PostGatewaySystem20Census20Core20API200PageSystemDataResponse
func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200PageSystemDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200PageSystemDataResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200PageSystemDataWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200PageSystemDataResponse(rsp)
}

func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200PageSystemDataWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200PageSystemDataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200PageSystemDataResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200PageSystemData(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200PageSystemDataResponse(rsp)
}

// GetGatewaySystem20Census20Core20API200PageSystemMaintainerWithResponse request returning *GetGatewaySystem20Census20Core20API200PageSystemMaintainerResponse
func (c *ClientWithResponses) GetGatewaySystem20Census20Core20API200PageSystemMaintainerWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PageSystemMaintainerParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200PageSystemMaintainerResponse, error) {
	rsp, err := c.GetGatewaySystem20Census20Core20API200PageSystemMaintainer(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewaySystem20Census20Core20API200PageSystemMaintainerResponse(rsp)
}

// GetGatewaySystem20Census20Core20API200PageSystemsListWithResponse request returning *GetGatewaySystem20Census20Core20API200PageSystemsListResponse
func (c *ClientWithResponses) GetGatewaySystem20Census20Core20API200PageSystemsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200PageSystemsListResponse, error) {
	rsp, err := c.GetGatewaySystem20Census20Core20API200PageSystemsList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewaySystem20Census20Core20API200PageSystemsListResponse(rsp)
}

// GetGatewaySystem20Census20Core20API200PersonWithBodyWithResponse request with arbitrary body returning *GetGatewaySystem20Census20Core20API200PersonResponse
func (c *ClientWithResponses) GetGatewaySystem20Census20Core20API200PersonWithBodyWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PersonParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200PersonResponse, error) {
	rsp, err := c.GetGatewaySystem20Census20Core20API200PersonWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewaySystem20Census20Core20API200PersonResponse(rsp)
}

func (c *ClientWithResponses) GetGatewaySystem20Census20Core20API200PersonWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200PersonParams, body GetGatewaySystem20Census20Core20API200PersonJSONRequestBody, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200PersonResponse, error) {
	rsp, err := c.GetGatewaySystem20Census20Core20API200Person(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewaySystem20Census20Core20API200PersonResponse(rsp)
}

// PostGatewaySystem20Census20Core20API200SoftwareProductsWithBodyWithResponse request with arbitrary body returning *PostGatewaySystem20Census20Core20API200SoftwareProductsResponse
func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200SoftwareProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200SoftwareProductsResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200SoftwareProductsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200SoftwareProductsResponse(rsp)
}

func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200SoftwareProductsWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200SoftwareProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200SoftwareProductsResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200SoftwareProducts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200SoftwareProductsResponse(rsp)
}

// DeleteGatewaySystem20Census20Core20API200StatusWithResponse request returning *DeleteGatewaySystem20Census20Core20API200StatusResponse
func (c *ClientWithResponses) DeleteGatewaySystem20Census20Core20API200StatusWithResponse(ctx context.Context, params *DeleteGatewaySystem20Census20Core20API200StatusParams, reqEditors ...RequestEditorFn) (*DeleteGatewaySystem20Census20Core20API200StatusResponse, error) {
	rsp, err := c.DeleteGatewaySystem20Census20Core20API200Status(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGatewaySystem20Census20Core20API200StatusResponse(rsp)
}

// GetGatewaySystem20Census20Core20API200StatusWithResponse request returning *GetGatewaySystem20Census20Core20API200StatusResponse
func (c *ClientWithResponses) GetGatewaySystem20Census20Core20API200StatusWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200StatusParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200StatusResponse, error) {
	rsp, err := c.GetGatewaySystem20Census20Core20API200Status(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewaySystem20Census20Core20API200StatusResponse(rsp)
}

// PostGatewaySystem20Census20Core20API200StatusWithBodyWithResponse request with arbitrary body returning *PostGatewaySystem20Census20Core20API200StatusResponse
func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200StatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200StatusResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200StatusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200StatusResponse(rsp)
}

func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200StatusWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200StatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200StatusResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200Status(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200StatusResponse(rsp)
}

// GetGatewaySystem20Census20Core20API200SystemAiUseWithResponse request returning *GetGatewaySystem20Census20Core20API200SystemAiUseResponse
func (c *ClientWithResponses) GetGatewaySystem20Census20Core20API200SystemAiUseWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200SystemAiUseParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200SystemAiUseResponse, error) {
	rsp, err := c.GetGatewaySystem20Census20Core20API200SystemAiUse(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewaySystem20Census20Core20API200SystemAiUseResponse(rsp)
}

// PostGatewaySystem20Census20Core20API200SystemAiUseWithBodyWithResponse request with arbitrary body returning *PostGatewaySystem20Census20Core20API200SystemAiUseResponse
func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200SystemAiUseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200SystemAiUseResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200SystemAiUseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200SystemAiUseResponse(rsp)
}

func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200SystemAiUseWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200SystemAiUseJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200SystemAiUseResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200SystemAiUse(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200SystemAiUseResponse(rsp)
}

// GetGatewaySystem20Census20Core20API200SystemComponentsWithResponse request returning *GetGatewaySystem20Census20Core20API200SystemComponentsResponse
func (c *ClientWithResponses) GetGatewaySystem20Census20Core20API200SystemComponentsWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200SystemComponentsParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200SystemComponentsResponse, error) {
	rsp, err := c.GetGatewaySystem20Census20Core20API200SystemComponents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewaySystem20Census20Core20API200SystemComponentsResponse(rsp)
}

// PostGatewaySystem20Census20Core20API200SystemComponentsWithBodyWithResponse request with arbitrary body returning *PostGatewaySystem20Census20Core20API200SystemComponentsResponse
func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200SystemComponentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200SystemComponentsResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200SystemComponentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200SystemComponentsResponse(rsp)
}

func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200SystemComponentsWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200SystemComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200SystemComponentsResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200SystemComponents(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200SystemComponentsResponse(rsp)
}

// PostGatewaySystem20Census20Core20API200SystemMaintainerWithBodyWithResponse request with arbitrary body returning *PostGatewaySystem20Census20Core20API200SystemMaintainerResponse
func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200SystemMaintainerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200SystemMaintainerResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200SystemMaintainerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200SystemMaintainerResponse(rsp)
}

func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200SystemMaintainerWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200SystemMaintainerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200SystemMaintainerResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200SystemMaintainer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200SystemMaintainerResponse(rsp)
}

// GetGatewaySystem20Census20Core20API200SystemPropertyWithResponse request returning *GetGatewaySystem20Census20Core20API200SystemPropertyResponse
func (c *ClientWithResponses) GetGatewaySystem20Census20Core20API200SystemPropertyWithResponse(ctx context.Context, params *GetGatewaySystem20Census20Core20API200SystemPropertyParams, reqEditors ...RequestEditorFn) (*GetGatewaySystem20Census20Core20API200SystemPropertyResponse, error) {
	rsp, err := c.GetGatewaySystem20Census20Core20API200SystemProperty(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewaySystem20Census20Core20API200SystemPropertyResponse(rsp)
}

// PostGatewaySystem20Census20Core20API200SystemPropertyWithBodyWithResponse request with arbitrary body returning *PostGatewaySystem20Census20Core20API200SystemPropertyResponse
func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200SystemPropertyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200SystemPropertyResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200SystemPropertyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200SystemPropertyResponse(rsp)
}

func (c *ClientWithResponses) PostGatewaySystem20Census20Core20API200SystemPropertyWithResponse(ctx context.Context, body PostGatewaySystem20Census20Core20API200SystemPropertyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewaySystem20Census20Core20API200SystemPropertyResponse, error) {
	rsp, err := c.PostGatewaySystem20Census20Core20API200SystemProperty(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewaySystem20Census20Core20API200SystemPropertyResponse(rsp)
}

// GetGatewayTechnopedia10SoftwareExtendedWithResponse request returning *GetGatewayTechnopedia10SoftwareExtendedResponse
func (c *ClientWithResponses) GetGatewayTechnopedia10SoftwareExtendedWithResponse(ctx context.Context, params *GetGatewayTechnopedia10SoftwareExtendedParams, reqEditors ...RequestEditorFn) (*GetGatewayTechnopedia10SoftwareExtendedResponse, error) {
	rsp, err := c.GetGatewayTechnopedia10SoftwareExtended(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayTechnopedia10SoftwareExtendedResponse(rsp)
}

// GetGatewayTechnopedia10SoftwareExtendedIdWithResponse request returning *GetGatewayTechnopedia10SoftwareExtendedIdResponse
func (c *ClientWithResponses) GetGatewayTechnopedia10SoftwareExtendedIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetGatewayTechnopedia10SoftwareExtendedIdResponse, error) {
	rsp, err := c.GetGatewayTechnopedia10SoftwareExtendedId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayTechnopedia10SoftwareExtendedIdResponse(rsp)
}

// GetGatewayIntakeSchemaWithResponse request returning *GetGatewayIntakeSchemaResponse
func (c *ClientWithResponses) GetGatewayIntakeSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGatewayIntakeSchemaResponse, error) {
	rsp, err := c.GetGatewayIntakeSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayIntakeSchemaResponse(rsp)
}

// PostGatewayIntakeSchemaWithBodyWithResponse request with arbitrary body returning *PostGatewayIntakeSchemaResponse
func (c *ClientWithResponses) PostGatewayIntakeSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGatewayIntakeSchemaResponse, error) {
	rsp, err := c.PostGatewayIntakeSchemaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayIntakeSchemaResponse(rsp)
}

func (c *ClientWithResponses) PostGatewayIntakeSchemaWithResponse(ctx context.Context, body PostGatewayIntakeSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGatewayIntakeSchemaResponse, error) {
	rsp, err := c.PostGatewayIntakeSchema(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayIntakeSchemaResponse(rsp)
}

// DeleteGatewayIntakeSchemaIdWithResponse request returning *DeleteGatewayIntakeSchemaIdResponse
func (c *ClientWithResponses) DeleteGatewayIntakeSchemaIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteGatewayIntakeSchemaIdResponse, error) {
	rsp, err := c.DeleteGatewayIntakeSchemaId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGatewayIntakeSchemaIdResponse(rsp)
}

// GetGatewayIntakeSchemaIdWithResponse request returning *GetGatewayIntakeSchemaIdResponse
func (c *ClientWithResponses) GetGatewayIntakeSchemaIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetGatewayIntakeSchemaIdResponse, error) {
	rsp, err := c.GetGatewayIntakeSchemaId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayIntakeSchemaIdResponse(rsp)
}

// PutGatewayIntakeSchemaIdWithBodyWithResponse request with arbitrary body returning *PutGatewayIntakeSchemaIdResponse
func (c *ClientWithResponses) PutGatewayIntakeSchemaIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGatewayIntakeSchemaIdResponse, error) {
	rsp, err := c.PutGatewayIntakeSchemaIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGatewayIntakeSchemaIdResponse(rsp)
}

func (c *ClientWithResponses) PutGatewayIntakeSchemaIdWithResponse(ctx context.Context, id string, body PutGatewayIntakeSchemaIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGatewayIntakeSchemaIdResponse, error) {
	rsp, err := c.PutGatewayIntakeSchemaId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGatewayIntakeSchemaIdResponse(rsp)
}

// GetGatewayKeysWithResponse request returning *GetGatewayKeysResponse
func (c *ClientWithResponses) GetGatewayKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGatewayKeysResponse, error) {
	rsp, err := c.GetGatewayKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGatewayKeysResponse(rsp)
}

// PostGatewayKeysWithResponse request returning *PostGatewayKeysResponse
func (c *ClientWithResponses) PostGatewayKeysWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostGatewayKeysResponse, error) {
	rsp, err := c.PostGatewayKeys(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGatewayKeysResponse(rsp)
}

// DeleteGatewayKeysIdWithResponse request returning *DeleteGatewayKeysIdResponse
func (c *ClientWithResponses) DeleteGatewayKeysIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteGatewayKeysIdResponse, error) {
	rsp, err := c.DeleteGatewayKeysId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGatewayKeysIdResponse(rsp)
}

// GetHealthWithResponse request returning *GetHealthResponse
func (c *ClientWithResponses) GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error) {
	rsp, err := c.GetHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

// PostSparxWithBodyWithResponse request with arbitrary body returning *PostSparxResponse
func (c *ClientWithResponses) PostSparxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSparxResponse, error) {
	rsp, err := c.PostSparxWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSparxResponse(rsp)
}

func (c *ClientWithResponses) PostSparxWithResponse(ctx context.Context, body PostSparxJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSparxResponse, error) {
	rsp, err := c.PostSparx(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSparxResponse(rsp)
}

// DeleteSparxIdWithResponse request returning *DeleteSparxIdResponse
func (c *ClientWithResponses) DeleteSparxIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteSparxIdResponse, error) {
	rsp, err := c.DeleteSparxId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSparxIdResponse(rsp)
}

// GetSparxIdWithResponse request returning *GetSparxIdResponse
func (c *ClientWithResponses) GetSparxIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSparxIdResponse, error) {
	rsp, err := c.GetSparxId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSparxIdResponse(rsp)
}

// GetSwaggerUiWithResponse request returning *GetSwaggerUiResponse
func (c *ClientWithResponses) GetSwaggerUiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwaggerUiResponse, error) {
	rsp, err := c.GetSwaggerUi(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwaggerUiResponse(rsp)
}

// ParseGetGatewayCEDAR20Core20API200AuthorityToOperateResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200AuthorityToOperateWithResponse call
func ParseGetGatewayCEDAR20Core20API200AuthorityToOperateResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200AuthorityToOperateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200AuthorityToOperateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// AuthorityToOperateList List of Authority to Operate records.
			AuthorityToOperateList *[]struct {
				// ActualDispositionDate Actual disposition date.
				ActualDispositionDate *string `json:"actualDispositionDate"`

				// CedarId Cedar system ID.
				CedarId *string `json:"cedarId,omitempty"`

				// ContainsPersonallyIdentifiableInformation Whether system contains PII.
				ContainsPersonallyIdentifiableInformation *bool `json:"containsPersonallyIdentifiableInformation,omitempty"`

				// CountOfOpenPoams Count of open POAMs.
				CountOfOpenPoams *int `json:"countOfOpenPoams,omitempty"`

				// CountOfTotalNonPrivilegedUserPopulation Count of non-privileged users.
				CountOfTotalNonPrivilegedUserPopulation *int `json:"countOfTotalNonPrivilegedUserPopulation,omitempty"`

				// CountOfTotalPrivilegedUserPopulation Count of privileged users.
				CountOfTotalPrivilegedUserPopulation *int `json:"countOfTotalPrivilegedUserPopulation,omitempty"`

				// DateAuthorizationMemoExpires Date authorization memo expires.
				DateAuthorizationMemoExpires *string `json:"dateAuthorizationMemoExpires,omitempty"`

				// DateAuthorizationMemoSigned Date authorization memo was signed.
				DateAuthorizationMemoSigned *string `json:"dateAuthorizationMemoSigned,omitempty"`

				// EAuthenticationLevel E-Authentication level.
				EAuthenticationLevel *string `json:"eAuthenticationLevel,omitempty"`

				// Fips199OverallImpactRating FIPS 199 overall impact rating.
				Fips199OverallImpactRating *int `json:"fips199OverallImpactRating,omitempty"`

				// FismaSystemAcronym FISMA system acronym.
				FismaSystemAcronym *string `json:"fismaSystemAcronym,omitempty"`

				// FismaSystemName FISMA system name.
				FismaSystemName *string `json:"fismaSystemName,omitempty"`

				// IsAccessedByNonOrganizationalUsers Whether accessed by non-organizational users.
				IsAccessedByNonOrganizationalUsers *bool `json:"isAccessedByNonOrganizationalUsers,omitempty"`

				// IsPiiLimitedToUserNameAndPass Whether PII is limited to username and password.
				IsPiiLimitedToUserNameAndPass *bool `json:"isPiiLimitedToUserNameAndPass,omitempty"`

				// IsProtectedHealthInformation Whether system contains PHI.
				IsProtectedHealthInformation *bool `json:"isProtectedHealthInformation,omitempty"`

				// LastActScaDate Last ACT SCA date.
				LastActScaDate *string `json:"lastActScaDate,omitempty"`

				// LastAssessmentDate Last assessment date.
				LastAssessmentDate *string `json:"lastAssessmentDate,omitempty"`

				// LastContingencyPlanCompletionDate Last contingency plan completion date.
				LastContingencyPlanCompletionDate *string `json:"lastContingencyPlanCompletionDate,omitempty"`

				// LastPenTestDate Last penetration test date.
				LastPenTestDate *string `json:"lastPenTestDate,omitempty"`

				// OaStatus Operating Authority status.
				OaStatus *string `json:"oaStatus,omitempty"`

				// PiaCompletionDate PIA completion date.
				PiaCompletionDate *string `json:"piaCompletionDate,omitempty"`

				// PrimaryCyberRiskAdvisor Primary cyber risk advisor.
				PrimaryCyberRiskAdvisor *string `json:"primaryCyberRiskAdvisor,omitempty"`

				// PrivacySubjectMatterExpert Privacy subject matter expert.
				PrivacySubjectMatterExpert *string `json:"privacySubjectMatterExpert"`

				// RecoveryPointObjective Recovery point objective.
				RecoveryPointObjective *int `json:"recoveryPointObjective,omitempty"`

				// RecoveryTimeObjective Recovery time objective.
				RecoveryTimeObjective *int `json:"recoveryTimeObjective,omitempty"`

				// SystemOfRecordsNotice System of Records Notice.
				SystemOfRecordsNotice *[]string `json:"systemOfRecordsNotice,omitempty"`

				// TlcPhase Technology Life Cycle phase.
				TlcPhase *string `json:"tlcPhase,omitempty"`

				// Uuid CMS UUID.
				Uuid *string `json:"uuid,omitempty"`

				// XlcPhase Extended Life Cycle phase.
				XlcPhase *string `json:"xlcPhase"`
			} `json:"AuthorityToOperateList,omitempty"`

			// Count The number of ATO records returned.
			Count *int `json:"count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDAR20Core20API200BudgetResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200BudgetWithResponse call
func ParseGetGatewayCEDAR20Core20API200BudgetResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200BudgetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200BudgetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Budgets List of budget records.
			Budgets *[]struct {
				// FiscalYear The fiscal year for the budget.
				FiscalYear *string `json:"FiscalYear"`

				// FundingSource The source of funding for the budget.
				FundingSource *string `json:"FundingSource"`

				// Name Name of the budget item.
				Name *string `json:"Name"`

				// Funding Description of the allocation of this budget to the system in question
				Funding *string `json:"funding"`

				// FundingId Cross-reference ID for relationship between budget project and application in system of record
				FundingId *string `json:"fundingId"`

				// Id OFM budget internal ID in system of record
				Id *string `json:"id"`

				// ProjectId OFM budget project ID in system of record
				ProjectId string `json:"projectId"`

				// ProjectTitle Title of this project
				ProjectTitle *string `json:"projectTitle"`

				// SystemId System which this budget funds
				SystemId *string `json:"systemId"`
			} `json:"Budgets,omitempty"`

			// Count The number of budget records returned.
			Count int `json:"count"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewayCEDAR20Core20API200BudgetResponse parses an HTTP response from a PostGatewayCEDAR20Core20API200BudgetWithResponse call
func ParsePostGatewayCEDAR20Core20API200BudgetResponse(rsp *http.Response) (*PostGatewayCEDAR20Core20API200BudgetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewayCEDAR20Core20API200BudgetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutGatewayCEDAR20Core20API200BudgetResponse parses an HTTP response from a PutGatewayCEDAR20Core20API200BudgetWithResponse call
func ParsePutGatewayCEDAR20Core20API200BudgetResponse(rsp *http.Response) (*PutGatewayCEDAR20Core20API200BudgetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutGatewayCEDAR20Core20API200BudgetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteGatewayCEDAR20Core20API200BudgetListResponse parses an HTTP response from a DeleteGatewayCEDAR20Core20API200BudgetListWithResponse call
func ParseDeleteGatewayCEDAR20Core20API200BudgetListResponse(rsp *http.Response) (*DeleteGatewayCEDAR20Core20API200BudgetListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGatewayCEDAR20Core20API200BudgetListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDAR20Core20API200BudgetSystemCostFindResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200BudgetSystemCostFindWithResponse call
func ParseGetGatewayCEDAR20Core20API200BudgetSystemCostFindResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200BudgetSystemCostFindResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200BudgetSystemCostFindResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// BudgetActualCost List of budget actual cost records.
			BudgetActualCost *[]struct {
				// ActualSystemCost The actual cost for the system in the given fiscal year.
				ActualSystemCost *string `json:"ActualSystemCost,omitempty"`

				// FiscalYear The fiscal year for the cost data.
				FiscalYear *string `json:"FiscalYear,omitempty"`

				// SystemId System identifier.
				SystemId *string `json:"systemId,omitempty"`
			} `json:"BudgetActualCost,omitempty"`

			// Count The number of budget cost records returned.
			Count int32 `json:"count"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewayCEDAR20Core20API200ComponentResponse parses an HTTP response from a PostGatewayCEDAR20Core20API200ComponentWithResponse call
func ParsePostGatewayCEDAR20Core20API200ComponentResponse(rsp *http.Response) (*PostGatewayCEDAR20Core20API200ComponentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewayCEDAR20Core20API200ComponentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Payload *struct {
				// Refstr The GUID of the newly created software product in Sparx.
				Refstr *string `json:"refstr,omitempty"`
			} `json:"payload,omitempty"`
			Result *string `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewayCEDAR20Core20API200ContractResponse parses an HTTP response from a PostGatewayCEDAR20Core20API200ContractWithResponse call
func ParsePostGatewayCEDAR20Core20API200ContractResponse(rsp *http.Response) (*PostGatewayCEDAR20Core20API200ContractResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewayCEDAR20Core20API200ContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Message GUID of the newly created contract deliverable.
			Message *string `json:"message,omitempty"`
			Result  *string `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutGatewayCEDAR20Core20API200ContractResponse parses an HTTP response from a PutGatewayCEDAR20Core20API200ContractWithResponse call
func ParsePutGatewayCEDAR20Core20API200ContractResponse(rsp *http.Response) (*PutGatewayCEDAR20Core20API200ContractResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutGatewayCEDAR20Core20API200ContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteGatewayCEDAR20Core20API200ContractListResponse parses an HTTP response from a DeleteGatewayCEDAR20Core20API200ContractListWithResponse call
func ParseDeleteGatewayCEDAR20Core20API200ContractListResponse(rsp *http.Response) (*DeleteGatewayCEDAR20Core20API200ContractListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGatewayCEDAR20Core20API200ContractListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDAR20Core20API200ContractListResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200ContractListWithResponse call
func ParseGetGatewayCEDAR20Core20API200ContractListResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200ContractListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200ContractListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Contracts List of contract records.
			Contracts *[]struct {
				// ContractName Contract Name.
				ContractName *string `json:"ContractName,omitempty"`

				// ContractNumber Contract Number.
				ContractNumber *string `json:"ContractNumber,omitempty"`

				// Cost Contract Amount.
				Cost *string `json:"Cost,omitempty"`

				// OrderNumber Order Number.
				OrderNumber *string `json:"OrderNumber,omitempty"`

				// POPEndDate Period of Performance end date.
				POPEndDate *string `json:"POPEndDate,omitempty"`

				// POPStartDate Period of Performance start date.
				POPStartDate *string `json:"POPStartDate,omitempty"`

				// ProductServiceDescription Product Service Description.
				ProductServiceDescription *string `json:"ProductServiceDescription,omitempty"`

				// ProjectTitle Project Title.
				ProjectTitle *string `json:"ProjectTitle,omitempty"`

				// ServiceProvided Service Provided.
				ServiceProvided *string `json:"ServiceProvided,omitempty"`

				// AwardId Order Number (award ID).
				AwardId *string `json:"awardId,omitempty"`

				// ContractADO Contract ADO flag (same as isDeliveryOrg).
				ContractADO *string `json:"contractADO,omitempty"`

				// ContractDeliverableId Connection GUID (contract deliverable ID).
				ContractDeliverableId *string `json:"contractDeliverableId,omitempty"`

				// Id Sparx Contract GUID.
				Id *string `json:"id,omitempty"`

				// IsDeliveryOrg Is Delivery Organization flag.
				IsDeliveryOrg *string `json:"isDeliveryOrg,omitempty"`

				// ParentAwardId Contract Number (parent award ID).
				ParentAwardId *string `json:"parentAwardId,omitempty"`

				// SystemId Sparx System GUID.
				SystemId *string `json:"systemId,omitempty"`
			} `json:"Contracts,omitempty"`

			// Count The number of contract records returned (only present for non-keyword searches).
			Count *int `json:"count"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDAR20Core20API200CostTypeListResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200CostTypeListWithResponse call
func ParseGetGatewayCEDAR20Core20API200CostTypeListResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200CostTypeListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200CostTypeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// CostTypes List of cost types (excluding the highlighted cost type).
			CostTypes *[]struct {
				// Id Cost type ID.
				Id *string `json:"id,omitempty"`

				// Name Cost type name.
				Name *string `json:"name,omitempty"`
			} `json:"CostTypes,omitempty"`

			// Id ID of the "Internal Labor" cost type (if found)
			Id *string `json:"id"`

			// Name Name of the "Internal Labor" cost type (if found)
			Name *string `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteGatewayCEDAR20Core20API200DeploymentResponse parses an HTTP response from a DeleteGatewayCEDAR20Core20API200DeploymentWithResponse call
func ParseDeleteGatewayCEDAR20Core20API200DeploymentResponse(rsp *http.Response) (*DeleteGatewayCEDAR20Core20API200DeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGatewayCEDAR20Core20API200DeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDAR20Core20API200DeploymentResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200DeploymentWithResponse call
func ParseGetGatewayCEDAR20Core20API200DeploymentResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200DeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200DeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Deployments List of deployment records.
			Deployments *[]struct {
				// DataCenter Associated data center information.
				DataCenter *struct {
					// Address1 Address line 1.
					Address1 *string `json:"address1"`

					// Address2 Address line 2.
					Address2 *string `json:"address2"`

					// AddressState State.
					AddressState *string `json:"addressState"`

					// City City.
					City *string `json:"city"`

					// Description Data center description.
					Description *string `json:"description"`

					// EndDate Data center end date.
					EndDate *openapi_types.Date `json:"endDate"`

					// Id Data center ID.
					Id *string `json:"id,omitempty"`

					// Name Data center name.
					Name *string `json:"name,omitempty"`

					// StartDate Data center start date.
					StartDate *openapi_types.Date `json:"startDate"`

					// State Data center state.
					State *GetGatewayCEDAR20Core20API200Deployment200DeploymentsDataCenterState `json:"state"`

					// Status Data center status.
					Status *GetGatewayCEDAR20Core20API200Deployment200DeploymentsDataCenterStatus `json:"status"`

					// Version Data center version.
					Version *string `json:"version,omitempty"`

					// Zip ZIP code.
					Zip *string `json:"zip"`
				} `json:"DataCenter"`

				// AwsEnclave AWS enclave.
				AwsEnclave *string `json:"awsEnclave"`

				// AwsEnclaveOther Other AWS enclave.
				AwsEnclaveOther *string `json:"awsEnclaveOther"`

				// ContractorName Contractor name.
				ContractorName *string `json:"contractorName"`

				// DeploymentElementId Deployment element ID.
				DeploymentElementId *string `json:"deploymentElementId"`

				// DeploymentType Type of deployment.
				DeploymentType *GetGatewayCEDAR20Core20API200Deployment200DeploymentsDeploymentType `json:"deploymentType"`

				// Description Deployment description.
				Description *string `json:"description"`

				// EndDate End date.
				EndDate *openapi_types.Date `json:"endDate"`

				// HasProductionData Has production data flag.
				HasProductionData *string `json:"hasProductionData"`

				// Id Deployment ID.
				Id string `json:"id"`

				// IsHotSite Is hot site flag.
				IsHotSite *string `json:"isHotSite"`

				// MovingToCloud Moving to cloud flag.
				MovingToCloud *string `json:"movingToCloud"`

				// MovingToCloudDate Moving to cloud date.
				MovingToCloudDate *openapi_types.Date `json:"movingToCloudDate"`

				// Name Deployment name.
				Name string `json:"name"`

				// NetworkEncryption Network encryption details.
				NetworkEncryption *string `json:"networkEncryption"`

				// OtherSpecialUsers Other special users.
				OtherSpecialUsers *string `json:"otherSpecialUsers"`

				// ReplicatedSystemElements Replicated system elements.
				ReplicatedSystemElements *[]string `json:"replicatedSystemElements"`

				// StartDate Start date.
				StartDate *openapi_types.Date `json:"startDate"`

				// State Deployment state.
				State *GetGatewayCEDAR20Core20API200Deployment200DeploymentsState `json:"state"`

				// Status Deployment status.
				Status *GetGatewayCEDAR20Core20API200Deployment200DeploymentsStatus `json:"status"`

				// SystemId System ID.
				SystemId string `json:"systemId"`

				// SystemName System name.
				SystemName *string `json:"systemName"`

				// SystemVersion System version.
				SystemVersion *string `json:"systemVersion"`

				// UsersRequiringMFA Users requiring MFA.
				UsersRequiringMFA *string `json:"usersRequiringMFA"`

				// WanType WAN type.
				WanType *string `json:"wanType"`

				// WanTypeOther Other WAN type.
				WanTypeOther *string `json:"wanTypeOther"`
			} `json:"Deployments,omitempty"`

			// Count The number of deployment records returned.
			Count int `json:"count"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewayCEDAR20Core20API200DeploymentResponse parses an HTTP response from a PostGatewayCEDAR20Core20API200DeploymentWithResponse call
func ParsePostGatewayCEDAR20Core20API200DeploymentResponse(rsp *http.Response) (*PostGatewayCEDAR20Core20API200DeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewayCEDAR20Core20API200DeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result *string `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutGatewayCEDAR20Core20API200DeploymentResponse parses an HTTP response from a PutGatewayCEDAR20Core20API200DeploymentWithResponse call
func ParsePutGatewayCEDAR20Core20API200DeploymentResponse(rsp *http.Response) (*PutGatewayCEDAR20Core20API200DeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutGatewayCEDAR20Core20API200DeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Message Summary messages about the operation results
			Message *[]string `json:"message,omitempty"`
			Payload *struct {
				// Failed Array of deployments that failed to update with detailed error information to help with troubleshooting
				Failed *[]struct {
					// Error Error message explaining why the update failed
					Error *string `json:"error,omitempty"`

					// Id ID of the deployment that failed to update
					Id *string `json:"id,omitempty"`
				} `json:"failed,omitempty"`

				// Successful Array of deployment IDs that were updated successfully
				Successful *[]string `json:"successful,omitempty"`
			} `json:"payload,omitempty"`

			// Result Operation result status
			Result *PutGatewayCEDAR20Core20API200Deployment200Result `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDAR20Core20API200DomainModelListResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200DomainModelListWithResponse call
func ParseGetGatewayCEDAR20Core20API200DomainModelListResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200DomainModelListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200DomainModelListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Areas List of domain model areas.
			Areas *[]struct {
				// Categories Categories within the area.
				Categories *[]struct {
					// Id Category ID.
					Id *string `json:"id,omitempty"`

					// Name Category name.
					Name *string `json:"name,omitempty"`
				} `json:"Categories"`

				// Id Area ID.
				Id *string `json:"id,omitempty"`

				// Name Area name.
				Name *string `json:"name,omitempty"`
			} `json:"Areas,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDAR20Core20API200DomainModelLevelResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200DomainModelLevelWithResponse call
func ParseGetGatewayCEDAR20Core20API200DomainModelLevelResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200DomainModelLevelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200DomainModelLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// DomainModelLevels Array of domain model level names
			DomainModelLevels []string `json:"DomainModelLevels"`

			// Count Number of domain model levels returned
			Count int `json:"count"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDAR20Core20API200DomainModelNameResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200DomainModelNameWithResponse call
func ParseGetGatewayCEDAR20Core20API200DomainModelNameResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200DomainModelNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200DomainModelNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// DomainModelNames An array of domain model names.
			DomainModelNames []string `json:"DomainModelNames"`

			// Count The number of domain model names found.
			Count int32 `json:"count"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDAR20Core20API200EnumerationResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200EnumerationWithResponse call
func ParseGetGatewayCEDAR20Core20API200EnumerationResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200EnumerationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200EnumerationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Enumerations Array of enumeration objects with their values.
			Enumerations []struct {
				// Caption A display caption for the enumeration.
				Caption     *string `json:"caption"`
				Description *string `json:"description"`

				// Name The name of the enumeration.
				Name string `json:"name"`

				// Values List of values for this enumeration.
				Values []struct {
					// Description A human-readable description for the enumeration value.
					Description string `json:"description"`

					// Value The literal value of the enumeration entry.
					Value string `json:"value"`
				} `json:"values"`
			} `json:"Enumerations"`

			// Count The number of enumerations returned.
			Count int32 `json:"count"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDAR20Core20API200ExchangeResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200ExchangeWithResponse call
func ParseGetGatewayCEDAR20Core20API200ExchangeResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200ExchangeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200ExchangeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Exchanges Array of exchange objects
			Exchanges []struct {
				// ApiOwnership API ownership information
				ApiOwnership *string `json:"apiOwnership"`

				// BusinessPurposeOfAddress Business purposes for address data usage
				BusinessPurposeOfAddress []string `json:"businessPurposeOfAddress"`

				// ConnectionFrequency Frequency of data exchange connections
				ConnectionFrequency []string `json:"connectionFrequency"`

				// ContainsBankingData Whether the exchange includes banking data
				ContainsBankingData *bool `json:"containsBankingData"`

				// ContainsBeneficiaryAddress Whether the exchange contains beneficiary address data
				ContainsBeneficiaryAddress *bool `json:"containsBeneficiaryAddress"`

				// ContainsPhi Whether the exchange contains Protected Health Information
				ContainsPhi *bool `json:"containsPhi"`

				// ContainsPii Whether the exchange contains Personally Identifiable Information
				ContainsPii *bool `json:"containsPii"`

				// DataExchangeAgreement Data exchange agreement information
				DataExchangeAgreement *string `json:"dataExchangeAgreement"`

				// DataFormat Data format used in the exchange
				DataFormat *string `json:"dataFormat"`

				// DataFormatOther Other data format if not in standard list
				DataFormatOther *string `json:"dataFormatOther"`

				// ExchangeCUIDescription Description of CUI in the exchange
				ExchangeCUIDescription *string `json:"exchangeCUIDescription"`

				// ExchangeCUIType Types of CUI in the exchange
				ExchangeCUIType []string `json:"exchangeCUIType"`

				// ExchangeConnectionAuthenticated Whether the exchange connection is authenticated
				ExchangeConnectionAuthenticated *bool `json:"exchangeConnectionAuthenticated"`

				// ExchangeContainsCUI Whether the exchange contains Controlled Unclassified Information
				ExchangeContainsCUI *bool `json:"exchangeContainsCUI"`

				// ExchangeDescription Description of the data exchange
				ExchangeDescription *string `json:"exchangeDescription"`

				// ExchangeEndDate End date of the exchange
				ExchangeEndDate *openapi_types.Date `json:"exchangeEndDate"`

				// ExchangeId Unique identifier for the exchange
				ExchangeId *string `json:"exchangeId,omitempty"`

				// ExchangeName Name of the data exchange
				ExchangeName *string `json:"exchangeName,omitempty"`

				// ExchangeNetworkProtocol Network protocols used for the exchange
				ExchangeNetworkProtocol []string `json:"exchangeNetworkProtocol"`

				// ExchangeNetworkProtocolOther Other network protocol if not in standard list
				ExchangeNetworkProtocolOther *string `json:"exchangeNetworkProtocolOther"`

				// ExchangeRetiredDate Retirement date of the exchange
				ExchangeRetiredDate *openapi_types.Date `json:"exchangeRetiredDate"`

				// ExchangeStartDate Start date of the exchange
				ExchangeStartDate *openapi_types.Date `json:"exchangeStartDate"`

				// ExchangeState Current state of the exchange
				ExchangeState *string `json:"exchangeState"`

				// ExchangeVersion Version of the exchange
				ExchangeVersion *string `json:"exchangeVersion"`

				// FromOwnerId ID of the sender/source system
				FromOwnerId *string `json:"fromOwnerId"`

				// FromOwnerName Name of the sender/source system
				FromOwnerName *string `json:"fromOwnerName"`

				// FromOwnerType Type of the sender/source system
				FromOwnerType *GetGatewayCEDAR20Core20API200Exchange200ExchangesFromOwnerType `json:"fromOwnerType"`

				// IsAddressEditable Whether address data is editable
				IsAddressEditable *bool `json:"isAddressEditable"`

				// IsBeneficiaryMailingFile Whether this supports mailing to beneficiaries
				IsBeneficiaryMailingFile *bool `json:"isBeneficiaryMailingFile"`

				// NumOfRecords Number of records exchanged
				NumOfRecords *string `json:"numOfRecords"`

				// SharedViaApi Whether data is shared via API
				SharedViaApi *bool `json:"sharedViaApi"`

				// ToOwnerId ID of the receiver/destination system
				ToOwnerId *string `json:"toOwnerId"`

				// ToOwnerName Name of the receiver/destination system
				ToOwnerName *string `json:"toOwnerName"`

				// ToOwnerType Type of the receiver/destination system
				ToOwnerType *GetGatewayCEDAR20Core20API200Exchange200ExchangesToOwnerType `json:"toOwnerType"`

				// TypeOfData Types of data being exchanged
				TypeOfData []struct {
					// Id Type of data ID
					Id *string `json:"id"`

					// Name Type of data name
					Name *string `json:"name"`
				} `json:"typeOfData"`
			} `json:"Exchanges"`

			// Count Number of exchanges returned
			Count int32 `json:"count"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutGatewayCEDAR20Core20API200ExchangeResponse parses an HTTP response from a PutGatewayCEDAR20Core20API200ExchangeWithResponse call
func ParsePutGatewayCEDAR20Core20API200ExchangeResponse(rsp *http.Response) (*PutGatewayCEDAR20Core20API200ExchangeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutGatewayCEDAR20Core20API200ExchangeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDAR20Core20API200ExchangeIdResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200ExchangeIdWithResponse call
func ParseGetGatewayCEDAR20Core20API200ExchangeIdResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200ExchangeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200ExchangeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// BusinessPurposeOfAddress Business purposes for address data usage
			BusinessPurposeOfAddress []string `json:"businessPurposeOfAddress"`

			// ConnectionFrequency Frequency of data exchange connections
			ConnectionFrequency []string `json:"connectionFrequency"`

			// ExchangeCUIDescription Description of CUI in the exchange
			ExchangeCUIDescription *string `json:"exchangeCUIDescription"`

			// ExchangeContainsCUI Whether the exchange contains Controlled Unclassified Information
			ExchangeContainsCUI *bool `json:"exchangeContainsCUI"`

			// ExchangeEndDate End date of the exchange
			ExchangeEndDate *openapi_types.Date `json:"exchangeEndDate"`

			// ExchangeId Unique identifier for the exchange
			ExchangeId string `json:"exchangeId"`

			// ExchangeName Name of the data exchange
			ExchangeName string `json:"exchangeName"`

			// ExchangeNetworkProtocol Network protocols used for the exchange
			ExchangeNetworkProtocol []string `json:"exchangeNetworkProtocol"`

			// ExchangeNetworkProtocolOther Other network protocol if not in standard list
			ExchangeNetworkProtocolOther *string `json:"exchangeNetworkProtocolOther"`

			// ExchangeRetiredDate Retirement date of the exchange
			ExchangeRetiredDate *openapi_types.Date `json:"exchangeRetiredDate"`

			// ExchangeStartDate Start date of the exchange
			ExchangeStartDate *openapi_types.Date `json:"exchangeStartDate"`

			// ExchangeState Current state of the exchange
			ExchangeState *string `json:"exchangeState,omitempty"`

			// ExchangeVersion Version of the exchange
			ExchangeVersion *string `json:"exchangeVersion,omitempty"`

			// FromOwnerId ID of the sender/source system
			FromOwnerId string `json:"fromOwnerId"`

			// FromOwnerName Name of the sender/source system
			FromOwnerName string `json:"fromOwnerName"`

			// FromOwnerType Type of the sender/source system
			FromOwnerType GetGatewayCEDAR20Core20API200ExchangeId200FromOwnerType `json:"fromOwnerType"`

			// ToOwnerId ID of the receiver/destination system
			ToOwnerId string `json:"toOwnerId"`

			// ToOwnerName Name of the receiver/destination system
			ToOwnerName string `json:"toOwnerName"`

			// ToOwnerType Type of the receiver/destination system
			ToOwnerType GetGatewayCEDAR20Core20API200ExchangeId200ToOwnerType `json:"toOwnerType"`

			// TypeOfData Types of data being exchanged
			TypeOfData []string `json:"typeOfData"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDAR20Core20API200OrganizationResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200OrganizationWithResponse call
func ParseGetGatewayCEDAR20Core20API200OrganizationResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200OrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200OrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Organizations Array of organizations (single organization tree when no filter, array with one filtered organization when filter is provided)
			Organizations *[]OrganizationSchema `json:"Organizations"`

			// Count Number of organizations returned (only present when no filter is provided or no match found)
			Count *int `json:"count"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDAR20Core20API200RoleResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200RoleWithResponse call
func ParseGetGatewayCEDAR20Core20API200RoleResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200RoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200RoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Roles Array of role assignment objects
			Roles []Role `json:"Roles"`

			// Count Number of role assignments returned
			Count int32 `json:"count"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewayCEDAR20Core20API200RoleResponse parses an HTTP response from a PostGatewayCEDAR20Core20API200RoleWithResponse call
func ParsePostGatewayCEDAR20Core20API200RoleResponse(rsp *http.Response) (*PostGatewayCEDAR20Core20API200RoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewayCEDAR20Core20API200RoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Message Array of GUIDs for the created role assignments
			Message []string `json:"message"`

			// Result Result status of the operation
			Result string `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteGatewayCEDAR20Core20API200RoleListResponse parses an HTTP response from a DeleteGatewayCEDAR20Core20API200RoleListWithResponse call
func ParseDeleteGatewayCEDAR20Core20API200RoleListResponse(rsp *http.Response) (*DeleteGatewayCEDAR20Core20API200RoleListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGatewayCEDAR20Core20API200RoleListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDAR20Core20API200RoleTypeApplicationResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200RoleTypeApplicationWithResponse call
func ParseGetGatewayCEDAR20Core20API200RoleTypeApplicationResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200RoleTypeApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200RoleTypeApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// RoleTypes Array of role type objects
			RoleTypes []RoleType `json:"RoleTypes"`

			// Count Number of role types returned
			Count int32 `json:"count"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDAR20Core20API200SoftwareProductsResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200SoftwareProductsWithResponse call
func ParseGetGatewayCEDAR20Core20API200SoftwareProductsResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200SoftwareProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200SoftwareProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// AiSolnCatg AI solution categories
			AiSolnCatg *[]string `json:"aiSolnCatg"`

			// AiSolnCatgOther Other AI solution category
			AiSolnCatgOther *string `json:"aiSolnCatgOther"`

			// ApiDataArea API data areas
			ApiDataArea *[]string `json:"apiDataArea"`

			// ApiDescPubLocation API description publication location
			ApiDescPubLocation *string `json:"apiDescPubLocation"`

			// ApiDescPublished API description published status
			ApiDescPublished *string `json:"apiDescPublished"`

			// ApiFHIRUse API FHIR usage
			ApiFHIRUse *string `json:"apiFHIRUse"`

			// ApiFHIRUseOther Other API FHIR usage
			ApiFHIRUseOther *string `json:"apiFHIRUseOther"`

			// ApiHasPortal Whether API has portal
			ApiHasPortal *bool `json:"apiHasPortal"`

			// ApisAccessibility APIs accessibility
			ApisAccessibility *string `json:"apisAccessibility"`

			// ApisDeveloped APIs developed status
			ApisDeveloped *string `json:"apisDeveloped"`

			// DevelopmentStage Development stage
			DevelopmentStage *string `json:"developmentStage"`

			// HostingInfrastructureSystem Whether the system is a hosting infrastructure system
			HostingInfrastructureSystem *bool `json:"hostingInfrastructureSystem,omitempty"`

			// SoftwareProducts Array of software products
			SoftwareProducts *[]struct {
				// ApiGatewayUse Whether API gateway is used
				ApiGatewayUse *bool `json:"api_gateway_use"`

				// ElaPurchase ELA purchase information
				ElaPurchase *string `json:"ela_purchase"`

				// ElaVendorId ELA vendor ID
				ElaVendorId *string `json:"ela_vendor_id"`

				// ProvidesAiCapability Whether provides AI capability
				ProvidesAiCapability *bool `json:"provides_ai_capability"`

				// Refstr Reference string
				Refstr *string `json:"refstr"`

				// SoftwareCatagoryConnectionGuid Software category connection GUID
				SoftwareCatagoryConnectionGuid *string `json:"softwareCatagoryConnectionGuid"`

				// SoftwareVendorConnectionGuid Software vendor connection GUID
				SoftwareVendorConnectionGuid *string `json:"softwareVendorConnectionGuid"`

				// SoftwareCost Software cost
				SoftwareCost *string `json:"software_cost"`

				// SoftwareElaOrganization Software ELA organization
				SoftwareElaOrganization *string `json:"software_ela_organization"`

				// SoftwareName Software name
				SoftwareName *string `json:"software_name"`

				// SystemSoftwareConnectionGuid System software connection GUID
				SystemSoftwareConnectionGuid *string `json:"systemSoftwareConnectionGuid"`

				// TechnopediaCategory Technopedia category
				TechnopediaCategory *string `json:"technopedia_category"`

				// TechnopediaId Technopedia ID
				TechnopediaId *string `json:"technopedia_id"`

				// VendorName Vendor name
				VendorName *string `json:"vendor_name"`
			} `json:"softwareProducts"`

			// SystemHasApiGateway Whether system has API gateway
			SystemHasApiGateway *bool `json:"systemHasApiGateway"`

			// UsesAiTech Uses AI technology
			UsesAiTech *string `json:"usesAiTech"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewayCEDAR20Core20API200SoftwareProductsResponse parses an HTTP response from a PostGatewayCEDAR20Core20API200SoftwareProductsWithResponse call
func ParsePostGatewayCEDAR20Core20API200SoftwareProductsResponse(rsp *http.Response) (*PostGatewayCEDAR20Core20API200SoftwareProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewayCEDAR20Core20API200SoftwareProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDAR20Core20API200StakeholderResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200StakeholderWithResponse call
func ParseGetGatewayCEDAR20Core20API200StakeholderResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200StakeholderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200StakeholderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Stakeholders Array of stakeholder objects
			Stakeholders []struct {
				// Id Stakeholder ID
				Id string `json:"id"`

				// Name Stakeholder name
				Name string `json:"name"`

				// State Stakeholder state (only included when idsOnly is false)
				State *string `json:"state"`

				// Version Stakeholder version (only included when idsOnly is false)
				Version *string `json:"version"`
			} `json:"Stakeholders"`

			// Count Number of stakeholders returned
			Count int `json:"count"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteGatewayCEDAR20Core20API200SupportContactResponse parses an HTTP response from a DeleteGatewayCEDAR20Core20API200SupportContactWithResponse call
func ParseDeleteGatewayCEDAR20Core20API200SupportContactResponse(rsp *http.Response) (*DeleteGatewayCEDAR20Core20API200SupportContactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGatewayCEDAR20Core20API200SupportContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDAR20Core20API200SupportContactResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200SupportContactWithResponse call
func ParseGetGatewayCEDAR20Core20API200SupportContactResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200SupportContactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200SupportContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// SupportContacts Array of support contact objects
			SupportContacts []struct {
				// Application Application/System GUID
				Application *string `json:"application"`

				// Email Support contact email address
				Email *string `json:"email"`

				// Id Support contact ID (GUID)
				Id *string `json:"id"`

				// Name Support contact name
				Name *string `json:"name"`

				// Phone Support contact phone number
				Phone *string `json:"phone"`

				// Title Support contact job title
				Title *string `json:"title"`

				// Url Support contact URL
				Url *string `json:"url"`
			} `json:"SupportContacts"`

			// Count Number of support contacts returned
			Count int `json:"count"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewayCEDAR20Core20API200SupportContactResponse parses an HTTP response from a PostGatewayCEDAR20Core20API200SupportContactWithResponse call
func ParsePostGatewayCEDAR20Core20API200SupportContactResponse(rsp *http.Response) (*PostGatewayCEDAR20Core20API200SupportContactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewayCEDAR20Core20API200SupportContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDAR20Core20API200SystemDetailIdResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200SystemDetailIdWithResponse call
func ParseGetGatewayCEDAR20Core20API200SystemDetailIdResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200SystemDetailIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200SystemDetailIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			BusinessOwnerInformation *struct {
				N508UserInterface              *GetGatewayCEDAR20Core20API200SystemDetailId200BusinessOwnerInformation508UserInterface            `json:"508UserInterface"`
				BeneficiaryAddressPurpose      *[]GetGatewayCEDAR20Core20API200SystemDetailId200BusinessOwnerInformationBeneficiaryAddressPurpose `json:"beneficiaryAddressPurpose"`
				BeneficiaryAddressPurposeOther *string                                                                                            `json:"beneficiaryAddressPurposeOther"`
				BeneficiaryAddressSource       *[]string                                                                                          `json:"beneficiaryAddressSource"`
				BeneficiaryAddressSourceOther  *string                                                                                            `json:"beneficiaryAddressSourceOther"`
				BeneficiaryInformation         *[]GetGatewayCEDAR20Core20API200SystemDetailId200BusinessOwnerInformationBeneficiaryInformation    `json:"beneficiaryInformation"`
				CostPerYear                    *string                                                                                            `json:"costPerYear"`
				EditBeneficiaryInformation     *bool                                                                                              `json:"editBeneficiaryInformation"`
				IsCmsOwned                     *bool                                                                                              `json:"isCmsOwned"`
				NumberOfContractorFte          *string                                                                                            `json:"numberOfContractorFte"`
				NumberOfFederalFte             *string                                                                                            `json:"numberOfFederalFte"`
				NumberOfSupportedUsersPerMonth *string                                                                                            `json:"numberOfSupportedUsersPerMonth"`
				StoresBankingData              *bool                                                                                              `json:"storesBankingData"`
				StoresBeneficiaryAddress       *bool                                                                                              `json:"storesBeneficiaryAddress"`
				SystemOwnership                *string                                                                                            `json:"systemOwnership"`
			} `json:"BusinessOwnerInformation,omitempty"`
			DataCenterHosting *struct {
				MovingToCloud     *GetGatewayCEDAR20Core20API200SystemDetailId200DataCenterHostingMovingToCloud `json:"movingToCloud"`
				MovingToCloudDate *openapi_types.Date                                                           `json:"movingToCloudDate"`
			} `json:"DataCenterHosting,omitempty"`
			SoftwareProductDetails *struct {
				AiPlan              *GetGatewayCEDAR20Core20API200SystemDetailId200SoftwareProductDetailsAiPlan            `json:"aiPlan"`
				ApiDataArea         *[]GetGatewayCEDAR20Core20API200SystemDetailId200SoftwareProductDetailsApiDataArea     `json:"apiDataArea"`
				ApiFHIRUse          *GetGatewayCEDAR20Core20API200SystemDetailId200SoftwareProductDetailsApiFHIRUse        `json:"apiFHIRUse"`
				ApiFHIRUseOther     *string                                                                                `json:"apiFHIRUseOther"`
				ApisAccessibility   *GetGatewayCEDAR20Core20API200SystemDetailId200SoftwareProductDetailsApisAccessibility `json:"apisAccessibility"`
				ApisDeveloped       *GetGatewayCEDAR20Core20API200SystemDetailId200SoftwareProductDetailsApisDeveloped     `json:"apisDeveloped"`
				SystemAiType        *string                                                                                `json:"systemAiType"`
				SystemAiTypeOther   *string                                                                                `json:"systemAiTypeOther"`
				SystemHasApiGateway *bool                                                                                  `json:"systemHasApiGateway"`
			} `json:"SoftwareProductDetails,omitempty"`
			SystemMaintainerInformation *struct {
				AdHocAgileDeploymentFrequency         *GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationAdHocAgileDeploymentFrequency         `json:"adHocAgileDeploymentFrequency"`
				AgileUsed                             *bool                                                                                                           `json:"agileUsed"`
				AuthoritativeDatasource               *string                                                                                                         `json:"authoritativeDatasource"`
				BusinessArtifactsOnDemand             *bool                                                                                                           `json:"businessArtifactsOnDemand"`
				DataAtRestEncryptionKeyManagement     *GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationDataAtRestEncryptionKeyManagement     `json:"dataAtRestEncryptionKeyManagement"`
				DeploymentFrequency                   *GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationDeploymentFrequency                   `json:"deploymentFrequency"`
				DevCompletionPercent                  *string                                                                                                         `json:"devCompletionPercent"`
				DevWorkDescription                    *string                                                                                                         `json:"devWorkDescription"`
				EcapParticipation                     *bool                                                                                                           `json:"ecapParticipation"`
				FrontendAccessType                    *GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationFrontendAccessType                    `json:"frontendAccessType"`
				HardCodedIpAddress                    *bool                                                                                                           `json:"hardCodedIpAddress"`
				Ip6EnabledAssetPercent                *GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationIp6EnabledAssetPercent                `json:"ip6EnabledAssetPercent"`
				Ip6TransitionPlan                     *GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationIp6TransitionPlan                     `json:"ip6TransitionPlan"`
				IpEnabledAssetCount                   *int32                                                                                                          `json:"ipEnabledAssetCount"`
				LegalHoldCaseName                     *string                                                                                                         `json:"legalHoldCaseName"`
				LocallyStoredUserInformation          *string                                                                                                         `json:"locallyStoredUserInformation"`
				MajorRefreshDate                      *openapi_types.Date                                                                                             `json:"majorRefreshDate"`
				MultifactorAuthenticationMethod       *[]GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationMultifactorAuthenticationMethod     `json:"multifactorAuthenticationMethod"`
				MultifactorAuthenticationMethodOther  *string                                                                                                         `json:"multifactorAuthenticationMethodOther"`
				NetAccessibility                      *GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationNetAccessibility                      `json:"netAccessibility"`
				NetworkTrafficEncryptionKeyManagement *GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationNetworkTrafficEncryptionKeyManagement `json:"networkTrafficEncryptionKeyManagement"`
				NoMajorRefresh                        *bool                                                                                                           `json:"noMajorRefresh"`
				NoPersistentRecordsFlag               *bool                                                                                                           `json:"noPersistentRecordsFlag"`
				NoPlannedMajorRefresh                 *bool                                                                                                           `json:"noPlannedMajorRefresh"`
				OmDocumentationOnDemand               *bool                                                                                                           `json:"omDocumentationOnDemand"`
				PlansToRetireReplace                  *GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationPlansToRetireReplace                  `json:"plansToRetireReplace"`
				QuarterToRetireReplace                *string                                                                                                         `json:"quarterToRetireReplace"`
				RecordsManagementBucket               *[]string                                                                                                       `json:"recordsManagementBucket"`
				RecordsManagementDisposalLocation     *string                                                                                                         `json:"recordsManagementDisposalLocation"`
				RecordsManagementDisposalPlan         *string                                                                                                         `json:"recordsManagementDisposalPlan"`
				RecordsUnderLegalHold                 *bool                                                                                                           `json:"recordsUnderLegalHold"`
				SourceCodeOnDemand                    *bool                                                                                                           `json:"sourceCodeOnDemand"`
				SystemCustomization                   *GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationSystemCustomization                   `json:"systemCustomization"`
				SystemDataLocation                    *[]GetGatewayCEDAR20Core20API200SystemDetailId200SystemMaintainerInformationSystemDataLocation                  `json:"systemDataLocation"`
				SystemDataLocationNotes               *string                                                                                                         `json:"systemDataLocationNotes"`
				SystemDesignOnDemand                  *bool                                                                                                           `json:"systemDesignOnDemand"`
				SystemProductionDate                  *openapi_types.Date                                                                                             `json:"systemProductionDate"`
				SystemRequirementsOnDemand            *bool                                                                                                           `json:"systemRequirementsOnDemand"`
				TestPlanOnDemand                      *bool                                                                                                           `json:"testPlanOnDemand"`
				TestReportsOnDemand                   *bool                                                                                                           `json:"testReportsOnDemand"`
				TestScriptsOnDemand                   *bool                                                                                                           `json:"testScriptsOnDemand"`
				YearToRetireReplace                   *string                                                                                                         `json:"yearToRetireReplace"`
			} `json:"SystemMaintainerInformation,omitempty"`
			Acronym                 *string             `json:"acronym"`
			AtoEffectiveDate        *openapi_types.Date `json:"atoEffectiveDate"`
			AtoExpirationDate       *openapi_types.Date `json:"atoExpirationDate"`
			BelongsTo               *string             `json:"belongsTo"`
			BusinessOwnerOrg        *string             `json:"businessOwnerOrg"`
			BusinessOwnerOrgComp    *string             `json:"businessOwnerOrgComp"`
			Description             *string             `json:"description"`
			IctObjectId             *string             `json:"ictObjectId"`
			Id                      *string             `json:"id"`
			Name                    *string             `json:"name"`
			NextVersionId           *string             `json:"nextVersionId"`
			PreviousVersionId       *string             `json:"previousVersionId"`
			State                   *string             `json:"state"`
			Status                  *string             `json:"status"`
			SystemMaintainerOrg     *string             `json:"systemMaintainerOrg"`
			SystemMaintainerOrgComp *string             `json:"systemMaintainerOrgComp"`
			Uuid                    *string             `json:"uuid"`
			Version                 *string             `json:"version"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDAR20Core20API200SystemSummaryResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200SystemSummaryWithResponse call
func ParseGetGatewayCEDAR20Core20API200SystemSummaryResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200SystemSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200SystemSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// SystemSummary Array of system summary objects
			SystemSummary []struct {
				// AtoEffectiveDate ATO effective date (only present when idsOnly is false)
				AtoEffectiveDate *openapi_types.Date `json:"atoEffectiveDate"`

				// AtoExpirationDate ATO expiration date (only present when idsOnly is false)
				AtoExpirationDate *openapi_types.Date `json:"atoExpirationDate"`

				// BusinessOwnerOrgComp Business owner organization component (only present when idsOnly is false)
				BusinessOwnerOrgComp *string `json:"businessOwnerOrgComp"`

				// Id System ID
				Id *string `json:"id"`

				// Name System name
				Name *string `json:"name"`

				// State System state (only present when idsOnly is false)
				State *string `json:"state"`

				// SystemMaintainerOrgComp System maintainer organization component (only present when idsOnly is false)
				SystemMaintainerOrgComp *string `json:"systemMaintainerOrgComp"`
			} `json:"SystemSummary"`

			// Count Number of items returned
			Count int `json:"count"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDAR20Core20API200SystemSummaryIdResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200SystemSummaryIdWithResponse call
func ParseGetGatewayCEDAR20Core20API200SystemSummaryIdResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200SystemSummaryIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200SystemSummaryIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// SystemSummary Array of system summary records
			SystemSummary []struct {
				// Acronym System acronym
				Acronym *string `json:"acronym"`

				// Id System GUID
				Id *string `json:"id"`

				// NextVersionId Next version ID
				NextVersionId *string `json:"nextVersionId"`

				// PreviousVersionId Previous version ID
				PreviousVersionId *string `json:"previousVersionId"`
			} `json:"SystemSummary"`

			// Count Number of summary items returned
			Count int `json:"count"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDAR20Core20API200ThreatResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200ThreatWithResponse call
func ParseGetGatewayCEDAR20Core20API200ThreatResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200ThreatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200ThreatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Threats Array of threat objects (empty array when no threats found)
			Threats *[]struct {
				// AlternativeId ID assigned by a source system. For example, POA&M ID from CFACTS
				AlternativeId *string `json:"alternativeId"`
				ControlFamily *string `json:"controlFamily"`

				// DaysOpen Number of days the threat has been open
				DaysOpen int32 `json:"daysOpen"`

				// Id ID assigned by CEDAR
				Id *string `json:"id"`

				// ParentId ID of the object the threat is assigned to
				ParentId *string `json:"parentId"`

				// Type Type of threat (always POA&M)
				Type              string  `json:"type"`
				WeaknessRiskLevel *string `json:"weaknessRiskLevel"`
			} `json:"Threats"`

			// Count Number of threats returned (0 when no threats found)
			Count int32 `json:"count"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDAR20Core20API200UrlIdResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200UrlIdWithResponse call
func ParseGetGatewayCEDAR20Core20API200UrlIdResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200UrlIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200UrlIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// UrlList Array of URL objects (only present when URLs are found)
			UrlList *[]struct {
				// Address A valid and full URL
				Address *string `json:"address"`

				// IsApiEndpoint A boolean flag to indicate whether URL is an API Endpoint
				IsApiEndpoint *bool `json:"isApiEndpoint"`

				// IsBehindWebApplicationFirewall A boolean flag to indicate whether the application is behind a Web Application Firewall (WAF)
				IsBehindWebApplicationFirewall *bool `json:"isBehindWebApplicationFirewall"`

				// IsVersionCodeRepository A boolean flag to indicate if this URL provides access to a versioned code repository?
				IsVersionCodeRepository *bool `json:"isVersionCodeRepository"`

				// UrlHostingEnv The hosting environment associated with a specific URL
				UrlHostingEnv *string `json:"urlHostingEnv"`

				// UrlId Unique key that uniquely identified the URL in database
				UrlId *string `json:"urlId"`
			} `json:"UrlList"`

			// Count Number of items returned (0 when no URLs found)
			Count int `json:"count"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDAR20Core20API200UserResponse parses an HTTP response from a GetGatewayCEDAR20Core20API200UserWithResponse call
func ParseGetGatewayCEDAR20Core20API200UserResponse(rsp *http.Response) (*GetGatewayCEDAR20Core20API200UserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDAR20Core20API200UserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Users *[]struct {
				// Application The application the user belongs to.
				Application *string `json:"application,omitempty"`

				// Email The user's email address.
				Email *openapi_types.Email `json:"email"`

				// FirstName The user's first name.
				FirstName *string `json:"firstName"`

				// Id The unique ID (GUID) of the user.
				Id *openapi_types.UUID `json:"id,omitempty"`

				// LastName The user's last name.
				LastName *string `json:"lastName"`

				// Phone The user's phone number.
				Phone *string `json:"phone"`

				// UserName The user's username.
				UserName *string `json:"userName"`
			} `json:"Users,omitempty"`
			Count *int32 `json:"count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewayCEDAR20Core20API200UserResponse parses an HTTP response from a PostGatewayCEDAR20Core20API200UserWithResponse call
func ParsePostGatewayCEDAR20Core20API200UserResponse(rsp *http.Response) (*PostGatewayCEDAR20Core20API200UserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewayCEDAR20Core20API200UserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewayCEDAR20Core20APIExchangeResponse parses an HTTP response from a PostGatewayCEDAR20Core20APIExchangeWithResponse call
func ParsePostGatewayCEDAR20Core20APIExchangeResponse(rsp *http.Response) (*PostGatewayCEDAR20Core20APIExchangeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewayCEDAR20Core20APIExchangeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDARIntake10ClientIdResponse parses an HTTP response from a GetGatewayCEDARIntake10ClientIdWithResponse call
func ParseGetGatewayCEDARIntake10ClientIdResponse(rsp *http.Response) (*GetGatewayCEDARIntake10ClientIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDARIntake10ClientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Body The request data body
			Body *string `json:"body,omitempty"`

			// BodyFormat The format of the request data
			BodyFormat *string `json:"bodyFormat,omitempty"`

			// CedarCreatedDate When CEDAR created the request record
			CedarCreatedDate *time.Time `json:"cedarCreatedDate,omitempty"`

			// CedarId The CEDAR intake request ID
			CedarId *string `json:"cedarId,omitempty"`

			// CedarLastUpdatedDate When CEDAR last updated the request record
			CedarLastUpdatedDate *time.Time `json:"cedarLastUpdatedDate,omitempty"`

			// CedarStatus The CEDAR status of the request
			CedarStatus *string `json:"cedarStatus,omitempty"`

			// CedarStatusMessage Status message from CEDAR (currently hardcoded as empty string for backwards compatibility)
			CedarStatusMessage *string `json:"cedarStatusMessage,omitempty"`

			// ClientCreatedDate When the client created the request
			ClientCreatedDate *time.Time `json:"clientCreatedDate,omitempty"`

			// ClientId The client ID
			ClientId *string `json:"clientId,omitempty"`

			// ClientLastUpdatedDate When the client last updated the request
			ClientLastUpdatedDate *time.Time `json:"clientLastUpdatedDate,omitempty"`

			// ClientStatus The client status of the request
			ClientStatus *string `json:"clientStatus,omitempty"`

			// Schema The request type schema
			Schema *string `json:"schema,omitempty"`

			// Type The request type
			Type *string `json:"type,omitempty"`

			// Version The client version
			Version *string `json:"version,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDARIntake10HealthCheckResponse parses an HTTP response from a GetGatewayCEDARIntake10HealthCheckWithResponse call
func ParseGetGatewayCEDARIntake10HealthCheckResponse(rsp *http.Response) (*GetGatewayCEDARIntake10HealthCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDARIntake10HealthCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Datetime Current datetime in YYYY-MM-DD HH:mm:ss format
			Datetime string `json:"datetime"`

			// Status Health status of the service
			Status string `json:"status"`

			// Timestamp Unix timestamp of the current time
			Timestamp int `json:"timestamp"`

			// Version API version
			Version string `json:"version"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewayCEDARIntake10IntakeResponse parses an HTTP response from a PostGatewayCEDARIntake10IntakeWithResponse call
func ParsePostGatewayCEDARIntake10IntakeResponse(rsp *http.Response) (*PostGatewayCEDARIntake10IntakeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewayCEDARIntake10IntakeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message []string `json:"message"`
			Result  string   `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDARIntake10IntakeCedarIdResponse parses an HTTP response from a GetGatewayCEDARIntake10IntakeCedarIdWithResponse call
func ParseGetGatewayCEDARIntake10IntakeCedarIdResponse(rsp *http.Response) (*GetGatewayCEDARIntake10IntakeCedarIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDARIntake10IntakeCedarIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Body The request data body
			Body *string `json:"body,omitempty"`

			// BodyFormat The format of the request data
			BodyFormat *string `json:"bodyFormat,omitempty"`

			// CedarCreatedDate When CEDAR created the request record
			CedarCreatedDate *time.Time `json:"cedarCreatedDate,omitempty"`

			// CedarId The CEDAR intake request ID
			CedarId *string `json:"cedarId,omitempty"`

			// CedarLastUpdatedDate When CEDAR last updated the request record
			CedarLastUpdatedDate *time.Time `json:"cedarLastUpdatedDate,omitempty"`

			// CedarStatus The CEDAR status of the request
			CedarStatus *string `json:"cedarStatus,omitempty"`

			// CedarStatusMessage Status message from CEDAR (currently hardcoded as empty string for backwards compatibility)
			CedarStatusMessage *string `json:"cedarStatusMessage,omitempty"`

			// ClientCreatedDate When the client created the request
			ClientCreatedDate *time.Time `json:"clientCreatedDate,omitempty"`

			// ClientId The client ID
			ClientId *string `json:"clientId,omitempty"`

			// ClientLastUpdatedDate When the client last updated the request
			ClientLastUpdatedDate *time.Time `json:"clientLastUpdatedDate,omitempty"`

			// ClientStatus The client status of the request
			ClientStatus *string `json:"clientStatus,omitempty"`

			// Schema The request type schema
			Schema *string `json:"schema,omitempty"`

			// Type The request type
			Type *string `json:"type,omitempty"`

			// Version The client version
			Version *string `json:"version,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDARIntake10IntakeStatusResponse parses an HTTP response from a GetGatewayCEDARIntake10IntakeStatusWithResponse call
func ParseGetGatewayCEDARIntake10IntakeStatusResponse(rsp *http.Response) (*GetGatewayCEDARIntake10IntakeStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDARIntake10IntakeStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Statuses *[]struct {
				// CedarId Unique ID associated with the object in body
				CedarId *string `json:"cedarId,omitempty"`

				// CedarStatus CEDAR status describing the outcome of parsing, validation, and mapping of the payload
				CedarStatus *string `json:"cedarStatus,omitempty"`

				// CedarStatusMessage Message related to errors with the parsing, validation, and mapping of the payload (if applicable)
				CedarStatusMessage *string `json:"cedarStatusMessage,omitempty"`

				// ClientId Unique ID assigned by CEDAR
				ClientId *string `json:"clientId,omitempty"`

				// Version The version associated with the object in the body. This value can be incremented in the event a transaction needs to be resubmitted.
				Version *string `json:"version,omitempty"`
			} `json:"Statuses,omitempty"`
			Count *int `json:"count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDARIntake10StatusCedarIdResponse parses an HTTP response from a GetGatewayCEDARIntake10StatusCedarIdWithResponse call
func ParseGetGatewayCEDARIntake10StatusCedarIdResponse(rsp *http.Response) (*GetGatewayCEDARIntake10StatusCedarIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDARIntake10StatusCedarIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// CedarId The CEDAR intake request ID
			CedarId *string `json:"cedarId,omitempty"`

			// CedarStatus The CEDAR status of the request
			CedarStatus *string `json:"cedarStatus,omitempty"`

			// CedarStatusMessage Status message from CEDAR (currently hardcoded as empty string for backwards compatibility)
			CedarStatusMessage *string `json:"cedarStatusMessage,omitempty"`

			// ClientId The client ID
			ClientId *string `json:"clientId,omitempty"`

			// Version The client version
			Version *string `json:"version,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayCEDARIntake10StatusClientIdResponse parses an HTTP response from a GetGatewayCEDARIntake10StatusClientIdWithResponse call
func ParseGetGatewayCEDARIntake10StatusClientIdResponse(rsp *http.Response) (*GetGatewayCEDARIntake10StatusClientIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayCEDARIntake10StatusClientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// CedarId The CEDAR intake request ID
			CedarId *string `json:"cedarId,omitempty"`

			// CedarStatus The CEDAR status of the request
			CedarStatus *string `json:"cedarStatus,omitempty"`

			// CedarStatusMessage Status message from CEDAR (currently hardcoded as empty string for backwards compatibility)
			CedarStatusMessage *string `json:"cedarStatusMessage,omitempty"`

			// ClientId The client ID
			ClientId *string `json:"clientId,omitempty"`

			// Version The client version
			Version *string `json:"version,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewayLDAP10AuthenticateResponse parses an HTTP response from a PostGatewayLDAP10AuthenticateWithResponse call
func ParsePostGatewayLDAP10AuthenticateResponse(rsp *http.Response) (*PostGatewayLDAP10AuthenticateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewayLDAP10AuthenticateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayLDAP10PersonResponse parses an HTTP response from a GetGatewayLDAP10PersonWithResponse call
func ParseGetGatewayLDAP10PersonResponse(rsp *http.Response) (*GetGatewayLDAP10PersonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayLDAP10PersonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayLDAP10PersonIdResponse parses an HTTP response from a GetGatewayLDAP10PersonIdWithResponse call
func ParseGetGatewayLDAP10PersonIdResponse(rsp *http.Response) (*GetGatewayLDAP10PersonIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayLDAP10PersonIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewaySystem20Census20Core20API200AdminReviewerResponse parses an HTTP response from a GetGatewaySystem20Census20Core20API200AdminReviewerWithResponse call
func ParseGetGatewaySystem20Census20Core20API200AdminReviewerResponse(rsp *http.Response) (*GetGatewaySystem20Census20Core20API200AdminReviewerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewaySystem20Census20Core20API200AdminReviewerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Reviewers List of reviewers.
			Reviewers *[]struct {
				// FullName The full name of the reviewer.
				FullName *string `json:"fullName,omitempty"`

				// Id Unique identifier for the reviewer.
				Id *string `json:"id,omitempty"`

				// Type The type of reviewer (e.g., QA, DA).
				Type *string `json:"type,omitempty"`

				// UserName The username of the reviewer.
				UserName *string `json:"userName,omitempty"`
			} `json:"Reviewers,omitempty"`

			// Count The number of reviewers returned.
			Count *int `json:"count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteGatewaySystem20Census20Core20API200AdminReviewerResponse parses an HTTP response from a DeleteGatewaySystem20Census20Core20API200AdminReviewerWithResponse call
func ParseDeleteGatewaySystem20Census20Core20API200AdminReviewerResponse(rsp *http.Response) (*DeleteGatewaySystem20Census20Core20API200AdminReviewerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGatewaySystem20Census20Core20API200AdminReviewerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewaySystem20Census20Core20API200AdminReviewerResponse parses an HTTP response from a PostGatewaySystem20Census20Core20API200AdminReviewerWithResponse call
func ParsePostGatewaySystem20Census20Core20API200AdminReviewerResponse(rsp *http.Response) (*PostGatewaySystem20Census20Core20API200AdminReviewerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewaySystem20Census20Core20API200AdminReviewerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 207:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON207 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewaySystem20Census20Core20API200BudgetAndContractsResponse parses an HTTP response from a GetGatewaySystem20Census20Core20API200BudgetAndContractsWithResponse call
func ParseGetGatewaySystem20Census20Core20API200BudgetAndContractsResponse(rsp *http.Response) (*GetGatewaySystem20Census20Core20API200BudgetAndContractsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewaySystem20Census20Core20API200BudgetAndContractsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Budgets List of budgets for the system.
			Budgets *[]map[string]interface{} `json:"Budgets,omitempty"`

			// Contracts List of contracts for the system.
			Contracts *[]map[string]interface{} `json:"Contracts,omitempty"`

			// SystemId The system identifier.
			SystemId *openapi_types.UUID `json:"systemId,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewaySystem20Census20Core20API200BudgetAndContractsResponse parses an HTTP response from a PostGatewaySystem20Census20Core20API200BudgetAndContractsWithResponse call
func ParsePostGatewaySystem20Census20Core20API200BudgetAndContractsResponse(rsp *http.Response) (*PostGatewaySystem20Census20Core20API200BudgetAndContractsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewaySystem20Census20Core20API200BudgetAndContractsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewaySystem20Census20Core20API200BusinessOwnerResponse parses an HTTP response from a PostGatewaySystem20Census20Core20API200BusinessOwnerWithResponse call
func ParsePostGatewaySystem20Census20Core20API200BusinessOwnerResponse(rsp *http.Response) (*PostGatewaySystem20Census20Core20API200BusinessOwnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewaySystem20Census20Core20API200BusinessOwnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteGatewaySystem20Census20Core20API200DataExchangeNotesResponse parses an HTTP response from a DeleteGatewaySystem20Census20Core20API200DataExchangeNotesWithResponse call
func ParseDeleteGatewaySystem20Census20Core20API200DataExchangeNotesResponse(rsp *http.Response) (*DeleteGatewaySystem20Census20Core20API200DataExchangeNotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGatewaySystem20Census20Core20API200DataExchangeNotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteGatewaySystem20Census20Core20API200DataExchangeStatusResponse parses an HTTP response from a DeleteGatewaySystem20Census20Core20API200DataExchangeStatusWithResponse call
func ParseDeleteGatewaySystem20Census20Core20API200DataExchangeStatusResponse(rsp *http.Response) (*DeleteGatewaySystem20Census20Core20API200DataExchangeStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGatewaySystem20Census20Core20API200DataExchangeStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewaySystem20Census20Core20API200DataExchangeStatusResponse parses an HTTP response from a GetGatewaySystem20Census20Core20API200DataExchangeStatusWithResponse call
func ParseGetGatewaySystem20Census20Core20API200DataExchangeStatusResponse(rsp *http.Response) (*GetGatewaySystem20Census20Core20API200DataExchangeStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewaySystem20Census20Core20API200DataExchangeStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// ExchangeStatus List of exchange statuses.
			ExchangeStatus *[]struct {
				// Direction Direction of the data exchange.
				Direction *GetGatewaySystem20Census20Core20API200DataExchangeStatus200ExchangeStatusDirection `json:"direction"`

				// ExchangeId The exchange identifier.
				ExchangeId *string `json:"exchangeId"`

				// PartnerId The partner identifier.
				PartnerId *string `json:"partnerId"`

				// PartnerStatus Status of the partner.
				PartnerStatus *string `json:"partnerStatus"`

				// ReviewerStatus Status from reviewer.
				ReviewerStatus *string `json:"reviewerStatus"`

				// SystemId The system identifier.
				SystemId *string `json:"systemId"`

				// SystemStatus Status of the system.
				SystemStatus *string `json:"systemStatus"`
			} `json:"ExchangeStatus,omitempty"`

			// Count Number of exchange statuses returned.
			Count *int `json:"count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewaySystem20Census20Core20API200DataExchangeNotesResponse parses an HTTP response from a GetGatewaySystem20Census20Core20API200DataExchangeNotesWithResponse call
func ParseGetGatewaySystem20Census20Core20API200DataExchangeNotesResponse(rsp *http.Response) (*GetGatewaySystem20Census20Core20API200DataExchangeNotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewaySystem20Census20Core20API200DataExchangeNotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ExchangeNotes *[]struct {
				CreatedOn  *time.Time `json:"createdOn,omitempty"`
				ExchangeId *string    `json:"exchangeId,omitempty"`
				Note       *string    `json:"note,omitempty"`
				NoteId     *string    `json:"noteId,omitempty"`
				UserId     *string    `json:"userId,omitempty"`
				UserRole   *string    `json:"userRole,omitempty"`
			} `json:"ExchangeNotes,omitempty"`
			Count *int `json:"count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewaySystem20Census20Core20API200DataExchangeNotesResponse parses an HTTP response from a PostGatewaySystem20Census20Core20API200DataExchangeNotesWithResponse call
func ParsePostGatewaySystem20Census20Core20API200DataExchangeNotesResponse(rsp *http.Response) (*PostGatewaySystem20Census20Core20API200DataExchangeNotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewaySystem20Census20Core20API200DataExchangeNotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// Inserted Number of notes inserted
			Inserted *int `json:"inserted,omitempty"`

			// Updated Number of notes updated (always 0 for add operation)
			Updated *int `json:"updated,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewaySystem20Census20Core20API200DrmResponse parses an HTTP response from a GetGatewaySystem20Census20Core20API200DrmWithResponse call
func ParseGetGatewaySystem20Census20Core20API200DrmResponse(rsp *http.Response) (*GetGatewaySystem20Census20Core20API200DrmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewaySystem20Census20Core20API200DrmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Records List of DRM flat hierarchy records.
			Records *[]struct {
				// DrmCategory The name of the DRM category (mapped from DRM Category Name).
				DrmCategory *string `json:"drmCategory"`

				// DrmName The name of the DRM area (mapped from DRM Area Name).
				DrmName *string `json:"drmName"`
			} `json:"records,omitempty"`
			Result *string `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewaySystem20Census20Core20API200NoteResponse parses an HTTP response from a PostGatewaySystem20Census20Core20API200NoteWithResponse call
func ParsePostGatewaySystem20Census20Core20API200NoteResponse(rsp *http.Response) (*PostGatewaySystem20Census20Core20API200NoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewaySystem20Census20Core20API200NoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Message Array of descriptive messages about the operation results, including count of notes inserted.
			Message []string `json:"message"`

			// Result Operation result status. Always "success" for successful operations.
			Result PostGatewaySystem20Census20Core20API200Note200Result `json:"result"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutGatewaySystem20Census20Core20API200NoteResponse parses an HTTP response from a PutGatewaySystem20Census20Core20API200NoteWithResponse call
func ParsePutGatewaySystem20Census20Core20API200NoteResponse(rsp *http.Response) (*PutGatewaySystem20Census20Core20API200NoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutGatewaySystem20Census20Core20API200NoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteGatewaySystem20Census20Core20API200NoteListResponse parses an HTTP response from a DeleteGatewaySystem20Census20Core20API200NoteListWithResponse call
func ParseDeleteGatewaySystem20Census20Core20API200NoteListResponse(rsp *http.Response) (*DeleteGatewaySystem20Census20Core20API200NoteListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGatewaySystem20Census20Core20API200NoteListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewaySystem20Census20Core20API200NoteListResponse parses an HTTP response from a GetGatewaySystem20Census20Core20API200NoteListWithResponse call
func ParseGetGatewaySystem20Census20Core20API200NoteListResponse(rsp *http.Response) (*GetGatewaySystem20Census20Core20API200NoteListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewaySystem20Census20Core20API200NoteListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Notes *[]struct {
				CreatedOn *time.Time `json:"createdOn,omitempty"`
				Note      *string    `json:"note,omitempty"`
				NoteId    *string    `json:"noteId,omitempty"`
				PageName  *string    `json:"pageName,omitempty"`
				SystemId  *string    `json:"systemId,omitempty"`
				UserFirst *string    `json:"userFirst,omitempty"`
				UserId    *string    `json:"userId,omitempty"`
				UserLast  *string    `json:"userLast,omitempty"`
				UserRole  *string    `json:"userRole,omitempty"`
			} `json:"Notes,omitempty"`
			Count *int `json:"count,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewaySystem20Census20Core20API200PageUrlsResponse parses an HTTP response from a GetGatewaySystem20Census20Core20API200PageUrlsWithResponse call
func ParseGetGatewaySystem20Census20Core20API200PageUrlsResponse(rsp *http.Response) (*GetGatewaySystem20Census20Core20API200PageUrlsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewaySystem20Census20Core20API200PageUrlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Urls List of URLs associated with the system.
			Urls *[]struct {
				// Link A valid and full system URL.
				Link *string `json:"link,omitempty"`

				// ProvidesVerCodeAccess A boolean flag to indicate if this URL provides access to a versioned code repository.
				ProvidesVerCodeAccess *string `json:"providesVerCodeAccess,omitempty"`

				// UrlApiEndpoint A boolean flag to indicate whether URL is an API Endpoint.
				UrlApiEndpoint *string `json:"urlApiEndpoint,omitempty"`

				// UrlApiWaf A boolean flag to indicate whether application is behind a Web Application Firewall (WAF).
				UrlApiWaf *string `json:"urlApiWaf,omitempty"`

				// UrlHostingEnv A string that contains what hosting environment this URL is for.
				UrlHostingEnv *string `json:"urlHostingEnv,omitempty"`

				// UrlId Unique key that uniquely identifies the URL in database.
				UrlId *string `json:"urlId,omitempty"`
			} `json:"Urls,omitempty"`

			// Count Number of URLs returned (as string).
			Count string `json:"count"`

			// NoURLsFlag Flag indicating no URLs are available.
			NoURLsFlag *bool `json:"noURLsFlag"`

			// PageName The page name, only present when count is 0.
			PageName *string `json:"pageName"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewaySystem20Census20Core20API200PageUrlsResponse parses an HTTP response from a PostGatewaySystem20Census20Core20API200PageUrlsWithResponse call
func ParsePostGatewaySystem20Census20Core20API200PageUrlsResponse(rsp *http.Response) (*PostGatewaySystem20Census20Core20API200PageUrlsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewaySystem20Census20Core20API200PageUrlsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewaySystem20Census20Core20API200PageBusinessOwnerResponse parses an HTTP response from a GetGatewaySystem20Census20Core20API200PageBusinessOwnerWithResponse call
func ParseGetGatewaySystem20Census20Core20API200PageBusinessOwnerResponse(rsp *http.Response) (*GetGatewaySystem20Census20Core20API200PageBusinessOwnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewaySystem20Census20Core20API200PageBusinessOwnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// SystemOwnership Overall ownership of the system (e.g., "Federal", "Contractor").
			SystemOwnership *string `json:"SystemOwnership"`

			// CostPerYear Annual cost of the system.
			CostPerYear *string `json:"costPerYear"`

			// Description Description of the system.
			Description *string `json:"description"`

			// EditBeneficiaryInformation Indicates if beneficiary information can be edited.
			EditBeneficiaryInformation *bool `json:"editBeneficiaryInformation"`

			// Id The GUID of the system.
			Id *string `json:"id,omitempty"`

			// NumberOfContractorFte Number of Contractor FTEs supporting the system.
			NumberOfContractorFte *string `json:"numberOfContractorFte"`

			// NumberOfFederalFte Number of Federal FTEs supporting the system.
			NumberOfFederalFte *string `json:"numberOfFederalFte"`

			// NumberOfSupportedUsersPerMonth Number of direct system users per month.
			NumberOfSupportedUsersPerMonth *string `json:"numberOfSupportedUsersPerMonth"`

			// PageName The page name for the business owner information.
			PageName *string `json:"pageName,omitempty"`

			// StoresHealthDisparityData Indicates if the system stores health disparity data.
			StoresHealthDisparityData *bool `json:"storesHealthDisparityData"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewaySystem20Census20Core20API200PageDataCentersResponse parses an HTTP response from a GetGatewaySystem20Census20Core20API200PageDataCentersWithResponse call
func ParseGetGatewaySystem20Census20Core20API200PageDataCentersResponse(rsp *http.Response) (*GetGatewaySystem20Census20Core20API200PageDataCentersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewaySystem20Census20Core20API200PageDataCentersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Deployments *[]struct {
				Deployment *struct {
					DataCenter *struct {
						Address1     *string                                                                                        `json:"address1,omitempty"`
						Address2     *string                                                                                        `json:"address2,omitempty"`
						AddressState *string                                                                                        `json:"addressState,omitempty"`
						City         *string                                                                                        `json:"city,omitempty"`
						Description  *string                                                                                        `json:"description,omitempty"`
						EndDate      *openapi_types.Date                                                                            `json:"endDate,omitempty"`
						Id           *string                                                                                        `json:"id,omitempty"`
						Name         *string                                                                                        `json:"name,omitempty"`
						StartDate    *openapi_types.Date                                                                            `json:"startDate,omitempty"`
						State        *GetGatewaySystem20Census20Core20API200PageDataCenters200DeploymentsDeploymentDataCenterState  `json:"state,omitempty"`
						Status       *GetGatewaySystem20Census20Core20API200PageDataCenters200DeploymentsDeploymentDataCenterStatus `json:"status,omitempty"`
						Version      *string                                                                                        `json:"version,omitempty"`
						Zip          *string                                                                                        `json:"zip,omitempty"`
					} `json:"DataCenter,omitempty"`
					AwsEnclave          *string                                                                                      `json:"awsEnclave,omitempty"`
					AwsEnclaveOther     *string                                                                                      `json:"awsEnclaveOther,omitempty"`
					ContractorName      *string                                                                                      `json:"contractorName,omitempty"`
					DeploymentElementId *string                                                                                      `json:"deploymentElementId,omitempty"`
					DeploymentType      *GetGatewaySystem20Census20Core20API200PageDataCenters200DeploymentsDeploymentDeploymentType `json:"deploymentType,omitempty"`
					Description         *string                                                                                      `json:"description,omitempty"`
					EndDate             *openapi_types.Date                                                                          `json:"endDate,omitempty"`
					HasProductionData   *string                                                                                      `json:"hasProductionData,omitempty"`
					Id                  string                                                                                       `json:"id"`
					Name                string                                                                                       `json:"name"`
					NetworkEncryption   *string                                                                                      `json:"networkEncryption,omitempty"`
					OtherSpecialUsers   *string                                                                                      `json:"otherSpecialUsers,omitempty"`
					StartDate           *openapi_types.Date                                                                          `json:"startDate,omitempty"`
					State               *GetGatewaySystem20Census20Core20API200PageDataCenters200DeploymentsDeploymentState          `json:"state,omitempty"`
					Status              *GetGatewaySystem20Census20Core20API200PageDataCenters200DeploymentsDeploymentStatus         `json:"status,omitempty"`
					SystemId            string                                                                                       `json:"systemId"`
					SystemName          *string                                                                                      `json:"systemName,omitempty"`
					SystemVersion       *string                                                                                      `json:"systemVersion,omitempty"`
					UsersRequiringMFA   *string                                                                                      `json:"usersRequiringMFA,omitempty"`
					WanType             *string                                                                                      `json:"wanType,omitempty"`
					WanTypeOther        *string                                                                                      `json:"wanTypeOther,omitempty"`
				} `json:"Deployment,omitempty"`
				Deleted *bool `json:"deleted,omitempty"`
				Updated *bool `json:"updated,omitempty"`
			} `json:"Deployments,omitempty"`
			Count             int                 `json:"count"`
			MovingToCloud     *string             `json:"movingToCloud,omitempty"`
			MovingToCloudDate *openapi_types.Date `json:"movingToCloudDate,omitempty"`
			PageName          *string             `json:"pageName,omitempty"`
			SystemId          *string             `json:"systemId,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewaySystem20Census20Core20API200PageDataCentersResponse parses an HTTP response from a PostGatewaySystem20Census20Core20API200PageDataCentersWithResponse call
func ParsePostGatewaySystem20Census20Core20API200PageDataCentersResponse(rsp *http.Response) (*PostGatewaySystem20Census20Core20API200PageDataCentersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewaySystem20Census20Core20API200PageDataCentersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewaySystem20Census20Core20API200PageDataExchangeResponse parses an HTTP response from a GetGatewaySystem20Census20Core20API200PageDataExchangeWithResponse call
func ParseGetGatewaySystem20Census20Core20API200PageDataExchangeResponse(rsp *http.Response) (*GetGatewaySystem20Census20Core20API200PageDataExchangeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewaySystem20Census20Core20API200PageDataExchangeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DataExchanges *[]struct {
				Exchange *struct {
					ApiOwnership                    *string                                                                                                        `json:"apiOwnership"`
					BusinessPurposeOfAddress        *[]string                                                                                                      `json:"businessPurposeOfAddress"`
					ConnectionFrequency             *[]string                                                                                                      `json:"connectionFrequency"`
					ContainsBankingData             *GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeContainsBankingData             `json:"containsBankingData"`
					ContainsBeneficiaryAddress      *GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeContainsBeneficiaryAddress      `json:"containsBeneficiaryAddress"`
					ContainsPhi                     *GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeContainsPhi                     `json:"containsPhi"`
					ContainsPii                     *GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeContainsPii                     `json:"containsPii"`
					DataExchangeAgreement           *string                                                                                                        `json:"dataExchangeAgreement"`
					DataFormat                      *string                                                                                                        `json:"dataFormat"`
					DataFormatOther                 *string                                                                                                        `json:"dataFormatOther"`
					ExchangeCUIDescription          *string                                                                                                        `json:"exchangeCUIDescription"`
					ExchangeCUIType                 *[]string                                                                                                      `json:"exchangeCUIType"`
					ExchangeConnectionAuthenticated *GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeExchangeConnectionAuthenticated `json:"exchangeConnectionAuthenticated"`
					ExchangeContainsCUI             *GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeExchangeContainsCUI             `json:"exchangeContainsCUI"`
					ExchangeDescription             *string                                                                                                        `json:"exchangeDescription"`
					ExchangeEndDate                 *openapi_types.Date                                                                                            `json:"exchangeEndDate"`
					ExchangeId                      *string                                                                                                        `json:"exchangeId"`
					ExchangeName                    *string                                                                                                        `json:"exchangeName"`
					ExchangeNetworkProtocol         *[]string                                                                                                      `json:"exchangeNetworkProtocol"`
					ExchangeNetworkProtocolOther    *string                                                                                                        `json:"exchangeNetworkProtocolOther"`

					// ExchangePrimaryDataArea The primary Data Reference Model (DRM) for the exchange.
					ExchangePrimaryDataArea *string             `json:"exchangePrimaryDataArea"`
					ExchangeRetiredDate     *openapi_types.Date `json:"exchangeRetiredDate"`

					// ExchangeSecondaryDataArea Array of secondary Data Reference Models (DRMs) for the exchange.
					ExchangeSecondaryDataArea *[]string                                                                                               `json:"exchangeSecondaryDataArea"`
					ExchangeStartDate         *openapi_types.Date                                                                                     `json:"exchangeStartDate"`
					ExchangeState             *string                                                                                                 `json:"exchangeState"`
					ExchangeVersion           *string                                                                                                 `json:"exchangeVersion"`
					FromOwnerId               *string                                                                                                 `json:"fromOwnerId"`
					FromOwnerName             *string                                                                                                 `json:"fromOwnerName"`
					FromOwnerType             *string                                                                                                 `json:"fromOwnerType"`
					IsAddressEditable         *GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeIsAddressEditable        `json:"isAddressEditable"`
					IsBeneficiaryMailingFile  *GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeIsBeneficiaryMailingFile `json:"isBeneficiaryMailingFile"`
					NumOfRecords              *string                                                                                                 `json:"numOfRecords"`
					SharedViaApi              *GetGatewaySystem20Census20Core20API200PageDataExchange200DataExchangesExchangeSharedViaApi             `json:"sharedViaApi"`
					ToOwnerId                 *string                                                                                                 `json:"toOwnerId"`
					ToOwnerName               *string                                                                                                 `json:"toOwnerName"`
					ToOwnerType               *string                                                                                                 `json:"toOwnerType"`
					TypeOfData                *[]struct {
						Id   *string `json:"id"`
						Name *string `json:"name"`
					} `json:"typeOfData"`
				} `json:"Exchange,omitempty"`
				Status *struct {
					Deleted        *bool   `json:"deleted"`
					Direction      *string `json:"direction"`
					ExchangeId     *string `json:"exchangeId"`
					PartnerId      *string `json:"partnerId"`
					PartnerStatus  *string `json:"partnerStatus"`
					ReviewerStatus *string `json:"reviewerStatus"`
					SystemId       *string `json:"systemId"`
					SystemStatus   *string `json:"systemStatus"`
				} `json:"Status,omitempty"`
				Deleted   *bool   `json:"deleted"`
				Direction *string `json:"direction"`
			} `json:"DataExchanges,omitempty"`
			Count    *int    `json:"count,omitempty"`
			PageName *string `json:"pageName,omitempty"`
			SystemId *string `json:"systemId,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewaySystem20Census20Core20API200PageDataExchangeResponse parses an HTTP response from a PostGatewaySystem20Census20Core20API200PageDataExchangeWithResponse call
func ParsePostGatewaySystem20Census20Core20API200PageDataExchangeResponse(rsp *http.Response) (*PostGatewaySystem20Census20Core20API200PageDataExchangeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewaySystem20Census20Core20API200PageDataExchangeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewaySystem20Census20Core20API200PageSoftwareProductsResponse parses an HTTP response from a GetGatewaySystem20Census20Core20API200PageSoftwareProductsWithResponse call
func ParseGetGatewaySystem20Census20Core20API200PageSoftwareProductsResponse(rsp *http.Response) (*GetGatewaySystem20Census20Core20API200PageSoftwareProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewaySystem20Census20Core20API200PageSoftwareProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// SoftwareProducts Array of software products associated with the system
			SoftwareProducts *[]struct {
				// ActualVersion FY26: Actual version deployed/installed
				ActualVersion *string `json:"actualVersion,omitempty"`

				// ApiGatewayUse Whether software is used as API gateway
				ApiGatewayUse *bool `json:"api_gateway_use,omitempty"`

				// ClosestVersion FY26: Closest available version if exact match not found
				ClosestVersion *string `json:"closestVersion,omitempty"`

				// Edition Technopedia edition (e.g., Professional, Enterprise)
				Edition *string `json:"edition,omitempty"`

				// ProvidesAiCapability Whether software provides AI capabilities
				ProvidesAiCapability *GetGatewaySystem20Census20Core20API200PageSoftwareProducts200SoftwareProductsProvidesAiCapability `json:"provides_ai_capability,omitempty"`

				// SoftwareCost Software cost
				SoftwareCost *string `json:"software_cost,omitempty"`

				// SoftwareName Name of the software product
				SoftwareName *string `json:"software_name,omitempty"`

				// TechnopediaCategory Software category from Technopedia
				TechnopediaCategory *string `json:"technopedia_category,omitempty"`

				// TechnopediaId Technopedia Release ID
				TechnopediaId *string `json:"technopedia_id,omitempty"`

				// VendorName Vendor/manufacturer name
				VendorName *string `json:"vendor_name,omitempty"`

				// Version Technopedia version
				Version *string `json:"version,omitempty"`
			} `json:"softwareProducts,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewaySystem20Census20Core20API200PageSystemDataResponse parses an HTTP response from a GetGatewaySystem20Census20Core20API200PageSystemDataWithResponse call
func ParseGetGatewaySystem20Census20Core20API200PageSystemDataResponse(rsp *http.Response) (*GetGatewaySystem20Census20Core20API200PageSystemDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewaySystem20Census20Core20API200PageSystemDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Records List of system data page census records.
			Records *[]struct {
				// Acronym The acronym of the system.
				Acronym *string `json:"acronym"`

				// AmountOfData Amount or volume of data managed by the system.
				AmountOfData *string `json:"amountOfData"`

				// ApiDeveloped Whether APIs have been developed for the system.
				ApiDeveloped *string `json:"apiDeveloped"`

				// BeneficiaryInformation Information about beneficiaries associated with the system data (converted from comma-separated string).
				BeneficiaryInformation *[]string `json:"beneficiaryInformation,omitempty"`

				// DoesTheApiUseFhir Whether the API uses FHIR standards.
				DoesTheApiUseFhir *string `json:"doesTheApiUseFhir"`

				// DoesTheApiUseFhirOther Other FHIR-related information.
				DoesTheApiUseFhirOther *string `json:"doesTheApiUseFhirOther"`

				// EditBeneficiaryInformation Whether beneficiary information can be edited.
				EditBeneficiaryInformation *string `json:"editBeneficiaryInformation"`

				// ExternalUserSensitiveDataAccess Whether external users have access to sensitive data.
				ExternalUserSensitiveDataAccess *string `json:"externalUserSensitiveDataAccess"`

				// PermitsDataTransferOutsideUS Whether the system permits data transfer outside the United States.
				PermitsDataTransferOutsideUS *string `json:"permitsDataTransferOutsideUS"`

				// PrimaryDRM The primary Data Reference Model (DRM) for the system.
				PrimaryDRM *string `json:"primaryDRM"`

				// SecondaryDRM Array of all Data Reference Models (DRMs) for the system, including the primary DRM.
				SecondaryDRM *[]string `json:"secondaryDRM,omitempty"`

				// SparxSystemGuid The Sparx system GUID.
				SparxSystemGuid *string `json:"sparxSystemGuid"`

				// SparxSystemId The Sparx system ID.
				SparxSystemId *int `json:"sparxSystemId"`

				// SystemDataAuthoritativeSource The authoritative source for the system data.
				SystemDataAuthoritativeSource *string `json:"systemDataAuthoritativeSource"`

				// SystemDataInvolvement Description of how the system is involved with data management (converted from comma-separated string).
				SystemDataInvolvement *[]string `json:"systemDataInvolvement,omitempty"`

				// SystemDataLocation Physical or logical locations of the system data (converted from comma-separated string).
				SystemDataLocation *[]string `json:"systemDataLocation,omitempty"`

				// SystemDataLocationNotes Additional notes about the system data location.
				SystemDataLocationNotes *string `json:"systemDataLocationNotes"`

				// SystemDataSummary Summary of the system data.
				SystemDataSummary *string `json:"systemDataSummary"`

				// SystemName The name of the system.
				SystemName *string `json:"systemName"`
			} `json:"records,omitempty"`
			Result *string `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Error Error message describing the parameter validation failure.
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewaySystem20Census20Core20API200PageSystemDataResponse parses an HTTP response from a PostGatewaySystem20Census20Core20API200PageSystemDataWithResponse call
func ParsePostGatewaySystem20Census20Core20API200PageSystemDataResponse(rsp *http.Response) (*PostGatewaySystem20Census20Core20API200PageSystemDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewaySystem20Census20Core20API200PageSystemDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Message Success message.
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Error Error message describing the validation failure.
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewaySystem20Census20Core20API200PageSystemMaintainerResponse parses an HTTP response from a GetGatewaySystem20Census20Core20API200PageSystemMaintainerWithResponse call
func ParseGetGatewaySystem20Census20Core20API200PageSystemMaintainerResponse(rsp *http.Response) (*GetGatewaySystem20Census20Core20API200PageSystemMaintainerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewaySystem20Census20Core20API200PageSystemMaintainerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// AdHocAgileDeploymentFrequency Ad-hoc agile deployment frequency.
			AdHocAgileDeploymentFrequency *string `json:"adHocAgileDeploymentFrequency"`

			// AgileUsed Indicates if Agile methodology is used for development.
			AgileUsed *bool `json:"agileUsed"`

			// AnotherCMSsystem Indicates if it is another CMS system.
			AnotherCMSsystem *bool `json:"anotherCMSsystem"`

			// AuthoritativeDatasource Authoritative data source for the system.
			AuthoritativeDatasource *string `json:"authoritativeDatasource"`

			// BusinessArtifactsLocation Location of business artifacts.
			BusinessArtifactsLocation *string `json:"businessArtifactsLocation"`

			// BusinessArtifactsOnDemand Availability of business artifacts on demand.
			BusinessArtifactsOnDemand *bool `json:"businessArtifactsOnDemand"`

			// DataAtRestEncryptionKeyManagement Data at rest encryption key management details.
			DataAtRestEncryptionKeyManagement *string `json:"dataAtRestEncryptionKeyManagement"`

			// DeploymentFrequency Frequency of system deployments.
			DeploymentFrequency *string `json:"deploymentFrequency"`

			// DevWorkDescription Description of ongoing development work.
			DevWorkDescription *string `json:"devWorkDescription"`

			// FrontendAccessType Type of frontend access.
			FrontendAccessType *string `json:"frontendAccessType"`

			// HardCodedIpAddress Indicates if the system uses hardcoded IP addresses.
			HardCodedIpAddress *bool `json:"hardCodedIpAddress"`

			// HasMetadataGlossary Indicates if the system has a metadata glossary.
			HasMetadataGlossary *bool `json:"hasMetadataGlossary"`

			// HaveEnterpriseDataLakePlan Status of Enterprise Data Lake plan.
			HaveEnterpriseDataLakePlan *string `json:"haveEnterpriseDataLakePlan"`

			// Id The unique identifier (GUID) of the system.
			Id *string `json:"id,omitempty"`

			// IdentityManagementSolution Identity management solutions used.
			IdentityManagementSolution *[]string `json:"identityManagementSolution"`

			// IdentityManagementSolutionOther Other identity management solutions.
			IdentityManagementSolutionOther *string `json:"identityManagementSolutionOther"`

			// Ip6EnabledAssetPercent Percentage of IPV6 enabled assets.
			Ip6EnabledAssetPercent *string `json:"ip6EnabledAssetPercent"`

			// Ip6TransitionPlan Long-term IPV6 transition plan.
			Ip6TransitionPlan *string `json:"ip6TransitionPlan"`

			// IpEnabledAssetCount Count of IP enabled assets.
			IpEnabledAssetCount *int64 `json:"ipEnabledAssetCount"`

			// IsRecordManagementScheduleApproved Indicates if the record management schedule is approved.
			IsRecordManagementScheduleApproved *bool `json:"isRecordManagementScheduleApproved"`

			// LegalHoldCaseName Name of the legal hold case.
			LegalHoldCaseName *string `json:"legalHoldCaseName"`

			// LocallyStoredUserInformation Indicates if user information is stored locally.
			LocallyStoredUserInformation *bool `json:"locallyStoredUserInformation"`

			// MajorRefreshDate Date of the last major technology refresh.
			MajorRefreshDate *string `json:"majorRefreshDate"`

			// MultifactorAuthenticationMethod Methods of multifactor authentication used.
			MultifactorAuthenticationMethod *[]string `json:"multifactorAuthenticationMethod"`

			// MultifactorAuthenticationMethodOther Other multifactor authentication methods.
			MultifactorAuthenticationMethodOther *string `json:"multifactorAuthenticationMethodOther"`

			// Name The name of the system.
			Name *string `json:"name"`

			// NetAccessibility Network accessibility of the system.
			NetAccessibility *string `json:"netAccessibility"`

			// NetworkTrafficEncryptionKeyManagement Network traffic encryption key management details.
			NetworkTrafficEncryptionKeyManagement *string `json:"networkTrafficEncryptionKeyManagement"`

			// NextMajorRefreshDate Date of the next planned major technology refresh.
			NextMajorRefreshDate *string `json:"nextMajorRefreshDate"`

			// NoMajorRefresh Indicates if there has been no major refresh.
			NoMajorRefresh *bool `json:"noMajorRefresh"`

			// NoPersistentRecordsFlag Indicates if there are no persistent records.
			NoPersistentRecordsFlag *bool `json:"noPersistentRecordsFlag"`

			// NoPlannedMajorRefresh Indicates if there is no planned major refresh.
			NoPlannedMajorRefresh *bool `json:"noPlannedMajorRefresh"`

			// OmDocumentationLocation Location of O&M documentation.
			OmDocumentationLocation *string `json:"omDocumentationLocation"`

			// OmDocumentationOnDemand Availability of O&M documentation on demand.
			OmDocumentationOnDemand *bool `json:"omDocumentationOnDemand"`

			// PageName The name of the page, always "SystemMaintainerBasicInfo".
			PageName *string `json:"pageName,omitempty"`

			// PlansToRetireReplace Plans to retire or replace the system.
			PlansToRetireReplace *string `json:"plansToRetireReplace"`

			// QuarterToRetireReplace Quarter planned for retirement or replacement.
			QuarterToRetireReplace *string `json:"quarterToRetireReplace"`

			// RecordManagementFormatOther Other records management formats.
			RecordManagementFormatOther *string `json:"recordManagementFormatOther"`

			// RecordsManagementBucket List of records management buckets.
			RecordsManagementBucket *[]string `json:"recordsManagementBucket"`

			// RecordsManagementDisposalLocation Location for records management disposal.
			RecordsManagementDisposalLocation *string `json:"recordsManagementDisposalLocation"`

			// RecordsManagementDisposalPlan Indicates if a records management disposal plan exists.
			RecordsManagementDisposalPlan *bool `json:"recordsManagementDisposalPlan"`

			// RecordsManagementFormat Formats of records management.
			RecordsManagementFormat *[]string `json:"recordsManagementFormat"`

			// RecordsUnderLegalHold Indicates if records are under legal hold.
			RecordsUnderLegalHold *bool `json:"recordsUnderLegalHold"`

			// SourceCodeLoction Location of source code.
			SourceCodeLoction *string `json:"sourceCodeLoction"`

			// SourceCodeOnDemand Availability of source code on demand.
			SourceCodeOnDemand *bool `json:"sourceCodeOnDemand"`

			// StoreInCentralDataCatalog Indicates if data is stored in a central data catalog.
			StoreInCentralDataCatalog *bool `json:"storeInCentralDataCatalog"`

			// SystemCustomization Description of system customization.
			SystemCustomization *string `json:"systemCustomization"`

			// SystemDataLocation Locations where system data is stored.
			SystemDataLocation *[]string `json:"systemDataLocation"`

			// SystemDataLocationNotes Notes regarding system data locations.
			SystemDataLocationNotes *string `json:"systemDataLocationNotes"`

			// SystemDesignLocation Location of system design documents.
			SystemDesignLocation *string `json:"systemDesignLocation"`

			// SystemDesignOnDemand Availability of system design on demand.
			SystemDesignOnDemand *bool `json:"systemDesignOnDemand"`

			// SystemProductionDate Date when the system went into production.
			SystemProductionDate *string `json:"systemProductionDate"`

			// SystemRequirementsLocation Location of system requirements.
			SystemRequirementsLocation *string `json:"systemRequirementsLocation"`

			// SystemRequirementsOnDemand Availability of system requirements on demand.
			SystemRequirementsOnDemand *bool `json:"systemRequirementsOnDemand"`

			// TestPlanLocation Location of test plans.
			TestPlanLocation *string `json:"testPlanLocation"`

			// TestPlanOnDemand Availability of test plans on demand.
			TestPlanOnDemand *bool `json:"testPlanOnDemand"`

			// TestReportsLocation Location of test reports.
			TestReportsLocation *string `json:"testReportsLocation"`

			// TestReportsOnDemand Availability of test reports on demand.
			TestReportsOnDemand *bool `json:"testReportsOnDemand"`

			// TestScriptsLocation Location of test scripts.
			TestScriptsLocation *string `json:"testScriptsLocation"`

			// TestScriptsOnDemand Availability of test scripts on demand.
			TestScriptsOnDemand *bool `json:"testScriptsOnDemand"`

			// Version Version of the system.
			Version *string `json:"version"`

			// YearToRetireReplace Year planned for retirement or replacement.
			YearToRetireReplace *string `json:"yearToRetireReplace"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewaySystem20Census20Core20API200PageSystemsListResponse parses an HTTP response from a GetGatewaySystem20Census20Core20API200PageSystemsListWithResponse call
func ParseGetGatewaySystem20Census20Core20API200PageSystemsListResponse(rsp *http.Response) (*GetGatewaySystem20Census20Core20API200PageSystemsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewaySystem20Census20Core20API200PageSystemsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// SystemsList List of systems.
			SystemsList *[]struct {
				// Acronym The acronym of the system.
				Acronym *string `json:"acronym"`

				// BelongsTo The organization the system belongs to.
				BelongsTo *string `json:"belongsTo"`

				// BusinessOwnerOrg The business owner organization.
				BusinessOwnerOrg *string `json:"businessOwnerOrg"`

				// BusinessOwnerOrgComp The business owner organization component.
				BusinessOwnerOrgComp *string `json:"businessOwnerOrgComp"`

				// CensusStatus The census status of the system.
				CensusStatus *string `json:"censusStatus"`

				// DaReviewerAssignmentId The DA reviewer assignment ID.
				DaReviewerAssignmentId *string `json:"daReviewerAssignmentId"`

				// DaReviewerFirstName The first name of the DA reviewer.
				DaReviewerFirstName *string `json:"daReviewerFirstName"`

				// DaReviewerLastName The last name of the DA reviewer.
				DaReviewerLastName *string `json:"daReviewerLastName"`

				// DaReviewerUserName The username of the DA reviewer.
				DaReviewerUserName *string `json:"daReviewerUserName"`

				// Description The description of the system.
				Description *string `json:"description"`

				// IctObjectId The ICT object identifier.
				IctObjectId *string `json:"ictObjectId"`

				// Id The unique identifier of the system.
				Id *string `json:"id,omitempty"`

				// Name The name of the system.
				Name *string `json:"name"`

				// NextVersionId The ID of the next version of the system.
				NextVersionId *string `json:"nextVersionId"`

				// ObjectState The current state of the system object.
				ObjectState *string `json:"objectState"`

				// PercentComplete The percentage completion of the system census.
				PercentComplete *string `json:"percentComplete"`

				// PreviousVersionId The ID of the previous version of the system.
				PreviousVersionId *string `json:"previousVersionId"`

				// QaReviewerAssignmentId The QA reviewer assignment ID.
				QaReviewerAssignmentId *string `json:"qaReviewerAssignmentId"`

				// QaReviewerFirstName The first name of the QA reviewer.
				QaReviewerFirstName *string `json:"qaReviewerFirstName"`

				// QaReviewerLastName The last name of the QA reviewer.
				QaReviewerLastName *string `json:"qaReviewerLastName"`

				// QaReviewerUserName The username of the QA reviewer.
				QaReviewerUserName *string `json:"qaReviewerUserName"`

				// Status The status of the system.
				Status *string `json:"status"`

				// SystemMaintainerOrg The system maintainer organization.
				SystemMaintainerOrg *string `json:"systemMaintainerOrg"`

				// SystemMaintainerOrgComp The system maintainer organization component.
				SystemMaintainerOrgComp *string `json:"systemMaintainerOrgComp"`

				// Uuid The UUID of the system.
				Uuid *string `json:"uuid"`

				// Version The version of the system.
				Version *string `json:"version"`
			} `json:"SystemsList,omitempty"`

			// Count The number of systems returned.
			Count *int `json:"count,omitempty"`

			// PageName The name of the page, always "SystemsList".
			PageName *string `json:"pageName,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewaySystem20Census20Core20API200PersonResponse parses an HTTP response from a GetGatewaySystem20Census20Core20API200PersonWithResponse call
func ParseGetGatewaySystem20Census20Core20API200PersonResponse(rsp *http.Response) (*GetGatewaySystem20Census20Core20API200PersonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewaySystem20Census20Core20API200PersonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Users A list of person objects matching the search criteria.
			Users []struct {
				// Email The email address of the person.
				Email *string `json:"email"`

				// FirstName The first name of the person.
				FirstName *string `json:"firstName"`

				// Id The unique identifier of the person.
				Id *string `json:"id"`

				// LastName The last name of the person.
				LastName *string `json:"lastName"`

				// Phone The phone number of the person.
				Phone *string `json:"phone"`

				// UserName The username of the person.
				UserName *string `json:"userName"`
			} `json:"Users"`

			// Count The number of persons found.
			Count int `json:"count"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewaySystem20Census20Core20API200SoftwareProductsResponse parses an HTTP response from a PostGatewaySystem20Census20Core20API200SoftwareProductsWithResponse call
func ParsePostGatewaySystem20Census20Core20API200SoftwareProductsResponse(rsp *http.Response) (*PostGatewaySystem20Census20Core20API200SoftwareProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewaySystem20Census20Core20API200SoftwareProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteGatewaySystem20Census20Core20API200StatusResponse parses an HTTP response from a DeleteGatewaySystem20Census20Core20API200StatusWithResponse call
func ParseDeleteGatewaySystem20Census20Core20API200StatusResponse(rsp *http.Response) (*DeleteGatewaySystem20Census20Core20API200StatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGatewaySystem20Census20Core20API200StatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Message Success message indicating number of records deleted.
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Result  *string `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Result  *string `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewaySystem20Census20Core20API200StatusResponse parses an HTTP response from a GetGatewaySystem20Census20Core20API200StatusWithResponse call
func ParseGetGatewaySystem20Census20Core20API200StatusResponse(rsp *http.Response) (*GetGatewaySystem20Census20Core20API200StatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewaySystem20Census20Core20API200StatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Count Total number of status records returned.
			Count *int `json:"count,omitempty"`

			// Status Array of system status records.
			Status *[]struct {
				// APPLICATIONREFSTR Application reference string.
				APPLICATIONREFSTR *string `json:"APPLICATION_REFSTR,omitempty"`

				// DISPLAYPAGENAME Display-friendly name of the page.
				DISPLAYPAGENAME *string `json:"DISPLAY_PAGE_NAME,omitempty"`

				// LASTCOMMUNICATIONDATE Date and time of last communication.
				LASTCOMMUNICATIONDATE *time.Time `json:"LAST_COMMUNICATION_DATE,omitempty"`

				// LASTRESPONDENTDATE Date and time when respondent last accessed.
				LASTRESPONDENTDATE *time.Time `json:"LAST_RESPONDENT_DATE,omitempty"`

				// LASTUPDATEDBY Username of the person who last updated the page.
				LASTUPDATEDBY *string `json:"LAST_UPDATED_BY,omitempty"`

				// LASTUPDATEDDATE Date and time when the page was last updated.
				LASTUPDATEDDATE *time.Time `json:"LAST_UPDATED_DATE,omitempty"`

				// LASTUPDATEDFIRSTNAME First name of the person who last updated the page.
				LASTUPDATEDFIRSTNAME *string `json:"LAST_UPDATED_FIRST_NAME,omitempty"`

				// LASTUPDATEDLASTNAME Last name of the person who last updated the page.
				LASTUPDATEDLASTNAME *string `json:"LAST_UPDATED_LAST_NAME,omitempty"`

				// PAGENAME Name of the census page.
				PAGENAME *string `json:"PAGE_NAME,omitempty"`

				// PAGERESPONDENT Username of the page respondent.
				PAGERESPONDENT *string `json:"PAGE_RESPONDENT,omitempty"`

				// PAGERESPONDENTFIRSTNAME First name of the page respondent.
				PAGERESPONDENTFIRSTNAME *string `json:"PAGE_RESPONDENT_FIRST_NAME,omitempty"`

				// PAGERESPONDENTLASTNAME Last name of the page respondent.
				PAGERESPONDENTLASTNAME *string `json:"PAGE_RESPONDENT_LAST_NAME,omitempty"`

				// PERCENTCOMPLETE Percentage completion of the page.
				PERCENTCOMPLETE *float32 `json:"PERCENT_COMPLETE,omitempty"`

				// STATUS Current status of the page.
				STATUS *string `json:"STATUS,omitempty"`

				// SYSTEMSURVEYPAGESTATUSID Unique identifier for the system survey page status.
				SYSTEMSURVEYPAGESTATUSID *int `json:"SYSTEM_SURVEY_PAGE_STATUS_ID,omitempty"`

				// SystemID System identifier.
				SystemID *string `json:"System_ID,omitempty"`
			} `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewaySystem20Census20Core20API200StatusResponse parses an HTTP response from a PostGatewaySystem20Census20Core20API200StatusWithResponse call
func ParsePostGatewaySystem20Census20Core20API200StatusResponse(rsp *http.Response) (*PostGatewaySystem20Census20Core20API200StatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewaySystem20Census20Core20API200StatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Inserted Number of new records inserted.
			Inserted *int    `json:"inserted,omitempty"`
			Result   *string `json:"result,omitempty"`

			// Updated Number of existing records updated.
			Updated *int `json:"updated,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Result  *string `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *string `json:"message,omitempty"`
			Result  *string `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewaySystem20Census20Core20API200SystemAiUseResponse parses an HTTP response from a GetGatewaySystem20Census20Core20API200SystemAiUseWithResponse call
func ParseGetGatewaySystem20Census20Core20API200SystemAiUseResponse(rsp *http.Response) (*GetGatewaySystem20Census20Core20API200SystemAiUseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewaySystem20Census20Core20API200SystemAiUseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Record *struct {
				Acronym *string `json:"acronym"`

				// AiCapabilityITGRLifecycleAssigned Assigned lifecycle phase for ITGR
				AiCapabilityITGRLifecycleAssigned *string `json:"aiCapabilityITGRLifecycleAssigned"`

				// AiCapabilityITGRLifecycleMissing Whether lifecycle assignment is missing (Yes/No)
				AiCapabilityITGRLifecycleMissing *string `json:"aiCapabilityITGRLifecycleMissing"`

				// AiCapabilityITGRReviewed Whether ITGR review has been completed
				AiCapabilityITGRReviewed *bool `json:"aiCapabilityITGRReviewed"`

				// AiCapabilityITGRSubmissionDate ITGR submission date
				AiCapabilityITGRSubmissionDate *string `json:"aiCapabilityITGRSubmissionDate"`

				// AiCapabilityImpact Impact level of AI capability
				AiCapabilityImpact *string `json:"aiCapabilityImpact"`

				// AiCapabilitySensitiveInformationInvolved Types of sensitive information involved
				AiCapabilitySensitiveInformationInvolved *[]string `json:"aiCapabilitySensitiveInformationInvolved"`

				// AiCapabilitySystemDataCategory System data categories
				AiCapabilitySystemDataCategory *[]string `json:"aiCapabilitySystemDataCategory"`

				// AiProjectLifeCycleStage Current stage of AI project lifecycle
				AiProjectLifeCycleStage *string `json:"aiProjectLifeCycleStage"`

				// ArtificialIntelligence Types of artificial intelligence used
				ArtificialIntelligence *[]string `json:"artificialIntelligence"`

				// ArtificialIntelligenceOtherDescription Description of other AI types not listed (supports longer text)
				ArtificialIntelligenceOtherDescription *string `json:"artificialIntelligenceOtherDescription"`
				CmsUUID                                *string `json:"cmsUUID"`
				Description                            *string `json:"description"`

				// Id System GUID
				Id          *string `json:"id,omitempty"`
				ObjectState *string `json:"objectState"`
				PageName    *string `json:"pageName,omitempty"`

				// SystemId Sparx System ID
				SystemId   *float32 `json:"systemId,omitempty"`
				SystemName *string  `json:"systemName,omitempty"`

				// UsesAITechnology Whether the system uses AI technology
				UsesAITechnology *string `json:"usesAITechnology"`
			} `json:"record,omitempty"`
			Result *string `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewaySystem20Census20Core20API200SystemAiUseResponse parses an HTTP response from a PostGatewaySystem20Census20Core20API200SystemAiUseWithResponse call
func ParsePostGatewaySystem20Census20Core20API200SystemAiUseResponse(rsp *http.Response) (*PostGatewaySystem20Census20Core20API200SystemAiUseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewaySystem20Census20Core20API200SystemAiUseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Message Success message.
			Message *string `json:"message,omitempty"`
			Result  *string `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Message Error message describing the validation failure.
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewaySystem20Census20Core20API200SystemComponentsResponse parses an HTTP response from a GetGatewaySystem20Census20Core20API200SystemComponentsWithResponse call
func ParseGetGatewaySystem20Census20Core20API200SystemComponentsResponse(rsp *http.Response) (*GetGatewaySystem20Census20Core20API200SystemComponentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewaySystem20Census20Core20API200SystemComponentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// SystemComponents List of system components (subsystems).
			SystemComponents *[]struct {
				// ComponentAcronym The acronym of the subsystem component.
				ComponentAcronym *string `json:"componentAcronym"`

				// ComponentId The GUID of the subsystem component.
				ComponentId *string `json:"componentId,omitempty"`

				// ComponentName The name of the subsystem component.
				ComponentName *string `json:"componentName,omitempty"`

				// ComponentObjectState The object state of the subsystem component.
				ComponentObjectState *string `json:"componentObjectState"`

				// ComponentRetirementQuarter The planned retirement quarter of the subsystem component.
				ComponentRetirementQuarter *string `json:"componentRetirementQuarter"`

				// ComponentRetirementYear The planned retirement year of the subsystem component.
				ComponentRetirementYear *string `json:"componentRetirementYear"`

				// Description A description of the subsystem component.
				Description *string `json:"description"`
			} `json:"SystemComponents,omitempty"`
			Count *int `json:"count,omitempty"`

			// IsSubsystem The object state of the system being queried, indicating if it acts as a subsystem to another.
			IsSubsystem *string `json:"isSubsystem"`

			// NoSubsystemFlag A flag indicating no subsystems exist. In the original Webmethods service, this field was defined but not populated by the service logic.
			NoSubsystemFlag *bool `json:"noSubsystemFlag"`

			// ParentSystem The name of the parent system.
			ParentSystem *string `json:"parentSystem"`

			// ParentSystemId The GUID of the parent system.
			ParentSystemId *string `json:"parentSystemId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewaySystem20Census20Core20API200SystemComponentsResponse parses an HTTP response from a PostGatewaySystem20Census20Core20API200SystemComponentsWithResponse call
func ParsePostGatewaySystem20Census20Core20API200SystemComponentsResponse(rsp *http.Response) (*PostGatewaySystem20Census20Core20API200SystemComponentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewaySystem20Census20Core20API200SystemComponentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewaySystem20Census20Core20API200SystemMaintainerResponse parses an HTTP response from a PostGatewaySystem20Census20Core20API200SystemMaintainerWithResponse call
func ParsePostGatewaySystem20Census20Core20API200SystemMaintainerResponse(rsp *http.Response) (*PostGatewaySystem20Census20Core20API200SystemMaintainerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewaySystem20Census20Core20API200SystemMaintainerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Message The system ID that was processed.
			Message *string `json:"message,omitempty"`
			Result  *string `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewaySystem20Census20Core20API200SystemPropertyResponse parses an HTTP response from a GetGatewaySystem20Census20Core20API200SystemPropertyWithResponse call
func ParseGetGatewaySystem20Census20Core20API200SystemPropertyResponse(rsp *http.Response) (*GetGatewaySystem20Census20Core20API200SystemPropertyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewaySystem20Census20Core20API200SystemPropertyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// PropertyValue The value of the requested system property. Can be string, number, or null.
			PropertyValue *string `json:"propertyValue"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewaySystem20Census20Core20API200SystemPropertyResponse parses an HTTP response from a PostGatewaySystem20Census20Core20API200SystemPropertyWithResponse call
func ParsePostGatewaySystem20Census20Core20API200SystemPropertyResponse(rsp *http.Response) (*PostGatewaySystem20Census20Core20API200SystemPropertyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewaySystem20Census20Core20API200SystemPropertyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *[]string `json:"message,omitempty"`
			Result  *string   `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayTechnopedia10SoftwareExtendedResponse parses an HTTP response from a GetGatewayTechnopedia10SoftwareExtendedWithResponse call
func ParseGetGatewayTechnopedia10SoftwareExtendedResponse(rsp *http.Response) (*GetGatewayTechnopedia10SoftwareExtendedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayTechnopedia10SoftwareExtendedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Count Number of records returned.
			Count *float32 `json:"count,omitempty"`

			// Data Array of software product records.
			Data *[]struct {
				// Category Software category classification.
				Category *string `json:"category,omitempty"`

				// Edition Software edition details.
				Edition *string `json:"edition,omitempty"`

				// EndOfLifeDate End of life date for the software.
				EndOfLifeDate *string `json:"end_of_life_date,omitempty"`

				// GeneralAvailabilityDate General availability release date.
				GeneralAvailabilityDate *string `json:"general_availability_date,omitempty"`

				// Id Unique identifier for the software product.
				Id *string `json:"id,omitempty"`

				// Manufacturer Software manufacturer or vendor.
				Manufacturer *string `json:"manufacturer,omitempty"`

				// ProductName Name of the software product.
				ProductName *string `json:"product_name,omitempty"`

				// Version Software version information.
				Version *string `json:"version,omitempty"`
			} `json:"data,omitempty"`

			// Success Indicates if the request was successful.
			Success *bool `json:"success,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayTechnopedia10SoftwareExtendedIdResponse parses an HTTP response from a GetGatewayTechnopedia10SoftwareExtendedIdWithResponse call
func ParseGetGatewayTechnopedia10SoftwareExtendedIdResponse(rsp *http.Response) (*GetGatewayTechnopedia10SoftwareExtendedIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayTechnopedia10SoftwareExtendedIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Message Array of Technopedia software extended records matching the ID.
			Message *[]struct {
				// BelongsToSuite Whether belongs to a suite
				BelongsToSuite *string `json:"belongs_to_suite"`

				// BrandFamily Brand family
				BrandFamily *string `json:"brand_family"`

				// CatManufacturerId Category manufacturer ID
				CatManufacturerId *int `json:"cat_manufacturer_id"`

				// CatSwProductId Category software product ID
				CatSwProductId *int `json:"cat_sw_product_id"`

				// CatSwReleaseId Category software release ID
				CatSwReleaseId *int `json:"cat_sw_release_id"`

				// CatSwVersionId Category software version ID
				CatSwVersionId *int `json:"cat_sw_version_id"`

				// Category Software category
				Category *string `json:"category"`

				// CreateDate Record creation date
				CreateDate *time.Time `json:"create_date"`

				// Edition Software edition
				Edition *string `json:"edition"`

				// EndOfLifeDate End of life date
				EndOfLifeDate *time.Time `json:"end_of_life_date"`

				// EndOfLifeStr End of life date as string
				EndOfLifeStr *string `json:"end_of_life_str"`

				// EndOfLifeSupportLevel End of life support level
				EndOfLifeSupportLevel *string `json:"end_of_life_support_level"`

				// GeneralAvailabilityDate General availability date
				GeneralAvailabilityDate *time.Time `json:"general_availability_date"`

				// GeneralAvailabilityStr General availability date as string
				GeneralAvailabilityStr *string `json:"general_availability_str"`

				// Id Software identifier
				Id *int `json:"id"`

				// IsMajorRelease Whether this is a major release
				IsMajorRelease *string `json:"is_major_release"`

				// IsMajorVersion Whether this is a major version
				IsMajorVersion *string `json:"is_major_version"`

				// LastModifiedDate Last modified date
				LastModifiedDate *time.Time `json:"last_modified_date"`

				// Licensable Whether the software is licensable
				Licensable *string `json:"licensable"`

				// Manufacturer Software manufacturer
				Manufacturer *string `json:"manufacturer"`

				// ObsoleteDate Obsolete date
				ObsoleteDate *time.Time `json:"obsolete_date"`

				// ObsoleteStr Obsolete date as string
				ObsoleteStr *string `json:"obsolete_str"`

				// ProductAlias Product alias
				ProductAlias *string `json:"product_alias"`

				// ProductName Software product name
				ProductName *string `json:"product_name"`

				// Release Software release name
				Release *string `json:"release"`

				// ResourceUri Resource URI for the software
				ResourceUri *string `json:"resource_uri"`

				// Status Software status
				Status *string `json:"status"`

				// SubCategory Software sub-category
				SubCategory *string `json:"sub_category"`

				// SuiteName Suite name if part of a suite
				SuiteName *string `json:"suite_name"`

				// Tier Software tier
				Tier *int `json:"tier"`

				// Version Software version
				Version *string `json:"version"`

				// VersionGroup Version group
				VersionGroup *string `json:"version_group"`
			} `json:"message,omitempty"`

			// Result Indicates if the request was successful.
			Result *GetGatewayTechnopedia10SoftwareExtendedId200Result `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Message Error message describing what went wrong.
			Message *string                                             `json:"message,omitempty"`
			Result  *GetGatewayTechnopedia10SoftwareExtendedId400Result `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Message Error message describing what went wrong.
			Message *string                                             `json:"message,omitempty"`
			Result  *GetGatewayTechnopedia10SoftwareExtendedId500Result `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayIntakeSchemaResponse parses an HTTP response from a GetGatewayIntakeSchemaWithResponse call
func ParseGetGatewayIntakeSchemaResponse(rsp *http.Response) (*GetGatewayIntakeSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayIntakeSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Schemas *[]struct {
				CreatedBy   string  `json:"createdBy"`
				CreatedDate string  `json:"createdDate"`
				Id          float32 `json:"id"`
				Name        string  `json:"name"`
				Schema      string  `json:"schema"`
				UpdatedBy   string  `json:"updatedBy"`
				UpdatedDate string  `json:"updatedDate"`
			} `json:"schemas,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewayIntakeSchemaResponse parses an HTTP response from a PostGatewayIntakeSchemaWithResponse call
func ParsePostGatewayIntakeSchemaResponse(rsp *http.Response) (*PostGatewayIntakeSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewayIntakeSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// Name The name of the created schema
			Name string `json:"name"`

			// SchemaId The ID of the created schema
			SchemaId float32 `json:"schemaId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteGatewayIntakeSchemaIdResponse parses an HTTP response from a DeleteGatewayIntakeSchemaIdWithResponse call
func ParseDeleteGatewayIntakeSchemaIdResponse(rsp *http.Response) (*DeleteGatewayIntakeSchemaIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGatewayIntakeSchemaIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayIntakeSchemaIdResponse parses an HTTP response from a GetGatewayIntakeSchemaIdWithResponse call
func ParseGetGatewayIntakeSchemaIdResponse(rsp *http.Response) (*GetGatewayIntakeSchemaIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayIntakeSchemaIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedBy   string  `json:"createdBy"`
			CreatedDate string  `json:"createdDate"`
			Id          float32 `json:"id"`
			Name        string  `json:"name"`
			Schema      string  `json:"schema"`
			UpdatedBy   string  `json:"updatedBy"`
			UpdatedDate string  `json:"updatedDate"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutGatewayIntakeSchemaIdResponse parses an HTTP response from a PutGatewayIntakeSchemaIdWithResponse call
func ParsePutGatewayIntakeSchemaIdResponse(rsp *http.Response) (*PutGatewayIntakeSchemaIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutGatewayIntakeSchemaIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedBy   string  `json:"createdBy"`
			CreatedDate string  `json:"createdDate"`
			Id          float32 `json:"id"`
			Name        string  `json:"name"`
			Schema      string  `json:"schema"`
			UpdatedBy   string  `json:"updatedBy"`
			UpdatedDate string  `json:"updatedDate"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetGatewayKeysResponse parses an HTTP response from a GetGatewayKeysWithResponse call
func ParseGetGatewayKeysResponse(rsp *http.Response) (*GetGatewayKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGatewayKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Results List of gateway keys
			Results *[]struct {
				// CreatedBy User who created the key
				CreatedBy *string `json:"createdBy,omitempty"`

				// CreatedDate Date when the key was created
				CreatedDate *time.Time `json:"createdDate,omitempty"`

				// Id The gateway key ID
				Id *string `json:"id,omitempty"`

				// IsActive Whether the key is active
				IsActive *bool `json:"isActive,omitempty"`

				// Key The gateway API key
				Key *string `json:"key,omitempty"`
			} `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostGatewayKeysResponse parses an HTTP response from a PostGatewayKeysWithResponse call
func ParsePostGatewayKeysResponse(rsp *http.Response) (*PostGatewayKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGatewayKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Key The generated gateway API key
			Key *string `json:"key,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteGatewayKeysIdResponse parses an HTTP response from a DeleteGatewayKeysIdWithResponse call
func ParseDeleteGatewayKeysIdResponse(rsp *http.Response) (*DeleteGatewayKeysIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGatewayKeysIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetHealthResponse parses an HTTP response from a GetHealthWithResponse call
func ParseGetHealthResponse(rsp *http.Response) (*GetHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Message Health status message
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSparxResponse parses an HTTP response from a PostSparxWithResponse call
func ParsePostSparxResponse(rsp *http.Response) (*PostSparxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSparxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseDeleteSparxIdResponse parses an HTTP response from a DeleteSparxIdWithResponse call
func ParseDeleteSparxIdResponse(rsp *http.Response) (*DeleteSparxIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSparxIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetSparxIdResponse parses an HTTP response from a GetSparxIdWithResponse call
func ParseGetSparxIdResponse(rsp *http.Response) (*GetSparxIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSparxIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseGetSwaggerUiResponse parses an HTTP response from a GetSwaggerUiWithResponse call
func ParseGetSwaggerUiResponse(rsp *http.Response) (*GetSwaggerUiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwaggerUiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
