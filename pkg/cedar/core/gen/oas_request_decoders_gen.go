// Code generated by ogen, DO NOT EDIT.

package api

import (
	"bytes"
	"io"
	"mime"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/validate"
)

func (s *Server) decodeGatewayCEDAR20Core20API200BudgetPostRequest(r *http.Request) (
	req *GatewayCEDAR20Core20API200BudgetPostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewayCEDAR20Core20API200BudgetPostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewayCEDAR20Core20API200BudgetPutRequest(r *http.Request) (
	req *GatewayCEDAR20Core20API200BudgetPutReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewayCEDAR20Core20API200BudgetPutReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewayCEDAR20Core20API200ComponentPostRequest(r *http.Request) (
	req *GatewayCEDAR20Core20API200ComponentPostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewayCEDAR20Core20API200ComponentPostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewayCEDAR20Core20API200ContractPostRequest(r *http.Request) (
	req *GatewayCEDAR20Core20API200ContractPostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewayCEDAR20Core20API200ContractPostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewayCEDAR20Core20API200ContractPutRequest(r *http.Request) (
	req *GatewayCEDAR20Core20API200ContractPutReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewayCEDAR20Core20API200ContractPutReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewayCEDAR20Core20API200DeploymentPostRequest(r *http.Request) (
	req *GatewayCEDAR20Core20API200DeploymentPostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewayCEDAR20Core20API200DeploymentPostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewayCEDAR20Core20API200DeploymentPutRequest(r *http.Request) (
	req *GatewayCEDAR20Core20API200DeploymentPutReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewayCEDAR20Core20API200DeploymentPutReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewayCEDAR20Core20API200ExchangePutRequest(r *http.Request) (
	req *GatewayCEDAR20Core20API200ExchangePutReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewayCEDAR20Core20API200ExchangePutReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewayCEDAR20Core20API200RolePostRequest(r *http.Request) (
	req *GatewayCEDAR20Core20API200RolePostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewayCEDAR20Core20API200RolePostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewayCEDAR20Core20API200SoftwareProductsPostRequest(r *http.Request) (
	req *GatewayCEDAR20Core20API200SoftwareProductsPostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewayCEDAR20Core20API200SoftwareProductsPostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewayCEDAR20Core20API200SupportContactPostRequest(r *http.Request) (
	req *GatewayCEDAR20Core20API200SupportContactPostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewayCEDAR20Core20API200SupportContactPostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewayCEDAR20Core20API200UserPostRequest(r *http.Request) (
	req *GatewayCEDAR20Core20API200UserPostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewayCEDAR20Core20API200UserPostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewayCEDAR20Core20APIExchangePostRequest(r *http.Request) (
	req *GatewayCEDAR20Core20APIExchangePostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewayCEDAR20Core20APIExchangePostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewayCEDARIntake10IntakePostRequest(r *http.Request) (
	req *GatewayCEDARIntake10IntakePostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewayCEDARIntake10IntakePostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewayIntakeSchemaIDPutRequest(r *http.Request) (
	req *GatewayIntakeSchemaIDPutReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewayIntakeSchemaIDPutReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewayIntakeSchemaPostRequest(r *http.Request) (
	req *GatewayIntakeSchemaPostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewayIntakeSchemaPostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewayLDAP10AuthenticatePostRequest(r *http.Request) (
	req *GatewayLDAP10AuthenticatePostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewayLDAP10AuthenticatePostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewaySystem20Census20Core20API200AdminReviewerDeleteRequest(r *http.Request) (
	req *GatewaySystem20Census20Core20API200AdminReviewerDeleteReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewaySystem20Census20Core20API200AdminReviewerDeleteReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewaySystem20Census20Core20API200AdminReviewerPostRequest(r *http.Request) (
	req *GatewaySystem20Census20Core20API200AdminReviewerPostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewaySystem20Census20Core20API200AdminReviewerPostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewaySystem20Census20Core20API200BudgetAndContractsPostRequest(r *http.Request) (
	req *GatewaySystem20Census20Core20API200BudgetAndContractsPostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewaySystem20Census20Core20API200BudgetAndContractsPostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewaySystem20Census20Core20API200BusinessOwnerPostRequest(r *http.Request) (
	req *GatewaySystem20Census20Core20API200BusinessOwnerPostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewaySystem20Census20Core20API200BusinessOwnerPostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewaySystem20Census20Core20API200DataExchangeNotesPostRequest(r *http.Request) (
	req *GatewaySystem20Census20Core20API200DataExchangeNotesPostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewaySystem20Census20Core20API200DataExchangeNotesPostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewaySystem20Census20Core20API200DataExchangeStatusDeleteRequest(r *http.Request) (
	req *GatewaySystem20Census20Core20API200DataExchangeStatusDeleteReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewaySystem20Census20Core20API200DataExchangeStatusDeleteReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewaySystem20Census20Core20API200NotePostRequest(r *http.Request) (
	req *GatewaySystem20Census20Core20API200NotePostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewaySystem20Census20Core20API200NotePostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewaySystem20Census20Core20API200NotePutRequest(r *http.Request) (
	req *GatewaySystem20Census20Core20API200NotePutReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewaySystem20Census20Core20API200NotePutReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewaySystem20Census20Core20API200PageDataCentersPostRequest(r *http.Request) (
	req *GatewaySystem20Census20Core20API200PageDataCentersPostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewaySystem20Census20Core20API200PageDataCentersPostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewaySystem20Census20Core20API200PageDataExchangeGetRequest(r *http.Request) (
	req *GatewaySystem20Census20Core20API200PageDataExchangeGetReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	if _, ok := r.Header["Content-Type"]; !ok && r.ContentLength == 0 {
		return req, rawBody, close, nil
	}
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, nil
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, nil
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request *GatewaySystem20Census20Core20API200PageDataExchangeGetReq
		if err := func() error {
			request = nil
			var elem GatewaySystem20Census20Core20API200PageDataExchangeGetReq
			if err := elem.Decode(d); err != nil {
				return err
			}
			request = &elem
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		return request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewaySystem20Census20Core20API200PageDataExchangePostRequest(r *http.Request) (
	req *GatewaySystem20Census20Core20API200PageDataExchangePostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewaySystem20Census20Core20API200PageDataExchangePostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewaySystem20Census20Core20API200PageSystemDataPostRequest(r *http.Request) (
	req *GatewaySystem20Census20Core20API200PageSystemDataPostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewaySystem20Census20Core20API200PageSystemDataPostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewaySystem20Census20Core20API200PageUrlsPostRequest(r *http.Request) (
	req *GatewaySystem20Census20Core20API200PageUrlsPostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewaySystem20Census20Core20API200PageUrlsPostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewaySystem20Census20Core20API200PersonGetRequest(r *http.Request) (
	req *GatewaySystem20Census20Core20API200PersonGetReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	if _, ok := r.Header["Content-Type"]; !ok && r.ContentLength == 0 {
		return req, rawBody, close, nil
	}
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, nil
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, nil
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request *GatewaySystem20Census20Core20API200PersonGetReq
		if err := func() error {
			request = nil
			var elem GatewaySystem20Census20Core20API200PersonGetReq
			if err := elem.Decode(d); err != nil {
				return err
			}
			request = &elem
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		return request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewaySystem20Census20Core20API200SoftwareProductsPostRequest(r *http.Request) (
	req *GatewaySystem20Census20Core20API200SoftwareProductsPostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewaySystem20Census20Core20API200SoftwareProductsPostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewaySystem20Census20Core20API200StatusPostRequest(r *http.Request) (
	req *GatewaySystem20Census20Core20API200StatusPostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewaySystem20Census20Core20API200StatusPostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewaySystem20Census20Core20API200SystemAiUsePostRequest(r *http.Request) (
	req *GatewaySystem20Census20Core20API200SystemAiUsePostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewaySystem20Census20Core20API200SystemAiUsePostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewaySystem20Census20Core20API200SystemComponentsPostRequest(r *http.Request) (
	req *GatewaySystem20Census20Core20API200SystemComponentsPostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewaySystem20Census20Core20API200SystemComponentsPostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewaySystem20Census20Core20API200SystemMaintainerPostRequest(r *http.Request) (
	req *GatewaySystem20Census20Core20API200SystemMaintainerPostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewaySystem20Census20Core20API200SystemMaintainerPostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, rawBody, close, errors.Wrap(err, "validate")
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeGatewaySystem20Census20Core20API200SystemPropertyPostRequest(r *http.Request) (
	req *GatewaySystem20Census20Core20API200SystemPropertyPostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request GatewaySystem20Census20Core20API200SystemPropertyPostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeSparxPostRequest(r *http.Request) (
	req *SparxPostReq,
	rawBody []byte,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = errors.Join(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = errors.Join(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, rawBody, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		defer func() {
			_ = r.Body.Close()
		}()
		if err != nil {
			return req, rawBody, close, err
		}

		// Reset the body to allow for downstream reading.
		r.Body = io.NopCloser(bytes.NewBuffer(buf))

		if len(buf) == 0 {
			return req, rawBody, close, validate.ErrBodyRequired
		}

		rawBody = append(rawBody, buf...)
		d := jx.DecodeBytes(buf)

		var request SparxPostReq
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, rawBody, close, err
		}
		return &request, rawBody, close, nil
	default:
		return req, rawBody, close, validate.InvalidContentType(ct)
	}
}
