// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	HealthCheckGET1(params *HealthCheckGET1Params, authInfo runtime.ClientAuthInfoWriter) (*HealthCheckGET1OK, error)

	IntakebusinessCasePOST7(params *IntakebusinessCasePOST7Params, authInfo runtime.ClientAuthInfoWriter) (*IntakebusinessCasePOST7OK, error)

	IntakebusinessCaseidGET8(params *IntakebusinessCaseidGET8Params, authInfo runtime.ClientAuthInfoWriter) (*IntakebusinessCaseidGET8OK, error)

	IntakebusinessCaseidPUT8(params *IntakebusinessCaseidPUT8Params, authInfo runtime.ClientAuthInfoWriter) (*IntakebusinessCaseidPUT8OK, error)

	IntakegovernancePOST5(params *IntakegovernancePOST5Params, authInfo runtime.ClientAuthInfoWriter) (*IntakegovernancePOST5OK, error)

	IntakegovernanceidGET6(params *IntakegovernanceidGET6Params, authInfo runtime.ClientAuthInfoWriter) (*IntakegovernanceidGET6OK, error)

	IntakegovernanceidPUT6(params *IntakegovernanceidPUT6Params, authInfo runtime.ClientAuthInfoWriter) (*IntakegovernanceidPUT6OK, error)

	SystemidGET4(params *SystemidGET4Params, authInfo runtime.ClientAuthInfoWriter) (*SystemidGET4OK, error)

	SystemsGET2(params *SystemsGET2Params, authInfo runtime.ClientAuthInfoWriter) (*SystemsGET2OK, error)

	SystemsidGET3(params *SystemsidGET3Params, authInfo runtime.ClientAuthInfoWriter) (*SystemsidGET3OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  HealthCheckGET1 health check g e t 1 API
*/
func (a *Client) HealthCheckGET1(params *HealthCheckGET1Params, authInfo runtime.ClientAuthInfoWriter) (*HealthCheckGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHealthCheckGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "healthCheck_GET_1",
		Method:             "GET",
		PathPattern:        "/healthCheck",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HealthCheckGET1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HealthCheckGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for healthCheck_GET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IntakebusinessCasePOST7 intakebusiness case p o s t 7 API
*/
func (a *Client) IntakebusinessCasePOST7(params *IntakebusinessCasePOST7Params, authInfo runtime.ClientAuthInfoWriter) (*IntakebusinessCasePOST7OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntakebusinessCasePOST7Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "intakebusinessCase_POST_7",
		Method:             "POST",
		PathPattern:        "/intake/businessCase",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IntakebusinessCasePOST7Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntakebusinessCasePOST7OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for intakebusinessCase_POST_7: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IntakebusinessCaseidGET8 intakebusiness caseid g e t 8 API
*/
func (a *Client) IntakebusinessCaseidGET8(params *IntakebusinessCaseidGET8Params, authInfo runtime.ClientAuthInfoWriter) (*IntakebusinessCaseidGET8OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntakebusinessCaseidGET8Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "intakebusinessCaseid_GET_8",
		Method:             "GET",
		PathPattern:        "/intake/businessCase/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IntakebusinessCaseidGET8Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntakebusinessCaseidGET8OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for intakebusinessCaseid_GET_8: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IntakebusinessCaseidPUT8 intakebusiness caseid p u t 8 API
*/
func (a *Client) IntakebusinessCaseidPUT8(params *IntakebusinessCaseidPUT8Params, authInfo runtime.ClientAuthInfoWriter) (*IntakebusinessCaseidPUT8OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntakebusinessCaseidPUT8Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "intakebusinessCaseid_PUT_8",
		Method:             "PUT",
		PathPattern:        "/intake/businessCase/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IntakebusinessCaseidPUT8Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntakebusinessCaseidPUT8OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for intakebusinessCaseid_PUT_8: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IntakegovernancePOST5 intakegovernance p o s t 5 API
*/
func (a *Client) IntakegovernancePOST5(params *IntakegovernancePOST5Params, authInfo runtime.ClientAuthInfoWriter) (*IntakegovernancePOST5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntakegovernancePOST5Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "intakegovernance_POST_5",
		Method:             "POST",
		PathPattern:        "/intake/governance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IntakegovernancePOST5Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntakegovernancePOST5OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for intakegovernance_POST_5: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IntakegovernanceidGET6 intakegovernanceid g e t 6 API
*/
func (a *Client) IntakegovernanceidGET6(params *IntakegovernanceidGET6Params, authInfo runtime.ClientAuthInfoWriter) (*IntakegovernanceidGET6OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntakegovernanceidGET6Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "intakegovernanceid_GET_6",
		Method:             "GET",
		PathPattern:        "/intake/governance/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IntakegovernanceidGET6Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntakegovernanceidGET6OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for intakegovernanceid_GET_6: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IntakegovernanceidPUT6 intakegovernanceid p u t 6 API
*/
func (a *Client) IntakegovernanceidPUT6(params *IntakegovernanceidPUT6Params, authInfo runtime.ClientAuthInfoWriter) (*IntakegovernanceidPUT6OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntakegovernanceidPUT6Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "intakegovernanceid_PUT_6",
		Method:             "PUT",
		PathPattern:        "/intake/governance/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IntakegovernanceidPUT6Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntakegovernanceidPUT6OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for intakegovernanceid_PUT_6: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SystemidGET4 systemid g e t 4 API
*/
func (a *Client) SystemidGET4(params *SystemidGET4Params, authInfo runtime.ClientAuthInfoWriter) (*SystemidGET4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemidGET4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "systemid_GET_4",
		Method:             "GET",
		PathPattern:        "/system/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SystemidGET4Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemidGET4OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for systemid_GET_4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SystemsGET2 systems g e t 2 API
*/
func (a *Client) SystemsGET2(params *SystemsGET2Params, authInfo runtime.ClientAuthInfoWriter) (*SystemsGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemsGET2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "systems_GET_2",
		Method:             "GET",
		PathPattern:        "/systems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SystemsGET2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemsGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for systems_GET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SystemsidGET3 systemsid g e t 3 API
*/
func (a *Client) SystemsidGET3(params *SystemsidGET3Params, authInfo runtime.ClientAuthInfoWriter) (*SystemsidGET3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemsidGET3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "systemsid_GET_3",
		Method:             "GET",
		PathPattern:        "/systems/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SystemsidGET3Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemsidGET3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for systemsid_GET_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
