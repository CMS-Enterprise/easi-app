// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BusinessCase business case
//
// swagger:model BusinessCase
type BusinessCase struct {

	// business need
	BusinessNeed string `json:"business_need,omitempty"`

	// business owner
	BusinessOwner string `json:"business_owner,omitempty"`

	// cms benefit
	CmsBenefit string `json:"cms_benefit,omitempty"`

	// decided at
	DecidedAt string `json:"decided_at,omitempty"`

	// eua user id
	// Required: true
	EuaUserID *string `json:"eua_user_id"`

	// ID used to uniquely identify a system intake form
	// Required: true
	GovernanceID *string `json:"governance_id"`

	// hosting needs
	HostingNeeds string `json:"hosting_needs,omitempty"`

	// ID used to uniquely identify a business case; PRIMARY KEY, e.g. unique constraint
	// Required: true
	ID *string `json:"id"`

	// initial submitted at
	InitialSubmittedAt string `json:"initial_submitted_at,omitempty"`

	// last submitted at
	LastSubmittedAt string `json:"last_submitted_at,omitempty"`

	// lifecycle id
	LifecycleID string `json:"lifecycle_id,omitempty"`

	// priority alignment
	PriorityAlignment string `json:"priority_alignment,omitempty"`

	// project name
	ProjectName string `json:"project_name,omitempty"`

	// requester
	Requester string `json:"requester,omitempty"`

	// requester phone number
	RequesterPhoneNumber string `json:"requester_phone_number,omitempty"`

	// solutions
	// Required: true
	Solutions []*BusinessCaseSolution `json:"solutions"`

	// status
	// Required: true
	Status *string `json:"status"`

	// success indicators
	SuccessIndicators string `json:"success_indicators,omitempty"`

	// user interface
	UserInterface string `json:"user_interface,omitempty"`

	// withdrawn at
	WithdrawnAt string `json:"withdrawn_at,omitempty"`
}

// Validate validates this business case
func (m *BusinessCase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEuaUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGovernanceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSolutions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BusinessCase) validateEuaUserID(formats strfmt.Registry) error {

	if err := validate.Required("eua_user_id", "body", m.EuaUserID); err != nil {
		return err
	}

	return nil
}

func (m *BusinessCase) validateGovernanceID(formats strfmt.Registry) error {

	if err := validate.Required("governance_id", "body", m.GovernanceID); err != nil {
		return err
	}

	return nil
}

func (m *BusinessCase) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *BusinessCase) validateSolutions(formats strfmt.Registry) error {

	if err := validate.Required("solutions", "body", m.Solutions); err != nil {
		return err
	}

	for i := 0; i < len(m.Solutions); i++ {
		if swag.IsZero(m.Solutions[i]) { // not required
			continue
		}

		if m.Solutions[i] != nil {
			if err := m.Solutions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("solutions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BusinessCase) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BusinessCase) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BusinessCase) UnmarshalBinary(b []byte) error {
	var res BusinessCase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
