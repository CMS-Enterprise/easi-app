// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GovernanceIntake governance intake
// swagger:model GovernanceIntake
type GovernanceIntake struct {

	// business needs
	BusinessNeeds string `json:"business_needs,omitempty"`

	// business owner
	BusinessOwner string `json:"business_owner,omitempty"`

	// business owner component
	BusinessOwnerComponent string `json:"business_owner_component,omitempty"`

	// decided at
	DecidedAt string `json:"decided_at,omitempty"`

	// ea collaborator
	EaCollaborator string `json:"ea_collaborator,omitempty"`

	// ea support request
	EaSupportRequest bool `json:"ea_support_request,omitempty"`

	// eua user id
	// Required: true
	EuaUserID *string `json:"eua_user_id"`

	// existing contract
	ExistingContract string `json:"existing_contract,omitempty"`

	// existing funding
	ExistingFunding bool `json:"existing_funding,omitempty"`

	// funding source
	FundingSource string `json:"funding_source,omitempty"`

	// PRIMARY KEY, e.g. unique constraint
	// Required: true
	// Min Length: 36
	ID *string `json:"id"`

	// isso
	Isso string `json:"isso,omitempty"`

	// oit security collaborator
	OitSecurityCollaborator string `json:"oit_security_collaborator,omitempty"`

	// process status
	ProcessStatus string `json:"process_status,omitempty"`

	// product manager
	ProductManager string `json:"product_manager,omitempty"`

	// product manager component
	ProductManagerComponent string `json:"product_manager_component,omitempty"`

	// requester
	Requester string `json:"requester,omitempty"`

	// requester component
	RequesterComponent string `json:"requester_component,omitempty"`

	// solution
	Solution string `json:"solution,omitempty"`

	// status
	// Required: true
	Status *string `json:"status"`

	// submitted at
	SubmittedAt string `json:"submitted_at,omitempty"`

	// system name
	SystemName string `json:"system_name,omitempty"`

	// trb collaborator
	TrbCollaborator string `json:"trb_collaborator,omitempty"`

	// withdrawn at
	WithdrawnAt string `json:"withdrawn_at,omitempty"`
}

// Validate validates this governance intake
func (m *GovernanceIntake) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEuaUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GovernanceIntake) validateEuaUserID(formats strfmt.Registry) error {

	if err := validate.Required("eua_user_id", "body", m.EuaUserID); err != nil {
		return err
	}

	return nil
}

func (m *GovernanceIntake) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 36); err != nil {
		return err
	}

	return nil
}

func (m *GovernanceIntake) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GovernanceIntake) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GovernanceIntake) UnmarshalBinary(b []byte) error {
	var res GovernanceIntake
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
