// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GovernanceIntake governance intake
// swagger:model GovernanceIntake
type GovernanceIntake struct {

	// business needs
	// Required: true
	BusinessNeeds *string `json:"business_needs"`

	// business owner
	// Required: true
	BusinessOwner *string `json:"business_owner"`

	// business owner component
	// Required: true
	BusinessOwnerComponent *string `json:"business_owner_component"`

	// ea collaborator
	EaCollaborator string `json:"ea_collaborator,omitempty"`

	// ea support request
	// Required: true
	EaSupportRequest *bool `json:"ea_support_request"`

	// eua user id
	// Required: true
	EuaUserID *string `json:"eua_user_id"`

	// existing contract
	// Required: true
	ExistingContract *string `json:"existing_contract"`

	// existing funding
	// Required: true
	ExistingFunding *bool `json:"existing_funding"`

	// funding number
	FundingNumber string `json:"funding_number,omitempty"`

	// funding source
	FundingSource string `json:"funding_source,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// isso
	Isso string `json:"isso,omitempty"`

	// oit security collaborator
	OitSecurityCollaborator string `json:"oit_security_collaborator,omitempty"`

	// process status
	// Required: true
	ProcessStatus *string `json:"process_status"`

	// product manager
	// Required: true
	ProductManager *string `json:"product_manager"`

	// product manager component
	// Required: true
	ProductManagerComponent *string `json:"product_manager_component"`

	// requester
	// Required: true
	Requester *string `json:"requester"`

	// requester component
	// Required: true
	RequesterComponent *string `json:"requester_component"`

	// solution
	// Required: true
	Solution *string `json:"solution"`

	// submitted time
	// Required: true
	SubmittedTime *string `json:"submitted_time"`

	// system name
	// Required: true
	SystemName *string `json:"system_name"`

	// trb collaborator
	TrbCollaborator string `json:"trb_collaborator,omitempty"`
}

// Validate validates this governance intake
func (m *GovernanceIntake) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBusinessNeeds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessOwnerComponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEaSupportRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEuaUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExistingContract(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExistingFunding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductManager(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductManagerComponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequester(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequesterComponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSolution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmittedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GovernanceIntake) validateBusinessNeeds(formats strfmt.Registry) error {

	if err := validate.Required("business_needs", "body", m.BusinessNeeds); err != nil {
		return err
	}

	return nil
}

func (m *GovernanceIntake) validateBusinessOwner(formats strfmt.Registry) error {

	if err := validate.Required("business_owner", "body", m.BusinessOwner); err != nil {
		return err
	}

	return nil
}

func (m *GovernanceIntake) validateBusinessOwnerComponent(formats strfmt.Registry) error {

	if err := validate.Required("business_owner_component", "body", m.BusinessOwnerComponent); err != nil {
		return err
	}

	return nil
}

func (m *GovernanceIntake) validateEaSupportRequest(formats strfmt.Registry) error {

	if err := validate.Required("ea_support_request", "body", m.EaSupportRequest); err != nil {
		return err
	}

	return nil
}

func (m *GovernanceIntake) validateEuaUserID(formats strfmt.Registry) error {

	if err := validate.Required("eua_user_id", "body", m.EuaUserID); err != nil {
		return err
	}

	return nil
}

func (m *GovernanceIntake) validateExistingContract(formats strfmt.Registry) error {

	if err := validate.Required("existing_contract", "body", m.ExistingContract); err != nil {
		return err
	}

	return nil
}

func (m *GovernanceIntake) validateExistingFunding(formats strfmt.Registry) error {

	if err := validate.Required("existing_funding", "body", m.ExistingFunding); err != nil {
		return err
	}

	return nil
}

func (m *GovernanceIntake) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *GovernanceIntake) validateProcessStatus(formats strfmt.Registry) error {

	if err := validate.Required("process_status", "body", m.ProcessStatus); err != nil {
		return err
	}

	return nil
}

func (m *GovernanceIntake) validateProductManager(formats strfmt.Registry) error {

	if err := validate.Required("product_manager", "body", m.ProductManager); err != nil {
		return err
	}

	return nil
}

func (m *GovernanceIntake) validateProductManagerComponent(formats strfmt.Registry) error {

	if err := validate.Required("product_manager_component", "body", m.ProductManagerComponent); err != nil {
		return err
	}

	return nil
}

func (m *GovernanceIntake) validateRequester(formats strfmt.Registry) error {

	if err := validate.Required("requester", "body", m.Requester); err != nil {
		return err
	}

	return nil
}

func (m *GovernanceIntake) validateRequesterComponent(formats strfmt.Registry) error {

	if err := validate.Required("requester_component", "body", m.RequesterComponent); err != nil {
		return err
	}

	return nil
}

func (m *GovernanceIntake) validateSolution(formats strfmt.Registry) error {

	if err := validate.Required("solution", "body", m.Solution); err != nil {
		return err
	}

	return nil
}

func (m *GovernanceIntake) validateSubmittedTime(formats strfmt.Registry) error {

	if err := validate.Required("submitted_time", "body", m.SubmittedTime); err != nil {
		return err
	}

	return nil
}

func (m *GovernanceIntake) validateSystemName(formats strfmt.Registry) error {

	if err := validate.Required("system_name", "body", m.SystemName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GovernanceIntake) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GovernanceIntake) UnmarshalBinary(b []byte) error {
	var res GovernanceIntake
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
