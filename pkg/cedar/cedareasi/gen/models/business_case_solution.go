// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BusinessCaseSolution business case solution
// swagger:model BusinessCaseSolution
type BusinessCaseSolution struct {

	// cons
	// Required: true
	Cons *string `json:"cons"`

	// cost savings
	CostSavings string `json:"cost_savings,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// lifecycle cost lines
	// Required: true
	LifecycleCostLines []*LifecycleCostLine `json:"lifecycle_cost_lines"`

	// pros
	// Required: true
	Pros *string `json:"pros"`

	// summary
	// Required: true
	Summary *string `json:"summary"`

	// title
	// Required: true
	Title *string `json:"title"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this business case solution
func (m *BusinessCaseSolution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLifecycleCostLines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePros(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BusinessCaseSolution) validateCons(formats strfmt.Registry) error {

	if err := validate.Required("cons", "body", m.Cons); err != nil {
		return err
	}

	return nil
}

func (m *BusinessCaseSolution) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *BusinessCaseSolution) validateLifecycleCostLines(formats strfmt.Registry) error {

	if err := validate.Required("lifecycle_cost_lines", "body", m.LifecycleCostLines); err != nil {
		return err
	}

	for i := 0; i < len(m.LifecycleCostLines); i++ {
		if swag.IsZero(m.LifecycleCostLines[i]) { // not required
			continue
		}

		if m.LifecycleCostLines[i] != nil {
			if err := m.LifecycleCostLines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lifecycle_cost_lines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BusinessCaseSolution) validatePros(formats strfmt.Registry) error {

	if err := validate.Required("pros", "body", m.Pros); err != nil {
		return err
	}

	return nil
}

func (m *BusinessCaseSolution) validateSummary(formats strfmt.Registry) error {

	if err := validate.Required("summary", "body", m.Summary); err != nil {
		return err
	}

	return nil
}

func (m *BusinessCaseSolution) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *BusinessCaseSolution) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BusinessCaseSolution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BusinessCaseSolution) UnmarshalBinary(b []byte) error {
	var res BusinessCaseSolution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
