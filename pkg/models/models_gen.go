// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/cms-enterprise/easi-app/pkg/authentication"
	"github.com/google/uuid"
)

type TRBAdminNoteCategorySpecificData interface {
	IsTRBAdminNoteCategorySpecificData()
}

// A solution proposal within a Business Case
type BusinessCaseSolution struct {
	AcquisitionApproach     *string `json:"acquisitionApproach,omitempty"`
	Cons                    *string `json:"cons,omitempty"`
	CostSavings             *string `json:"costSavings,omitempty"`
	HasUI                   *string `json:"hasUi,omitempty"`
	HostingCloudServiceType *string `json:"hostingCloudServiceType,omitempty"`
	HostingLocation         *string `json:"hostingLocation,omitempty"`
	HostingType             *string `json:"hostingType,omitempty"`
	Pros                    *string `json:"pros,omitempty"`
	SecurityIsApproved      *bool   `json:"securityIsApproved,omitempty"`
	SecurityIsBeingReviewed *string `json:"securityIsBeingReviewed,omitempty"`
	Summary                 *string `json:"summary,omitempty"`
	Title                   *string `json:"title,omitempty"`
}

// CedarBudgetActualCost represents an individual budget actual cost item; this information is returned from the CEDAR Core API
// as a part of the CedarBudgetSystemCost object
type CedarBudgetActualCost struct {
	ActualSystemCost *string `json:"actualSystemCost,omitempty"`
	FiscalYear       *string `json:"fiscalYear,omitempty"`
	SystemID         *string `json:"systemId,omitempty"`
}

// BusinessOwnerInformation contains information about the Business Owner for a CEDAR system
type CedarBusinessOwnerInformation struct {
	BeneficiaryAddressPurpose      []string `json:"beneficiaryAddressPurpose"`
	BeneficiaryAddressPurposeOther *string  `json:"beneficiaryAddressPurposeOther,omitempty"`
	BeneficiaryAddressSource       []string `json:"beneficiaryAddressSource"`
	BeneficiaryAddressSourceOther  *string  `json:"beneficiaryAddressSourceOther,omitempty"`
	BeneficiaryInformation         []string `json:"beneficiaryInformation"`
	CostPerYear                    *string  `json:"costPerYear,omitempty"`
	EditBeneficiaryInformation     *bool    `json:"editBeneficiaryInformation,omitempty"`
	IsCmsOwned                     *bool    `json:"isCmsOwned,omitempty"`
	Nr508UserInterface             *string  `json:"nr508UserInterface,omitempty"`
	NumberOfContractorFte          *string  `json:"numberOfContractorFte,omitempty"`
	NumberOfFederalFte             *string  `json:"numberOfFederalFte,omitempty"`
	NumberOfSupportedUsersPerMonth *string  `json:"numberOfSupportedUsersPerMonth,omitempty"`
	StoresBankingData              *bool    `json:"storesBankingData,omitempty"`
	StoresBeneficiaryAddress       *bool    `json:"storesBeneficiaryAddress,omitempty"`
}

// CedarSoftwareProductItem represents an individual software product; this information is returned from the CEDAR Core API
// as a part of the CedarSoftwareProducts object
type CedarSoftwareProductItem struct {
	APIGatewayUse                  *bool   `json:"apiGatewayUse,omitempty"`
	ElaPurchase                    *string `json:"elaPurchase,omitempty"`
	ElaVendorID                    *string `json:"elaVendorId,omitempty"`
	ProvidesAiCapability           *bool   `json:"providesAiCapability,omitempty"`
	Refstr                         *string `json:"refstr,omitempty"`
	SoftwareCatagoryConnectionGUID *string `json:"softwareCatagoryConnectionGuid,omitempty"`
	SoftwareVendorConnectionGUID   *string `json:"softwareVendorConnectionGuid,omitempty"`
	SoftwareCost                   *string `json:"softwareCost,omitempty"`
	SoftwareElaOrganization        *string `json:"softwareElaOrganization,omitempty"`
	SoftwareName                   *string `json:"softwareName,omitempty"`
	SystemSoftwareConnectionGUID   *string `json:"systemSoftwareConnectionGuid,omitempty"`
	TechnopediaCategory            *string `json:"technopediaCategory,omitempty"`
	TechnopediaID                  *string `json:"technopediaID,omitempty"`
	VendorName                     *string `json:"vendorName,omitempty"`
}

// SystemMaintainerInformation contains information about the system maintainer of a CEDAR system
type CedarSystemMaintainerInformation struct {
	AgileUsed                             *bool      `json:"agileUsed,omitempty"`
	AdHocAgileDeploymentFrequency         *string    `json:"adHocAgileDeploymentFrequency,omitempty"`
	AuthoritativeDatasource               *string    `json:"authoritativeDatasource,omitempty"`
	BusinessArtifactsOnDemand             *bool      `json:"businessArtifactsOnDemand,omitempty"`
	DataAtRestEncryptionKeyManagement     *string    `json:"dataAtRestEncryptionKeyManagement,omitempty"`
	DeploymentFrequency                   *string    `json:"deploymentFrequency,omitempty"`
	DevCompletionPercent                  *string    `json:"devCompletionPercent,omitempty"`
	DevWorkDescription                    *string    `json:"devWorkDescription,omitempty"`
	EcapParticipation                     *bool      `json:"ecapParticipation,omitempty"`
	FrontendAccessType                    *string    `json:"frontendAccessType,omitempty"`
	HardCodedIPAddress                    *bool      `json:"hardCodedIPAddress,omitempty"`
	IP6EnabledAssetPercent                *string    `json:"ip6EnabledAssetPercent,omitempty"`
	IP6TransitionPlan                     *string    `json:"ip6TransitionPlan,omitempty"`
	IPEnabledAssetCount                   *int       `json:"ipEnabledAssetCount,omitempty"`
	LegalHoldCaseName                     *string    `json:"legalHoldCaseName,omitempty"`
	LocallyStoredUserInformation          *bool      `json:"locallyStoredUserInformation,omitempty"`
	MajorRefreshDate                      *time.Time `json:"majorRefreshDate,omitempty"`
	MultifactorAuthenticationMethod       []string   `json:"multifactorAuthenticationMethod"`
	MultifactorAuthenticationMethodOther  *string    `json:"multifactorAuthenticationMethodOther,omitempty"`
	NetAccessibility                      *string    `json:"netAccessibility,omitempty"`
	NetworkTrafficEncryptionKeyManagement *string    `json:"networkTrafficEncryptionKeyManagement,omitempty"`
	NoMajorRefresh                        *bool      `json:"noMajorRefresh,omitempty"`
	NoPersistentRecordsFlag               *bool      `json:"noPersistentRecordsFlag,omitempty"`
	NoPlannedMajorRefresh                 *bool      `json:"noPlannedMajorRefresh,omitempty"`
	OmDocumentationOnDemand               *bool      `json:"omDocumentationOnDemand,omitempty"`
	PlansToRetireReplace                  *string    `json:"plansToRetireReplace,omitempty"`
	QuarterToRetireReplace                *string    `json:"quarterToRetireReplace,omitempty"`
	RecordsManagementBucket               []string   `json:"recordsManagementBucket"`
	RecordsManagementDisposalLocation     *string    `json:"recordsManagementDisposalLocation,omitempty"`
	RecordsManagementDisposalPlan         *string    `json:"recordsManagementDisposalPlan,omitempty"`
	RecordsUnderLegalHold                 *bool      `json:"recordsUnderLegalHold,omitempty"`
	SourceCodeOnDemand                    *bool      `json:"sourceCodeOnDemand,omitempty"`
	SystemCustomization                   *string    `json:"systemCustomization,omitempty"`
	SystemDataLocation                    []string   `json:"systemDataLocation"`
	SystemDataLocationNotes               *string    `json:"systemDataLocationNotes,omitempty"`
	SystemDesignOnDemand                  *bool      `json:"systemDesignOnDemand,omitempty"`
	SystemProductionDate                  *time.Time `json:"systemProductionDate,omitempty"`
	SystemRequirementsOnDemand            *bool      `json:"systemRequirementsOnDemand,omitempty"`
	TestPlanOnDemand                      *bool      `json:"testPlanOnDemand,omitempty"`
	TestReportsOnDemand                   *bool      `json:"testReportsOnDemand,omitempty"`
	TestScriptsOnDemand                   *bool      `json:"testScriptsOnDemand,omitempty"`
	YearToRetireReplace                   *string    `json:"yearToRetireReplace,omitempty"`
}

// The input needed to close a TRB request
type CloseTRBRequestInput struct {
	ID             uuid.UUID `json:"id"`
	ReasonClosed   HTML      `json:"reasonClosed"`
	CopyTrbMailbox bool      `json:"copyTrbMailbox"`
	NotifyEuaIds   []string  `json:"notifyEuaIds"`
}

// Represents a date used for start and end dates on a contract
type ContractDate struct {
	Day   *string `json:"day,omitempty"`
	Month *string `json:"month,omitempty"`
	Year  *string `json:"year,omitempty"`
}

// The data needed to bookmark a cedar system
type CreateCedarSystemBookmarkInput struct {
	CedarSystemID string `json:"cedarSystemId"`
}

// The payload when bookmarking a cedar system
type CreateCedarSystemBookmarkPayload struct {
	CedarSystemBookmark *CedarSystemBookmark `json:"cedarSystemBookmark,omitempty"`
}

type CreateGRBReviewerInput struct {
	EuaUserID  string                            `json:"euaUserId"`
	VotingRole SystemIntakeGRBReviewerVotingRole `json:"votingRole"`
	GrbRole    SystemIntakeGRBReviewerRole       `json:"grbRole"`
}

// The data needed to associate a contact with a system intake
type CreateSystemIntakeContactInput struct {
	EuaUserID      string    `json:"euaUserId"`
	SystemIntakeID uuid.UUID `json:"systemIntakeId"`
	Component      string    `json:"component"`
	Role           string    `json:"role"`
}

// The payload when creating a system intake contact
type CreateSystemIntakeContactPayload struct {
	SystemIntakeContact *SystemIntakeContact `json:"systemIntakeContact,omitempty"`
}

// The data needed to upload a System Intake document and attach it to a request with metadata
type CreateSystemIntakeDocumentInput struct {
	RequestID            uuid.UUID                      `json:"requestID"`
	FileData             graphql.Upload                 `json:"fileData"`
	DocumentType         SystemIntakeDocumentCommonType `json:"documentType"`
	Version              SystemIntakeDocumentVersion    `json:"version"`
	OtherTypeDescription *string                        `json:"otherTypeDescription,omitempty"`
	SendNotification     *bool                          `json:"sendNotification,omitempty"`
}

// Data returned after uploading a document to a System Intake
type CreateSystemIntakeDocumentPayload struct {
	Document *SystemIntakeDocument `json:"document,omitempty"`
}

type CreateSystemIntakeGRBReviewersInput struct {
	SystemIntakeID uuid.UUID                 `json:"systemIntakeID"`
	Reviewers      []*CreateGRBReviewerInput `json:"reviewers"`
}

type CreateSystemIntakeGRBReviewersPayload struct {
	Reviewers []*SystemIntakeGRBReviewer `json:"reviewers"`
}

// The input data used to initialize an IT governance request for a system
type CreateSystemIntakeInput struct {
	RequestType SystemIntakeRequestType     `json:"requestType"`
	Requester   *SystemIntakeRequesterInput `json:"requester"`
}

// Input data for adding a note to a system request
type CreateSystemIntakeNoteInput struct {
	Content    HTML      `json:"content"`
	AuthorName string    `json:"authorName"`
	IntakeID   uuid.UUID `json:"intakeId"`
}

// The data needed to create a TRB admin note with the Consult Session category
type CreateTRBAdminNoteConsultSessionInput struct {
	TrbRequestID uuid.UUID `json:"trbRequestId"`
	NoteText     HTML      `json:"noteText"`
}

// The data needed to create a TRB admin note with the General Request category
type CreateTRBAdminNoteGeneralRequestInput struct {
	TrbRequestID uuid.UUID `json:"trbRequestId"`
	NoteText     HTML      `json:"noteText"`
}

// The data needed to create a TRB admin note with the Guidance Letter category
type CreateTRBAdminNoteGuidanceLetterInput struct {
	TrbRequestID            uuid.UUID   `json:"trbRequestId"`
	NoteText                HTML        `json:"noteText"`
	AppliesToMeetingSummary bool        `json:"appliesToMeetingSummary"`
	AppliesToNextSteps      bool        `json:"appliesToNextSteps"`
	InsightIDs              []uuid.UUID `json:"insightIDs"`
}

// The data needed to create a TRB admin note with the Initial Request Form category
type CreateTRBAdminNoteInitialRequestFormInput struct {
	TrbRequestID                 uuid.UUID `json:"trbRequestId"`
	NoteText                     HTML      `json:"noteText"`
	AppliesToBasicRequestDetails bool      `json:"appliesToBasicRequestDetails"`
	AppliesToSubjectAreas        bool      `json:"appliesToSubjectAreas"`
	AppliesToAttendees           bool      `json:"appliesToAttendees"`
}

// The data needed to create a TRB admin note with the Supporting Documents category
type CreateTRBAdminNoteSupportingDocumentsInput struct {
	TrbRequestID uuid.UUID   `json:"trbRequestId"`
	NoteText     HTML        `json:"noteText"`
	DocumentIDs  []uuid.UUID `json:"documentIDs"`
}

// The input required to add an insight & links to a TRB guidance letter
type CreateTRBGuidanceLetterInsightInput struct {
	TrbRequestID uuid.UUID                        `json:"trbRequestId"`
	Title        string                           `json:"title"`
	Insight      HTML                             `json:"insight"`
	Links        []string                         `json:"links"`
	Category     TRBGuidanceLetterInsightCategory `json:"category"`
}

// The data needed add a TRB request attendee to a TRB request
type CreateTRBRequestAttendeeInput struct {
	EuaUserID    string     `json:"euaUserId"`
	TrbRequestID uuid.UUID  `json:"trbRequestId"`
	Component    string     `json:"component"`
	Role         PersonRole `json:"role"`
}

// The data needed to upload a TRB document and attach it to a request with metadata
type CreateTRBRequestDocumentInput struct {
	RequestID            uuid.UUID             `json:"requestID"`
	FileData             graphql.Upload        `json:"fileData"`
	DocumentType         TRBDocumentCommonType `json:"documentType"`
	OtherTypeDescription *string               `json:"otherTypeDescription,omitempty"`
}

// Data returned after uploading a document to a TRB request
type CreateTRBRequestDocumentPayload struct {
	Document *TRBRequestDocument `json:"document,omitempty"`
}

// The data needed to add feedback to a TRB request
type CreateTRBRequestFeedbackInput struct {
	TrbRequestID    uuid.UUID         `json:"trbRequestId"`
	FeedbackMessage HTML              `json:"feedbackMessage"`
	CopyTrbMailbox  bool              `json:"copyTrbMailbox"`
	NotifyEuaIds    []string          `json:"notifyEuaIds"`
	Action          TRBFeedbackAction `json:"action"`
}

// The current user of the application
type CurrentUser struct {
	LaunchDarkly *LaunchDarklySettings `json:"launchDarkly"`
}

// The payload when deleting a bookmark for a cedar system
type DeleteCedarSystemBookmarkPayload struct {
	CedarSystemID string `json:"cedarSystemId"`
}

// The data needed to delete a system intake contact
type DeleteSystemIntakeContactInput struct {
	ID uuid.UUID `json:"id"`
}

// The payload when deleting a system intake contact
type DeleteSystemIntakeContactPayload struct {
	SystemIntakeContact *SystemIntakeContact `json:"systemIntakeContact,omitempty"`
}

// Data returned after deleting a document attached to a System Intake
type DeleteSystemIntakeDocumentPayload struct {
	Document *SystemIntakeDocument `json:"document,omitempty"`
}

type DeleteSystemIntakeGRBPresentationLinksInput struct {
	SystemIntakeID uuid.UUID `json:"systemIntakeID"`
}

type DeleteSystemIntakeGRBReviewerInput struct {
	ReviewerID uuid.UUID `json:"reviewerID"`
}

// Data returned after deleting a document attached to a TRB request
type DeleteTRBRequestDocumentPayload struct {
	Document *TRBRequestDocument `json:"document,omitempty"`
}

type DeleteTRBRequestFundingSourcesInput struct {
	TrbRequestID  uuid.UUID `json:"trbRequestId"`
	FundingNumber string    `json:"fundingNumber"`
}

// GRBReviewerComparison represents an individual GRB Reviewer within the context of a
// comparison operation between two system intakes.
//
// For this reason, it is similar to a regular "type GRBReviewer", but has an extra
// field for "isCurrentReviewer", representing whether or not the specific GRB Reviewer
// is already on the intake being compared against or not.
type GRBReviewerComparison struct {
	ID                uuid.UUID                         `json:"id"`
	UserAccount       *authentication.UserAccount       `json:"userAccount"`
	EuaUserID         string                            `json:"euaUserId"`
	VotingRole        SystemIntakeGRBReviewerVotingRole `json:"votingRole"`
	GrbRole           SystemIntakeGRBReviewerRole       `json:"grbRole"`
	IsCurrentReviewer bool                              `json:"isCurrentReviewer"`
}

// GRBReviewerComparisonIntake represents a response when searching for System Intakes
// that have GRB reviewers as compared to another Intake.
//
// It's effectively a smaller subset of some of the fields on the entire Intake, plus a special
// "reviewers" field specific to the comparison operation.
type GRBReviewerComparisonIntake struct {
	ID              uuid.UUID                `json:"id"`
	RequestName     string                   `json:"requestName"`
	Reviewers       []*GRBReviewerComparison `json:"reviewers"`
	IntakeCreatedAt *time.Time               `json:"intakeCreatedAt,omitempty"`
}

// The current user's Launch Darkly key
type LaunchDarklySettings struct {
	UserKey    string `json:"userKey"`
	SignedHash string `json:"signedHash"`
}

// Defines the mutations for the schema
type Mutation struct {
}

// Query definition for the schema
type Query struct {
}

// The data needed to reopen a TRB request
type ReopenTRBRequestInput struct {
	TrbRequestID   uuid.UUID `json:"trbRequestId"`
	ReasonReopened HTML      `json:"reasonReopened"`
	CopyTrbMailbox bool      `json:"copyTrbMailbox"`
	NotifyEuaIds   []string  `json:"notifyEuaIds"`
}

type RequesterUpdateEmailData struct {
	LcidStatus     *SystemIntakeLCIDStatus `json:"lcidStatus,omitempty"`
	LcidIssuedAt   *time.Time              `json:"lcidIssuedAt,omitempty"`
	LcidExpiresAt  *time.Time              `json:"lcidExpiresAt,omitempty"`
	LcidRetiresAt  *time.Time              `json:"lcidRetiresAt,omitempty"`
	RequesterEmail EmailAddress            `json:"requesterEmail"`
}

type SendCantFindSomethingEmailInput struct {
	Body string `json:"body"`
}

// The inputs to the user feedback form
type SendFeedbackEmailInput struct {
	IsAnonymous            bool     `json:"isAnonymous"`
	CanBeContacted         bool     `json:"canBeContacted"`
	EasiServicesUsed       []string `json:"easiServicesUsed"`
	CmsRole                string   `json:"cmsRole"`
	SystemEasyToUse        string   `json:"systemEasyToUse"`
	DidntNeedHelpAnswering string   `json:"didntNeedHelpAnswering"`
	QuestionsWereRelevant  string   `json:"questionsWereRelevant"`
	HadAccessToInformation string   `json:"hadAccessToInformation"`
	HowSatisfied           string   `json:"howSatisfied"`
	HowCanWeImprove        string   `json:"howCanWeImprove"`
}

type SendReportAProblemEmailInput struct {
	IsAnonymous            bool   `json:"isAnonymous"`
	CanBeContacted         bool   `json:"canBeContacted"`
	EasiService            string `json:"easiService"`
	WhatWereYouDoing       string `json:"whatWereYouDoing"`
	WhatWentWrong          string `json:"whatWentWrong"`
	HowSevereWasTheProblem string `json:"howSevereWasTheProblem"`
}

// The data needed to send a TRB guidance letter, including who to notify
type SendTRBGuidanceLetterInput struct {
	ID               uuid.UUID `json:"id"`
	CopyITGovMailbox bool      `json:"copyITGovMailbox"`
	CopyTrbMailbox   bool      `json:"copyTrbMailbox"`
	NotifyEuaIds     []string  `json:"notifyEuaIds"`
}

type SetRolesForUserOnSystemInput struct {
	CedarSystemID      string   `json:"cedarSystemID"`
	EuaUserID          string   `json:"euaUserId"`
	DesiredRoleTypeIDs []string `json:"desiredRoleTypeIDs"`
}

type SetSystemIntakeRelationExistingServiceInput struct {
	SystemIntakeID  uuid.UUID `json:"systemIntakeID"`
	ContractName    string    `json:"contractName"`
	ContractNumbers []string  `json:"contractNumbers"`
}

type SetSystemIntakeRelationExistingSystemInput struct {
	SystemIntakeID           uuid.UUID             `json:"systemIntakeID"`
	CedarSystemIDs           []string              `json:"cedarSystemIDs"`
	CedarSystemRelationShips []*SystemRelationship `json:"cedarSystemRelationShips,omitempty"`
	ContractNumbers          []string              `json:"contractNumbers"`
}

type SetSystemIntakeRelationNewSystemInput struct {
	SystemIntakeID  uuid.UUID `json:"systemIntakeID"`
	ContractNumbers []string  `json:"contractNumbers"`
}

type SetTRBRequestRelationExistingServiceInput struct {
	TrbRequestID    uuid.UUID `json:"trbRequestID"`
	ContractName    string    `json:"contractName"`
	ContractNumbers []string  `json:"contractNumbers"`
}

type SetTRBRequestRelationExistingSystemInput struct {
	TrbRequestID    uuid.UUID `json:"trbRequestID"`
	CedarSystemIDs  []string  `json:"cedarSystemIDs"`
	ContractNumbers []string  `json:"contractNumbers"`
}

type SetTRBRequestRelationNewSystemInput struct {
	TrbRequestID    uuid.UUID `json:"trbRequestID"`
	ContractNumbers []string  `json:"contractNumbers"`
}

// Input for starting a GRB Review, which notifies reviewers by email
type StartGRBReviewInput struct {
	SystemIntakeID uuid.UUID `json:"systemIntakeID"`
}

// Input to submit an intake for review
type SubmitIntakeInput struct {
	ID uuid.UUID `json:"id"`
}

// An action taken on a system intake, often resulting in a change in status.
type SystemIntakeAction struct {
	ID                     uuid.UUID                         `json:"id"`
	SystemIntake           *SystemIntake                     `json:"systemIntake"`
	Type                   SystemIntakeActionType            `json:"type"`
	Actor                  *SystemIntakeActionActor          `json:"actor"`
	Step                   *SystemIntakeStep                 `json:"step,omitempty"`
	Feedback               *HTML                             `json:"feedback,omitempty"`
	LcidExpirationChange   *SystemIntakeLCIDExpirationChange `json:"lcidExpirationChange,omitempty"`
	PreviousRetirementDate *time.Time                        `json:"previousRetirementDate,omitempty"`
	NewRetirementDate      *time.Time                        `json:"newRetirementDate,omitempty"`
	CreatedAt              time.Time                         `json:"createdAt"`
}

// The contact who is associated with an action being done to a system request
type SystemIntakeActionActor struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

// Represents current and planned annual costs for a system
type SystemIntakeAnnualSpending struct {
	CurrentAnnualSpending           *string `json:"currentAnnualSpending,omitempty"`
	CurrentAnnualSpendingITPortion  *string `json:"currentAnnualSpendingITPortion,omitempty"`
	PlannedYearOneSpending          *string `json:"plannedYearOneSpending,omitempty"`
	PlannedYearOneSpendingITPortion *string `json:"plannedYearOneSpendingITPortion,omitempty"`
}

// Input data for current and planned year one annual costs associated with a system request
type SystemIntakeAnnualSpendingInput struct {
	CurrentAnnualSpending           *string `json:"currentAnnualSpending,omitempty"`
	CurrentAnnualSpendingITPortion  *string `json:"currentAnnualSpendingITPortion,omitempty"`
	PlannedYearOneSpending          *string `json:"plannedYearOneSpending,omitempty"`
	PlannedYearOneSpendingITPortion *string `json:"plannedYearOneSpendingITPortion,omitempty"`
}

// Represents the OIT Business Owner of a system
type SystemIntakeBusinessOwner struct {
	Component *string `json:"component,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// The input data used to set the CMS Business Owner of a system
type SystemIntakeBusinessOwnerInput struct {
	Name      string `json:"name"`
	Component string `json:"component"`
}

// Input for changing an intake's LCID retirement date in IT Gov v2
type SystemIntakeChangeLCIDRetirementDateInput struct {
	SystemIntakeID         uuid.UUID                    `json:"systemIntakeID"`
	RetiresAt              time.Time                    `json:"retiresAt"`
	AdditionalInfo         *HTML                        `json:"additionalInfo,omitempty"`
	NotificationRecipients *EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	AdminNote              *HTML                        `json:"adminNote,omitempty"`
}

// Input for creating a Close Request Action in Admin Actions v2
type SystemIntakeCloseRequestInput struct {
	SystemIntakeID         uuid.UUID                    `json:"systemIntakeID"`
	NotificationRecipients *EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	Reason                 *HTML                        `json:"reason,omitempty"`
	AdditionalInfo         *HTML                        `json:"additionalInfo,omitempty"`
	AdminNote              *HTML                        `json:"adminNote,omitempty"`
}

// Represents a contact in OIT who is collaborating with the user
// creating a system IT governance request
type SystemIntakeCollaborator struct {
	Acronym      string `json:"acronym"`
	Collaborator string `json:"collaborator"`
	Key          string `json:"key"`
	Label        string `json:"label"`
	Name         string `json:"name"`
}

// The input data used to add an OIT collaborator for a system request
type SystemIntakeCollaboratorInput struct {
	Collaborator string `json:"collaborator"`
	Name         string `json:"name"`
	Key          string `json:"key"`
}

// Input for confirming an intake's decision to issue an LCID in IT Gov v2
type SystemIntakeConfirmLCIDInput struct {
	SystemIntakeID         uuid.UUID                    `json:"systemIntakeID"`
	ExpiresAt              time.Time                    `json:"expiresAt"`
	Scope                  HTML                         `json:"scope"`
	NextSteps              HTML                         `json:"nextSteps"`
	TrbFollowUp            SystemIntakeTRBFollowUp      `json:"trbFollowUp"`
	CostBaseline           *string                      `json:"costBaseline,omitempty"`
	AdditionalInfo         *HTML                        `json:"additionalInfo,omitempty"`
	NotificationRecipients *EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	AdminNote              *HTML                        `json:"adminNote,omitempty"`
}

// The payload when retrieving system intake contacts
type SystemIntakeContactsPayload struct {
	SystemIntakeContacts []*AugmentedSystemIntakeContact `json:"systemIntakeContacts"`
	InvalidEUAIDs        []string                        `json:"invalidEUAIDs"`
}

// Represents a contract for work on a system
type SystemIntakeContract struct {
	Contractor  *string       `json:"contractor,omitempty"`
	EndDate     *ContractDate `json:"endDate"`
	HasContract *string       `json:"hasContract,omitempty"`
	StartDate   *ContractDate `json:"startDate"`
	Vehicle     *string       `json:"vehicle,omitempty"`
}

// Input data containing information about a contract related to a system request
type SystemIntakeContractInput struct {
	Contractor  *string    `json:"contractor,omitempty"`
	EndDate     *time.Time `json:"endDate,omitempty"`
	HasContract *string    `json:"hasContract,omitempty"`
	StartDate   *time.Time `json:"startDate,omitempty"`
	Numbers     []string   `json:"numbers"`
}

// Represents expectations about a system's additional costs
type SystemIntakeCosts struct {
	ExpectedIncreaseAmount *string `json:"expectedIncreaseAmount,omitempty"`
	IsExpectingIncrease    *string `json:"isExpectingIncrease,omitempty"`
}

// Input data for estimated system cost increases associated with a system request
//
// NOTE: This field is no longer in intake form but data/query is preserved for existing intakes (EASI-2076)
type SystemIntakeCostsInput struct {
	ExpectedIncreaseAmount *string `json:"expectedIncreaseAmount,omitempty"`
	IsExpectingIncrease    *string `json:"isExpectingIncrease,omitempty"`
}

// Denotes the type of a document attached to a System Intake,
// which can be one of a number of common types, or a free-text user-specified type
type SystemIntakeDocumentType struct {
	CommonType           SystemIntakeDocumentCommonType `json:"commonType"`
	OtherTypeDescription *string                        `json:"otherTypeDescription,omitempty"`
}

// Input for expiring an intake's LCID in IT Gov v2
type SystemIntakeExpireLCIDInput struct {
	SystemIntakeID         uuid.UUID                    `json:"systemIntakeID"`
	Reason                 HTML                         `json:"reason"`
	NextSteps              *HTML                        `json:"nextSteps,omitempty"`
	NotificationRecipients *EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	AdditionalInfo         *HTML                        `json:"additionalInfo,omitempty"`
	AdminNote              *HTML                        `json:"adminNote,omitempty"`
}

// Represents the source of funding for a system
type SystemIntakeFundingSourceInput struct {
	FundingNumber *string `json:"fundingNumber,omitempty"`
	Source        *string `json:"source,omitempty"`
}

// The input required to specify the funding source(s) for a system intake
type SystemIntakeFundingSourcesInput struct {
	ExistingFunding *bool                             `json:"existingFunding,omitempty"`
	FundingSources  []*SystemIntakeFundingSourceInput `json:"fundingSources"`
}

// Data needed to add system intake presentation link data
// One of the optional link/files values is required to pass the database constraint
type SystemIntakeGRBPresentationLinksInput struct {
	SystemIntakeID           uuid.UUID                          `json:"systemIntakeID"`
	RecordingLink            graphql.Omittable[*string]         `json:"recordingLink,omitempty"`
	RecordingPasscode        graphql.Omittable[*string]         `json:"recordingPasscode,omitempty"`
	TranscriptLink           graphql.Omittable[*string]         `json:"transcriptLink,omitempty"`
	TranscriptFileData       graphql.Omittable[*graphql.Upload] `json:"transcriptFileData,omitempty"`
	PresentationDeckFileData graphql.Omittable[*graphql.Upload] `json:"presentationDeckFileData,omitempty"`
}

type SystemIntakeGRBReviewDiscussion struct {
	InitialPost *SystemIntakeGRBReviewDiscussionPost   `json:"initialPost"`
	Replies     []*SystemIntakeGRBReviewDiscussionPost `json:"replies"`
}

// Contains multiple system request collaborators, if any
type SystemIntakeGovernanceTeam struct {
	IsPresent *bool                       `json:"isPresent,omitempty"`
	Teams     []*SystemIntakeCollaborator `json:"teams,omitempty"`
}

// The input data used to set the list of OIT collaborators for a system request
type SystemIntakeGovernanceTeamInput struct {
	IsPresent *bool                            `json:"isPresent,omitempty"`
	Teams     []*SystemIntakeCollaboratorInput `json:"teams,omitempty"`
}

// The Information System Security Officer (ISSO) that is
// assicuated with a system request, if any
type SystemIntakeIsso struct {
	IsPresent *bool   `json:"isPresent,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// The input data used to set the ISSO associated with a system request, if any
type SystemIntakeISSOInput struct {
	IsPresent *bool   `json:"isPresent,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// Input for setting an intake's decision to issuing an LCID in IT Gov v2
type SystemIntakeIssueLCIDInput struct {
	SystemIntakeID         uuid.UUID                    `json:"systemIntakeID"`
	Lcid                   *string                      `json:"lcid,omitempty"`
	ExpiresAt              time.Time                    `json:"expiresAt"`
	Scope                  HTML                         `json:"scope"`
	NextSteps              HTML                         `json:"nextSteps"`
	TrbFollowUp            SystemIntakeTRBFollowUp      `json:"trbFollowUp"`
	CostBaseline           *string                      `json:"costBaseline,omitempty"`
	AdditionalInfo         *HTML                        `json:"additionalInfo,omitempty"`
	NotificationRecipients *EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	AdminNote              *HTML                        `json:"adminNote,omitempty"`
}

// Contains the data about a change to the expiration date of a system request's lifecycle ID
type SystemIntakeLCIDExpirationChange struct {
	PreviousDate         time.Time `json:"previousDate"`
	NewDate              time.Time `json:"newDate"`
	PreviousScope        *HTML     `json:"previousScope,omitempty"`
	NewScope             *HTML     `json:"newScope,omitempty"`
	PreviousNextSteps    *HTML     `json:"previousNextSteps,omitempty"`
	NewNextSteps         *HTML     `json:"newNextSteps,omitempty"`
	PreviousCostBaseline *string   `json:"previousCostBaseline,omitempty"`
	NewCostBaseline      *string   `json:"newCostBaseline,omitempty"`
}

// Input for creating a Not an IT Governance Request Action in Admin Actions v2
type SystemIntakeNotITGovReqInput struct {
	SystemIntakeID         uuid.UUID                    `json:"systemIntakeID"`
	NotificationRecipients *EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	Reason                 *HTML                        `json:"reason,omitempty"`
	AdditionalInfo         *HTML                        `json:"additionalInfo,omitempty"`
	AdminNote              *HTML                        `json:"adminNote,omitempty"`
}

// The author of a note added to a system request
type SystemIntakeNoteAuthor struct {
	Eua  string `json:"eua"`
	Name string `json:"name"`
}

// The product manager associated with a system
type SystemIntakeProductManager struct {
	Component *string `json:"component,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// The input data used to set the CMS product manager/lead of a system
type SystemIntakeProductManagerInput struct {
	Name      string `json:"name"`
	Component string `json:"component"`
}

// Input for submitting a Progress to New Step action in IT Gov v2
type SystemIntakeProgressToNewStepsInput struct {
	SystemIntakeID         uuid.UUID                    `json:"systemIntakeID"`
	NewStep                SystemIntakeStepToProgressTo `json:"newStep"`
	MeetingDate            *time.Time                   `json:"meetingDate,omitempty"`
	NotificationRecipients *EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	Feedback               *HTML                        `json:"feedback,omitempty"`
	GrbRecommendations     *HTML                        `json:"grbRecommendations,omitempty"`
	AdditionalInfo         *HTML                        `json:"additionalInfo,omitempty"`
	AdminNote              *HTML                        `json:"adminNote,omitempty"`
}

// Input for setting an intake's decision to Not Approved by GRB in IT Gov v2
type SystemIntakeRejectIntakeInput struct {
	SystemIntakeID         uuid.UUID                    `json:"systemIntakeID"`
	Reason                 HTML                         `json:"reason"`
	NextSteps              HTML                         `json:"nextSteps"`
	TrbFollowUp            SystemIntakeTRBFollowUp      `json:"trbFollowUp"`
	AdditionalInfo         *HTML                        `json:"additionalInfo,omitempty"`
	NotificationRecipients *EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	AdminNote              *HTML                        `json:"adminNote,omitempty"`
}

// Input for creating a Reopen Request Action in Admin Actions v2
type SystemIntakeReopenRequestInput struct {
	SystemIntakeID         uuid.UUID                    `json:"systemIntakeID"`
	NotificationRecipients *EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	Reason                 *HTML                        `json:"reason,omitempty"`
	AdditionalInfo         *HTML                        `json:"additionalInfo,omitempty"`
	AdminNote              *HTML                        `json:"adminNote,omitempty"`
}

// Input for creating a Request Edits Action in Admin Actions v2
type SystemIntakeRequestEditsInput struct {
	SystemIntakeID         uuid.UUID                    `json:"systemIntakeID"`
	IntakeFormStep         SystemIntakeFormStep         `json:"intakeFormStep"`
	NotificationRecipients *EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	EmailFeedback          HTML                         `json:"emailFeedback"`
	AdditionalInfo         *HTML                        `json:"additionalInfo,omitempty"`
	AdminNote              *HTML                        `json:"adminNote,omitempty"`
}

// The contact who made an IT governance request for a system
type SystemIntakeRequester struct {
	Component *string `json:"component,omitempty"`
	Email     *string `json:"email,omitempty"`
	Name      string  `json:"name"`
}

// The input data used to set the requester of a system request
type SystemIntakeRequesterInput struct {
	Name string `json:"name"`
}

// The input data used to set the requester for a system request along with the
// requester's business component
type SystemIntakeRequesterWithComponentInput struct {
	Name      string `json:"name"`
	Component string `json:"component"`
}

// Input for retiring an intake's LCID in IT Gov v2
type SystemIntakeRetireLCIDInput struct {
	SystemIntakeID         uuid.UUID                    `json:"systemIntakeID"`
	RetiresAt              time.Time                    `json:"retiresAt"`
	Reason                 *HTML                        `json:"reason,omitempty"`
	AdditionalInfo         *HTML                        `json:"additionalInfo,omitempty"`
	NotificationRecipients *EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	AdminNote              *HTML                        `json:"adminNote,omitempty"`
}

// Input for "unretiring" (i.e. removing retirement date) an LCID in IT Gov v2
type SystemIntakeUnretireLCIDInput struct {
	SystemIntakeID         uuid.UUID                    `json:"systemIntakeID"`
	AdditionalInfo         *HTML                        `json:"additionalInfo,omitempty"`
	NotificationRecipients *EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	AdminNote              *HTML                        `json:"adminNote,omitempty"`
}

// Input for updating an intake's LCID in IT Gov v2
type SystemIntakeUpdateLCIDInput struct {
	SystemIntakeID         uuid.UUID                    `json:"systemIntakeID"`
	ExpiresAt              *time.Time                   `json:"expiresAt,omitempty"`
	Scope                  *HTML                        `json:"scope,omitempty"`
	NextSteps              *HTML                        `json:"nextSteps,omitempty"`
	CostBaseline           *string                      `json:"costBaseline,omitempty"`
	Reason                 *HTML                        `json:"reason,omitempty"`
	AdditionalInfo         *HTML                        `json:"additionalInfo,omitempty"`
	NotificationRecipients *EmailNotificationRecipients `json:"notificationRecipients,omitempty"`
	AdminNote              *HTML                        `json:"adminNote,omitempty"`
}

type SystemRelationship struct {
	CedarSystemID          *string                 `json:"cedarSystemId,omitempty"`
	SystemRelationshipType *SystemRelationshipType `json:"systemRelationshipType,omitempty"`
}

// Data specific to admin notes in the Consult Session category
// This type doesn't contain any actual data
type TRBAdminNoteConsultSessionCategoryData struct {
	// Placeholder field so this type is non-empty, always null
	PlaceholderField *bool `json:"placeholderField,omitempty"`
}

func (TRBAdminNoteConsultSessionCategoryData) IsTRBAdminNoteCategorySpecificData() {}

// Data specific to admin notes in the General Request category
// This type doesn't contain any actual data
type TRBAdminNoteGeneralRequestCategoryData struct {
	// Placeholder field so this type is non-empty, always null
	PlaceholderField *bool `json:"placeholderField,omitempty"`
}

func (TRBAdminNoteGeneralRequestCategoryData) IsTRBAdminNoteCategorySpecificData() {}

// Data specific to admin notes in the Guidance Letter category
// The "insights" property _will_ return deleted insights so that UI can reference the insight title
type TRBAdminNoteGuidanceLetterCategoryData struct {
	AppliesToMeetingSummary bool                        `json:"appliesToMeetingSummary"`
	AppliesToNextSteps      bool                        `json:"appliesToNextSteps"`
	Insights                []*TRBGuidanceLetterInsight `json:"insights"`
}

func (TRBAdminNoteGuidanceLetterCategoryData) IsTRBAdminNoteCategorySpecificData() {}

// Data specific to admin notes in the Initial Request Form category
type TRBAdminNoteInitialRequestFormCategoryData struct {
	AppliesToBasicRequestDetails bool `json:"appliesToBasicRequestDetails"`
	AppliesToSubjectAreas        bool `json:"appliesToSubjectAreas"`
	AppliesToAttendees           bool `json:"appliesToAttendees"`
}

func (TRBAdminNoteInitialRequestFormCategoryData) IsTRBAdminNoteCategorySpecificData() {}

// Data specific to admin notes in the Supporting Documents category
// The "documents" property _will_ return deleted documents so that UI can reference the document name
type TRBAdminNoteSupportingDocumentsCategoryData struct {
	Documents []*TRBRequestDocument `json:"documents"`
}

func (TRBAdminNoteSupportingDocumentsCategoryData) IsTRBAdminNoteCategorySpecificData() {}

// Denotes the type of a document attached to a TRB request,
// which can be one of a number of common types, or a free-text user-specified type
type TRBRequestDocumentType struct {
	CommonType           TRBDocumentCommonType `json:"commonType"`
	OtherTypeDescription *string               `json:"otherTypeDescription,omitempty"`
}

// Input data used to update the admin lead assigned to a system IT governance
// request
type UpdateSystemIntakeAdminLeadInput struct {
	AdminLead string    `json:"adminLead"`
	ID        uuid.UUID `json:"id"`
}

// The input data used to update the contact details of the people associated with
// a system request
type UpdateSystemIntakeContactDetailsInput struct {
	ID              uuid.UUID                                `json:"id"`
	Requester       *SystemIntakeRequesterWithComponentInput `json:"requester"`
	BusinessOwner   *SystemIntakeBusinessOwnerInput          `json:"businessOwner"`
	ProductManager  *SystemIntakeProductManagerInput         `json:"productManager"`
	Isso            *SystemIntakeISSOInput                   `json:"isso"`
	GovernanceTeams *SystemIntakeGovernanceTeamInput         `json:"governanceTeams"`
}

// The data needed to update a contact associated with a system intake
type UpdateSystemIntakeContactInput struct {
	ID             uuid.UUID `json:"id"`
	EuaUserID      string    `json:"euaUserId"`
	SystemIntakeID uuid.UUID `json:"systemIntakeId"`
	Component      string    `json:"component"`
	Role           string    `json:"role"`
}

// Input data for updating contract details related to a system request
type UpdateSystemIntakeContractDetailsInput struct {
	ID             uuid.UUID                        `json:"id"`
	FundingSources *SystemIntakeFundingSourcesInput `json:"fundingSources,omitempty"`
	Costs          *SystemIntakeCostsInput          `json:"costs,omitempty"`
	AnnualSpending *SystemIntakeAnnualSpendingInput `json:"annualSpending,omitempty"`
	Contract       *SystemIntakeContractInput       `json:"contract,omitempty"`
}

type UpdateSystemIntakeGRBReviewerInput struct {
	ReviewerID uuid.UUID                         `json:"reviewerID"`
	VotingRole SystemIntakeGRBReviewerVotingRole `json:"votingRole"`
	GrbRole    SystemIntakeGRBReviewerRole       `json:"grbRole"`
}

// Input data for updating a system intake's relationship to a CEDAR system
type UpdateSystemIntakeLinkedCedarSystemInput struct {
	ID                 uuid.UUID               `json:"id"`
	CedarSystemID      *string                 `json:"cedarSystemId,omitempty"`
	SystemRelationship *SystemRelationshipType `json:"systemRelationship,omitempty"`
}

// Input data for updating an IT governance admin note
type UpdateSystemIntakeNoteInput struct {
	Content    HTML      `json:"content"`
	IsArchived bool      `json:"isArchived"`
	ID         uuid.UUID `json:"id"`
}

// The payload for updating a system's IT governance request
type UpdateSystemIntakePayload struct {
	SystemIntake *SystemIntake `json:"systemIntake,omitempty"`
	UserErrors   []*UserError  `json:"userErrors,omitempty"`
}

// Input to update some fields on a system request
type UpdateSystemIntakeRequestDetailsInput struct {
	ID                 uuid.UUID                                `json:"id"`
	RequestName        *string                                  `json:"requestName,omitempty"`
	BusinessNeed       *string                                  `json:"businessNeed,omitempty"`
	BusinessSolution   *string                                  `json:"businessSolution,omitempty"`
	CurrentStage       *string                                  `json:"currentStage,omitempty"`
	NeedsEaSupport     *bool                                    `json:"needsEaSupport,omitempty"`
	HasUIChanges       *bool                                    `json:"hasUiChanges,omitempty"`
	UsesAiTech         *bool                                    `json:"usesAiTech,omitempty"`
	UsingSoftware      *string                                  `json:"usingSoftware,omitempty"`
	AcquisitionMethods []SystemIntakeSoftwareAcquisitionMethods `json:"acquisitionMethods"`
	CedarSystemID      *string                                  `json:"cedarSystemId,omitempty"`
}

// Input data used to update GRT and GRB dates for a system request
type UpdateSystemIntakeReviewDatesInput struct {
	GrbDate *time.Time `json:"grbDate,omitempty"`
	GrtDate *time.Time `json:"grtDate,omitempty"`
	ID      uuid.UUID  `json:"id"`
}

type UpdateTRBGuidanceLetterInsightOrderInput struct {
	TrbRequestID uuid.UUID `json:"trbRequestId"`
	// List of the insight IDs in the new order they should be displayed
	NewOrder []uuid.UUID                      `json:"newOrder"`
	Category TRBGuidanceLetterInsightCategory `json:"category"`
}

// Represents an EUA user who is included as an attendee for a TRB request
type UpdateTRBRequestAttendeeInput struct {
	ID        uuid.UUID  `json:"id"`
	Component string     `json:"component"`
	Role      PersonRole `json:"role"`
}

// The data needed schedule a TRB consult meeting time
type UpdateTRBRequestConsultMeetingTimeInput struct {
	TrbRequestID       uuid.UUID `json:"trbRequestId"`
	ConsultMeetingTime time.Time `json:"consultMeetingTime"`
	CopyTrbMailbox     bool      `json:"copyTrbMailbox"`
	NotifyEuaIds       []string  `json:"notifyEuaIds"`
	Notes              string    `json:"notes"`
}

type UpdateTRBRequestFundingSourcesInput struct {
	TrbRequestID  uuid.UUID `json:"trbRequestId"`
	FundingNumber string    `json:"fundingNumber"`
	Sources       []string  `json:"sources"`
}

// The data needed assign a TRB lead to a TRB request
type UpdateTRBRequestTRBLeadInput struct {
	TrbRequestID uuid.UUID `json:"trbRequestId"`
	TrbLead      string    `json:"trbLead"`
}

// UserError represents application-level errors that are the result of
// either user or application developer error.
type UserError struct {
	Message string   `json:"message"`
	Path    []string `json:"path"`
}

type CreateSystemIntakeGRBDiscussionPostInput struct {
	SystemIntakeID uuid.UUID  `json:"systemIntakeID"`
	Content        TaggedHTML `json:"content"`
}

type CreateSystemIntakeGRBDiscussionReplyInput struct {
	InitialPostID uuid.UUID  `json:"initialPostID"`
	Content       TaggedHTML `json:"content"`
}

// A user role associated with a job code
type Role string

const (
	// An admin on the GRT
	RoleEasiGovteam Role = "EASI_GOVTEAM"
	// An admin on the TRB
	RoleEasiTrbAdmin Role = "EASI_TRB_ADMIN"
	// A generic EASi user
	RoleEasiUser Role = "EASI_USER"
)

var AllRole = []Role{
	RoleEasiGovteam,
	RoleEasiTrbAdmin,
	RoleEasiUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleEasiGovteam, RoleEasiTrbAdmin, RoleEasiUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Role) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Role) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Represents the type of an action that is being done to a system request
type SystemIntakeActionType string

const (
	SystemIntakeActionTypeProgressToNewStep              SystemIntakeActionType = "PROGRESS_TO_NEW_STEP"
	SystemIntakeActionTypeRequestEdits                   SystemIntakeActionType = "REQUEST_EDITS"
	SystemIntakeActionTypeExpireLcid                     SystemIntakeActionType = "EXPIRE_LCID"
	SystemIntakeActionTypeNotGovernance                  SystemIntakeActionType = "NOT_GOVERNANCE"
	SystemIntakeActionTypeCloseRequest                   SystemIntakeActionType = "CLOSE_REQUEST"
	SystemIntakeActionTypeReopenRequest                  SystemIntakeActionType = "REOPEN_REQUEST"
	SystemIntakeActionTypeUpdateLcid                     SystemIntakeActionType = "UPDATE_LCID"
	SystemIntakeActionTypeConfirmLcid                    SystemIntakeActionType = "CONFIRM_LCID"
	SystemIntakeActionTypeRetireLcid                     SystemIntakeActionType = "RETIRE_LCID"
	SystemIntakeActionTypeUnretireLcid                   SystemIntakeActionType = "UNRETIRE_LCID"
	SystemIntakeActionTypeChangeLcidRetirementDate       SystemIntakeActionType = "CHANGE_LCID_RETIREMENT_DATE"
	SystemIntakeActionTypeIssueLcid                      SystemIntakeActionType = "ISSUE_LCID"
	SystemIntakeActionTypeSubmitIntake                   SystemIntakeActionType = "SUBMIT_INTAKE"
	SystemIntakeActionTypeReject                         SystemIntakeActionType = "REJECT"
	SystemIntakeActionTypeBizCaseNeedsChanges            SystemIntakeActionType = "BIZ_CASE_NEEDS_CHANGES"
	SystemIntakeActionTypeCreateBizCase                  SystemIntakeActionType = "CREATE_BIZ_CASE"
	SystemIntakeActionTypeGUIDEReceivedClose             SystemIntakeActionType = "GUIDE_RECEIVED_CLOSE"
	SystemIntakeActionTypeExtendLcid                     SystemIntakeActionType = "EXTEND_LCID"
	SystemIntakeActionTypeNeedBizCase                    SystemIntakeActionType = "NEED_BIZ_CASE"
	SystemIntakeActionTypeNoGovernanceNeeded             SystemIntakeActionType = "NO_GOVERNANCE_NEEDED"
	SystemIntakeActionTypeNotItRequest                   SystemIntakeActionType = "NOT_IT_REQUEST"
	SystemIntakeActionTypeNotRespondingClose             SystemIntakeActionType = "NOT_RESPONDING_CLOSE"
	SystemIntakeActionTypeProvideFeedbackNeedBizCase     SystemIntakeActionType = "PROVIDE_FEEDBACK_NEED_BIZ_CASE"
	SystemIntakeActionTypeProvideGrtFeedbackBizCaseDraft SystemIntakeActionType = "PROVIDE_GRT_FEEDBACK_BIZ_CASE_DRAFT"
	SystemIntakeActionTypeProvideGrtFeedbackBizCaseFinal SystemIntakeActionType = "PROVIDE_GRT_FEEDBACK_BIZ_CASE_FINAL"
	SystemIntakeActionTypeReadyForGrb                    SystemIntakeActionType = "READY_FOR_GRB"
	SystemIntakeActionTypeReadyForGrt                    SystemIntakeActionType = "READY_FOR_GRT"
	SystemIntakeActionTypeSendEmail                      SystemIntakeActionType = "SEND_EMAIL"
	SystemIntakeActionTypeSubmitBizCase                  SystemIntakeActionType = "SUBMIT_BIZ_CASE"
	SystemIntakeActionTypeSubmitFinalBizCase             SystemIntakeActionType = "SUBMIT_FINAL_BIZ_CASE"
)

var AllSystemIntakeActionType = []SystemIntakeActionType{
	SystemIntakeActionTypeProgressToNewStep,
	SystemIntakeActionTypeRequestEdits,
	SystemIntakeActionTypeExpireLcid,
	SystemIntakeActionTypeNotGovernance,
	SystemIntakeActionTypeCloseRequest,
	SystemIntakeActionTypeReopenRequest,
	SystemIntakeActionTypeUpdateLcid,
	SystemIntakeActionTypeConfirmLcid,
	SystemIntakeActionTypeRetireLcid,
	SystemIntakeActionTypeUnretireLcid,
	SystemIntakeActionTypeChangeLcidRetirementDate,
	SystemIntakeActionTypeIssueLcid,
	SystemIntakeActionTypeSubmitIntake,
	SystemIntakeActionTypeReject,
	SystemIntakeActionTypeBizCaseNeedsChanges,
	SystemIntakeActionTypeCreateBizCase,
	SystemIntakeActionTypeGUIDEReceivedClose,
	SystemIntakeActionTypeExtendLcid,
	SystemIntakeActionTypeNeedBizCase,
	SystemIntakeActionTypeNoGovernanceNeeded,
	SystemIntakeActionTypeNotItRequest,
	SystemIntakeActionTypeNotRespondingClose,
	SystemIntakeActionTypeProvideFeedbackNeedBizCase,
	SystemIntakeActionTypeProvideGrtFeedbackBizCaseDraft,
	SystemIntakeActionTypeProvideGrtFeedbackBizCaseFinal,
	SystemIntakeActionTypeReadyForGrb,
	SystemIntakeActionTypeReadyForGrt,
	SystemIntakeActionTypeSendEmail,
	SystemIntakeActionTypeSubmitBizCase,
	SystemIntakeActionTypeSubmitFinalBizCase,
}

func (e SystemIntakeActionType) IsValid() bool {
	switch e {
	case SystemIntakeActionTypeProgressToNewStep, SystemIntakeActionTypeRequestEdits, SystemIntakeActionTypeExpireLcid, SystemIntakeActionTypeNotGovernance, SystemIntakeActionTypeCloseRequest, SystemIntakeActionTypeReopenRequest, SystemIntakeActionTypeUpdateLcid, SystemIntakeActionTypeConfirmLcid, SystemIntakeActionTypeRetireLcid, SystemIntakeActionTypeUnretireLcid, SystemIntakeActionTypeChangeLcidRetirementDate, SystemIntakeActionTypeIssueLcid, SystemIntakeActionTypeSubmitIntake, SystemIntakeActionTypeReject, SystemIntakeActionTypeBizCaseNeedsChanges, SystemIntakeActionTypeCreateBizCase, SystemIntakeActionTypeGUIDEReceivedClose, SystemIntakeActionTypeExtendLcid, SystemIntakeActionTypeNeedBizCase, SystemIntakeActionTypeNoGovernanceNeeded, SystemIntakeActionTypeNotItRequest, SystemIntakeActionTypeNotRespondingClose, SystemIntakeActionTypeProvideFeedbackNeedBizCase, SystemIntakeActionTypeProvideGrtFeedbackBizCaseDraft, SystemIntakeActionTypeProvideGrtFeedbackBizCaseFinal, SystemIntakeActionTypeReadyForGrb, SystemIntakeActionTypeReadyForGrt, SystemIntakeActionTypeSendEmail, SystemIntakeActionTypeSubmitBizCase, SystemIntakeActionTypeSubmitFinalBizCase:
		return true
	}
	return false
}

func (e SystemIntakeActionType) String() string {
	return string(e)
}

func (e *SystemIntakeActionType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SystemIntakeActionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SystemIntakeActionType", str)
	}
	return nil
}

func (e SystemIntakeActionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SystemIntakeActionType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SystemIntakeActionType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// SystemIntakeRequestEditsOptions represents the current step in the intake process
type SystemIntakeFormStep string

const (
	SystemIntakeFormStepInitialRequestForm SystemIntakeFormStep = "INITIAL_REQUEST_FORM"
	SystemIntakeFormStepDraftBusinessCase  SystemIntakeFormStep = "DRAFT_BUSINESS_CASE"
	SystemIntakeFormStepFinalBusinessCase  SystemIntakeFormStep = "FINAL_BUSINESS_CASE"
)

var AllSystemIntakeFormStep = []SystemIntakeFormStep{
	SystemIntakeFormStepInitialRequestForm,
	SystemIntakeFormStepDraftBusinessCase,
	SystemIntakeFormStepFinalBusinessCase,
}

func (e SystemIntakeFormStep) IsValid() bool {
	switch e {
	case SystemIntakeFormStepInitialRequestForm, SystemIntakeFormStepDraftBusinessCase, SystemIntakeFormStepFinalBusinessCase:
		return true
	}
	return false
}

func (e SystemIntakeFormStep) String() string {
	return string(e)
}

func (e *SystemIntakeFormStep) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SystemIntakeFormStep(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SystemIntakeFormStep", str)
	}
	return nil
}

func (e SystemIntakeFormStep) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SystemIntakeFormStep) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SystemIntakeFormStep) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type SystemIntakeGRBReviewerRole string

const (
	SystemIntakeGRBReviewerRoleCoChairCio                SystemIntakeGRBReviewerRole = "CO_CHAIR_CIO"
	SystemIntakeGRBReviewerRoleCoChairCfo                SystemIntakeGRBReviewerRole = "CO_CHAIR_CFO"
	SystemIntakeGRBReviewerRoleCoChairHca                SystemIntakeGRBReviewerRole = "CO_CHAIR_HCA"
	SystemIntakeGRBReviewerRoleAca3021Rep                SystemIntakeGRBReviewerRole = "ACA_3021_REP"
	SystemIntakeGRBReviewerRoleCciioRep                  SystemIntakeGRBReviewerRole = "CCIIO_REP"
	SystemIntakeGRBReviewerRoleProgramOperationsBdgChair SystemIntakeGRBReviewerRole = "PROGRAM_OPERATIONS_BDG_CHAIR"
	SystemIntakeGRBReviewerRoleCmcsRep                   SystemIntakeGRBReviewerRole = "CMCS_REP"
	SystemIntakeGRBReviewerRoleFedAdminBdgChair          SystemIntakeGRBReviewerRole = "FED_ADMIN_BDG_CHAIR"
	SystemIntakeGRBReviewerRoleProgramIntegrityBdgChair  SystemIntakeGRBReviewerRole = "PROGRAM_INTEGRITY_BDG_CHAIR"
	SystemIntakeGRBReviewerRoleQioRep                    SystemIntakeGRBReviewerRole = "QIO_REP"
	SystemIntakeGRBReviewerRoleSubjectMatterExpert       SystemIntakeGRBReviewerRole = "SUBJECT_MATTER_EXPERT"
	SystemIntakeGRBReviewerRoleOther                     SystemIntakeGRBReviewerRole = "OTHER"
)

var AllSystemIntakeGRBReviewerRole = []SystemIntakeGRBReviewerRole{
	SystemIntakeGRBReviewerRoleCoChairCio,
	SystemIntakeGRBReviewerRoleCoChairCfo,
	SystemIntakeGRBReviewerRoleCoChairHca,
	SystemIntakeGRBReviewerRoleAca3021Rep,
	SystemIntakeGRBReviewerRoleCciioRep,
	SystemIntakeGRBReviewerRoleProgramOperationsBdgChair,
	SystemIntakeGRBReviewerRoleCmcsRep,
	SystemIntakeGRBReviewerRoleFedAdminBdgChair,
	SystemIntakeGRBReviewerRoleProgramIntegrityBdgChair,
	SystemIntakeGRBReviewerRoleQioRep,
	SystemIntakeGRBReviewerRoleSubjectMatterExpert,
	SystemIntakeGRBReviewerRoleOther,
}

func (e SystemIntakeGRBReviewerRole) IsValid() bool {
	switch e {
	case SystemIntakeGRBReviewerRoleCoChairCio, SystemIntakeGRBReviewerRoleCoChairCfo, SystemIntakeGRBReviewerRoleCoChairHca, SystemIntakeGRBReviewerRoleAca3021Rep, SystemIntakeGRBReviewerRoleCciioRep, SystemIntakeGRBReviewerRoleProgramOperationsBdgChair, SystemIntakeGRBReviewerRoleCmcsRep, SystemIntakeGRBReviewerRoleFedAdminBdgChair, SystemIntakeGRBReviewerRoleProgramIntegrityBdgChair, SystemIntakeGRBReviewerRoleQioRep, SystemIntakeGRBReviewerRoleSubjectMatterExpert, SystemIntakeGRBReviewerRoleOther:
		return true
	}
	return false
}

func (e SystemIntakeGRBReviewerRole) String() string {
	return string(e)
}

func (e *SystemIntakeGRBReviewerRole) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SystemIntakeGRBReviewerRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SystemIntakeGRBReviewerRole", str)
	}
	return nil
}

func (e SystemIntakeGRBReviewerRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SystemIntakeGRBReviewerRole) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SystemIntakeGRBReviewerRole) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type SystemIntakeGRBReviewerVotingRole string

const (
	SystemIntakeGRBReviewerVotingRoleVoting    SystemIntakeGRBReviewerVotingRole = "VOTING"
	SystemIntakeGRBReviewerVotingRoleAlternate SystemIntakeGRBReviewerVotingRole = "ALTERNATE"
	SystemIntakeGRBReviewerVotingRoleNonVoting SystemIntakeGRBReviewerVotingRole = "NON_VOTING"
)

var AllSystemIntakeGRBReviewerVotingRole = []SystemIntakeGRBReviewerVotingRole{
	SystemIntakeGRBReviewerVotingRoleVoting,
	SystemIntakeGRBReviewerVotingRoleAlternate,
	SystemIntakeGRBReviewerVotingRoleNonVoting,
}

func (e SystemIntakeGRBReviewerVotingRole) IsValid() bool {
	switch e {
	case SystemIntakeGRBReviewerVotingRoleVoting, SystemIntakeGRBReviewerVotingRoleAlternate, SystemIntakeGRBReviewerVotingRoleNonVoting:
		return true
	}
	return false
}

func (e SystemIntakeGRBReviewerVotingRole) String() string {
	return string(e)
}

func (e *SystemIntakeGRBReviewerVotingRole) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SystemIntakeGRBReviewerVotingRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SystemIntakeGRBReviewerVotingRole", str)
	}
	return nil
}

func (e SystemIntakeGRBReviewerVotingRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SystemIntakeGRBReviewerVotingRole) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SystemIntakeGRBReviewerVotingRole) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// SystemIntakeSoftwareAcquisitionMethods represents the different methods requesters can select in a system intake
type SystemIntakeSoftwareAcquisitionMethods string

const (
	SystemIntakeSoftwareAcquisitionMethodsContractorFurnished SystemIntakeSoftwareAcquisitionMethods = "CONTRACTOR_FURNISHED"
	SystemIntakeSoftwareAcquisitionMethodsFedFurnished        SystemIntakeSoftwareAcquisitionMethods = "FED_FURNISHED"
	SystemIntakeSoftwareAcquisitionMethodsElaOrInternal       SystemIntakeSoftwareAcquisitionMethods = "ELA_OR_INTERNAL"
	SystemIntakeSoftwareAcquisitionMethodsNotYetDetermined    SystemIntakeSoftwareAcquisitionMethods = "NOT_YET_DETERMINED"
	SystemIntakeSoftwareAcquisitionMethodsOther               SystemIntakeSoftwareAcquisitionMethods = "OTHER"
)

var AllSystemIntakeSoftwareAcquisitionMethods = []SystemIntakeSoftwareAcquisitionMethods{
	SystemIntakeSoftwareAcquisitionMethodsContractorFurnished,
	SystemIntakeSoftwareAcquisitionMethodsFedFurnished,
	SystemIntakeSoftwareAcquisitionMethodsElaOrInternal,
	SystemIntakeSoftwareAcquisitionMethodsNotYetDetermined,
	SystemIntakeSoftwareAcquisitionMethodsOther,
}

func (e SystemIntakeSoftwareAcquisitionMethods) IsValid() bool {
	switch e {
	case SystemIntakeSoftwareAcquisitionMethodsContractorFurnished, SystemIntakeSoftwareAcquisitionMethodsFedFurnished, SystemIntakeSoftwareAcquisitionMethodsElaOrInternal, SystemIntakeSoftwareAcquisitionMethodsNotYetDetermined, SystemIntakeSoftwareAcquisitionMethodsOther:
		return true
	}
	return false
}

func (e SystemIntakeSoftwareAcquisitionMethods) String() string {
	return string(e)
}

func (e *SystemIntakeSoftwareAcquisitionMethods) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SystemIntakeSoftwareAcquisitionMethods(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SystemIntakeSoftwareAcquisitionMethods", str)
	}
	return nil
}

func (e SystemIntakeSoftwareAcquisitionMethods) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SystemIntakeSoftwareAcquisitionMethods) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SystemIntakeSoftwareAcquisitionMethods) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Steps in the system intake process that a Progress to New Step action can progress to
type SystemIntakeStepToProgressTo string

const (
	SystemIntakeStepToProgressToDraftBusinessCase SystemIntakeStepToProgressTo = "DRAFT_BUSINESS_CASE"
	SystemIntakeStepToProgressToGrtMeeting        SystemIntakeStepToProgressTo = "GRT_MEETING"
	SystemIntakeStepToProgressToGrbMeeting        SystemIntakeStepToProgressTo = "GRB_MEETING"
	SystemIntakeStepToProgressToFinalBusinessCase SystemIntakeStepToProgressTo = "FINAL_BUSINESS_CASE"
)

var AllSystemIntakeStepToProgressTo = []SystemIntakeStepToProgressTo{
	SystemIntakeStepToProgressToDraftBusinessCase,
	SystemIntakeStepToProgressToGrtMeeting,
	SystemIntakeStepToProgressToGrbMeeting,
	SystemIntakeStepToProgressToFinalBusinessCase,
}

func (e SystemIntakeStepToProgressTo) IsValid() bool {
	switch e {
	case SystemIntakeStepToProgressToDraftBusinessCase, SystemIntakeStepToProgressToGrtMeeting, SystemIntakeStepToProgressToGrbMeeting, SystemIntakeStepToProgressToFinalBusinessCase:
		return true
	}
	return false
}

func (e SystemIntakeStepToProgressTo) String() string {
	return string(e)
}

func (e *SystemIntakeStepToProgressTo) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SystemIntakeStepToProgressTo(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SystemIntakeStepToProgressTo", str)
	}
	return nil
}

func (e SystemIntakeStepToProgressTo) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SystemIntakeStepToProgressTo) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SystemIntakeStepToProgressTo) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type TagType string

const (
	TagTypeUserAccount       TagType = "USER_ACCOUNT"
	TagTypeGroupItGov        TagType = "GROUP_IT_GOV"
	TagTypeGroupGrbReviewers TagType = "GROUP_GRB_REVIEWERS"
)

var AllTagType = []TagType{
	TagTypeUserAccount,
	TagTypeGroupItGov,
	TagTypeGroupGrbReviewers,
}

func (e TagType) IsValid() bool {
	switch e {
	case TagTypeUserAccount, TagTypeGroupItGov, TagTypeGroupGrbReviewers:
		return true
	}
	return false
}

func (e TagType) String() string {
	return string(e)
}

func (e *TagType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TagType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TagType", str)
	}
	return nil
}

func (e TagType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *TagType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e TagType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
