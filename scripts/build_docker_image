#!/usr/bin/env bash
#
# build `easi` in docker and push to ECR
#

runtimedir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# shellcheck source=scripts/buildlib.sh
source "$runtimedir/buildlib.sh"

# log in to ECR
if bash +x -o nounset -c "$(aws ecr get-login --no-include-email --region "us-west-2" --registry-ids "${AWS_ACCOUNT_ID}")" ; then
  # build & tag the app image, then push to ECR
  if (set -x ; docker build --quiet --build-arg ARG_APPLICATION_VERSION="$APPLICATION_VERSION" --build-arg ARG_APPLICATION_DATETIME="$APPLICATION_DATETIME" --build-arg ARG_APPLICATION_TS="$APPLICATION_TS" --no-cache --tag "easi" "$builddir") ; then
    _tag_and_push "easi:latest" "${ecr_backend}" "${APPLICATION_VERSION}" || exit
    _tag_and_push "easi:latest" "${ecr_backend}" "latest"  || exit
    _tag_and_push "easi:latest" "${ecr_backend}" "dev" || exit

    if [[ "$CIRCLE_BRANCH" = "master" ]]; then
      _tag_and_push "easi:latest" "${ecr_backend}" "impl" || exit
    fi
  else
    exit
  fi

  # build & tag the db migrations image, then push to ECR
  if (set -x ; docker build --quiet --no-cache --tag "easi-db-migrate" "$builddir" --file Dockerfile.db_migrations) ; then
    _tag_and_push "easi-db-migrate:latest" "${ecr_db_migrate}" "${APPLICATION_VERSION}" || exit
    _tag_and_push "easi-db-migrate:latest" "${ecr_db_migrate}" "latest" || exit
    _tag_and_push "easi-db-migrate:latest" "${ecr_db_migrate}" "dev" || exit

    if [[ "$CIRCLE_BRANCH" = "master" ]]; then
      _tag_and_push "easi-db-migrate:latest" "${ecr_db_migrate}" "impl" || exit
    fi
  else
    exit
  fi
else
  status=$?
  echo "FATAL: ECR login failed" 1>&2
  exit "$status"
fi
