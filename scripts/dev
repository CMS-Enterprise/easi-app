#! /usr/bin/ruby

require "rake"
require "irb"        # debugging
require "io/console" # for IO#getch

# ExtraArguments is a hack that alters how the command line arguments are parsed.
#
# Rake has a few ways to handle arguments, but the simplest one uses bracket characters
# which are problematic in the default zsh config and the others require using flags.
#
# With this code, a task can specify :consume_args as a prerequisite and any options after
# the task name will be pulled into that task's args. You can only specify a single task
# to run in this case, but that's the most common usage anyhow.
module ExtraArguments
  def execute(args)
    if prereqs.include? "consume_args"
      new_args = Rake::TaskArguments.new(args.names, args.to_a.concat($extra_args || []))
      super new_args
    else
      super
    end
  end
end

class Rake::Task
  prepend ExtraArguments
end

@needed = []
def needs(executable, install_with:nil)
  @needed << [executable, install_with]
end

needs "air", install_with: "go get -u github.com/cosmtrek/air"
needs "yarn"
needs "psql", install_with: "brew install postgresql"
needs "docker-compose"
needs "go"
needs "gotest", install_with: "go get -u github.com/rakyll/gotest"
needs "goimports", install_with: "go get -u golang.org/x/tools/cmd/goimports"
needs "ulimit"

Rake.application.init("scripts/dev")

def ask_to_install(executable, install_with)
  puts "Do you want to install it? (Y/n)"
  response = STDIN.getch
  if ["y", "Y", "\r"].include?(response)
    sh install_with
    check_bin(executable)
    # TODO let the user know that their path is not configured correctly
  end
end

def check_bin(executable, install_with: nil)
  if `which #{executable}` == ""
    puts "#{executable} not found on path"
    if install_with
      ask_to_install(executable, install_with)
    end
  end
end

desc "Check to see if the app's prerequisites are installed"
task :prereqs do
  @needed.each do |executable, install_with|
    check_bin(executable, install_with: install_with)
  end
end

task :consume_args do |t, args|
  $extra_args = Rake.application.top_level_tasks.slice!(1..-1)
end


### Tasks

desc "Starts all services in the project"
task :up do
  sh "docker-compose up -d"

  # Avoid open file limits
  # sh "ulimit -S -n 2048"
end

desc "Stops all services in the project"
task :down do
  sh "docker-compose down"
end

desc "Resets application to an empty state"
task :reset => :up do
  # close any hanging connections to the database
  Rake::Task["db:drop_connections"].invoke

  # drop and recreate the database
  Rake::Task["db:recreate"].invoke

  # run migrations
  Rake::Task["db:migrate"].invoke

  # load development data
  Rake::Task["db:seed"].invoke
end

namespace :db do
  desc "Runs database migrations and wait for them to complete"
  task :migrate do
    sh "docker-compose start db_migrate"
    loop do
      sleep 0.5
      status = `docker-compose ps | grep easi-app_db_migrate_1`
      match = /Exit (\d+)/.match(status)
      if match
        unless match[1] == "0"
          puts "Migration failed, check the logs!"
          exit(1)
        end
        break
      end
    end
  end

  desc "Destroys the database container and recreates it"
  task :recreate do
    sh "docker-compose kill db && docker-compose rm -fv db && docker-compose up -d db"
  end

  desc "Load development dataset"
  task :seed do
    sh "go run cmd/devdata/main.go"
  end

  task :drop_connections do
    `echo "select pg_terminate_backend(pg_stat_activity.pid) from pg_stat_activity where datname='postgres' AND state='idle'" | psql`
  end
end


namespace :gql do
  task :lint_schema do
    sh "yarn run graphql-schema-linter pkg/graph/schema.graphql"
  end

  namespace :generate do
    task :yarn do
      ENV["FORCE_COLOR"] = "true"

      sh "yarn generate"
    end

    task :go do
      sh "go generate ./..." do |ok|
        sh "goimports -w -local github.com/cmsgov/easi-app pkg/graph/schema.resolvers.go" if ok
      end
    end
  end

  # Runs prereqs in parallel
  multitask generate: ["gql:generate:yarn", "gql:generate:go"]
end

desc "Generate code from GraphQL schema"
task gql: ["gql:lint_schema", "gql:generate"]

desc "Run all tests in parallel"
multitask test: ["test:go", "test:js"]

namespace :test do
  desc "Runs Go tests"
  task :go do
    sh "gotest -short -count=1 ./..."
  end
  namespace :go do
    desc "Run targeted Go tests (pass packages as additional options)"
    task :only => :consume_args do |t, args|
      sh "gotest", "-short", "-count=1", *args
    end
  end

  desc "Run JS  tests (pass path to scope to that location)"
  task :js => :consume_args do |t, args|
    sh "yarn", "run", "craco", "test", "--watchAll=false", *args
  end
  namespace :js do
    desc "Run JS tests with a matching name (pass needle as additional option)"
    task :named => :consume_args do |t, args|
      sh "yarn", "run", "craco", "test", "--watchAll=false", "-t", *args
    end
  end
end

task :default do
  puts "Please provide a task to run:\n\n"
  Rake::Task["list"].invoke
  exit(1)
end

desc "List available tasks"
task :list do
  puts `scripts/dev -T`
end

desc "Run all linters and checks managed by pre-commit"
task :lint do
  sh "pre-commit run -a"
end

begin
  Rake.application.top_level
rescue RuntimeError => e
  message = e.message
  if /know how to build task/ =~ message
    message.sub!("rake --tasks", "scripts/dev list")
  end
  puts e.message
  exit 1
end