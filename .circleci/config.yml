---
version: 2

references:
  circleci_docker_primary: &circleci_docker_primary trussworks/circleci-docker-primary:tf12-5ee2cb35bc081dbc91da46afc3904ef0e1c111fb
  postgres: &postgres postgres:11.6
  db_migrate: &db_migrate ${AWS_ACCOUNT_ID}.dkr.ecr.us-west-2.amazonaws.com/easi-db-migrate:latest
jobs:
  build_db_migrate_image:
    docker:
      - image: *circleci_docker_primary
        environment:
          AWS_DEFAULT_REGION: us-west-2
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build the flyway migrations for testing
          command: |
            ./scripts/build_db_image "Dockerfile.db_migrations" "easi-db-migrate" "latest"

  test:
    docker:
      - image: *circleci_docker_primary
        environment:
          APP_ENV: test
          PGHOST: localhost
          PGPORT: 5432
          PGDATABASE: postgres
          PGUSER: postgres
          PGPASS: easirox
          PGSSLMODE: disable
      - image: *postgres
        environment:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: easirox
          POSTGRES_USER: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
          TZ: UTC
          PGTZ: UTC
      - image: *db_migrate
        environment:
          FLYWAY_USER: postgres
          FLYWAY_PASSWORD: easirox
          FLYWAY_URL: jdbc:postgresql://localhost/postgres
    steps:
      - checkout
      - run:
          name: Run easi app tests
          command: |
            ./scripts/build_app
            ./scripts/testsuite
  lint:
    docker:
      - image: *circleci_docker_primary
    steps:
      - checkout
      - restore_cache:
          keys:
            - pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
      - restore_cache:
          keys:
            - yarn-deps-cache-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies for pre-commit in yarn (temporary?)
          command: yarn install
      - run:
          name: Run pre-commit checks
          command: pre-commit run --all-files --show-diff-on-failure
      - run:
          name: Run Frontend Tests
          command: yarn test
      - save_cache:
          key: pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
          paths:
            - ~/.cache/pre-commit
      - save_cache:
          key: yarn-deps-cache-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

  build_db_clean_image:
    docker:
      - image: *circleci_docker_primary
        environment:
          AWS_DEFAULT_REGION: us-west-2
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build the db cleaner image and push to ECR
          command: |
            ./scripts/build_db_image "Dockerfile.db_clean" "easi-db-clean" "latest"

  build_tag_push:
    docker:
      - image: *circleci_docker_primary
        environment:
          AWS_DEFAULT_REGION: us-west-2
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build the app and push to ECR
          command: |
            ./scripts/build_docker_image
      - run:
          name: Check for vulnerability scan findings
          command: |
            ./scripts/check_ecr_findings "easi-backend" "$CIRCLE_SHA1"

  deploy_dev:
    docker:
      - image: *circleci_docker_primary
        environment:
          AWS_DEFAULT_REGION: us-west-2
          APP_ENV: dev
    steps:
      - checkout
      - run:
          name: Setup custom environment variables
          command: |
            temp_role=$(aws sts assume-role \
                    --role-arn arn:aws:iam::$AWS_ACCOUNT_ID_DEV:role/circleci \
                    --role-session-name circleci)
            echo "export AWS_ACCESS_KEY_ID=$(jq --raw-output .Credentials.AccessKeyId <<< "$temp_role")" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$(jq --raw-output .Credentials.SecretAccessKey <<< "$temp_role")" >> $BASH_ENV
            echo "export AWS_SESSION_TOKEN=$(jq --raw-output .Credentials.SessionToken <<< "$temp_role")" >> $BASH_ENV
      - run:
          name: Nuke the database
          command: |
            ./scripts/db_lambda_invoke "easi-app-db-clean"
      - run:
          name: Run migrations
          command: |
            ./scripts/deploy_service "easi-app-db-migrate" "easi-db-migrate"
      - run:
          name: Deploy ECS service
          command: |
            ./scripts/deploy_service "easi-app" "easi-backend"
            ./scripts/healthcheck
      - run:
          name: Build static assets and release to S3
          command: |
            ./scripts/release_static

  deploy_impl:
    docker:
      - image: *circleci_docker_primary
        environment:
          AWS_DEFAULT_REGION: us-west-2
          APP_ENV: impl
    steps:
      - checkout
      - run:
          name: Setup custom environment variables
          command: |
            temp_role=$(aws sts assume-role \
                    --role-arn arn:aws:iam::$AWS_ACCOUNT_ID_IMPL:role/circleci \
                    --role-session-name circleci)
            echo "export AWS_ACCESS_KEY_ID=$(jq --raw-output .Credentials.AccessKeyId <<< "$temp_role")" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$(jq --raw-output .Credentials.SecretAccessKey <<< "$temp_role")" >> $BASH_ENV
            echo "export AWS_SESSION_TOKEN=$(jq --raw-output .Credentials.SessionToken <<< "$temp_role")" >> $BASH_ENV
      - run:
          name: Backup the database
          command: |
            ./scripts/rds-snapshot-app-db
      - run:
          name: Run migrations
          command: |
            ./scripts/deploy_service "easi-app-db-migrate" "easi-db-migrate"
      - run:
          name: Deploy ECS service
          command: |
            ./scripts/deploy_service "easi-app" "easi-backend"
            ./scripts/healthcheck
      - run:
          name: Build static assets and release to S3
          command: |
            ./scripts/release_static

workflows:
  version: 2
  compile:
    jobs:
      - build_db_migrate_image
      - lint
      - test:
          requires:
            - build_db_migrate_image
      - build_tag_push:
          requires:
            - lint
            - test
      - deploy_dev:
          requires:
            - build_tag_push
      - deploy_impl:
          filters:
            branches:
              only:
                - master
          requires:
            - deploy_dev
  weekly:
    triggers:
      - schedule:
          cron: "0 2 * * 6"
          filters:
            branches:
              only:
                - master
    jobs:
      - build_db_clean_image
