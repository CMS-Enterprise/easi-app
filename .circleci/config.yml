---
version: 2

references:
  circleci_docker_primary: &circleci_docker_primary ${AWS_ACCOUNT_ID}.dkr.ecr.us-west-2.amazonaws.com/easi-circleci:easi-app-41d6969ae6511fc7076af6646be6f44b4a9c599b
  postgres: &postgres postgres:11.10
  db_migrate: &db_migrate ${AWS_ACCOUNT_ID}.dkr.ecr.us-west-2.amazonaws.com/easi-db-migrate:${CIRCLE_SHA1}
jobs:
  restart_impl_ecs_app_service:
    docker:
      - image: *circleci_docker_primary
        environment:
          AWS_DEFAULT_REGION: us-west-2
          APP_ENV: impl
    steps:
      - checkout
      - run:
          name: Setup custom environment variables
          command: |
            temp_role=$(aws sts assume-role \
                    --role-arn arn:aws:iam::$AWS_ACCOUNT_ID_IMPL:role/circleci \
                    --role-session-name circleci)
            echo "export AWS_ACCESS_KEY_ID=$(jq --raw-output .Credentials.AccessKeyId <<< "$temp_role")" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$(jq --raw-output .Credentials.SecretAccessKey <<< "$temp_role")" >> $BASH_ENV
            echo "export AWS_SESSION_TOKEN=$(jq --raw-output .Credentials.SessionToken <<< "$temp_role")" >> $BASH_ENV
      - run:
          name: Restart ECS app service
          command: |
            ./scripts/deploy_service "easi-app" "impl-ecs-manager-docker" "4" ""
      - run:
          name: Announce failure
          command: |
            ./scripts/circleci-announce-broken-branch
          when: on_fail

  restart_prod_ecs_app_service:
    docker:
      - image: *circleci_docker_primary
        environment:
          AWS_DEFAULT_REGION: us-west-2
          APP_ENV: prod
    steps:
      - checkout
      - run:
          name: Setup custom environment variables
          command: |
            temp_role=$(aws sts assume-role \
                    --role-arn arn:aws:iam::$AWS_ACCOUNT_ID_PROD:role/circleci \
                    --role-session-name circleci)
            echo "export AWS_ACCESS_KEY_ID=$(jq --raw-output .Credentials.AccessKeyId <<< "$temp_role")" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$(jq --raw-output .Credentials.SecretAccessKey <<< "$temp_role")" >> $BASH_ENV
            echo "export AWS_SESSION_TOKEN=$(jq --raw-output .Credentials.SessionToken <<< "$temp_role")" >> $BASH_ENV
      - run:
          name: Restart ECS app service
          command: |
            ./scripts/deploy_service "easi-app" "prod-ecs-manager-docker" "3" ""
      - run:
          name: Announce failure
          command: |
            ./scripts/circleci-announce-broken-branch
          when: on_fail

  rescan_deployed_image:
    docker:
      - image: *circleci_docker_primary
        environment:
          AWS_DEFAULT_REGION: us-west-2
    steps:
      - checkout
      - run:
          name: Check deployed image for vulnerability findings - impl
          command: |
            APP_ENV=impl ./scripts/check_deployed_image_findings "easi-backend" "5"
      - run:
          name: Check deployed image for vulnerability findings - prod
          command: |
            APP_ENV=prod ./scripts/check_deployed_image_findings "easi-backend" "5"
      - run:
          name: Announce failure
          command: |
            ./scripts/circleci-announce-broken-branch
          when: on_fail

  build_db_migrate_image:
    docker:
      - image: *circleci_docker_primary
        environment:
          AWS_DEFAULT_REGION: us-west-2
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Docker Hub login
          command: |
            ./scripts/dockerhub-login
      - run:
          name: Build the flyway migrations for testing
          command: |
            ./scripts/build_db_image "Dockerfile.db_migrations" "easi-db-migrate"
      - run:
          name: Announce failure
          command: |
            ./scripts/circleci-announce-broken-branch
          when: on_fail

  test:
    docker:
      - image: *circleci_docker_primary
        environment:
          APP_ENV: test
          AWS_REGION: us-west-2 # easi app tests expect AWS_REGION instead of AWS_DEFAULT_REGION
          AWS_SES_SOURCE: '"EASi Test" <no-reply-test@info.easi.cms.gov>'
          AWS_S3_FILE_UPLOAD_BUCKET: easi-app-file-uploads
          CLIENT_PROTOCOL: http
          CLIENT_PORT: 3000
          CLIENT_HOSTNAME: localhost:3000
          GRT_EMAIL: success@simulator.amazonses.com
          ACCESSIBILITY_TEAM_EMAIL: success@simulator.amazonses.com
          PGHOST: localhost
          PGPORT: 5432
          PGDATABASE: postgres
          PGUSER: postgres
          PGPASS: easirox
          PGSSLMODE: disable
          FLAG_SOURCE: LOCAL
      - image: *postgres
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: easirox
          POSTGRES_USER: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
      - image: *db_migrate
        environment:
          FLYWAY_USER: postgres
          FLYWAY_PASSWORD: easirox
          FLYWAY_URL: jdbc:postgresql://localhost/postgres
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-go-mod-sources-{{ checksum "go.sum" }}
      - run:
          name: Run easi app tests
          command: |
            ./scripts/build_app
            ./scripts/testsuite
      - store_artifacts:
          path: results
          destination: results
      - save_cache:
          key: v2-go-mod-sources-{{ checksum "go.sum" }}
          paths:
            - ~/go/pkg/mod
      - run:
          name: Announce failure
          command: |
            ./scripts/circleci-announce-broken-branch
          when: on_fail

  integration_tests:
    docker:
      - image: *circleci_docker_primary
        environment:
          APP_ENV: test
          AWS_DEFAULT_REGION: us-west-2
          FLAG_SOURCE: LOCAL
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Docker Hub login
          command: |
            ./scripts/dockerhub-login
      - attach_workspace:
          at: /tmp/builds
      - run:
          name: Run Cypress integration tests
          command: |
            ./scripts/run-cypress-test-docker
      - store_artifacts:
          path: cypress/videos
          destination: videos
      - store_artifacts:
          path: cypress/screenshots
          destination: screenshots
      - run:
          name: Announce failure
          command: |
            ./scripts/circleci-announce-broken-branch
          when: on_fail

  pre_deps:
    docker:
      - image: *circleci_docker_primary
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-deps-cache-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v2-node-modules-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v2-go-mod-sources-{{ checksum "go.sum" }}
      - run:
          name: Install yarn dependencies
          command: yarn install
      - run:
          name: Install go modules
          command: go mod download
      - save_cache:
          key: yarn-deps-cache-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - save_cache:
          key: v2-node-modules-{{ checksum "yarn.lock" }}
          paths:
            - ~/project/node_modules
      - save_cache:
          key: v2-go-mod-sources-{{ checksum "go.sum" }}
          paths:
            - ~/go/pkg/mod
      - run:
          name: Announce failure
          command: |
            ./scripts/circleci-announce-broken-branch
          when: on_fail

  lint:
    docker:
      - image: *circleci_docker_primary
    steps:
      - checkout
      - restore_cache:
          keys:
            - pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
      - restore_cache:
          keys:
            - yarn-deps-cache-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v2-node-modules-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v2-go-mod-sources-{{ checksum "go.sum" }}
      - run:
          name: Run pre-commit checks
          command: pre-commit run --all-files --show-diff-on-failure
      - save_cache:
          key: pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
          paths:
            - ~/.cache/pre-commit
      - save_cache:
          key: yarn-deps-cache-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - save_cache:
          key: v2-node-modules-{{ checksum "yarn.lock" }}
          paths:
            - ~/project/node_modules
      - save_cache:
          key: v2-go-mod-sources-{{ checksum "go.sum" }}
          paths:
            - ~/go/pkg/mod
      - run:
          name: Announce failure
          command: |
            ./scripts/circleci-announce-broken-branch
          when: on_fail

  client_test:
    docker:
      - image: *circleci_docker_primary
        environment:
          # Use API address needed for integration_tests so the frontend build
          # can be reused in that job
          REACT_APP_API_ADDRESS: http://easi:8080/api/v1
          REACT_APP_GRAPHQL_ADDRESS: http://easi:8080/api/graph/query
          REACT_APP_APP_ENV: test
          REACT_APP_OKTA_CLIENT_ID: 0oa2e913coDQeG19S297
          REACT_APP_OKTA_DOMAIN: https://test.idp.idm.cms.gov
          REACT_APP_OKTA_SERVER_ID: aus2e96etlbFPnBHt297
          REACT_APP_OKTA_ISSUER: https://test.idp.idm.cms.gov/oauth2/aus2e96etlbFPnBHt297
          REACT_APP_OKTA_REDIRECT_URI: http://localhost:3000/implicit/callback
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-deps-cache-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v2-node-modules-{{ checksum "yarn.lock" }}
      - run:
          name: Run Frontend Tests
          command: yarn test:coverage
      - run:
          name: Build Frontend Code
          command: yarn run build
      - run:
          name: Build Storybook
          command: yarn run build-storybook
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - build
            - storybook-static
      - save_cache:
          key: yarn-deps-cache-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - save_cache:
          key: v2-node-modules-{{ checksum "yarn.lock" }}
          paths:
            - ~/project/node_modules
      - run:
          name: Announce failure
          command: |
            ./scripts/circleci-announce-broken-branch
          when: on_fail

  build_db_clean_image:
    docker:
      - image: *circleci_docker_primary
        environment:
          AWS_DEFAULT_REGION: us-west-2
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Docker Hub login
          command: |
            ./scripts/dockerhub-login
      - run:
          name: Build the db cleaner image and push to ECR
          command: |
            ./scripts/build_db_image "Dockerfile.db_clean" "easi-db-clean" "latest"
      - run:
          name: Announce failure
          command: |
            ./scripts/circleci-announce-broken-branch
          when: on_fail

  build_tag_push:
    docker:
      - image: *circleci_docker_primary
        environment:
          AWS_DEFAULT_REGION: us-west-2
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Docker Hub login
          command: |
            ./scripts/dockerhub-login
      - run:
          name: Build the app and push to ECR
          command: |
            ./scripts/build_docker_image
      - run:
          name: Check for vulnerability scan findings
          command: |
            ./scripts/check_ecr_findings "easi-backend" "$CIRCLE_SHA1" "5"
      - run:
          name: Announce failure
          command: |
            ./scripts/circleci-announce-broken-branch
          when: on_fail

  deploy_dev:
    docker:
      - image: *circleci_docker_primary
        environment:
          AWS_DEFAULT_REGION: us-west-2
          APP_ENV: dev
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-deps-cache-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v2-node-modules-{{ checksum "yarn.lock" }}
      - run:
          name: Setup custom environment variables
          command: |
            temp_role=$(aws sts assume-role \
                    --role-arn arn:aws:iam::$AWS_ACCOUNT_ID_DEV:role/circleci \
                    --role-session-name circleci)
            echo "export AWS_ACCESS_KEY_ID=$(jq --raw-output .Credentials.AccessKeyId <<< "$temp_role")" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$(jq --raw-output .Credentials.SecretAccessKey <<< "$temp_role")" >> $BASH_ENV
            echo "export AWS_SESSION_TOKEN=$(jq --raw-output .Credentials.SessionToken <<< "$temp_role")" >> $BASH_ENV
      - run:
          name: Nuke the database
          command: |
            ./scripts/db_lambda_invoke "easi-app-db-clean-tmp" "2" "easi-app-db-clean"
      - run:
          name: Run migrations
          command: |
            ./scripts/deploy_service "easi-app-db-migrate" "dev-ecs-manager-docker" "5" "easi-db-migrate"
            ./scripts/db_lambda_invoke "dev-ecs-manager-docker" "5" "easi-app-db-migrate"
      - run:
          name: Deploy ECS service
          command: |
            ./scripts/deploy_service "easi-app" "dev-ecs-manager-docker" "5" "easi-backend"
            ./scripts/healthcheck
      - run:
          name: Build static assets and release to S3
          command: |
            ./scripts/release_static
      - save_cache:
          key: yarn-deps-cache-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - save_cache:
          key: v2-node-modules-{{ checksum "yarn.lock" }}
          paths:
            - ~/project/node_modules
      - run:
          name: Announce failure
          command: |
            ./scripts/circleci-announce-broken-branch
          when: on_fail

  deploy_impl:
    docker:
      - image: *circleci_docker_primary
        environment:
          AWS_DEFAULT_REGION: us-west-2
          APP_ENV: impl
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-deps-cache-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v2-node-modules-{{ checksum "yarn.lock" }}
      - run:
          name: Setup custom environment variables
          command: |
            temp_role=$(aws sts assume-role \
                    --role-arn arn:aws:iam::$AWS_ACCOUNT_ID_IMPL:role/circleci \
                    --role-session-name circleci)
            echo "export AWS_ACCESS_KEY_ID=$(jq --raw-output .Credentials.AccessKeyId <<< "$temp_role")" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$(jq --raw-output .Credentials.SecretAccessKey <<< "$temp_role")" >> $BASH_ENV
            echo "export AWS_SESSION_TOKEN=$(jq --raw-output .Credentials.SessionToken <<< "$temp_role")" >> $BASH_ENV
      - run:
          name: Backup the database
          command: |
            ./scripts/rds-snapshot-app-db
      - run:
          name: Run migrations
          command: |
            ./scripts/deploy_service "easi-app-db-migrate" "impl-ecs-manager-docker" "4" "easi-db-migrate"
            ./scripts/db_lambda_invoke "impl-ecs-manager-docker" "4" "easi-app-db-migrate"
      - run:
          name: Deploy ECS service
          command: |
            ./scripts/deploy_service "easi-app" "impl-ecs-manager-docker" "4" "easi-backend"
            ./scripts/healthcheck
      - run:
          name: Build static assets and release to S3
          command: |
            ./scripts/release_static
      - save_cache:
          key: yarn-deps-cache-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - save_cache:
          key: v2-node-modules-{{ checksum "yarn.lock" }}
          paths:
            - ~/project/node_modules
      - run:
          name: Announce failure
          command: |
            ./scripts/circleci-announce-broken-branch
          when: on_fail

  deploy_prod:
    docker:
      - image: *circleci_docker_primary
        environment:
          AWS_DEFAULT_REGION: us-west-2
          APP_ENV: prod
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-deps-cache-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v2-node-modules-{{ checksum "yarn.lock" }}
      - run:
          name: Setup custom environment variables
          command: |
            temp_role=$(aws sts assume-role \
                    --role-arn arn:aws:iam::$AWS_ACCOUNT_ID_PROD:role/circleci \
                    --role-session-name circleci)
            echo "export AWS_ACCESS_KEY_ID=$(jq --raw-output .Credentials.AccessKeyId <<< "$temp_role")" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$(jq --raw-output .Credentials.SecretAccessKey <<< "$temp_role")" >> $BASH_ENV
            echo "export AWS_SESSION_TOKEN=$(jq --raw-output .Credentials.SessionToken <<< "$temp_role")" >> $BASH_ENV
      - run:
          name: Backup the database
          command: |
            ./scripts/rds-snapshot-app-db
      - run:
          name: Run migrations
          command: |
            ./scripts/deploy_service "easi-app-db-migrate" "prod-ecs-manager-docker" "3" "easi-db-migrate"
            ./scripts/db_lambda_invoke "prod-ecs-manager-docker" "3" "easi-app-db-migrate"
      - run:
          name: Deploy ECS service
          command: |
            ./scripts/deploy_service "easi-app" "prod-ecs-manager-docker" "3" "easi-backend"
            ./scripts/healthcheck
      - run:
          name: Build static assets and release to S3
          command: |
            ./scripts/release_static
      - save_cache:
          key: yarn-deps-cache-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - save_cache:
          key: v2-node-modules-{{ checksum "yarn.lock" }}
          paths:
            - ~/project/node_modules
      - run:
          name: Announce failure
          command: |
            ./scripts/circleci-announce-broken-branch
          when: on_fail

  deploy_storybook_dev:
    docker:
      - image: *circleci_docker_primary
        environment:
          AWS_DEFAULT_REGION: us-west-2
          APP_ENV: dev
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-deps-cache-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - v2-node-modules-{{ checksum "yarn.lock" }}
      - run:
          name: Setup custom environment variables
          command: |
            temp_role=$(aws sts assume-role \
                    --role-arn arn:aws:iam::$AWS_ACCOUNT_ID_DEV:role/circleci \
                    --role-session-name circleci)
            echo "export AWS_ACCESS_KEY_ID=$(jq --raw-output .Credentials.AccessKeyId <<< "$temp_role")" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$(jq --raw-output .Credentials.SecretAccessKey <<< "$temp_role")" >> $BASH_ENV
            echo "export AWS_SESSION_TOKEN=$(jq --raw-output .Credentials.SessionToken <<< "$temp_role")" >> $BASH_ENV
      - attach_workspace:
          at: /tmp/builds
      - run:
          name: Deploy storybook assets
          command: |
            ./scripts/release_storybook_static
      - save_cache:
          key: yarn-deps-cache-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - save_cache:
          key: v2-node-modules-{{ checksum "yarn.lock" }}
          paths:
            - ~/project/node_modules
      - run:
          name: Announce failure
          command: |
            ./scripts/circleci-announce-broken-branch
          when: on_fail

workflows:
  version: 2
  compile:
    jobs:
      - pre_deps
      - build_db_migrate_image
      - lint:
          requires:
            - pre_deps
      - client_test:
          requires:
            - pre_deps
      - deploy_storybook_dev:
          filters:
            branches:
              only:
                - master
          requires:
            - client_test
      - test:
          requires:
            - pre_deps
            - build_db_migrate_image
      - build_tag_push:
          requires:
            - test
      - integration_tests:
          requires:
            - lint
            - client_test
            - build_tag_push
      - hold_dev:
          type: approval
          filters:
            branches:
              ignore:
                - master
      - deploy_dev:
          requires:
            - integration_tests
            - hold_dev
      - deploy_impl:
          filters:
            branches:
              only:
                - master
          requires:
            - deploy_dev
      - hold_prod:
          type: approval
          requires:
            - deploy_impl
      - deploy_prod:
          requires:
            - hold_prod
  weekly:
    triggers:
      - schedule:
          cron: '0 2 * * 6'
          filters:
            branches:
              only:
                - master
    jobs:
      - build_db_clean_image

  daily:
    triggers:
      - schedule:
          cron: '0 7 * * *' # 2300 PST, 0200 EST
          filters:
            branches:
              only: master
    jobs:
      - restart_impl_ecs_app_service
      - restart_prod_ecs_app_service
      - rescan_deployed_image
