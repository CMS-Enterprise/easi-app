---
version: 2

references:
  circleci_docker_primary: &circleci_docker_primary trussworks/circleci-docker-primary:tf12-5ee2cb35bc081dbc91da46afc3904ef0e1c111fb
  postgres: &postgres postgres:11.6
  flyway: &flyway flyway/flyway:6.3
jobs:
  test:
    docker:
      - image: *circleci_docker_primary
      - image: *postgres
        environment:
          POSTGRES_DB: easi
          POSTGRES_PASSWORD: easirox
      - image: *flyway
        environment:
          FLYWAY_USER: postgres
          FLYWAY_PASSWORD: easirox
          FLYWAY_URL: jdbc:postgresql://127.0.0.1/easi
        command: [migrate]
    steps:
      - checkout
      - run:
          name: Run easi app tests
          command: |
            ./scripts/build_app
            ./scripts/testsuite
  pre_test:
    docker:
      - image: *circleci_docker_primary
    steps:
      - checkout
      - restore_cache:
          keys:
            - pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
      - restore_cache:
          keys:
            - yarn-deps-cache-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies for pre-commit in yarn (temporary?)
          command: yarn install
      - run:
          name: Run pre-commit checks
          command: pre-commit run --all-files --show-diff-on-failure
      - run:
          name: Run Frontend Tests
          command: yarn test
      - save_cache:
          key: pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
          paths:
            - ~/.cache/pre-commit
      - save_cache:
          key: yarn-deps-cache-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

  build_db_clean_image:
    docker:
      - image: *circleci_docker_primary
        environment:
          AWS_DEFAULT_REGION: us-west-2
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build the db cleaner image and push to ECR
          command: |
            ./scripts/build_db_clean_image

  build_tag_push:
    docker:
      - image: *circleci_docker_primary
        environment:
          AWS_DEFAULT_REGION: us-west-2
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build the app and push to ECR
          command: |
            ./scripts/build_docker_image

  deploy_dev:
    docker:
      - image: *circleci_docker_primary
        environment:
          AWS_DEFAULT_REGION: us-west-2
          APP_ENV: dev
          OKTA_CLIENT_ID: 0oa2e913coDQeG19S297
          REACT_APP_OKTA_CLIENT_ID: 0oa2e913coDQeG19S297
          REACT_APP_OKTA_DOMAIN: https://test.idp.idm.cms.gov
          REACT_APP_OKTA_SERVER_ID: aus2e96etlbFPnBHt297
          REACT_APP_OKTA_ISSUER: https://test.idp.idm.cms.gov/oauth2/aus2e96etlbFPnBHt297
          OKTA_ISSUER: https://test.idp.idm.cms.gov/oauth2/aus2e96etlbFPnBHt297
          REACT_APP_OKTA_REDIRECT_URI: https://dev.easi.cms.gov/implicit/callback
          REACT_APP_API_ADDRESS: https://dev.easi.cms.gov/api/v1
    steps:
      - checkout
      - run:
          name: Setup custom environment variables
          command: |
            temp_role=$(aws sts assume-role \
                    --role-arn arn:aws:iam::$AWS_ACCOUNT_ID_DEV:role/circleci \
                    --role-session-name circleci)
            echo "export AWS_ACCESS_KEY_ID=$(jq --raw-output .Credentials.AccessKeyId <<< "$temp_role")" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$(jq --raw-output .Credentials.SecretAccessKey <<< "$temp_role")" >> $BASH_ENV
            echo "export AWS_SESSION_TOKEN=$(jq --raw-output .Credentials.SessionToken <<< "$temp_role")" >> $BASH_ENV
      - run:
          name: Nuke the database
          command: |
            aws lambda invoke --cli-read-timeout 240 \
                --function easi-app-db-clean \
                --payload '{ "command": "" }' \
                result.json
            exitCode="$(jq '.data.response.taskStatus.exitCode' < result.json)"
            if [[ "$exitCode" != 0 ]] ; then
              : task exited non-zero or exit status could not be parsed
              exit 1
            fi
      - run:
          name: Run migrations
          command: |
            aws lambda invoke --cli-read-timeout 240 \
                --function easi-app-db-migrate \
                --payload '{ "command": "" }' \
                result.json
            exitCode="$(jq '.data.response.taskStatus.exitCode' < result.json)"
            if [[ "$exitCode" != 0 ]] ; then
              : task exited non-zero or exit status could not be parsed
              exit 1
            fi
      - run:
          name: Restart ECS service
          command: |
            ./scripts/restart_ecs
      - run:
          name: Build static assets and release to S3
          command: |
            ./scripts/release_static $STATIC_S3_BUCKET_DEV

  deploy_impl:
    docker:
      - image: *circleci_docker_primary
        environment:
          AWS_DEFAULT_REGION: us-west-2
          APP_ENV: impl
          OKTA_CLIENT_ID: 0oa2sjdaxkwy3TrW1297
          REACT_APP_OKTA_CLIENT_ID: 0oa2sjdaxkwy3TrW1297
          REACT_APP_OKTA_DOMAIN: https://impl.idp.idm.cms.gov
          REACT_APP_OKTA_SERVER_ID: aus2sjf5g6mzGsnSZ297
          REACT_APP_OKTA_ISSUER: https://impl.idp.idm.cms.gov/oauth2/aus2sjf5g6mzGsnSZ297
          OKTA_ISSUER: https://impl.idp.idm.cms.gov/oauth2/aus2sjf5g6mzGsnSZ297
          REACT_APP_OKTA_REDIRECT_URI: https://impl.easi.cms.gov/implicit/callback
          REACT_APP_API_ADDRESS: https://impl.easi.cms.gov/api/v1
    steps:
      - checkout
      - run:
          name: Setup custom environment variables
          command: |
            temp_role=$(aws sts assume-role \
                    --role-arn arn:aws:iam::$AWS_ACCOUNT_ID_IMPL:role/circleci \
                    --role-session-name circleci)
            echo "export AWS_ACCESS_KEY_ID=$(jq --raw-output .Credentials.AccessKeyId <<< "$temp_role")" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$(jq --raw-output .Credentials.SecretAccessKey <<< "$temp_role")" >> $BASH_ENV
            echo "export AWS_SESSION_TOKEN=$(jq --raw-output .Credentials.SessionToken <<< "$temp_role")" >> $BASH_ENV
      - run:
          name: Restart ECS service
          command: |
            ./scripts/restart_ecs
      - run:
          name: Build static assets and release to S3
          command: |
            ./scripts/release_static "$STATIC_S3_BUCKET_IMPL"

workflows:
  version: 2
  compile:
    jobs:
      - pre_test
      - test
      - build_tag_push:
          requires:
            - pre_test
            - test
      - deploy_dev:
          requires:
            - build_tag_push
    # - deploy_impl:
    #     filters:
    #       branches:
    #         only:
    #           - master
    #     requires:
    #       - deploy_dev
  weekly:
    triggers:
      - schedule:
          cron: "0 2 * * 6"
          filters:
            branches:
              only:
                - master
    jobs:
      - build_db_clean_image
