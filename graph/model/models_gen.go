// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Document struct {
	ID      string   `json:"id"`
	Title   string   `json:"title"`
	Key     string   `json:"key"`
	Kind    string   `json:"kind"`
	Project *Project `json:"project"`
}

type DocumentInput struct {
	Title     string       `json:"title"`
	Key       string       `json:"key"`
	Type      DocumentType `json:"type"`
	ProjectID string       `json:"project_id"`
}

type DocumentUpdateResponse struct {
	Success  bool      `json:"success"`
	Message  *string   `json:"message"`
	Document *Document `json:"document"`
}

type Project struct {
	ID        string      `json:"id"`
	Name      string      `json:"name"`
	Documents []*Document `json:"documents"`
}

type ProjectInput struct {
	Name string `json:"name"`
}

type ProjectUpdateResponse struct {
	Success bool     `json:"success"`
	Message *string  `json:"message"`
	Project *Project `json:"project"`
}

type DocumentType string

const (
	DocumentTypeVpat              DocumentType = "VPAT"
	DocumentTypeDesignSessionDeck DocumentType = "DesignSessionDeck"
	DocumentTypeTRBLetter         DocumentType = "TRBLetter"
)

var AllDocumentType = []DocumentType{
	DocumentTypeVpat,
	DocumentTypeDesignSessionDeck,
	DocumentTypeTRBLetter,
}

func (e DocumentType) IsValid() bool {
	switch e {
	case DocumentTypeVpat, DocumentTypeDesignSessionDeck, DocumentTypeTRBLetter:
		return true
	}
	return false
}

func (e DocumentType) String() string {
	return string(e)
}

func (e *DocumentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DocumentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DocumentType", str)
	}
	return nil
}

func (e DocumentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
