scalar DateTime

enum AccessibilityRequestStatus {
  RequestReceived
  DocumentsReceived
  TestScheduled
  RemediationRequested
  RemediationInProgress
  ValidationTestingScheduled
  Completed
}

type AccessibilityRequestNote {
  id: ID!
}
type AccessibilityRequestDocument {
  id: ID!
}

type AccessibilityRequests {
  notes: [AccessibilityRequest!]
}

"""
An accessibility request represents
"""
type AccessibilityRequest {
  id: ID!
  name: String!
  release: String
  status: AccessibilityRequestStatus!
  pointOfContact: Person
  lastUpdatedAt: DateTime
  notes: [AccessibilityRequestNote!]!
  documents: [AccessibilityRequestDocument!]!
  system: System!
}

type Person {
  id: ID!
  name: String!
  email: String!
}

type System {
  id: ID!
  name: String!
  description: String
  businessOwner: Person!
  lifecycleID: String!
}

input CreateAccessibilityRequestInput {
  release: String
  systemID: ID!
}

type CreateAccessibilityRequestSuccess {
  accessibilityRequest: AccessibilityRequest!
}

type CreateAccessibilityRequestFailure {
  message: String!
}

type NotFoundError {
  message: String!
}

union AccessibilityRequestResponse = AccessibilityRequest | NotFoundError

type Query {
  accessibilityRequests: [AccessibilityRequest!]!
  accessibilityRequest(id: ID!): AccessibilityRequestResponse
}

union CreateAccessibilityRequestResponse =
    CreateAccessibilityRequestSuccess
  | CreateAccessibilityRequestFailure

type Mutation {
  createAccessibilityRequest(
    input: CreateAccessibilityRequestInput
  ): CreateAccessibilityRequestResponse
}

interface User {
  name: String!
  email: String!
  component: String!
}

type BusinessOwner implements User {
  name: String!
  email: String!
  component: String!
}
