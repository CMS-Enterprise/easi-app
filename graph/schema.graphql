scalar DateTime

type UserError {
  message: String!
  path: [String!]!
}

enum AccessibilityRequestStatus {
  REQUEST_RECIEVED
  DOCUMENTS_RECIEVED
  TEST_SCHEDULED
  REMEDIATION_REQUESTED
  REMEDIATION_IN_PROGRESS
  VALIDATION_TEST_SCHEDULED
  COMPLETED
}

type NoteAuthor {
  name: String!
}

type AccessibilityRequestNote {
  id: ID!
  author: NoteAuthor!
  createdAt: DateTime!
  body: String!
}
type AccessibilityRequestDocument {
  id: ID!
}

"""
An accessibility request represents
"""
type AccessibilityRequest {
  id: ID!
  name: String!
  release: String
  status: AccessibilityRequestStatus!
  pointOfContact: PointOfContact
  lastUpdatedAt: DateTime
  notes: AccessibilityRequestNotesConnection
  documents: [AccessibilityRequestDocument!]!
  system: System!
}

type BusinessOwner {
  name: String!
  email: String!
  component: String!
}

type PointOfContact {
  name: String!
}

type System {
  id: ID!
  name: String!
  description: String
  businessOwner: BusinessOwner
  lifecycleID: String!
}

input CreateAccessibilityRequestInput {
  release: String
  systemID: ID!
}

type CreateAccessibilityRequestPayload {
  accessibilityRequest: AccessibilityRequest
  userErrors: [UserError!]
}

type AccessibilityRequestsConnection {
  totalCount: Int!
  edges: [AccessibilityRequestEdge!]!
}

type AccessibilityRequestEdge {
  cursor: String!
  node: AccessibilityRequest!
}

type AccessibilityRequestNotesConnection {
  totalCount: Int!
  edges: [AccessibilityRequestNoteEdge!]!
}

type AccessibilityRequestNoteEdge {
  cursor: String!
  node: AccessibilityRequestNote!
}

type Mutation {
  createAccessibilityRequest(
    input: CreateAccessibilityRequestInput
  ): CreateAccessibilityRequestPayload
}

type Query {
  accessibilityRequests(
    first: Int!
    after: String
  ): AccessibilityRequestsConnection
  accessibilityRequest(id: ID!): AccessibilityRequest
}
