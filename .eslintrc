{
  "ignorePatterns": ["**/*.d.ts", "serviceWorker.ts"],
  "globals" : {
    "JSX" : "readonly"
  },
  "extends": [
    "react-app",
    "airbnb",
    "plugin:jsx-a11y/recommended",
    "prettier",
    "prettier/react"
  ],
  "plugins": ["jsx-a11y", "prettier", "cypress", "simple-import-sort"],
  "rules": {
    "import/no-extraneous-dependencies": ["error", { "devDependencies": true }],
    "jsx-a11y/label-has-associated-control": [
      "error",
      {
        "required": {
          "some": ["nesting", "id"]
        }
      }
    ],
    "jsx-a11y/label-has-for": [
      "error",
      {
        "required": {
          "some": ["nesting", "id"]
        }
      }
    ],

    // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-shadow.md#disallow-variable-declarations-from-shadowing-variables-declared-in-the-outer-scope-no-shadow
    "no-shadow": "off",
    "@typescript-eslint/no-shadow": ["error"],

    // https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-use-before-define.md#how-to-use
    "no-use-before-define": "off",
    "@typescript-eslint/no-use-before-define": ["error"],
   
    // We mostly use functional components anyhow
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/require-default-props.md
    "react/require-default-props": "off",

    "no-unused-vars": ["error", { "args": "after-used" }],
    "react/jsx-filename-extension": [1, { "extensions": ["ts", "tsx"] }],
    "prettier/prettier": [
      "error",
      {
        "singleQuote": true
      }
    ],
    "import/extensions": ["error", "never"],
    "simple-import-sort/sort": [
      "error",
      {
        "groups": [
          // Packages. `react` related packages come first.
          ["^react", "^@?\\w"],
          // Internal packages.
          [
            "^(components|constants|contexts|data|hooks|i18n|images|reducers|sagas|types|utils|validations|views)(/.*|$)"
          ],
          // Side effect imports.
          ["^\\u0000"],
          // Parent imports. Put `..` last.
          ["^\\.\\.(?!/?$)", "^\\.\\./?$"],
          // Other relative imports. Put same-folder imports and `.` last.
          ["^\\./(?=.*/)(?!/?$)", "^\\.(?!/?$)", "^\\./?$"],
          // Style imports.
          ["^.+\\.s?css$"]
        ]
      }
    ]
  },
  "settings": {
    "import/resolver": {
      "node": {
        "paths": ["src"],
        "extensions": [".js", ".jsx", ".ts", ".tsx"]
      }
    }
  },
  "env": {
    "cypress/globals": true
  }
}
