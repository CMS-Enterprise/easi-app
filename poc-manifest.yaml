apiVersion: v1
kind: Namespace
metadata:
  name: easi
---
apiVersion: v1
data:
  CEDAR_API_URL: webmethods-apigw.cedarimpl.cms.gov
  CEDAR_CACHE_EXPIRE_TIME: 7d
kind: ConfigMap
metadata:
  name: cedarproxy-configmap
  namespace: easi
  labels:
    fargate: 'true'
---
apiVersion: v1
data:
  POSTGRES_PASSWORD: mysecretpassword
kind: ConfigMap
metadata:
  name: db-configmap
  namespace: easi
  labels:
    fargate: 'true'
---
apiVersion: v1
data:
  ALT_JOB_CODES: "true"
  API_PORT: "8080"
  APP_ENV: local
  AWS_ACCESS_KEY_ID: "1"
  AWS_REGION: us-west-2
  AWS_S3_FILE_UPLOAD_BUCKET: easi-app-file-uploads
  AWS_SECRET_ACCESS_KEY: "1"
  AWS_SES_SOURCE: \"EASi Local\" <no-reply-local@info.easi.cms.gov>
  AWS_SES_SOURCE_ARN: ses-arn
  CEDAR_API_KEY: ""
  CEDAR_API_URL: webmethods-apigw.cedarimpl.cms.gov
  CEDAR_CORE_API_VERSION: 2.0.0
  CEDAR_CORE_MOCK: "true"
  CEDAR_CORE_SKIP_PROXY: "true"
  CEDAR_EMAIL_ADDRESS: EnterpriseArchitecture@notCMS.gov
  CEDAR_INTAKE_ENABLED: "false"
  CEDAR_PROXY_URL: ""
  CLIENT_ADDRESS: http://k8s-easi-easiclie-63a00365fa-835353393.us-west-2.elb.amazonaws.com
  CLIENT_DOMAIN: k8s-easi-easiclie-63a00365fa-835353393.us-west-2.elb.amazonaws.com
  CLIENT_HOSTNAME: k8s-easi-easiclie-63a00365fa-835353393.us-west-2.elb.amazonaws.com:80
  CLIENT_PORT: "80"
  CLIENT_PROTOCOL: http
  DB_MAX_CONNECTIONS: "20"
  EASI_HELP_EMAIL: success@simulator.amazonses.com
  EMAIL_TEMPLATE_DIR: /easi/pkg/email/templates
  FLAG_SOURCE: LOCAL
  FLAGDATA_FILE: ./cypress/fixtures/flagdata.json
  GRT_EMAIL: success@simulator.amazonses.com
  IT_INVESTMENT_EMAIL: success@simulator.amazonses.com
  LD_ENV_USER: ""
  LD_SDK_KEY: ""
  LD_TIMEOUT_SECONDS: "30"
  LOCAL_AUTH_ENABLED: "true"
  MINIO_ACCESS_KEY: minioadmin
  MINIO_ADDRESS: http://minio:9004
  MINIO_SECRET_KEY: minioadmin
  OIT_FEEDBACK_CHANNEL_SLACK_LINK: https://oddball.slack.com/archives/C059N01AYGM
  OKTA_API_TOKEN: ""
  OKTA_API_URL: https://test.idp.idm.cms.gov
  OKTA_CLIENT_ID: 0oa2e913coDQeG19S297
  OKTA_ISSUER: https://test.idp.idm.cms.gov/oauth2/aus2e96etlbFPnBHt297
  PGDATABASE: postgres
  PGHOST: db
  PGPASS: mysecretpassword
  PGPORT: "5432"
  PGSSLMODE: disable
  PGUSER: postgres
  SERVER_CERT: ""
  SERVER_KEY: ""
  TRB_EMAIL: success@simulator.amazonses.com
  USE_TLS: "false"
kind: ConfigMap
metadata:
  labels:
    fargate: 'true'
  name: easi-backend-configmap
  namespace: easi
---
apiVersion: v1
data:
  CHOKIDAR_USEPOLLING: "true"
  ESLINT_NO_DEV_ERRORS: "true"
  VITE_API_ADDRESS: http://k8s-easi-easiback-78b1fb3811-153238768.us-west-2.elb.amazonaws.com/api/v1
  VITE_APP_ENV: local
  VITE_GRAPHQL_ADDRESS: http://k8s-easi-easiback-78b1fb3811-153238768.us-west-2.elb.amazonaws.com/api/graph/query
  VITE_LD_CLIENT_ID: 63231d448bd05a111f06195b
  VITE_LD_ENV_USER: ""
  VITE_LD_USER_HASH: ""
  VITE_LOCAL_AUTH_ENABLED: "true"
  VITE_OKTA_CLIENT_ID: 0oa2e913coDQeG19S297
  VITE_OKTA_DOMAIN: https://test.idp.idm.cms.gov
  VITE_OKTA_ISSUER: https://test.idp.idm.cms.gov/oauth2/aus2e96etlbFPnBHt297
  VITE_OKTA_REDIRECT_URI: http://easi-client:3000/implicit/callback
  VITE_OKTA_SERVER_ID: aus2e96etlbFPnBHt297
kind: ConfigMap
metadata:
  labels:
    fargate: 'true'
  name: easi-client-configmap
  namespace: easi
---
apiVersion: v1
data:
  config.json: |
    {
      "version": "10",
      "aliases": {
        "local": {
          "url": "http://minio:9004",
          "accessKey": "minioadmin",
          "secretKey": "minioadmin",
          "api": "S3v4",
          "path": "auto"
        }
      }
    }
kind: ConfigMap
metadata:
  labels:
    fargate: 'true'
  name: minio-mc-config
  namespace: easi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    fargate: 'true'
  name: cedarproxy
  namespace: easi
spec:
  ports:
  - port: 8001
    targetPort: 8001
  selector:
    app: cedarproxy
---
apiVersion: v1
kind: Service
metadata:
  labels:
    fargate: 'true'
  name: db
  namespace: easi
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: db
---
apiVersion: v1
kind: Service
metadata:
  labels:
    fargate: 'true'
  name: easi-backend
  namespace: easi
spec:
  ports:
  - name: "8080"
    port: 8080
    targetPort: 8080
  - name: "2345"
    port: 2345
    targetPort: 2345
  selector:
    app: easi-backend
---
apiVersion: v1
kind: Service
metadata:
  labels:
    fargate: 'true'
  name: easi-client
  namespace: easi
spec:
  ports:
  - port: 3000
    targetPort: 3000
  selector:
    app: easi-client
---
apiVersion: v1
kind: Service
metadata:
  labels:
    fargate: 'true'
  name: email
  namespace: easi
spec:
  ports:
  - name: smtp
    port: 1025
    targetPort: 1025
  - name: http
    port: 1080
    targetPort: 1080
  selector:
    app: email
---
apiVersion: v1
kind: Service
metadata:
  labels:
    fargate: 'true'
  name: minio
  namespace: easi
spec:
  ports:
  - name: "9004"
    port: 9004
    targetPort: 9004
  - name: console
    port: 9001
    targetPort: 9001
  selector:
    app: minio
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    fargate: 'true'
  name: cedarproxy
  namespace: easi
spec:
  revisionHistoryLimit: 1 
  selector:
    matchLabels:
      app: cedarproxy
  template:
    metadata:
      labels:
        app: cedarproxy
        fargate: 'true'
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: cedarproxy-configmap
        image: 840301899071.dkr.ecr.us-west-2.amazonaws.com/easi-cedarproxy:k8s-test
        imagePullPolicy: Always
        name: cedarproxy
        ports:
        - containerPort: 8001
        resources: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    fargate: 'true'
  name: db
  namespace: easi
spec:
  revisionHistoryLimit: 1 
  replicas: 1
  selector:
    matchLabels:
      app: db
  strategy: {}
  template:
    metadata:
      labels:
        app: db
        fargate: 'true'
    spec:
      containers:
      - args:
        - postgres
        - -c
        - max_connections=25
        envFrom:
        - configMapRef:
            name: db-configmap
        image: postgres:14.11
        name: db
        ports:
        - containerPort: 5432
          protocol: TCP
        resources: {}
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    fargate: 'true'
  name: easi-backend
  namespace: easi
spec:
  revisionHistoryLimit: 1 
  replicas: 1
  selector:
    matchLabels:
      app: easi-backend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: easi-backend
        fargate: 'true'
    spec:
      containers:
      - command:
        - ./bin/easi
        - serve
        envFrom:
        - configMapRef:
            name: easi-backend-configmap
        image: 840301899071.dkr.ecr.us-west-2.amazonaws.com/easi-backend:k8s-test
        imagePullPolicy: IfNotPresent
        name: easi-backend
        ports:
        - containerPort: 8080
          protocol: TCP
        resources: {}
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    fargate: 'true'
    app: easi-client
  name: easi-client
  namespace: easi
spec:
  revisionHistoryLimit: 1 
  replicas: 1
  selector:
    matchLabels:
      app: easi-client
  template:
    metadata:
      labels:
        app: easi-client
        fargate: 'true'
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: easi-client-configmap
        image: 840301899071.dkr.ecr.us-west-2.amazonaws.com/easi-frontend:k8s-test
        imagePullPolicy: IfNotPresent
        name: easi-client
        ports:
        - containerPort: 3000
          protocol: TCP
        resources: 
          limits:
            memory: "2Gi"
            cpu: "1"
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    fargate: 'true'
    app: email
  name: email
  namespace: easi
spec:
  revisionHistoryLimit: 1 
  replicas: 1
  selector:
    matchLabels:
      app: email
  template:
    metadata:
      labels:
        app: email
        fargate: 'true'
    spec:
      containers:
      - image: dockage/mailcatcher:latest
        name: email
        ports:
        - containerPort: 1025
          protocol: TCP
        - containerPort: 1080
          protocol: TCP
        resources: {}
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    fargate: 'true'
  name: minio
  namespace: easi
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: minio
        fargate: 'true'
    spec:
      containers:
      - args:
        - :9001
        - --address
        - :9004
        command:
        - minio
        - server
        - /data
        - --console-address
        image: minio/minio:latest
        name: minio
        ports:
        - containerPort: 9004
          protocol: TCP
        - containerPort: 9001
          protocol: TCP
        resources: {}
      restartPolicy: Always
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    fargate: 'true'
    app: db-migrate
  name: db-migrate
  namespace: easi
spec:
  backoffLimit: 4
  completions: 1
  parallelism: 1
  template:
    metadata:
      labels:
        app: db-migrate
        fargate: 'true'
    spec:
      containers:
      - env:
        - name: FLYWAY_PASSWORD
          value: mysecretpassword
        - name: FLYWAY_PLACEHOLDERS_APP_USER_PASSWORD
          value: supersecretapp
        - name: FLYWAY_URL
          value: jdbc:postgresql://db/postgres
        - name: FLYWAY_USER
          value: postgres
        image: 840301899071.dkr.ecr.us-west-2.amazonaws.com/easi-db-migrate:k8s-test
        imagePullPolicy: Always
        name: db-migrate
        resources: {}
      restartPolicy: Never
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    fargate: 'true'
    app: minio-mc
  name: minio-mc
  namespace: easi
spec:
  backoffLimit: 4
  completions: 1
  parallelism: 1
  template:
    metadata:
      labels:
        app: minio-mc
        fargate: 'true'
    spec:
      containers:
      - args:
        - /usr/bin/mc mb local/easi-app-file-uploads/; /usr/bin/mc anonymous set public
          local/easi-app-file-uploads
        command:
        - /bin/sh
        - -c
        image: minio/mc:latest
        name: minio-mc
        resources: {}
        volumeMounts:
        - mountPath: /root/.mc/config.json
          name: minio-mc-config
          subPath: config.json
      restartPolicy: Never
      volumes:
      - configMap:
          name: minio-mc-config
        name: minio-mc-config
  ttlSecondsAfterFinished: 1000
---
