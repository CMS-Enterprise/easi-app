name: Deploy 

on: 
  push: 
    branches: 
      - master 
  pull_request:
    branches:  
      - master 

 




jobs:
  Build: 
    uses: ./.github/workflows/initial_build.yml 

  Server_Test: 
    uses: ./.github/workflows/server_test.yml 
    needs: Build

  deploy_dev: 
    needs: Server_Test
    concurrency: ci-${{ github.ref }}
    if: ${{ github.ref == 'refs/heads/master' || contains(github.event.pull_request.labels.*.name, 'deploy_dev') }}
    # needs: [ lint, client_test, server_test, e2e_tests, anti_virus ]
    runs-on: ubuntu-latest
    environment: dev
    env:
      APP_ENV: dev
    steps:
      - name: Check out code
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up node
        uses: actions/setup-node@9ced9a43a244f3ac94f13bfd896db8c8f30da67a
        with:
          node-version: ${{ env.EASI_APP_NODE_VERSION }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Configure yarn cache
        uses: actions/cache@937d24475381cd9c75ae6db12cb4e79714b926ed
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            ./node_modules
          key: v1-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@05b148adc31e091bafbaf404f745055d4d3bc9d2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
          role-duration-seconds: 1800
          role-skip-session-tagging: true
      - name: Clean the database
        run: |
          ./scripts/db_lambda_invoke "easi-app-db-clean-tmp" "2" "easi-app-db-clean"
      - name: Run migrations
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: easi-db-migrate
        run: |
          ./scripts/deploy_service "easi-app-db-migrate" "dev-ecs-manager-docker" "8" "easi-db-migrate" "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          ./scripts/db_lambda_invoke "dev-ecs-manager-docker" "8" "easi-app-db-migrate"
      - name: Deploy ECS service
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: easi-backend
        run: |
          ./scripts/deploy_service "easi-app" "dev-ecs-manager-docker" "8" "easi-backend" "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          ./scripts/healthcheck "$IMAGE_TAG"
      - name: Build static assets and release to S3
        env:
          LD_CLIENT_ID_DEV: ${{ secrets.LD_CLIENT_ID_DEV }}
          OKTA_CLIENT_ID_DEV: ${{ secrets.OKTA_CLIENT_ID_DEV }}
          OKTA_SERVER_ID_DEV: ${{ secrets.OKTA_SERVER_ID_DEV }}
          STATIC_S3_BUCKET_DEV: ${{ secrets.STATIC_S3_BUCKET_DEV }}
        run: |
          ./scripts/release_static
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  deploy_impl:
    needs: deploy_dev
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    environment: impl
    env:
      APP_ENV: impl
    steps:
      - name: Check out code
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up node
        uses: actions/setup-node@9ced9a43a244f3ac94f13bfd896db8c8f30da67a
        with:
          node-version: ${{ env.EASI_APP_NODE_VERSION }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Configure yarn cache
        uses: actions/cache@937d24475381cd9c75ae6db12cb4e79714b926ed
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            ./node_modules
          key: v1-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@05b148adc31e091bafbaf404f745055d4d3bc9d2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_IMPL }}
          role-duration-seconds: 1800
          role-skip-session-tagging: true
      - name: Backup the database
        run: |
          ./scripts/rds-snapshot-app-db
      - name: Run migrations
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: easi-db-migrate
        run: |
          ./scripts/deploy_service "easi-app-db-migrate" "impl-ecs-manager-docker" "7" "easi-db-migrate" "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          ./scripts/db_lambda_invoke "impl-ecs-manager-docker" "7" "easi-app-db-migrate"
      - name: Deploy ECS service
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: easi-backend
        run: |
          ./scripts/deploy_service "easi-app" "impl-ecs-manager-docker" "7" "easi-backend" "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          ./scripts/healthcheck "$IMAGE_TAG"
      - name: Build static assets and release to S3
        env:
          LD_CLIENT_ID_IMPL: ${{ secrets.LD_CLIENT_ID_IMPL }}
          OKTA_CLIENT_ID_IMPL: ${{ secrets.OKTA_CLIENT_ID_IMPL }}
          OKTA_SERVER_ID_IMPL: ${{ secrets.OKTA_SERVER_ID_IMPL }}
          STATIC_S3_BUCKET_IMPL: ${{ secrets.STATIC_S3_BUCKET_IMPL }}
        run: |
          ./scripts/release_static
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  deploy_prod:
    needs: deploy_impl
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    environment: prod
    env:
      APP_ENV: prod
    steps:
      - name: Check out code
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up node
        uses: actions/setup-node@9ced9a43a244f3ac94f13bfd896db8c8f30da67a
        with:
          node-version: ${{ env.EASI_APP_NODE_VERSION }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Configure yarn cache
        uses: actions/cache@937d24475381cd9c75ae6db12cb4e79714b926ed
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            ./node_modules
          key: v1-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            v1-yarn-
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@05b148adc31e091bafbaf404f745055d4d3bc9d2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_PROD }}
          role-duration-seconds: 1800
          role-skip-session-tagging: true
      - name: Backup the database
        run: |
          ./scripts/rds-snapshot-app-db
      - name: Run migrations
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: easi-db-migrate
        run: |
          ./scripts/deploy_service "easi-app-db-migrate" "prod-ecs-manager-docker" "6" "easi-db-migrate" "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          ./scripts/db_lambda_invoke "prod-ecs-manager-docker" "6" "easi-app-db-migrate"
      - name: Deploy ECS service
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: easi-backend
        run: |
          ./scripts/deploy_service "easi-app" "prod-ecs-manager-docker" "6" "easi-backend" "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          ./scripts/healthcheck "$IMAGE_TAG"
      - name: Build static assets and release to S3
        env:
          LD_CLIENT_ID_PROD: ${{ secrets.LD_CLIENT_ID_PROD }}
          OKTA_CLIENT_ID_PROD: ${{ secrets.OKTA_CLIENT_ID_PROD }}
          OKTA_SERVER_ID_PROD: ${{ secrets.OKTA_SERVER_ID_PROD }}
          STATIC_S3_BUCKET_PROD: ${{ secrets.STATIC_S3_BUCKET_PROD }}
        run: |
          ./scripts/release_static
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch
