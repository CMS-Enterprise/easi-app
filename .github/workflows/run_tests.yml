name: Run Tests

on:
  workflow_call:
    inputs:
      skip_tests:
        required: false
        type: boolean
        default: false

env:
  EASI_APP_NODE_VERSION: "16.14.0"
  GIT_HASH: ${{ github.sha }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  DOCKER_BUILDKIT: 1
  GIT_REF_NAME: ${{ github.ref }}

jobs:
  skip_tests:
    if: ${{ inputs.skip_tests == true }}
    runs-on: ubuntu-latest
    steps:
      - name: Skipping tests
        run: |
            echo "Skipping tests!"
  server_test:
    if: ${{ inputs.skip_tests == false }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Run backend server tests
        env:
          APP_ENV: test
          AWS_REGION: us-west-2 # easi app tests expect AWS_REGION instead of AWS_DEFAULT_REGION
          AWS_SES_SOURCE: '"EASi Test" <no-reply-test@info.easi.cms.gov>'
          AWS_SES_SOURCE_ARN: ${{ secrets.AWS_SES_SOURCE_ARN }}
          AWS_S3_FILE_UPLOAD_BUCKET: easi-app-file-uploads
          CEDAR_CORE_MOCK: true # Don't want real calls to CEDAR in our CI env
          CEDAR_INTAKE_ENABLED: false # Don't want real calls to CEDAR in our CI env
          CLIENT_PROTOCOL: http
          CLIENT_PORT: 3000
          CLIENT_HOSTNAME: localhost:3000
          CEDAR_EMAIL_ADDRESS: fake@cedar.gov
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: easi-db-migrate
          GRT_EMAIL: success@simulator.amazonses.com
          IT_INVESTMENT_EMAIL: success@simulator.amazonses.com
          EASI_HELP_EMAIL: success@simulator.amazonses.com
          TRB_EMAIL: success@simulator.amazonses.com
          OKTA_CLIENT_ID: 0oa2e913coDQeG19S297
          OKTA_DOMAIN: https://test.idp.idm.cms.gov
          OKTA_ISSUER: https://test.idp.idm.cms.gov/oauth2/aus2e96etlbFPnBHt297
          OKTA_REDIRECT_URI: http://localhost:3000/implicit/callback
          OKTA_TEST_PASSWORD: ${{ secrets.OKTA_TEST_PASSWORD }}
          OKTA_TEST_SECRET: ${{ secrets.OKTA_TEST_SECRET }}
          OKTA_TEST_USERNAME: ${{ secrets.OKTA_TEST_USERNAME }}
          PGHOST: localhost
          PGPORT: 5432
          PGDATABASE: postgres
          PGUSER: postgres
          PGPASS: mysecretpassword
          PGSSLMODE: disable
          DB_MAX_CONNECTIONS: 20
          FLAG_SOURCE: LOCAL
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin
          MINIO_ADDRESS: http://localhost:9000 # Server tests run outside of container, so use exposed port on localhost for MinIO
        run: |
          docker-compose --project-name easi-server-test -f docker-compose.ci_server_test.yml up -d db
          docker-compose --project-name easi-server-test -f docker-compose.ci_server_test.yml up --exit-code-from db_migrate db_migrate
          docker-compose --project-name easi-server-test -f docker-compose.ci_server_test.yml up -d minio
          docker-compose --project-name easi-server-test -f docker-compose.ci_server_test.yml up --exit-code-from minio_mc minio_mc
          ./scripts/build_app
          ./scripts/testsuite
          docker-compose --project-name easi-server-test -f docker-compose.ci_server_test.yml down
      - name: Upload backend test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-tests
          path: results
          retention-days: 14
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  e2e_tests:
    if: ${{ inputs.skip_tests == false }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Download Frontend assets
        uses: actions/download-artifact@v4
        with:
          name: test-frontend-assets
          path: build/
      - name: Buildx Bake testing images
        uses: docker/bake-action@v4
        with:
          files: docker-compose.cypress_ci.yml
          load: true
          targets: db_seed,easi_client,cypress
          set: |
            db_seed.cache-from=type=gha,scope=${{ env.GIT_REF_NAME }}-db_seed
            db_seed.cache-to=type=gha,mode=max,scope=${{ env.GIT_REF_NAME }}-db_seed
            easi_client.cache-from=type=gha,scope=${{ env.GIT_REF_NAME }}-easi_client
            easi_client.cache-to=type=gha,mode=max,scope=${{ env.GIT_REF_NAME }}-eaasi_client
            cypress.cache-from=type=gha,scope=${{ env.GIT_REF_NAME }}-easi_cypress
            cypress.cache-to=type=gha,mode=max,scope=${{ env.GIT_REF_NAME }}-easi_cypress
      - name: Run e2e cypress tests
        env:
          APP_ENV: test
          AWS_SES_SOURCE_ARN: ${{ secrets.AWS_SES_SOURCE_ARN }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          OKTA_TEST_PASSWORD: ${{ secrets.OKTA_TEST_PASSWORD }}
          OKTA_TEST_SECRET: ${{ secrets.OKTA_TEST_SECRET }}
          OKTA_TEST_USERNAME: ${{ secrets.OKTA_TEST_USERNAME }}
          CEDAR_CORE_MOCK: true # Don't want real calls to CEDAR in our CI env
          CEDAR_INTAKE_ENABLED: false # Don't want real calls to CEDAR in our CI env
        run: |
          ./scripts/run-cypress-test-docker
      - name: Upload cypress videos
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos
          path: cypress/videos
          retention-days: 14
      - name: Upload cypress screenshots
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          if-no-files-found: ignore
          retention-days: 14
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  lint:
    if: ${{ inputs.skip_tests == false }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.EASI_APP_NODE_VERSION }}
          cache: 'yarn'
      - name: Install yarn dependencies
        run: yarn install --frozen-lockfile
      - name: Set up go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      # go-swagger is used for pre-commit hooks
      - name: Install go-swagger
        id: install-go-swagger
        run: |
          cd /usr/local/bin
          wget -O swagger https://github.com/go-swagger/go-swagger/releases/download/v0.30.5/swagger_linux_amd64
          chmod +x swagger
      - name: Pre-commit checks
        uses: pre-commit/action@v3.0.1
        with:
          extra_args: --all-files
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  client_test:
    if: ${{ inputs.skip_tests == false }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.EASI_APP_NODE_VERSION }}
          cache: 'yarn'
      - name: Install yarn dependencies
        run: yarn install --frozen-lockfile
      - run: yarn test:coverage
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  client_typecheck:
    if: ${{ inputs.skip_tests == false }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.EASI_APP_NODE_VERSION }}
          cache: 'yarn'
      - name: Install yarn dependencies
        run: yarn install --frozen-lockfile
      - name: Run typechecking
        id: typechecker
        # Uses GitHub environment files to store typechecker output and pass to next stage
        # see https://github.com/actions/toolkit/blob/main/docs/commands.md#environment-files
        run: |
          yarn build:ts 2>&1 | tee test.log
          result_code=${PIPESTATUS[0]}
          echo 'TS_LOG<<EOF' >> $GITHUB_ENV
          cat test.log >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          exit $result_code
