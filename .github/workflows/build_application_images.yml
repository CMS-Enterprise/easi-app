name: Build and Push Application Images

on:
  workflow_call:

env:
  EASI_APP_NODE_VERSION: "16.14.0"
  GIT_HASH: ${{ github.sha }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  GIT_REF_NAME: ${{ github.ref }}

permissions:
  id-token: write
  contents: read

jobs:
  pre_deps:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.EASI_APP_NODE_VERSION }}
          cache: 'yarn'
      - name: Set up go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Install yarn dependencies
        run: yarn install --frozen-lockfile
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  anti_virus:
    runs-on: ubuntu-latest
    container:
      image: clamav/clamav:0.104.0
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - run: clamscan --version
      - run: mkdir -p /store && chown clamav /store
      - run: freshclam --config-file /etc/clamav/freshclam.conf --datadir=/store
      - run: clamscan --recursive --infected --detect-pua=yes --max-scansize=300M --max-filesize=100M --max-recursion=30 --max-files=50000 --tempdir=/tmp --database=/store .
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  build_db_migrate_image:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ secrets.AWS_INFRA_OIDC_ROLE_TO_ASSUME }}
          aws-region: us-west-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build, tag, and push image to Amazon ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.db_migrations
          build-args: |
            TAG=9.10-alpine
          push: true
          cache-to: type=gha,mode=max,scope=${{ env.GIT_REF_NAME }}-easi-db-migrate
          cache-from: type=gha,scope=${{ env.GIT_REF_NAME }}-easi-db-migrate
          tags: ${{ steps.login-ecr.outputs.registry }}/easi-db-migrate:${{ env.GIT_HASH }}
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch

  build_server_image:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: ${{ secrets.AWS_INFRA_OIDC_ROLE_TO_ASSUME }}
          aws-region: us-west-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Calculate build args
        id: calculate-build-args
        run: |
          APPLICATION_DATETIME="$(date --rfc-3339='seconds' --utc)"
          APPLICATION_TS="$(date --date="$APPLICATION_DATETIME" '+%s')"
          echo "APPLICATION_DATETIME=${APPLICATION_DATETIME}" >> $GITHUB_OUTPUT
          echo "APPLICATION_TS=${APPLICATION_TS}" >> $GITHUB_OUTPUT
      - name: Build, tag, and push image to Amazon ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/easi-backend:${{ env.GIT_HASH }}
          cache-from: type=gha,scope=${{ env.GIT_REF_NAME }}-easi-backend
          cache-to: type=gha,mode=max,scope=${{ env.GIT_REF_NAME }}-easi-backend
          build-args: |
            ARG_APPLICATION_VERSION=${{ env.GIT_HASH }}
            ARG_APPLICATION_DATETIME=${{ steps.calculate-build-args.outputs.APPLICATION_DATETIME }}
            ARG_APPLICATION_TS=${{ steps.calculate-build-args.outputs.APPLICATION_TS }}
          # As of Buildx verion 0.10, image are build with provenance by default.
          # Lambda currently does not support functions that use multi-architecture container images (https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-reqs)
          # As such, the Lambda for vulnerability scanning will fail if the image is built with provenance.
          # More information can be found here: https://github.com/docker/buildx/issues/1533
          provenance: false
      - name: Check for vulnerability scan findings
        run: |
          ./scripts/check_ecr_findings.sh "easi-backend" "${{ env.GIT_HASH }}"
        # We've had too many issues with undefined or low-level vulnerabilities blocking our pipeline
        # We're going to ignore them for now, but continue to scan and log them.
        continue-on-error: true
      - name: Announce failure
        if: ${{ failure() }}
        run: |
          ./scripts/github-action-announce-broken-branch
