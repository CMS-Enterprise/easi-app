name: 'Dev deploy'
description: 'Deploys the application to the dev environment'
runs:
  using: 'composite'
  steps:
    - name: Check out code
      uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Set up node
      uses: actions/setup-node@46071b5c7a2e0c34e49c3cb8a0e792e86e18d5ea # v2.1.5
      with:
        node-version: ${{ env.EASI_APP_NODE_VERSION }}
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: Configure yarn cache
      uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # v2.1.6
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: |
          ${{ steps.yarn-cache-dir-path.outputs.dir }}
          ./node_modules
        key: v1-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          v1-yarn-
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3 # v1.5.10
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
        role-duration-seconds: 1800
        role-skip-session-tagging: true
    - name: Clean the database
      env:
        APP_ENV: dev
      run: |
        ./scripts/db_lambda_invoke "easi-app-db-clean-tmp" "2" "easi-app-db-clean"
    - name: Run migrations
      env:
        APP_ENV: dev
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        ECR_REPOSITORY: easi-db-migrate
        IMAGE_TAG: actions-${{ github.event.pull_request.head.sha }}
      run: |
        ./scripts/deploy_service "easi-app-db-migrate" "dev-ecs-manager-docker" "6" "easi-db-migrate" "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        ./scripts/db_lambda_invoke "dev-ecs-manager-docker" "6" "easi-app-db-migrate"
    - name: Deploy ECS service
      env:
        APP_ENV: dev
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        ECR_REPOSITORY: easi-backend
        IMAGE_TAG: actions-${{ github.event.pull_request.head.sha }}
      run: |
        ./scripts/deploy_service "easi-app" "dev-ecs-manager-docker" "6" "easi-backend" "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        ./scripts/healthcheck "$IMAGE_TAG"
    - name: Build static assets and release to S3
      env:
        APP_ENV: dev
        LD_CLIENT_ID_DEV: ${{ secrets.LD_CLIENT_ID_DEV }}
        OKTA_CLIENT_ID_DEV: ${{ secrets.OKTA_CLIENT_ID_DEV }}
        OKTA_SERVER_ID_DEV: ${{ secrets.OKTA_SERVER_ID_DEV }}
        STATIC_S3_BUCKET_DEV: ${{ secrets.STATIC_S3_BUCKET_DEV }}
      run: |
        ./scripts/release_static
