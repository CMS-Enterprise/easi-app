meta {
  name: Issue LCID, with existing LCID specified
  type: graphql
  seq: 1
}

post {
  url: {{url}}
  body: graphql
  auth: inherit
}

body:graphql {
  mutation IssueLCID ($input: SystemIntakeIssueLCIDInput!) {
      createSystemIntakeActionIssueLCID(input:$input) {
          userErrors {
              message
              path
          }
          systemIntake {
              step
              state
              decisionState
              lcid
              lcidExpiresAt
              lcidScope
              lcidCostBaseline
              decisionNextSteps
              trbFollowUpRecommendation
          }
      }
  }
}

body:graphql:vars {
  {
      "input": {
          "systemIntakeID": "{{systemIntakeID}}",
          "notificationRecipients": {
              "regularRecipientEmails": [
                  "{{testEmailAddress}}"
              ],
              "shouldNotifyITGovernance": false,
              "shouldNotifyITInvestment": false
          },
          "lcid": "123456",
          "expiresAt": "2030-07-28T20:12:31.703Z",
          "scope": "scope for existing LCID",
          "nextSteps": "enjoy recycling LCIDs, you're saving the environment",
          "trbFollowUp": "RECOMMENDED_BUT_NOT_CRITICAL",
          "costBaseline": "one milllllion dollars",
          "additionalInfo": "some info for the email about the existing LCID being referenced",
          "adminNote": "don't you think they should maybe ask for more than a million dollars?"
      }
  }
}

settings {
  encodeUrl: true
}
